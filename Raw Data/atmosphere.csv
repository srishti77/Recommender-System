ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AsyncSupportServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<AsyncSupport> annotatedClass){ try { framework.setAsyncSupport(new DefaultAsyncSupportResolver(framework.getAtmosphereConfig()).newCometSupport(annotatedClass.getName())); } catch ( Throwable e) 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AsyncSupportListenerServiceProcessor.java,handle,"@Override public void  (AtmosphereFramework framework Class<AsyncSupportListener> annotatedClass){ try { framework.asyncSupportListener(framework.newClassInstance(AsyncSupportListener.class annotatedClass)); } catch ( Throwable e) { logger.warn("""" e); } }"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,atmosphereConfig,"public static void  (String[] m AtmosphereFramework framework){ for ( String s : m) { String[] nv=s.split(""=""); framework.addInitParameter(nv[0] nv[1]); framework.reconfigureInitParams(true); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,broadcaster,public static Broadcaster  (AtmosphereFramework framework Class<? extends Broadcaster> broadcaster String path) throws Exception { return framework.getBroadcasterFactory().lookup(broadcasterClass(framework broadcaster) path true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,broadcasterClass,public static Class<? extends Broadcaster>  (AtmosphereFramework framework Class<? extends Broadcaster> broadcaster) throws Exception { if (framework.isBroadcasterSpecified()) { try { broadcaster=(Class<? extends Broadcaster>)framework.getClass().getClassLoader().loadClass(framework.getDefaultBroadcasterClassName()); } catch ( ClassNotFoundException ex) { broadcaster=(Class<? extends Broadcaster>)Thread.currentThread().getContextClassLoader().loadClass(framework.getDefaultBroadcasterClassName()); } } return broadcaster; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,checkDefault,public static boolean  (Class<? extends AtmosphereInterceptor> i){ return !MANAGED_ATMOSPHERE_INTERCEPTORS.contains(i) && !AtmosphereFramework.DEFAULT_ATMOSPHERE_INTERCEPTORS.contains(i); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,defaultManagedServiceInterceptors,public static void  (AtmosphereFramework framework List<AtmosphereInterceptor> l){ interceptorsForManagedService(framework MANAGED_ATMOSPHERE_INTERCEPTORS l false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,filters,public static void  (Class<? extends BroadcastFilter>[] bf AtmosphereFramework framework) throws IllegalAccessException  InstantiationException { for ( Class<? extends BroadcastFilter> b : bf) { framework.broadcasterFilters(framework.newClassInstance(BroadcastFilter.class b)); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,inspect,@Override public Action  (AtmosphereResource r){ if (!r.isSuspended()) { for ( Class<? extends AtmosphereResourceEventListener> l : listeners) { try { r.addEventListener(framework.newClassInstance(AtmosphereResourceEventListener.class l)); } catch ( Throw
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,interceptors,"public static void  (Class<? extends AtmosphereInterceptor>[] interceptors AtmosphereFramework framework){ for ( Class<? extends AtmosphereInterceptor> i : interceptors) { try { framework.interceptor(framework.newClassInstance(AtmosphereInterceptor.class i)); } catch ( Throwable e) { logger.warn("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,interceptorsForHandler,"public static void  (AtmosphereFramework framework List<Class<? extends AtmosphereInterceptor>> interceptors List<AtmosphereInterceptor> l){ for ( Class<? extends AtmosphereInterceptor> i : interceptors) { if (!framework.excludedInterceptors().contains(i.getName()) && (!AtmosphereFramework.DEFAULT_ATMOSPHERE_INTERCEPTORS.contains(i))) { try { logger.info(""Adding {}"" i); l.add(framework.newClassInstance(AtmosphereInterceptor.class i)); } catch ( Throwable e) { logger.warn("""" e); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,interceptorsForManagedService,"public static void  (AtmosphereFramework framework List<Class<? extends AtmosphereInterceptor>> interceptors List<AtmosphereInterceptor> l boolean checkDuplicate){ for ( Class<? extends AtmosphereInterceptor> i : interceptors) { if (!framework.excludedInterceptors().contains(i.getName()) && (!checkDuplicate || checkDefault(i))) { try { logger.info(""Adding {}"" i); l.add(framework.newClassInstance(AtmosphereInterceptor.class i)); } catch ( Throwable e) { logger.warn("""" e); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,listeners,"public static AtmosphereInterceptor  (final Class<? extends AtmosphereResourceEventListener>[] listeners final AtmosphereFramework framework){ if (listeners.length > 0) { try { return new AtmosphereInterceptorAdapter(){ @Override public Action inspect( AtmosphereResource r){ if (!r.isSuspended()) { for ( Class<? extends AtmosphereResourceEventListener> l : listeners) { try { r.addEventListener(framework.newClassInstance(AtmosphereResourceEventListener.class l)); } catch ( Throwable e) { logger.warn("""" e); } } } return Action.CONTINUE; } @Override public String toString(){ return ""@Service Event Listeners""; } } ; } catch ( Throwable e) { logger.warn("""" e); } } return null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AnnotationUtil.java,toString,"@Override public String  (){ return ""@Service Event Listeners""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereInterceptorServiceProcessor.java,handle,@Override public void  (final AtmosphereFramework framework Class<AtmosphereInterceptor> annotatedClass){ try { final AtmosphereInterceptor a=(AtmosphereInterceptor)framework.newClassInstance(AtmosphereInterceptor.class annotatedClass); framework.getAtmos
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereInterceptorServiceProcessor.java,started,@Override public void  (AtmosphereFramework framework){ framework.interceptor(a); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereFrameworkServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<AtmosphereFrameworkListener> annotatedClass){ try { framework.frameworkListener(framework.newClassInstance(AtmosphereFrameworkListener.class annotatedClass)); } catch ( Exception e) { logger.erro
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereResourceFactoryServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<AtmosphereResourceFactory> annotatedClass){ try { framework.setAndConfigureAtmosphereResourceFactory(framework.newClassInstance(AtmosphereResourceFactory.class annotatedClass)); } catch ( Throwab
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereHandlerServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<AtmosphereHandler> annotatedClass){ try { AtmosphereHandlerService a=annotatedClass.getAnnotation(AtmosphereHandlerService.class); atmosphereConfig(a.atmosphereConfig() framework); filters(a.broa
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterCacheInspectorServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<BroadcasterCacheInspector> annotatedClass){ try { framework.addBroadcasterCacheInjector(framework.newClassInstance(BroadcasterCacheInspector.class annotatedClass)); } catch ( Throwable e) { logge
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,destroy,@Override public void  (){ r.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<Object> annotatedClass){ try { Class<?> aClass=annotatedClass; AtmosphereService a=aClass.getAnnotation(AtmosphereService.class); framework.setBroadcasterCacheClassName(a.broadcasterCache().getNa
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,init,@Override public void  (AtmosphereConfig config) throws ServletException { String s=config.getInitParameter(ATMOSPHERERESOURCE_INTERCEPTOR_METHOD); if (s != null) { method=s; } r.init(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { if (!resource.getRequest().getMethod().equalsIgnoreCase(method)) { r.onRequest(resource); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereServiceProcessor.java,onStateChange,@Override public void  (AtmosphereResourceEvent event) throws IOException { r.onStateChange(event); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterCacheServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<BroadcasterCache> annotatedClass){ framework.setBroadcasterCacheClassName(annotatedClass.getName()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\AtmosphereResourceListenerServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<AtmosphereResourceListener> annotatedClass){ try { framework.atmosphereResourceListener(framework.newClassInstance(AtmosphereResourceListener.class annotatedClass)); } catch ( Throwable e) { logg
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterCacheListenererviceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<BroadcasterCacheListener> annotatedClass){ try { framework.addBroadcasterCacheListener(framework.newClassInstance(BroadcasterCacheListener.class annotatedClass)); } catch ( Exception e) { logger.
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<Broadcaster> annotatedClass){ framework.setDefaultBroadcasterClassName(annotatedClass.getName()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterFactoryServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<BroadcasterFactory> annotatedClass){ try { framework.setBroadcasterFactory(framework.newClassInstance(BroadcasterFactory.class annotatedClass)); framework.configureBroadcasterFactory(); } catch (
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcastFilterServiceProcessor.java,handle,"@Override public void  (AtmosphereFramework framework Class<BroadcastFilter> annotatedClass){ try { framework.broadcasterFilters((BroadcastFilter)framework.newClassInstance(BroadcastFilter.class annotatedClass)); } catch ( Exception e) { logger.warn("""" e)"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\EndpointMapperServiceProcessor.java,handle,"@Override public void  (AtmosphereFramework framework Class<EndpointMapper> annotatedClass){ try { framework.endPointMapper((EndpointMapper<?>)framework.newClassInstance(EndpointMapper.class annotatedClass)); } catch ( Throwable e) { logger.warn("""" e); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\BroadcasterListenerServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<BroadcasterListener> annotatedClass){ try { BroadcasterListener l=framework.newClassInstance(BroadcasterListener.class annotatedClass); framework.addBroadcasterListener(l); Collection<Broadcaster
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\ManagedServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<Object> annotatedClass){ try { Class<?> aClass=annotatedClass; ManagedService a=aClass.getAnnotation(ManagedService.class); framework.setBroadcasterCacheClassName(a.broadcasterCache().getName());
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\ManagedServiceProcessor.java,unwrap,@Override public Object  (Object o){ if (o != null && ManagedAtmosphereHandler.Managed.class.isAssignableFrom(o.getClass())) { o=ManagedAtmosphereHandler.Managed.class.cast(o).object(); } return o; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\ManagedServiceProcessor.java,wrap,@Override public BroadcastFilter.BroadcastAction  (BroadcastFilter.BroadcastAction a boolean wasWrapped){ if (wasWrapped) { return new BroadcastFilter.BroadcastAction(a.action() new ManagedAtmosphereHandler.Managed(a.message())); } else { return a; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\MeteorServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<Servlet> annotatedClass){ try { ReflectorServletProcessor r=framework.newClassInstance(ReflectorServletProcessor.class ReflectorServletProcessor.class); r.setServletClassName(annotatedClass.getNa
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\UUIDProviderServiceProcessor.java,handle,"@Override public void  (AtmosphereFramework framework Class<UUIDProvider> annotatedClass){ try { framework.uuidProvider(framework.newClassInstance(UUIDProvider.class annotatedClass)); } catch ( Throwable e) { logger.warn("""" e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\WebSocketFactoryServiceProcessor.java,handle,"@Override public void  (AtmosphereFramework framework Class<WebSocketFactory> annotatedClass){ try { framework.webSocketFactory(framework.newClassInstance(WebSocketFactory.class annotatedClass)); } catch ( Throwable e) { logger.warn("""" e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\WebSocketHandlerServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<WebSocketHandler> annotatedClass){ try { WebSocketHandlerService m=annotatedClass.getAnnotation(WebSocketHandlerService.class); atmosphereConfig(m.atmosphereConfig() framework); framework.addAtmo
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\WebSocketProcessorServiceProcessor.java,handle,"@Override public void  (AtmosphereFramework framework Class<WebSocketProcessor> annotatedClass){ try { if (!hasBeenSet) { hasBeenSet=true; framework.setWebsocketProcessorClassName(annotatedClass.getName()); } else { logger.warn(""WebSocketProcessor already"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\annotation\WebSocketProtocolServiceProcessor.java,handle,@Override public void  (AtmosphereFramework framework Class<WebSocketProtocol> annotatedClass){ framework.setWebSocketProtocolClassName(annotatedClass.getName()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,CacheMessage,public  (String id Long now Object message String uuid String broadcasterId){ this.id=id; this.message=message; this.createTime=now; this.uuid=uuid; this.broadcasterId=broadcasterId; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,getBroadcasterId,public String  (){ return this.broadcasterId; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,getCreateTime,public long  (){ return createTime; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,getMessage,public Object  (){ return message; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,toString,public String  (){ return message.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\CacheMessage.java,uuid,public String  (){ return uuid; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\BroadcastMessage.java,BroadcastMessage,public  (Object message){ this(UUID.randomUUID().toString() message); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\BroadcastMessage.java,id,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\BroadcastMessage.java,message,public Object  (){ return message; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,addBroadcasterCacheListener,"@Override public BroadcasterCache  (BroadcasterCacheListener l){ logger.warn(""Not supported""); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,cacheCandidate,"@Override public BroadcasterCache  (String broadcasterId String uuid){ logger.warn(""Not supported""); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,cleanup,@Override public void  (){ if (scheduledFuture != null) { scheduledFuture.cancel(false); scheduledFuture=null; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,clearCache,@Override public BroadcasterCache  (String broadcasterId String uuid CacheMessage cache){ if (cache != null) { messages.remove(cache); messagesIds.remove(cache.getId()); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,configure,"@Override public void  (AtmosphereConfig config){ Object o=config.properties().get(""shared""); if (o != null) { isShared=Boolean.parseBoolean(o.toString()); } if (isShared) { reaper=ExecutorsFactory.getScheduler(config); } else { reaper=Executors.newSingle"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,excludeFromCache,"@Override public BroadcasterCache  (String broadcasterId AtmosphereResource r){ logger.warn(""Not supported""); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,get,"protected List<Object>  (long cacheHeaderTime){ List<Object> result=new ArrayList<Object>(); readWriteLock.readLock().lock(); try { for ( CacheMessage cacheMessage : messages) { if (cacheMessage.getCreateTime() > cacheHeaderTime) { result.add(cacheMessage.getMessage()); } } } finally { readWriteLock.readLock().unlock(); } logger.trace(""Retrieved messages {}"" result); return result; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,inspect,protected boolean  (BroadcastMessage m){ for ( BroadcasterCacheInspector b : inspectors) { if (!b.inspect(m)) return false; } return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,inspector,@Override public BroadcasterCache  (BroadcasterCacheInspector b){ inspectors.add(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,put,"protected CacheMessage  (BroadcastMessage message Long now String uuid String broadcasterId){ if (!inspect(message)) return null; logger.trace(""Caching message {} for Broadcaster {}"" message.message()); readWriteLock.writeLock().lock(); CacheMessage cacheMessage=null; try { boolean hasMessageWithSameId=messagesIds.contains(message.id()); if (!hasMessageWithSameId) { cacheMessage=new CacheMessage(message.id() now message.message() uuid broadcasterId); messages.add(cacheMessage); messagesIds.add(message.id()); } } finally { readWriteLock.writeLock().unlock(); } return cacheMessage; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,removeBroadcasterCacheListener,"@Override public BroadcasterCache  (BroadcasterCacheListener l){ logger.warn(""Not supported""); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,run,public void  (){ readWriteLock.writeLock().lock(); try { long now=System.nanoTime(); List<CacheMessage> expiredMessages=new ArrayList<CacheMessage>(); for ( CacheMessage message : messages) { if (TimeUnit.NANOSECONDS.toMillis(now - message.getCreateTime()) > maxCacheTime) { expiredMessages.add(message); } } for ( CacheMessage expiredMessage : expiredMessages) { messages.remove(expiredMessage); messagesIds.remove(expiredMessage.getId()); } } finally { readWriteLock.writeLock().unlock(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,setInvalidateCacheInterval,public AbstractBroadcasterCache  (long invalidateCacheInterval){ this.invalidateCacheInterval=invalidateCacheInterval; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,setMaxCacheTime,public AbstractBroadcasterCache  (long maxCacheTime){ this.maxCacheTime=maxCacheTime; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,start,@Override public void  (){ scheduledFuture=reaper.scheduleAtFixedRate(new Runnable(){ public void run(){ readWriteLock.writeLock().lock(); try { long now=System.nanoTime(); List<CacheMessage> expiredMessages=new ArrayList<CacheMessage>(); for ( CacheMessa
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\AbstractBroadcasterCache.java,stop,@Override public void  (){ cleanup(); if (!isShared) { reaper.shutdown(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,addBroadcasterCacheListener,@Override public BroadcasterCache  (BroadcasterCacheListener l){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,addToCache,"@Override public CacheMessage  (String broadcasterId String uuid BroadcastMessage message){ logger.trace(""Message {} might be lost! Please install a proper BroadcasterCache"" message.message()); return null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,cacheCandidate,@Override public BroadcasterCache  (String broadcasterId String uuid){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,clearCache,@Override public BroadcasterCache  (String broadcasterId String uuid CacheMessage cache){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,excludeFromCache,@Override public BroadcasterCache  (String broadcasterId AtmosphereResource r){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,inspector,@Override public BroadcasterCache  (BroadcasterCacheInspector interceptor){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,removeBroadcasterCacheListener,@Override public BroadcasterCache  (BroadcasterCacheListener l){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\DefaultBroadcasterCache.java,retrieveFromCache,@Override public List<Object>  (String id String uuid){ return Collections.<Object>emptyList(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeFilter.java,filter,@Override public BroadcastAction  (String broadcasterId Object originalMessage Object message){ return new BroadcastAction(message); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\SessionBroadcasterCache.java,addToCache,@Override public CacheMessage  (String broadcasterId String uuid BroadcastMessage message){ long now=System.nanoTime(); CacheMessage cacheMessage=put(message now uuid broadcasterId); if (uuid.equals(NULL)) return cacheMessage; try { HttpSession session=co
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\SessionBroadcasterCache.java,retrieveFromCache,"@Override public List<Object>  (String broadcasterId String uuid){ if (uuid == null) { throw new IllegalArgumentException(""AtmosphereResource can't be null""); } List<Object> result=new ArrayList<>(); try { AtmosphereResource r=config.resourcesFactory().fi"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ String s=config.getInitParameter(MESSAGE_DELIMITER); if (s != null) { messageDelimiter(s); } s=config.getInitParameter(EXCLUDED_CONTENT_TYPES); if (s != null) { excludedContentTypes.addAll(Arrays.asList(s.
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,excludedContentType,public TrackMessageSizeInterceptor  (String excludedContentType){ excludedContentTypes.add(excludedContentType.toLowerCase()); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,excludedContentTypes,public HashSet<String>  (){ return excludedContentTypes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,inspect,@Override public Action  (final AtmosphereResource r){ if (AtmosphereResource.TRANSPORT.UNDEFINED == r.transport() || Utils.webSocketMessage(r)) return Action.CONTINUE; final AtmosphereResponse response=r.getResponse(); super.inspect(r); AsyncIOWriter wri
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,messageDelimiter,public TrackMessageSizeInterceptor  (String endString){ this.endString=endString; end=endString.getBytes(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,priority,@Override public PRIORITY  (){ return InvokationOrder.BEFORE_DEFAULT; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,toString,"@Override public String  (){ return "" Track Message Size Interceptor using "" + endString; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\client\TrackMessageSizeInterceptor.java,transformPayload,"@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { boolean writeAsBytes=IOUtils.isBodyBinary(response.request()); if (writeAsBytes) { logger.warn(""Cannot use TrackMessageSizeInterceptor with binary"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,activeClients,public Map<String Long>  (){ return activeClients; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,addBroadcasterCacheListener,@Override public BroadcasterCache  (BroadcasterCacheListener l){ listeners.add(l); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,addMessage,"private void  (String broadcasterId String clientId CacheMessage message){ ConcurrentLinkedQueue<CacheMessage> clientQueue=messages.get(clientId); if (clientQueue == null) { if (activeClients.get(clientId) != null) { clientQueue=new ConcurrentLinkedQueue<>(); if (messages.putIfAbsent(clientId clientQueue) == null) { logger.debug(""new queue created for message {}  broadcaster {} for resource {} "" message.getMessage() broadcasterId clientId); } } else { logger.debug(""Client {} is no longer active. Not caching message {} for broadcaster {}"" clientId message broadcasterId); return; } } notifyAddCache(broadcasterId message); if (logger.isDebugEnabled()) { logger.debug(""offering message {}  broadcaster {} for resource {}"" message.getMessage() broadcasterId clientId); } messages.get(clientId).offer(message); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,addToCache,"@Override public CacheMessage  (String broadcasterId String uuid BroadcastMessage message){ if (logger.isTraceEnabled()) { logger.trace(""Adding for AtmosphereResource {} cached messages {}"" uuid message.message()); logger.trace(""Active clients {}"" activeC"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,cacheCandidate,@Override public BroadcasterCache  (String broadcasterId String uuid){ long now=System.currentTimeMillis(); activeClients.put(uuid now); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,cleanup,@Override public void  (){ messages.clear(); activeClients.clear(); inspectors.clear(); if (scheduledFuture != null) { scheduledFuture.cancel(false); scheduledFuture=null; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,clearCache,"@Override public BroadcasterCache  (String broadcasterId String uuid CacheMessage message){ ConcurrentLinkedQueue<CacheMessage> clientQueue=messages.get(uuid); if (clientQueue != null) { logger.trace(""Removing for broadcaster {} AtmosphereResource {} cach"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,configure,"@Override public void  (AtmosphereConfig config){ Object o=config.properties().get(""shared""); if (o != null) { shared=Boolean.parseBoolean(o.toString()); } if (shared) { taskScheduler=ExecutorsFactory.getScheduler(config); } else { taskScheduler=Executors"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,excludeFromCache,@Override public BroadcasterCache  (String broadcasterId AtmosphereResource r){ activeClients.remove(r.uuid()); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,inspect,protected boolean  (BroadcastMessage m){ for ( BroadcasterCacheInspector b : inspectors) { if (!b.inspect(m)) return false; } return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,inspector,@Override public BroadcasterCache  (BroadcasterCacheInspector b){ inspectors.add(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,inspectors,public List<BroadcasterCacheInspector>  (){ return inspectors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,invalidateExpiredEntries,"protected void  (){ long now=System.currentTimeMillis(); Set<String> inactiveClients=new HashSet<>(); for ( Map.Entry<String Long> entry : activeClients.entrySet()) { if (now - entry.getValue() > clientIdleTime) { logger.trace(""Invalidate client {}"" entry.getKey()); inactiveClients.add(entry.getKey()); } } for ( String clientId : inactiveClients) { activeClients.remove(clientId); ConcurrentLinkedQueue<CacheMessage> queue=messages.remove(clientId); if (queue != null) { logger.debug(""removed client queue of size: {} for client uuid {}"" queue.size() clientId); notifyRemoveCache(queue); } else { logger.trace(""queue is already null for client: {}"" clientId); } } for ( String clientId : messages().keySet()) { if (!activeClients().containsKey(clientId)) { messages().get(clientId).clear(); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,listeners,public List<BroadcasterCacheListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,messages,public Map<String ConcurrentLinkedQueue<CacheMessage>>  (){ return messages; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,notifyAddCache,"private void  (String broadcasterId CacheMessage message){ for ( BroadcasterCacheListener l : listeners) { try { l.onAddCache(broadcasterId message); } catch ( Exception ex) { logger.warn(""Listener exception"" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,notifyRemoveCache,private void  (ConcurrentLinkedQueue<CacheMessage> messageQueue){ for ( CacheMessage message : messageQueue) { notifyRemoveCache(message.getBroadcasterId() message); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,removeBroadcasterCacheListener,@Override public BroadcasterCache  (BroadcasterCacheListener l){ listeners.remove(l); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,retrieveFromCache,@Override public List<Object>  (String broadcasterId String uuid){ cacheCandidate(broadcasterId uuid); ConcurrentLinkedQueue<CacheMessage> clientQueue=messages.get(uuid); CacheMessage message; List<Object> result=new ArrayList<>(); if (clientQueue == null
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,run,@Override public void  (){ invalidateExpiredEntries(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,setClientIdleTime,public void  (long clientIdleTime){ this.clientIdleTime=clientIdleTime; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,setInvalidateCacheInterval,public void  (long invalidateCacheInterval){ this.invalidateCacheInterval=invalidateCacheInterval; scheduledFuture.cancel(true); start(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,start,@Override public void  (){ scheduledFuture=taskScheduler.scheduleWithFixedDelay(new Runnable(){ @Override public void run(){ invalidateExpiredEntries(); } }  0 invalidateCacheInterval TimeUnit.MILLISECONDS); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,stop,@Override public void  (){ cleanup(); if (taskScheduler != null) { taskScheduler.shutdown(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,toString,@Override public String  (){ return this.getClass().getName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\cache\UUIDBroadcasterCache.java,uuid,protected String  (AtmosphereResource r){ return r.uuid(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,AtmosphereHandlerProperty,public  (String name String value){ this.name=name; this.value=value; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,getValue,public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerProperty.java,setValue,public void  (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,ApplicationConfiguration,public  (String paramName String paramValue){ this.paramName=paramName; this.paramValue=paramValue; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,getParamName,public String  (){ return paramName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,getParamValue,public String  (){ return paramValue; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,setParamName,public void  (String paramName){ this.paramName=paramName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\ApplicationConfiguration.java,setParamValue,public void  (String paramValue){ this.paramValue=paramValue; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,FrameworkConfiguration,public  (String paramName String paramValue){ this.paramName=paramName; this.paramValue=paramValue; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,getParamName,public String  (){ return paramName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,getParamValue,public String  (){ return paramValue; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,setParamName,public void  (String paramName){ this.paramName=paramName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\FrameworkConfiguration.java,setParamValue,public void  (String paramValue){ this.paramValue=paramValue; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\AtmosphereHandlerServiceInterceptor.java,mapAnnotatedService,"protected void  (boolean reMap String path AtmosphereRequest request AtmosphereHandlerWrapper w){ synchronized (config.handlers()) { if (config.handlers().get(path) == null) { AtmosphereHandlerService m=w.atmosphereHandler.getClass().getAnnotation(AtmosphereHandlerService.class); if (m != null) { try { String targetPath=m.path(); if (targetPath.indexOf(""{"") != -1 && targetPath.indexOf(""}"") != -1) { boolean singleton=w.atmosphereHandler.getClass().getAnnotation(Singleton.class) != null; AtmosphereHandler newW=w.atmosphereHandler; if (!singleton) { newW=config.framework().newClassInstance(AtmosphereHandler.class w.atmosphereHandler.getClass()); } request.localAttributes().put(Named.class.getName() path.substring(targetPath.indexOf(""{""))); AtmosphereResourceImpl.class.cast(request.resource()).atmosphereHandler(newW); config.framework().addAtmosphereHandler(path newW config.getBroadcasterFactory().lookup(w.broadcaster.getClass() path true) w.interceptors); request.setAttribute(FrameworkConfig.NEW_MAPPING ""true""); } } catch ( Throwable e) { logger.warn(""Unable to create AtmosphereHandler"" e); } } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\AtmosphereHandlerServiceInterceptor.java,toString,"@Override public String  (){ return ""@AtmosphereHandlerService Interceptor""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getApplicationConfig,public List<ApplicationConfiguration>  (){ return applicationConfig; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getAtmosphereInterceptorClasses,public List<String>  (){ return interceptors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getBroadcastFilterClasses,public List<String>  (){ return broadcastFilterClasses; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getBroadcaster,public String  (){ return broadcaster; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getBroadcasterCache,public String  (){ return broadcasterCache; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getClassName,public String  (){ return className; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getCometSupport,public String  (){ return cometSupport; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getContextRoot,public String  (){ return contextRoot; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getFrameworkConfig,public List<FrameworkConfiguration>  (){ return frameworkConfig; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getProperties,public List<AtmosphereHandlerProperty>  (){ return properties; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,getSupportSession,public String  (){ return supportSession; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setApplicationConfig,public void  (List<ApplicationConfiguration> applicationConfig){ this.applicationConfig=applicationConfig; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setAtmosphereInterceptorClasses,public void  (List<String> interceptors){ this.interceptors=interceptors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setBroadcastFilterClasses,public void  (List<String> broadcastFilterClasses){ this.broadcastFilterClasses=broadcastFilterClasses; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setBroadcaster,public void  (String broadcaster){ this.broadcaster=broadcaster; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setBroadcasterCache,public void  (String broadcasterCache){ this.broadcasterCache=broadcasterCache; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setClassName,public void  (String className){ this.className=className; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setCometSupport,public void  (String cometSupport){ this.cometSupport=cometSupport; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setContextRoot,public void  (String contextRoot){ this.contextRoot=contextRoot; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setFrameworkConfig,public void  (List<FrameworkConfiguration> frameworkConfig){ this.frameworkConfig=frameworkConfig; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setProperties,public void  (List<AtmosphereHandlerProperty> properties){ this.properties=properties; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\AtmosphereHandlerConfig.java,setSupportSession,public void  (String supportSession){ this.supportSession=supportSession; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,all,"public static Object  (List<Encoder<? ?>> encoders List<Decoder<? ?>> decoders Object instanceType Object objectToInvoke Method method){ Object decodedObject=decode(decoders instanceType); if (instanceType == null) { logger.trace(""No Encoder matching {}"" instanceType); } decodedObject=decodedObject == null ? instanceType : decodedObject; logger.trace(""{} .on {}"" method.getName() decodedObject); Object objectToEncode=invokeMethod(method objectToInvoke decodedObject); Object encodedObject=null; if (objectToEncode != null) { encodedObject=encode(encoders objectToEncode); } return encodedObject == null ? objectToEncode : encodedObject; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,decode,"public static Object  (List<Decoder<? ?>> decoders Object instanceType){ Object decodedObject=matchDecoder(instanceType decoders); if (instanceType == null) { logger.trace(""No Encoder matching {}"" instanceType); } return decodedObject; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,encode,"public static Object  (List<Encoder<? ?>> encoders Object objectToEncode){ Object encodedObject=matchEncoder(objectToEncode encoders); if (encodedObject == null) { logger.trace(""No Encoder matching {}"" objectToEncode); } return encodedObject; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,invokeMethod,"public static Object  (Method method Object objectToInvoke Object... parameters){ Object objectToEncode=null; boolean hasMatch=false; try { objectToEncode=method.invoke(objectToInvoke method.getParameterTypes().length == 0 ? new Object[]{} : parameters); hasMatch=true; } catch ( IllegalAccessException e) { logger.trace("""" e); } catch ( InvocationTargetException e) { logger.error("""" e); } catch ( java.lang.IllegalArgumentException e) { logger.trace("""" e); } catch ( Throwable e) { logger.error("""" e); } if (!hasMatch) { logger.trace(""No Method's Arguments {} matching {}"" method.getName() objectToInvoke); } return objectToEncode; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,matchDecoder,"public static Object  (Object instanceType List<Decoder<? ?>> decoders){ Object decodedObject=decoders.isEmpty() ? instanceType : null; for ( Decoder d : decoders) { Class<?>[] typeArguments=TypeResolver.resolveArguments(d.getClass() Decoder.class); if (instanceType != null && typeArguments.length > 0 && typeArguments[0].isAssignableFrom(instanceType.getClass())) { logger.trace(""{} is trying to decode {}"" d instanceType); try { decodedObject=d.decode(instanceType); } catch ( Exception e) { logger.trace("""" e); } } } return decodedObject; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\Invoker.java,matchEncoder,"public static Object  (Object instanceType List<Encoder<? ?>> encoders){ if (instanceType == null) return null; Object encodedObject=encoders.isEmpty() ? instanceType : null; for ( Encoder d : encoders) { Class<?>[] typeArguments=TypeResolver.resolveArguments(d.getClass() Encoder.class); if (instanceType != null && typeArguments.length > 0 && typeArguments[0].isAssignableFrom(instanceType.getClass())) { logger.trace(""{} is trying to encode {}"" d instanceType); encodedObject=d.encode(instanceType); } } return encodedObject; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,EncoderObject,public  (final Map<Method List<Encoder<? ?>>> encoders final Object objectToEncode){ encodedObject=Invoker.encode(encoders.get(method) objectToEncode); methodInfo=MethodInfo.this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,Managed,public  (Object o){ this.o=o; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,MethodInfo,public  (Method method){ this.method=method; if (method.isAnnotationPresent(DeliverTo.class)) { this.deliverTo=method.getAnnotation(DeliverTo.class).value(); } else { this.deliverTo=DeliverTo.DELIVER_TO.BROADCASTER; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,annotationType,@Override public Class<? extends Annotation>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,configure,@Override public AnnotatedProxy  (AtmosphereConfig config Object c){ this.proxiedInstance=c; this.onRuntimeMethod=populateMessage(c Message.class); this.onHeartbeatMethod=populate(c Heartbeat.class); this.onDisconnectMethod=populate(c Disconnect.class); t
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,encode,EncoderObject  (final Map<Method List<Encoder<? ?>>> encoders final Object objectToEncode){ return new EncoderObject(encoders objectToEncode); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,invoke,private Object  (Method m Object o){ return Utils.invoke(proxiedInstance m o); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,message,private Object  (Method m Object o){ if (m != null) { return Invoker.all(encoders.get(m) EMPTY o proxiedInstance m); } return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,object,public Object  (){ return o; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,onClose,@Override public void  (AtmosphereResourceEvent event){ invoke(onDisconnectMethod event); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,onHeartbeat,@Override public void  (final AtmosphereResourceEvent event){ if (onHeartbeatMethod != null) { invoke(onHeartbeatMethod event); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,onRequest,@Override public void  (final AtmosphereResource resource) throws IOException { AtmosphereRequest request=resource.getRequest(); String method=request.getMethod(); boolean polling=Utils.pollableTransport(resource.transport()); boolean webSocketMessage=Uti
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,onResume,@Override public void  (AtmosphereResourceEvent event){ invoke(onResumeMethod event); resource.removeEventListener(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,onStateChange,"@Override @SuppressWarnings(""unchecked"") public void  (AtmosphereResourceEvent event) throws IOException { Object msg=event.getMessage(); AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(event.getResource()); Boolean resumeOnBroadcast=r.resumeOn"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,onSuspend,@Override public void  (AtmosphereResourceEvent event){ processReady(event.getResource()); resource.removeEventListener(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,pathParams,protected boolean  (Object o){ for ( Field field : o.getClass().getDeclaredFields()) { if (field.isAnnotationPresent(PathParam.class)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,populate,protected Method  (Object c Class<? extends Annotation> annotation){ for ( Method m : c.getClass().getMethods()) { if (m.isAnnotationPresent(annotation)) { return m; } } return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,populateDecoders,"private void  (){ for ( MethodInfo m : onRuntimeMethod) { List<Decoder<? ?>> l=new CopyOnWriteArrayList<>(); for ( Class<? extends Decoder> s : m.method.getAnnotation(Message.class).decoders()) { try { l.add(config.framework().newClassInstance(Decoder.class s)); } catch ( Exception e) { logger.error(""Unable to load encoder {}"" s); } } decoders.put(m.method l); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,populateEncoders,"private void  (){ for ( MethodInfo m : onRuntimeMethod) { List<Encoder<? ?>> l=new CopyOnWriteArrayList<>(); for ( Class<? extends Encoder> s : m.method.getAnnotation(Message.class).encoders()) { try { l.add(config.framework().newClassInstance(Encoder.class s)); } catch ( Exception e) { logger.error(""Unable to load encoder {}"" s); } } encoders.put(m.method l); } if (onReadyMethod != null) { List<Encoder<? ?>> l=new CopyOnWriteArrayList<>(); for ( Class<? extends Encoder> s : onReadyMethod.getAnnotation(Ready.class).encoders()) { try { l.add(config.framework().newClassInstance(Encoder.class s)); } catch ( Exception e) { logger.error(""Unable to load encoder {}"" s); } } encoders.put(onReadyMethod l); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,populateMessage,protected List<MethodInfo>  (Object c Class<? extends Annotation> annotation){ ArrayList<MethodInfo> methods=new ArrayList<>(); for ( Method m : c.getClass().getMethods()) { if (m.isAnnotationPresent(annotation)) { methods.add(new MethodInfo(m)); } } return methods; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,processReady,"protected void  (AtmosphereResource r){ final DeliverTo deliverTo; final Ready ready=onReadyMethod.getAnnotation(Ready.class); if (ready.value() != Ready.DELIVER_TO.RESOURCE) { if (IAE == null) { IAE=new IllegalArgumentException(); } logger.warn(""Since 2.2  delivery strategy must be specified with @DeliverTo  not with a value in the @Ready annotation."" IAE); deliverTo=new DeliverTo(){ @Override public DELIVER_TO value(){ switch (ready.value()) { case ALL: return DELIVER_TO.ALL; case BROADCASTER: return DELIVER_TO.BROADCASTER; } return null; } @Override public Class<? extends Annotation> annotationType(){ return null; } } ; } else { deliverTo=onReadyMethod.getAnnotation(DeliverTo.class); } IOUtils.deliver(message(onReadyMethod r) deliverTo DeliverTo.DELIVER_TO.RESOURCE r); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,scanForReaderOrInputStream,private void  (){ for ( MethodInfo m : onRuntimeMethod) { Class<?>[] classes=m.method.getParameterTypes(); for ( Class<?> c : classes) { if (InputStream.class.isAssignableFrom(c)) { m.useStream=true; } else if (Reader.class.isAssignableFrom(c)) { m.useReader=true; } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,target,@Override public Object  (){ return proxiedInstance; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,toString,public String  (){ return o.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ManagedAtmosphereHandler.java,value,@Override public DELIVER_TO  (){ switch (ready.value()) { case ALL: return DELIVER_TO.ALL; case BROADCASTER: return DELIVER_TO.BROADCASTER; } return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\MeteorServiceInterceptor.java,mapAnnotatedService,"protected void  (boolean reMap String path AtmosphereRequest request AtmosphereFramework.AtmosphereHandlerWrapper w){ synchronized (config.handlers()) { if (config.handlers().get(path) == null) { if (ReflectorServletProcessor.class.isAssignableFrom(w.atmosphereHandler.getClass())) { ReflectorServletProcessor r=ReflectorServletProcessor.class.cast(w.atmosphereHandler); Servlet s=r.getServlet(); MeteorService m=s.getClass().getAnnotation(MeteorService.class); if (m != null) { String targetPath=m.path(); if (targetPath.indexOf(""{"") != -1 && targetPath.indexOf(""}"") != -1) { try { boolean singleton=s.getClass().getAnnotation(Singleton.class) != null; if (!singleton) { r=config.framework().newClassInstance(ReflectorServletProcessor.class ReflectorServletProcessor.class); r.setServlet(config.framework().newClassInstance(Servlet.class s.getClass())); r.init(config); } request.localAttributes().put(Named.class.getName() path.substring(targetPath.indexOf(""{""))); AtmosphereResourceImpl.class.cast(request.resource()).atmosphereHandler(r); config.framework().addAtmosphereHandler(path r config.getBroadcasterFactory().lookup(w.broadcaster.getClass() path true) w.interceptors); request.setAttribute(FrameworkConfig.NEW_MAPPING ""true""); } catch ( Throwable e) { logger.warn(""Unable to create AtmosphereHandler"" e); } } } } } else if (reMap) { request.setAttribute(FrameworkConfig.NEW_MAPPING ""true""); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\MeteorServiceInterceptor.java,toString,"@Override public String  (){ return ""@MeteorService Interceptor""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ServiceInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\ServiceInterceptor.java,inspect,@Override public Action  (AtmosphereResource r){ AtmosphereFramework.AtmosphereHandlerWrapper w=null; try { w=(AtmosphereFramework.AtmosphereHandlerWrapper)r.getRequest().getAttribute(FrameworkConfig.ATMOSPHERE_HANDLER_WRAPPER); if (!w.wildcardMapping()) 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,buildTypeVariableMap,private static void  (ParameterizedType type Map<TypeVariable<?> Type> typeVariableMap){ if (type.getRawType() instanceof Class) { TypeVariable<?>[] typeVariables=((Class<?>)type.getRawType()).getTypeParameters(); Type[] typeArguments=type.getActualTypeArguments(); for (int i=0; i < typeArguments.length; i++) { TypeVariable<?> variable=typeVariables[i]; Type typeArgument=typeArguments[i]; if (typeArgument instanceof Class) { typeVariableMap.put(variable typeArgument); } else if (typeArgument instanceof GenericArrayType) { typeVariableMap.put(variable typeArgument); } else if (typeArgument instanceof ParameterizedType) { typeVariableMap.put(variable typeArgument); } else if (typeArgument instanceof TypeVariable) { TypeVariable<?> typeVariableArgument=(TypeVariable<?>)typeArgument; Type resolvedType=typeVariableMap.get(typeVariableArgument); if (resolvedType == null) resolvedType=resolveBound(typeVariableArgument); typeVariableMap.put(variable resolvedType); } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,disableCache,public static void  (){ typeVariableCache.clear(); cacheEnabled=false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,enableCache,public static void  (){ cacheEnabled=true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,getTypeVariableMap,private static Map<TypeVariable<?> Type>  (final Class<?> targetType){ Reference<Map<TypeVariable<?> Type>> ref=typeVariableCache.get(targetType); Map<TypeVariable<?> Type> map=ref != null ? ref.get() : null; if (map == null) { map=new HashMap<TypeVariable<?> Type>(); buildTypeVariableMap(targetType.getGenericInterfaces() map); Type genericType=targetType.getGenericSuperclass(); Class<?> type=targetType.getSuperclass(); while (type != null && !Object.class.equals(type)) { if (genericType instanceof ParameterizedType) buildTypeVariableMap((ParameterizedType)genericType map); buildTypeVariableMap(type.getGenericInterfaces() map); genericType=type.getGenericSuperclass(); type=type.getSuperclass(); } type=targetType; while (type.isMemberClass()) { genericType=type.getGenericSuperclass(); if (genericType instanceof ParameterizedType) buildTypeVariableMap((ParameterizedType)genericType map); type=type.getEnclosingClass(); } if (cacheEnabled) typeVariableCache.put(targetType new WeakReference<Map<TypeVariable<?> Type>>(map)); } return map; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolveArgument,"public static Class<?>  (Type genericType Class<?> targetType){ Class<?>[] arguments=resolveArguments(genericType targetType); if (arguments == null) return Unknown.class; if (arguments.length != 1) throw new IllegalArgumentException(""Expected 1 type argument on generic type "" + targetType.getName() + "" but found ""+ arguments.length); return arguments[0]; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolveArguments,public static Class<?>[]  (Type genericType Class<?> targetType){ Class<?>[] result=null; if (genericType instanceof ParameterizedType) { ParameterizedType paramType=(ParameterizedType)genericType; Type[] arguments=paramType.getActualTypeArguments(); result=new Class[arguments.length]; for (int i=0; i < arguments.length; i++) result[i]=resolveClass(arguments[i] targetType); } else if (genericType instanceof TypeVariable) { result=new Class[1]; result[0]=resolveClass(genericType targetType); } return result; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolveBound,public static Type  (TypeVariable<?> typeVariable){ Type[] bounds=typeVariable.getBounds(); if (bounds.length == 0) return Unknown.class; Type bound=bounds[0]; if (bound instanceof TypeVariable) bound=resolveBound((TypeVariable<?>)bound); return bound == Object.class ? Unknown.class : bound; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolveClass,public static Class<?>  (Type genericType Class<?> targetType){ if (genericType instanceof Class) { return (Class<?>)genericType; } else if (genericType instanceof ParameterizedType) { return resolveClass(((ParameterizedType)genericType).getRawType() targetType); } else if (genericType instanceof GenericArrayType) { GenericArrayType arrayType=(GenericArrayType)genericType; Class<?> compoment=resolveClass(arrayType.getGenericComponentType() targetType); return Array.newInstance(compoment 0).getClass(); } else if (genericType instanceof TypeVariable) { TypeVariable<?> variable=(TypeVariable<?>)genericType; genericType=getTypeVariableMap(targetType).get(variable); genericType=genericType == null ? resolveBound(variable) : resolveClass(genericType targetType); } return genericType instanceof Class ? (Class<?>)genericType : Unknown.class; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\config\managed\TypeResolver.java,resolveGenericType,public static Type  (Type initialType Class<?> targetType){ Class<?> rawType; if (initialType instanceof ParameterizedType) rawType=(Class<?>)((ParameterizedType)initialType).getRawType(); else rawType=(Class<?>)initialType; if (targetType.equals(rawType)) return initialType; Type result; if (targetType.isInterface()) { for ( Type superInterface : rawType.getGenericInterfaces()) if (superInterface != null && !superInterface.equals(Object.class)) if ((result=resolveGenericType(superInterface targetType)) != null) return result; } Type superType=rawType.getGenericSuperclass(); if (superType != null && !superType.equals(Object.class)) if ((result=resolveGenericType(superType targetType)) != null) return result; return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,AtmosphereConfigurator,public  (AtmosphereFramework framework){ this.framework=framework; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,JSR356AsyncSupport,"public  (AtmosphereConfig config ServletContext ctx){ super(config); ServerContainer container=(ServerContainer)ctx.getAttribute(ServerContainer.class.getName()); if (container == null) { if (ctx.getServerInfo().contains(""WebLogic"")) { logger.error(""{} must use JDK 1.8+ with WebSocket"" ctx.getServerInfo()); } throw new IllegalStateException(""Unable to configure jsr356 at that stage. ServerContainer is null""); } int pathLength=5; String s=config.getInitParameter(ApplicationConfig.JSR356_PATH_MAPPING_LENGTH); if (s != null) { pathLength=Integer.valueOf(s); } logger.trace(""JSR356 Path mapping Size {}"" pathLength); String servletPath=config.getInitParameter(ApplicationConfig.JSR356_MAPPING_PATH); if (servletPath == null) { servletPath=IOUtils.guestServletPath(config); if (servletPath.equals(""/"") || servletPath.equals(""/*"")) { servletPath=""""; } } logger.info(""JSR 356 Mapping path {}"" servletPath); configurator=new AtmosphereConfigurator(config.framework()); StringBuilder b=new StringBuilder(servletPath); List<String> endpointPaths=new ArrayList<>(); endpointPaths.add(servletPath); for (int i=0; i < pathLength; i++) { b.append(""/""); endpointPaths.add(b.toString()); b.append(""{path"" + i + ""}""); endpointPaths.add(b.toString()); } for ( String endpointPath : endpointPaths) { if ("""".equals(endpointPath)) { continue; } try { ServerEndpointConfig endpointConfig=ServerEndpointConfig.Builder.create(JSR356Endpoint.class endpointPath).configurator(configurator).build(); container.addEndpoint(endpointConfig); } catch ( DeploymentException e) { logger.warn(""Duplicate Servlet Mapping Path {}. Use {} init-param to prevent this message"" servletPath ApplicationConfig.JSR356_MAPPING_PATH); logger.trace("""" e); servletPath=IOUtils.guestServletPath(config); logger.warn(""Duplicate guess {}"" servletPath e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,getContainerName,"@Override public String  (){ return super.getContainerName() + "" and jsr356/WebSocket API""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,getEndpointInstance,public <T>T  (java.lang.Class<T> endpointClass) throws java.lang.InstantiationException { if (JSR356Endpoint.class.isAssignableFrom(endpointClass)) { JSR356Endpoint e=new JSR356Endpoint(framework WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework)); if (hRequest.get() != null) { e.handshakeRequest(hRequest.get()); hRequest.set(null); } else { endPoint.set(e); } return (T)e; } else { return super.getEndpointInstance(endpointClass); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,modifyHandshake,public void  (ServerEndpointConfig sec HandshakeRequest request HandshakeResponse response){ if (endPoint.get() == null) { hRequest.set(request); } else { endPoint.get().handshakeRequest(request); endPoint.set(null); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356AsyncSupport.java,supportWebSocket,public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,NettyCometSupport,public  (AtmosphereConfig config){ super(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,action,@Override public void  (AtmosphereResourceImpl r){ super.action(r); if (r.isResumed()) { complete(r); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,complete,"@Override public AsyncSupport  (AtmosphereResourceImpl r){ try { AtmosphereResponse response=r.getResponse(false); AsyncIOWriter a=response.getAsyncIOWriter(); if (a != null) { a.close(response); } } catch ( IOException e) { logger.trace("""" e); } return t"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { Action action; action=suspended(req res); if (action.type() == Action.TYPE.SUSPEND) { req.setAttribute(SUSPEND action); } else if (action.type()
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\NettyCometSupport.java,supportWebSocket,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,BlockingIOCometSupport,public  (AtmosphereConfig config){ super(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,action,"@Override public void  (AtmosphereResourceImpl r){ try { super.action(r); if (r.action().type() == Action.TYPE.RESUME) { complete(r); } } catch ( Exception ex) { logger.error("""" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,cancelled,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { Action a=super.cancelled(req res); if (req.getAttribute(LATCH) != null) { CountDownLatch latch=(CountDownLatch)req.getAttribute(LATCH); latch.co
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,complete,@Override public AsyncSupport  (AtmosphereResourceImpl r){ AtmosphereRequest req=r.getRequest(false); CountDownLatch latch=null; if (req.getAttribute(LATCH) != null) { latch=(CountDownLatch)req.getAttribute(LATCH); } if (latch != null) { latch.countDown()
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,onResume,@Override public void  (AtmosphereResourceEvent event){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { Action action=null; action=suspended(req res); if (action.type() == Action.TYPE.SUSPEND) { suspend(action req res); } else if (action.type() == 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\BlockingIOCometSupport.java,suspend,"protected void  (Action action AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { final CountDownLatch latch=new CountDownLatch(1); req.setAttribute(LATCH latch); boolean ok=true; AtmosphereResource resource=req.resource(); if (resource != null) { try { resource.addEventListener(new AtmosphereResourceEventListenerAdapter.OnResume(){ @Override public void onResume( AtmosphereResourceEvent event){ latch.countDown(); } } ); if (action.timeout() != -1) { ok=latch.await(action.timeout() TimeUnit.MILLISECONDS); } else { latch.await(); } } catch ( InterruptedException ex) { logger.trace("""" ex); } finally { if (!ok) { timedout(req res); } else { AtmosphereResourceImpl.class.cast(resource).cancel(); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,JSR356Endpoint,"public  (AtmosphereFramework framework WebSocketProcessor webSocketProcessor){ this.framework=framework; this.webSocketProcessor=webSocketProcessor; if (framework.isUseNativeImplementation()) { throw new IllegalStateException(""You cannot use WebSocket native implementation with JSR356. Please set "" + ApplicationConfig.PROPERTY_NATIVE_COMETSUPPORT + "" to false""); } String s=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_IDLETIME); if (s != null) { webSocketWriteTimeout=Integer.valueOf(s); } else { webSocketWriteTimeout=-1; } s=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_MAXBINARYSIZE); if (s != null) { maxBinaryBufferSize=Integer.valueOf(s); } else { maxBinaryBufferSize=-1; } s=framework.getAtmosphereConfig().getInitParameter(ApplicationConfig.WEBSOCKET_MAXTEXTSIZE); if (s != null) { maxTextBufferSize=Integer.valueOf(s); } else { maxTextBufferSize=-1; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,call,@Override public InetSocketAddress  () throws Exception { return (InetSocketAddress)endpointConfig.getUserProperties().get(JAVAX_WEBSOCKET_ENDPOINT_LOCAL_ADDRESS); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,handshakeRequest,public JSR356Endpoint  (HandshakeRequest handshakeRequest){ this.handshakeRequest=handshakeRequest; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,onClose,"@Override public void  (javax.websocket.Session session javax.websocket.CloseReason closeCode){ logger.trace(""{} closed {}"" session closeCode); if (request != null) { request.destroy(); webSocketProcessor.close(webSocket closeCode.getCloseCode().getCode()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,onError,"@Override public void  (javax.websocket.Session session java.lang.Throwable t){ try { logger.debug(""Problem in web socket session"" t); webSocketProcessor.notifyListener(webSocket new WebSocketEventListener.WebSocketEvent<Throwable>(t WebSocketEventListene"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,onMessage,@Override public void  (ByteBuffer bb){ byte[] b=bb.hasArray() ? bb.array() : new byte[bb.limit()]; bb.get(b); webSocketProcessor.invokeWebSocketProtocol(webSocket b 0 b.length); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\JSR356Endpoint.java,onOpen,"@Override public void  (Session session final EndpointConfig endpointConfig){ if (framework.isDestroyed()) return; if (!session.isOpen()) { logger.trace(""Session Closed {}"" session); return; } if (maxBinaryBufferSize != -1) session.setMaxBinaryMessageBuff"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,CometListener,public  (AsynchronousProcessor processor String uuid){ this.p=processor; this.uuid=uuid; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,Servlet30CometSupport,public  (AtmosphereConfig config){ super(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,action,@Override public void  (AtmosphereResourceImpl r){ super.action(r); if (r.action().type() == Action.TYPE.RESUME && r.isInScope()) { endAsyncContext(r.getRequest(false)); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,cancelled,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { Action action=super.cancelled(req res); if (req.getAttribute(MAX_INACTIVE) != null && Long.class.cast(req.getAttribute(MAX_INACTIVE)) == -1) { e
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,complete,@Override public AsyncSupport  (AtmosphereResourceImpl r){ endAsyncContext(r.getRequest(false)); return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,endAsyncContext,"public void  (AtmosphereRequest request){ final Object attribute=request.getAttribute(FrameworkConfig.ASYNC_CONTEXT); if (attribute instanceof AsyncContext) { AsyncContext asyncContext=(AsyncContext)attribute; if (asyncContext != null) { try { asyncContext.complete(); } catch ( IllegalStateException ex) { try { logger.trace(""Already resumed!"" ex); } catch ( Exception ex2) { } ; } finally { request.removeAttribute(FrameworkConfig.ASYNC_CONTEXT); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,getContainerName,"@Override public String  (){ return super.getContainerName() + "" using javax.servlet/3.0""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,onComplete,"@Override public void  (AsyncEvent event) throws IOException { logger.trace(""Resumed (completed): event: {}"" uuid); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,onError,"@Override public void  (AsyncEvent event){ logger.trace(""onError(): event: {}"" event.getAsyncContext().getResponse()); if (p == null) { logger.error(""Invalid state - CometListener""); return; } try { p.cancelled((AtmosphereRequest)event.getAsyncContext().g"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,onStartAsync,"@Override public void  (AsyncEvent event){ logger.trace(""onStartAsync(): event: {}"" event.getAsyncContext().getResponse()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,onTimeout,"@Override public void  (AsyncEvent event) throws IOException { logger.trace(""onTimeout(): event: {}"" event.getAsyncContext().getRequest()); if (p == null) { logger.error(""Invalid state - CometListener""); return; } final AsyncContext asyncContext=event.get"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,service,@Override public Action  (AtmosphereRequest request AtmosphereResponse response) throws IOException  ServletException { Action action=suspended(request response); if (action.type() == Action.TYPE.SUSPEND) { suspend(action request response); } else if (act
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\Servlet30CometSupport.java,suspend,private void  (Action action AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { if (!req.isAsyncStarted() && !Utils.webSocketEnabled(req)) { AsyncContext asyncContext=req.startAsync(req res); asyncContext.addListener(new CometListener(this res.uuid())); if (action.timeout() != -1) { asyncContext.setTimeout(action.timeout()); } else { asyncContext.setTimeout(Integer.MAX_VALUE); } req.setAttribute(FrameworkConfig.ASYNC_CONTEXT asyncContext); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AtmosphereHandlerAdapter.java,onRequest,"@Override public void  (AtmosphereResource resource) throws IOException { logger.trace(""onRequest {}"" resource.uuid()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AtmosphereHandlerAdapter.java,onStateChange,"@Override public void  (AtmosphereResourceEvent event) throws IOException { logger.trace(""onRequest {}"" event.getResource().uuid()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,JSR356WebSocket,public  (Session session AtmosphereConfig config){ super(config); this.session=session; this.writeTimeout=config.getInitParameter(ApplicationConfig.WEBSOCKET_WRITE_TIMEOUT 60 * 1000); session.getAsyncRemote().setSendTimeout(writeTimeout); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,WriteResult,private  (AtmosphereResource r Object message){ this.r=r; this.message=message; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,close,"@Override public void  (){ if (!session.isOpen() || closed.getAndSet(true)) return; logger.trace(""WebSocket.close() for AtmosphereResource {}"" resource() != null ? resource().uuid() : ""null""); try { session.close(); } catch ( Exception e) { logger.trace("""
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,handleError,"private void  (Throwable e boolean acquired) throws IOException { if (acquired) { semaphore.release(); } if (e instanceof NullPointerException) { patchGlassFish((NullPointerException)e); return; } if (e instanceof RuntimeException) { throw (RuntimeException)e; } throw new RuntimeException(""Unexpected error while writing to socket"" e); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,isOpen,@Override public boolean  (){ return session.isOpen() && !closed.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,onResult,"@Override public void  (SendResult result){ semaphore.release(); if (!result.isOK() || result.getException() != null) { logger.trace(""WebSocket {} failed to write {}"" r message); if (r != null) { Broadcaster b=r.getBroadcaster(); b.getBroadcasterConfig()."
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,patchGlassFish,"void  (NullPointerException e){ logger.trace("""" e); WebSocketProcessorFactory.getDefault().getWebSocketProcessor(config().framework()).close(this 1002); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\container\version\JSR356WebSocket.java,write,"@Override public WebSocket  (byte[] data int offset int length) throws IOException { if (!isOpen()) { throw new IOException(""Socket closed {}""); } boolean acquired=false; try { acquired=semaphore.tryAcquire(writeTimeout TimeUnit.MILLISECONDS); if (acquire"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,init,@Override public void  (AtmosphereConfig config) throws ServletException { twoStepsWrite=config.getInitParameter(ApplicationConfig.TWO_STEPS_WRITE false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,onStateChange,@Override public void  (AtmosphereResourceEvent event) throws IOException { Object message=event.getMessage(); AtmosphereResource resource=event.getResource(); AtmosphereResponse r=resource.getResponse(); AtmosphereRequest request=resource.getRequest(); b
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,postStateChange,"protected final void  (AtmosphereResourceEvent event){ if (event.isCancelled() || event.isResuming()) return; AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(event.getResource()); if (r == null) { logger.trace(""Event {} returned a null AtmosphereResource"" event); return; } Boolean resumeOnBroadcast=r.resumeOnBroadcast(); if (!resumeOnBroadcast) { Object o=r.getRequest(false).getAttribute(ApplicationConfig.RESUME_ON_BROADCAST); if (o != null && Boolean.class.isAssignableFrom(o.getClass())) { resumeOnBroadcast=Boolean.class.cast(o); } } if (resumeOnBroadcast != null && resumeOnBroadcast) { r.resume(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,twoStepWrite,private void  (ServletOutputStream o byte[] data) throws IOException { o.write(data 0 1); o.flush(); o.write(data 1 data.length - 1); o.flush(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,useTwoStepWrite,protected boolean  (AtmosphereResourceEvent event){ return twoStepsWrite && event.getResource().transport() == AtmosphereResource.TRANSPORT.LONG_POLLING; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\AbstractReflectorAtmosphereHandler.java,write,protected void  (AtmosphereResourceEvent event ServletOutputStream o byte[] data) throws IOException { if (useTwoStepWrite(event) && data.length > 1) { twoStepWrite(o data); } else { o.write(data); o.flush(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,ReflectorServletProcessor,public  (Servlet servlet){ this.servlet=servlet; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,addFilter,public void  (Filter filter){ filters.add(filter); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,addFilterClassName,public void  (String filterClass String filterName){ if (filterClass == null || filterName == null) return; filtersClassAndNames.put(filterClass filterName); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,destroy,@Override public void  (){ filterChain.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getInitParameter,@Override public String  (String name){ return getServletConfig().getInitParameter(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getInitParameterNames,@Override public Enumeration<String>  (){ return getServletConfig().getInitParameterNames(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getServlet,public Servlet  (){ return servlet; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getServletClass,@Deprecated public String  (){ return servletClassName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getServletClassName,public String  (){ return servletClassName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getServletConfig,@Override public ServletConfig  (){ return filterChain.getServletConfig(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getServletContext,@Override public ServletContext  (){ return getServletConfig().getServletContext(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getServletInfo,@Override public String  (){ return filterChain.getServlet().getServletInfo(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,getServletName,@Override public String  (){ return filterChain.getServletConfig().getServletName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,loadFilter,private Filter  (URLClassLoader urlC String fClass) throws Exception { Filter f; try { f=config.framework().newClassInstance(Filter.class (Class<Filter>)urlC.loadClass(fClass)); } catch ( NullPointerException ex) { f=config.framework().newClassInstance(Filter.class (Class<Filter>)IOUtils.loadClass(getClass() fClass)); } return f; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,loadFilterClasses,"private void  (ServletConfig sc URLClassLoader urlC) throws Exception { for ( Map.Entry<String String> fClassAndName : filtersClassAndNames.entrySet()) { String fClass=fClassAndName.getKey(); String filterName=fClassAndName.getValue(); Filter f=loadFilter(urlC fClass); if (filterName == null) { if (sc.getInitParameter(APPLICATION_NAME) != null) { filterName=sc.getInitParameter(APPLICATION_NAME); } else { filterName=f.getClass().getSimpleName(); } } FilterConfigImpl fc=new FilterConfigImpl(sc); fc.setFilter(f); fc.setFilterName(filterName); filterChain.addFilter(fc); logger.info(""Installing Filter {}"" filterName); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,loadFilterInstances,"private void  (ServletConfig sc){ for ( Filter f : filters) { FilterConfigImpl fc=new FilterConfigImpl(sc); fc.setFilter(f); fc.setFilterName(f.getClass().getSimpleName()); filterChain.addFilter(fc); logger.info(""Installing Filter {}"" f.getClass().getSimpleName()); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,loadServlet,"private void  (ServletConfig sc URLClassLoader urlC) throws Exception { if (servletClassName != null && servlet == null) { try { servlet=config.framework().newClassInstance(Servlet.class (Class<Servlet>)urlC.loadClass(servletClassName)); } catch ( NullPointerException ex) { servlet=config.framework().newClassInstance(Servlet.class (Class<Servlet>)IOUtils.loadClass(getClass() servletClassName)); } } if (servlet != null) { logger.info(""Installing Servlet {}"" servletClassName == null ? servlet.getClass().getName() : servletClassName); } else { logger.info(""No servlet installed. Neither servlet nor servletClassName is set""); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,loadWebApplication,"void  (ServletConfig sc) throws Exception { URL url=sc.getServletContext().getResource(""/WEB-INF/lib/""); URLClassLoader urlC=new URLClassLoader(new URL[]{url} Thread.currentThread().getContextClassLoader()); loadServlet(sc urlC); if (!filters.isEmpty()) { loadFilterInstances(sc); } else { loadFilterClasses(sc urlC); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,log,"@Override public void  (String message Throwable t){ getServletContext().log(getServletName() + "": "" + message t); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,onRequest,"public void  (AtmosphereResource r) throws IOException { final boolean completionAware=Boolean.parseBoolean(r.getAtmosphereConfig().getInitParameter(ApplicationConfig.RESPONSE_COMPLETION_AWARE)); try { if (completionAware) { r.getRequest().setAttribute(ApplicationConfig.RESPONSE_COMPLETION_AWARE Boolean.TRUE); if (Boolean.parseBoolean(r.getAtmosphereConfig().getInitParameter(ApplicationConfig.RESPONSE_COMPLETION_RESET))) { r.getRequest().setAttribute(ApplicationConfig.RESPONSE_COMPLETION_RESET Boolean.TRUE); } } wrapper.service(r.getRequest() r.getResponse()); } catch ( Throwable ex) { logger.error(""onRequest()"" ex); throw new RuntimeException(ex); } finally { if (completionAware && r.getResponse() instanceof CompletionAware && !r.getRequest().isAsyncStarted()) { ((CompletionAware)r.getResponse()).onComplete(); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,service,@Override public void  (ServletRequest req ServletResponse res) throws ServletException  IOException { filterChain.invokeFilterChain(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,setFilterClassName,public void  (String filterClass){ if (filterClass == null) return; filtersClassAndNames.put(filterClass filterClass); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,setServlet,public void  (Servlet servlet){ this.servlet=servlet; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,setServletClass,@Deprecated public void  (String servletClass){ this.servletClassName=servletClass; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,setServletClassName,public void  (String servletClass){ this.servletClassName=servletClass; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\handler\ReflectorServletProcessor.java,toString,@Override public String  (){ return getClass().getSimpleName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereConfigInjectable.java,injectable,@Override public AtmosphereConfig  (AtmosphereConfig config){ return config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereConfigInjectable.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && AtmosphereConfig.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereFrameworkInjectable.java,injectable,@Override public AtmosphereFramework  (AtmosphereConfig config){ return config.framework(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereFrameworkInjectable.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && AtmosphereFramework.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereRequestIntrospector.java,injectable,@Override public AtmosphereRequest  (AtmosphereResource r){ final AtmosphereRequest request=r.getRequest(); return (AtmosphereRequest)Proxy.newProxyInstance(this.getClass().getClassLoader() new Class[]{AtmosphereRequest.class} new ThreadLocalInvoker(){ { 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereRequestIntrospector.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { return method.invoke(request args); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereRequestIntrospector.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && AtmosphereRequest.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,configure,public void  (AtmosphereConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,getAtmosphereConfig,@Produces public AtmosphereConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,getAtmosphereFramework,@Produces public AtmosphereFramework  (){ return config.framework(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,getAtmosphereResourceFactory,@Produces public AtmosphereResourceFactory  (){ return config.resourcesFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,getAtmosphereResourceSessionFactory,@Produces public AtmosphereResourceSessionFactory  (){ return config.sessionFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,getBroadcasterFactory,@Produces public BroadcasterFactory  (){ return config.getBroadcasterFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,getMetaBroadcaster,@Produces public MetaBroadcaster  (){ return config.metaBroadcaster(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereProducers.java,getWebSocketFactory,@Produces public WebSocketFactory  (){ return config.websocketFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceFactoryInjectable.java,injectable,@Override public AtmosphereResourceFactory  (AtmosphereConfig config){ return config.resourcesFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceFactoryInjectable.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && AtmosphereResourceFactory.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceEventIntrospector.java,injectable,@Override public AtmosphereResourceEvent  (AtmosphereResource r){ final AtmosphereResourceEvent e=r.getAtmosphereResourceEvent(); return (AtmosphereResourceEvent)Proxy.newProxyInstance(this.getClass().getClassLoader() new Class[]{AtmosphereResourceEvent.c
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceEventIntrospector.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { return method.invoke(e args); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceEventIntrospector.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && AtmosphereResourceEvent.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceSessionFactoryInjectable.java,injectable,@Override public AtmosphereResourceSessionFactory  (AtmosphereConfig config){ return config.sessionFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceSessionFactoryInjectable.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && AtmosphereResourceSessionFactory.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceIntrospector.java,injectable,@Override public AtmosphereResource  (final AtmosphereResource r){ return (AtmosphereResource)Proxy.newProxyInstance(this.getClass().getClassLoader() new Class[]{AtmosphereResource.class} new ThreadLocalInvoker(){ { set(r); } @Override public Object invok
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceIntrospector.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { return method.invoke(r args); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResourceIntrospector.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && AtmosphereResource.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResponseIntrospector.java,injectable,@Override public AtmosphereResponse  (AtmosphereResource r){ final AtmosphereResponse response=r.getResponse(); return (AtmosphereResponse)Proxy.newProxyInstance(this.getClass().getClassLoader() new Class[]{AtmosphereResponse.class} new ThreadLocalInvoker
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResponseIntrospector.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { return method.invoke(response args); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\AtmosphereResponseIntrospector.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && AtmosphereResponse.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterFactoryInjectable.java,injectable,@Override public BroadcasterFactory  (AtmosphereConfig config){ return config.getBroadcasterFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterFactoryInjectable.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && BroadcasterFactory.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterIntrospector.java,injectable,"@Override public Broadcaster  (AtmosphereResource r){ String named=nameLocal.get(); if (named == null) { named=Broadcaster.ROOT_MASTER; } String s=(String)r.getRequest().getAttribute(Named.class.getName()); int indx=named.indexOf(""{""); if (s != null && in"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterIntrospector.java,introspectField,@Override public void  (Class clazz Field f){ if (f.isAnnotationPresent(Named.class)) { String name=f.getAnnotation(Named.class).value(); if (name.isEmpty()) { name=f.getName(); } nameLocal.set(name); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterIntrospector.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { return method.invoke(broadcaster args); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\BroadcasterIntrospector.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && Broadcaster.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,InjectableObjectFactory,public  (){ injectableServiceLoader=ServiceLoader.load(Injectable.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,allowInjectionOf,public AtmosphereObjectFactory  (Injectable<?> injectable boolean first){ if (first) { injectables.addFirst(injectable); } else { injectables.add(injectable); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,applyMethods,public <U>void  (U instance Class<U> defaultType) throws IllegalAccessException { if (!pushBackInjection.contains(instance)) { Set<Method> methods=(getInheritedPrivateMethod(defaultType)); injectMethods(methods instance); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,configure,"@Override public void  (AtmosphereConfig config){ this.config=config; this.maxTry=config.getInitParameter(ApplicationConfig.INJECTION_TRY 5); String s=config.getInitParameter(ApplicationConfig.INJECTION_LISTENERS """"); if (s != null && !s.isEmpty()) { Stri"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,fieldInjectionException,"protected <T U extends T>void  (Field field U instance Class<T> clazz Exception ex){ for ( InjectionListener i : listeners) { try { i.fieldInjectionException(field instance clazz ex); } catch ( Exception ex2) { logger.error("""" ex2); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,getInjectable,public <U>U  (Class<U> u){ for ( Injectable c : injectables) { if (c.supportedType(u)) { return (U)c.injectable(config); } } return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,inject,public <T>T  (T instance) throws InstantiationException  IllegalAccessException { injectInjectable(instance instance.getClass() config.framework()); applyMethods(instance (Class<T>)instance.getClass()); return instance; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,injectFields,public <U>void  (Set<Field> fields U instance AtmosphereFramework framework LinkedList<Injectable<?>> injectable) throws IllegalAccessException { for ( Field field : fields) { if (field.isAnnotationPresent(Inject.class)) { for ( Injectable c : injectable) { if (c.supportedType(field.getType())) { if (InjectIntrospector.class.isAssignableFrom(c.getClass())) { InjectIntrospector.class.cast(c).introspectField(instance.getClass() field); } Class<U> clazz=(Class<U>)instance.getClass(); try { field.setAccessible(true); preFieldInjection(field instance clazz); Object o=c.injectable(framework.getAtmosphereConfig()); if (o == null) { nullFieldInjectionFor(field instance clazz); pushBackInjection.add(instance); continue; } postFieldInjection(field instance clazz); if (field.getType().equals(Boolean.TYPE)) { field.setBoolean(instance Boolean.class.cast(o).booleanValue()); } else if (field.getType().equals(Integer.TYPE)) { field.setInt(instance Integer.class.cast(o).intValue()); } else if (field.getType().equals(Byte.TYPE)) { field.setByte(instance Byte.class.cast(o).byteValue()); } else if (field.getType().equals(Double.TYPE)) { field.setDouble(instance Double.class.cast(o).doubleValue()); } else if (field.getType().equals(Long.TYPE)) { field.setLong(instance Long.class.cast(o).longValue()); } else if (field.getType().equals(Float.TYPE)) { field.setFloat(instance Float.class.cast(o).floatValue()); } else { field.set(instance o); } } catch ( Exception ex) { fieldInjectionException(field instance clazz ex); throw ex; } finally { field.setAccessible(false); } break; } } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,injectInjectable,public <U>void  (U instance Class<? extends U> defaultType AtmosphereFramework framework) throws IllegalAccessException { Set<Field> fields=getInheritedPrivateFields(defaultType); injectFields(fields instance framework injectables); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,injectMethods,private <U>void  (Set<Method> methods U instance) throws IllegalAccessException { for ( Method m : methods) { for ( Injectable c : introspectors) { if (!pushBackInjection.contains(instance)) { try { preMethodInjection(m instance (Class<U>)instance.getClass()); InjectIntrospector.class.cast(c).introspectMethod(m instance); postMethodInjection(m instance (Class<U>)instance.getClass()); } catch ( Exception ex) { methodInjectionException(m instance (Class<U>)instance.getClass() ex); throw ex; } } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,injectionFailed,"protected void  (){ for ( InjectionListener i : listeners) { try { i.injectionFailed(pushBackInjection); } catch ( Exception ex) { logger.error("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,listener,public InjectableObjectFactory  (InjectionListener i){ listeners.add(i); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,methodInjectionException,"protected <T U extends T>void  (Method m U instance Class<T> clazz Exception ex){ for ( InjectionListener i : listeners) { try { i.methodInjectionException(m instance clazz ex); } catch ( Exception ex2) { logger.error("""" ex2); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,needRequestScoped,public boolean  (Class defaultType) throws IllegalAccessException { Set<Field> fields=new HashSet<>(); fields.addAll(getInheritedPrivateFields(defaultType)); for ( Field field : fields) { for ( InjectIntrospector c : requestScopedIntrospectors) { if (c.supportedType(field.getType())) { return true; } } } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,newClassInstance,@Override public <T U extends T>U  (Class<T> classType Class<U> defaultType) throws InstantiationException  IllegalAccessException { U instance=defaultType.newInstance(); injectInjectable(instance defaultType config.framework()); applyMethods(instance def
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,nullFieldInjectionFor,"protected <T U extends T>void  (Field field U instance Class<T> clazz){ for ( InjectionListener i : listeners) { try { i.nullFieldInjectionFor(field instance clazz); } catch ( Exception ex2) { logger.error("""" ex2); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,postFieldInjection,"protected <T U extends T>void  (Field field U instance Class<T> clazz){ for ( InjectionListener i : listeners) { try { i.postFieldInjection(field instance clazz); } catch ( Exception ex) { logger.error("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,postMethodInjection,"protected <T U extends T>void  (Method method U instance Class<T> clazz){ for ( InjectionListener i : listeners) { try { i.postMethodInjection(method instance clazz); } catch ( Exception ex) { logger.error("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,preFieldInjection,"protected <T U extends T>void  (Field field U instance Class<T> clazz){ for ( InjectionListener i : listeners) { try { i.preFieldInjection(field instance clazz); } catch ( Exception ex) { logger.error("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,preMethodInjection,"protected <T U extends T>void  (Method method U instance Class<T> clazz){ for ( InjectionListener i : listeners) { try { i.preMethodInjection(method instance clazz); } catch ( Exception ex) { logger.error("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectIntrospectorAdapter.java,injectable,@Override public T  (AtmosphereConfig config){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectIntrospectorAdapter.java,supportedType,@Override public boolean  (Type t){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,requestScoped,public void  (Object instance Class defaultType) throws IllegalAccessException { Set<Field> fields=new HashSet<>(); fields.addAll(getInheritedPrivateFields(defaultType)); for ( Field field : fields) { for ( InjectIntrospector c : requestScopedIntrospectors) { for ( Class annotation : c.getClass().getAnnotation(RequestScoped.class).value()) { if (field.isAnnotationPresent(annotation)) { c.introspectField(instance.getClass() field); if (c.supportedType(field.getType())) { try { field.setAccessible(true); field.set(instance c.injectable(config)); } finally { field.setAccessible(false); } break; } } } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,retryInjection,"protected void  (AtmosphereFramework framework){ int maxTryPerCycle=maxTry; Set<Field> fields=new HashSet<Field>(); Object instance=null; final LinkedHashSet<Object> postponedMethodExecution=new LinkedHashSet<>(pushBackInjection); while (!pushBackInjection.isEmpty() & maxTryPerCycle-- > 0) { Iterator<Object> t=new LinkedList(pushBackInjection).iterator(); pushBackInjection.clear(); while (t.hasNext()) { instance=t.next(); fields.addAll(getInheritedPrivateFields(instance.getClass())); try { injectFields(fields instance framework injectables); } catch ( IllegalAccessException e) { logger.warn("""" e); } finally { fields.clear(); } } } if (!pushBackInjection.isEmpty()) { injectionFailed(); } for ( Object o : postponedMethodExecution) { try { applyMethods(o (Class<Object>)o.getClass()); } catch ( IllegalAccessException e) { logger.warn("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,started,@Override public void  (AtmosphereFramework framework){ retryInjection(framework); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\InjectableObjectFactory.java,toString,@Override public String  (){ return InjectableObjectFactory.class.getName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\MetaBroadcasterInjectable.java,injectable,@Override public MetaBroadcaster  (AtmosphereConfig config){ return config.metaBroadcaster(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\MetaBroadcasterInjectable.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && MetaBroadcaster.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\PathParamIntrospector.java,injectable,@Override public String  (AtmosphereResource r){ String named=pathLocal.get(); String[] paths=(String[])r.getRequest().getAttribute(PathParam.class.getName()); if (paths == null || paths.length != 2) { AtmosphereFramework.AtmosphereHandlerWrapper w=(Atmos
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\PathParamIntrospector.java,introspectField,@Override public void  (Class clazz Field f){ if (f.isAnnotationPresent(PathParam.class)) { String name=f.getAnnotation(PathParam.class).value(); if (name.isEmpty()) { name=f.getName(); } pathLocal.set(name); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\PathParamIntrospector.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && String.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\PostConstructIntrospector.java,introspectMethod,"@Override public void  (Method m Object instance){ if (!m.isAnnotationPresent(PostConstruct.class)) return; try { m.setAccessible(true); m.invoke(instance); } catch ( Exception e) { logger.error("""" e); } finally { m.setAccessible(false); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\WebSocketFactoryInjectable.java,injectable,@Override public WebSocketFactory  (AtmosphereConfig config){ return config.websocketFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\inject\WebSocketFactoryInjectable.java,supportedType,@Override public boolean  (Type t){ return (t instanceof Class) && WebSocketFactory.class.isAssignableFrom((Class)t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\BroadcastOnPostAtmosphereInterceptor.java,inspect,@Override public Action  (AtmosphereResource r){ return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\BroadcastOnPostAtmosphereInterceptor.java,postInspect,"@Override public void  (AtmosphereResource r){ if (r.getRequest().getMethod().equalsIgnoreCase(""POST"")) { AtmosphereRequest request=r.getRequest(); Object o; try { o=readEntirely(r); } catch ( IOException e) { logger.warn("""" e); return; } if (isBodyEmpty("
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AndroidAtmosphereInterceptor.java,inspect,@Override public Action  (final AtmosphereResource r){ if (!r.transport().equals(TRANSPORT.STREAMING)) return Action.CONTINUE; final AtmosphereResponse response=AtmosphereResourceImpl.class.cast(r).getResponse(false); String userAgent=AtmosphereResourceIm
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AndroidAtmosphereInterceptor.java,postPayload,@Override public void  (AtmosphereResponse response byte[] data int offset int length){ response.write(padding true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AndroidAtmosphereInterceptor.java,prePayload,@Override public void  (AtmosphereResponse response byte[] data int offset int length){ response.write(padding true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AndroidAtmosphereInterceptor.java,toString,"@Override public String  (){ return ""Android Interceptor Support""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,BroadcasterTracker,public  (){ this.broadcasterIds=new ConcurrentLinkedQueue<String>(); tick=System.currentTimeMillis(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,add,"public BroadcasterTracker  (Broadcaster b){ logger.trace(""Adding {}"" b.getID()); if (!broadcasterIds.contains(b.getID())) { broadcasterIds.add(b.getID()); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,configure,@Override public void  (AtmosphereConfig config){ factory=config.getBroadcasterFactory(); factory.addBroadcasterListener(new B()); stateTracker=ExecutorsFactory.getScheduler(config); String s=config.getInitParameter(STATE_RECOVERY_TIMEOUT); if (s != null)
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,destroy,@Override public void  (){ trackerFuture.cancel(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,ids,public ConcurrentLinkedQueue<String>  (){ return broadcasterIds; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,inspect,@Override public Action  (final AtmosphereResource r){ if (!Utils.pollableTransport(r.transport()) && !Utils.webSocketMessage(r)) { final BroadcasterTracker tracker=track(r).tick(); List<Object> cachedMessages=retrieveCache(r tracker false); if (!cachedMe
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,lastTick,public long  (){ return tick; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,onAddAtmosphereResource,"@Override public void  (Broadcaster b AtmosphereResource r){ BroadcasterTracker t=states.get(r.uuid()); if (t == null) { t=track(r); } logger.trace(""Starting tracking the state of {} with broadcaster {}"" r.uuid() b.getID()); t.add(b); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,onBroadcast,"@Override public void  (AtmosphereResourceEvent event){ r.removeEventListener(this); doNotSuspend.set(true); logger.trace(""onBroadcast""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceStateRecovery.java,onRemoveAtmosphereResource,"@Override public void  (Broadcaster b AtmosphereResource r){ BroadcasterTracker t=states.get(r.uuid()); AtmosphereResourceEvent e=r.getAtmosphereResourceEvent(); if (e.isClosedByClient() || !r.isResumed() && !e.isResumedOnTimeout()) { logger.trace(""Deleti"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,AtmosphereResourceLifecycleInterceptor,public  (boolean force){ this.force=force; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ String s=config.getInitParameter(ATMOSPHERERESOURCE_INTERCEPTOR_METHOD); if (s != null) { method=s; } s=config.getInitParameter(ATMOSPHERERESOURCE_INTERCEPTOR_TIMEOUT); if (s != null) { timeoutInSeconds=In
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,inspect,@Override public Action  (AtmosphereResource r){ switch (r.transport()) { case JSONP: case AJAX: case LONG_POLLING: r.resumeOnBroadcast(true); break; default : break; } return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,method,public AtmosphereResourceLifecycleInterceptor  (String method){ this.method=method; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,onBroadcast,"@Override public void  (AtmosphereResourceEvent event){ switch (r.transport()) { case JSONP: case AJAX: case LONG_POLLING: break; default : try { r.getResponse().flushBuffer(); } catch ( IOException e) { logger.trace("""" e); } break; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,postInspect,@Override public void  (final AtmosphereResource r){ if (r.transport().equals(UNDEFINED) || Utils.webSocketMessage(r) || r.transport().equals(POLLING)) return; AtmosphereResourceImpl impl=AtmosphereResourceImpl.class.cast(r); if ((force || impl.getRequest
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,timeoutInSeconds,public AtmosphereResourceLifecycleInterceptor  (int timeoutInSeconds){ this.timeoutInSeconds=timeoutInSeconds; timeoutInMilli=TimeUnit.MILLISECONDS.convert(timeoutInSeconds TimeUnit.SECONDS); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\AtmosphereResourceLifecycleInterceptor.java,toString,"public String  (){ return ""Atmosphere LifeCycle""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,call,"@Override public Object  () throws Exception { synchronized (r) { if (AtmosphereResourceImpl.class.cast(r).isInScope() && r.isSuspended()) { try { logger.trace(""Heartbeat for Resource {}"" r); response.write(paddingBytes false); if (Utils.resumableTranspor"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,cancelF,"void  (AtmosphereRequest request){ try { Future<?> f=(Future<?>)request.getAttribute(HEARTBEAT_FUTURE); if (f != null) f.cancel(false); request.removeAttribute(HEARTBEAT_FUTURE); } catch ( Exception ex) { logger.trace("""" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,clientHeartbeatFrequencyInSeconds,public HeartbeatInterceptor  (int clientHeartbeatFrequencyInSeconds){ this.clientHeartbeatFrequencyInSeconds=clientHeartbeatFrequencyInSeconds; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,clock,"public HeartbeatInterceptor  (final int interval final AtmosphereResource r final AtmosphereRequest request final AtmosphereResponse response){ try { request.setAttribute(HEARTBEAT_FUTURE heartBeat.schedule(new Callable<Object>(){ @Override public Object call() throws Exception { synchronized (r) { if (AtmosphereResourceImpl.class.cast(r).isInScope() && r.isSuspended()) { try { logger.trace(""Heartbeat for Resource {}"" r); response.write(paddingBytes false); if (Utils.resumableTransport(r.transport()) && resumeOnHeartbeat) { r.resume(); } else if (flushBuffer) { response.flushBuffer(); } } catch ( Throwable t) { logger.trace(""{}"" r.uuid() t); cancelF(request); } } else { cancelF(request); } } return null; } }  interval TimeUnit.SECONDS)); } catch ( Throwable t) { logger.warn("""" t); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,configure,@Override public void  (final AtmosphereConfig config){ String s=config.getInitParameter(HEARTBEAT_INTERVAL_IN_SECONDS); if (s != null) { heartbeatFrequencyInSeconds=Integer.valueOf(s); } s=config.getInitParameter(HEARTBEAT_PADDING_CHAR); if (s != null) {
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,destroy,@Override public void  (){ if (destroyed.getAndSet(true)) return; for ( AtmosphereResource r : config.resourcesFactory().findAll()) { cancelF(r.getRequest()); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,extractHeartbeatInterval,"protected int  (final AtmosphereResourceImpl resource){ int interval=heartbeatFrequencyInSeconds; final String s=resource.getRequest(false).getHeader(HeaderConfig.X_HEARTBEAT_SERVER); if (s != null) { try { interval=Integer.parseInt(s); if (interval != 0 && interval < heartbeatFrequencyInSeconds) { interval=heartbeatFrequencyInSeconds; } } catch ( NumberFormatException nfe) { logger.warn(""{} header is not an integer"" HeaderConfig.X_HEARTBEAT_SERVER nfe); } } return interval; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,getPaddingBytes,public byte[]  (){ return this.paddingBytes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,heartbeatFrequencyInSeconds,public int  (){ return heartbeatFrequencyInSeconds; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,inspect,@Override public Action  (final AtmosphereResource r){ final AtmosphereResourceImpl impl=AtmosphereResourceImpl.class.cast(r); final AtmosphereRequest request=impl.getRequest(false); final AtmosphereResponse response=impl.getResponse(false); if (clientHea
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,onClose,@Override public void  (AtmosphereResourceEvent event){ cancelF(request); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,onDisconnect,@Override public void  (AtmosphereResourceEvent event){ cancelF(request); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,onHeartbeat,@Override public void  (AtmosphereResourceEvent event){ AtmosphereResourceHeartbeatEventListener.class.cast(r.getAtmosphereHandler()).onHeartbeat(event); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,onResume,@Override public void  (AtmosphereResourceEvent event){ cancelF(request); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,onSuspend,@Override public void  (AtmosphereResourceEvent event){ if (!wasSuspended) { clock(interval r request response); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,paddingText,public HeartbeatInterceptor  (byte[] paddingBytes){ this.paddingBytes=paddingBytes; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,postPayload,"@Override public void  (final AtmosphereResponse response byte[] data int offset int length){ logger.trace(""Scheduling heartbeat for {}"" r.uuid()); clock(interval r request response); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,resumeOnHeartbeat,public HeartbeatInterceptor  (boolean resumeOnHeartbeat){ this.resumeOnHeartbeat=resumeOnHeartbeat; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,toString,"@Override public String  (){ return ""Heartbeat Interceptor Support""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\HeartbeatInterceptor.java,transformPayload,@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { cancelF(request); return responseDraft; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ String nocache=config.getInitParameter(ApplicationConfig.NO_CACHE_HEADERS); injectCacheHeaders=nocache != null ? false : true; String wh=config.getInitParameter(FrameworkConfig.WRITE_HEADERS); writeHeaders
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,injectCacheHeaders,public CacheHeadersInterceptor  (boolean injectCacheHeaders){ this.injectCacheHeaders=injectCacheHeaders; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,inspect,@Override public Action  (AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; final AtmosphereResponse response=r.getResponse(); final AtmosphereRequest request=r.getRequest(); request.setAttribute(ApplicationConfig.NO_CACHE_HEAD
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,toString,"@Override public String  (){ return ""Default Response's Headers Interceptor""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CacheHeadersInterceptor.java,writeHeaders,public CacheHeadersInterceptor  (boolean writeHeaders){ this.writeHeaders=writeHeaders; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ String ac=config.getInitParameter(ApplicationConfig.DROP_ACCESS_CONTROL_ALLOW_ORIGIN_HEADER); if (ac != null) { enableAccessControl=!Boolean.parseBoolean(ac); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,enableAccessControl,public CorsInterceptor  (boolean enableAccessControl){ this.enableAccessControl=enableAccessControl; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,inspect,"@Override public Action  (AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; if (!enableAccessControl) return Action.CONTINUE; AtmosphereRequest req=r.getRequest(); AtmosphereResponse res=r.getResponse(); if (req.getHeader(""Orig"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,priority,@Override public PRIORITY  (){ return InvokationOrder.FIRST_BEFORE_DEFAULT; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\CorsInterceptor.java,toString,"@Override public String  (){ return ""CORS Interceptor Support""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,configure,public void  (AtmosphereConfig config){ this.config=config; String maxInactive=config.getInitParameter(MAX_INACTIVE); if (maxInactive != null) { maxInactiveTime=Long.parseLong(maxInactive); } start(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,destroy,@Override public void  (){ if (future != null) { future.cancel(true); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,idleResources,"protected void  (){ if (logger.isTraceEnabled()) { logger.trace(""{} monitoring {} AtmosphereResources"" getClass().getSimpleName() config.resourcesFactory().findAll().size()); } for ( AtmosphereResource r : config.resourcesFactory().findAll()) { if (Utils.pollableTransport(r.transport())) { continue; } AtmosphereRequest req=AtmosphereResourceImpl.class.cast(r).getRequest(false); try { if (req.getAttribute(MAX_INACTIVE) == null) { logger.warn(""Invalid state {}"" r); r.removeFromAllBroadcasters(); config.resourcesFactory().unRegisterUuidForFindCandidate(r); continue; } long l=(Long)req.getAttribute(MAX_INACTIVE); if (logger.isTraceEnabled() && l > 0) { logger.trace(""Expiring {} in {}"" r.uuid() System.currentTimeMillis() - l); } if (l > 0 && System.currentTimeMillis() - l > maxInactiveTime) { try { req.setAttribute(MAX_INACTIVE (long)-1); logger.debug(""IdleResourceInterceptor disconnecting {}"" r); Future<?> f=(Future<?>)req.getAttribute(HeartbeatInterceptor.HEARTBEAT_FUTURE); if (f != null) f.cancel(false); req.removeAttribute(HeartbeatInterceptor.HEARTBEAT_FUTURE); WebSocket webSocket=AtmosphereResourceImpl.class.cast(r).webSocket(); if (webSocket != null) { webSocket.close(); } else { AsynchronousProcessor.class.cast(config.framework().getAsyncSupport()).endRequest(AtmosphereResourceImpl.class.cast(r) true); } } finally { r.removeFromAllBroadcasters(); config.resourcesFactory().unRegisterUuidForFindCandidate(r); } } } catch ( Throwable e) { logger.warn(""IdleResourceInterceptor"" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,inspect,@Override public Action  (AtmosphereResource r){ if (maxInactiveTime > 0 && !Utils.pollableTransport(r.transport())) { AtmosphereResourceImpl.class.cast(r).getRequest(false).setAttribute(MAX_INACTIVE System.currentTimeMillis()); } return Action.CONTINUE; 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,maxInactiveTime,public IdleResourceInterceptor  (long maxInactiveTime){ this.maxInactiveTime=maxInactiveTime; start(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,priority,@Override public PRIORITY  (){ return InvokationOrder.BEFORE_DEFAULT; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,run,public void  (){ idleResources(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\IdleResourceInterceptor.java,start,"private void  (){ if (future != null) { future.cancel(false); } if (maxInactiveTime > 0) { logger.info(""{} started with idle timeout set to {}"" IdleResourceInterceptor.class.getSimpleName() maxInactiveTime); future=ExecutorsFactory.getScheduler(config).scheduleAtFixedRate(new Runnable(){ public void run(){ idleResources(); } }  0 2 TimeUnit.SECONDS); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,callbackName,String  (){ String callback=request.getParameter(HeaderConfig.JSONP_CALLBACK_NAME); if (callback == null) { String jsonp=(String)config.properties().get(HeaderConfig.JSONP_CALLBACK_NAME); if (jsonp != null) { callback=request.getParameter(jsonp); } } return callback; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,escapeForJavaScript,"protected String  (String str){ try { str=StringEscapeUtils.escapeJavaScript(str); } catch ( Exception e) { logger.error(""Failed to escape"" e); str=null; } return str; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,inspect,"@Override public Action  (AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; final AtmosphereRequest request=r.getRequest(); final AtmosphereResponse response=r.getResponse(); String uri=request.getRequestURI() == null ? """" : re"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,postPayload,@Override public void  (AtmosphereResponse response byte[] data int offset int length){ response.write(endChunk true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,prePayload,@Override public void  (AtmosphereResponse response byte[] data int offset int length){ String callbackName=callbackName(); response.write(callbackName + startChunk); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,toString,"@Override public String  (){ return ""JSONP Interceptor Support""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JSONPAtmosphereInterceptor.java,transformPayload,"@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { String charEncoding=response.getCharacterEncoding() == null ? ""UTF-8"" : response.getCharacterEncoding(); return escapeForJavaScript(new String(res"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,configure,@Override public void  (final AtmosphereConfig config){ String s=config.getInitParameter(ApplicationConfig.MESSAGE_DELIMITER); if (s != null) { wsDelimiter=s; } enforceAtmosphereVersion=Boolean.valueOf(config.getInitParameter(ApplicationConfig.ENFORCE_ATM
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,enforceAtmosphereVersion,public JavaScriptProtocol  (boolean enforceAtmosphereVersion){ this.enforceAtmosphereVersion=enforceAtmosphereVersion; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,inspect,@Override public Action  (final AtmosphereResource ar){ if (Utils.webSocketMessage(ar)) return Action.CONTINUE; final AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(ar); final AtmosphereRequest request=r.getRequest(false); final AtmosphereResp
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,onSuspend,"@Override public void  (AtmosphereResourceEvent event){ response.write(protocolMessage.get()); try { response.flushBuffer(); } catch ( IOException e) { logger.trace("""" e); } r.removeEventListener(this); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,parseVersion,"private static int  (String version){ String[] parts=version.split(""\\.""); return Integer.valueOf(parts[0] + parts[1] + parts[2]); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,toString,"@Override public String  (){ return ""Atmosphere JavaScript Protocol""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\JavaScriptProtocol.java,wsDelimiter,public JavaScriptProtocol  (String wsDelimiter){ this.wsDelimiter=wsDelimiter; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\NginxInterceptor.java,inspect,"@Override public Action  (AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; try { r.getResponse().addHeader(""X-Accel-Buffering"" ""No""); } catch ( Throwable t) { logger.trace("""" t); } return Action.CONTINUE; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\OldBrowserPaddingInterceptor.java,OldBrowserPaddingInterceptor,public  (){ super(8192); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\OnDisconnectInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ if (AsynchronousProcessor.class.isAssignableFrom(config.framework().getAsyncSupport().getClass())) { p=AsynchronousProcessor.class.cast(config.framework().getAsyncSupport()); } this.config=config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\OnDisconnectInterceptor.java,inspect,@Override public Action  (final AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; AtmosphereRequest request=AtmosphereResourceImpl.class.cast(r).getRequest(false); String uuid=r.uuid(); if (closeMessage(request)) { AtmosphereRe
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\OnDisconnectInterceptor.java,toString,"public String  (){ return ""Browser disconnection detection""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SessionCreationInterceptor.java,inspect,"@Override public Action  (AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; if (r.session(false) == null && !ids.remove(r.uuid()) && r.getRequest().getMethod().equalsIgnoreCase(""GET"")) { r.session(true); ids.offer(r.uuid()); re"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,ForcePreSuspend,public  (AtmosphereResponse response){ this.response=response; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,PaddingAtmosphereInterceptor,public  (int size){ paddingText=confPadding(size); padding=paddingText.getBytes(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,confPadding,"protected final static String  (int size){ StringBuilder whitespace=new StringBuilder(); for (int i=0; i < size; i++) { whitespace.append("" ""); } whitespace.append(""\n""); return whitespace.toString(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,inspect,@Override public Action  (final AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; final AtmosphereResponse response=r.getResponse(); final AtmosphereRequest request=r.getRequest(); String uuid=request.getHeader(HeaderConfig.X_A
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,onPreSuspend,@Override public void  (AtmosphereResourceEvent event){ writePadding(response); event.getResource().removeEventListener(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,padding,"private void  (){ if (!r.isSuspended()) { writePadding(response); request.setAttribute(""paddingWritten"" ""true""); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,prePayload,@Override public void  (AtmosphereResponse response byte[] data int offset int length){ padding(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,toString,"@Override public String  (){ return ""Browser Padding Interceptor Support""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\PaddingAtmosphereInterceptor.java,writePadding,"private void  (AtmosphereResponse response){ AtmosphereRequest request=response.request(); if (request != null && request.getAttribute(""paddingWritten"") != null) return; if (response.resource() != null && response.resource().transport().equals(TRANSPORT.STREAMING)) { request.setAttribute(FrameworkConfig.TRANSPORT_IN_USE HeaderConfig.STREAMING_TRANSPORT); response.setContentType(""text/plain""); } response.write(padding true); try { response.flushBuffer(); } catch ( IOException e) { logger.trace("""" e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,JSONEnvelopeReader,public  (Reader reader) throws IOException { this.reader=reader; this.headers=new HashMap<String String>(); prepare(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,attachWriter,private void  (final AtmosphereResource r){ AtmosphereResponse res=r.getResponse(); AsyncIOWriter writer=res.getAsyncIOWriter(); if (writer instanceof AtmosphereInterceptorWriter) { ((AtmosphereInterceptorWriter)writer).interceptor(interceptor 0); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,close,@Override public void  () throws IOException { reader.close(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ super.configure(config); detached=Boolean.parseBoolean(config.getInitParameter(PROTOCOL_DETACHED_KEY)); heartbeat=config.getBroadcasterFactory().lookup(DefaultBroadcaster.class getHeartbeatBroadcasterName(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,createAtmosphereRequest,"protected AtmosphereRequest  (AtmosphereRequest request String body) throws IOException { JSONEnvelopeReader jer=new JSONEnvelopeReader(new StringReader(body)); final String id=jer.getHeader(""id""); if (id != null) { request.localAttributes().put(REQUEST_ID id); } boolean skip=false; final boolean continued=Boolean.valueOf(jer.getHeader(""continue"")); Reader reader=readerPool.getReader(id false); if (reader != null) { skip=true; } else if (continued) { reader=readerPool.getReader(id true); } if (skip) { final Reader data=jer.getReader(); if (data != null) { readerPool.addChunk(id data continued); } return null; } else { final String method=jer.getHeader(""method""); String path=jer.getHeader(""path""); final String type=jer.getHeader(""type""); final String accept=jer.getHeader(""accept""); AtmosphereRequest.Builder b=new AtmosphereRequestImpl.Builder(); b.method(method != null ? method : ""GET"").pathInfo(path != null ? path : ""/""); if (accept != null) { Map<String String> headers=new TreeMap<String String>(String.CASE_INSENSITIVE_ORDER); headers.put(""Accept"" accept); b.headers(headers); } b.contentType(type); final int qpos=path.indexOf('?'); if (qpos > 0) { b.queryString(path.substring(qpos + 1)); path=path.substring(0 qpos); } final Reader data=jer.getReader(); if (data != null) { if (reader != null) { b.reader(reader); readerPool.addChunk(id data true); } else { b.reader(data); } } String requestURL=request.getRequestURL() + path.substring(request.getRequestURI().length()); b.requestURI(path).requestURL(requestURL).request(request); return b.build(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,createResponse,"protected byte[]  (AtmosphereResponse response byte[] payload){ if (LOG.isDebugEnabled()) { LOG.debug(""createResponse for payload {}"" new String(payload)); } AtmosphereRequest request=response.request(); String id=(String)request.getAttribute(REQUEST_ID); if (id == null) { return payload; } ByteArrayOutputStream baos=new ByteArrayOutputStream(); if (id != null) { try { baos.write(RESPONSE_TEMPLATE_HEAD); baos.write(id.getBytes()); if (isDetached(request)) { if (isLastResponse(request response)) { baos.write(RESPONSE_TEMPLATE_BELLY_DETACHED); } else { baos.write(RESPONSE_TEMPLATE_BELLY_CONTINUE_DETACHED); } baos.write(RESPONSE_TEMPLATE_TAIL); baos.write(RESPONSE_TEMPLATE_NEWLINE); baos.write(payload); } else { boolean isobj=isJSONObject(payload); if (isLastResponse(request response)) { baos.write(RESPONSE_TEMPLATE_BELLY); } else { baos.write(RESPONSE_TEMPLATE_BELLY_CONTINUE); } if (!isobj) { baos.write(quote(payload)); } else { baos.write(payload); } baos.write(RESPONSE_TEMPLATE_TAIL); } } catch ( IOException e) { } } return baos.toByteArray(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,getHeader,public String  (String name){ return headers.get(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,getHeaders,public Map<String String>  (){ return headers; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,getHeartbeatBroadcasterName,protected String  (){ return HEARTBEAT_BROADCASTER_NAME; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,getHeartbeatTemplate,protected String  (){ return HEARTBEAT_TEMPLATE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,getHeartbeatTemplateArguments,protected Object[]  (){ return new Object[]{UUID.randomUUID().toString() System.currentTimeMillis()}; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,getReader,"public Reader  (){ if (!datap && !detachedp) { return null; } return new Reader(){ private int b; @Override public int read( char[] cbuf  int off  int len) throws IOException { int n=reader.read(cbuf off len); if (n > 0) { boolean escaping=false; char quot=0; for (int i=off; i < n; i++) { char c=cbuf[i]; if (c == '{' && !escaping) { b++; } else if (c == '}' && !escaping) { b--; if (b < 0) { n--; } } else if ((c == '""' || c == '\'') && !escaping) { if (c == quot) { quot=0; } else { quot=c; } } else if (c == '\\' && quot != 0 && !escaping) { escaping=true; } else if (escaping) { escaping=false; } } } return n; } @Override public void close() throws IOException { reader.close(); } @Override public boolean ready() throws IOException { return reader.ready(); } } ; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,inspect,"@Override public Action  (final AtmosphereResource r){ if (AtmosphereResource.TRANSPORT.WEBSOCKET != r.transport() && AtmosphereResource.TRANSPORT.SSE != r.transport() && AtmosphereResource.TRANSPORT.POLLING != r.transport()) { LOG.debug(""Skipping for non"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,isDetached,protected boolean  (AtmosphereRequest request){ final String prop=request.getHeader(X_ATMOSPHERE_SIMPLE_REST_PROTOCOL_DETACHED); return (detached && prop == null) || Boolean.valueOf(prop); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,isJSONObject,protected static boolean  (byte[] b){ return b.length > 0 && (b[0] == (byte)'[' || b[0] == (byte)'{'); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,isLastResponse,protected static boolean  (AtmosphereRequest request AtmosphereResponse response){ return (response instanceof CompletionAware && ((CompletionAware)response).completed()) || Boolean.TRUE != request.getAttribute(ApplicationConfig.RESPONSE_COMPLETION_AWARE); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,isWS,private boolean  (int c){ return c == 0x20 || c == 0x09 || c == 0x0a || c == 0x0d; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,next,private int  (boolean skipws) throws IOException { int c; if (peek != -1) { c=peek; peek=-1; } else { while ((c=reader.read()) != -1 && skipws && isWS(c)) ; } return c; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,nextName,"private String  () throws IOException { int c=next(true); if (c == '""' || c == '\'') { return nextQuoted(c); } throw new IOException(""invalid name: missing quote '\""'""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,nextNonQuoted,"private String  () throws IOException { StringBuilder sb=new StringBuilder(); int c; while ((c=next(false)) != -1) { if (c == '}' || c == ' ' || isWS(c)) { unread(c); break; } else { sb.append((char)c); } } if (c != -1) { return sb.toString(); } throw new IOException(""invalid value: non-terminated""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,nextQuoted,"private String  (int quot) throws IOException { StringBuilder sb=new StringBuilder(); boolean escaping=false; int c; while ((c=next(false)) != -1) { if (c == '\\' && !escaping) { escaping=true; } else if (c == quot && !escaping) { break; } else { sb.append((char)c); if (escaping) { escaping=false; } } } if (c != -1) { return sb.toString(); } throw new IOException(""invalid quoted string: missing quotation""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,nextValue,"private String  () throws IOException { int c=next(true); if (c == '""' || c == '\'') { return nextQuoted(c); } else if (c == 't' || c == 'f' || ('0' <= c && c <= '9')) { unread(c); return nextNonQuoted(); } throw new IOException(""invalid value: unquoted non literals""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,onDisconnect,"@Override public void  (AtmosphereResourceEvent event){ super.onDisconnect(event); final String srid=(String)event.getResource().getRequest().getAttribute(ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID); LOG.debug(""Unregistrering suspended resource:"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,onSuspend,"@Override public void  (AtmosphereResourceEvent event){ final String srid=(String)event.getResource().getRequest().getAttribute(ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID); LOG.debug(""Registrering suspended resource: {}"" srid); suspendedResponse"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,prepare,"private void  () throws IOException { int c=next(true); if (c == '{') { for (; ; ) { String name=nextName(); c=next(true); if (c == ':') { if (""data"".equals(name)) { datap=true; break; } else if (""detached"".equals(name)) { if (Boolean.valueOf(nextValue())) { detachedp=true; } } else { headers.put(name nextValue()); } } else { throw new IOException(""invalid value: missing name-separator ':'""); } c=next(true); if (c != ' ') { if (c == '}' && detachedp) { while (c != -1) { c=next(false); if (c == '\n') { break; } } } else { unread(c); } break; } } } else { throw new IOException(""invalid object: missing being-object '{'""); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,quote,"protected static byte[]  (byte[] b){ ByteArrayOutputStream baos=new ByteArrayOutputStream(); baos.write('""'); for ( byte c : b) { if (c == '""') { baos.write('\\'); } baos.write(c); } baos.write('""'); return baos.toByteArray(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,read,@Override public int  (char[] cbuf int off int len) throws IOException { int n=reader.read(cbuf off len); if (n > 0) { boolean escaping=false; char quot=0; for (int i=off; i < n; i++) { char c=cbuf[i]; if (c == '{' && !escaping) { b++; } else if (c == '}'
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,ready,@Override public boolean  () throws IOException { return reader.ready(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,scheduleHeartbeat,private void  (AtmosphereResource r){ heartbeat.addAtmosphereResource(r); if (!heartbeatScheduled) { heartbeat.scheduleFixedBroadcast(String.format(getHeartbeatTemplate() getHeartbeatTemplateArguments()) DEFAULT_HEARTBEAT_INTERVAL DEFAULT_HEARTBEAT_INTERVAL TimeUnit.SECONDS); heartbeatScheduled=true; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,transformPayload,@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { return createResponse(response responseDraft); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,unread,private void  (int c){ peek=c; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SimpleRestInterceptor.java,write,@Override public AsyncIOWriter  (AtmosphereResponse r byte[] data int offset int length) throws IOException { suspendedResponse.write(data offset length); suspendedResponse.flushBuffer(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,inspect,@Override public Action  (final AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; final AtmosphereRequest request=AtmosphereResourceImpl.class.cast(r).getRequest(false); boolean connecting=request.getHeader(HeaderConfig.X_ATMOS
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,onClose,@Override public void  (AtmosphereResourceEvent event){ onDisconnect(event); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,onDisconnect,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""Untracking {}"" r.uuid()); trackedUUID.remove(r.uuid()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,priority,@Override public PRIORITY  (){ return InvokationOrder.BEFORE_DEFAULT; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,toString,"@Override public String  (){ return ""UUID Tracking Interceptor""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SuspendTrackerInterceptor.java,trackedUUID,public Set<String>  (){ return trackedUUID; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,P,private  (AtmosphereResponse response){ this.response=response; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,configure,@Override public void  (AtmosphereConfig config){ String s=config.getInitParameter(ApplicationConfig.SSE_DEFAULT_CONTENTTYPE); if (s != null) { contentType=s; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,encodeMultilineData,private static byte[]  (byte[] data){ ByteArrayOutputStream baos=new ByteArrayOutputStream(); int bp=0; int ep=0; try { while (ep < data.length) { int c=data[ep]; if (c == '\r') { if (baos.size() > 0) { baos.write(NEWLINE); baos.write(DATA); } baos.write(data bp ep - bp); if (ep + 1 < data.length && data[ep + 1] == '\n') { ep++; } bp=ep + 1; } else if (c == '\n') { if (baos.size() > 0) { baos.write(NEWLINE); baos.write(DATA); } baos.write(data bp ep - bp); bp=ep + 1; } ep++; } if (baos.size() > 0) { baos.write(NEWLINE); baos.write(DATA); } baos.write(data bp ep - bp); } catch ( IOException e) { } return baos.toByteArray(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,inspect,"@Override public Action  (final AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; final AtmosphereResponse response=r.getResponse(); final AtmosphereRequest request=r.getRequest(); String accept=request.getHeader(""Accept"") == n"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,isMultilineData,private static boolean  (byte[] data){ for ( byte b : data) { if (b == '\r' || b == '\n') { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,onPreSuspend,@Override public void  (AtmosphereResourceEvent event){ writePadding(response); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,padding,private boolean  (){ if (!r.isSuspended()) { return writePadding(response); } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,postPayload,@Override public void  (AtmosphereResponse response byte[] data int offset int length){ if (r.isSuspended() || r.getRequest().getAttribute(CALLBACK_JAVASCRIPT_PROTOCOL) != null || r.getRequest().getAttribute(CONTAINER_RESPONSE) != null) { response.write(E
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,prePayload,@Override public void  (AtmosphereResponse response byte[] data int offset int length){ boolean noPadding=padding(); if (!noPadding || r.getRequest().getAttribute(CALLBACK_JAVASCRIPT_PROTOCOL) != null) { response.write(DATA true); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,toString,"@Override public String  (){ return ""SSE Interceptor Support""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,transformPayload,@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { boolean noPadding=padding(); if (!noPadding || r.getRequest().getAttribute(CALLBACK_JAVASCRIPT_PROTOCOL) != null) { if (isMultilineData(responseDr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\SSEAtmosphereInterceptor.java,writePadding,"private boolean  (AtmosphereResponse response){ if (response.request() != null && response.request().getAttribute(""paddingWritten"") != null) return false; response.setContentType(contentType); response.setCharacterEncoding(""utf-8""); boolean isUsingStream=(Boolean)response.request().getAttribute(PROPERTY_USE_STREAM); if (isUsingStream) { try { OutputStream stream=response.getResponse().getOutputStream(); try { stream.write(padding); stream.flush(); } catch ( IOException ex) { logger.warn(""SSE may not work"" ex); } } catch ( IOException e) { logger.trace("""" e); } } else { try { PrintWriter w=response.getResponse().getWriter(); w.println(paddingText); w.flush(); } catch ( IOException e) { logger.trace("""" e); } } response.resource().getRequest().setAttribute(""paddingWritten"" ""true""); return true; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,configure,"@Override public void  (AtmosphereConfig config){ String s=config.getInitParameter(EXCLUDED_CONTENT_TYPES); if (s != null) { excludedContentTypes.addAll(Arrays.asList(s.split("" ""))); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,excludedContentType,public TrackMessageSizeB64Interceptor  (String excludedContentType){ excludedContentTypes.add(excludedContentType.toLowerCase()); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,inspect,@Override public Action  (final AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; final AtmosphereResponse response=r.getResponse(); super.inspect(r); AsyncIOWriter writer=response.getAsyncIOWriter(); if (AtmosphereInterceptorW
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,toString,"@Override public String  (){ return "" Track Message Size Base64 Interceptor using "" + DELIMITER; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\TrackMessageSizeB64Interceptor.java,transformPayload,@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { if (response.request().getAttribute(SKIP_INTERCEPTOR) == null && Boolean.valueOf(response.request().getHeader(HeaderConfig.X_ATMOSPHERE_TRACKMESSA
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\interceptor\WebSocketMessageSuspendInterceptor.java,inspect,@Override public Action  (AtmosphereResource r){ if (Utils.webSocketMessage(r)) { AtmosphereResourceImpl.class.cast(r).action().type(Action.TYPE.SUSPEND_MESSAGE); } return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\BroadcasterLifecyclePolicyHandler.java,onPostCreate,@Override public void  (Broadcaster b){ if (DefaultBroadcaster.class.isAssignableFrom(b.getClass())) { DefaultBroadcaster broadcaster=DefaultBroadcaster.class.cast(b); broadcaster.lifecycleHandler(liferCycleHandler.on(broadcaster)); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\BroadcasterLifecyclePolicyHandler.java,onPreDestroy,@Override public void  (Broadcaster b){ if (DefaultBroadcaster.class.isAssignableFrom(b.getClass())) { DefaultBroadcaster broadcaster=DefaultBroadcaster.class.cast(b); if (broadcaster.lifecycleHandler() != null) { broadcaster.lifecycleHandler().off(broadc
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\BroadcasterLifecyclePolicyHandler.java,onRemoveAtmosphereResource,@Override public void  (Broadcaster b AtmosphereResource r){ if (DefaultBroadcaster.class.isAssignableFrom(b.getClass())) { DefaultBroadcaster broadcaster=DefaultBroadcaster.class.cast(b); if (broadcaster.lifecycleHandler() != null) { broadcaster.lifecycl
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,PoolableBroadcasterFactory,@Deprecated public  (Class<? extends Broadcaster> clazz String broadcasterLifeCyclePolicy AtmosphereConfig c){ super(clazz broadcasterLifeCyclePolicy c); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,add,@Override public boolean  (Broadcaster b Object id){ if (trackPooledBroadcaster) { super.add(b id); } poolableProvider.returnBroadcaster(b); return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,configure,protected void  (String broadcasterLifeCyclePolicy){ super.configure(broadcasterLifeCyclePolicy); String poolableProviderClass=config.getInitParameter(POOLEABLE_PROVIDER UnboundedApachePoolableProvider.class.getName()); try { poolableProvider=config.framework().newClassInstance(PoolableProvider.class (Class<PoolableProvider>)IOUtils.loadClass(PoolableProvider.class poolableProviderClass)); } catch ( Exception e) { throw new RuntimeException(e); } poolableProvider.configure(config); trackPooledBroadcaster=config.getInitParameter(SUPPORT_TRACKED_BROADCASTER false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,createBroadcaster,"public Broadcaster  (){ return createBroadcaster(clazz ""POOLED""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,get,@Override public Broadcaster  (){ return get(POOLED_ID); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,lookup,@Override public <T extends Broadcaster>T  (Class<T> c Object id boolean createIfNull boolean unique){ Broadcaster broadcaster=null; if (trackPooledBroadcaster) { broadcaster=store.get(id); } if (broadcaster == null) { broadcaster=poolableProvider.borrowB
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,lookupAll,@Override public Collection<Broadcaster>  (){ if (trackPooledBroadcaster) { super.lookupAll(); } return emptyCollection; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,poolableProvider,public PoolableBroadcasterFactory  (PoolableProvider<? extends Broadcaster ?> poolableProvider){ this.poolableProvider=poolableProvider; this.poolableProvider.configure(config); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,remove,"@Override public boolean  (Object id){ if (trackPooledBroadcaster) { super.remove(id); } else { logger.debug(""Operation no supported""); } return false; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,removeAllAtmosphereResource,"@Override public void  (AtmosphereResource r){ logger.debug(""Operation no supported""); if (trackPooledBroadcaster) { super.removeAllAtmosphereResource(r); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\PoolableBroadcasterFactory.java,trackPooledBroadcaster,public boolean  (){ return trackPooledBroadcaster; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,destroy,"void  (boolean resume){ if (resume) { logger.info(""All AtmosphereResource will now be resumed from Broadcaster {}"" broadcaster.getID()); broadcaster.resumeAll(); } broadcaster.destroy(); if (broadcaster.currentLifecycleTask() != null) { broadcaster.currentLifecycleTask().cancel(true); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,notifyDestroyListener,protected void  (DefaultBroadcaster broadcaster){ for ( BroadcasterLifeCyclePolicyListener b : broadcaster.lifeCycleListeners()) { b.onDestroy(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,notifyEmptyListener,protected void  (DefaultBroadcaster broadcaster){ for ( BroadcasterLifeCyclePolicyListener b : broadcaster.lifeCycleListeners()) { b.onEmpty(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,notifyIdleListener,protected void  (DefaultBroadcaster broadcaster){ for ( BroadcasterLifeCyclePolicyListener b : broadcaster.lifeCycleListeners()) { b.onIdle(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,off,public LifecycleHandler  (DefaultBroadcaster broadcaster){ Future<?> currentLifecycleTask=broadcaster.currentLifecycleTask(); if (currentLifecycleTask != null) { currentLifecycleTask.cancel(true); } notifyDestroyListener(broadcaster); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,offIfEmpty,public LifecycleHandler  (DefaultBroadcaster broadcaster){ BroadcasterConfig bc=broadcaster.getBroadcasterConfig(); Collection<AtmosphereResource> resources=broadcaster.getAtmosphereResources(); final BroadcasterLifeCyclePolicy lifeCyclePolicy=broadcaster.getBroadcasterLifeCyclePolicy(); if (resources.isEmpty()) { notifyEmptyListener(broadcaster); if (broadcaster.getScope() != Broadcaster.SCOPE.REQUEST && lifeCyclePolicy.getLifeCyclePolicy() == EMPTY) { broadcaster.releaseExternalResources(); } else if (broadcaster.getScope() == Broadcaster.SCOPE.REQUEST || lifeCyclePolicy.getLifeCyclePolicy() == EMPTY_DESTROY) { bc.getAtmosphereConfig().getBroadcasterFactory().remove(broadcaster broadcaster.getID()); broadcaster.destroy(); } } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,on,"public LifecycleHandler  (final DefaultBroadcaster broadcaster){ final BroadcasterLifeCyclePolicy lifeCyclePolicy=broadcaster.getBroadcasterLifeCyclePolicy(); final BroadcasterConfig bc=broadcaster.getBroadcasterConfig(); final Collection<AtmosphereResource> resources=broadcaster.getAtmosphereResources(); final AtomicBoolean recentActivity=broadcaster.recentActivity(); if (logger.isTraceEnabled()) { logger.trace(""{} new lifecycle policy: {}"" broadcaster.getID() lifeCyclePolicy.getLifeCyclePolicy().name()); } if (broadcaster.currentLifecycleTask() != null) { broadcaster.currentLifecycleTask().cancel(false); } if (bc != null && bc.getScheduledExecutorService() == null) { logger.error(""No Broadcaster's SchedulerExecutorService has been configured on {}. BroadcasterLifeCyclePolicy won't work."" broadcaster.getID()); return this; } if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME || lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) { recentActivity.set(false); int time=lifeCyclePolicy.getTimeout(); if (time == -1) { throw new IllegalStateException(""BroadcasterLifeCyclePolicy time is not set""); } Future<?> currentLifecycleTask=bc.getScheduledExecutorService().scheduleAtFixedRate(new Runnable(){ @Override public void run(){ try { if (recentActivity.getAndSet(false)) { return; } else if (resources.isEmpty()) { if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) { notifyEmptyListener(broadcaster); notifyIdleListener(broadcaster); broadcaster.releaseExternalResources(); logger.debug(""Applying BroadcasterLifeCyclePolicy IDLE policy to Broadcaster {}"" broadcaster.getID()); if (broadcaster.currentLifecycleTask() != null) { broadcaster.currentLifecycleTask().cancel(true); } } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_DESTROY) { notifyEmptyListener(broadcaster); notifyIdleListener(broadcaster); destroy(false); logger.debug(""Applying BroadcasterLifeCyclePolicy IDLE_DESTROY policy to Broadcaster {}"" broadcaster.getID()); } } else if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE_RESUME) { notifyIdleListener(broadcaster); destroy(true); logger.debug(""Applying BroadcasterLifeCyclePolicy IDLE_RESUME policy to Broadcaster {}"" broadcaster.getID()); } } catch ( Throwable t) { if (broadcaster.isDestroyed()) { logger.trace(""Scheduled BroadcasterLifeCyclePolicy exception"" t); } else { logger.warn(""Scheduled BroadcasterLifeCyclePolicy exception"" t); } } } void destroy( boolean resume){ if (resume) { logger.info(""All AtmosphereResource will now be resumed from Broadcaster {}"" broadcaster.getID()); broadcaster.resumeAll(); } broadcaster.destroy(); if (broadcaster.currentLifecycleTask() != null) { broadcaster.currentLifecycleTask().cancel(true); } } }  time time lifeCyclePolicy.getTimeUnit()); broadcaster.currentLifecycleTask(currentLifecycleTask); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\lifecycle\LifecycleHandler.java,run,@Override public void  (){ try { if (recentActivity.getAndSet(false)) { return; } else if (resources.isEmpty()) { if (lifeCyclePolicy.getLifeCyclePolicy() == IDLE) { notifyEmptyListener(broadcaster); notifyIdleListener(broadcaster); broadcaster.releaseExt
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\BoundedApachePoolableProvider.java,borrowBroadcaster,"@Override public Broadcaster  (Object id){ try { return DefaultBroadcaster.class.cast(genericObjectPool.borrowObject(waitFor)).rename(id.toString()); } catch ( Exception e) { logger.error("""" e); throw new RuntimeException(e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\BoundedApachePoolableProvider.java,configureGenericObjectPoolConfig,@Override protected void  (){ poolConfig.setMaxTotal(config.getInitParameter(BROADCASTER_FACTORY_POOL_SIZE 200)); waitFor=TimeUnit.SECONDS.toMillis(config.getInitParameter(ApplicationConfig.BROADCASTER_FACTORY_EMPTY_WAIT_TIME_IN_SECONDS 10000)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,activeBroadcaster,@Override public long  (){ return genericObjectPool.getNumActive(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,borrowBroadcaster,"@Override public Broadcaster  (Object id){ try { return DefaultBroadcaster.class.cast(genericObjectPool.borrowObject()).rename(id.toString()); } catch ( Exception e) { logger.error("""" e); throw new RuntimeException(e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,configure,@Override public void  (AtmosphereConfig config){ this.config=config; configureGenericObjectPoolConfig(); genericObjectPool=new GenericObjectPool<Broadcaster>(new BroadcasterFactory() poolConfig abandonedConfig); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,configureGenericObjectPoolConfig,protected void  (){ poolConfig.setMaxTotal(Integer.MAX_VALUE); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,create,"@Override public Broadcaster  (){ logger.trace(""Creating Broadcaster {}"" count.getAndIncrement()); return PoolableBroadcasterFactory.class.cast(config.getBroadcasterFactory()).createBroadcaster(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,implementation,@Override public GenericObjectPool  (){ return genericObjectPool; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,poolSize,@Override public long  (){ return genericObjectPool.getCreatedCount(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,returnBroadcaster,"@Override public PoolableProvider  (Broadcaster b){ logger.trace(""Return {} now at size {}"" b.getID() genericObjectPool.getNumActive()); try { genericObjectPool.returnObject(b); } catch ( IllegalStateException ex) { logger.trace("""" ex); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\pool\UnboundedApachePoolableProvider.java,wrap,"@Override public PooledObject<Broadcaster>  (Broadcaster broadcaster){ logger.trace(""Wapping Object {}"" broadcaster.getID()); return new DefaultPooledObject<Broadcaster>(broadcaster); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,Action,public  (TYPE type long timeout){ this.timeout=timeout; this.type=type; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Action action=(Action)o; if (timeout != action.timeout()) return false; if (type != action.type()) return false; return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,hashCode,@Override public int  (){ int result=(int)(timeout ^ (timeout >>> 32)); result=31 * result + (type != null ? type.hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,timeout,"public Action  (long timeout){ if (immutable) { throw new IllegalStateException(""immutable""); } this.timeout=timeout; return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,toString,"@Override public String  (){ return ""Action{"" + ""timeout="" + timeout + ""  type=""+ type+ '}'; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Action.java,type,"public Action  (Action.TYPE type){ if (immutable) { throw new IllegalStateException(""immutable""); } this.type=type; return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationScanningServletContainerInitializer.java,onStartup,@Override public void  (final Set<Class<?>> classes final ServletContext servletContext) throws ServletException { final Map<Class<? extends Annotation> Set<Class<?>>> classesByAnnotation=new HashMap<Class<? extends Annotation> Set<Class<?>>>(); if (class
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,destroy,public void  (){ annotations.clear(); processors.clear(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,flushCoreAnnotations,"public AnnotationHandler  (Set<Class<?>> classes){ List<Class<? extends Annotation>> l=new ArrayList<>(); for ( Map.Entry<Class<? extends Annotation> Class<? extends Processor>> e : annotations.entrySet()) { if (e.getValue().getPackage().getName().equals(""org.atmosphere.annotation"") && classes.contains(e.getValue())) { l.add(e.getKey()); } } for ( Class<? extends Annotation> c : l) { annotations.remove(c); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,handleAnnotation,"public AnnotationHandler  (final AtmosphereFramework framework final Class<? extends Annotation> annotation final Class<?> discoveredClass){ logger.info(""Found Annotation in {} being scanned: {}"" discoveredClass annotation); framework.annotationScanned(true); Class<? extends Processor> a=annotations.get(annotation); if (a != null) { Processor p=processors.get(a); if (p == null) { try { p=framework.newClassInstance(Processor.class a); } catch ( Exception e) { logger.warn(""Unable to create Processor {}"" p); } processors.put(a p); } p.handle(framework discoveredClass); logger.trace(""Annotation {} handled by {}"" annotation p.getClass().getName()); } else { logger.trace(""Annotation {} unhandled"" annotation); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,handleProcessor,"public Class<? extends Processor>  (Class<?> clazz){ if (Processor.class.isAssignableFrom(clazz)) { Class<Processor> p=(Class<Processor>)clazz; if (logger.isTraceEnabled()) { logger.trace(""Processor {} associated with {}"" p p.getAnnotation(AtmosphereAnnotation.class).value()); } annotations.put(p.getAnnotation(AtmosphereAnnotation.class).value() p); return p; } return null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AnnotationHandler.java,handledClass,public Class<? extends Annotation>[]  (){ Collection<Class<? extends Annotation>> c=annotations.keySet(); return c.toArray(new Class[0]); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,AsynchronousProcessor,"public  (AtmosphereConfig config){ this.config=config; closingTime=Long.valueOf(config.getInitParameter(ApplicationConfig.CLOSED_ATMOSPHERE_THINK_TIME ""0"")); isServlet30=Servlet30CometSupport.class.isAssignableFrom(this.getClass()); closeOnCancel=config.getInitParameter(ApplicationConfig.CLOSE_STREAM_ON_CANCEL false); config.startupHook(new AtmosphereConfig.StartupHook(){ @Override public void started( AtmosphereFramework framework){ mapper=framework.endPointMapper(); } } ); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,allowSessionTimeoutRemoval,protected boolean  (){ return config.isSessionTimeoutRemovalAllowed(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,call,@Override public Object  () throws Exception { endRequest(r true); return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,cancelled,"public Action  (final AtmosphereRequest req final AtmosphereResponse res) throws IOException  ServletException { logger.trace(""Cancelling {}"" req); final AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(req.resource()); if (closingTime > 0) { ExecutorsFactory.getScheduler(config).schedule(new Callable<Object>(){ @Override public Object call() throws Exception { endRequest(r true); return null; } }  closingTime TimeUnit.MILLISECONDS); } else { if (completeLifecycle(req.resource() true)) { config.framework().notify(Action.TYPE.CANCELLED req res); } } return cancelledAction; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,complete,@Override public AsyncSupport  (AtmosphereResourceImpl r){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,completeLifecycle,"public boolean  (final AtmosphereResource r boolean cancelled){ if (r != null && !r.isCancelled() && !AtmosphereResourceImpl.class.cast(r).getAndSetInClosingPhase()) { logger.trace(""Finishing lifecycle for AtmosphereResource {}"" r.uuid()); final AtmosphereResourceImpl impl=AtmosphereResourceImpl.class.cast(r); try { if (impl.isCancelled()) { logger.debug(""{} is already cancelled"" impl.uuid()); return false; } AtmosphereResourceEventImpl e=impl.getAtmosphereResourceEvent(); if (config.framework().isDestroyed()) { cancelled=true; } if (!e.isClosedByClient()) { if (cancelled) { e.setCancelled(cancelled); } else { e.setIsResumedOnTimeout(true); Broadcaster b=r.getBroadcaster(); if (b instanceof DefaultBroadcaster) { ((DefaultBroadcaster)b).broadcastOnResume(r); } } } invokeAtmosphereHandler(impl); } catch ( Throwable ex) { logger.error(""Failed to cancel resource: {}"" impl.uuid() ex); } finally { try { impl.notifyListeners(); if (closeOnCancel) { try { impl.getResponse(false).getOutputStream().close(); } catch ( Throwable t) { try { impl.getResponse(false).getWriter().close(); } catch ( Throwable t2) { } } } impl.setIsInScope(false); impl.cancel(); } catch ( Throwable t) { logger.debug(""completeLifecycle"" t); } finally { impl._destroy(); } } return true; } else { logger.trace(""AtmosphereResource {} was already cancelled or gc"" r != null ? r.uuid() : ""null""); return false; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,configureWorkflow,"private AtmosphereResourceImpl  (AtmosphereResourceImpl resource AtmosphereHandlerWrapper handlerWrapper AtmosphereRequest req AtmosphereResponse res){ Broadcaster b=handlerWrapper.broadcaster; if (b.isDestroyed()) { BroadcasterFactory f=config.getBroadcasterFactory(); synchronized (f) { f.remove(b b.getID()); try { handlerWrapper.broadcaster=f.get(b.getID()); } catch ( IllegalStateException ex) { logger.trace("""" ex); handlerWrapper.broadcaster=f.lookup(b.getID() true); } } } if (resource == null) { resource=(AtmosphereResourceImpl)req.getAttribute(FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE); } if (resource == null) { resource=(AtmosphereResourceImpl)config.resourcesFactory().create(config handlerWrapper.broadcaster res this handlerWrapper.atmosphereHandler); } else { try { resource.getBroadcaster(); } catch ( IllegalStateException ex) { resource.setBroadcaster(handlerWrapper.broadcaster); } resource.atmosphereHandler(handlerWrapper.atmosphereHandler); } req.setAttribute(ATMOSPHERE_RESOURCE resource); req.setAttribute(ATMOSPHERE_HANDLER_WRAPPER handlerWrapper); req.setAttribute(SKIP_ATMOSPHEREHANDLER.name() Boolean.FALSE); return resource; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,endRequest,public void  (AtmosphereResourceImpl r boolean cancel){ if (completeLifecycle(r cancel)) { config.framework().notify(Action.TYPE.CANCELLED r.getRequest(false) r.getResponse(false)); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,getContainerName,public String  (){ return config.getServletConfig().getServletContext().getServerInfo(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,invokeAtmosphereHandler,"protected void  (AtmosphereResourceImpl r) throws IOException { if (r.isInScope()) { String disableOnEvent=r.getAtmosphereConfig().getInitParameter(ApplicationConfig.DISABLE_ONSTATE_EVENT); r.getAtmosphereResourceEvent().setMessage(r.writeOnTimeout()); try { if (disableOnEvent == null || !disableOnEvent.equals(String.valueOf(true))) { AtmosphereHandler atmosphereHandler=r.getAtmosphereHandler(); if (atmosphereHandler != null && r.isInScope()) { try { Utils.inject(r); } catch ( IllegalAccessException e) { logger.warn("""" e); } atmosphereHandler.onStateChange(r.getAtmosphereResourceEvent()); } } } catch ( IOException ex) { try { r.onThrowable(ex); } catch ( Throwable t) { logger.warn(""failed calling onThrowable()"" ex); } } } else { logger.trace(""AtmosphereResource out of scope {}"" r.uuid()); return; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,invokeInterceptors,"public Action  (List<AtmosphereInterceptor> c AtmosphereResource r int tracing){ Action a=Action.CONTINUE; for ( AtmosphereInterceptor arc : c) { if (!AtmosphereResourceImpl.class.cast(r).isInScope()) { logger.warn(""Request closed during processing {} and transport {}"" r.uuid() r.transport()); return Action.CANCELLED; } try { a=arc.inspect(r); } catch ( Exception ex) { logger.error(""Interceptor {} crashed. Processing will continue with other interceptor."" arc ex); continue; } if (a == null) { logger.trace(""Action was null for {}"" arc); a=Action.CANCELLED; } boolean skip=a.type() == SKIP_ATMOSPHEREHANDLER; if (skip) { logger.trace(""AtmosphereInterceptor {} asked to skip the AtmosphereHandler for {}"" arc r.uuid()); r.getRequest().setAttribute(SKIP_ATMOSPHEREHANDLER.name() Boolean.TRUE); } if (a.type() != Action.TYPE.CONTINUE) { logger.trace(""Interceptor {} interrupted the dispatch for {} with "" + a arc r.uuid()); return a; } if (logger.isTraceEnabled()) { logger.trace(""\t {}: {} for {}"" new String[]{String.valueOf(tracing++) arc.getClass().getName() r.uuid()}); } } return a; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,map,"protected AtmosphereHandlerWrapper  (AtmosphereRequest req) throws ServletException { AtmosphereHandlerWrapper atmosphereHandlerWrapper=mapper.map(req config.handlers()); if (atmosphereHandlerWrapper == null) { logger.debug(""No AtmosphereHandler maps request for {} with mapping {}"" req.getRequestURI() config.handlers()); throw new AtmosphereMappingException(""No AtmosphereHandler maps request for "" + req.getRequestURI()); } return atmosphereHandlerWrapper; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,path,"private String  (AtmosphereRequest request){ String path; String pathInfo=null; try { pathInfo=request.getPathInfo(); } catch ( IllegalStateException ex) { } if (pathInfo != null) { path=request.getServletPath() + pathInfo; } else { path=request.getServletPath(); } if (path == null || path.isEmpty()) { path=""/""; } return path; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,postInterceptors,"public void  (List<AtmosphereInterceptor> c AtmosphereResource r){ AtmosphereInterceptor arc=null; for (int i=c.size() - 1; i > -1; i--) { try { arc=c.get(i); arc.postInspect(r); } catch ( Exception ex) { logger.error(""Interceptor {} crashed. Processing will continue with other interceptor."" arc ex); continue; } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,resumed,public Action  (AtmosphereRequest request AtmosphereResponse response) throws IOException  ServletException { AtmosphereResourceImpl r=(AtmosphereResourceImpl)request.getAttribute(ATMOSPHERE_RESOURCE); if (r == null) return Action.CANCELLED; AtmosphereHandler atmosphereHandler=r.getAtmosphereHandler(); AtmosphereResourceEvent event=r.getAtmosphereResourceEvent(); if (event != null && event.isResuming() && !event.isCancelled()) { synchronized (r) { atmosphereHandler.onStateChange(event); } } return Action.RESUME; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,shutdown,"protected void  (){ Collection<AtmosphereResource> c=config.resourcesFactory().findAll(); for ( AtmosphereResource r : c) { try { r.close(); } catch ( IOException e) { logger.trace("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,started,@Override public void  (AtmosphereFramework framework){ mapper=framework.endPointMapper(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,supportSession,protected boolean  (){ return config.isSupportSession(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,supportWebSocket,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,suspended,public Action  (AtmosphereRequest request AtmosphereResponse response) throws IOException  ServletException { return action(request response); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsynchronousProcessor.java,timedout,"public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { logger.trace(""Timing out {}"" req); endRequest(AtmosphereResourceImpl.class.cast(req.resource()) false); return timedoutAction; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOInterceptorAdapter.java,error,"@Override public byte[]  (AtmosphereResponse response int statusCode String reasonPhrase){ return (""ERROR: "" + statusCode + "":""+ reasonPhrase).getBytes(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOInterceptorAdapter.java,transformPayload,@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { return responseDraft; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOWriterAdapter.java,flush,@Override public AsyncIOWriter  (AtmosphereResponse r) throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOWriterAdapter.java,redirect,@Override public AsyncIOWriter  (AtmosphereResponse r String location) throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOWriterAdapter.java,write,@Override public AsyncIOWriter  (AtmosphereResponse r byte[] data int offset int length) throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncIOWriterAdapter.java,writeError,@Override public AsyncIOWriter  (AtmosphereResponse r int errorCode String message) throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,onClose,"@Override public void  (AtmosphereRequest request AtmosphereResponse response){ logger.trace(""Closing resource {} for request {}"" request.resource() request); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,onDestroyed,"@Override public void  (AtmosphereRequest request AtmosphereResponse response){ logger.trace(""Destroyed resource {} for request {}"" request.resource() request); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,onResume,"@Override public void  (AtmosphereRequest request AtmosphereResponse response){ logger.trace(""Resume resource {} for request {}"" request.resource() request); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,onSuspend,"@Override public void  (AtmosphereRequest request AtmosphereResponse response){ logger.trace(""Suspended resource {} for request {}"" request.resource() request); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AsyncSupportListenerAdapter.java,onTimeout,"@Override public void  (AtmosphereRequest request AtmosphereResponse response){ logger.trace(""Timeout resource {} for request {}"" request.resource() request); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,AtmosphereFilter,public  (){ as=new AtmosphereServlet(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,destroy,public void  (){ as.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,doFilter,public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { AtmosphereRequest req=AtmosphereRequestImpl.wrap((HttpServletRequest)request); AtmosphereResponse res=AtmosphereResponseImpl.wrap((HttpServletResponse)response); Action a=null; if (req.getServletPath() == null || (as.framework().getServletContext().getResource(req.getServletPath()) == null && !req.getServletPath().matches(excluded))) { a=as.framework().doCometSupport(req res); } if (a == null || a.type() != Action.TYPE.SUSPEND) { chain.doFilter(request response); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,getInitParameter,@Override public String  (String name){ return filterConfig.getInitParameter(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,getInitParameterNames,@Override public Enumeration<String>  (){ return filterConfig.getInitParameterNames(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,getServletContext,@Override public ServletContext  (){ return filterConfig.getServletContext(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,getServletName,@Override public String  (){ return filterConfig.getFilterName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFilter.java,init,"public void  (final FilterConfig filterConfig) throws ServletException { logger.info(""AtmosphereServlet running as a Filter""); as.init(new ServletConfig(){ @Override public String getServletName(){ return filterConfig.getFilterName(); } @Override public ServletContext getServletContext(){ return filterConfig.getServletContext(); } @Override public String getInitParameter( String name){ return filterConfig.getInitParameter(name); } @Override public Enumeration<String> getInitParameterNames(){ return filterConfig.getInitParameterNames(); } } ); String s=filterConfig.getInitParameter(ApplicationConfig.ATMOSPHERE_EXCLUDED_FILE); if (s != null) { excluded=s; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,AtmosphereConfig,protected  (AtmosphereFramework framework){ this.framework=framework; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,destroy,"protected void  (){ for ( ShutdownHook h : shutdownHooks) { try { h.shutdown(); } catch ( Exception ex) { logger.warn("""" ex); } } shutdownHooks.clear(); startUpHook.clear(); atmosphereHandlerConfig.clear(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,framework,public AtmosphereFramework  (){ return framework; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,getAtmosphereHandlerConfig,public List<AtmosphereHandlerConfig>  (){ return atmosphereHandlerConfig; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,getBroadcasterFactory,public BroadcasterFactory  (){ return framework.getBroadcasterFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,getInitParameter,public int  (String key int defaultValue){ String s=getInitParameter(key); if (s == null) { return defaultValue; } return Integer.valueOf(s); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,getInitParameterNames,public Enumeration<String>  (){ return framework().getServletConfig().getInitParameterNames(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,getServletConfig,public ServletConfig  (){ return framework.getServletConfig(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,getServletContext,public ServletContext  (){ return framework.getServletContext(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,getWebServerName,public String  (){ return framework.getAsyncSupport().getContainerName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,handlers,public Map<String AtmosphereFramework.AtmosphereHandlerWrapper>  (){ return framework.getAtmosphereHandlers(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,initComplete,"protected void  (){ for ( StartupHook h : startUpHook) { try { h.started(framework); } catch ( Exception ex) { logger.warn("""" ex); } } startUpHook.clear(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,isSessionTimeoutRemovalAllowed,public boolean  (){ return sessionTimeoutRemovalAllowed; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,isSupportSession,public boolean  (){ return supportSession; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,isThrowExceptionOnCloned,public boolean  (){ return this.throwExceptionOnCloned; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,metaBroadcaster,public MetaBroadcaster  (){ return framework.metaBroadcaster(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,populate,public AtmosphereConfig  (AtmosphereConfig config){ atmosphereHandlerConfig=config.atmosphereHandlerConfig; supportSession=config.supportSession; sessionTimeoutRemovalAllowed=config.sessionTimeoutRemovalAllowed; throwExceptionOnCloned=config.throwExceptionOnCloned; framework=config.framework; properties.putAll(config.properties); shutdownHooks=config.shutdownHooks; startUpHook=config.startUpHook; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,properties,public Map<String Object>  (){ return properties; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,resourcesFactory,public AtmosphereResourceFactory  (){ return framework.atmosphereFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,sessionFactory,public AtmosphereResourceSessionFactory  (){ return framework.sessionFactory(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,setSessionTimeoutRemovalAllowed,public void  (boolean sessionTimeoutRemovalAllowed){ this.sessionTimeoutRemovalAllowed=sessionTimeoutRemovalAllowed; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,setSupportSession,public void  (boolean supportSession){ this.supportSession=supportSession; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereConfig.java,setThrowExceptionOnCloned,public void  (boolean throwExceptionOnCloned){ this.throwExceptionOnCloned=throwExceptionOnCloned; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,AtmosphereFrameworkInitializer,public  (boolean isFilter boolean autoDetectHandlers){ this.isFilter=isFilter; this.autoDetectHandlers=autoDetectHandlers; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,configureFramework,"public AtmosphereFrameworkInitializer  (ServletConfig sc boolean init boolean useNative Class<? extends AtmosphereFramework> frameworkClass) throws ServletException { if (framework == null) { if (sc.getServletContext().getMajorVersion() > 2) { try { framework=(AtmosphereFramework)sc.getServletContext().getAttribute(sc.getServletContext().getServletRegistration(sc.getServletName()).getName()); } catch ( Exception ex) { if (UnsupportedOperationException.class.isAssignableFrom(ex.getClass())) { logger.warn(""WebLogic 12c unable to retrieve Servlet. Please make sure your servlet-name is 'AtmosphereServlet' "" + ""or set org.atmosphere.servlet to the current value""); String name=sc.getInitParameter(ApplicationConfig.SERVLET_NAME); if (name == null) { name=AtmosphereServlet.class.getSimpleName(); } framework=(AtmosphereFramework)sc.getServletContext().getAttribute(name); } else { logger.trace("""" ex); } } } if (framework == null) { framework=newAtmosphereFramework(frameworkClass isFilter autoDetectHandlers); } } framework.setUseNativeImplementation(useNative); if (init) framework.init(sc); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,destroy,public void  (){ if (framework != null) { framework.destroy(); framework=null; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,framework,public AtmosphereFramework  (){ if (framework == null) { framework=newAtmosphereFramework(AtmosphereFramework.class isFilter autoDetectHandlers); } return framework; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,getServletContext,@Override public ServletContext  (){ return c; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFrameworkInitializer.java,newAtmosphereFramework,"public static AtmosphereFramework  (ServletContext sc boolean isFilter boolean autoDetectHandlers){ String metaServicePath=sc.getInitParameter(META_SERVICE_PATH) == null ? META_SERVICE : sc.getInitParameter(META_SERVICE_PATH); try { final Map<String AtmosphereFramework.MetaServiceAction> config=IOUtils.readServiceFile(metaServicePath + AtmosphereFramework.class.getName()); sc.setAttribute(AtmosphereFramework.MetaServiceAction.class.getName() config); for ( final Map.Entry<String AtmosphereFramework.MetaServiceAction> action : config.entrySet()) { final Class c=IOUtils.loadClass(AtmosphereFramework.class action.getKey()); if (AtmosphereFramework.class.isAssignableFrom(c)) { logger.info(""Found a definition of AtmosphereFramework {} under {}"" c metaServicePath); return newAtmosphereFramework(c isFilter autoDetectHandlers); } } } catch ( Exception ex) { logger.error("""" ex); } return newAtmosphereFramework(AtmosphereFramework.class isFilter autoDetectHandlers sc); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,AtmosphereFramework,public  (boolean isFilter boolean autoDetectHandlers){ this.isFilter=isFilter; this.autoDetectHandlers=autoDetectHandlers; config=newAtmosphereConfig(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,AtmosphereHandlerWrapper,public  (final AtmosphereHandler atmosphereHandler Broadcaster broadcaster final AtmosphereConfig config){ this.atmosphereHandler=atmosphereHandler; this.broadcaster=broadcaster; hookInjection(config); wilcardMapping=false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,MetaServiceAction,private  (final MetaServiceProcedure p){ procedure=p; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,accept,"@Override public boolean  (File arg0 String arg1){ return arg1.endsWith("".jar""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addAnnotationPackage,"public AtmosphereFramework  (Class<?> clazz){ if (clazz.getPackage() == null) { logger.error(""Class {} must have a package defined"" clazz); } else { packages.add(clazz.getPackage().getName()); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addAtmosphereHandler,public AtmosphereFramework  (String mapping AtmosphereHandler h Broadcaster broadcaster){ addAtmosphereHandler(mapping h broadcaster Collections.<AtmosphereInterceptor>emptyList()); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addBroadcasterCacheInjector,public AtmosphereFramework  (BroadcasterCacheInspector b){ inspectors.add(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addBroadcasterCacheListener,public AtmosphereFramework  (BroadcasterCacheListener b){ broadcasterCacheListeners.add(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addBroadcasterListener,public AtmosphereFramework  (BroadcasterListener b){ broadcasterFactory.addBroadcasterListener(b); broadcasterListeners.add(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addBroadcasterType,public AtmosphereFramework  (String broadcasterTypeString){ broadcasterTypes.add(broadcasterTypeString); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addCustomAnnotationPackage,public AtmosphereFramework  (Class p){ annotationPackages.addLast(p.getPackage().getName()); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addDefaultOrAppInterceptors,protected void  (){ for ( AtmosphereInterceptor c : interceptors) { addInterceptorToAllWrappers(c); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addInitParameter,public AtmosphereFramework  (String name String value){ initParams.put(name value); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addInterceptorToAllWrappers,"protected void  (AtmosphereInterceptor c){ c.configure(config); InvokationOrder.PRIORITY p=InvokationOrder.class.isAssignableFrom(c.getClass()) ? InvokationOrder.class.cast(c).priority() : InvokationOrder.AFTER_DEFAULT; logger.info(""Installed AtmosphereInterceptor {} with priority {} "" c p.name()); for ( AtmosphereHandlerWrapper wrapper : atmosphereHandlers.values()) { addInterceptorToWrapper(wrapper c); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addInterceptorToWrapper,protected void  (AtmosphereHandlerWrapper wrapper List<AtmosphereInterceptor> interceptors){ for ( AtmosphereInterceptor c : this.interceptors) { addInterceptorToWrapper(wrapper c); } for ( AtmosphereInterceptor c : interceptors) { addInterceptorToWrapper(wrapper c); c.configure(config); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addMapping,private AtmosphereFramework  (String path AtmosphereHandlerWrapper w){ atmosphereHandlers.put(normalizePath(path) w); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,addWebSocketHandler,public AtmosphereFramework  (String path WebSocketHandler handler AtmosphereHandler h List<AtmosphereInterceptor> l){ WebSocketProcessorFactory.getDefault().getWebSocketProcessor(this).registerWebSocketHandler(path new WebSocketProcessor.WebSocketHandlerProxy(broadcasterFactory.lookup(path true).getClass() handler)); addAtmosphereHandler(path h l); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,allowAllClassesScan,public AtmosphereFramework  (boolean allowAllClassesScan){ this.allowAllClassesScan=allowAllClassesScan; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,allowInjectionOf,@Override public AtmosphereObjectFactory  (java.lang.Object o){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,analytics,"protected void  (){ if (!config.getInitParameter(ApplicationConfig.ANALYTICS true)) return; final String container=getServletContext().getServerInfo(); Thread t=new Thread(){ public void run(){ try { logger.debug(""Retrieving Atmosphere's latest version from http://async-io.org/version.html""); HttpURLConnection urlConnection=(HttpURLConnection)URI.create(""http://async-io.org/version.html"").toURL().openConnection(); urlConnection.setRequestProperty(""User-Agent"" ""Mozilla/5.0""); urlConnection.setRequestProperty(""Connection"" ""keep-alive""); urlConnection.setRequestProperty(""Cache-Control"" ""max-age=0""); urlConnection.setRequestProperty(""Accept"" ""text/html application/xhtml+xml application/xml;q=0.9 */*;q=0.8""); urlConnection.setRequestProperty(""Accept-Language"" ""en-US en;q=0.8""); urlConnection.setRequestProperty(""Accept-Charset"" ""ISO-8859-1 utf-8;q=0.7 *;q=0.3""); urlConnection.setRequestProperty(""If-Modified-Since"" ""ISO-8859-1 utf-8;q=0.7 *;q=0.3""); urlConnection.setInstanceFollowRedirects(true); BufferedReader in=new BufferedReader(new InputStreamReader(urlConnection.getInputStream())); String inputLine; String newVersion=Version.getRawVersion(); String clientVersion=null; String nextMajorRelease=null; boolean nextAvailable=false; if (newVersion.indexOf(""SNAPSHOT"") == -1) { try { while ((inputLine=in.readLine().trim()) != null) { if (inputLine.startsWith(""ATMO23_VERSION="")) { newVersion=inputLine.substring(""ATMO23_VERSION="".length()); } else if (inputLine.startsWith(""CLIENT3_VERSION="")) { clientVersion=inputLine.substring(""CLIENT3_VERSION="".length()); break; } else if (inputLine.startsWith(""ATMO_RELEASE_VERSION="")) { nextMajorRelease=inputLine.substring(""ATMO_RELEASE_VERSION="".length()); if (nextMajorRelease.compareTo(Version.getRawVersion()) > 0 && nextMajorRelease.toLowerCase().indexOf(""rc"") == -1 && nextMajorRelease.toLowerCase().indexOf(""beta"") == -1) { nextAvailable=true; } } } } finally { if (clientVersion != null) { logger.info(""Latest version of Atmosphere's JavaScript Client {}"" clientVersion); } if (newVersion.compareTo(Version.getRawVersion()) > 0) { if (nextAvailable) { logger.info(""\n\n\tAtmosphere Framework Updates\n\tMinor available (bugs fixes): {}\n\tMajor available (new features): {}"" newVersion nextMajorRelease); } else { logger.info(""\n\n\tAtmosphere Framework Updates:\n\tMinor Update available (bugs fixes): {}"" newVersion); } } else if (nextAvailable) { logger.info(""\n\n\tAtmosphere Framework Updates:\n\tMajor Update available (new features): {}"" nextMajorRelease); } try { in.close(); } catch ( IOException ex) { } urlConnection.disconnect(); } } JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker(ModuleDetection.detect() Version.getRawVersion() ""UA-31990725-1""); tracker.trackSynchronously(new FocusPoint(container new FocusPoint(""Atmosphere""))); } catch ( Throwable e) { } } } ; t.setDaemon(true); t.start(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,annotationProcessor,public AnnotationProcessor  (){ return annotationProcessor; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,annotationProcessorClassName,public AtmosphereFramework  (String annotationProcessorClassName){ this.annotationProcessorClassName=annotationProcessorClassName; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,annotationScanned,public AtmosphereFramework  (boolean b){ annotationFound=b; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,apply,"@Override public void  (final AtmosphereFramework fwk final Class<?> c){ if (AtmosphereInterceptor.class.isAssignableFrom(c)) { fwk.excludeInterceptor(c.getName()); } else { logger.warn(""{} is not a framework service that could be excluded  pull request i"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,asyncSupportListener,public AtmosphereFramework  (AsyncSupportListener asyncSupportListener){ asyncSupportListeners.add(asyncSupportListener); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,asyncSupportListeners,public List<AsyncSupportListener>  (){ return asyncSupportListeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,atmosphereFactory,public AtmosphereResourceFactory  (){ if (arFactory == null) { configureAtmosphereResourceFactory(); } return arFactory; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,atmosphereFrameworkListeners,public Queue<AtmosphereFrameworkListener>  (){ return frameworkListeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,atmosphereResourceListener,public AtmosphereFramework  (AtmosphereResourceListener atmosphereResourceListener){ atmosphereResourceListeners.add(atmosphereResourceListener); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,atmosphereResourceListeners,public List<AtmosphereResourceListener>  (){ return atmosphereResourceListeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,autoConfigureService,"protected void  (ServletContext sc) throws IOException { String path=handlersPath != DEFAULT_HANDLER_PATH ? handlersPath : realPath(sc handlersPath); try { annotationProcessor=newClassInstance(AnnotationProcessor.class (Class<AnnotationProcessor>)IOUtils.loadClass(getClass() annotationProcessorClassName)); logger.info(""Atmosphere is using {} for processing annotation"" annotationProcessorClassName); annotationProcessor.configure(config); if (!packages.isEmpty()) { for ( String s : packages) { annotationProcessor.scan(s); } } if (!annotationFound) { if (path != null) { annotationProcessor.scan(new File(path)); } String pathLibs=libPath != DEFAULT_LIB_PATH ? libPath : realPath(sc DEFAULT_LIB_PATH); if (pathLibs != null) { File libFolder=new File(pathLibs); File jars[]=libFolder.listFiles(new FilenameFilter(){ @Override public boolean accept( File arg0  String arg1){ return arg1.endsWith("".jar""); } } ); if (jars != null) { for ( File file : jars) { annotationProcessor.scan(file); } } } } if (!annotationFound && allowAllClassesScan) { logger.debug(""Scanning all classes on the classpath""); annotationProcessor.scanAll(); } } catch ( Throwable e) { logger.error("""" e); return; } finally { if (annotationProcessor != null) { annotationProcessor.destroy(); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,autoDetectAtmosphereHandlers,"public void  (ServletContext servletContext URLClassLoader classloader) throws MalformedURLException  URISyntaxException { if (!atmosphereHandlers.isEmpty()) return; logger.info(""Auto detecting atmosphere handlers {}"" handlersPath); String realPath=servletContext.getRealPath(handlersPath); if (realPath == null) { URL u=servletContext.getResource(handlersPath); if (u == null) return; realPath=u.getPath(); } loadAtmosphereHandlersFromPath(classloader realPath); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,autoDetectContainer,protected void  (){ if (getAsyncSupport() == null) { setAsyncSupport(createAsyncSupportResolver().resolve(useNativeImplementation useBlockingImplementation useServlet30)); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,autoDetectWebSocketHandler,"protected void  (ServletContext servletContext URLClassLoader classloader) throws MalformedURLException  URISyntaxException { if (hasNewWebSocketProtocol) return; logger.info(""Auto detecting WebSocketHandler in {}"" handlersPath); loadWebSocketFromPath(classloader realPath(servletContext handlersPath)); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcasterCacheListeners,public List<BroadcasterCacheListener>  (){ return broadcasterCacheListeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcasterFilters,public AtmosphereFramework  (BroadcastFilter f){ broadcasterFilters.add(f.getClass().getName()); for ( Broadcaster b : config.getBroadcasterFactory().lookupAll()) { b.getBroadcasterConfig().addFilter(f); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcasterLifeCyclePolicy,public AtmosphereFramework  (String broadcasterLifeCyclePolicy){ this.broadcasterLifeCyclePolicy=broadcasterLifeCyclePolicy; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcasterListeners,public List<BroadcasterListener>  (){ return broadcasterListeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,broadcasterTypes,public ConcurrentLinkedQueue<String>  (){ return broadcasterTypes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,checkDuplicate,private boolean  (final List<AtmosphereInterceptor> interceptorList Class<? extends AtmosphereInterceptor> c){ for ( final AtmosphereInterceptor i : interceptorList) { if (i.getClass().equals(c)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,checkWebSocketSupportState,"public void  (){ if (atmosphereHandlers.isEmpty() && !SimpleHttpProtocol.class.isAssignableFrom(webSocketProtocol.getClass())) { logger.debug(""Adding a void AtmosphereHandler mapped to /* to allow WebSocket application only""); addAtmosphereHandler(Broadcaster.ROOT_MASTER new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource r) throws IOException { logger.debug(""No AtmosphereHandler defined.""); if (!r.transport().equals(AtmosphereResource.TRANSPORT.WEBSOCKET)) { WebSocket.notSupported(r.getRequest() r.getResponse()); } } @Override public void destroy(){ } } ); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,closeAtmosphereResource,"protected void  (){ for ( AtmosphereResource r : config.resourcesFactory().findAll()) { try { r.resume().close(); } catch ( Exception e) { logger.trace("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,compare,@Override public int  (AtmosphereInterceptor i1 AtmosphereInterceptor i2){ InvokationOrder.PRIORITY p1  p2; if (i1 instanceof InvokationOrder) { p1=((InvokationOrder)i1).priority(); } else { p1=InvokationOrder.PRIORITY.AFTER_DEFAULT; } if (i2 instanceof I
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureAnnotationPackages,"private void  (){ annotationPackages.add(Processor.class.getPackage().getName()); String s=config.getInitParameter(ApplicationConfig.CUSTOM_ANNOTATION_PACKAGE); if (s != null) { String[] l=s.split("" ""); for ( String p : l) { annotationPackages.addLast(p); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureAtmosphereInterceptor,"protected void  (ServletConfig sc){ String s=sc.getInitParameter(ApplicationConfig.ATMOSPHERE_INTERCEPTORS); if (s != null) { String[] list=s.split("" ""); for ( String a : list) { try { AtmosphereInterceptor ai=newClassInstance(AtmosphereInterceptor.class (Class<AtmosphereInterceptor>)IOUtils.loadClass(getClass() a.trim())); interceptor(ai); } catch ( Exception e) { logger.warn("""" e); } } } s=sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR); if (s == null || !""true"".equalsIgnoreCase(s)) { logger.info(""Installing Default AtmosphereInterceptors""); for ( Class<? extends AtmosphereInterceptor> a : DEFAULT_ATMOSPHERE_INTERCEPTORS) { if (!excludedInterceptors.contains(a.getName())) { interceptors.add(newAInterceptor(a)); } else { logger.info(""Dropping Interceptor {}"" a.getName()); } } logger.info(""Set {} to disable them."" ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTOR); } addDefaultOrAppInterceptors(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureAtmosphereResourceFactory,"private AtmosphereFramework  (){ if (arFactory != null) return this; synchronized (this) { try { arFactory=newClassInstance(AtmosphereResourceFactory.class DefaultAtmosphereResourceFactory.class); } catch ( InstantiationException e) { logger.error("""" e); } catch ( IllegalAccessException e) { logger.error("""" e); } arFactory.configure(config); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureBroadcaster,"protected void  (){ try { Iterator<Entry<String AtmosphereHandlerWrapper>> i=atmosphereHandlers.entrySet().iterator(); AtmosphereHandlerWrapper w; Entry<String AtmosphereHandlerWrapper> e; while (i.hasNext()) { e=i.next(); w=e.getValue(); if (w.broadcaster == null) { w.broadcaster=broadcasterFactory.get(w.mapping); } else { if (broadcasterCacheClassName != null && w.broadcaster.getBroadcasterConfig().getBroadcasterCache().getClass().getName().equals(DefaultBroadcasterCache.class.getName())) { BroadcasterCache cache=newClassInstance(BroadcasterCache.class (Class<BroadcasterCache>)IOUtils.loadClass(getClass() broadcasterCacheClassName)); cache.configure(config); w.broadcaster.getBroadcasterConfig().setBroadcasterCache(cache); } } } } catch ( Exception ex) { logger.error(""Unable to configure Broadcaster/Factory/Cache"" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureBroadcasterFactory,"public void  (){ try { if (isBroadcasterSpecified == false) { broadcasterClassName=lookupDefaultBroadcasterType(broadcasterClassName); } if (broadcasterFactoryClassName != null && broadcasterFactory == null) { broadcasterFactory=newClassInstance(BroadcasterFactory.class (Class<BroadcasterFactory>)IOUtils.loadClass(getClass() broadcasterFactoryClassName)); Class<? extends Broadcaster> bc=(Class<? extends Broadcaster>)IOUtils.loadClass(getClass() broadcasterClassName); broadcasterFactory.configure(bc broadcasterLifeCyclePolicy config); } if (broadcasterFactory == null) { Class<? extends Broadcaster> bc=(Class<? extends Broadcaster>)IOUtils.loadClass(getClass() broadcasterClassName); broadcasterFactory=newClassInstance(BroadcasterFactory.class DefaultBroadcasterFactory.class); broadcasterFactory.configure(bc broadcasterLifeCyclePolicy config); } for ( BroadcasterListener b : broadcasterListeners) { broadcasterFactory.addBroadcasterListener(b); } } catch ( Exception ex) { logger.error(""Unable to configure Broadcaster/Factory/Cache"" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureDetectedFramework,protected void  (ReflectorServletProcessor rsp boolean isJersey){ rsp.setServletClassName(JERSEY_CONTAINER); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureMetaBroadcaster,"private AtmosphereFramework  (){ try { metaBroadcaster=newClassInstance(MetaBroadcaster.class DefaultMetaBroadcaster.class); metaBroadcaster.configure(config); } catch ( InstantiationException e) { logger.error("""" e); } catch ( IllegalAccessException e) { logger.error("""" e); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureObjectFactory,"protected void  (){ String s=config.getInitParameter(ApplicationConfig.OBJECT_FACTORY); if (s != null) { try { AtmosphereObjectFactory aci=(AtmosphereObjectFactory)IOUtils.loadClass(getClass() s).newInstance(); if (aci != null) { logger.debug(""Found ObjectFactory {}"" aci.getClass().getName()); objectFactory(aci); } } catch ( Exception ex) { logger.warn(""Unable to load AtmosphereClassInstantiator instance"" ex); } } if (!DefaultAtmosphereObjectFactory.class.isAssignableFrom(objectFactory.getClass())) { logger.trace(""ObjectFactory already set to {}"" objectFactory); return; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureQueryStringAsRequest,"protected Map<String String>  (AtmosphereRequest request){ Map<String String> headers=new HashMap<String String>(); StringBuilder q=new StringBuilder(); try { String qs=request.getQueryString(); if (qs != null && !qs.isEmpty()) { String[] params=qs.split(""&""); String[] s; for ( String p : params) { s=p.split(""="" 2); final String header=s[0]; final String value=s.length > 1 ? s[1] : """"; if (header.equalsIgnoreCase(""Content-Type"")) { if (request.getContentType() == null || !request.getContentType().equalsIgnoreCase(s.length > 1 ? value : """")) { request.contentType(s.length > 1 ? URLDecoder.decode(value ""UTF-8"") : """"); } } if (!header.isEmpty() && !header.toLowerCase().startsWith(""x-atmo"") && !header.equalsIgnoreCase(HeaderConfig.X_HEARTBEAT_SERVER)&& !header.equalsIgnoreCase(""Content-Type"")&& !header.equalsIgnoreCase(""_"")) { q.append(header).append(""="").append(s.length > 1 ? value : """").append(""&""); } headers.put(header s.length > 1 ? value : """"); } } } catch ( Exception ex) { logger.error(""Unable to parse query string"" ex); } String disallowModifyQueryString=config.getInitParameter(ApplicationConfig.DISALLOW_MODIFY_QUERYSTRING); if (disallowModifyQueryString == null || disallowModifyQueryString.length() == 0 || ""false"".equalsIgnoreCase(disallowModifyQueryString)) { if (q.length() > 0) { q.deleteCharAt(q.length() - 1); } request.queryString(q.toString()); } logger.trace(""Query String translated to headers {}"" headers); return headers; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureRequestResponse,"public AtmosphereFramework  (AtmosphereRequest req AtmosphereResponse res) throws UnsupportedEncodingException { req.setAttribute(PROPERTY_USE_STREAM useStreamForFlushingComments); req.setAttribute(BROADCASTER_CLASS broadcasterClassName); req.setAttribute(ATMOSPHERE_CONFIG config); req.setAttribute(THROW_EXCEPTION_ON_CLONED_REQUEST """" + config.isThrowExceptionOnCloned()); boolean skip=true; String s=config.getInitParameter(ALLOW_QUERYSTRING_AS_REQUEST); if (s != null) { skip=Boolean.valueOf(s); } if (!skip || req.getAttribute(WEBSOCKET_SUSPEND) == null) { Map<String String> headers=configureQueryStringAsRequest(req); String body=headers.remove(ATMOSPHERE_POST_BODY); if (body != null && body.isEmpty()) { body=null; } req.headers(headers).method(body != null && req.getMethod().equalsIgnoreCase(""GET"") ? ""POST"" : req.getMethod()); if (body != null) { req.body(URLDecoder.decode(body req.getCharacterEncoding() == null ? ""UTF-8"" : req.getCharacterEncoding())); } } s=req.getHeader(X_ATMOSPHERE_TRACKING_ID); if (s == null || s.equals(""0"")) { String unique=config.getInitParameter(ApplicationConfig.UNIQUE_UUID_WEBSOCKET); if (unique != null && Boolean.valueOf(unique)) { s=(String)req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID); } } if (s == null || s.equals(""0"")) { s=config.uuidProvider().generateUuid(); res.setHeader(HeaderConfig.X_FIRST_REQUEST ""true""); res.setHeader(X_ATMOSPHERE_TRACKING_ID s); res.setHeader(""Content-Type"" ""text/plain; charset=utf-8""); } else { if (req.resource() == null) { res.setHeader(X_ATMOSPHERE_TRACKING_ID s); } else if (req.getAttribute(WebSocket.WEBSOCKET_INITIATED) == null) { res.setHeader(X_ATMOSPHERE_TRACKING_ID s); } } if (req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID) == null) { req.setAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID s); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureScanningPackage,"protected void  (ServletConfig sc String value){ String packageName=sc.getInitParameter(value); if (packageName != null) { String[] list=packageName.split("" ""); for ( String a : list) { packages.add(a); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureWebDotXmlAtmosphereHandler,"protected void  (ServletConfig sc){ String s=sc.getInitParameter(ATMOSPHERE_HANDLER); if (s != null) { try { String mapping=sc.getInitParameter(ATMOSPHERE_HANDLER_MAPPING); if (mapping == null) { mapping=Broadcaster.ROOT_MASTER; } addAtmosphereHandler(mapping newClassInstance(AtmosphereHandler.class (Class<AtmosphereHandler>)IOUtils.loadClass(getClass() s))); } catch ( Exception ex) { logger.warn(""Unable to load WebSocketHandle instance"" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,configureWebSocketFactory,"private AtmosphereFramework  (){ if (webSocketFactory != null) return this; synchronized (this) { try { webSocketFactory=newClassInstance(WebSocketFactory.class DefaultWebSocketFactory.class); } catch ( InstantiationException e) { logger.error("""" e); } catch ( IllegalAccessException e) { logger.error("""" e); } } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,createAsyncSupportResolver,protected AsyncSupportResolver  (){ return new DefaultAsyncSupportResolver(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,createWrapperAndConfigureHandler,protected AtmosphereHandlerWrapper  (AtmosphereHandler h String mapping List<AtmosphereInterceptor> l){ AtmosphereHandlerWrapper w=new AtmosphereHandlerWrapper(broadcasterFactory h mapping config); addMapping(mapping w); addInterceptorToWrapper(w l); initServletProcessor(h); return w; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,customAnnotationPackages,public List<String>  (){ return annotationPackages; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,defaultInterceptors,public Class<? extends AtmosphereInterceptor>[]  (){ return DEFAULT_ATMOSPHERE_INTERCEPTORS.toArray(new Class[DEFAULT_ATMOSPHERE_INTERCEPTORS.size()]); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,defaultPackagesToScan,"protected void  (){ packages.add(""io.async.control""); packages.add(""io.async.satellite""); packages.add(""io.async.postman""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,destroy,"public AtmosphereFramework  (){ if (isDestroyed.getAndSet(true)) return this; onPreDestroy(); closeAtmosphereResource(); destroyInterceptors(); BroadcasterFactory factory=broadcasterFactory; if (factory != null) { factory.destroy(); } if (asyncSupport != null && AsynchronousProcessor.class.isAssignableFrom(asyncSupport.getClass())) { ((AsynchronousProcessor)asyncSupport).shutdown(); } for ( Entry<String AtmosphereHandlerWrapper> entry : atmosphereHandlers.entrySet()) { AtmosphereHandlerWrapper handlerWrapper=entry.getValue(); try { handlerWrapper.atmosphereHandler.destroy(); } catch ( Throwable t) { logger.warn("""" t); } } if (metaBroadcaster != null) metaBroadcaster.destroy(); if (arFactory != null) arFactory.destroy(); if (sessionFactory != null) sessionFactory.destroy(); WebSocketProcessorFactory.getDefault().destroy(); ExecutorsFactory.reset(config); config.destroy(); resetStates(); onPostDestroy(); try { if (this.shutdownHook != null) { Runtime.getRuntime().removeShutdownHook(this.shutdownHook); shutdownHook=null; } } catch ( IllegalStateException ex) { logger.trace("""" ex); } config.properties().clear(); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,destroyInterceptors,"protected void  (){ for ( AtmosphereHandlerWrapper w : atmosphereHandlers.values()) { if (w.interceptors != null) { for ( AtmosphereInterceptor i : w.interceptors) { try { i.destroy(); } catch ( Throwable ex) { logger.warn("""" ex); } } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,detectSupportedFramework,"protected boolean  (ServletConfig sc) throws Exception { String broadcasterClassNameTmp=null; boolean isJersey=false; try { IOUtils.loadClass(getClass() JERSEY_CONTAINER); isJersey=true; if (!isBroadcasterSpecified) { broadcasterClassNameTmp=lookupDefaultBroadcasterType(JERSEY_BROADCASTER); IOUtils.loadClass(getClass() broadcasterClassNameTmp); } useStreamForFlushingComments=true; StringBuilder packagesInit=new StringBuilder(); for ( String s : packages) { packagesInit.append(s).append("" ""); } initParams.put(FrameworkConfig.JERSEY_SCANNING_PACKAGE packagesInit.toString()); } catch ( Throwable t) { logger.trace("""" t); return false; } logger.debug(""Missing META-INF/atmosphere.xml but found the Jersey runtime. Starting Jersey""); ReflectorServletProcessor rsp=newClassInstance(ReflectorServletProcessor.class ReflectorServletProcessor.class); if (broadcasterClassNameTmp != null) broadcasterClassName=broadcasterClassNameTmp; configureDetectedFramework(rsp isJersey); sessionSupport(false); initParams.put(DISABLE_ONSTATE_EVENT ""true""); String mapping=sc.getInitParameter(ATMOSPHERE_HANDLER_MAPPING); if (mapping == null) { mapping=Broadcaster.ROOT_MASTER; } Class<? extends Broadcaster> bc=(Class<? extends Broadcaster>)IOUtils.loadClass(getClass() broadcasterClassName); broadcasterFactory.destroy(); broadcasterFactory=newClassInstance(BroadcasterFactory.class DefaultBroadcasterFactory.class); broadcasterFactory.configure(bc broadcasterLifeCyclePolicy config); for ( BroadcasterListener b : broadcasterListeners) { broadcasterFactory.addBroadcasterListener(b); } Broadcaster b; try { b=broadcasterFactory.get(bc mapping); } catch ( IllegalStateException ex) { logger.warn(""Two Broadcaster's named {}. Renaming the second one to {}"" mapping sc.getServletName() + mapping); b=broadcasterFactory.get(bc sc.getServletName() + mapping); } addAtmosphereHandler(mapping rsp b); return true; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,doCometSupport,"public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { if (isDestroyed.get()) return Action.CANCELLED; Action a=null; try { configureRequestResponse(req res); a=asyncSupport.service(req res); } catch ( IllegalStateException ex) { logger.error(""AtmosphereFramework exception"" ex); throw ex; } finally { if (a != null) { notify(a.type() req res); } if (!externalizeDestroy) { if (req != null && a != null && a.type() != Action.TYPE.SUSPEND) { req.destroy(); res.destroy(); notify(Action.TYPE.DESTROYED req res); } } } return a; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,doInitParams,"protected void  (ServletConfig sc boolean reconfigure){ String s=sc.getInitParameter(PROPERTY_NATIVE_COMETSUPPORT); if (s != null) { useNativeImplementation=Boolean.parseBoolean(s); if (useNativeImplementation) isCometSupportSpecified=true; } s=sc.getInitParameter(PROPERTY_USE_STREAM); if (s != null) { useStreamForFlushingComments=Boolean.parseBoolean(s); } s=sc.getInitParameter(PROPERTY_COMET_SUPPORT); if (asyncSupport == null && s != null && !reconfigure) { asyncSupport=new DefaultAsyncSupportResolver(config).newCometSupport(s); isCometSupportSpecified=true; } s=sc.getInitParameter(BROADCASTER_CLASS); if (s != null) { broadcasterClassName=s; isBroadcasterSpecified=true; } s=sc.getInitParameter(BROADCASTER_CACHE); if (s != null) { broadcasterCacheClassName=s; } s=sc.getInitParameter(PROPERTY_SESSION_SUPPORT); if (s == null) { s=sc.getServletContext().getInitParameter(PROPERTY_SESSION_SUPPORT); } if (s != null || SessionSupport.initializationHint) { boolean sessionSupport=Boolean.valueOf(s) || SessionSupport.initializationHint; config.setSupportSession(sessionSupport); if (sessionSupport && (sc.getServletContext().getMajorVersion() < 3 || !SessionSupport.initializationHint)) { logger.warn(""SessionSupport error. Make sure you also define {} as a listener in web.xml  see https://github.com/Atmosphere/atmosphere/wiki/Enabling-HttpSession-Support"" SessionSupport.class.getName()); } isSessionSupportSpecified=true; } s=sc.getInitParameter(PROPERTY_ALLOW_SESSION_TIMEOUT_REMOVAL); if (s != null) { config.setSessionTimeoutRemovalAllowed(Boolean.valueOf(s)); } s=sc.getInitParameter(PROPERTY_THROW_EXCEPTION_ON_CLONED_REQUEST); if (s != null) { config.setThrowExceptionOnCloned(Boolean.valueOf(s)); isThrowExceptionOnClonedRequestSpecified=true; } s=sc.getInitParameter(DISABLE_ONSTATE_EVENT); if (s != null) { initParams.put(DISABLE_ONSTATE_EVENT s); } else { initParams.put(DISABLE_ONSTATE_EVENT ""false""); } s=sc.getInitParameter(BROADCAST_FILTER_CLASSES); if (s != null) { broadcasterFilters.addAll(Arrays.asList(s.split("" ""))); logger.info(""Installing BroadcastFilter class(es) {}"" s); } s=sc.getInitParameter(BROADCASTER_LIFECYCLE_POLICY); if (s != null) { broadcasterLifeCyclePolicy=s; } s=sc.getInitParameter(BROADCASTER_FACTORY); if (s != null) { broadcasterFactoryClassName=s; } s=sc.getInitParameter(ATMOSPHERE_HANDLER_PATH); if (s != null) { handlersPath=s; } s=sc.getInitParameter(PROPERTY_ATMOSPHERE_XML); if (s != null) { atmosphereDotXmlPath=s; } s=sc.getInitParameter(META_SERVICE_PATH); if (s != null) { metaServicePath=s; } s=sc.getInitParameter(ApplicationConfig.HANDLER_MAPPING_REGEX); if (s != null) { mappingRegex=s; } s=sc.getInitParameter(FrameworkConfig.JERSEY_SCANNING_PACKAGE); if (s != null) { packages.add(s); } s=sc.getInitParameter(ApplicationConfig.DEFAULT_SERIALIZER); if (s != null) { defaultSerializerClassName=s; } s=sc.getInitParameter(ApplicationConfig.DISABLE_ATMOSPHEREINTERCEPTORS); if (s != null) { excludedInterceptors.addAll(Arrays.asList(s.trim().replace("" "" """").split("" ""))); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,doInitParamsForWebSocket,protected void  (ServletConfig sc){ String s=sc.getInitParameter(WEBSOCKET_SUPPORT); if (s != null) { webSocketEnabled=Boolean.parseBoolean(s); sessionSupport(false); } s=sc.getInitParameter(WEBSOCKET_PROTOCOL); if (s != null) { webSocketProtocolClassName=s; } s=sc.getInitParameter(WEBSOCKET_PROCESSOR); if (s != null) { webSocketProcessorClassName=s; } s=config.getInitParameter(ApplicationConfig.WEBSOCKET_SUPPORT_SERVLET3); if (s != null) { useServlet30=Boolean.parseBoolean(s); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,endPointMapper,public AtmosphereFramework  (EndpointMapper endpointMapper){ this.endpointMapper=endpointMapper; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,excludeInterceptor,public AtmosphereFramework  (String interceptor){ excludedInterceptors.add(interceptor); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,excludedInterceptors,public List<String>  (){ return excludedInterceptors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,externalizeDestroy,public boolean  (){ return externalizeDestroy; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,filterManipulator,public AtmosphereFramework  (BroadcasterConfig.FilterManipulator m){ filterManipulators.add(m); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,filterManipulators,public List<BroadcasterConfig.FilterManipulator>  (){ return filterManipulators; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,frameworkListener,public AtmosphereFramework  (AtmosphereFrameworkListener l){ frameworkListeners.add(l); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,frameworkListeners,@Deprecated public List<AtmosphereFrameworkListener>  (){ return Arrays.asList(frameworkListeners.toArray(new AtmosphereFrameworkListener[frameworkListeners.size()])); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getAsyncSupport,public AsyncSupport  (){ return asyncSupport; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getAtmosphereConfig,public AtmosphereConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getAtmosphereDotXmlPath,public String  (){ return atmosphereDotXmlPath; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getAtmosphereHandlers,public Map<String AtmosphereHandlerWrapper>  (){ return atmosphereHandlers; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getBroadcasterCacheClassName,public String  (){ return broadcasterCacheClassName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getBroadcasterFactory,public BroadcasterFactory  (){ if (broadcasterFactory == null) { configureBroadcasterFactory(); } return broadcasterFactory; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getCometSupport,public AsyncSupport  (){ return asyncSupport; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getDefaultBroadcasterClassName,public String  (){ return broadcasterClassName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getDefaultSerializerClass,public Class<Serializer>  (){ return defaultSerializerClass; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getDefaultSerializerClassName,public String  (){ return defaultSerializerClassName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getFiles,"private void  (File f){ if (scanDone) return; File[] files=f.listFiles(); for ( File test : files) { if (test.isDirectory()) { getFiles(test); } else { String clazz=test.getAbsolutePath(); if (clazz.endsWith("".class"")) { possibleComponentsCandidate.add(clazz); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getHandlersPath,public String  (){ return handlersPath; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getInitParameter,public String  (String name){ String param=initParams.get(name); if (param == null) { param=sc.getInitParameter(name); if (param == null && useServletContextParameters) { param=sc.getServletContext().getInitParameter(name); } } return param; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getInitParameterNames,public Enumeration<String>  (){ if (!done.getAndSet(true)) { Enumeration en=sc.getInitParameterNames(); if (en != null) { while (en.hasMoreElements()) { String name=(String)en.nextElement(); if (!initParams.containsKey(name)) { initParams.put(name sc.getInitParameter(name)); } } } } return Collections.enumeration(initParams.keySet()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getLibPath,public String  (){ return libPath; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getServletConfig,public ServletConfig  (){ return servletConfig; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getServletContext,public ServletContext  (){ return servletConfig.getServletContext(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getServletName,public String  (){ return sc.getServletName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getWebSocketProcessorClassName,public String  (){ return webSocketProcessorClassName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getWebSocketProtocol,public WebSocketProtocol  (){ initWebSocket(); return webSocketProtocol; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,getWebSocketProtocolClassName,public String  (){ return webSocketProtocolClassName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,hookInjection,void  (final AtmosphereConfig config){ config.startupHook(new AtmosphereConfig.StartupHook(){ @Override public void started( AtmosphereFramework framework){ needRequestScopedInjection=Utils.requestScopedInjection(config atmosphereHandler); } } ); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,info,"private void  (){ if (logger.isTraceEnabled()) { Enumeration<String> e=servletConfig.getInitParameterNames(); logger.trace(""Configured init-params""); String n; while (e.hasMoreElements()) { n=e.nextElement(); logger.trace(""\t{} = {}"" n servletConfig.getInitParameter(n)); } } logger.info(""Using EndpointMapper {}"" endpointMapper.getClass()); for ( String i : broadcasterFilters) { logger.info(""Using BroadcastFilter: {}"" i); } if (broadcasterCacheClassName == null || DefaultBroadcasterCache.class.getName().equals(broadcasterCacheClassName)) { logger.warn(""No BroadcasterCache configured. Broadcasted message between client reconnection will be LOST. "" + ""It is recommended to configure the {}"" UUIDBroadcasterCache.class.getName()); } else { logger.info(""Using BroadcasterCache: {}"" broadcasterCacheClassName); } String s=config.getInitParameter(BROADCASTER_WAIT_TIME); logger.info(""Default Broadcaster Class: {}"" broadcasterClassName); logger.info(""Broadcaster Shared List Resources: {}"" config.getInitParameter(BROADCASTER_SHAREABLE_LISTENERS false)); logger.info(""Broadcaster Polling Wait Time {}"" s == null ? DefaultBroadcaster.POLLING_DEFAULT : s); logger.info(""Shared ExecutorService supported: {}"" sharedThreadPools); ExecutorService executorService=ExecutorsFactory.getMessageDispatcher(config Broadcaster.ROOT_MASTER); if (executorService != null) { if (ThreadPoolExecutor.class.isAssignableFrom(executorService.getClass())) { long max=ThreadPoolExecutor.class.cast(executorService).getMaximumPoolSize(); logger.info(""Messaging Thread Pool Size: {}"" ThreadPoolExecutor.class.cast(executorService).getMaximumPoolSize() == 2147483647 ? ""Unlimited"" : max); } else { logger.info(""Messaging ExecutorService Pool Size unavailable - Not instance of ThreadPoolExecutor""); } } executorService=ExecutorsFactory.getAsyncOperationExecutor(config Broadcaster.ROOT_MASTER); if (executorService != null) { if (ThreadPoolExecutor.class.isAssignableFrom(executorService.getClass())) { logger.info(""Async I/O Thread Pool Size: {}"" ThreadPoolExecutor.class.cast(executorService).getMaximumPoolSize()); } else { logger.info(""Async I/O ExecutorService Pool Size unavailable - Not instance of ThreadPoolExecutor""); } } logger.info(""Using BroadcasterFactory: {}"" broadcasterFactory.getClass().getName()); logger.info(""Using AtmosphereResurceFactory: {}"" arFactory.getClass().getName()); logger.info(""Using WebSocketProcessor: {}"" webSocketProcessorClassName); if (defaultSerializerClassName != null && !defaultSerializerClassName.isEmpty()) { logger.info(""Using Serializer: {}"" defaultSerializerClassName); } WebSocketProcessor wp=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(this); boolean b=false; if (DefaultWebSocketProcessor.class.isAssignableFrom(wp.getClass())) { b=DefaultWebSocketProcessor.class.cast(wp).invokeInterceptors(); } logger.info(""Invoke AtmosphereInterceptor on WebSocket message {}"" b); logger.info(""HttpSession supported: {}"" config.isSupportSession()); logger.info(""Atmosphere is using {} for dependency injection and object creation"" objectFactory); logger.info(""Atmosphere is using async support: {} running under container: {}"" getAsyncSupport().getClass().getName() asyncSupport.getContainerName()); logger.info(""Atmosphere Framework {} started."" Version.getRawVersion()); logger.info(""\n\n\tFor Atmosphere Framework Commercial Support  visit \n\t{} "" + ""or send an email to {}\n"" ""http://www.async-io.org/"" ""support@async-io.org""); if (logger.isTraceEnabled()) { for ( Entry<String AtmosphereHandlerWrapper> e : atmosphereHandlers.entrySet()) { logger.trace(""\nConfigured AtmosphereHandler {}\n"" e.getKey()); logger.trace(""{}"" e.getValue()); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,init,"public AtmosphereFramework  (final ServletConfig sc boolean wrap) throws ServletException { if (isInit) return this; servletConfig(sc wrap); readSystemProperties(); populateBroadcasterType(); populateObjectFactoryType(); loadMetaService(); onPreInit(); try { ServletContextFactory.getDefault().init(sc.getServletContext()); preventOOM(); doInitParams(servletConfig); doInitParamsForWebSocket(servletConfig); lookupDefaultObjectFactoryType(); if (logger.isTraceEnabled()) { asyncSupportListener(newClassInstance(AsyncSupportListener.class AsyncSupportListenerAdapter.class)); } configureObjectFactory(); configureAnnotationPackages(); configureBroadcasterFactory(); configureMetaBroadcaster(); configureAtmosphereResourceFactory(); if (isSessionSupportSpecified) { sessionFactory(); } configureScanningPackage(servletConfig ApplicationConfig.ANNOTATION_PACKAGE); configureScanningPackage(servletConfig FrameworkConfig.JERSEY2_SCANNING_PACKAGE); configureScanningPackage(servletConfig FrameworkConfig.JERSEY_SCANNING_PACKAGE); defaultPackagesToScan(); installAnnotationProcessor(servletConfig); autoConfigureService(servletConfig.getServletContext()); configureBroadcasterFactory(); patchContainer(); configureBroadcaster(); loadConfiguration(servletConfig); initWebSocket(); initEndpointMapper(); initDefaultSerializer(); autoDetectContainer(); configureWebDotXmlAtmosphereHandler(servletConfig); asyncSupport.init(servletConfig); initAtmosphereHandler(servletConfig); configureAtmosphereInterceptor(servletConfig); analytics(); if (sc.getServletContext() != null) { sc.getServletContext().setAttribute(BroadcasterFactory.class.getName() broadcasterFactory); } String s=config.getInitParameter(ApplicationConfig.BROADCASTER_SHARABLE_THREAD_POOLS); if (s != null) { sharedThreadPools=Boolean.parseBoolean(s); } this.shutdownHook=new Thread(){ public void run(){ AtmosphereFramework.this.destroy(); } } ; Runtime.getRuntime().addShutdownHook(this.shutdownHook); if (logger.isInfoEnabled()) { info(); } if (initializationError != null) { logger.trace(""ContainerInitalizer exception. May not be an issue if Atmosphere started properly "" initializationError); } universe(); } catch ( Throwable t) { logger.error(""Failed to initialize Atmosphere Framework"" t); if (t instanceof ServletException) { throw (ServletException)t; } throw new ServletException(t); } isInit=true; config.initComplete(); onPostInit(); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initAtmosphereHandler,public void  () throws ServletException { AtmosphereHandler a; AtmosphereHandlerWrapper w; for ( Entry<String AtmosphereHandlerWrapper> h : atmosphereHandlers.entrySet()) { w=h.getValue(); a=w.atmosphereHandler; if (a instanceof AtmosphereServletProcessor) { ((AtmosphereServletProcessor)a).init(config); } } checkWebSocketSupportState(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initDefaultSerializer,"private void  (){ if (defaultSerializerClassName != null && !defaultSerializerClassName.isEmpty()) { try { @SuppressWarnings(""unchecked"") Class<Serializer> clazz=(Class<Serializer>)IOUtils.loadClass(Serializer.class defaultSerializerClassName); if (Serializer.class.isAssignableFrom(clazz)) { defaultSerializerClass=clazz; } else { logger.error(""Default Serializer class name does not implement Serializer interface""); defaultSerializerClassName=null; defaultSerializerClass=null; } } catch ( Exception e) { logger.error(""Unable to set default Serializer"" e); defaultSerializerClassName=null; defaultSerializerClass=null; } } else { defaultSerializerClassName=null; defaultSerializerClass=null; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initEndpointMapper,"public void  (){ String s=servletConfig.getInitParameter(ApplicationConfig.ENDPOINT_MAPPER); if (s != null) { try { endpointMapper=newClassInstance(EndpointMapper.class (Class<EndpointMapper>)IOUtils.loadClass(this.getClass() s)); logger.info(""Installed EndpointMapper {} "" s); } catch ( Exception ex) { logger.error(""Cannot load the EndpointMapper {}"" s ex); } } endpointMapper.configure(config); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initServletProcessor,private void  (AtmosphereHandler h){ if (!isInit) return; try { if (h instanceof AtmosphereServletProcessor) { ((AtmosphereServletProcessor)h).init(config); } } catch ( ServletException e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initWebSocket,"public void  (){ if (webSocketProtocolInitialized) return; if (webSocketProtocol == null) { try { webSocketProtocol=newClassInstance(WebSocketProtocol.class (Class<WebSocketProtocol>)IOUtils.loadClass(this.getClass() webSocketProtocolClassName)); logger.info(""Installed WebSocketProtocol {} "" webSocketProtocolClassName); } catch ( Exception ex) { logger.error(""Cannot load the WebSocketProtocol {}"" getWebSocketProtocolClassName() ex); try { webSocketProtocol=newClassInstance(WebSocketProtocol.class SimpleHttpProtocol.class); } catch ( Exception e) { } } } webSocketProtocolInitialized=true; webSocketProtocol.configure(config); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initializationError,public void  (IllegalStateException initializationError){ this.initializationError=initializationError; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,initialized,public boolean  (){ return isInit; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,inspectors,public ConcurrentLinkedQueue<BroadcasterCacheInspector>  (){ return inspectors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,installAnnotationProcessor,protected void  (ServletConfig sc){ String s=sc.getInitParameter(ApplicationConfig.ANNOTATION_PROCESSOR); if (s != null) { annotationProcessorClassName=s; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,interceptor,public AtmosphereFramework  (AtmosphereInterceptor c){ if (!checkDuplicate(c)) { interceptors.add(c); if (isInit) { addInterceptorToAllWrappers(c); } } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,interceptors,public LinkedList<AtmosphereInterceptor>  (){ return interceptors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isAServletFilter,public boolean  (){ return isFilter; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isBroadcasterSpecified,public boolean  (){ return isBroadcasterSpecified; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isDestroyed,public boolean  (){ return isDestroyed.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isShareExecutorServices,public boolean  (){ return sharedThreadPools; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isUseBlockingImplementation,public boolean  (){ return useBlockingImplementation; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isUseNativeImplementation,public boolean  (){ return useNativeImplementation; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isUseServlet30,public boolean  (){ return useServlet30; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,isUseStreamForFlushingComments,public boolean  (){ return useStreamForFlushingComments; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,loadAtmosphereDotXml,"protected void  (InputStream stream URLClassLoader c) throws IOException  ServletException { if (stream == null) { return; } logger.info(""Found Atmosphere Configuration under {}"" atmosphereDotXmlPath); AtmosphereConfigReader.getInstance().parse(config stream); AtmosphereHandler handler=null; for ( AtmosphereHandlerConfig atmoHandler : config.getAtmosphereHandlerConfig()) { try { if (!atmoHandler.getClassName().startsWith(""@"")) { if (!ReflectorServletProcessor.class.getName().equals(atmoHandler.getClassName())) { handler=newClassInstance(AtmosphereHandler.class (Class<AtmosphereHandler>)IOUtils.loadClass(this.getClass() atmoHandler.getClassName())); } else { handler=newClassInstance(AtmosphereHandler.class ReflectorServletProcessor.class); } logger.info(""Installed AtmosphereHandler {} mapped to context-path: {}"" handler atmoHandler.getContextRoot()); } for ( ApplicationConfiguration a : atmoHandler.getApplicationConfig()) { initParams.put(a.getParamName() a.getParamValue()); } for ( FrameworkConfiguration a : atmoHandler.getFrameworkConfig()) { initParams.put(a.getParamName() a.getParamValue()); } for ( AtmosphereHandlerProperty handlerProperty : atmoHandler.getProperties()) { if (handlerProperty.getValue() != null && handlerProperty.getValue().indexOf(""jersey"") != -1) { initParams.put(DISABLE_ONSTATE_EVENT ""true""); useStreamForFlushingComments=true; broadcasterClassName=lookupDefaultBroadcasterType(JERSEY_BROADCASTER); broadcasterFactory.destroy(); broadcasterFactory=null; configureBroadcasterFactory(); configureBroadcaster(); } if (handler != null) { IntrospectionUtils.setProperty(handler handlerProperty.getName() handlerProperty.getValue()); IntrospectionUtils.addProperty(handler handlerProperty.getName() handlerProperty.getValue()); } } sessionSupport(Boolean.valueOf(atmoHandler.getSupportSession())); if (handler != null) { String broadcasterClass=atmoHandler.getBroadcaster(); Broadcaster b; if (broadcasterClass != null) { broadcasterClassName=broadcasterClass; ClassLoader cl=Thread.currentThread().getContextClassLoader(); Class<? extends Broadcaster> bc=(Class<? extends Broadcaster>)cl.loadClass(broadcasterClassName); broadcasterFactory=newClassInstance(BroadcasterFactory.class DefaultBroadcasterFactory.class); broadcasterFactory.configure(bc broadcasterLifeCyclePolicy config); } b=broadcasterFactory.lookup(atmoHandler.getContextRoot() true); AtmosphereHandlerWrapper wrapper=new AtmosphereHandlerWrapper(handler b config); addMapping(atmoHandler.getContextRoot() wrapper); String bc=atmoHandler.getBroadcasterCache(); if (bc != null) { broadcasterCacheClassName=bc; } if (atmoHandler.getCometSupport() != null) { asyncSupport=(AsyncSupport)c.loadClass(atmoHandler.getCometSupport()).getDeclaredConstructor(new Class[]{AtmosphereConfig.class}).newInstance(new Object[]{config}); } if (atmoHandler.getBroadcastFilterClasses() != null) { broadcasterFilters.addAll(atmoHandler.getBroadcastFilterClasses()); } LinkedList<AtmosphereInterceptor> l=new LinkedList<AtmosphereInterceptor>(); if (atmoHandler.getAtmosphereInterceptorClasses() != null) { for ( String a : atmoHandler.getAtmosphereInterceptorClasses()) { try { AtmosphereInterceptor ai=newClassInstance(AtmosphereInterceptor.class (Class<AtmosphereInterceptor>)IOUtils.loadClass(getClass() a)); l.add(ai); } catch ( Throwable e) { logger.warn("""" e); } } } addInterceptorToWrapper(wrapper l); if (!l.isEmpty()) { logger.info(""Installed AtmosphereInterceptor {} mapped to AtmosphereHandler {}"" l atmoHandler.getClassName()); } } } catch ( Throwable t) { logger.warn(""Unable to load AtmosphereHandler class: "" + atmoHandler.getClassName() t); throw new ServletException(t); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,loadAtmosphereHandlersFromPath,"public void  (URLClassLoader classloader String realPath){ File file=new File(realPath); if (file.exists() && file.isDirectory()) { getFiles(file); scanDone=true; for ( String className : possibleComponentsCandidate) { try { className=className.replace('\\' '/'); className=className.replaceFirst(""^.*/(WEB-INF|target)(?:/scala-[^/]+)?/(test-)?classes/(.*)\\.class"" ""$3"").replace(""/"" "".""); Class<?> clazz=classloader.loadClass(className); if (AtmosphereHandler.class.isAssignableFrom(clazz)) { AtmosphereHandler handler=newClassInstance(AtmosphereHandler.class (Class<AtmosphereHandler>)clazz); addMapping(""/"" + handler.getClass().getSimpleName() new AtmosphereHandlerWrapper(broadcasterFactory handler ""/"" + handler.getClass().getSimpleName() config)); logger.info(""Installed AtmosphereHandler {} mapped to context-path: {}"" handler handler.getClass().getName()); } } catch ( Throwable t) { logger.trace(""failed to load class as an AtmosphereHandler: "" + className t); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,loadConfiguration,public void  (ServletConfig sc) throws ServletException { if (!autoDetectHandlers) return; try { URL url=sc.getServletContext().getResource(handlersPath); URLClassLoader urlC=new URLClassLoader(new URL[]{url} Thread.currentThread().getContextClassLoader()); loadAtmosphereDotXml(sc.getServletContext().getResourceAsStream(atmosphereDotXmlPath) urlC); if (atmosphereHandlers.isEmpty()) { autoDetectAtmosphereHandlers(sc.getServletContext() urlC); if (atmosphereHandlers.isEmpty()) { detectSupportedFramework(sc); } } autoDetectWebSocketHandler(sc.getServletContext() urlC); } catch ( Throwable t) { throw new ServletException(t); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,loadMetaService,"protected void  (){ try { Map<String MetaServiceAction> config=(Map<String MetaServiceAction>)servletConfig.getServletContext().getAttribute(AtmosphereFramework.MetaServiceAction.class.getName()); if (config == null) { config=IOUtils.readServiceFile(metaServicePath + AtmosphereFramework.class.getName()); } for ( final Map.Entry<String MetaServiceAction> action : config.entrySet()) { final Class c=IOUtils.loadClass(AtmosphereFramework.class action.getKey()); action.getValue().apply(this c); } } catch ( Exception ex) { logger.error("""" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,loadWebSocketFromPath,"protected void  (URLClassLoader classloader String realPath){ File file=new File(realPath); if (file.exists() && file.isDirectory()) { getFiles(file); scanDone=true; for ( String className : possibleComponentsCandidate) { try { className=className.replace('\\' '/'); className=className.replaceFirst(""^.*/(WEB-INF|target)(?:/scala-[^/]+)?/(test-)?classes/(.*)\\.class"" ""$3"").replace(""/"" "".""); Class<?> clazz=classloader.loadClass(className); if (WebSocketProtocol.class.isAssignableFrom(clazz)) { webSocketProtocol=(WebSocketProtocol)newClassInstance(WebSocketProtocol.class (Class<WebSocketProtocol>)clazz); logger.info(""Installed WebSocketProtocol {}"" webSocketProtocol); } } catch ( Throwable t) { logger.trace(""failed to load class as an WebSocketProtocol: "" + className t); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,lookupDefaultBroadcasterType,"protected String  (String defaultB){ String drop=servletConfig != null ? servletConfig.getInitParameter(ApplicationConfig.AUTODETECT_BROADCASTER) : null; if (drop == null || !Boolean.parseBoolean(drop)) { for ( String b : broadcasterTypes) { try { Class.forName(b); logger.info(""Detected a Broadcaster {} on the classpath. "" + ""This broadcaster will be used by default and will override any annotated resources. "" + ""Set {} to false to change the behavior"" b ApplicationConfig.AUTODETECT_BROADCASTER); isBroadcasterSpecified=true; return b; } catch ( ClassNotFoundException e) { } } } return defaultB; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,lookupDefaultObjectFactoryType,"protected AtmosphereObjectFactory  (){ if (objectFactory != null && !DefaultAtmosphereObjectFactory.class.getName().equals(objectFactory.getClass().getName())) return objectFactory; for ( String b : objectFactoryType) { try { Class<?> c=Class.forName(b); objectFactory=(AtmosphereObjectFactory)c.newInstance(); break; } catch ( ClassNotFoundException e) { logger.trace(e.getMessage() + "" not found""); } catch ( Exception e) { logger.trace("""" e); } } if (objectFactory == null || DefaultAtmosphereObjectFactory.class.getName().equals(objectFactory.getClass().getName())) { try { IOUtils.loadClass(getClass() INJECT_LIBARY); objectFactory=new InjectableObjectFactory(); } catch ( Exception e) { logger.trace(""javax.inject.Inject nor installed. Using DefaultAtmosphereObjectFactory""); objectFactory=new DefaultAtmosphereObjectFactory(); } } objectFactory.configure(config); return objectFactory; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,mappingRegex,public AtmosphereFramework  (String mappingRegex){ this.mappingRegex=mappingRegex; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,metaBroadcaster,public MetaBroadcaster  (){ return metaBroadcaster; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,needRequestScopedInjection,public boolean  (){ return needRequestScopedInjection; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,newAInterceptor,"protected AtmosphereInterceptor  (Class<? extends AtmosphereInterceptor> a){ AtmosphereInterceptor ai=null; try { ai=newClassInstance(AtmosphereInterceptor.class (Class<AtmosphereInterceptor>)IOUtils.loadClass(getClass() a.getName())); logger.info(""\t{} : {}"" a.getName() ai); } catch ( Exception ex) { logger.warn("""" ex); } return ai; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,newAtmosphereConfig,protected AtmosphereConfig  (){ return new AtmosphereConfig(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,newClassInstance,public <T U extends T>T  (Class<T> classType Class<U> defaultType) throws InstantiationException  IllegalAccessException { return objectFactory.newClassInstance(classType defaultType); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,normalizePath,"public String  (String path){ if (path.contains(""*"")) { path=path.replace(""*"" mappingRegex); } if (path.endsWith(""/"")) { path=path + mappingRegex; } return path; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,notify,"public AtmosphereFramework  (Action.TYPE type AtmosphereRequest request AtmosphereResponse response){ for ( AsyncSupportListener l : asyncSupportListeners()) { try { switch (type) { case TIMEOUT: l.onTimeout(request response); break; case CANCELLED: l.onClose(request response); break; case SUSPEND: l.onSuspend(request response); break; case RESUME: l.onResume(request response); break; case DESTROYED: l.onDestroyed(request response); break; } } catch (Throwable t) { logger.warn("""" t); } } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,notifyDestroyed,public AtmosphereFramework  (String uuid){ for ( AtmosphereResourceListener l : atmosphereResourceListeners()) { l.onDisconnect(uuid); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,notifySuspended,public AtmosphereFramework  (String uuid){ for ( AtmosphereResourceListener l : atmosphereResourceListeners()) { l.onSuspended(uuid); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,objectFactory,public AtmosphereObjectFactory  (){ return objectFactory; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,objectFactoryType,public ConcurrentLinkedQueue<String>  (){ return objectFactoryType; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,onPostDestroy,"protected void  (){ for ( AtmosphereFrameworkListener l : frameworkListeners) { try { l.onPostDestroy(this); } catch ( Exception e) { logger.error("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,onPostInit,"protected void  (){ for ( AtmosphereFrameworkListener l : frameworkListeners) { try { l.onPostInit(this); } catch ( Exception e) { logger.error("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,onPreDestroy,"protected void  (){ for ( AtmosphereFrameworkListener l : frameworkListeners) { try { l.onPreDestroy(this); } catch ( Exception e) { logger.error("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,onPreInit,"protected void  (){ for ( AtmosphereFrameworkListener l : frameworkListeners) { try { l.onPreInit(this); } catch ( Exception e) { logger.error("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,onRequest,"@Override public void  (AtmosphereResource r) throws IOException { logger.debug(""No AtmosphereHandler defined.""); if (!r.transport().equals(AtmosphereResource.TRANSPORT.WEBSOCKET)) { WebSocket.notSupported(r.getRequest() r.getResponse()); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,packages,public List<String>  (){ return packages; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,patchContainer,"public void  (){ System.setProperty(""org.apache.catalina.STRICT_SERVLET_COMPLIANCE"" ""false""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,populateBroadcasterType,private void  (){ broadcasterTypes.add(KAFKA_BROADCASTER); broadcasterTypes.add(HAZELCAST_BROADCASTER); broadcasterTypes.add(XMPP_BROADCASTER); broadcasterTypes.add(REDIS_BROADCASTER); broadcasterTypes.add(JGROUPS_BROADCASTER); broadcasterTypes.add(JMS_BROADCASTER); broadcasterTypes.add(RMI_BROADCASTER); broadcasterTypes.add(RABBITMQ_BROADCASTER); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,populateObjectFactoryType,private void  (){ objectFactoryType.add(CDI_INJECTOR); objectFactoryType.add(SPRING_INJECTOR); objectFactoryType.add(GUICE_INJECTOR); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,preventOOM,"protected void  (){ String s=config.getInitParameter(ApplicationConfig.SCAN_CLASSPATH); if (s != null) { allowAllClassesScan=Boolean.parseBoolean(s); } try { Class.forName(""org.testng.Assert""); allowAllClassesScan=false; } catch ( ClassNotFoundException e) { } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,readSystemProperties,protected void  (){ if (System.getProperty(PROPERTY_NATIVE_COMETSUPPORT) != null) { useNativeImplementation=Boolean.parseBoolean(System.getProperty(PROPERTY_NATIVE_COMETSUPPORT)); isCometSupportSpecified=true; } atmosphereDotXmlPath=System.getProperty(PROPERTY_ATMOSPHERE_XML atmosphereDotXmlPath); if (System.getProperty(DISABLE_ONSTATE_EVENT) != null) { initParams.put(DISABLE_ONSTATE_EVENT System.getProperty(DISABLE_ONSTATE_EVENT)); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,reconfigureInitParams,public void  (boolean reconfigureInitParams){ if (reconfigureInitParams) { doInitParams(servletConfig reconfigureInitParams); doInitParamsForWebSocket(servletConfig); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,removeAllAtmosphereHandler,public AtmosphereFramework  (){ atmosphereHandlers.clear(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,removeAllInitParams,public AtmosphereFramework  (){ initParams.clear(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,removeAtmosphereHandler,"public AtmosphereFramework  (String mapping){ if (mapping.endsWith(""/"")) { mapping+=mappingRegex; } atmosphereHandlers.remove(mapping); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,resetStates,public AtmosphereFramework  (){ isInit=false; executeFirstSet=false; broadcasterFilters.clear(); asyncSupportListeners.clear(); possibleComponentsCandidate.clear(); initParams.clear(); atmosphereHandlers.clear(); broadcasterTypes.clear(); objectFactoryType.clear(); inspectors.clear(); broadcasterListeners.clear(); packages.clear(); annotationPackages.clear(); excludedInterceptors.clear(); broadcasterCacheListeners.clear(); filterManipulators.clear(); interceptors.clear(); broadcasterFactory=null; arFactory=null; metaBroadcaster=null; sessionFactory=null; annotationFound=false; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,run,"public void  (){ try { logger.debug(""Retrieving Atmosphere's latest version from http://async-io.org/version.html""); HttpURLConnection urlConnection=(HttpURLConnection)URI.create(""http://async-io.org/version.html"").toURL().openConnection(); urlConnection.setRequestProperty(""User-Agent"" ""Mozilla/5.0""); urlConnection.setRequestProperty(""Connection"" ""keep-alive""); urlConnection.setRequestProperty(""Cache-Control"" ""max-age=0""); urlConnection.setRequestProperty(""Accept"" ""text/html application/xhtml+xml application/xml;q=0.9 */*;q=0.8""); urlConnection.setRequestProperty(""Accept-Language"" ""en-US en;q=0.8""); urlConnection.setRequestProperty(""Accept-Charset"" ""ISO-8859-1 utf-8;q=0.7 *;q=0.3""); urlConnection.setRequestProperty(""If-Modified-Since"" ""ISO-8859-1 utf-8;q=0.7 *;q=0.3""); urlConnection.setInstanceFollowRedirects(true); BufferedReader in=new BufferedReader(new InputStreamReader(urlConnection.getInputStream())); String inputLine; String newVersion=Version.getRawVersion(); String clientVersion=null; String nextMajorRelease=null; boolean nextAvailable=false; if (newVersion.indexOf(""SNAPSHOT"") == -1) { try { while ((inputLine=in.readLine().trim()) != null) { if (inputLine.startsWith(""ATMO23_VERSION="")) { newVersion=inputLine.substring(""ATMO23_VERSION="".length()); } else if (inputLine.startsWith(""CLIENT3_VERSION="")) { clientVersion=inputLine.substring(""CLIENT3_VERSION="".length()); break; } else if (inputLine.startsWith(""ATMO_RELEASE_VERSION="")) { nextMajorRelease=inputLine.substring(""ATMO_RELEASE_VERSION="".length()); if (nextMajorRelease.compareTo(Version.getRawVersion()) > 0 && nextMajorRelease.toLowerCase().indexOf(""rc"") == -1 && nextMajorRelease.toLowerCase().indexOf(""beta"") == -1) { nextAvailable=true; } } } } finally { if (clientVersion != null) { logger.info(""Latest version of Atmosphere's JavaScript Client {}"" clientVersion); } if (newVersion.compareTo(Version.getRawVersion()) > 0) { if (nextAvailable) { logger.info(""\n\n\tAtmosphere Framework Updates\n\tMinor available (bugs fixes): {}\n\tMajor available (new features): {}"" newVersion nextMajorRelease); } else { logger.info(""\n\n\tAtmosphere Framework Updates:\n\tMinor Update available (bugs fixes): {}"" newVersion); } } else if (nextAvailable) { logger.info(""\n\n\tAtmosphere Framework Updates:\n\tMajor Update available (new features): {}"" nextMajorRelease); } try { in.close(); } catch ( IOException ex) { } urlConnection.disconnect(); } } JGoogleAnalyticsTracker tracker=new JGoogleAnalyticsTracker(ModuleDetection.detect() Version.getRawVersion() ""UA-31990725-1""); tracker.trackSynchronously(new FocusPoint(container new FocusPoint(""Atmosphere""))); } catch ( Throwable e) { } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,servletConfig,protected void  (final ServletConfig sc boolean wrap){ if (wrap) { String value=sc.getServletContext().getInitParameter(USE_SERVLET_CONTEXT_PARAMETERS); final boolean useServletContextParameters=value != null && Boolean.valueOf(value); servletConfig=new ServletConfig(){ AtomicBoolean done=new AtomicBoolean(); public String getServletName(){ return sc.getServletName(); } public ServletContext getServletContext(){ return sc.getServletContext(); } public String getInitParameter( String name){ String param=initParams.get(name); if (param == null) { param=sc.getInitParameter(name); if (param == null && useServletContextParameters) { param=sc.getServletContext().getInitParameter(name); } } return param; } public Enumeration<String> getInitParameterNames(){ if (!done.getAndSet(true)) { Enumeration en=sc.getInitParameterNames(); if (en != null) { while (en.hasMoreElements()) { String name=(String)en.nextElement(); if (!initParams.containsKey(name)) { initParams.put(name sc.getInitParameter(name)); } } } } return Collections.enumeration(initParams.keySet()); } } ; } else { servletConfig=sc; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,sessionFactory,"public synchronized AtmosphereResourceSessionFactory  (){ if (sessionFactory == null) { try { sessionFactory=newClassInstance(AtmosphereResourceSessionFactory.class DefaultAtmosphereResourceSessionFactory.class); } catch ( InstantiationException e) { logger.error("""" e); } catch ( IllegalAccessException e) { logger.error("""" e); } } return sessionFactory; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,sessionSupport,public void  (boolean sessionSupport){ if (!isSessionSupportSpecified) { config.setSupportSession(sessionSupport); } else if (!config.isSupportSession()) { config.setSupportSession(sessionSupport); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setAndConfigureAtmosphereResourceFactory,public void  (AtmosphereResourceFactory arFactory){ this.arFactory=arFactory; this.arFactory.configure(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setAsyncSupport,public AtmosphereFramework  (AsyncSupport asyncSupport){ this.asyncSupport=asyncSupport; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setAtmosphereDotXmlPath,public AtmosphereFramework  (String atmosphereDotXmlPath){ this.atmosphereDotXmlPath=atmosphereDotXmlPath; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setBroadcasterCacheClassName,public AtmosphereFramework  (String broadcasterCacheClassName){ this.broadcasterCacheClassName=broadcasterCacheClassName; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setBroadcasterFactory,public AtmosphereFramework  (final BroadcasterFactory broadcasterFactory){ this.broadcasterFactory=broadcasterFactory; configureBroadcaster(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setCometSupport,public AtmosphereFramework  (AsyncSupport asyncSupport){ return setAsyncSupport(asyncSupport); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setDefaultBroadcasterClassName,"public AtmosphereFramework  (String bccn){ if (isBroadcasterSpecified) { logger.trace(""Broadcaster {} already set in web.xml"" broadcasterClassName); return this; } isBroadcasterSpecified=true; broadcasterClassName=bccn; broadcasterFactory=null; configureBroadcasterFactory(); for ( AtmosphereHandlerWrapper w : atmosphereHandlers.values()) { if (w.broadcaster != null) { w.broadcaster=broadcasterFactory.lookup(w.broadcaster.getID() true); } } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setDefaultSerializerClassName,public AtmosphereFramework  (String defaultSerializerClassName){ this.defaultSerializerClassName=defaultSerializerClassName; initDefaultSerializer(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setHandlersPath,public AtmosphereFramework  (String handlersPath){ this.handlersPath=handlersPath; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setLibPath,public AtmosphereFramework  (String libPath){ this.libPath=libPath; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setUseBlockingImplementation,public AtmosphereFramework  (boolean useBlockingImplementation){ this.useBlockingImplementation=useBlockingImplementation; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setUseNativeImplementation,public AtmosphereFramework  (boolean useNativeImplementation){ this.useNativeImplementation=useNativeImplementation; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setUseServlet30,public void  (boolean useServlet30){ this.useServlet30=useServlet30; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setUseStreamForFlushingComments,public AtmosphereFramework  (boolean useStreamForFlushingComments){ this.useStreamForFlushingComments=useStreamForFlushingComments; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setWebSocketProtocolClassName,public AtmosphereFramework  (String webSocketProtocolClassName){ hasNewWebSocketProtocol=true; this.webSocketProtocolClassName=webSocketProtocolClassName; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,setWebsocketProcessorClassName,public AtmosphereFramework  (String webSocketProcessorClassName){ this.webSocketProcessorClassName=webSocketProcessorClassName; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,shareExecutorServices,public AtmosphereFramework  (boolean sharedThreadPools){ this.sharedThreadPools=sharedThreadPools; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,sharedThreadPools,public AtmosphereFramework  (boolean sharedThreadPools){ this.sharedThreadPools=sharedThreadPools; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,started,@Override public void  (AtmosphereFramework framework){ needRequestScopedInjection=Utils.requestScopedInjection(config atmosphereHandler); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,toString,"public String  (){ return ""DefaultAtmosphereObjectFactory""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,universe,protected void  (){ Universe.broadcasterFactory(broadcasterFactory); Universe.resourceFactory(arFactory); Universe.sessionResourceFactory(sessionFactory); Universe.framework(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,uuidProvider,public UUIDProvider  (){ return uuidProvider; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,webSocketEnabled,public AtmosphereFramework  (boolean webSocketEnabled){ this.webSocketEnabled=webSocketEnabled; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,webSocketFactory,public AtmosphereFramework  (WebSocketFactory webSocketFactory){ this.webSocketFactory=webSocketFactory; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereFramework.java,wildcardMapping,public boolean  (){ return wilcardMapping; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorAdapter.java,inspect,@Override public Action  (AtmosphereResource r){ AtmosphereResponse res=r.getResponse(); if (res.getAsyncIOWriter() == null) { res.asyncIOWriter(new AtmosphereInterceptorWriter()); } return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorAdapter.java,priority,@Override public PRIORITY  (){ return InvokationOrder.AFTER_DEFAULT; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorAdapter.java,toString,@Override public String  (){ return getClass().getName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,close,@Override public void  (AtmosphereResponse response) throws IOException { response.closeStreamOrWriter(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,filters,public LinkedList<AsyncIOInterceptor>  (){ return filters; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,flush,@Override public AsyncIOWriter  (AtmosphereResponse response) throws IOException { response.flushBuffer(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,interceptor,"public AtmosphereInterceptorWriter  (AsyncIOInterceptor filter int index){ if (!filters.contains(filter)) { if (logger.isTraceEnabled()) { logger.trace(""Adding AsyncIOInterceptor {} at index {}"" filter.getClass().getName() index); } filters.add(index filter); reversedFilters.add(reversedFilters.size() - index filter); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,invokeInterceptor,protected void  (AtmosphereResponse response byte[] data int offset int length) throws IOException { for ( AsyncIOInterceptor i : filters) { i.prePayload(response data offset length); } byte[] responseDraft=new byte[length]; System.arraycopy(data offset responseDraft 0 length); for ( AsyncIOInterceptor i : filters) { responseDraft=i.transformPayload(response responseDraft data); } writeReady(response responseDraft); for ( AsyncIOInterceptor i : reversedFilters) { i.postPayload(response data offset length); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,redirect,@Override public AsyncIOWriter  (AtmosphereResponse response String location) throws IOException { for ( AsyncIOInterceptor i : filters) { i.redirect(response location); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,write,@Override public AsyncIOWriter  (AtmosphereResponse response byte[] data int offset int length) throws IOException { invokeInterceptor(response data offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,writeError,@Override public AsyncIOWriter  (AtmosphereResponse response int errorCode String message) throws IOException { for ( AsyncIOInterceptor i : filters) { byte[] b=i.error(response errorCode message); writeReady(response b); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereInterceptorWriter.java,writeReady,protected void  (AtmosphereResponse response byte[] responseDraft) throws IOException { response.write(responseDraft); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequest.java,LocalAttributes,public  (){ this.localAttributes=new ConcurrentHashMap<>(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereMappingException.java,AtmosphereMappingException,public  (java.lang.Throwable throwable){ super(throwable); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,AtmosphereResourceEventImpl,public  (AtmosphereResourceImpl resource boolean isCancelled boolean isResumedOnTimeout boolean isClosedByClient Throwable throwable){ this.isCancelled.set(isCancelled); this.isResumedOnTimeout.set(isResumedOnTimeout); this.resource=resource; this.throwable=throwable; this.isClosedByClient.set(isClosedByClient); uuid=resource.uuid(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,broadcaster,@Override public Broadcaster  (){ return resource.getBroadcaster(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,check,private boolean  (){ return resource == null ? false : true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,destroy,public AtmosphereResourceEvent  (){ isCancelled.set(true); resource=null; message=null; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; AtmosphereResourceEventImpl that=(AtmosphereResourceEventImpl)o; if (isCancelled != null ? !isCancelled.equals(that.isCancelled) :
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,getMessage,@Override public Object  (){ return message; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,getResource,@Override public AtmosphereResource  (){ return resource; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,hashCode,@Override public int  (){ int result=isCancelled != null ? isCancelled.hashCode() : 0; result=31 * result + (isResumedOnTimeout != null ? isResumedOnTimeout.hashCode() : 0); result=31 * result + (throwable != null ? throwable.hashCode() : 0); result=31 * 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,isCancelled,@Override public boolean  (){ return isCancelled.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,isClosedByApplication,@Override public boolean  (){ return isClosedByApplication.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,isClosedByClient,public AtmosphereResourceEventImpl  (boolean isClosedByClient){ this.isClosedByClient.set(isClosedByClient); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,isResumedOnTimeout,@Override public boolean  (){ return isResumedOnTimeout.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,isResuming,@Override public boolean  (){ return resource == null ? true : resource.isResumed(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,isSuspended,@Override public boolean  (){ return resource == null ? false : resource.isSuspended(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,setCancelled,public AtmosphereResourceEventImpl  (boolean isCancelled){ if (check()) { resource.action().type(Action.TYPE.CANCELLED); this.isCancelled.set(isCancelled); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,setCloseByApplication,public AtmosphereResourceEventImpl  (boolean b){ isClosedByApplication.set(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,setIsResumedOnTimeout,protected AtmosphereResourceEventImpl  (boolean isResumedOnTimeout){ if (check()) { resource.action().type(Action.TYPE.TIMEOUT); this.isResumedOnTimeout.set(isResumedOnTimeout); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,setMessage,@Override public AtmosphereResourceEventImpl  (Object message){ this.message=message; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,setThrowable,public AtmosphereResourceEvent  (Throwable t){ this.throwable=t; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,throwable,@Override public Throwable  (){ return throwable; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceEventImpl.java,toString,"@Override public String  (){ return ""AtmosphereResourceEventImpl{"" + "" isCancelled="" + isCancelled + "" isClosedByClient=""+ isClosedByClient+ "" isClosedByApplication=""+ isClosedByApplication+ "" isResumedOnTimeout=""+ isResumedOnTimeout+ "" throwable=""+ throw"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,AtmosphereRequestImpl,"private  (Builder b){ super(b.request == null ? new NoOpsRequest() : b.request); if (b.request == null) b.request(new NoOpsRequest()); this.b=b; this.uuid=resource() != null ? resource().uuid() : ""0""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,Body,public  (String data byte[] dataBytes int offset int length){ this.data=data; this.dataBytes=dataBytes; this.offset=offset; this.length=length; isEmpty=data == null && dataBytes == null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,ByteInputStream,public  (byte[] data int offset int length){ this.bis=new ByteArrayInputStream(data offset length); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,CompletionAwareAsyncContext,public  (AsyncContext context CompletionAware callback){ this.context=context; this.callback=callback; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,IS,public  (InputStream innerStream){ super(); this.innerStream=innerStream; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,LazyComputation,public  (Callable<InetSocketAddress> callable){ this.callable=callable; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,NoOpsAsyncContext,public  (ServletRequest request ServletResponse response){ this.request=request; this.response=response; this.timeout=-1; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,NoOpsRequest,public  (boolean throwExceptionOnCloned){ this.throwExceptionOnCloned=throwExceptionOnCloned; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,address,"public InetSocketAddress  (){ if (address == null) { try { address=callable.call(); } catch ( Exception e) { logger.warn("""" e); } if (address == null) { address=new InetSocketAddress(8080); } } return address; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,asBytes,public byte[]  (){ return dataBytes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,asString,public String  (){ return data; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,attributeWithoutException,"private static Object  (HttpServletRequest request String attribute){ try { return request.getAttribute(attribute); } catch ( NullPointerException ex) { logger.trace(""Unexpected NPE"" ex); return """"; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,attributes,@Override public Builder  (Map<String Object> attributes){ localAttributes=new LocalAttributes(attributes); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,authType,@Override public Builder  (String authType){ this.authType=authType; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,authenticate,@Override public boolean  (HttpServletResponse response) throws IOException  ServletException { return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,available,public int  () throws java.io.IOException { return innerStream.available(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,body,@Override public Builder  (String data){ this.body=new Body(data null 0 0); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,build,@Override public AtmosphereRequest  (){ if (body == null) { body=NULL_BODY; } return new AtmosphereRequestImpl(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,byteLength,public int  (){ return length; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,byteOffset,public int  (){ return offset; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,changeSessionId,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,cloneRequest,"public final static AtmosphereRequest  (HttpServletRequest request boolean loadInMemory boolean copySession boolean isDestroyable boolean createSession){ Builder b; HttpServletRequest r; Cookie[] cs=request.getCookies(); Set<Cookie> hs=Collections.synchronizedSet(new HashSet()); if (cs != null) { for ( Cookie c : cs) { hs.add(c); } } boolean isWrapped=false; if (AtmosphereRequestImpl.class.isAssignableFrom(request.getClass())) { b=AtmosphereRequestImpl.class.cast(request).b; isWrapped=true; } else { b=new Builder(); b.request(request); } HttpSession session=request.getSession(false); if (copySession) { session=request.getSession(createSession); if (session != null) { session=new FakeHttpSession(session); } else { session=new FakeHttpSession("""" null System.currentTimeMillis() -1); } } b.servletPath(request.getServletPath()).pathInfo(request.getPathInfo()).contextPath(request.getContextPath()).requestURI(request.getRequestURI()).requestURL(request.getRequestURL().toString()).method(request.getMethod()).serverName(request.getServerName()).serverPort(request.getServerPort()).remoteAddr(request.getRemoteAddr()).remoteHost(request.getRemoteHost()).remotePort(request.getRemotePort()).destroyable(isDestroyable).cookies(hs).session(session).principal(request.getUserPrincipal()).authType(request.getAuthType()).isSSecure(request.isSecure()); if (loadInMemory) { String s=(String)attributeWithoutException(request FrameworkConfig.THROW_EXCEPTION_ON_CLONED_REQUEST); boolean throwException=s != null && Boolean.parseBoolean(s); r=new NoOpsRequest(throwException); if (isWrapped) { load(b.request b); } else { load(request b); } b.request(r); } return isWrapped ? AtmosphereRequestImpl.class.cast(request) : b.build(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,close,public void  () throws java.io.IOException { innerStream.close(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,configureReader,private BufferedReader  (){ if (br == null && !readerSet.getAndSet(false)) { if (b.reader != null) { br=new BufferedReader(b.reader); } else if (b.inputStream == null) { try { if (b.body.dataBytes != null) { br=new BufferedReader(new StringReader(new String(b.body.dataBytes b.body.offset b.body.length b.encoding))); } else if (b.body.data != null) { br=new BufferedReader(new StringReader(b.body.data)); } } catch ( UnsupportedEncodingException e) { throw new RuntimeException(e); } } else { br=new BufferedReader(new InputStreamReader(b.inputStream)); } } return br; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,configureStream,"private ServletInputStream  (){ if (bis == null && !streamSet.getAndSet(true)) { if (b.inputStream != null) { bis=new IS(b.inputStream); } else if (b.reader == null) { if (b.body.dataBytes != null) { bis=new ByteInputStream(b.body.dataBytes b.body.offset b.body.length); } else if (b.body.data != null) { try { byte[] bytes=b.body.data.getBytes(""UTF-8""); bis=new ByteInputStream(bytes 0 bytes.length); } catch ( UnsupportedEncodingException e) { logger.trace("""" e); } } } else { bis=new IS(new ReaderInputStream(b.reader)); } } return bis; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,contentLength,@Override public Builder  (Long contentLength){ this.contentLength=contentLength; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,contentType,@Override public Builder  (String contentType){ this.contentType=contentType; if (contentType == null) { noContentType=true; } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,contextPath,"@Override public Builder  (String contextPath){ this.contextPath=contextPath == null ? """" : contextPath; return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,cookies,@Override public Builder  (Set<Cookie> cookies){ this.cookies=cookies; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,createListener,"@Override public <T extends AsyncListener>T  (Class<T> clazz) throws ServletException { throw new ServletException(""Not supported""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,destroy,@Override public void  (boolean force){ if (!force) return; b.localAttributes.clear(); if (bis != null) { try { bis.close(); } catch ( IOException e) { } } if (br != null) { try { br.close(); } catch ( IOException e) { } } b.headers.clear(); b.queryString
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,destroyable,@Override public Builder  (boolean destroyable){ this.destroyable=destroyable; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,destroyed,@Override public boolean  (){ return destroyed.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,dispatchRequestAsynchronously,@Override public Builder  (boolean dispatchRequestAsynchronously){ this.dispatchRequestAsynchronously=dispatchRequestAsynchronously; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,encoding,@Override public Builder  (String encoding){ this.encoding=encoding; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getAsyncContext,@Override public AsyncContext  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getAttribute,@Override public Object  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getAttributeNames,@Override public Enumeration<String>  (){ return EMPTY_ENUM_STRING; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getAuthType,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getCharacterEncoding,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getContentLength,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getContentLengthLong,@Override public long  (){ return 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getContentType,"@Override public String  (){ return ""text/plain""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getContextPath,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getCookies,@Override public Cookie[]  (){ return EMPTY_COOKIE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getDateHeader,@Override public long  (String name){ return 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getDispatcherType,@Override public DispatcherType  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getHeader,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getHeaderNames,@Override public Enumeration<String>  (){ return EMPTY_ENUM_STRING; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getHeaders,@Override public Enumeration<String>  (String name){ return EMPTY_ENUM_STRING; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getHostAddress,public String  (){ return address().getAddress().getHostAddress(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getHostName,public String  (){ return address().getHostName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getInputStream,@Override public ServletInputStream  () throws IOException { return voidStream; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getIntHeader,@Override public int  (String name){ return 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getLocalAddr,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getLocalName,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getLocalPort,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getLocale,@Override public Locale  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getLocales,@Override public Enumeration<Locale>  (){ return EMPTY_ENUM_LOCALE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getMethod,"@Override public String  (){ return ""GET""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getParameter,"@Override public String  (String name){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getParameterMap,@Override public Map<String String[]>  (){ return EMPTY_MAP_STRING; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getParameterNames,@Override public Enumeration<String>  (){ return EMPTY_ENUM_STRING; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getParameterValues,@Override public String[]  (String name){ return EMPTY_ARRAY; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getPart,@Override public Part  (String name) throws IOException  ServletException { return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getParts,@Override public Collection<Part>  () throws IOException  ServletException { return EMPTY_ENUM_PART; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getPathInfo,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getPathTranslated,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getPort,public int  (){ return address().getPort(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getProtocol,"@Override public String  (){ return ""HTTP/1.1""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getQueryString,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getReader,@Override public BufferedReader  () throws IOException { return getVoidReader(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRealPath,@Override public String  (String path){ return path; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRemoteAddr,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRemoteHost,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRemotePort,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRemoteUser,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRequest,@Override public ServletRequest  (){ return request; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRequestDispatcher,@Override public RequestDispatcher  (String path){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRequestURI,"@Override public String  (){ return ""/""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRequestURL,@Override public StringBuffer  (){ return EMPTY_STRING_BUFFER; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getRequestedSessionId,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getResponse,@Override public ServletResponse  (){ return response; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getScheme,"@Override public String  (){ return ""ws""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getServerName,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getServerPort,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getServletContext,@Override public ServletContext  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getServletPath,"@Override public String  (){ return """"; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getSession,"@Override public HttpSession  (boolean create){ if (create && fake == null) { fake=new FakeHttpSession("""" null System.currentTimeMillis() -1){ @Override public void invalidate(){ fake=null; super.invalidate(); } } ; } return fake; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getTimeout,@Override public long  (){ return timeout; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getUserPrincipal,@Override public Principal  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,getVoidReader,"private BufferedReader  (){ if (voidReader == null) { voidReader=new BufferedReader(new StringReader("""")); } return voidReader; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,hasBytes,public boolean  (){ return dataBytes != null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,hasOriginalRequestAndResponse,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,hasString,public boolean  (){ return data != null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,header,@Override public AtmosphereRequest  (String name String value){ b.headers.put(name value); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,headers,@Override public Builder  (Map<String String> headers){ this.headers=Collections.synchronizedMap(headers); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,headersMap,@Override public Map<String String>  (){ return b.headers; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,inputStream,@Override public Builder  (InputStream inputStream){ this.inputStream=inputStream; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,invalidate,@Override public void  (){ fake=null; super.invalidate(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isAsyncStarted,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isAsyncSupported,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isCompletionAware,private boolean  (){ return Boolean.parseBoolean(resource().getAtmosphereConfig().getInitParameter(ApplicationConfig.RESPONSE_COMPLETION_AWARE)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isDestroyable,@Override public boolean  (){ return b.destroyable; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isEmpty,public boolean  (){ return isEmpty; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isFinished,@Override public boolean  (){ try { return innerStream.available() == 0; } catch ( IOException e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isNotNoOps,private boolean  (){ return !NoOpsRequest.class.isAssignableFrom(b.request.getClass()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isReady,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isRequestedSessionIdFromCookie,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isRequestedSessionIdFromURL,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isRequestedSessionIdFromUrl,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isRequestedSessionIdValid,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isSSecure,@Override public Builder  (boolean isSecure){ this.isSecure=isSecure; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isSecure,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,isUserInRole,@Override public boolean  (String role){ if (this.throwExceptionOnCloned == true) { throw new UnsupportedOperationException(); } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,load,private static void  (HttpServletRequest request Builder b){ Enumeration<String> e=request.getHeaderNames(); String s; while (e.hasMoreElements()) { s=e.nextElement(); b.headers.put(s request.getHeader(s)); } synchronized (b.request) { e=request.getAttributeNames(); } while (e.hasMoreElements()) { s=e.nextElement(); b.localAttributes.put(s attributeWithoutException(request s)); } e=request.getParameterNames(); while (e.hasMoreElements()) { s=e.nextElement(); b.queryStrings.put(s request.getParameterValues(s)); } b.queryString=request.getQueryString(); Enumeration<Locale> l=request.getLocales(); while (l.hasMoreElements()) { b.locale(l.nextElement()); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,localAddr,@Override public Builder  (String localAddr){ this.localAddr=localAddr; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,localAttributes,@Override public LocalAttributes  (){ return b.localAttributes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,localInetSocketAddress,@Override public Builder  (Callable localAddr){ this.lazyLocal=new LazyComputation(localAddr); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,localName,@Override public Builder  (String localName){ this.localName=localName; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,localPort,@Override public Builder  (int localPort){ this.localPort=localPort; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,locale,@Override public Builder  (Locale locale){ locales.add(locale); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,login,@Override public void  (String username String password) throws ServletException { if (this.throwExceptionOnCloned == true) { throw new ServletException(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,logout,@Override public void  () throws ServletException { if (this.throwExceptionOnCloned == true) { throw new ServletException(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,mark,public synchronized void  (int i){ innerStream.mark(i); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,markSupported,public boolean  (){ return innerStream.markSupported(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,method,@Override public Builder  (String methodType){ this.methodType=methodType; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,newInstance,public final static AtmosphereRequest  (){ return new Builder().build(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,pathInfo,@Override public Builder  (String pathInfo){ this.pathInfo=pathInfo; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,principal,@Override public Builder  (Principal principal){ this.principal=principal; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,queryString,@Override public Builder  (String queryString){ this.queryString=queryString; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,queryStrings,@Override public Builder  (Map<String String[]> queryStrings){ this.queryStrings=Collections.synchronizedMap(queryStrings); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,queryStringsMap,@Override public Map<String String[]>  (){ return b.queryStrings; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,read,public int  (byte[] bytes int i int i1) throws java.io.IOException { return innerStream.read(bytes i i1); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,reader,@Override public Builder  (Reader reader){ this.reader=reader; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,remoteAddr,@Override public Builder  (String remoteAddr){ this.remoteAddr=remoteAddr; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,remoteHost,@Override public Builder  (String remoteHost){ this.remoteHost=remoteHost; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,remoteInetSocketAddress,@Override public Builder  (Callable remoteAddr){ this.lazyRemote=new LazyComputation(remoteAddr); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,remotePort,@Override public Builder  (int remotePort){ this.remotePort=remotePort; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,request,@Override public Builder  (HttpServletRequest request){ this.request=request; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,requestURI,@Override public Builder  (String requestURI){ this.requestURI=requestURI; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,requestURL,@Override public String  (){ return b.requestURL; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,reset,public synchronized void  () throws java.io.IOException { innerStream.reset(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,resource,@Override public AtmosphereResource  (){ return (AtmosphereResource)getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,serverName,@Override public Builder  (String serverName){ this.serverName=serverName; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,serverPort,@Override public Builder  (int serverPort){ this.serverPort=serverPort; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,servletPath,@Override public Builder  (String servletPath){ this.servletPath=servletPath; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,session,@Override public Builder  (HttpSession session){ if (request == null) { request=new NoOpsRequest(); } if (NoOpsRequest.class.isAssignableFrom(request.getClass())) { NoOpsRequest.class.cast(request).fake=session; } else { webSocketFakeSession=session; } re
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,setRequest,@Override public void  (ServletRequest request){ super.setRequest(request); if (HttpServletRequest.class.isAssignableFrom(request.getClass())) { b.request=HttpServletRequest.class.cast(request); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,setTimeout,@Override public void  (long timeout) throws IllegalStateException { this.timeout=timeout; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,skip,public long  (long l) throws java.io.IOException { return innerStream.skip(l); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,start,"@Override public void  (Runnable run){ throw new RuntimeException(""Not supported""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,startAsync,@Override public AsyncContext  (ServletRequest request ServletResponse response){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,toQs,"private String  (){ StringBuilder q=new StringBuilder(); for ( Map.Entry<String String[]> e : b.queryStrings.entrySet()) { for ( String k : e.getValue()) { q.append(e.getKey()).append(""="").append(k).append(""&""); } } if (q.length() > 0) q.deleteCharAt(q.length() - 1); return q.toString(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,toString,"@Override public String  (){ try { return ""AtmosphereRequest{"" + "" method="" + getMethod() + "" contextPath=""+ getContextPath()+ "" servletPath=""+ getServletPath()+ "" pathInfo=""+ getPathInfo()+ "" requestURI=""+ getRequestURI()+ "" requestURL=""+ getRequestURL()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,upgrade,@Override public <T extends HttpUpgradeHandler>T  (Class<T> aClass) throws IOException  ServletException { return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,userPrincipal,@Override public Builder  (Principal userPrincipal){ this.principal=userPrincipal; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,uuid,"@Override public String  (){ if (uuid == ""0"") { this.uuid=resource() != null ? resource().uuid() : ""0""; } return uuid; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,wrap,public final static AtmosphereRequest  (HttpServletRequest request){ if (AtmosphereRequestImpl.class.isAssignableFrom(request.getClass())) { return AtmosphereRequestImpl.class.cast(request); } Builder b=new Builder(); Enumeration<String> e=request.getAttributeNames(); String s; while (e.hasMoreElements()) { s=e.nextElement(); b.localAttributes.put(s attributeWithoutException(request s)); } return b.request(request).build(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereRequestImpl.java,wrappedRequest,@Override public HttpServletRequest  (){ return b.request; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceListenerAdapter.java,onDisconnect,"@Override public void  (String uuid){ logger.trace(""Disconnected {}"" uuid); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceListenerAdapter.java,onSuspended,"@Override public void  (String uuid){ logger.trace(""Suspended {}"" uuid); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,AtmosphereResourceImpl,@Deprecated public  (AtmosphereConfig config Broadcaster broadcaster AtmosphereRequest req AtmosphereResponse response AsyncSupport asyncSupport AtmosphereHandler atmosphereHandler){ initialize(config broadcaster req response asyncSupport atmosphereHandle
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,_destroy,"public void  (){ try { if (!isCancelled.get()) { removeFromAllBroadcasters(); } broadcasters.clear(); unregister(); removeEventListeners(); } catch ( Throwable t) { logger.trace(""destroyResource"" t); } finally { unregister(); webSocket=null; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,action,public Action  (){ return action; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,addBroadcaster,@Override public AtmosphereResource  (Broadcaster broadcaster){ return uniqueBroadcaster(broadcaster); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,addEventListener,@Override public AtmosphereResource  (AtmosphereResourceEventListener e){ if (listeners.contains(e)) return this; listeners.add(e); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,atmosphereHandler,public AtmosphereResourceImpl  (AtmosphereHandler atmosphereHandler){ this.atmosphereHandler=atmosphereHandler; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,atmosphereResourceEventListener,public ConcurrentLinkedQueue<AtmosphereResourceEventListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,broadcasters,@Override public List<Broadcaster>  (){ return Collections.unmodifiableList(broadcasters); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,cancel,"public void  () throws IOException { try { if (!isCancelled.getAndSet(true)) { suspended.set(false); logger.trace(""Cancelling {}"" uuid); if (config.getBroadcasterFactory() != null) { removeFromAllBroadcasters(); if (transport.equals(TRANSPORT.WEBSOCKET)) { String parentUUID=(String)req.getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID); AtmosphereResource p=config.resourcesFactory().find(parentUUID); if (p != null) { p.removeFromAllBroadcasters(); } } } asyncSupport.complete(this); SessionTimeoutSupport.restoreTimeout(req); action.type(Action.TYPE.CANCELLED); if (asyncSupport != null) asyncSupport.action(this); if (AtmosphereResponseImpl.class.isAssignableFrom(response.getClass())) { if (closeOnCancel) { AtmosphereResponseImpl.class.cast(response).close(); } AtmosphereResponseImpl.class.cast(response).destroy(); } if (AtmosphereRequestImpl.class.isAssignableFrom(req.getClass())) { if (closeOnCancel) { AtmosphereRequestImpl.class.cast(req).destroy(); } } event.destroy(); } } finally { unregister(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,cloneState,public AtmosphereResourceImpl  (AtmosphereResource r){ for ( AtmosphereResourceEventListener l : AtmosphereResourceImpl.class.cast(r).atmosphereResourceEventListener()) { addEventListener(l); } AtmosphereResourceImpl.class.cast(r).session(r.session()); boolean isFirst=true; for ( Broadcaster b : broadcasters) { if (isFirst) { isFirst=false; setBroadcaster(b); } else { addBroadcaster(b); } } atmosphereHandler(r.getAtmosphereHandler()); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,close,@Override public void  () throws IOException { event.setCloseByApplication(true); notifyListeners(); cancel(); if (webSocket != null && webSocket.isOpen()) { webSocket.close(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,configureTransport,"private TRANSPORT  (){ if (req == null) return UNDEFINED; String s=req.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT); if (s == null) return UNDEFINED; if (s.equals(UNDEFINED.name()) && Utils.rawWebSocket(req)) { return TRANSPORT.WEBSOCKET; } s=s.replace(""-"" ""_"").toUpperCase(); if (TRANSPORT.POLLING.name().equals(s)) { return TRANSPORT.POLLING; } else if (TRANSPORT.LONG_POLLING.name().equals(s)) { return TRANSPORT.LONG_POLLING; } else if (TRANSPORT.STREAMING.name().equals(s)) { return TRANSPORT.STREAMING; } else if (TRANSPORT.JSONP.name().equals(s)) { return TRANSPORT.JSONP; } else if (TRANSPORT.WEBSOCKET.name().equals(s)) { return TRANSPORT.WEBSOCKET; } else if (TRANSPORT.SSE.name().equals(s)) { return TRANSPORT.SSE; } else if (TRANSPORT.AJAX.name().equals(s)) { return TRANSPORT.AJAX; } else if (TRANSPORT.CLOSE.name().equals(s)) { return TRANSPORT.CLOSE; } else { return UNDEFINED; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,dirtyClose,"public void  (){ try { event.setCancelled(true); notifyListeners(); cancel(); if (webSocket != null) { webSocket.close(); } } catch ( IOException ex) { logger.trace("""" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,disableSuspend,public AtmosphereResourceImpl  (boolean disableSuspend){ this.disableSuspend=disableSuspend; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,disableSuspendEvent,public boolean  (){ return disableSuspendEvent; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; AtmosphereResourceImpl that=(AtmosphereResourceImpl)o; if (uuid != null ? !uuid.equals(that.uuid) : that.uuid != null) return fals
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,forceBinaryWrite,@Override public boolean  (){ return forceBinaryWrite; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getAndSetInClosingPhase,public boolean  (){ return inClosingPhase.getAndSet(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getAndSetPendingClose,public boolean  (){ return isPendingClose.getAndSet(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getAtmosphereConfig,@Override public AtmosphereConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getAtmosphereHandler,@Override public AtmosphereHandler  (){ return atmosphereHandler; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getAtmosphereResourceEvent,@Override public AtmosphereResourceEventImpl  (){ return event; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getBroadcaster,"protected Broadcaster  (boolean autoCreate){ if (broadcaster == null) { throw new IllegalStateException(""No Broadcaster associated with this AtmosphereResource.""); } String s=config.getInitParameter(ApplicationConfig.RECOVER_DEAD_BROADCASTER); if (s != null) { autoCreate=Boolean.parseBoolean(s); } if (autoCreate && broadcaster.isDestroyed() && config.getBroadcasterFactory() != null) { logger.debug(""Broadcaster {} has been destroyed and cannot be re-used. Recreating a new one with the same name. You can turn off this"" + "" mechanism by adding  in web.xml  {} set to false"" broadcaster.getID() ApplicationConfig.RECOVER_DEAD_BROADCASTER); Broadcaster.SCOPE scope=broadcaster.getScope(); synchronized (this) { String id=scope != Broadcaster.SCOPE.REQUEST ? broadcaster.getID() : broadcaster.getID() + "".recovered"" + config.uuidProvider().generateUuid(); broadcaster=config.getBroadcasterFactory().lookup(id true); broadcaster.setScope(scope); broadcaster.addAtmosphereResource(this); } } return broadcaster; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getRequest,@Override public AtmosphereRequest  (){ return getRequest(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getResponse,@Override public AtmosphereResponse  (){ return getResponse(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,getSerializer,@Override public Serializer  (){ return serializer; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,hashCode,@Override public int  (){ return uuid != null ? uuid.hashCode() : 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,initialize,@Override public AtmosphereResource  (AtmosphereConfig config Broadcaster broadcaster AtmosphereRequest req AtmosphereResponse response AsyncSupport asyncSupport AtmosphereHandler atmosphereHandler){ this.req=req; this.response=response; this.config=confi
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,isCancelled,@Override public boolean  (){ return isCancelled.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,isInScope,public boolean  (){ return isInScope.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,isPendingClose,public boolean  (){ return isPendingClose.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,isResumed,@Override public boolean  (){ return isResumed.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,isSuspended,@Override public boolean  (){ return suspended.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,listeners,public ConcurrentLinkedQueue<AtmosphereResourceEventListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,notifyListeners,"@Override public AtmosphereResource  (AtmosphereResourceEvent event){ if (listeners.isEmpty() && config.framework().atmosphereResourceListeners().isEmpty()) { logger.trace(""No listener with {}"" uuid); return this; } logger.trace(""Invoking listener {} for "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,onBroadcast,void  (AtmosphereResourceEvent e){ for ( AtmosphereResourceEventListener r : listeners) { r.onBroadcast(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,onClose,void  (AtmosphereResourceEvent e){ for ( AtmosphereResourceEventListener r : listeners) { r.onClose(e); if (transport.equals(TRANSPORT.WEBSOCKET) && WebSocketEventListener.class.isAssignableFrom(r.getClass())) { WebSocketEventListener.class.cast(r).onClose(new WebSocketEventListener.WebSocketEvent(1005 CLOSE webSocket)); } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,onDisconnect,void  (AtmosphereResourceEvent e){ for ( AtmosphereResourceEventListener r : listeners) { r.onDisconnect(e); if (transport.equals(TRANSPORT.WEBSOCKET) && WebSocketEventListener.class.isAssignableFrom(r.getClass())) { WebSocketEventListener.class.cast(r).onDisconnect(new WebSocketEventListener.WebSocketEvent(1005 CLOSE webSocket)); } } if (e.getResource() != null) { config.framework().notifyDestroyed(e.getResource().uuid()); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,onHeartbeat,void  (AtmosphereResourceEvent e){ for ( AtmosphereResourceEventListener r : listeners) { r.onHeartbeat(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,onPreSuspend,void  (AtmosphereResourceEvent e){ for ( AtmosphereResourceEventListener r : listeners) { if (disableSuspendEvent) { if (!AllowInterceptor.class.isAssignableFrom(r.getClass())) { continue; } } r.onPreSuspend(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,onResume,void  (AtmosphereResourceEvent e){ for ( AtmosphereResourceEventListener r : listeners) { r.onResume(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,onSuspend,void  (AtmosphereResourceEvent e){ for ( AtmosphereResourceEventListener r : listeners) { if (disableSuspendEvent) { if (!AllowInterceptor.class.isAssignableFrom(r.getClass())) { continue; } } r.onSuspend(e); } if (e.getResource() != null) { config.framework().notifySuspended(e.getResource().uuid()); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,onThrowable,void  (AtmosphereResourceEvent e){ for ( AtmosphereResourceEventListener r : listeners) { r.onThrowable(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,register,protected void  (){ if (!Utils.pollableTransport(transport()) && !Utils.webSocketMessage(this)) { config.resourcesFactory().registerUuidForFindCandidate(this); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,removeBroadcaster,@Override public AtmosphereResource  (Broadcaster broadcaster){ broadcasters.remove(broadcaster); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,removeEventListener,@Override public AtmosphereResource  (AtmosphereResourceEventListener e){ listeners.remove(e); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,removeEventListeners,@Override public AtmosphereResource  (){ listeners.clear(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,removeFromAllBroadcasters,"@Override public AtmosphereResource  (){ for ( Broadcaster b : broadcasters) { try { b.removeAtmosphereResource(this); } catch ( Exception ex) { logger.trace("""" ex); } } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,reset,public void  (){ isResumed.set(false); isCancelled.set(false); isPendingClose.set(false); isInScope.set(true); isSuspendEvent.set(false); listeners.clear(); action.type(Action.TYPE.CREATED); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,resume,"@Override public AtmosphereResource  (){ if (!isSuspended()) { logger.trace(""AtmosphereResource {} not suspended {}  cannot resume it."" uuid() action); return this; } try { if (!isResumed.getAndSet(true) && isInScope.get()) { suspended.set(false); logger."
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,resumeOnBroadcast,@Override public boolean  (){ boolean rob=resumeOnBroadcast.get(); if (!rob) { try { Boolean b=(Boolean)req.getAttribute(ApplicationConfig.RESUME_ON_BROADCAST); return b == null ? false : b; } catch ( ClassCastException ex) { return false; } } return rob;
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,session,public AtmosphereResourceImpl  (HttpSession session){ this.session=session; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,setBroadcaster,@Override public AtmosphereResource  (Broadcaster broadcaster){ this.broadcaster=broadcaster; return uniqueBroadcaster(broadcaster); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,setIsInScope,public void  (boolean isInScope){ this.isInScope.set(isInScope); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,setSerializer,@Override public AtmosphereResource  (Serializer s){ serializer=s; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,suspend,@Override public AtmosphereResource  (long timeout){ if (event.isSuspended() || disableSuspend) return this; if (config.isSupportSession() && req.getSession(false) != null && req.getSession().getMaxInactiveInterval() >= 0 && req.getSession().getMaxInactiv
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,toString,"@Override public String  (){ try { return ""AtmosphereResource{"" + ""\n\t uuid="" + uuid + "" \n\t transport=""+ transport()+ "" \n\t isInScope=""+ isInScope+ "" \n\t isResumed=""+ isResumed()+ "" \n\t isCancelled=""+ isCancelled()+ "" \n\t isSuspended=""+ isSuspended"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,transport,public AtmosphereResourceImpl  (TRANSPORT transport){ this.transport=transport; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,uniqueBroadcaster,"protected AtmosphereResource  (Broadcaster newB){ if (newB == null) { return this; } for ( Broadcaster b : broadcasters) { if (b.getID() != null && b.getID().equalsIgnoreCase(newB.getID())) { logger.trace(""Duplicate Broadcaster {}"" newB); return this; } } broadcasters.add(newB); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,unregister,private void  (){ config.resourcesFactory().remove(uuid); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,uuid,@Override public String  (){ return uuid; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,webSocket,public AtmosphereResourceImpl  (WebSocket webSocket){ this.webSocket=webSocket; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,write,@Override public AtmosphereResource  (byte[] o){ response.write(o); if (resumeOnBroadcast()) { resume(); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResourceImpl.java,writeOnTimeout,@Override public Object  (){ return writeOnTimeout; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,AtmosphereSession,public  (AtmosphereResource resource){ this(resource resource.getAtmosphereConfig().getBroadcasterFactory().lookupAll().toArray(new Broadcaster[]{})); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,acquire,public AtmosphereResource  (){ enterLock(); try { return resource; } finally { releaseLock(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,awaitNanosForResourceToBePresent,private boolean  (long nanos boolean signalBeforeWaiting) throws InterruptedException { if (signalBeforeWaiting) { signalWaiter(); } do { if (nanos < 0L) { return false; } nanos=resourcePresent.awaitNanos(nanos); } while (resource == null); return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,close,public void  (){ for ( Broadcaster br : relatedBroadcasters) { br.removeBroadcasterListener(broadcasterListener); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,enterLock,private void  (){ lock.lock(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,enterLockWhenResourcePresent,private boolean  (int timeInSecond) throws InterruptedException { long timeoutNanos=TimeUnit.SECONDS.toNanos(timeInSecond); final boolean reentrant=lock.isHeldByCurrentThread(); if (!lock.tryLock()) { final long deadline=System.nanoTime() + timeoutNanos; if (!lock.tryLock(timeInSecond TimeUnit.SECONDS)) { return false; } timeoutNanos=deadline - System.nanoTime(); } boolean satisfied=false; boolean threw=true; try { satisfied=(resource != null) || awaitNanosForResourceToBePresent(timeoutNanos reentrant); threw=false; return satisfied; } finally { if (!satisfied) { try { if (threw && !reentrant) { signalWaiter(); } } finally { lock.unlock(); } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,onAddAtmosphereResource,"@Override public void  (Broadcaster b AtmosphereResource r){ if (r.uuid().equalsIgnoreCase(uuid)) { logger.trace(""AtmosphereSession tracking : AtmosphereResource {} added"" uuid); setResource(r); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,onRemoveAtmosphereResource,"@Override public void  (Broadcaster b AtmosphereResource r){ if (r.uuid().equalsIgnoreCase(uuid)) { logger.trace(""AtmosphereSession tracking : AtmosphereResource {} removed"" uuid); setResource(null); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,releaseLock,private void  (){ try { if (lock.getHoldCount() == 1) { signalWaiter(); } } finally { lock.unlock(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,setResource,private void  (final AtmosphereResource res){ enterLock(); try { resource=res; } finally { releaseLock(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,signalWaiter,private void  (){ if (resource != null) { resourcePresent.signal(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,tryAcquire,"public AtmosphereResource  (int timeInSecond) throws InterruptedException { if (!enterLockWhenResourcePresent(timeInSecond)) { throw new IllegalStateException(""There is no resource for session "" + uuid); } try { return resource; } finally { releaseLock(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereSession.java,uuid,public String  (){ return uuid; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,AtmosphereServlet,public  (boolean isFilter boolean autoDetectHandlers){ initializer=new AtmosphereFrameworkInitializer(isFilter autoDetectHandlers); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,configureFramework,protected AtmosphereServlet  (ServletConfig sc boolean init) throws ServletException { initializer.configureFramework(sc init false AtmosphereFramework.class); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,destroy,@Override public void  (){ initializer.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,doDelete,@Override public void  (HttpServletRequest req HttpServletResponse res) throws IOException  ServletException { doPost(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,doGet,@Override public void  (HttpServletRequest req HttpServletResponse res) throws IOException  ServletException { doPost(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,doHead,@Override public void  (HttpServletRequest req HttpServletResponse res) throws IOException  ServletException { doPost(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,doOptions,@Override public void  (HttpServletRequest req HttpServletResponse res) throws IOException  ServletException { doPost(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,doPost,@Override public void  (HttpServletRequest req HttpServletResponse res) throws IOException  ServletException { framework().doCometSupport(AtmosphereRequestImpl.wrap(req) AtmosphereResponseImpl.wrap(res)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,doPut,@Override public void  (HttpServletRequest req HttpServletResponse res) throws IOException  ServletException { doPost(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,doTrace,@Override public void  (HttpServletRequest req HttpServletResponse res) throws IOException  ServletException { doPost(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,framework,public AtmosphereFramework  (){ return initializer.framework(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,init,@Override public void  (final ServletConfig sc) throws ServletException { configureFramework(sc); super.init(sc); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereServlet.java,newAtmosphereFramework,protected AtmosphereFramework  (){ return initializer.newAtmosphereFramework(AtmosphereFramework.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,AtmosphereResponseImpl,private  (Builder b){ super(b.atmosphereResponse); response=b.atmosphereResponse; this.asyncIOWriter=b.asyncIOWriter; this.atmosphereRequest=b.atmosphereRequest; this.status=b.status; this.statusMessage=b.statusMessage; this.writeStatusAndHeader.set(b.writeStatusAndHeader.get()); this.headers=b.headers; this.delegateToNativeResponse=asyncIOWriter == null; this.destroyable=b.destroyable; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,Stream, (boolean buffering){ this.buffering=buffering; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,Writer,public  (OutputStream out){ super(out); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,_r,private HttpServletResponse  (){ return HttpServletResponse.class.cast(response); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,addCookie,@Override public void  (Cookie cookie){ if (delegateToNativeResponse) { _r().addCookie(cookie); } else { cookies.add(cookie); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,addDateHeader,@Override public void  (String name long date){ if (!delegateToNativeResponse) { headers.put(name String.valueOf(date)); } else { _r().setDateHeader(name date); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,addHeader,"@Override public void  (String name String value){ if (value == null) value=""""; headers.put(name value); if (delegateToNativeResponse) { _r().addHeader(name value); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,addIntHeader,@Override public void  (String name int value){ setHeader(name String.valueOf(value)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,asyncIOWriter,@Override public AtmosphereResponse  (AsyncIOWriter asyncIOWriter){ this.asyncIOWriter=asyncIOWriter; forceAsyncIOWriter=true; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,build,@Override public AtmosphereResponse  (){ return new AtmosphereResponseImpl(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,close,@Override public void  (){ if (!validFlushOrClose() || asyncIOWriter instanceof KeepOpenStreamAware) return; boolean b=forceAsyncIOWriter; forceAsyncIOWriter=false; try { asyncIOWriter.close(AtmosphereResponseImpl.this); } catch ( IOException e) { handleE
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,closeStreamOrWriter,"@Override public void  (){ if (resource() != null) { try { if (isUsingStream()) { getOutputStream().close(); } else { getWriter().close(); } } catch ( Exception e) { logger.trace(""Unexpected exception"" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,completed,@Override public boolean  (){ return completed; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,constructStatusAndHeaders,"private String  (){ StringBuilder b=new StringBuilder(""HTTP/1.1"").append("" "").append(status).append("" "").append(statusMessage).append(""\r\n""); String contentTypeHeader=headers.get(""Content-Type""); b.append(""Content-Type:"").append(contentTypeHeader == null ? contentType : contentTypeHeader).append(""\r\n""); if (contentLength != -1) { b.append(""Content-Length:"").append(contentLength).append(""\r\n""); } for ( String s : headers().keySet()) { if (!s.equalsIgnoreCase(""Content-Type"")) { b.append(s).append("":"").append(headers.get(s)).append(""\r\n""); } } b.deleteCharAt(b.length() - 2); b.append(""\r\n\r\n""); return b.toString(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,containsHeader,@Override public boolean  (String name){ return !delegateToNativeResponse ? (headers.get(name) == null ? false : true) : _r().containsHeader(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,delegateToNativeResponse,@Override public AtmosphereResponse  (boolean delegateToNativeResponse){ this.delegateToNativeResponse=delegateToNativeResponse; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,destroy,"@Override public void  (boolean force){ if (!force) return; logger.trace(""{} destroyed"" uuid); cookies.clear(); headers.clear(); atmosphereRequest=null; asyncIOWriter=null; destroyed.set(true); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,destroyable,@Override public AtmosphereResponse  (boolean destroyable){ this.destroyable=destroyable; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,destroyed,@Override public boolean  (){ return destroyed.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,encodeRedirectURL,@Override public String  (String url){ return response.encodeRedirectURL(url); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,encodeRedirectUrl,@Override public String  (String url){ return response.encodeRedirectURL(url); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,encodeURL,@Override public String  (String url){ return response.encodeURL(url); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,encodeUrl,@Override public String  (String url){ return response.encodeURL(url); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,flush,@Override public void  (){ if (!validFlushOrClose()) return; boolean b=forceAsyncIOWriter; try { writeStatusAndHeaders(); forceAsyncIOWriter=false; asyncIOWriter.flush(AtmosphereResponseImpl.this); } catch ( IOException e) { handleException(e); } finally 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,flushBuffer,@Override public void  () throws IOException { try { response.flushBuffer(); } catch ( NullPointerException ex) { handleException(ex); } catch ( IOException ex) { handleException(ex); throw ex; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getAsyncIOWriter,@Override public AsyncIOWriter  (){ return asyncIOWriter; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getBufferSize,@Override public int  (){ return response.getBufferSize(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getCharacterEncoding,@Override public String  (){ if (!delegateToNativeResponse) { return charSet; } else { return _r().getCharacterEncoding() == null ? charSet : _r().getCharacterEncoding(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getContentType,"@Override public String  (){ return getHeader(""Content-type""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getHeader,"@Override public String  (String name){ String s; if (name.equalsIgnoreCase(""content-type"")) { s=headers.get(""Content-Type""); if (s == null && servlet30) { s=_r().getHeader(name); } return s == null ? contentType : s; } s=headers.get(name); if (s == null "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getHeaderNames,@Override public Collection<String>  (){ Collection<String> r=null; if (servlet30) { r=_r().getHeaderNames(); } Set<String> s=headers.keySet(); if (r != null && !r.isEmpty()) { s=new HashSet<String>(s); s.addAll(r); } return Collections.unmodifiableSet(s)
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getHeaders,"@Override public Collection<String>  (String name){ ArrayList<String> s=new ArrayList<String>(); String h; if (name.equalsIgnoreCase(""content-type"")) { h=headers.get(""Content-Type""); } else { h=headers.get(name); } s.add(h); if (servlet30) { Collection<St"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getLocale,@Override public Locale  (){ if (!delegateToNativeResponse) { return locale; } else { return _r().getLocale(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getOutputStream,@Override public ServletOutputStream  () throws IOException { if (forceAsyncIOWriter || !delegateToNativeResponse) { return new Stream(isBuffering()); } else { return (_r().getOutputStream() != null) ? _r().getOutputStream() : new ServletOutputStream(){ @
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getResponse,@Override public ServletResponse  (){ if (Proxy.class.isAssignableFrom(response.getClass())) { return this; } else { return super.getResponse(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getStatus,@Override public int  (){ return status; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getStatusMessage,@Override public String  (){ return statusMessage; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,getWriter,@Override public PrintWriter  () throws IOException { if (forceAsyncIOWriter || !delegateToNativeResponse) { return new Writer(new Stream(isBuffering())); } else { return _r().getWriter() != null ? _r().getWriter() : new PrintWriter(new StringWriter()); }
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,handleException,"private void  (Exception ex){ AtmosphereResource r=resource(); if (r != null) { AtmosphereResourceImpl.class.cast(r).notifyListeners(new AtmosphereResourceEventImpl(AtmosphereResourceImpl.class.cast(r) true false)); r.getAtmosphereConfig().resourcesFactory().remove(uuid); } logger.trace(""{} unexpected I/O exception {}"" uuid ex); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,header,@Override public Builder  (String name String value){ headers.put(name value); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,headers,"@Override public Map<String String>  (){ if (!headerHandled) { for ( Cookie c : cookies) { headers.put(""Set-Cookie"" CookieUtil.toString(c)); } headerHandled=true; } return headers; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { return ServletProxyFactory.getDefault().proxy(proxy method args); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,isBuffering,private boolean  (){ return atmosphereRequest != null && Boolean.TRUE == atmosphereRequest.getAttribute(ApplicationConfig.RESPONSE_COMPLETION_AWARE); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,isCommitted,@Override public boolean  (){ if (!delegateToNativeResponse) { return isCommited; } else { return _r().isCommitted(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,isCompletionReset,private boolean  (){ return atmosphereRequest != null && Boolean.TRUE == atmosphereRequest.getAttribute(ApplicationConfig.RESPONSE_COMPLETION_RESET); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,isDestroyable,@Override public boolean  (){ return destroyable; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,isReady,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,isUsingStream,private boolean  (){ if (atmosphereRequest != null) { Object s=atmosphereRequest.getAttribute(PROPERTY_USE_STREAM); if (s != null) { usingStream.set((Boolean)s); } } if (resource() != null) { boolean force=resource().forceBinaryWrite(); if (!usingStream.get() && force) { usingStream.set(force); } } return usingStream.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,newInstance,public final static AtmosphereResponse  (AtmosphereConfig config AtmosphereRequest request WebSocket webSocket){ boolean destroyable; String s=config.getInitParameter(RECYCLE_ATMOSPHERE_REQUEST_RESPONSE); if (s != null && Boolean.valueOf(s)) { destroyable=true; } else { destroyable=false; } return new AtmosphereResponseImpl(webSocket request destroyable); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,onComplete,@Override public void  (){ if (!completed) { completed=true; try { writeWithBuffering(null); } catch ( IOException e) { } finally { if (isCompletionReset()) { completed=false; } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,request,@Override public AtmosphereResponse  (AtmosphereRequest atmosphereRequest){ this.atmosphereRequest=atmosphereRequest; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,reset,@Override public void  (){ response.reset(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,resetBuffer,@Override public void  (){ response.resetBuffer(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,resource,@Override public AtmosphereResource  (){ if (atmosphereRequest != null) { return (AtmosphereResource)atmosphereRequest.getAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE); } else { return null; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,response,@Override public Builder  (HttpServletResponse res){ this.atmosphereResponse=res; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,sendError,"@Override public void  (int sc) throws IOException { if (forceAsyncIOWriter || !delegateToNativeResponse) { setStatus(sc); boolean b=forceAsyncIOWriter; forceAsyncIOWriter=false; asyncIOWriter.writeError(this sc """"); forceAsyncIOWriter=b; } else { if (!_r"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,sendRedirect,@Override public void  (String location) throws IOException { if (forceAsyncIOWriter || !delegateToNativeResponse) { boolean b=forceAsyncIOWriter; forceAsyncIOWriter=false; asyncIOWriter.redirect(this location); forceAsyncIOWriter=b; } else { _r().sendRed
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setBufferSize,@Override public void  (int size){ response.setBufferSize(size); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setCharacterEncoding,@Override public void  (String charSet){ if (!delegateToNativeResponse) { this.charSet=charSet; } else { _r().setCharacterEncoding(charSet); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setContentLength,"@Override public void  (int len){ headers.put(""Content-Length"" String.valueOf(len)); if (!delegateToNativeResponse) { contentLength=len; } else { _r().setContentLength(len); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setContentType,"@Override public void  (String contentType){ headers.put(""Content-Type"" String.valueOf(contentType)); if (!delegateToNativeResponse) { this.contentType=contentType; } else { _r().setContentType(contentType); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setDateHeader,@Override public void  (String name long date){ if (!delegateToNativeResponse) { headers.put(name String.valueOf(date)); } else { _r().setDateHeader(name date); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setHeader,"@Override public void  (String name String value){ if (value == null) value=""""; headers.put(name value); if (delegateToNativeResponse) { _r().setHeader(name value); } if (name.equalsIgnoreCase(HeaderConfig.X_ATMOSPHERE_TRACKING_ID)) { uuid=value; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setIntHeader,@Override public void  (String name int value){ setHeader(name String.valueOf(value)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setLocale,@Override public void  (Locale locale){ if (!delegateToNativeResponse) { this.locale=locale; } else { _r().setLocale(locale); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setResponse,@Override public void  (ServletResponse response){ super.setResponse(response); if (HttpServletResponse.class.isAssignableFrom(response.getClass())) { this.response=HttpServletResponse.class.cast(response); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,setStatus,@Override public void  (int status String statusMessage){ if (!delegateToNativeResponse) { this.statusMessage=statusMessage; this.status=status; } else { _r().setStatus(status statusMessage); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,status,@Override public Builder  (int status){ this.status=status; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,statusMessage,@Override public Builder  (String statusMessage){ this.statusMessage=statusMessage; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,toString,"@Override public String  (){ return ""AtmosphereResponse{"" + ""  uuid="" + uuid + ""  headers=""+ headers+ ""  asyncIOWriter=""+ asyncIOWriter+ ""  status=""+ status+ ""  statusMessage='""+ statusMessage+ '\''+ ""  atmosphereRequest=""+ atmosphereRequest+ ""  writeStat"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,uuid,@Override public String  (){ return uuid; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,validAsyncIOWriter,"private void  () throws IOException { if (asyncIOWriter == null) { logger.trace(""{} invalid state"" this.hashCode()); throw new IOException(""AtmosphereResource Cancelled: "" + uuid); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,validFlushOrClose,"private boolean  (){ if (asyncIOWriter == null) { logger.warn(""AtmosphereResponse for {} has been closed"" uuid); return false; } return true; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,wrap,public final static AtmosphereResponse  (HttpServletResponse response){ return new Builder().response(response).build(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,write,@Override public void  (String s){ boolean b=forceAsyncIOWriter; try { validAsyncIOWriter(); writeStatusAndHeaders(); forceAsyncIOWriter=false; asyncIOWriter.write(AtmosphereResponseImpl.this s); } catch ( IOException e) { handleException(e); throw new Ru
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,writeHeader,@Override public Builder  (boolean writeStatusAndHeader){ this.writeStatusAndHeader.set(writeStatusAndHeader); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,writeStatusAndHeaders,private void  () throws java.io.IOException { if (writeStatusAndHeader.getAndSet(false) && !forceAsyncIOWriter) { asyncIOWriter.write(this constructStatusAndHeaders()); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\AtmosphereResponseImpl.java,writeWithBuffering,private void  (Object data) throws java.io.IOException { if (NO_BUFFERING.get() != null) { boolean b=forceAsyncIOWriter; try { if (data instanceof String) { asyncIOWriter.write(AtmosphereResponseImpl.this (String)data); } else if (data instanceof byte[]) { asyncIOWriter.write(AtmosphereResponseImpl.this (byte[])data); } } catch ( IOException e) { handleException(e); throw e; } finally { forceAsyncIOWriter=b; } } else { try { NO_BUFFERING.set(Boolean.TRUE); Object previous=buffered.getAndSet(data); if (previous != null) { boolean b=forceAsyncIOWriter; try { if (previous instanceof String) { asyncIOWriter.write(AtmosphereResponseImpl.this (String)previous); } else if (previous instanceof byte[]) { asyncIOWriter.write(AtmosphereResponseImpl.this (byte[])previous); } } catch ( IOException e) { handleException(e); throw e; } finally { forceAsyncIOWriter=b; } } } finally { NO_BUFFERING.remove(); } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFactory.java,BroadcasterCreationException,public  (Throwable t){ super(t); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,BroadcasterConfig,public  (ExecutorService executorService ExecutorService asyncWriteService ScheduledExecutorService scheduler AtmosphereConfig config String broadcasterId){ this.executorService=executorService; this.scheduler=scheduler; this.asyncWriteService=asyncWriteService; this.config=config; this.broadcasterId=broadcasterId; this.handleExecutors=true; this.shared=config.framework().isShareExecutorServices(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,addFilter,protected boolean  (BroadcastFilter e boolean init){ logDuplicateFilter(e); if (filters.contains(e)) return false; if (e instanceof BroadcastFilterLifecycle) { ((BroadcastFilterLifecycle)e).init(config); } if (init && ClusterBroadcastFilter.class.isAssignableFrom(e.getClass())) { Broadcaster b=config.getBroadcasterFactory().lookup(broadcasterId false); if (b != null) { synchronized (e) { ClusterBroadcastFilter.class.cast(e).setBroadcaster(b); } } } if (e instanceof PerRequestBroadcastFilter) { perRequestFilters.add((PerRequestBroadcastFilter)e); } return filters.offer(e); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,applyFilters,public List<Object>  (AtmosphereResource r List<Object> cacheMessages){ LinkedList<Object> filteredMessage=new LinkedList<Object>(); BroadcastFilter.BroadcastAction a; for ( Object o : cacheMessages) { a=filter(o); if (a.action() == BroadcastFilter.BroadcastAction.ACTION.ABORT) return Collections.<Object>emptyList(); if (a.action() == BroadcastAction.ACTION.SKIP) { filteredMessage.add(a.message()); return filteredMessage; } a=filter(r a.message() a.originalMessage()); if (a.action() == BroadcastFilter.BroadcastAction.ACTION.ABORT) return Collections.<Object>emptyList(); if (a.action() == BroadcastAction.ACTION.SKIP) { filteredMessage.add(a.message()); return filteredMessage; } filteredMessage.add(a.message()); } return filteredMessage; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,broadcasterID,protected BroadcasterConfig  (String broadcasterId){ this.broadcasterId=broadcasterId; initClusterExtension(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,configExecutors,protected synchronized void  (){ if (shared) { handleExecutors=false; isExecutorShared=true; isAsyncExecutorShared=true; } executorService=ExecutorsFactory.getMessageDispatcher(config broadcasterId); asyncWriteService=ExecutorsFactory.getAsyncOperationExecutor(config broadcasterId); scheduler=ExecutorsFactory.getScheduler(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,BroadcasterFuture,public  (Future<?> innerFuture E msg int latchCount){ this.msg=msg; this.innerFuture=innerFuture; if (innerFuture == null) { latch=new CountDownLatch(latchCount); } else { latch=null; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,cancel,@Override public boolean  (boolean b){ if (innerFuture != null) { return innerFuture.cancel(b); } isCancelled=true; while (latch.getCount() > 0) { latch.countDown(); } return isCancelled; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,done,public BroadcasterFuture<E>  (){ if (latch != null) { latch.countDown(); } isDone=latch == null || latch.getCount() == 0; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,get,@Override public E  (long l TimeUnit tu) throws InterruptedException  ExecutionException  TimeoutException { if (innerFuture != null) { return (E)innerFuture.get(l tu); } boolean isSuccessful=latch.await(l tu); if (!isSuccessful) { throw new TimeoutExcept
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,isCancelled,@Override public boolean  (){ if (innerFuture != null) { return innerFuture.isCancelled(); } return isCancelled; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterFuture.java,isDone,@Override public boolean  (){ if (innerFuture != null) { return innerFuture.isDone(); } return isDone; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,configureBroadcasterCache,private void  (){ try { String className=config.framework().getBroadcasterCacheClassName(); if (className != null) { broadcasterCache=config.framework().newClassInstance(BroadcasterCache.class (Class<BroadcasterCache>)IOUtils.loadClass(getClass() className)); configureSharedCacheExecutor(); broadcasterCache.configure(config); } for ( BroadcasterCacheInspector b : config.framework().inspectors()) { broadcasterCache.inspector(b); } for ( BroadcasterCacheListener l : config.framework().broadcasterCacheListeners()) { broadcasterCache.addBroadcasterCacheListener(l); } } catch ( Exception e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,configureBroadcasterFilter,"void  (List<String> list){ for ( String broadcastFilter : list) { BroadcastFilter bf=null; try { bf=config.framework().newClassInstance(BroadcastFilter.class (Class<BroadcastFilter>)IOUtils.loadClass(getClass() broadcastFilter)); } catch ( Exception e) { logger.warn(""Error trying to instantiate BroadcastFilter: {}"" broadcastFilter e); } if (bf != null) { addFilter(bf); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,configureSharedCacheExecutor,"protected void  (){ if (!shared) return; config.properties().put(""shared"" ""true""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,destroy,protected void  (boolean force){ broadcasterCache.cleanup(); if ((force || !shared) && broadcasterCache != null) { broadcasterCache.stop(); } removeAllFilters(); if (!force && !handleExecutors) return; if ((force || !isExecutorShared) && executorService != null) { executorService.shutdownNow(); } if ((force || !isAsyncExecutorShared) && asyncWriteService != null) { asyncWriteService.shutdownNow(); } if ((force || !shared) && scheduler != null) { scheduler.shutdownNow(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,filter,protected BroadcastAction  (AtmosphereResource r Object message Object originalMessage){ Object newO=unwrap(message); boolean isManipulated=false; if (!newO.equals(message)) { isManipulated=true; message=newO; } BroadcastAction transformed=new BroadcastAction(message); for ( PerRequestBroadcastFilter mf : perRequestFilters) { synchronized (mf) { transformed=mf.filter(broadcasterId r originalMessage transformed.message()); if (transformed == null || transformed.action() == BroadcastAction.ACTION.ABORT || transformed.action() == BroadcastAction.ACTION.SKIP) { return transformed; } } } return wrap(transformed isManipulated); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,filters,public Collection<BroadcastFilter>  (){ return filters; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,forceDestroy,public void  (){ destroy(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,getAsyncWriteService,public ExecutorService  (){ return asyncWriteService; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,getAtmosphereConfig,public AtmosphereConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,getBroadcasterCache,public BroadcasterCache  (){ return broadcasterCache; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,getExecutorService,public ExecutorService  (){ return executorService; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,getScheduledExecutorService,public ScheduledExecutorService  (){ return scheduler; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,handleExecutors,public boolean  (){ return handleExecutors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,hasFilters,public boolean  (){ return !filters.isEmpty(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,hasPerRequestFilters,public boolean  (){ if (filters.isEmpty()) { return false; } else { for ( BroadcastFilter b : filters) { if (PerRequestBroadcastFilter.class.isAssignableFrom(b.getClass())) { return true; } } } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,init,public BroadcasterConfig  (){ if (handleExecutors) { configExecutors(); } if (filterList != null) { configureBroadcasterFilter(filterList); } configureBroadcasterCache(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,initClusterExtension,"protected void  (){ for ( BroadcastFilter mf : filters) { if (ClusterBroadcastFilter.class.isAssignableFrom(mf.getClass())) { try { Broadcaster b=config.getBroadcasterFactory().lookup(broadcasterId false); if (b != null) { synchronized (mf) { ClusterBroadcastFilter.class.cast(mf).setBroadcaster(b); } } } catch ( Throwable t) { logger.error("""" t); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,logDuplicateFilter,"private void  (BroadcastFilter e){ for ( BroadcastFilter f : filters) { if (f.getClass().isAssignableFrom(e.getClass())) { logger.trace(""Duplicate Filter instance {}"" f.getClass()); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,removeAllFilters,public void  (){ for ( BroadcastFilter filter : filters) { removeFilter(filter); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,removeFilter,public boolean  (BroadcastFilter filter){ if (filter instanceof BroadcastFilterLifecycle) { ((BroadcastFilterLifecycle)filter).destroy(); } if (filter instanceof PerRequestBroadcastFilter) { perRequestFilters.remove(filter); } return filters.remove(filter); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,setAsyncWriteService,public BroadcasterConfig  (ExecutorService asyncWriteService boolean isAsyncExecutorShared){ if (!this.isAsyncExecutorShared && this.asyncWriteService != null) { this.asyncWriteService.shutdown(); } this.asyncWriteService=asyncWriteService; this.isAsyncExecutorShared=isAsyncExecutorShared; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,setBroadcasterCache,public BroadcasterConfig  (BroadcasterCache broadcasterCache){ this.broadcasterCache=broadcasterCache; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,setExecutorService,public BroadcasterConfig  (ExecutorService executorService boolean isExecutorShared){ if (!this.isExecutorShared && this.executorService != null) { this.executorService.shutdown(); } this.executorService=executorService; this.isExecutorShared=isExecutorShared; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterConfig.java,setScheduledExecutorService,public BroadcasterConfig  (ScheduledExecutorService scheduler){ if (this.scheduler != null) { this.scheduler.shutdown(); } this.scheduler=scheduler; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,BroadcasterLifeCyclePolicy,private  (ATMOSPHERE_RESOURCE_POLICY policy){ this.policy=policy; this.time=-1; this.timeUnit=null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,build,public BroadcasterLifeCyclePolicy  (){ return new BroadcasterLifeCyclePolicy(policy time timeUnit); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,getLifeCyclePolicy,public ATMOSPHERE_RESOURCE_POLICY  (){ return policy; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,getTimeUnit,public TimeUnit  (){ return timeUnit; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,getTimeout,public int  (){ return time; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,idleTime,public Builder  (int time TimeUnit timeUnit){ this.timeUnit=timeUnit; this.time=time; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,idleTimeInMS,public Builder  (int time){ timeUnit=TimeUnit.MILLISECONDS; this.time=time; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicy.java,policy,public Builder  (ATMOSPHERE_RESOURCE_POLICY policy){ this.policy=policy; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicyListenerAdapter.java,onDestroy,"@Override public void  (){ logger.trace(""onDestroy""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicyListenerAdapter.java,onEmpty,"@Override public void  (){ logger.trace(""onEmpty""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterLifeCyclePolicyListenerAdapter.java,onIdle,"@Override public void  (){ logger.trace(""onIdle""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,onAddAtmosphereResource,"@Override public void  (Broadcaster b AtmosphereResource r){ logger.trace(""onAddAtmosphereResource {}"" b.getID()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,onComplete,"@Override public void  (Broadcaster b){ logger.trace(""onComplete {}"" b.getID()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,onMessage,"@Override public void  (Broadcaster b Deliver deliver){ logger.trace(""onMessage for broadcaster {} for {}"" b.getID() deliver); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,onPostCreate,"@Override public void  (Broadcaster b){ logger.trace(""onPostCreate {}"" b.getID()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,onPreDestroy,"@Override public void  (Broadcaster b){ logger.trace(""onPreDestroy {}"" b.getID()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcasterListenerAdapter.java,onRemoveAtmosphereResource,"@Override public void  (Broadcaster b AtmosphereResource r){ logger.trace(""onRemoveAtmosphereResource {}"" b.getID()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcastFilter.java,BroadcastAction,public  (Object o){ this.a=ACTION.CONTINUE; this.o=o; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcastFilter.java,action,public ACTION  (){ return a; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\BroadcastFilterAdapter.java,filter,@Override public BroadcastAction  (String broadcasterId Object originalMessage Object message){ return new BroadcastAction(message); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\ContainerInitializer.java,onStartup,"@Override public void  (Set<Class<?>> classes final ServletContext c) throws ServletException { c.log(""Initializing AtmosphereFramework""); for ( Map.Entry<String ? extends ServletRegistration> reg : c.getServletRegistrations().entrySet()) { String disable"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\ContainerInitializer.java,requestInitialized,@Override public void  (ServletRequestEvent sre){ HttpServletRequest r=HttpServletRequest.class.cast(sre.getServletRequest()); AtmosphereConfig config=framework.getAtmosphereConfig(); if (config.isSupportSession() && Utils.webSocketEnabled(r)) { r.getSess
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,BytecodeBasedAnnotationProcessor,public  (AnnotationHandler handler){ this.handler=handler; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,DefaultAnnotationProcessor,public  (){ this.handler=new AnnotationHandler(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,ServletContainerInitializerAnnotationProcessor,private  (AnnotationHandler handler final Map<Class<? extends Annotation> Set<Class<?>>> annotations final AtmosphereFramework framework){ this.annotations=annotations; this.framework=framework; this.handler=handler; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,accept,"@Override public boolean  (File arg0 String arg1){ return arg1.endsWith("".jar""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,annotations,"@SuppressWarnings(""unchecked"") @Override public Class<? extends Annotation>[]  (){ return handler.handledClass(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,configure,"@Override public void  (final AtmosphereConfig config){ final AnnotationDetector.TypeReporter reporter=new AnnotationDetector.TypeReporter(){ @SuppressWarnings(""unchecked"") @Override public Class<? extends Annotation>[] annotations(){ return handler.handl"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,destroy,@Override public void  (){ if (detector != null) detector.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,fallbackToManualAnnotatedClasses,"private static void  (Class<?> mainClass AtmosphereFramework f AnnotationHandler handler){ logger.warn(""Unable to detect annotations. Application may fail to deploy.""); f.annotationScanned(true); for ( Class a : coreAnnotations) { try { handler.handleProcessor(loadClass(mainClass a.getName())); } catch ( Exception e) { logger.trace("""" e); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,handleAtmosphereAnnotation,private boolean  (Set<Class<?>> atmosphereAnnotatedClasses){ boolean scanForCustomizedAnnotation=false; if (atmosphereAnnotatedClasses != null) { for ( Class<?> clazz : atmosphereAnnotatedClasses) { handler.handleProcessor(clazz); } } else { fallbackToManualAnnotatedClasses(getClass() framework handler); } if (atmosphereAnnotatedClasses != null && atmosphereAnnotatedClasses.size() >= AnnotationScanningServletContainerInitializer.class.getAnnotation(HandlesTypes.class).value().length) { scanForCustomizedAnnotation=true; } return scanForCustomizedAnnotation; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,reportTypeAnnotation,@Override public void  (Class<? extends Annotation> annotation String className){ try { final Class<?> discoveredClass=loadClass(getClass() className); handler.handleAnnotation(config.framework() annotation discoveredClass); } catch ( Exception e) { logge
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,scan,"@Override public AnnotationProcessor  (String packageName) throws IOException { logger.trace(""Scanning @Service annotations in {}"" packageName); detector.detect(packageName); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,scanAll,@Override public AnnotationProcessor  () throws IOException { detector.detect(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,scanForAnnotation,"private void  (AtmosphereFramework f){ List<String> packages=f.customAnnotationPackages(); AnnotationDetector detector=new AnnotationDetector(atmosphereReporter); try { if (!packages.isEmpty()) { for ( String p : packages) { logger.trace(""Package {} scanned for @AtmosphereAnnotation"" p); detector.detect(p); } } String path=IOUtils.realPath(f.getServletContext() f.getHandlersPath()); if (path != null) { detector.detect(new File(path)); } String pathLibs=IOUtils.realPath(f.getServletContext() f.getLibPath()); if (pathLibs != null) { File libFolder=new File(pathLibs); File jars[]=libFolder.listFiles(new FilenameFilter(){ @Override public boolean accept( File arg0  String arg1){ return arg1.endsWith("".jar""); } } ); if (jars != null) { for ( File file : jars) { detector.detect(file); } } } if (!coreAnnotationsFound.get()) { fallbackToManualAnnotatedClasses(getClass() f handler); } } catch ( IOException e) { logger.warn(""Unable to scan annotation"" e); } finally { detector.destroy(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAnnotationProcessor.java,scanForCustomAnnotation,"private void  (Set<Class<?>> atmosphereAnnotatedClasses) throws IOException { handler.flushCoreAnnotations(atmosphereAnnotatedClasses); BytecodeBasedAnnotationProcessor b=new BytecodeBasedAnnotationProcessor(handler); b.configure(framework.getAtmosphereConfig()); String path=framework.getServletContext().getRealPath(framework.getHandlersPath()); if (path != null) { b.scan(new File(path)).destroy(); } else { logger.warn(""Unable to scan using File. Scanning classpath""); b.scanAll(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,DefaultAsyncSupportResolver,public  (final AtmosphereConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,detectContainersPresent,public List<Class<? extends AsyncSupport>>  (){ return new LinkedList<Class<? extends AsyncSupport>>(){ { if (testClassExists(NETTY)) add(NettyCometSupport.class); } } ; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,detectWebSocketPresent,public List<Class<? extends AsyncSupport>>  (final boolean useNativeIfPossible final boolean useServlet30Async){ return new LinkedList<Class<? extends AsyncSupport>>(){ { add(JSR356AsyncSupport.class); } } ; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,newCometSupport,"public AsyncSupport  (final String targetClassFQN){ try { ClassLoader cl=Thread.currentThread().getContextClassLoader(); return (AsyncSupport)cl.loadClass(targetClassFQN).getDeclaredConstructor(new Class[]{AtmosphereConfig.class}).newInstance(config); } catch ( final Exception e) { logger.error(""Failed to create AsyncSupport class: {}  error: {}"" targetClassFQN e); Throwable cause=e.getCause(); if (cause != null) { logger.error(""Real error: {}"" cause.getMessage() cause); } throw new IllegalArgumentException(""Unable to create "" + targetClassFQN e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,resolve,@Override public AsyncSupport  (boolean useNativeIfPossible boolean defaultToBlocking boolean useServlet30Async){ AsyncSupport cs=null; useServlet30Async=testClassExists(SERVLET_30); if (!defaultToBlocking) { List<Class<? extends AsyncSupport>> l=detectWe
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,resolveMultipleNativeSupportConflict,"protected AsyncSupport  (final List<Class<? extends AsyncSupport>> available){ final StringBuilder b=new StringBuilder(""Found multiple containers  please specify which one to use: ""); for ( Class<? extends AsyncSupport> cs : available) { b.append((cs != null) ? cs.getCanonicalName() : ""null"").append(""  ""); } b.append("" until you do  Atmosphere will use:"" + available.get(0)); logger.warn(""{}"" b.toString()); return newCometSupport(available.get(0)); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,resolveNativeCometSupport,protected AsyncSupport  (final java.util.List<Class<? extends AsyncSupport>> available){ if (available == null || available.isEmpty()) return null; else if (available.size() == 1) return newCometSupport(available.get(0)); else return resolveMultipleNativeSupportConflict(available); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,resolveWebSocket,public AsyncSupport  (final java.util.List<Class<? extends AsyncSupport>> available){ if (available == null || available.isEmpty()) return null; else return newCometSupport(available.get(0)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAsyncSupportResolver.java,testClassExists,"protected boolean  (final String testClass){ try { final boolean exists=testClass != null && testClass.length() > 0 && IOUtils.loadClass(null testClass) != null; logger.debug(exists ? ""Found {}"" : ""Not found {}"" testClass); return exists; } catch ( Exception ex) { return false; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,broadcasters,@Override @Deprecated public Set<Broadcaster>  (String uuid){ AtmosphereResource r=find(uuid); return new HashSet<Broadcaster>(r.broadcasters()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,create,@Override public AtmosphereResource  (AtmosphereConfig config String uuid AtmosphereRequest request){ AtmosphereResponse response=AtmosphereResponseImpl.newInstance(); response.setHeader(HeaderConfig.X_ATMOSPHERE_TRACKING_ID uuid); return create(config no
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,destroy,@Override public void  (){ resources.clear(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,find,@Override public AtmosphereResource  (String uuid){ if (uuid == null) return null; return resources.get(uuid); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,findAll,@Override public Collection<AtmosphereResource>  (){ return resources.values(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,locate,@Override public void  (String uuid Async async){ AtmosphereResource r=find(uuid); if (r != null) { async.available(r); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,registerUuidForFindCandidate,"@Override public void  (AtmosphereResource r){ logger.trace(""Adding: {}"" r); resources.put(r.uuid() r); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,remove,"@Override public AtmosphereResource  (String uuid){ logger.trace(""Removing: {}"" uuid); AtmosphereResource r=resources.remove(uuid); if (r != null) { r.removeFromAllBroadcasters(); } return r; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,resources,@Override public ConcurrentMap<String AtmosphereResource>  (){ return resources; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,setDefaultSerializer,private void  (AtmosphereConfig config AtmosphereResource r) throws Exception { Class<Serializer> serializerClass=config.framework().getDefaultSerializerClass(); if (serializerClass != null) { Serializer serializer=config.framework().newClassInstance(Serializer.class serializerClass); r.setSerializer(serializer); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceFactory.java,unRegisterUuidForFindCandidate,"@Override public void  (AtmosphereResource r){ Object o=resources.remove(r.uuid()); if (o != null) { logger.trace(""Removing: {}"" r); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,checkValid,"protected void  (){ if (!valid) { throw new IllegalStateException(""Session is invalid""); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,getAttribute,@Override public <T>T  (String name Class<T> type){ return type.cast(getAttribute(name)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,getAttributeNames,@Override public Collection<String>  (){ checkValid(); return Collections.unmodifiableSet(attributes.keySet()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,invalidate,@Override public void  (){ checkValid(); valid=false; attributes.clear(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSession.java,setAttribute,@Override public Object  (String name Object value){ checkValid(); return attributes.put(name value); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,destroy,@Override public void  (){ sessions.clear(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,getDisconnectListener,protected AtmosphereResourceEventListener  (){ return disconnectListener; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,getSession,@Override public AtmosphereResourceSession  (AtmosphereResource resource){ return getSession(resource true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,onDisconnect,public void  (AtmosphereResourceEvent event){ String uuid=event.getResource().uuid(); AtmosphereResourceSession session=sessions.remove(uuid); if (session != null) { session.invalidate(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactory.java,toString,"public String  (){ return ""DefaultAtmosphereResourceSessionFactory.disconnectListener""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,DefaultBroadcasterFactory,@Deprecated public  (Class<? extends Broadcaster> clazz String broadcasterLifeCyclePolicy AtmosphereConfig c){ this.clazz=clazz; config=c; configure(broadcasterLifeCyclePolicy); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,add,@Override public boolean  (Broadcaster b Object id){ return (store.put(id b) == null); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,addBroadcasterListener,@Override public BroadcasterFactory  (BroadcasterListener l){ if (!broadcasterListeners.contains(l)) { broadcasterListeners.add(l); } for ( Broadcaster b : store.values()) { b.addBroadcasterListener(l); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,broadcasterListeners,@Override public Collection<BroadcasterListener>  (){ return broadcasterListeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,configure,"protected void  (String broadcasterLifeCyclePolicy){ int maxIdleTime=5 * 60 * 1000; String s=config.getInitParameter(ApplicationConfig.BROADCASTER_LIFECYCLE_POLICY_IDLETIME); if (s != null) { maxIdleTime=Integer.parseInt(s); } s=config.getInitParameter(BROADCASTER_POLICY); if (s != null) { defaultPolicy=s.equalsIgnoreCase(Broadcaster.POLICY.REJECT.name()) ? Broadcaster.POLICY.REJECT : Broadcaster.POLICY.FIFO; } s=config.getInitParameter(BROADCASTER_POLICY_TIMEOUT); if (s != null) { defaultPolicyInteger=Integer.valueOf(s); } if (EMPTY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) { policy=new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY).build(); } else if (EMPTY_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) { policy=new BroadcasterLifeCyclePolicy.Builder().policy(EMPTY_DESTROY).build(); } else if (IDLE.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) { policy=new BroadcasterLifeCyclePolicy.Builder().policy(IDLE).idleTimeInMS(maxIdleTime).build(); } else if (IDLE_DESTROY.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) { policy=new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_DESTROY).idleTimeInMS(maxIdleTime).build(); } else if (IDLE_RESUME.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) { policy=new BroadcasterLifeCyclePolicy.Builder().policy(IDLE_RESUME).idleTimeInMS(maxIdleTime).build(); } else if (NEVER.name().equalsIgnoreCase(broadcasterLifeCyclePolicy)) { policy=new BroadcasterLifeCyclePolicy.Builder().policy(NEVER).build(); } else { logger.warn(""Unsupported BroadcasterLifeCyclePolicy policy {}"" broadcasterLifeCyclePolicy); } broadcasterListeners.add(lifeCycleListener); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,createBroadcaster,"protected <T extends Broadcaster>T  (Class<T> c Object id) throws BroadcasterCreationException { try { T b=config.framework().newClassInstance(c c); b.initialize(id.toString() legacyBroadcasterURI config); b.setSuspendPolicy(defaultPolicyInteger defaultPolicy); if (b.getBroadcasterConfig() == null) { b.setBroadcasterConfig(new BroadcasterConfig(config.framework().broadcasterFilters config id.toString()).init()); } b.setBroadcasterLifeCyclePolicy(policy); if (DefaultBroadcaster.class.isAssignableFrom(clazz)) { DefaultBroadcaster.class.cast(b).start(); } for ( BroadcasterListener l : broadcasterListeners) { b.addBroadcasterListener(l); } logger.trace(""Broadcaster {} was created {}"" id b); notifyOnPostCreate(b); return b; } catch ( Throwable t) { throw new BroadcasterCreationException(t); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,destroy,"@Override public synchronized void  (){ if (config == null) return; String s=config.getInitParameter(ApplicationConfig.SHARED); if (s != null && s.equalsIgnoreCase(""true"")) { logger.warn(""Factory shared  will not be destroyed. This can possibly cause memo"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,get,"@Override public <T extends Broadcaster>T  (Class<T> c Object id){ if (id == null) { throw new NullPointerException(""id is null""); } if (c == null) { throw new NullPointerException(""Class is null""); } return lookup(c id true true); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,lookup,"public <T extends Broadcaster>T  (Class<T> c Object id boolean createIfNull boolean unique){ synchronized (c) { logger.trace(""About to create {}"" id); if (unique && store.get(id) != null) { throw new IllegalStateException(""Broadcaster already exists "" + id + "". Use BroadcasterFactory.lookup instead""); } T b=(T)store.get(id); logger.trace(""Looking in the store using {} returned {}"" id b); if (b != null && !c.isAssignableFrom(b.getClass())) { String msg=""Invalid lookup class "" + c.getName() + "". Cached class is: ""+ b.getClass().getName(); logger.debug(msg); throw new IllegalStateException(msg); } if ((b == null && createIfNull) || (b != null && b.isDestroyed())) { if (b != null) { logger.trace(""Removing destroyed Broadcaster {}"" b.getID()); store.remove(b.getID() b); } Broadcaster nb=store.get(id); if (nb == null) { nb=createBroadcaster(c id); store.put(id nb); } if (nb == null && logger.isTraceEnabled()) { logger.trace(""Added Broadcaster {} . Factory size: {}"" id store.size()); } b=(T)nb; } return b; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,lookupAll,@Override public Collection<Broadcaster>  (){ return Collections.unmodifiableCollection(store.values()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,notifyOnPostCreate,"public void  (Broadcaster b){ for ( BroadcasterListener l : broadcasterListeners) { try { l.onPostCreate(b); } catch ( Exception ex) { logger.warn(""onPostCreate"" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,remove,@Override public boolean  (Object id){ return store.remove(id) != null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,removeAllAtmosphereResource,@Deprecated @Override public void  (AtmosphereResource r){ try { if (!store.isEmpty()) { for ( Broadcaster b : lookupAll()) { try { b.removeAtmosphereResource(r); } catch ( IllegalStateException ex) { logger.trace(ex.getMessage() ex); } } } } catch ( Exce
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcasterFactory.java,removeBroadcasterListener,@Override public BroadcasterFactory  (BroadcasterListener l){ broadcasterListeners.remove(l); for ( Broadcaster b : store.values()) { b.removeBroadcasterListener(l); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,Deliver,public  (Object message BroadcasterFuture<?> future boolean writeLocally){ this(TYPE.ALL message message null future null writeLocally null true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,getCache,public CacheMessage  (){ return cache; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,getFuture,public BroadcasterFuture<?>  (){ return future; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,getMessage,public Object  (){ return message; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,getOriginalMessage,public Object  (){ return originalMessage; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,getResource,public AtmosphereResource  (){ return resource; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,getResources,public Set<AtmosphereResource>  (){ return resources; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,getType,public TYPE  (){ return type; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,isAsync,public boolean  (){ return async; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,isWriteLocally,public boolean  (){ return writeLocally; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,setAsync,public void  (boolean async){ this.async=async; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,setCache,public void  (CacheMessage cache){ this.cache=cache; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,setFuture,public void  (BroadcasterFuture<?> future){ this.future=future; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,setMessage,public void  (Object message){ this.message=message; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,setOriginalMessage,public void  (Object originalMessage){ this.originalMessage=originalMessage; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,setWriteLocally,public void  (boolean writeLocally){ this.writeLocally=writeLocally; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Deliver.java,toString,"@Override public String  (){ return ""Entry{"" + ""message="" + message + ""  type=""+ type+ ""  future=""+ future+ '}'; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,CompleteListener,private  (MetaBroadcasterFuture f){ this.f=f; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,MetaBroadcasterFuture,private  (List<Broadcaster> l){ this.latch=new CountDownLatch(l.size()); this.l=l; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,addBroadcasterListener,@Override public MetaBroadcaster  (BroadcasterListener b){ broadcasterListeners.add(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,broadcast,"protected MetaBroadcasterFuture  (final String path Object message int time TimeUnit unit boolean delay boolean cacheMessage){ if (config != null) { Collection<Broadcaster> c=config.getBroadcasterFactory().lookupAll(); final Map<String String> m=new HashMap<String String>(); List<Broadcaster> l=new ArrayList<Broadcaster>(); logger.trace(""Map {}"" path); UriTemplate t=null; try { t=new UriTemplate(path); for ( Broadcaster b : c) { logger.trace(""Trying to map {} to {}"" t b.getID()); if (t.match(b.getID() m)) { l.add(b); } m.clear(); } } finally { if (t != null) t.destroy(); } if (l.isEmpty() && cacheMessage) { if (NoCache.class.isAssignableFrom(cache.getClass())) { logger.warn(""No Broadcaster matches {}. Message {} WILL BE LOST. "" + ""Make sure you cache it or make sure the Broadcaster exists before."" path message); } else { cache.cache(path message); } return E; } MetaBroadcasterFuture f=new MetaBroadcasterFuture(l); CompleteListener cl=new CompleteListener(f); for ( Broadcaster b : l) { if (time <= 0) { f.outerFuture(b.addBroadcasterListener(cl).broadcast(message)); } else if (!delay) { f.outerFuture(b.scheduleFixedBroadcast(message time unit)); } else { f.outerFuture(b.delayBroadcast(message time unit)); } } return f; } else { return E; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,broadcastTo,@Override public Future<List<Broadcaster>>  (String broadcasterID Object message boolean cacheMessage){ return map(broadcasterID message -1 null false cacheMessage); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,cache,@Override public MetaBroadcaster  (MetaBroadcasterCache cache){ this.cache=cache; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,cancel,@Override public boolean  (boolean b){ for ( Future<?> f : outerFuture) { f.cancel(b); } while (latch.getCount() > 0) { latch.countDown(); } isCancelled=true; return isCancelled; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,configure,@Override public void  (AtmosphereConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,countDown,public void  (){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,delayTo,@Override public Future<List<Broadcaster>>  (String broadcasterID Object message int time TimeUnit unit){ return map(broadcasterID message time unit true true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,destroy,public void  (){ broadcasterListeners.clear(); flushCache(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,flushCache,protected MetaBroadcaster  (){ if (cache != null) cache.flushCache(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,get,@Override public List<Broadcaster>  (long t TimeUnit timeUnit) throws InterruptedException  ExecutionException  TimeoutException { latch.await(t timeUnit); return l; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,isCancelled,@Override public boolean  (){ return isCancelled; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,isDone,@Override public boolean  (){ return latch.getCount() == 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,map,"protected MetaBroadcasterFuture  (String path Object message int time TimeUnit unit boolean delay boolean cacheMessage){ if (path == null || path.isEmpty()) { throw new NullPointerException(); } if (path.contains(""*"")) { path=path.replace(""*"" MAPPING_REGEX); } if (path.equals(""/"")) { path+=MAPPING_REGEX; } return broadcast(path message time unit delay cacheMessage); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,onComplete,"@Override public void  (Broadcaster b){ b.removeBroadcasterListener(this); f.countDown(); if (f.isDone()) { for ( BroadcasterListener l : broadcasterListeners) { try { l.onComplete(b); } catch ( Exception ex) { logger.warn("""" ex); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,outerFuture,MetaBroadcasterFuture  (Future<?> f){ outerFuture.add(f); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,removeBroadcasterListener,@Override public MetaBroadcaster  (BroadcasterListener b){ broadcasterListeners.remove(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultMetaBroadcaster.java,scheduleTo,@Override public Future<List<Broadcaster>>  (String broadcasterID Object message int time TimeUnit unit){ return map(broadcasterID message time unit false true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,AsyncWriteToken,public  (AtmosphereResource resource Object msg BroadcasterFuture future Object originalMessage CacheMessage cache AtomicInteger count){ this.resource=resource; this.msg=msg; this.future=future; this.originalMessage=originalMessage; this.cache=cache; this.count=count; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,WriteOperation,private  (AtmosphereResource r AtmosphereResourceEvent e Thread ioThread){ this.r=r; this.e=e; this.ioThread=ioThread; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,WriteQueue,private  (String uuid){ this.uuid=uuid; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,addAtmosphereResource,"@Override public Broadcaster  (AtmosphereResource r){ try { if (destroyed.get()) { logger.debug(DESTROYED getID() ""addAtmosphereResource(AtmosphereResource r""); return this; } start(); if (scope == SCOPE.REQUEST && requestScoped.getAndSet(true)) { throw n"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,addBroadcasterLifeCyclePolicyListener,@Override public void  (BroadcasterLifeCyclePolicyListener b){ lifeCycleListeners.add(b); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,addBroadcasterListener,@Override public Broadcaster  (BroadcasterListener b){ if (!sharedListeners && !broadcasterListeners.contains(b)) { broadcasterListeners.add(b); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,asString,public List<String>  (){ List<String> l=new ArrayList<String>(); for ( AsyncWriteToken w : queue) { l.add(w.toString()); } return l; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,awaitAndBroadcast,"@Override public Future<Object>  (Object t long time TimeUnit timeUnit){ if (resources.isEmpty()) { synchronized (awaitBarrier) { try { logger.trace(""Awaiting for AtmosphereResource for {} {}"" time timeUnit); awaitBarrier.wait(translateTimeUnit(time timeU"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,broadcast,"@Override public Future<Object>  (Object msg Set<AtmosphereResource> subset){ if (destroyed.get()) { logger.debug(DESTROYED getID() ""broadcast(T msg  Set<AtmosphereResource> subset)""); return futureDone(msg); } start(); Object newMsg=filter(msg); if (newM"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,broadcastOnResume,protected void  (AtmosphereResource r){ for ( Deliver e : broadcastOnResume) { e.async=false; push(new Deliver(r e)); } if (resources.isEmpty()) { broadcastOnResume.clear(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,broadcasterListeners,public Collection<BroadcasterListener>  (){ return broadcasterListeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,cacheAndSuspend,"protected void  (AtmosphereResource r){ if (!isAtmosphereResourceValid(r)) { logger.debug(""Unable to add AtmosphereResource {}"" r.uuid()); return; } boolean wasResumed=checkCachedAndPush(r r.getAtmosphereResourceEvent()); if (!wasResumed && isAtmosphereResourceValid(r)) { logger.trace(""Associating AtmosphereResource {} with Broadcaster {}"" r.uuid() getID()); String parentUUID=r.transport().equals(AtmosphereResource.TRANSPORT.WEBSOCKET) ? (String)AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID) : null; if (!backwardCompatible && parentUUID != null) { AtmosphereResource p=config.resourcesFactory().find(parentUUID); if (p != null && !resources.contains(p)) { notifyAndAdd(p); } else if (p == null) { notifyAndAdd(r); } else { logger.trace(""AtmosphereResource {} was already mapped to {}"" r.uuid() parentUUID); } } else { notifyAndAdd(r); } } else if (!wasResumed) { logger.debug(""Unable to add AtmosphereResource {} to {}"" r.uuid() name); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,cacheLostMessage,"public void  (AtmosphereResource r AsyncWriteToken token boolean force){ if (!force) { return; } try { if (token != null && token.originalMessage != null) { bc.getBroadcasterCache().addToCache(getID() r != null ? r.uuid() : BroadcasterCache.NULL new BroadcastMessage(String.valueOf(token.future.hashCode()) token.originalMessage)); logger.trace(""Lost message cached {}"" token.originalMessage); } } catch ( Throwable t2) { logger.error(""Unable to cache message {} for AtmosphereResource {}"" token.originalMessage r != null ? r.uuid() : """"); logger.error(""Unable to cache message"" t2); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,cacheMessageOnIOException,"protected boolean  (Throwable cause){ for ( StackTraceElement element : cause.getStackTrace()) { if (element.getMethodName().equals(""flush"") || element.getMethodName().equals(""flushBuffer"")) { return false; } } return true; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,call,"public Object  () throws Exception { delayedBroadcast.remove(e); if (Callable.class.isAssignableFrom(o.getClass())) { try { Object r=Callable.class.cast(o).call(); final Object msg=filter(r); if (msg != null) { Deliver deliver=new Deliver(msg future r); push(deliver); } return msg; } catch ( Exception e1) { logger.error("""" e); } } final Object msg=filter(o); final Deliver e=new Deliver(msg future o); push(e); return msg; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,callable,"private Object  (Object msg){ if (Callable.class.isAssignableFrom(msg.getClass())) { try { return Callable.class.cast(msg).call(); } catch ( Exception e) { logger.warn(""Callable exception"" e); return null; } } return msg; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,checkCachedAndPush,"protected boolean  (final AtmosphereResource r final AtmosphereResourceEvent e){ boolean cache=retrieveTrackedBroadcast(r e); if (!cache) return false; if (!((List)e.getMessage()).isEmpty()) { logger.debug(""Sending cached message {} to {}"" e.getMessage() r.uuid()); List<Object> cacheMessages=(List)e.getMessage(); BroadcasterFuture<Object> f=new BroadcasterFuture<Object>(e.getMessage() 1); LinkedList<Object> filteredMessage=new LinkedList<Object>(); LinkedList<Object> filteredMessageClone=null; Deliver deliver; Object newMessage; for ( Object o : cacheMessages) { newMessage=filter(o); if (newMessage == null) { continue; } deliver=new Deliver(newMessage r f o); if (!perRequestFilter(r deliver)) { continue; } if (deliver.message != null) { filteredMessage.addLast(deliver.message); } } if (filteredMessage.isEmpty()) { return false; } e.setMessage(filteredMessage); final boolean willBeResumed=Utils.resumableTransport(r.transport()); if (willBeResumed) { filteredMessageClone=(LinkedList<Object>)filteredMessage.clone(); } List<AtmosphereResourceEventListener> listeners=willBeResumed ? new ArrayList() : EMPTY_LISTENERS; AtmosphereResourceImpl rImpl=AtmosphereResourceImpl.class.cast(r); if (willBeResumed && !rImpl.atmosphereResourceEventListener().isEmpty()) { listeners.addAll(rImpl.atmosphereResourceEventListener()); } synchronized (rImpl) { try { rImpl.getRequest().setAttribute(CACHED ""true""); prepareInvokeOnStateChange(r e); } catch ( Throwable t) { logger.error(""Unable to write cached message {} for {}"" e.getMessage() r.uuid()); logger.error("""" t); for ( Object o : cacheMessages) { bc.getBroadcasterCache().addToCache(getID() r != null ? r.uuid() : BroadcasterCache.NULL new BroadcastMessage(o)); } return true; } if (willBeResumed) { e.setMessage(filteredMessageClone); } for ( AtmosphereResourceEventListener l : willBeResumed ? listeners : rImpl.atmosphereResourceEventListener()) { l.onBroadcast(e); } switch (r.transport()) { case UNDEFINED: case JSONP: case AJAX: case LONG_POLLING: return true; case SSE: break; default : try { r.getResponse().flushBuffer(); } catch ( IOException ioe) { logger.trace("""" ioe); AtmosphereResourceImpl.class.cast(r)._destroy(); } break; } } } return false; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,createBroadcasterConfig,protected BroadcasterConfig  (AtmosphereConfig config){ return new BroadcasterConfig(config.framework().broadcasterFilters config getID()).init(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,currentLifecycleTask,public DefaultBroadcaster  (Future<?> currentLifecycleTask){ this.currentLifecycleTask=currentLifecycleTask; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,delayBroadcast,"@Override public Future<Object>  (final Object o long delay TimeUnit t){ if (destroyed.get()) { logger.debug(DESTROYED getID() ""delayBroadcast(final T o  long delay  TimeUnit t)""); return null; } start(); final Object msg=filter(o); if (msg == null) retur"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,deliverPush,"protected void  (Deliver deliver boolean rec){ recentActivity.set(true); String prevMessage=deliver.message.toString(); if (rec && !delayedBroadcast.isEmpty()) { Iterator<Deliver> i=delayedBroadcast.iterator(); StringBuilder b=new StringBuilder(); while (i.hasNext()) { Deliver e=i.next(); e.future.cancel(true); try { if (e.message instanceof String && deliver.message instanceof String) { b.append(e.message); } else { deliverPush(e false); } } finally { i.remove(); } } if (b.length() > 0) { deliver.message=b.append(deliver.message).toString(); } } Object finalMsg=callable(deliver.message); if (finalMsg == null) { logger.error(""Callable exception. Please catch all exceptions from your callable. Message {} will be lost and all AtmosphereResource "" + ""associated with this Broadcaster resumed."" deliver.message); entryDone(deliver.future); switch (deliver.type) { case ALL: synchronized (resources) { for ( AtmosphereResource r : resources) { if (Utils.resumableTransport(r.transport())) try { r.resume(); } catch ( Throwable t) { logger.trace(""resumeAll"" t); } } } break; case RESOURCE: deliver.resource.resume(); break; case SET: for (AtmosphereResource r : deliver.resources) { r.resume(); } break; } return; } notifyOnMessage(deliver); Object prevM=deliver.originalMessage; deliver.originalMessage=(deliver.originalMessage != deliver.message ? callable(deliver.originalMessage) : finalMsg); if (deliver.originalMessage == null) { logger.trace(""Broadcasted message was null {}"" prevM); entryDone(deliver.future); return; } deliver.message=finalMsg; Map<String CacheMessage> cacheForSet=deliver.type == Deliver.TYPE.SET ? new HashMap<String CacheMessage>() : null; switch (deliver.type) { case ALL: deliver.cache=bc.getBroadcasterCache().addToCache(getID() BroadcasterCache.NULL new BroadcastMessage(deliver.originalMessage)); break; case RESOURCE: deliver.cache=bc.getBroadcasterCache().addToCache(getID() deliver.resource.uuid() new BroadcastMessage(deliver.originalMessage)); break; case SET: for (AtmosphereResource r : deliver.resources) { cacheForSet.put(r.uuid() bc.getBroadcasterCache().addToCache(getID() r.uuid() new BroadcastMessage(deliver.originalMessage))); } break; } if (resources.isEmpty()) { logger.trace(""No resource available for {} and message {}"" getID() finalMsg); entryDone(deliver.future); if (cacheForSet != null) { cacheForSet.clear(); } return; } try { if (logger.isTraceEnabled()) { for (AtmosphereResource r : resources) { logger.trace(""AtmosphereResource {} available for {}"" r.uuid() deliver.message); } } boolean hasFilters=bc.hasPerRequestFilters(); Object beforeProcessingMessage=deliver.message; switch (deliver.type) { case ALL: AtomicInteger count=new AtomicInteger(resources.size()); for (AtmosphereResource r : resources) { deliver.message=beforeProcessingMessage; boolean deliverMessage=perRequestFilter(r deliver); if (endBroadcast(deliver r deliver.cache deliverMessage)) continue; if (deliver.writeLocally) { queueWriteIO(r hasFilters ? new Deliver(r deliver) : deliver count); } } break; case RESOURCE: boolean deliverMessage=perRequestFilter(deliver.resource deliver); if (endBroadcast(deliver deliver.resource deliver.cache deliverMessage)) return; if (deliver.writeLocally) { queueWriteIO(deliver.resource deliver new AtomicInteger(1)); } break; case SET: count=new AtomicInteger(deliver.resources.size()); for (AtmosphereResource r : deliver.resources) { deliver.message=beforeProcessingMessage; deliverMessage=perRequestFilter(r deliver); CacheMessage cacheMsg=cacheForSet.remove(r.uuid()); if (endBroadcast(deliver r cacheMsg deliverMessage)) continue; if (deliver.writeLocally) { queueWriteIO(r new Deliver(r deliver cacheMsg) count); } } break; } deliver.message=prevMessage; } catch (InterruptedException ex) { logger.debug(ex.getMessage() ex); if (cacheForSet != null) { cacheForSet.clear(); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,destroy,public void  (){ this.resource=null; this.msg=null; this.future=null; this.originalMessage=null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,dispatchMessages,protected void  (Deliver e){ messages.offer(e); if (dispatchThread.get() == 0) { dispatchThread.incrementAndGet(); getBroadcasterConfig().getExecutorService().submit(getBroadcastHandler()); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,endBroadcast,"protected boolean  (Deliver deliver AtmosphereResource r CacheMessage cacheMsg boolean deliverMessage){ if (!deliverMessage || deliver.message == null) { logger.debug(""Skipping broadcast delivery {} for resource {} "" deliver.message deliver.resource != null ? deliver.resource.uuid() : ""null""); bc.getBroadcasterCache().clearCache(getID() r.uuid() cacheMsg); entryDone(deliver.future); return true; } return false; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,entryDone,protected void  (final BroadcasterFuture<?> f){ notifyBroadcastListener(); if (f != null) f.done(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,executeAsyncWrite,"protected void  (final AsyncWriteToken token){ boolean notifyListeners=true; boolean lostCandidate=false; if (token.resource == null) throw new NullPointerException(); final AtmosphereResourceEventImpl event=(AtmosphereResourceEventImpl)token.resource.getAtmosphereResourceEvent(); final AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(token.resource); final boolean willBeResumed=Utils.resumableTransport(r.transport()); List<AtmosphereResourceEventListener> listeners=willBeResumed ? new ArrayList() : EMPTY_LISTENERS; final AtmosphereRequest request=r.getRequest(false); try { event.setMessage(token.msg); if (!isAtmosphereResourceValid(r)) { logger.trace(""AtmosphereResource {} state is invalid for Broadcaster {}. Message will be cached"" r.uuid() name); removeAtmosphereResource(r false); return; } bc.getBroadcasterCache().clearCache(getID() r.uuid() token.cache); try { request.setAttribute(getID() token.future); request.setAttribute(MAX_INACTIVE System.currentTimeMillis()); request.setAttribute(usingTokenIdForAttribute token); if (willBeResumed && !r.atmosphereResourceEventListener().isEmpty()) { listeners.addAll(r.atmosphereResourceEventListener()); } prepareInvokeOnStateChange(r event); } catch ( Throwable t) { logger.debug(""Invalid AtmosphereResource state {}. The connection has been remotely"" + "" closed and message {} will be added to the configured BroadcasterCache for later retrieval"" r.uuid() event.getMessage()); logger.trace(""If you are using Tomcat 7.0.22 and lower  you're most probably hitting http://is.gd/NqicFT""); logger.trace(""ApplicationConfig.CACHE_MESSAGE_ON_IO_FLUSH_EXCEPTION {}"" cacheOnIOFlushException t); lostCandidate=cacheOnIOFlushException ? cacheOnIOFlushException : cacheMessageOnIOException(t); removeAtmosphereResource(r false); r.removeFromAllBroadcasters(); event.setCancelled(true); event.setThrowable(t); r.setIsInScope(false); return; } try { request.setAttribute(FrameworkConfig.MESSAGE_WRITTEN ""true""); } catch ( NullPointerException ex) { logger.trace(""NPE after the message has been written for {}"" r.uuid()); } } finally { if (notifyListeners) { if (willBeResumed) { event.setMessage(token.msg); for ( AtmosphereResourceEventListener e : listeners) { e.onBroadcast(event); } } else if (!event.isResumedOnTimeout()) { r.notifyListeners(); } } if (token.lastBroadcasted()) { notifyBroadcastListener(); } if (token.future != null) token.future.done(); if (lostCandidate) { cacheLostMessage(r token true); } try { request.removeAttribute(getID()); request.removeAttribute(usingTokenIdForAttribute); } catch ( NullPointerException ex) { logger.trace(""NPE after the message has been written for {}"" r.uuid()); } token.destroy(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,executeBlockingWrite,protected void  (AtmosphereResource r Deliver deliver AtomicInteger count) throws InterruptedException { synchronized (r) { executeAsyncWrite(new AsyncWriteToken(r deliver.message deliver.future deliver.originalMessage deliver.cache count)); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,filter,protected Object  (Object msg){ BroadcastAction a=bc.filter(msg); if (a.action() == BroadcastAction.ACTION.ABORT || msg == null) return null; else return a.message(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,futureDone,protected BroadcasterFuture<Object>  (Object msg){ notifyBroadcastListener(); return (new BroadcasterFuture<Object>(msg)).done(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,getAsyncWriteHandler,"protected Runnable  (final WriteQueue writeQueue){ return new Runnable(){ public void run(){ while (!isDestroyed()) { AsyncWriteToken token=null; try { token=writeQueue.queue.poll(waitTime TimeUnit.MILLISECONDS); if (token == null && !outOfOrderBroadcastSupported.get()) { synchronized (writeQueue) { if (writeQueue.queue.isEmpty()) { writeQueue.monitored.set(false); writeQueues.remove(writeQueue.uuid); return; } } } else if (token == null) { return; } } catch ( InterruptedException ex) { logger.trace(""{} got interrupted for Broadcaster {}"" Thread.currentThread().getName() getID()); logger.trace("""" ex); return; } finally { if (!bc.getAsyncWriteService().isShutdown() && outOfOrderBroadcastSupported.get()) { bc.getAsyncWriteService().submit(this); } } if (token != null) { synchronized (token.resource) { try { logger.trace(""About to write to {}"" token.resource); executeAsyncWrite(token); } catch ( Throwable ex) { if (!started.get() || destroyed.get()) { logger.trace(""Failed to execute a write operation. Broadcaster is destroyed or not yet started for Broadcaster {}"" getID() ex); return; } else { try { if (token != null) { logger.warn(""This message {} will be lost for AtmosphereResource {}  adding it to the BroadcasterCache"" token.originalMessage token.resource != null ? token.resource.uuid() : ""null""); cacheLostMessage(token.resource token true); } } finally { if (token != null) { removeAtmosphereResource(token.resource false); } logger.warn(""Failed to execute a write operation for Broadcaster "" + getID() ex); } } } finally { if (!bc.getAsyncWriteService().isShutdown() && outOfOrderBroadcastSupported.get()) { return; } } } } } } } ; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,getAtmosphereResources,@Override public Collection<AtmosphereResource>  (){ return Collections.unmodifiableCollection(resources); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,getBroadcastHandler,"protected Runnable  (){ return new Runnable(){ public void run(){ while (!isDestroyed()) { Deliver msg=null; try { msg=messages.poll(waitTime TimeUnit.MILLISECONDS); if (msg == null) { dispatchThread.decrementAndGet(); return; } } catch ( InterruptedException ex) { logger.trace(""{} got interrupted for Broadcaster {}"" Thread.currentThread().getName() getID()); logger.trace("""" ex); return; } finally { if (outOfOrderBroadcastSupported.get()) { bc.getExecutorService().submit(this); } } try { logger.trace(""{} is about to broadcast {}"" getID() msg); push(msg); } catch ( Throwable ex) { if (!started.get() || destroyed.get()) { logger.trace(""Failed to submit broadcast handler runnable on shutdown for Broadcaster {}"" getID() ex); return; } else { logger.warn(""This message {} will be lost"" msg); logger.warn(""Failed to submit broadcast handler runnable to for Broadcaster"" + getID() ex); } } finally { if (outOfOrderBroadcastSupported.get()) { return; } } } } } ; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,getBroadcasterConfig,@Override public BroadcasterConfig  (){ return bc; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,getBroadcasterLifeCyclePolicy,@Override public BroadcasterLifeCyclePolicy  (){ return lifeCyclePolicy; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,getID,@Override public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,getScope,@Override public SCOPE  (){ return scope; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,initialize,"public Broadcaster  (String name AtmosphereConfig config){ return initialize(name URI.create(""http://localhost"") config); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,invokeOnStateChange,"protected void  (final AtmosphereResource r final AtmosphereResourceEvent e){ try { logger.trace(""{} is broadcasting to {}"" name r.uuid()); r.getAtmosphereHandler().onStateChange(e); } catch ( Throwable t) { if (!InterruptedException.class.isAssignableFrom(t.getClass())) { onException(t r); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,isAtmosphereResourceValid,private boolean  (AtmosphereResource r){ return !r.isResumed() && !r.isCancelled() && AtmosphereResourceImpl.class.cast(r).isInScope(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,isDestroyed,@Override public boolean  (){ return destroyed.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,killReactiveThreads,protected void  (){ if (notifierFuture != null) { for ( Future<?> f : notifierFuture) { if (f != null) f.cancel(false); } } if (asyncWriteFuture != null) { for ( Future<?> f : asyncWriteFuture) { if (f != null) f.cancel(false); } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,lastBroadcasted,public boolean  (){ return count.decrementAndGet() == 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,lifeCycleListeners,public ConcurrentLinkedQueue<BroadcasterLifeCyclePolicyListener>  (){ return lifeCycleListeners; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,lifeCyclePolicy,public BroadcasterLifeCyclePolicy  (){ return lifeCyclePolicy; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,lifecycleHandler,public DefaultBroadcaster  (LifecycleHandler lifecycleHandler){ this.lifecycleHandler=lifecycleHandler; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,messages,public BlockingQueue<Deliver>  (){ return messages; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notifyAndAdd,protected void  (AtmosphereResource r){ resources.add(r); r.addBroadcaster(this); notifyOnAddAtmosphereResourceListener(r); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notifyBroadcastListener,"protected void  (){ for ( BroadcasterListener b : broadcasterListeners) { try { b.onComplete(this); } catch ( Exception ex) { logger.warn("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notifyOnAddAtmosphereResourceListener,"protected void  (AtmosphereResource r){ for ( BroadcasterListener b : broadcasterListeners) { try { b.onAddAtmosphereResource(this r); } catch ( Exception ex) { logger.warn("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notifyOnMessage,"protected void  (Deliver deliver){ for ( BroadcasterListener b : broadcasterListeners) { try { b.onMessage(this deliver); } catch ( Exception ex) { logger.warn("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notifyOnPreDestroy,"boolean  (){ for ( BroadcasterListener b : broadcasterListeners) { try { b.onPreDestroy(this); } catch ( RuntimeException ex) { if (BroadcasterListener.BroadcastListenerException.class.isAssignableFrom(ex.getClass())) { logger.trace(""onPreDestroy"" ex); return true; } logger.warn(""onPreDestroy"" ex); } } return false; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,notifyOnRemoveAtmosphereResourceListener,"protected void  (AtmosphereResource r){ for ( BroadcasterListener b : broadcasterListeners) { try { b.onRemoveAtmosphereResource(this r); } catch ( Exception ex) { logger.warn("""" ex); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,onException,"public void  (Throwable t final AtmosphereResource ar boolean notifyAndCache){ final AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(ar); logger.trace(""I/O Exception (or related) during execution of the write operation for "" + ""AtmosphereResource {} and Broadcaster {}. Message will be cached {}"" new String[]{ar.uuid() getID() String.valueOf(notifyAndCache)}); logger.trace(""{}"" t); removeAtmosphereResource(r); if (notifyAndCache) { final AtmosphereResourceEventImpl event=r.getAtmosphereResourceEvent(); event.setThrowable(t); r.notifyListeners(event); r.removeEventListeners(); } if (notifyAndCache) { cacheLostMessage(r (AsyncWriteToken)r.getRequest(false).getAttribute(usingTokenIdForAttribute) notifyAndCache); } if (bc != null && bc.getAsyncWriteService() != null) { bc.getAsyncWriteService().execute(new Runnable(){ @Override public void run(){ try { logger.trace(""Forcing connection close {}"" ar.uuid()); r.resume(); r.close(); } catch ( Throwable t) { logger.trace(""Was unable to resume a corrupted AtmosphereResource {}"" r); logger.trace(""Cause"" t); } } } ); } else { r.resume(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,outOfOrderBroadcastSupported,public boolean  (){ return outOfOrderBroadcastSupported.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,perRequestFilter,"protected boolean  (AtmosphereResource r Deliver msg){ if (r == null) { logger.trace(""Null AtmosphereResource passed inside a Set""); return false; } if (bc.hasPerRequestFilters()) { BroadcastAction a=bc.filter(r msg.message msg.originalMessage); if (a.action() == BroadcastAction.ACTION.ABORT) { return false; } msg.message=a.message(); } return true; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,policy,public POLICY  (){ return policy; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,prepareInvokeOnStateChange,"protected void  (final AtmosphereResource r final AtmosphereResourceEvent e){ if (writeTimeoutInSecond != -1) { logger.trace(""Registering Write timeout {} for {}"" writeTimeoutInSecond r.uuid()); WriteOperation w=new WriteOperation(r e Thread.currentThread()); bc.getScheduledExecutorService().schedule(w writeTimeoutInSecond TimeUnit.MILLISECONDS); try { w.call(); } catch ( Exception ex) { logger.warn("""" ex); } } else { invokeOnStateChange(r e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,push,protected void  (Deliver deliver){ if (destroyed.get()) { return; } deliverPush(deliver true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,queueWriteIO,"protected void  (AtmosphereResource r Deliver deliver AtomicInteger count) throws InterruptedException { if (deliver.async) { if (!bc.getBroadcasterCache().getClass().equals(BroadcasterCache.DEFAULT.getClass())) { if (r.isResumed() || r.isCancelled()) { logger.trace(""AtmosphereResource {} has been resumed or cancelled  unable to Broadcast message {}"" r.uuid() deliver.message); AtmosphereResource r2=config.resourcesFactory().find(r.uuid()); logger.trace(""Found an AtmosphereResource {} in state {}"" r2 r.isSuspended()); if (r2 != null && r2.isSuspended() && r.hashCode() != r2.hashCode()) { removeAtmosphereResource(r2); checkCachedAndPush(r2 r2.getAtmosphereResourceEvent()); } return; } } AsyncWriteToken w=new AsyncWriteToken(r deliver.message deliver.future deliver.originalMessage deliver.cache count); if (!outOfOrderBroadcastSupported.get()) { WriteQueue writeQueue=writeQueues.get(r.uuid()); if (writeQueue == null) { writeQueue=new WriteQueue(r.uuid()); writeQueues.put(r.uuid() writeQueue); } writeQueue.queue.put(w); synchronized (writeQueue) { if (!writeQueue.monitored.getAndSet(true)) { logger.trace(""Broadcaster {} is about to queueWriteIO for AtmosphereResource {}"" name r.uuid()); bc.getAsyncWriteService().submit(getAsyncWriteHandler(writeQueue)); } } } else { uniqueWriteQueue.queue.offer(w); } } else { executeBlockingWrite(r deliver count); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,reactiveThreadsCount,protected int  (){ return Runtime.getRuntime().availableProcessors() * 2; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,recentActivity,public AtomicBoolean  (){ return recentActivity; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,removeAtmosphereResource,"protected Broadcaster  (AtmosphereResource r boolean executeDone){ if (destroyed.get()) { logger.debug(DESTROYED getID() ""removeAtmosphereResource(AtmosphereResource r)""); return this; } boolean removed=resources.remove(r); if (removed) { if (r.isSuspended()) { logger.trace(""Excluded from {} : {}"" getID() r.uuid()); bc.getBroadcasterCache().excludeFromCache(getID() r); } notifyOnRemoveAtmosphereResourceListener(r); } else { logger.trace(""Unable to remove {} from {}"" r.uuid() getID()); } r.removeBroadcaster(this); if (!removed) return this; logger.trace(""Removing AtmosphereResource {} for Broadcaster {}"" r.uuid() name); writeQueues.remove(r.uuid()); if (executeDone) { AtmosphereResourceImpl aImpl=AtmosphereResourceImpl.class.cast(r); BroadcasterFuture f=(BroadcasterFuture)aImpl.getRequest(false).getAttribute(getID()); if (f != null && !f.isDone() && !f.isCancelled()) { aImpl.getRequest(false).removeAttribute(getID()); entryDone(f); } } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,removeBroadcasterLifeCyclePolicyListener,@Override public void  (BroadcasterLifeCyclePolicyListener b){ lifeCycleListeners.remove(b); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,removeBroadcasterListener,@Override public Broadcaster  (BroadcasterListener b){ if (!sharedListeners) broadcasterListeners.remove(b); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,rename,public Broadcaster  (String id){ this.name=id; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,resumeAll,"@Override public void  (){ synchronized (resources) { for ( AtmosphereResource r : resources) { try { r.resume(); } catch ( Throwable t) { logger.trace(""resumeAll"" t); } finally { removeAtmosphereResource(r); } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,retrieveTrackedBroadcast,"protected boolean  (final AtmosphereResource r final AtmosphereResourceEvent e){ logger.trace(""Checking cached message for {}"" r.uuid()); List<?> missedMsg=bc.getBroadcasterCache().retrieveFromCache(getID() r.uuid()); if (missedMsg != null && !missedMsg.isEmpty()) { e.setMessage(missedMsg); return true; } return false; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,run,"public void  (){ if (Callable.class.isAssignableFrom(o.getClass())) { try { Object r=Callable.class.cast(o).call(); final Object msg=filter(r); if (msg != null) { Deliver deliver=new Deliver(msg f r); push(deliver); } return; } catch ( Exception e) { logger.error("""" e); } } final Object msg=filter(o); final Deliver e=new Deliver(msg f o); push(e); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,scheduleFixedBroadcast,"@Override public Future<Object>  (final Object o long waitFor long period TimeUnit t){ if (destroyed.get()) { logger.debug(DESTROYED getID() ""scheduleFixedBroadcast(final Object o  long waitFor  long period  TimeUnit t)""); return null; } start(); if (peri"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,setBroadcasterConfig,@Override public void  (BroadcasterConfig bc){ this.bc=bc; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,setBroadcasterLifeCyclePolicy,@Override public void  (final BroadcasterLifeCyclePolicy lifeCyclePolicy){ this.lifeCyclePolicy=lifeCyclePolicy; if (lifecycleHandler != null) lifecycleHandler.on(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,setID,"@Override public synchronized void  (String id){ if (id == null) { id=getClass().getSimpleName() + ""/"" + config.uuidProvider().generateUuid(); } if (config.getBroadcasterFactory() == null) return; Broadcaster b=config.getBroadcasterFactory().lookup(this.g"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,setScope,"@Override public void  (SCOPE scope){ if (destroyed.get()) { logger.debug(DESTROYED getID() ""setScope""); return; } this.scope=scope; if (scope != SCOPE.REQUEST) { return; } logger.debug(""Changing broadcaster scope for {}. This broadcaster will be destroye"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,setSuspendPolicy,@Override public void  (long maxSuspendResource POLICY policy){ this.maxSuspendResource.set(maxSuspendResource); this.policy=policy; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,spawnReactor,protected void  (){ killReactiveThreads(); int threads=outOfOrderBroadcastSupported.get() ? reactiveThreadsCount() : 1; notifierFuture=new Future<?>[threads]; if (outOfOrderBroadcastSupported.get()) { asyncWriteFuture=new Future<?>[threads]; for (int i=0; i < threads; i++) { notifierFuture[i]=bc.getExecutorService().submit(getBroadcastHandler()); asyncWriteFuture[i]=bc.getAsyncWriteService().submit(getAsyncWriteHandler(uniqueWriteQueue)); } } else { notifierFuture[0]=bc.getExecutorService().submit(getBroadcastHandler()); } dispatchThread.set(threads); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,start,"protected void  (){ if (!initialized.get()) { logger.warn(""Broadcaster {} not initialized"" getID()); } if (!started.getAndSet(true)) { bc.getBroadcasterCache().start(); if (notifierFuture == null && asyncWriteFuture == null) { spawnReactor(); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,toString,"@Override public String  (){ return ""AsyncWriteToken{"" + ""resource="" + resource + ""  msg=""+ msg+ ""  future=""+ future+ '}'; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,translateTimeUnit,private long  (long period TimeUnit tu){ if (period == -1) return period; switch (tu) { case SECONDS: return TimeUnit.MILLISECONDS.convert(period TimeUnit.SECONDS); case MINUTES: return TimeUnit.MILLISECONDS.convert(period TimeUnit.MINUTES); case HOURS: return TimeUnit.MILLISECONDS.convert(period TimeUnit.HOURS); case DAYS: return TimeUnit.MILLISECONDS.convert(period TimeUnit.DAYS); case MILLISECONDS: return period; case MICROSECONDS: return TimeUnit.MILLISECONDS.convert(period TimeUnit.MICROSECONDS); case NANOSECONDS: return TimeUnit.MILLISECONDS.convert(period TimeUnit.NANOSECONDS); } return period; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\DefaultBroadcaster.java,writeQueues,public ConcurrentHashMap<String WriteQueue>  (){ return writeQueues; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\HeartbeatAtmosphereResourceEvent.java,HeartbeatAtmosphereResourceEvent,public  (final AtmosphereResourceImpl resource){ super(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\MetaBroadcaster.java,ThirtySecondsCache,public  (MetaBroadcaster metaBroadcaster AtmosphereConfig config){ this.metaBroadcaster=metaBroadcaster; ExecutorsFactory.getScheduler(config).scheduleAtFixedRate(this 0 30 TimeUnit.SECONDS); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionSupport.java,SessionSupport,public  (){ initializationHint=true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionSupport.java,sessionCreated,"@Override public void  (HttpSessionEvent se){ logger.trace(""Session created""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionSupport.java,sessionDestroyed,"@Override public void  (HttpSessionEvent se){ logger.trace(""Session destroyed""); try { HttpSession s=se.getSession(); BroadcasterFactory f=(BroadcasterFactory)s.getAttribute(FrameworkConfig.BROADCASTER_FACTORY); if (f != null) { s.setAttribute(FrameworkCo"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,SessionTimeoutRestorer,public  (AtmosphereConfig config int timeout){ this.timeout=timeout; String s=config.getInitParameter(ApplicationConfig.SESSION_MAX_INACTIVE_INTERVAL); if (s != null) { internalSessionTimeout=Integer.valueOf(s); } else { internalSessionTimeout=-1; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,refreshTimeout,private synchronized void  (HttpSession session){ if (requestCount.get() > 0) session.setMaxInactiveInterval(internalSessionTimeout); else session.setMaxInactiveInterval(timeout); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,restore,"public void  (HttpSession session){ int count=requestCount.decrementAndGet(); logger.trace(""requestCount <= {}"" requestCount); if (count == 0) refreshTimeout(session); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,sessionWillPassivate,@Override public void  (HttpSessionEvent hse){ requestCount.set(0); refreshTimeout(hse.getSession()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,setup,"public void  (HttpSession session){ int oldCount=requestCount.getAndIncrement(); logger.trace(""requestCount => {}"" requestCount); if (oldCount == 0) refreshTimeout(session); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutRestorer.java,toString,"@Override public String  (){ StringBuilder sb=new StringBuilder(); sb.append(""SessionTimeoutRestorer[timeout=""); sb.append(timeout); sb.append(""  requestCount=""); sb.append(requestCount.get()); sb.append(']'); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutSupport.java,get,private static SessionTimeoutRestorer  (HttpSession s){ return (SessionTimeoutRestorer)s.getAttribute(KEY); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutSupport.java,getOrCreate,private static SessionTimeoutRestorer  (AtmosphereConfig config HttpSession s){ SessionTimeoutRestorer restorer=(SessionTimeoutRestorer)s.getAttribute(KEY); if (restorer == null) { restorer=new SessionTimeoutRestorer(config s.getMaxInactiveInterval()); s.setAttribute(KEY restorer); } return restorer; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutSupport.java,restoreTimeout,public static void  (HttpServletRequest request){ restoreTimeout(request.getSession(false)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\SessionTimeoutSupport.java,setupTimeout,"public static void  (AtmosphereConfig config HttpSession session){ if (session == null) return; try { SessionTimeoutRestorer restorer=getOrCreate(config session); restorer.setup(session); } catch ( Exception e) { logger.trace("""" e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,broadcasterFactory,"public static BroadcasterFactory  (){ if (factoryDuplicate) { throw new IllegalStateException(""More than one instance has been stored. Universe cannot be used.""); } return factory; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,framework,"public static AtmosphereFramework  (){ if (frameworkDuplicate) { throw new IllegalStateException(""More than one instance has been stored. Universe cannot be used.""); } return framework; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,metaBroadcaster,"public static DefaultMetaBroadcaster  (){ if (metaBroadcasterDuplicate) { throw new IllegalStateException(""More than one instance has been stored. Universe cannot be used.""); } return metaBroadcaster; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,resourceFactory,"public static AtmosphereResourceFactory  (){ if (resourceFactoryDuplicate) { throw new IllegalStateException(""More than one instance has been stored. Universe cannot be used.""); } return resourceFactory; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,sessionFactory,"public static AtmosphereResourceSessionFactory  (){ if (sessionFactoryDuplicate) { throw new IllegalStateException(""More than one instance has been stored. Universe cannot be used.""); } return sessionFactory; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\Universe.java,sessionResourceFactory,public static void  (AtmosphereResourceSessionFactory a){ if (sessionFactory != null) { sessionFactoryDuplicate=true; } sessionFactory=a; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,createProcessor,"private WebSocketProcessor  (AtmosphereFramework framework){ WebSocketProcessor processor=null; String webSocketProcessorName=framework.getWebSocketProcessorClassName(); if (!webSocketProcessorName.equalsIgnoreCase(DefaultWebSocketProcessor.class.getName())) { try { processor=framework.newClassInstance(WebSocketProcessor.class (Class<WebSocketProcessor>)IOUtils.loadClass(getClass() webSocketProcessorName)); } catch ( Exception ex) { logger.error(""Unable to create {}"" webSocketProcessorName); processor=new DefaultWebSocketProcessor(); } } if (processor == null) { processor=new DefaultWebSocketProcessor(); } processor.configure(framework.getAtmosphereConfig()); return processor; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,destroy,public synchronized void  (){ for ( WebSocketProcessor processor : processors.values()) { processor.destroy(); } processors.clear(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,getDefault,public final static synchronized WebSocketProcessorFactory  (){ if (factory == null) { factory=new WebSocketProcessorFactory(); } return factory; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,getWebSocketProcessor,public WebSocketProcessor  (AtmosphereFramework framework){ WebSocketProcessor processor=processors.get(framework); if (processor == null) { synchronized (framework) { processor=createProcessor(framework); processors.put(framework processor); } } return processor; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\runtime\WebSocketProcessorFactory.java,processors,public Map<AtmosphereFramework WebSocketProcessor>  (){ return processors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,AbstractBroadcasterProxy,"public  (){ try { Class jerseyBroadcasterUtil=Class.forName(""org.atmosphere.jersey.util.JerseyBroadcasterUtil""); jerseyBroadcast=jerseyBroadcasterUtil.getMethod(""broadcast"" new Class[]{AtmosphereResource.class AtmosphereResourceEvent.class Broadcaster.class}); } catch ( Exception e) { logger.trace("""" e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,b,"protected Future<O ject> b(Object msg){ if (destroyed.get()) { logger.warn(""This Broadcaster has been destroyed and cannot be used {}"" getID()); return null; } start(); BroadcasterFuture<Object> f=new BroadcasterFuture<Object>(msg); try { outgoingBroadcast(msg); } finally { futureDone(f); } return f; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,broadcast,"@Override public Future<Object>  (Object msg Set<AtmosphereResource> subset){ logger.warn(""This feature is not supported with {}"" subset.iterator().next().getBroadcaster().getClass().getName()); return b(msg); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,broadcastReceivedMessage,"protected void  (Object message){ try { Object newMsg=filter(message); if (newMsg != null) { push(new Deliver(newMsg new BroadcasterFuture<Object>(newMsg) message)); } } catch ( Throwable t) { logger.error(""failed to push message: "" + message t); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AbstractBroadcasterProxy.java,getBroadcastHandler,"@Override protected Runnable  (){ return new Runnable(){ public void run(){ try { incomingBroadcast(); } catch ( Throwable t) { logger.warn(""incomingBroadcast Exception. Broadcaster will be broken unless reconfigured"" t); destroy(); return; } } } ; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,FocusPoint,public  (String name FocusPoint parentFocusPoint){ this(name); this.parentFocusPoint=parentFocusPoint; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,encode,"private String  (String name){ if (name == null) name=""""; try { return URLEncoder.encode(name ""UTF-8""); } catch ( UnsupportedEncodingException e) { return name; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,getContentTitle,private void  (StringBuffer titleBuffer FocusPoint focusPoint){ FocusPoint parentFocusPoint=focusPoint.getParentFocusPoint(); if (parentFocusPoint != null) { getContentTitle(titleBuffer parentFocusPoint); titleBuffer.append(TITLE_SEPARATOR); } titleBuffer.append(encode(focusPoint.getName())); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,getContentURI,private void  (StringBuffer contentURIBuffer FocusPoint focusPoint){ FocusPoint parentFocuPoint=focusPoint.getParentFocusPoint(); if (parentFocuPoint != null) { getContentURI(contentURIBuffer parentFocuPoint); } contentURIBuffer.append(URI_SEPARATOR); contentURIBuffer.append(encode(focusPoint.getName())); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,getParentFocusPoint,public FocusPoint  (){ return parentFocusPoint; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\FocusPoint.java,setParentTrackPoint,public void  (FocusPoint parentFocusPoint){ this.parentFocusPoint=parentFocusPoint; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,HTTPGetMethod," (){ if (uaName == null) { uaName=""Java/"" + System.getProperty(""java.version""); osString=System.getProperty(""os.arch""); if (osString == null || osString.length() < 1) { osString=""""; } else { osString+=""; ""; osString+=System.getProperty(""os.name"") + "" "" + System.getProperty(""os.version""); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,getResponseCode,protected int  (HttpURLConnection urlConnection) throws IOException { return urlConnection.getResponseCode(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,logError,"private void  (String errorMesssage){ logger.trace(""{}"" errorMesssage); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,logMessage,"private void  (String message){ logger.trace(""{}"" message); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,openURLConnection,private HttpURLConnection  (URL url) throws IOException { return (HttpURLConnection)url.openConnection(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\HTTPGetMethod.java,request,"public void  (String urlString){ HttpURLConnection urlConnection=null; try { URL url=new URL(urlString); urlConnection=openURLConnection(url); urlConnection.setInstanceFollowRedirects(true); urlConnection.setRequestMethod(GET_METHOD_NAME); urlConnection.setRequestProperty(""User-agent"" uaName + "" ("" + osString+ "")""); logger.debug(""Sending Server's information to Atmosphere's Google Analytics {} {}"" urlString uaName + "" ("" + osString+ "")""); urlConnection.connect(); int responseCode=getResponseCode(urlConnection); if (responseCode != HttpURLConnection.HTTP_OK) { logError(""JGoogleAnalytics: Error tracking  url="" + urlString); } else { logMessage(SUCCESS_MESSAGE); } } catch ( Exception e) { logError(e.getMessage()); } finally { if (urlConnection != null) { urlConnection.disconnect(); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\JGoogleAnalyticsTracker.java,JGoogleAnalyticsTracker,public  (String appName String appVersion String googleAnalyticsTrackingCode){ this.urlBuildingStrategy=new GoogleAnalytics_v1_URLBuildingStrategy(appName appVersion googleAnalyticsTrackingCode); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\JGoogleAnalyticsTracker.java,setUrlBuildingStrategy,public void  (URLBuildingStrategy urlBuildingStrategy){ this.urlBuildingStrategy=urlBuildingStrategy; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\JGoogleAnalyticsTracker.java,trackSynchronously,public void  (FocusPoint focusPoint){ httpRequest.request(urlBuildingStrategy.buildURL(focusPoint)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\ModuleDetection.java,check,static boolean  (String clazz){ try { Class.forName(clazz); return true; } catch ( ClassNotFoundException e) { return false; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\ModuleDetection.java,detect,"public final static String  (){ for ( Map.Entry<String String> e : modules.entrySet()) { if (check(e.getValue())) { return e.getKey(); } } return ""runtime""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,ClassFileBuffer," (final int initialCapacity){ if (initialCapacity < 1) { throw new IllegalArgumentException(""initialCapacity < 1: "" + initialCapacity); } this.buffer=new byte[initialCapacity]; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,destroy,public void  (){ buffer=null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,read,private int  (){ return buffer[pointer++] & 0xff; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readBoolean,@Override public boolean  () throws IOException { return readByte() != 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readByte,@Override public byte  () throws IOException { if (pointer >= size) { throw new EOFException(); } return buffer[pointer++]; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readChar,@Override public char  () throws IOException { return (char)readUnsignedShort(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readDouble,@Override public double  () throws IOException { return Double.longBitsToDouble(readLong()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readFloat,@Override public float  () throws IOException { return Float.intBitsToFloat(readInt()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readFrom,public void  (final InputStream in) throws IOException { pointer=0; size=0; int n; do { n=in.read(buffer size buffer.length - size); if (n > 0) { size+=n; } resizeIfNeeded(); } while (n >= 0); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readFully,@Override public void  (final byte bytes[] final int offset final int length) throws IOException { if (length < 0 || offset < 0 || offset + length > bytes.length) { throw new IndexOutOfBoundsException(); } if (pointer + length > size) { throw new EOFExcep
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readInt,@Override public int  () throws IOException { if (pointer + 4 > size) { throw new EOFException(); } return (read() << 24) + (read() << 16) + (read() << 8)+ read(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readLine,"@Override @Deprecated public String  () throws IOException { throw new UnsupportedOperationException(""readLine() is deprecated and not supported""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readLong,@Override public long  () throws IOException { if (pointer + 8 > size) { throw new EOFException(); } return (read() << 56) + (read() << 48) + (read() << 40)+ (read() << 32)+ (read() << 24)+ (read() << 16)+ (read() << 8)+ read(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readShort,@Override public short  () throws IOException { return (short)readUnsignedShort(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readUTF,@Override public String  () throws IOException { return DataInputStream.readUTF(this); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readUnsignedByte,@Override public int  () throws IOException { if (pointer >= size) { throw new EOFException(); } return read(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,readUnsignedShort,@Override public int  () throws IOException { if (pointer + 2 > size) { throw new EOFException(); } return (read() << 8) + read(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,resizeIfNeeded,private void  (){ if (size >= buffer.length) { final byte[] newBuffer=new byte[buffer.length * 2]; System.arraycopy(buffer 0 newBuffer 0 buffer.length); buffer=newBuffer; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,seek,"public void  (final int position) throws IOException { if (position < 0) { throw new IllegalArgumentException(""position < 0: "" + position); } if (position > size) { throw new EOFException(); } this.pointer=position; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,size,public int  (){ return size; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileBuffer.java,skipBytes,@Override public int  (final int n) throws IOException { seek(pointer + n); return n; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,ClassFileIterator, (final InputStream[] filesOrDirectories final String[] pkgNameFilter) throws IOException { this.fileIterator=null; this.pkgNameFilter=pkgNameFilter; this.inputStreamIterator=new InputStreamIterator(filesOrDirectories); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,classPath,"private static File[]  (){ final String[] fileNames=System.getProperty(""java.class.path"").split(File.pathSeparator); final File[] files=new File[fileNames.length]; for (int i=0; i < files.length; ++i) { files[i]=new File(fileNames[i]); } return files; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,endsWithIgnoreCase,private static boolean  (final String value final String suffix){ final int n=suffix.length(); return value.regionMatches(true value.length() - n suffix 0 n); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,getName,public String  (){ return zipIterator == null ? fileIterator.getFile().getPath() : zipIterator.getEntry().getName(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,isFile,public boolean  (){ return isFile; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,isZipFile,private boolean  (File file) throws IOException { DataInputStream in=null; try { in=new DataInputStream(new FileInputStream(file)); int n=in.readInt(); in.close(); return n == 0x504b0304; } catch ( Exception ex) { if (in != null) in.close(); return false; } finally { if (in != null) { try { in.close(); } catch ( IOException ex) { } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ClassFileIterator.java,next,"public InputStream  () throws IOException { try { while (true) { if (fileIterator != null) { if (zipIterator == null) { final File file=fileIterator.next(); if (file == null) { return null; } else { final String name=file.getName(); if (name.endsWith("".class"")) { isFile=true; return new FileInputStream(file); } else if (fileIterator.isRootFile() && (endsWithIgnoreCase(name "".jar"") || isZipFile(file)) && file.exists()) { try { zipIterator=new ZipFileIterator(new ZipFile(file) pkgNameFilter); } catch ( Exception ex) { logger.debug(""Unable to construct file {}"" file); return null; } } } } else { final InputStream is=zipIterator.next(); if (is == null) { zipIterator=null; } else { isFile=false; return is; } } } else { return inputStreamIterator.next(); } } } catch ( Exception ex) { logger.error(""Unable to scan classes"" ex); return null; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\AnnotationDetector.java,AnnotationDetector,"public  (final Reporter reporter){ final Class<? extends Annotation>[] a=reporter.annotations(); annotations=new HashMap<String Class<? extends Annotation>>(a.length); for (int i=0; i < a.length; ++i) { annotations.put(""L"" + a[i].getName().replace('.' '/') + "";"" a[i]); } if (reporter instanceof TypeReporter) { typeReporter=(TypeReporter)reporter; } if (reporter instanceof FieldReporter) { fieldReporter=(FieldReporter)reporter; } if (reporter instanceof MethodReporter) { methodReporter=(MethodReporter)reporter; } if (typeReporter == null && fieldReporter == null && methodReporter == null) { throw new AssertionError(""No reporter defined""); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\InputStreamIterator.java,InputStreamIterator,public  (final InputStream... filesOrDirectories){ addReverse(filesOrDirectories); rootCount=stack.size(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\InputStreamIterator.java,addReverse,private void  (final InputStream[] files){ for (int i=files.length - 1; i >= 0; --i) { stack.add(files[i]); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\InputStreamIterator.java,next,public InputStream  () throws IOException { if (stack.isEmpty()) { current=null; return null; } else { current=stack.removeLast(); return current; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\GoogleAnalytics_v1_URLBuildingStrategy.java,GoogleAnalytics_v1_URLBuildingStrategy,public  (String appName String appVersion String googleAnalyticsTrackingCode){ this.googleAnalyticsTrackingCode=googleAnalyticsTrackingCode; this.appFocusPoint=new FocusPoint(appVersion new FocusPoint(appName)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\GoogleAnalytics_v1_URLBuildingStrategy.java,buildURL,"public String  (FocusPoint focusPoint){ int cookie=random.nextInt(); int randomValue=random.nextInt(2147483647) - 1; long now=new Date().getTime(); focusPoint.setParentTrackPoint(appFocusPoint); StringBuilder url=new StringBuilder(TRACKING_URL_Prefix); url.append(""?utmwv=1""); url.append(""&utmn="" + random.nextInt()); url.append(""&utmcs=UTF-8""); url.append(""&utmsr=1440x900""); url.append(""&utmsc=32-bit""); url.append(""&utmul=en-us""); url.append(""&utmje=1""); url.append(""&utmfl=9.0%20%20r28""); url.append(""&utmcr=1""); url.append(""&utmdt="" + focusPoint.getContentTitle()); url.append(""&utmhn="" + hostName); url.append(""&utmr="" + refererURL); url.append(""&utmp="" + focusPoint.getContentURI()); url.append(""&utmac="" + googleAnalyticsTrackingCode); url.append(""&utmcc=__utma%3D'"" + cookie + "".""+ randomValue+ "".""+ now+ "".""+ now+ "".""+ now+ "".2%3B%2B__utmb%3D""+ cookie+ ""%3B%2B__utmc%3D""+ cookie+ ""%3B%2B__utmz%3D""+ cookie+ "".""+ now+ "".2.2.utmccn%3D(direct)%7Cutmcsr%3D(direct)%7Cutmcmd%3D(none)%3B%2B__utmv%3D""+ cookie); return url.toString(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\analytics\GoogleAnalytics_v1_URLBuildingStrategy.java,setRefererURL,public void  (String refererURL){ this.refererURL=refererURL; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,FileIterator,public  (final File... filesOrDirectories){ addReverse(filesOrDirectories); rootCount=stack.size(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,addReverse,private void  (final File[] files){ if (files == null) return; for (int i=files.length - 1; i >= 0; --i) { stack.add(files[i]); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,getFile,public File  (){ return current; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,isRootFile,public boolean  (){ if (current == null) { throw new NoSuchElementException(); } return stack.size() < rootCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\FileIterator.java,next,public File  () throws IOException { if (stack.isEmpty()) { current=null; return null; } else { current=stack.removeLast(); if (current.isDirectory()) { if (stack.size() < rootCount) { rootCount=stack.size(); } addReverse(current.listFiles()); return next(); } else { return current; } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,addFilter,"public void  (FilterConfigImpl filterConfig){ if (filterConfig.getFilter() == null) { throw new NullPointerException(""Filter is null""); } if (n == filters.length) { FilterConfigImpl[] newFilters=new FilterConfigImpl[n + INCREMENT]; System.arraycopy(filters 0 newFilters 0 n); filters=newFilters; } filters[n++]=filterConfig; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,destroy,public void  (){ if (n > 0 && filters != null) { for (int i=0; i < filters.length; i++) { if (filters[i] != null) { filters[i].recycle(); } } filters=null; } if (servlet != null) { servlet.destroy(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,doFilter,"public void  (ServletRequest request ServletResponse response) throws IOException  ServletException { AtomicInteger pos=((AtomicInteger)request.getAttribute(""pos"")); if (pos.get() < n) { FilterConfigImpl filterConfig=filters[pos.getAndIncrement()]; Filter filter=null; try { filter=filterConfig.getFilter(); filter.doFilter(request response this); } catch ( IOException e) { throw e; } catch ( ServletException e) { throw e; } catch ( RuntimeException e) { throw e; } catch ( Throwable e) { throw new ServletException(""Throwable"" e); } return; } try { if (servlet != null) { servlet.service(request response); } else { RequestDispatcher rd=configImpl.getServletContext().getNamedDispatcher(""default""); if (rd == null) { throw new ServletException(""No Servlet Found""); } rd.forward(request response); } } catch ( IOException e) { throw e; } catch ( ServletException e) { throw e; } catch ( RuntimeException e) { throw e; } catch ( Throwable e) { throw new ServletException(""Throwable"" e); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,getFilter,public FilterConfigImpl  (int i){ return filters[i]; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,getServlet,public Servlet  (){ return servlet; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,getServletConfig,public ServletConfig  (){ return configImpl; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,init,public void  () throws ServletException { for ( FilterConfigImpl f : filters) { if (f != null) { f.getFilter().init(f); } } if (servlet != null) { servlet.init(configImpl); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,invokeFilterChain,"public void  (ServletRequest request ServletResponse response) throws IOException  ServletException { request.setAttribute(""pos"" new AtomicInteger(0)); doFilter(request response); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereFilterChain.java,setServlet,public void  (ServletConfig configImpl Servlet servlet){ this.configImpl=configImpl; this.servlet=servlet; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ZipFileIterator.java,ZipFileIterator, (final ZipFile zipFile final String[] entryNameFilter) throws IOException { this.zipFile=zipFile; this.entryNameFilter=entryNameFilter; this.entries=zipFile.entries(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ZipFileIterator.java,accept,private boolean  (final ZipEntry entry){ if (entry.isDirectory()) { return false; } if (entryNameFilter == null) { return true; } for ( final String filter : entryNameFilter) { if (entry.getName().startsWith(filter)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ZipFileIterator.java,getEntry,public ZipEntry  (){ return current; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\annotation\ZipFileIterator.java,next,public InputStream  () throws IOException { while (entries.hasMoreElements()) { current=entries.nextElement(); if (accept(current)) { return zipFile.getInputStream(current); } } try { zipFile.close(); } catch ( IOException ex) { } return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereConfigReader.java,getInstance,public static AtmosphereConfigReader  (){ return instance; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\AtmosphereConfigReader.java,parse,"private AtmosphereConfig  (AtmosphereConfig config Document document){ Element element=document.getDocumentElement(); NodeList atmosphereHandlers=element.getElementsByTagName(""atmosphere-handler""); for (int i=0; i < atmosphereHandlers.getLength(); i++) { AtmosphereHandlerConfig atmoHandler=new AtmosphereHandlerConfig(); Node root=atmosphereHandlers.item(i); for (int j=0; j < root.getAttributes().getLength(); j++) { Node attribute=root.getAttributes().item(j); if (attribute.getNodeName().equals(""support-session"")) { atmoHandler.setSupportSession(attribute.getNodeValue()); } else if (attribute.getNodeName().equals(""context-root"")) { atmoHandler.setContextRoot(attribute.getNodeValue()); } else if (attribute.getNodeName().equals(""class-name"")) { atmoHandler.setClassName(attribute.getNodeValue()); } else if (attribute.getNodeName().equals(""broadcaster"")) { atmoHandler.setBroadcaster(attribute.getNodeValue()); } else if (attribute.getNodeName().equals(""broadcasterCache"")) { atmoHandler.setBroadcasterCache(attribute.getNodeValue()); } else if (attribute.getNodeName().equals(""broadcastFilterClasses"")) { String[] values=attribute.getNodeValue().split("" ""); for ( String value : values) { atmoHandler.getBroadcastFilterClasses().add(value); } } else if (attribute.getNodeName().equals(""comet-support"")) { atmoHandler.setCometSupport(attribute.getNodeValue()); } else if (attribute.getNodeName().equals(""interceptorClasses"")) { String[] values=attribute.getNodeValue().split("" ""); for ( String value : values) { atmoHandler.getAtmosphereInterceptorClasses().add(value); } } } NodeList list=root.getChildNodes(); for (int j=0; j < list.getLength(); j++) { Node n=list.item(j); if (n.getNodeName().equals(""property"")) { String param=n.getAttributes().getNamedItem(""name"").getNodeValue(); String value=n.getAttributes().getNamedItem(""value"").getNodeValue(); atmoHandler.getProperties().add(new AtmosphereHandlerProperty(param value)); } else if (n.getNodeName().equals(""applicationConfig"")) { String param=null; String value=null; for (int k=0; k < n.getChildNodes().getLength(); k++) { Node n2=n.getChildNodes().item(k); if (n2.getNodeName().equals(""param-name"")) { param=n2.getFirstChild().getNodeValue(); } else if (n2.getNodeName().equals(""param-value"")) { if (n2 != null) { value=n2.getFirstChild().getNodeValue(); } } } if (param != null) { atmoHandler.getApplicationConfig().add(new ApplicationConfiguration(param value)); } } else if (n.getNodeName().equals(""frameworkConfig"")) { String param=null; String value=null; for (int k=0; k < n.getChildNodes().getLength(); k++) { Node n2=n.getChildNodes().item(k); if (n2.getNodeName().equals(""param-name"")) { param=n2.getFirstChild().getNodeValue(); } else if (n2.getNodeName().equals(""param-value"")) { if (n2 != null) { value=n2.getFirstChild().getNodeValue(); } } } if (param != null) { atmoHandler.getFrameworkConfig().add(new FrameworkConfiguration(param value)); } } } config.getAtmosphereHandlerConfig().add(atmoHandler); } return config; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ByteArrayAsyncWriter.java,close,@Override public void  (AtmosphereResponse r){ o.reset(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ByteArrayAsyncWriter.java,stream,public ByteArrayOutputStream  (){ return o; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ByteArrayAsyncWriter.java,write,@Override public AsyncIOWriter  (AtmosphereResponse r byte[] data int offset int length) throws IOException { o.write(data offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,ChunkConcatReader,public  (String key){ this.key=key; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,addChunk,void  (Reader chunk boolean continued){ synchronized (readers) { readers.addLast(chunk); readers.notifyAll(); this.continued=continued; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,close,@Override public void  () throws IOException { if (closed) { return; } for ( Reader r : readers) { try { r.close(); } catch ( IOException e) { } } releaseReader(key); closed=true; synchronized (readers) { readers.notifyAll(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,getReader,public Reader  (String key boolean create){ ChunkConcatReader reader=readersPool.get(key); if (create && reader == null) { reader=new ChunkConcatReader(key); readersPool.put(key reader); } return reader; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,getReadersPool,Map<String ChunkConcatReader>  (){ return readersPool; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,getTimeout,public long  (){ return timeout; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,read,@Override public int  (char[] cbuf int off int len) throws IOException { int count=0; while (!closed && count < len) { if (readers.isEmpty()) { if (continued) { if (count > 0) { break; } synchronized (readers) { if (!readers.isEmpty()) { continue; } try {
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,ready,@Override public boolean  () throws IOException { if (readers.isEmpty()) { return false; } return readers.getFirst().ready(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,releaseReader,void  (String key){ readersPool.remove(key); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ChunkConcatReaderPool.java,setTimeout,public void  (long timeout){ this.timeout=timeout; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\DefaultEndpointMapper.java,computePath,public String  (AtmosphereRequest req){ return Utils.pathInfo(req); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\DefaultEndpointMapper.java,map,"@Override public U  (String path Map<String U> handlers){ if (path == null || path.isEmpty()) { path=""/""; } U handler=match(path handlers); if (handler == null) { handler=match(path + (path.endsWith(""/"") ? ""all"" : ""/all"") handlers); if (handler == null) {"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\DefaultEndpointMapper.java,match,"protected U  (String path Map<String U> handlers){ U handler=handlers.get(path); if (handler == null) { final Map<String String> m=new HashMap<String String>(); for ( Map.Entry<String U> e : handlers.entrySet()) { UriTemplate t=null; try { t=new UriTemplate(e.getKey()); logger.trace(""Trying to map {} to {}"" t path); if (t.match(path m)) { handler=e.getValue(); logger.trace(""Mapped {} to {}"" t e.getValue()); break; } } finally { if (t != null) t.destroy(); } } } return handler; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,CookieDecoder,protected  (boolean strict){ this.strict=strict; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,ServerCookieDecoder,private  (boolean strict){ super(strict); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,alreadyQuoted,"public static boolean  (String value){ if (value == null || value.length() < 2) { return false; } return (value.charAt(0) == '\""' && value.charAt(value.length() - 1) == '\""'); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,decode,public void  (String header Set<Cookie> cookies){ final int headerLen=header.length(); if (headerLen == 0) { return; } int i=0; boolean rfc2965Style=false; if (header.regionMatches(true 0 RFC2965_VERSION 0 RFC2965_VERSION.length())) { i=header.indexOf(';') + 1; rfc2965Style=true; } loop: for (; ; ) { for (; ; ) { if (i == headerLen) { break loop; } char c=header.charAt(i); if (c == '\t' || c == '\n' || c == 0x0b || c == '\f' || c == '\r' || c == ' ' || c == ' ' || c == ';') { i++; continue; } break; } int nameBegin=i; int nameEnd=i; int valueBegin=-1; int valueEnd=-1; if (i != headerLen) { keyValLoop: for (; ; ) { char curChar=header.charAt(i); if (curChar == ';') { nameEnd=i; valueBegin=valueEnd=-1; break keyValLoop; } else if (curChar == '=') { nameEnd=i; i++; if (i == headerLen) { valueBegin=valueEnd=0; break keyValLoop; } valueBegin=i; int semiPos=header.indexOf(';' i); valueEnd=i=semiPos > 0 ? semiPos : headerLen; break keyValLoop; } else { i++; } if (i == headerLen) { nameEnd=headerLen; valueBegin=valueEnd=-1; break; } } } if (rfc2965Style && (header.regionMatches(nameBegin RFC2965_PATH 0 RFC2965_PATH.length()) || header.regionMatches(nameBegin RFC2965_DOMAIN 0 RFC2965_DOMAIN.length()) || header.regionMatches(nameBegin RFC2965_PORT 0 RFC2965_PORT.length()))) { continue; } Cookie cookie=initCookie(header nameBegin nameEnd valueBegin valueEnd); if (cookie != null) { cookies.add(cookie); } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,escapeDoubleQuotes,"private static String  (String s int beginIndex int endIndex){ if (s == null || s.length() == 0 || s.indexOf('""') == -1) { return s; } StringBuilder b=new StringBuilder(); for (int i=beginIndex; i < endIndex; i++) { char c=s.charAt(i); if (c == '\\') { b.append(c); if (++i >= endIndex) { throw new IllegalArgumentException(""Invalid escape character in cookie value.""); } b.append(s.charAt(i)); } else if (c == '""') { b.append('\\').append('""'); } else { b.append(c); } } return b.toString(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,firstInvalidCookieNameOctet,static int  (CharSequence cs){ return firstInvalidOctet(cs VALID_COOKIE_NAME_OCTETS); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,firstInvalidCookieValueOctet,static int  (CharSequence cs){ return firstInvalidOctet(cs VALID_COOKIE_VALUE_OCTETS); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,firstInvalidOctet,static int  (CharSequence cs BitSet bits){ for (int i=0; i < cs.length(); i++) { char c=cs.charAt(i); if (!bits.get(c)) { return i; } } return -1; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,initCookie,protected Cookie  (String header int nameBegin int nameEnd int valueBegin int valueEnd){ if (nameBegin == -1 || nameBegin == nameEnd) { return null; } if (valueBegin == -1) { return null; } CharSequence wrappedValue=CharBuffer.wrap(header valueBegin valueEnd); CharSequence unwrappedValue=unwrapValue(wrappedValue); if (unwrappedValue == null) { return null; } final String name=header.substring(nameBegin nameEnd); if (strict && firstInvalidCookieNameOctet(name) >= 0) { return null; } if (strict && firstInvalidCookieValueOctet(unwrappedValue) >= 0) { return null; } Cookie cookie=new Cookie(name unwrappedValue.toString()); return cookie; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,isToken,public static boolean  (String value){ if (value == null) return true; int len=value.length(); for (int i=0; i < len; i++) { char c=value.charAt(i); if (c < 0x20 || c >= 0x7f || tspecials.indexOf(c) != -1) return false; } return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,maybeQuote,"private static void  (StringBuffer buf String value){ if (value == null || value.length() == 0) { buf.append(""\""\""""); } else if (alreadyQuoted(value)) { buf.append('""'); buf.append(escapeDoubleQuotes(value 1 value.length() - 1)); buf.append('""'); } else { buf.append(value); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,toString,"public static String  (Cookie c){ StringBuffer buf=new StringBuffer(); buf.append(c.getName()); buf.append(""=""); int newVersion=c.getVersion(); maybeQuote(buf c.getValue()); if (newVersion == 1) { buf.append(""; Version=1""); if (c.getComment() != null) { buf.append(""; Comment=""); maybeQuote(buf c.getComment()); } } if (c.getDomain() != null) { buf.append(""; Domain=""); maybeQuote(buf c.getDomain()); } if (c.getMaxAge() >= 0) { if (newVersion > 0) { buf.append(""; Max-Age=""); buf.append(c.getMaxAge()); } if (newVersion == 0) { buf.append(""; Expires=""); if (c.getMaxAge() == 0) { buf.append(ancientDate); } else { DateFormat df=new SimpleDateFormat(OLD_COOKIE_PATTERN Locale.US); df.setTimeZone(TimeZone.getTimeZone(""GMT"")); df.format(new Date(System.currentTimeMillis() + c.getMaxAge() * 1000L) buf new FieldPosition(0)); } } } if (c.getPath() != null) { buf.append(""; Path=""); maybeQuote(buf c.getPath()); } if (c.getSecure()) { buf.append(""; Secure""); } if (c.isHttpOnly()) { buf.append(""; HttpOnly""); } return buf.toString(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,unwrapValue,"static CharSequence  (CharSequence cs){ final int len=cs.length(); if (len > 0 && cs.charAt(0) == '""') { if (len >= 2 && cs.charAt(len - 1) == '""') { return len == 2 ? """" : cs.subSequence(1 len - 1); } else { return null; } } return cs; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,validCookieAttributeValueOctets,private static BitSet  (){ BitSet bits=new BitSet(); for (int i=32; i < 127; i++) { bits.set(i); } bits.set(';' false); return bits; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,validCookieNameOctets,"private static BitSet  (){ BitSet bits=new BitSet(); for (int i=32; i < 127; i++) { bits.set(i); } int[] separators=new int[]{'(' ')' '<' '>' '@' ' ' ';' ':' '\\' '""' '/' '[' ']' '?' '=' '{' '}' ' ' '\t'}; for ( int separator : separators) { bits.set(separator false); } return bits; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,validCookieValueOctets,private static BitSet  (){ BitSet bits=new BitSet(); bits.set(0x21); for (int i=0x23; i <= 0x2B; i++) { bits.set(i); } for (int i=0x2D; i <= 0x3A; i++) { bits.set(i); } for (int i=0x3C; i <= 0x5B; i++) { bits.set(i); } for (int i=0x5D; i <= 0x7E; i++) { bits.set(i); } return bits; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\CookieUtil.java,validateAttributeValue,"static String  (String name String value){ if (value == null) { return null; } value=value.trim(); if (value.isEmpty()) { return null; } int i=firstInvalidOctet(value VALID_COOKIE_ATTRIBUTE_VALUE_OCTETS); if (i != -1) { throw new IllegalArgumentException(name + "" contains the prohibited characters: "" + value.charAt(i)); } return value; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExcludeSessionBroadcaster.java,broadcast,public Future<Object>  (Object msg HttpSession s){ if (destroyed.get()) { return futureDone(msg); } Set<AtmosphereResource> subset=new HashSet<AtmosphereResource>(); subset.addAll(resources); for ( AtmosphereResource r : resources) { if (!r.getAtmosphereResourceEvent().isCancelled() && s.equals(r.getRequest().getSession())) { subset.remove(r); } } start(); Object newMsg=filter(msg); if (newMsg == null) { return futureDone(msg); } BroadcasterFuture<Object> f=new BroadcasterFuture<Object>(newMsg subset.size()); dispatchMessages(new Deliver(newMsg subset f msg)); return f; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExcludeSessionBroadcaster.java,initialize,public Broadcaster  (String id AtmosphereConfig config){ return super.initialize(id config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\DefaultUUIDProvider.java,generateUuid,@Override public String  (){ return UUID.randomUUID().toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,FakeHttpSession,public  (HttpSession session){ this(session.getId() session.getServletContext() session.getLastAccessedTime() session.getMaxInactiveInterval()); copyAttributes(session); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,copyAttributes,public FakeHttpSession  (HttpSession httpSession){ Enumeration<String> e=httpSession.getAttributeNames(); String k; while (e.hasMoreElements()) { k=e.nextElement(); if (k == null) continue; Object o=httpSession.getAttribute(k); if (o == null) continue; attributes.put(k o); } return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,destroy,public void  (){ attributes.clear(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getAttribute,@Override public Object  (String name){ if (!valid.get()) throw new IllegalStateException(); return attributes.get(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getAttributeNames,@Override public Enumeration<String>  (){ if (!valid.get()) throw new IllegalStateException(); return attributes.keys(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getCreationTime,@Override public long  (){ if (!valid.get()) throw new IllegalStateException(); return creationTime; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getId,@Override public String  (){ if (!valid.get()) throw new IllegalStateException(); return sessionId; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getLastAccessedTime,@Override public long  (){ if (!valid.get()) throw new IllegalStateException(); return 0; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getMaxInactiveInterval,@Override public int  (){ return maxInactiveInterval; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getServletContext,@Override public ServletContext  (){ return servletContext; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getSessionContext,@Override public HttpSessionContext  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getValue,@Override public Object  (String name){ if (!valid.get()) throw new IllegalStateException(); return attributes.get(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,getValueNames,@Override public String[]  (){ if (!valid.get()) throw new IllegalStateException(); return (String[])Collections.list(attributes.keys()).toArray(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,invalidate,@Override public void  (){ if (!valid.get()) throw new IllegalStateException(); valid.set(false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,isNew,@Override public boolean  (){ if (!valid.get()) throw new IllegalStateException(); return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,putValue,@Override public void  (String name Object value){ if (!valid.get()) throw new IllegalStateException(); attributes.put(name value); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,removeAttribute,@Override public void  (String name){ if (!valid.get()) throw new IllegalStateException(); attributes.remove(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,removeValue,@Override public void  (String name){ if (!valid.get()) throw new IllegalStateException(); attributes.remove(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,setAttribute,@Override public void  (String name Object value){ if (!valid.get()) throw new IllegalStateException(); attributes.put(name value); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FakeHttpSession.java,setMaxInactiveInterval,@Override public void  (int interval){ this.maxInactiveInterval=interval; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,AtmosphereThreadFactory,public  (boolean shared String name){ this.shared=shared; this.name=name; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,getAsyncOperationExecutor,"public static ExecutorService  (final AtmosphereConfig config final String name){ final boolean shared=config.framework().isShareExecutorServices(); if (!shared || config.properties().get(ASYNC_WRITE_THREAD_POOL) == null) { int numberOfAsyncThread=DEFAULT_ASYNC_THREAD; String s=config.getInitParameter(ApplicationConfig.BROADCASTER_ASYNC_WRITE_THREADPOOL_MAXSIZE); if (s != null) { numberOfAsyncThread=Integer.parseInt(s); } if (shared && numberOfAsyncThread == 1) { logger.warn(""Not enough numberOfAsyncThread for a shareable thread pool {}  "" + ""Setting it to a newCachedThreadPool"" numberOfAsyncThread); numberOfAsyncThread=-1; } AbstractExecutorService asyncWriteService; boolean useForkJoinPool=config.getInitParameter(USE_FORJOINPOOL true); logger.trace(""Max number of AsyncOp {}"" numberOfAsyncThread == -1 ? ""Unlimited"" : numberOfAsyncThread); String threadName=name + ""-AsyncOp-""; if (numberOfAsyncThread == -1) { asyncWriteService=!useForkJoinPool ? (ThreadPoolExecutor)Executors.newCachedThreadPool(new AtmosphereThreadFactory(shared threadName)) : new ForkJoinPool(shared threadName); } else { asyncWriteService=(ThreadPoolExecutor)Executors.newFixedThreadPool(numberOfAsyncThread new AtmosphereThreadFactory(shared threadName)); } keepAliveThreads(asyncWriteService config); if (shared) { config.properties().put(ASYNC_WRITE_THREAD_POOL asyncWriteService); } return asyncWriteService; } else { return (ExecutorService)config.properties().get(ASYNC_WRITE_THREAD_POOL); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,getMessageDispatcher,"public static ExecutorService  (final AtmosphereConfig config final String name){ final boolean shared=config.framework().isShareExecutorServices(); boolean useForkJoinPool=config.getInitParameter(USE_FORJOINPOOL true); if (!shared || config.properties().get(BROADCASTER_THREAD_POOL) == null) { int numberOfMessageProcessingThread=DEFAULT_MESSAGE_THREAD; String s=config.getInitParameter(ApplicationConfig.BROADCASTER_MESSAGE_PROCESSING_THREADPOOL_MAXSIZE); if (s != null) { numberOfMessageProcessingThread=Integer.parseInt(s); } if (shared && numberOfMessageProcessingThread == 1) { logger.warn(""Not enough numberOfMessageProcessingThread for a shareable thread pool {}  "" + ""Setting it to a newCachedThreadPool"" numberOfMessageProcessingThread); numberOfMessageProcessingThread=-1; } AbstractExecutorService messageService; logger.trace(""Max number of DispatchOp {}"" numberOfMessageProcessingThread == -1 ? ""Unlimited"" : numberOfMessageProcessingThread); String threadName=name + ""-DispatchOp-""; if (numberOfMessageProcessingThread == -1) { messageService=!useForkJoinPool ? (ThreadPoolExecutor)Executors.newCachedThreadPool(new AtmosphereThreadFactory(shared threadName)) : new ForkJoinPool(shared threadName); } else { messageService=(ThreadPoolExecutor)Executors.newFixedThreadPool(numberOfMessageProcessingThread new AtmosphereThreadFactory(shared threadName)); } keepAliveThreads(messageService config); if (shared) { config.properties().put(BROADCASTER_THREAD_POOL messageService); } return messageService; } else { return (ExecutorService)config.properties().get(BROADCASTER_THREAD_POOL); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,getScheduler,"public static ScheduledExecutorService  (final AtmosphereConfig config){ final boolean shared=config.framework().isShareExecutorServices(); if (!shared || config.properties().get(SCHEDULER_THREAD_POOL) == null) { int threads=config.getInitParameter(ApplicationConfig.SCHEDULER_THREADPOOL_MAXSIZE Runtime.getRuntime().availableProcessors()); logger.trace(""Max number of Atmosphere-Scheduler {}"" threads); ScheduledExecutorService scheduler=Executors.newScheduledThreadPool(threads new ThreadFactory(){ private final AtomicInteger count=new AtomicInteger(); @Override public Thread newThread( final Runnable runnable){ Thread t=new Thread(runnable ""Atmosphere-Scheduler-"" + count.getAndIncrement()); t.setDaemon(true); return t; } } ); if (shared) { config.properties().put(SCHEDULER_THREAD_POOL scheduler); } keepAliveThreads((ThreadPoolExecutor)scheduler config); return scheduler; } else { return (ScheduledExecutorService)config.properties().get(SCHEDULER_THREAD_POOL); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,keepAliveThreads,private static void  (AbstractExecutorService t AtmosphereConfig config){ if (!ThreadPoolExecutor.class.isAssignableFrom(t.getClass())) { return; } ThreadPoolExecutor e=ThreadPoolExecutor.class.cast(t); int keepAlive=DEFAULT_KEEP_ALIVE; String s=config.getInitParameter(ApplicationConfig.EXECUTORFACTORY_KEEP_ALIVE); if (s != null) { keepAlive=Integer.parseInt(s); } e.setKeepAliveTime(keepAlive TimeUnit.SECONDS); e.allowCoreThreadTimeOut(config.getInitParameter(ApplicationConfig.ALLOW_CORE_THREAD_TIMEOUT true)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,newThread,"@Override public Thread  (final Runnable runnable){ Thread t=new Thread(runnable ""Atmosphere-Scheduler-"" + count.getAndIncrement()); t.setDaemon(true); return t; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ExecutorsFactory.java,reset,public final static void  (AtmosphereConfig config){ ExecutorService e=(ExecutorService)config.properties().get(ASYNC_WRITE_THREAD_POOL); if (e != null) { e.shutdown(); } config.properties().remove(ASYNC_WRITE_THREAD_POOL); e=(ExecutorService)config.properties().get(SCHEDULER_THREAD_POOL); if (e != null) { e.shutdown(); } config.properties().remove(SCHEDULER_THREAD_POOL); e=(ExecutorService)config.properties().get(BROADCASTER_THREAD_POOL); if (e != null) { e.shutdown(); } config.properties().remove(BROADCASTER_THREAD_POOL); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,ForkJoinPool,"public  (boolean shared final String threadName){ this.shared=shared; forkJoinPool=new java.util.concurrent.ForkJoinPool(Runtime.getRuntime().availableProcessors() new java.util.concurrent.ForkJoinPool.ForkJoinWorkerThreadFactory(){ @Override public java.util.concurrent.ForkJoinWorkerThread newThread( java.util.concurrent.ForkJoinPool pool){ return new JDK7ForkJoinWorkerThread(pool ForkJoinPool.this.shared threadName); } }  null false); logger.info(""Using ForkJoinPool {}. Set the {} to -1 to fully use its power."" forkJoinPool.getClass().getName() ApplicationConfig.BROADCASTER_ASYNC_WRITE_THREADPOOL_MAXSIZE); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,JDK7ForkJoinWorkerThread,"protected  (java.util.concurrent.ForkJoinPool pool boolean shared String threadName){ super(pool); setName((shared ? ""Atmosphere-Shared-"" : threadName) + count.getAndIncrement()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,awaitTermination,@Override public boolean  (long timeout TimeUnit unit) throws InterruptedException { return forkJoinPool.awaitTermination(timeout unit); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,execute,@Override public void  (Runnable command){ forkJoinPool.execute(command); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,isShutdown,@Override public boolean  (){ return forkJoinPool.isShutdown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,isTerminated,@Override public boolean  (){ return forkJoinPool.isTerminated(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,newThread,@Override public java.util.concurrent.ForkJoinWorkerThread  (java.util.concurrent.ForkJoinPool pool){ return new JDK7ForkJoinWorkerThread(pool ForkJoinPool.this.shared threadName); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,pool,public AbstractExecutorService  (){ return forkJoinPool; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,shutdown,@Override public void  (){ forkJoinPool.shutdown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ForkJoinPool.java,shutdownNow,@Override public List<Runnable>  (){ return forkJoinPool.shutdownNow(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,FilterConfigImpl,public  (ServletConfig sc){ this.sc=sc; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,getFilter,public Filter  (){ return filter; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,getFilterName,@Override public String  (){ return filterName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,getInitParameter,@Override public String  (String name){ return sc.getInitParameter(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,getInitParameterNames,@Override public Enumeration  (){ return sc.getInitParameterNames(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,getServletContext,@Override public ServletContext  (){ return sc.getServletContext(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,recycle,public void  (){ if (this.filter != null) { filter.destroy(); } this.filter=null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,setFilter,public void  (Filter filter){ this.filter=filter; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\FilterConfigImpl.java,setFilterName,public void  (String filterName){ this.filterName=filterName; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,QueryStringDecoder,@Deprecated public  (URI uri String charset){ this(uri Charset.forName(charset)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,addParam,private boolean  (Map<String List<String>> params String name String value){ if (nParams >= maxParams) { return false; } List<String> values=params.get(name); if (values == null) { values=new ArrayList<String>(1); params.put(name values); } values.add(value); nParams++; return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,decodeComponent,"@SuppressWarnings(""fallthrough"") public static String  (final String s final Charset charset){ if (s == null) { return """"; } final int size=s.length(); boolean modified=false; for (int i=0; i < size; i++) { final char c=s.charAt(i); switch (c) { case '%':"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,decodeHexNibble,private static char  (final char c){ if ('0' <= c && c <= '9') { return (char)(c - '0'); } else if ('a' <= c && c <= 'f') { return (char)(c - 'a' + 10); } else if ('A' <= c && c <= 'F') { return (char)(c - 'A' + 10); } else { return Character.MAX_VALUE; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,decodeParams,"private void  (String s){ Map<String List<String>> params=this.params=new LinkedHashMap<String List<String>>(); nParams=0; String name=null; int pos=0; int i; char c=0; for (i=0; i < s.length(); i++) { c=s.charAt(i); if (c == '=' && name == null) { if (pos != i) { name=decodeComponent(s.substring(pos i) charset); } pos=i + 1; } else if (c == '&') { if (name == null && pos != i) { if (!addParam(params decodeComponent(s.substring(pos i) charset) """")) { return; } } else if (name != null) { if (!addParam(params name decodeComponent(s.substring(pos i) charset))) { return; } name=null; } pos=i + 1; } } if (pos != i) { if (name == null) { if (!addParam(params decodeComponent(s.substring(pos i) charset) """")) { return; } } else { if (!addParam(params name decodeComponent(s.substring(pos i) charset))) { return; } } } else if (name != null) { if (!addParam(params name """")) { return; } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,getParameters,public Map<String List<String>>  (){ if (params == null) { if (hasPath) { int pathLength=getPath().length(); if (uri.length() == pathLength) { return Collections.emptyMap(); } decodeParams(uri.substring(pathLength + 1)); } else { if (uri.length() == 0) { return Collections.emptyMap(); } decodeParams(uri); } } return params; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\QueryStringDecoder.java,getPath,"public String  (){ if (path == null) { if (!hasPath) { return path=""""; } int pathEndPos=uri.indexOf('?'); if (pathEndPos < 0) { path=uri; } else { return path=uri.substring(0 pathEndPos); } } return path; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ReaderInputStream.java,ReaderInputStream,public  (Reader reader){ this(reader Charset.defaultCharset()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ReaderInputStream.java,close,@Override public void  () throws IOException { reader.close(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ReaderInputStream.java,fillBuffer,private void  () throws IOException { if (!endOfInput && (lastCoderResult == null || lastCoderResult.isUnderflow())) { encoderIn.compact(); int position=encoderIn.position(); int c=reader.read(encoderIn.array() position encoderIn.remaining()); if (c == -1) { endOfInput=true; } else { encoderIn.position(position + c); } encoderIn.flip(); } encoderOut.compact(); lastCoderResult=encoder.encode(encoderIn encoderOut endOfInput); encoderOut.flip(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ReaderInputStream.java,read,@Override public int  () throws IOException { for (; ; ) { if (encoderOut.hasRemaining()) { return encoderOut.get() & 0xFF; } else { fillBuffer(); if (endOfInput && !encoderOut.hasRemaining()) { return -1; } } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,accept,public boolean  (File d String name){ if (name.endsWith(lext)) { return true; } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,addJarsFromClassPath,"@SuppressWarnings(""unchecked"") public static void  (Vector<URL> jars String cp) throws IOException  MalformedURLException { String sep=System.getProperty(""path.separator""); String token; StringTokenizer st; if (cp != null) { st=new StringTokenizer(cp sep)"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,addProperty,"final public static boolean  (Object o String name String value){ String setter=""add"" + capitalize(name); return invokeProperty(o setter name value); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,addToClassPath,"@SuppressWarnings(""unchecked"") public static void  (Vector<URL> cpV String dir){ try { String cpComp[]=getFilesByExt(dir "".jar""); if (cpComp != null) { int jarCount=cpComp.length; for (int i=0; i < jarCount; i++) { URL url=getURL(dir cpComp[i]); if (url !"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,addToolsJar,"@SuppressWarnings(""unchecked"") public static void  (Vector<URL> v){ try { File f=new File(System.getProperty(""java.home"") + ""/../lib/tools.jar""); if (!f.exists()) { f=new File(System.getProperty(""java.home"") + ""/lib/tools.jar""); if (f.exists()) { logger.d"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,callMain,"public static void  (Class<?> c String args[]) throws Exception { Class<?> p[]=new Class[1]; p[0]=args.getClass(); @SuppressWarnings(""unchecked"") Method m=c.getMethod(""main"" p); m.invoke(c new Object[]{args}); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,callMethod0,"public static Object  (Object target String methodN) throws Exception { if (target == null) { debug(""Assert: Illegal params "" + target); return null; } if (dbg > 0) { debug(""callMethod0 "" + target.getClass().getName() + "".""+ methodN); } Class params[]=new Class[0]; Method m=findMethod(target.getClass() methodN params); if (m == null) { throw new NoSuchMethodException(target.getClass().getName() + "" "" + methodN); } return m.invoke(target emptyArray); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,callMethod1,"public static Object  (Object target String methodN Object param1 String typeParam1 ClassLoader cl) throws Exception { if (target == null || param1 == null) { debug(""Assert: Illegal params "" + target + "" ""+ param1); } if (dbg > 0) debug(""callMethod1 "" + target.getClass().getName() + "" ""+ param1.getClass().getName()+ "" ""+ typeParam1); Class<?> params[]=new Class[1]; if (typeParam1 == null) { params[0]=param1.getClass(); } else { params[0]=cl.loadClass(typeParam1); } Method m=findMethod(target.getClass() methodN params); if (m == null) { throw new NoSuchMethodException(target.getClass().getName() + "" "" + methodN); } return m.invoke(target new Object[]{param1}); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,callMethodN,"public static Object  (Object target String methodN Object params[] Class<?> typeParams[]) throws Exception { Method m=null; m=findMethod(target.getClass() methodN typeParams); if (m == null) { debug(""Can't find method "" + methodN + "" in ""+ target+ "" CLASS ""+ target.getClass()); return null; } Object o=m.invoke(target params); if (dbg > 0) { StringBuilder sb=new StringBuilder(); sb.append("""" + target.getClass().getName() + "".""+ methodN+ ""( ""); for (int i=0; i < params.length; i++) { if (i > 0) sb.append(""  ""); sb.append(params[i]); } sb.append("")""); debug(sb.toString()); } return o; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,capitalize,public static String  (String name){ if (name == null || name.length() == 0) { return name; } char chars[]=name.toCharArray(); chars[0]=Character.toUpperCase(chars[0]); return new String(chars); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,clear,public static void  (){ objectMethods.clear(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,convert,"public static Object  (String object Class<?> paramType){ Object result=null; if (""java.lang.String"".equals(paramType.getName())) { result=object; } else if (""java.lang.Integer"".equals(paramType.getName()) || ""int"".equals(paramType.getName())) { try { result=new Integer(object); } catch ( NumberFormatException ex) { } } else if (""java.lang.Boolean"".equals(paramType.getName()) || ""boolean"".equals(paramType.getName())) { result=new Boolean(object); } else if (""java.net.InetAddress"".equals(paramType.getName())) { try { result=InetAddress.getByName(object); } catch ( UnknownHostException exc) { debug(""Unable to resolve host name:"" + object); } } else { debug(""Unknown type "" + paramType.getName()); } if (result == null) { throw new IllegalArgumentException(""Can't convert argument: "" + object); } return result; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,debug,"static void  (String s){ logger.debug(""IntrospectionUtils: {}"" s); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,execute,"public static void  (Object proxy String method) throws Exception { Method executeM=null; Class<?> c=proxy.getClass(); Class<?> params[]=new Class[0]; executeM=findMethod(c method params); if (executeM == null) { throw new RuntimeException(""No execute in "" + proxy.getClass()); } executeM.invoke(proxy (Object[])null); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,findBooleanSetters,"@SuppressWarnings(""unchecked"") public static String[]  (Class<?> c){ Method m[]=findMethods(c); if (m == null) return null; Vector<String> v=new Vector<String>(); for (int i=0; i < m.length; i++) { if (m[i].getName().startsWith(""set"") && m[i].getParameter"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,findMethod,public static Method  (Class<?> c String name Class<?> params[]){ Method methods[]=findMethods(c); if (methods == null) return null; for (int i=0; i < methods.length; i++) { if (methods[i].getName().equals(name)) { Class<?> methodParams[]=methods[i].getParameterTypes(); if (methodParams == null) if (params == null || params.length == 0) return methods[i]; if (params == null) if (methodParams == null || methodParams.length == 0) return methods[i]; if (params.length != methodParams.length) continue; boolean found=true; for (int j=0; j < params.length; j++) { if (params[j] != methodParams[j]) { found=false; break; } } if (found) return methods[i]; } } return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,findMethods,"@SuppressWarnings(""unchecked"") public static Method[]  (Class<?> c){ Method methods[]=(Method[])objectMethods.get(c); if (methods != null) return methods; methods=c.getMethods(); objectMethods.put(c methods); return methods; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,findVoidSetters,"@SuppressWarnings(""unchecked"") public static String[]  (Class<?> c){ Method m[]=findMethods(c); if (m == null) return null; Vector<String> v=new Vector<String>(); for (int i=0; i < m.length; i++) { if (m[i].getName().startsWith(""set"") && m[i].getParameter"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,getAttribute,"public static Object  (Object proxy String name) throws Exception { Class<?> c=proxy.getClass(); Class<?> params[]=new Class[1]; params[0]=String.class; Method executeM=findMethod(c ""getAttribute"" params); if (executeM == null) { logger.debug(""No getAttribute in {}"" proxy.getClass()); return null; } return executeM.invoke(proxy new Object[]{name}); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,getClassPath,"@SuppressWarnings(""unchecked"") public static URL[]  (String dir String cpath String cpathProp boolean addTools) throws IOException  MalformedURLException { Vector<URL> jarsV=new Vector<URL>(); if (dir != null) { URL url=getURL(dir ""classes""); if (url != n"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IntrospectionUtils.java,getFilesByExt,public static String[]  (String ld String ext){ File dir=new File(ld); String[] names=null; final String lext=ext; if (dir.isDirectory()) { names=dir.list(new FilenameFilter(){ public boolean accept( File d  String name){ if (name.endsWith(lext)) { return true; } return false; } } ); } return names; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,close,"public static void  (final Closeable... closeableArray){ for ( Closeable closeable : closeableArray) { try { if (closeable != null) { closeable.close(); } } catch ( IOException ioe) { logger.info(""Can't close the object"" ioe); } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,deliver,public static void  (final Object o final DeliverTo deliverConfig final DeliverTo.DELIVER_TO defaultDeliver final AtmosphereResource r){ final DeliverTo.DELIVER_TO deliverTo=deliverConfig == null ? defaultDeliver : deliverConfig.value(); switch (deliverTo) { case RESOURCE: r.getBroadcaster().broadcast(o r); break; case BROADCASTER: r.getBroadcaster().broadcast(o); break; case ALL: for (Broadcaster b : r.getAtmosphereConfig().getBroadcasterFactory().lookupAll()) { b.broadcast(o); } break; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,getCleanedServletPath,"public static String  (String fullServletPath){ if (fullServletPath.equalsIgnoreCase(""/*"")) return """"; Matcher matcher=SERVLET_PATH_PATTERN.matcher(fullServletPath); if (!matcher.find()) return fullServletPath; String servletPath=matcher.group(0); if (!servletPath.startsWith(""/"")) { servletPath=""/"" + servletPath; } return servletPath; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,guestRawServletPath,"public static String  (AtmosphereConfig config){ String servletPath=""""; try { if (config.getServletConfig() != null) { ServletRegistration s=config.getServletContext().getServletRegistration(config.getServletConfig().getServletName()); if (s == null) { s=config.getServletContext().getServletRegistration(VoidServletConfig.ATMOSPHERE_SERVLET); } if (s == null) { for ( Map.Entry<String ? extends ServletRegistration> servlet : config.getServletContext().getServletRegistrations().entrySet()) { if (knownClasses.contains(servlet.getValue().getClassName())) { s=servlet.getValue(); break; } } if (s == null) { throw new IllegalStateException(""Unable to configure jsr356 at that stage. No Servlet associated with "" + config.getServletConfig().getServletName()); } } if (s.getMappings().size() > 1) { logger.warn(""More than one Servlet Mapping defined. WebSocket may not work {}"" s); } for ( String m : s.getMappings()) { servletPath=m; } } else { throw new IllegalStateException(""Unable to configure jsr356 at that stage""); } return servletPath; } catch ( Exception ex) { logger.error("""" ex); throw new IllegalStateException(""Unable to configure jsr356 at that stage""); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,guestServletPath,"public static String  (AtmosphereConfig config){ String servletPath=""""; if (config.getServletConfig() != null) { servletPath=getCleanedServletPath(guestRawServletPath(config)); } else { throw new IllegalStateException(""Unable to configure jsr356 at that stage""); } return servletPath; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,isAtmosphere,public static boolean  (String className){ Class<? extends AtmosphereServlet> clazz; try { clazz=(Class<? extends AtmosphereServlet>)Thread.currentThread().getContextClassLoader().loadClass(className); } catch ( Throwable t) { try { clazz=(Class<? extends AtmosphereServlet>)IOUtils.class.getClassLoader().loadClass(className); } catch ( Exception ex) { return false; } } return AtmosphereServlet.class.isAssignableFrom(clazz); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,isBodyBinary,public final static boolean  (AtmosphereRequest request){ if (request.getContentType() != null && request.getContentType().equalsIgnoreCase(FORCE_BINARY) || request.getHeader(X_ATMO_BINARY) != null) return true; return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,isBodyEmpty,public final static boolean  (Object o){ if (o != null && (String.class.isAssignableFrom(o.getClass()) && String.class.cast(o).isEmpty()) || (Byte[].class.isAssignableFrom(o.getClass()) && Byte[].class.cast(o).length == 0)) { return true; } else { return false; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,loadClass,public static Class<?>  (Class<?> thisClass String className) throws Exception { try { return Thread.currentThread().getContextClassLoader().loadClass(className); } catch ( Throwable t) { try { return Class.forName(className); } catch ( Exception t2) { if (thisClass != null) { return thisClass.getClassLoader().loadClass(className); } throw t2; } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,readEntirely,public static Object  (AtmosphereResource r) throws IOException { AtmosphereRequest request=r.getRequest(); return isBodyBinary(request) ? readEntirelyAsByte(r) : readEntirelyAsString(r).toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,readEntirelyAsByte,"public static byte[]  (AtmosphereResource r) throws IOException { AtmosphereRequest request=r.getRequest(); boolean readGetBody=r.getAtmosphereConfig().getInitParameter(ApplicationConfig.READ_GET_BODY false); if (!readGetBody && AtmosphereResourceImpl.class.cast(r).getRequest(false).getMethod().equalsIgnoreCase(""GET"")) { logger.debug(""Blocking an I/O read operation from a GET request. To enable GET + body  set {} to true"" ApplicationConfig.READ_GET_BODY); return new byte[0]; } AtmosphereRequestImpl.Body body=request.body(); if (request.body().isEmpty()) { BufferedInputStream bufferedStream=null; ByteArrayOutputStream bbIS=new ByteArrayOutputStream(); try { try { InputStream inputStream=request.getInputStream(); if (inputStream != null) { bufferedStream=new BufferedInputStream(inputStream); } } catch ( IllegalStateException ex) { logger.trace("""" ex); Reader reader=request.getReader(); if (reader != null) { bufferedStream=new BufferedInputStream(new ReaderInputStream(reader)); } } if (bufferedStream != null) { byte[] bytes=new byte[8192]; int bytesRead=0; while (bytesRead != -1) { bytesRead=bufferedStream.read(bytes); if (bytesRead > 0) bbIS.write(bytes 0 bytesRead); } } else { bbIS.write("""".getBytes()); } } finally { if (bufferedStream != null) { try { bufferedStream.close(); } catch ( IOException ex) { logger.warn("""" ex); } } } return bbIS.toByteArray(); } else if (body.hasString()) { try { return readEntirelyAsString(r).toString().getBytes(request.getCharacterEncoding()); } catch ( UnsupportedEncodingException e) { logger.error("""" e); } } else if (body.hasBytes()) { return Arrays.copyOfRange(body.asBytes() body.byteOffset() body.byteOffset() + body.byteLength()); } throw new IllegalStateException(""No body "" + r); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,readEntirelyAsString,"public static StringBuilder  (AtmosphereResource r) throws IOException { final StringBuilder stringBuilder=new StringBuilder(); boolean readGetBody=r.getAtmosphereConfig().getInitParameter(ApplicationConfig.READ_GET_BODY false); if (!readGetBody && AtmosphereResourceImpl.class.cast(r).getRequest(false).getMethod().equalsIgnoreCase(""GET"")) { logger.debug(""Blocking an I/O read operation from a GET request. To enable GET + body  set {} to true"" ApplicationConfig.READ_GET_BODY); return stringBuilder; } AtmosphereRequest request=r.getRequest(); if (request.body().isEmpty()) { BufferedReader bufferedReader=null; try { try { InputStream inputStream=request.getInputStream(); if (inputStream != null) { bufferedReader=new BufferedReader(new InputStreamReader(inputStream request.getCharacterEncoding())); } } catch ( IllegalStateException ex) { logger.trace("""" ex); Reader reader=request.getReader(); if (reader != null) { bufferedReader=new BufferedReader(reader); } } if (bufferedReader != null) { char[] charBuffer=new char[8192]; int bytesRead=-1; try { while ((bytesRead=bufferedReader.read(charBuffer)) > 0) { stringBuilder.append(charBuffer 0 bytesRead); } } catch ( NullPointerException ex) { } } else { stringBuilder.append(""""); } } finally { if (bufferedReader != null) { try { bufferedReader.close(); } catch ( IOException ex) { logger.warn("""" ex); } } } } else { AtmosphereRequestImpl.Body body=request.body(); try { stringBuilder.append(body.hasString() ? body.asString() : new String(body.asBytes() body.byteOffset() body.byteLength() request.getCharacterEncoding())); } catch ( UnsupportedEncodingException e) { logger.error("""" e); } } return stringBuilder; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,readServiceFile,"public static Map<String AtmosphereFramework.MetaServiceAction>  (final String path){ final Map<String AtmosphereFramework.MetaServiceAction> b=new LinkedHashMap<String AtmosphereFramework.MetaServiceAction>(); String line; InputStream is=null; BufferedReader reader=null; AtmosphereFramework.MetaServiceAction action=AtmosphereFramework.MetaServiceAction.INSTALL; try { is=AtmosphereFramework.class.getClassLoader().getResourceAsStream(path); if (is == null) { logger.trace(""META-INF/services/{} not found in class loader"" path); return b; } reader=new BufferedReader(new InputStreamReader(is)); while (true) { line=reader.readLine(); if (line == null) { break; } else if (line.isEmpty()) { continue; } else if (line.indexOf('.') == -1) { action=AtmosphereFramework.MetaServiceAction.valueOf(line); } else { b.put(line action); } } logger.info(""Successfully loaded and installed {}"" path); } catch ( IOException e) { logger.trace(""Unable to read META-INF/services/{} from class loader"" path e); } finally { close(is reader); } return b; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,realPath,"public static String  (ServletContext servletContext String targetPath) throws MalformedURLException { String realPath=servletContext.getRealPath(targetPath); if (realPath == null) { URL u=servletContext.getResource(targetPath); if (u != null) { realPath=u.getPath(); } else { return """"; } } return realPath; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\IOUtils.java,scanForAtmosphereFramework,"private static boolean  (Class<?> classToScan){ if (classToScan == null) return false; logger.trace(""Scanning {}"" classToScan.getName()); if (knownClasses.contains(classToScan.getName())) { return true; } try { Field[] fields=classToScan.getDeclaredFields(); for ( Field f : fields) { f.setAccessible(true); if (AtmosphereFramework.class.isAssignableFrom(f.getType())) { return true; } } } catch ( Exception ex) { logger.trace("""" ex); } if (scanForAtmosphereFramework(classToScan.getSuperclass())) return true; return false; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletContextFactory.java,getDefault,public final static ServletContextFactory  (){ if (servletContextFactory == null) servletContextFactory=new ServletContextFactory(); return servletContextFactory; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletContextFactory.java,getServletContext,public ServletContext  (){ if (servletContext != null) { return servletContext; } return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletContextFactory.java,init,public void  (ServletContext servletContext){ this.servletContext=servletContext; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,ServletProxyFactory,"private  (){ addMethodHandler(""encodeURL"" voidMethodHandler).addMethodHandler(""encodeRedirectURL"" voidMethodHandler).addMethodHandler(""getCharacterEncoding"" new UTF8Handler()).addMethodHandler(""getServerInfo"" new MethodHandler(){ @Override public Object handle( Object clazz  Method method  Object[] methodObjects){ return ""Undefined/0.0""; } } ).addMethodHandler(""getMajorVersion"" new MethodHandler(){ @Override public Object handle( Object clazz  Method method  Object[] methodObjects){ return new Integer(3); } } ); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,addMethodHandler,public ServletProxyFactory  (String method MethodHandler m){ methods.put(method m); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,getDefault,public static ServletProxyFactory  (){ if (factory == null) { factory=new ServletProxyFactory(); } return factory; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,handle,"@Override public Object  (Object clazz Method method Object[] methodObjects){ return ""UTF-8""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ServletProxyFactory.java,proxy,"public final Object  (Object clazz Method method Object[] methodObjects){ MethodHandler m=methods.get(method.getName()); if (m != null) { logger.trace(""Method {} handled by MethodHandler {}"" method.getName() m); return m.handle(clazz method methodObjects); } logger.trace(""Method {} not supported"" method.getName()); return null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringFilterAggregator.java,StringFilterAggregator,public  (int maxBufferedString){ this.maxBufferedString=maxBufferedString; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringFilterAggregator.java,filter,public BroadcastAction  (String broadcasterId Object originalMessage Object message){ if (message instanceof String) { bufferedMessage.get().append(message); if (bufferedMessage.get().length() < maxBufferedString) { return new BroadcastAction(ACTION.ABORT message); } else { message=bufferedMessage.toString(); bufferedMessage.get().delete(0 bufferedMessage.get().length()); return new BroadcastAction(ACTION.CONTINUE message); } } else { return new BroadcastAction(message); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,broadcast,"@Override public Future<Object>  (Object msg Set<AtmosphereResource> subset){ if (destroyed.get()) { logger.warn(""This Broadcaster has been destroyed and cannot be used""); return futureDone(msg); } start(); Object newMsg=filter(msg); if (newMsg == null) r"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,createBroadcasterConfig,@Override protected BroadcasterConfig  (AtmosphereConfig config){ BroadcasterConfig bc=(BroadcasterConfig)config.properties().get(BroadcasterConfig.class.getName()); if (bc == null) { bc=new BroadcasterConfig(config.framework().broadcasterFilters() config
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,initialize,public Broadcaster  (String id AtmosphereConfig config){ return super.initialize(id config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,prepareInvokeOnStateChange,"@Override protected void  (final AtmosphereResource r final AtmosphereResourceEvent e){ if (writeTimeoutInSecond != -1) { logger.warn(""{} not supported with this broadcaster."" ApplicationConfig.WRITE_TIMEOUT); } invokeOnStateChange(r e); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,queueWriteIO,@Override protected void  (AtmosphereResource r Deliver deliver AtomicInteger count) throws InterruptedException { executeBlockingWrite(r deliver count); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,setBroadcasterConfig,@Override public void  (BroadcasterConfig bc){ this.bc=bc; bc.setExecutorService(null false).setAsyncWriteService(null false).setScheduledExecutorService(ExecutorsFactory.getScheduler(config)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,StringEscapeUtils,public  (){ super(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,escapeJava,public static void  (Writer out String str) throws IOException { escapeJavaStyleString(out str false false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,escapeJavaScript,public static void  (Writer out String str) throws Exception { escapeJavaStyleString(out str true true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,escapeJavaStyleString,"private static void  (Writer out String str boolean escapeSingleQuote boolean escapeForwardSlash) throws IOException { if (out == null) { throw new IllegalArgumentException(""The Writer must not be null""); } if (str == null) { return; } int sz; sz=str.length(); for (int i=0; i < sz; i++) { char ch=str.charAt(i); if (ch > 0xfff) { out.write(""\\u"" + hex(ch)); } else if (ch > 0xff) { out.write(""\\u0"" + hex(ch)); } else if (ch > 0x7f) { out.write(""\\u00"" + hex(ch)); } else if (ch < 32) { switch (ch) { case '\b': out.write('\\'); out.write('b'); break; case '\n': out.write('\\'); out.write('n'); break; case '\t': out.write('\\'); out.write('t'); break; case '\f': out.write('\\'); out.write('f'); break; case '\r': out.write('\\'); out.write('r'); break; default : if (ch > 0xf) { out.write(""\\u00"" + hex(ch)); } else { out.write(""\\u000"" + hex(ch)); } break; } } else { switch (ch) { case '\'': if (escapeSingleQuote) { out.write('\\'); } out.write('\''); break; case '""': out.write('\\'); out.write('""'); break; case '\\': out.write('\\'); out.write('\\'); break; case '/': if (escapeForwardSlash) { out.write('\\'); } out.write('/'); break; default : out.write(ch); break; } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,hex,private static String  (char ch){ return Integer.toHexString(ch).toUpperCase(Locale.ENGLISH); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,unescapeJava,"public static void  (Writer out String str) throws Exception { if (out == null) { throw new IllegalArgumentException(""The Writer must not be null""); } if (str == null) { return; } int sz=str.length(); StringBuilder unicode=new StringBuilder(); boolean hadSlash=false; boolean inUnicode=false; for (int i=0; i < sz; i++) { char ch=str.charAt(i); if (inUnicode) { unicode.append(ch); if (unicode.length() == 4) { int value=Integer.parseInt(unicode.toString() 16); out.write((char)value); unicode.setLength(0); inUnicode=false; hadSlash=false; } continue; } if (hadSlash) { hadSlash=false; switch (ch) { case '\\': out.write('\\'); break; case '\'': out.write('\''); break; case '\""': out.write('""'); break; case 'r': out.write('\r'); break; case 'f': out.write('\f'); break; case 't': out.write('\t'); break; case 'n': out.write('\n'); break; case 'b': out.write('\b'); break; case 'u': { inUnicode=true; break; } default : out.write(ch); break; } continue; } else if (ch == '\\') { hadSlash=true; continue; } out.write(ch); } if (hadSlash) { out.write('\\'); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\StringEscapeUtils.java,unescapeJavaScript,public static void  (Writer out String str) throws Exception { unescapeJava(out str); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\SimpleBroadcaster.java,start,@Override protected void  (){ if (!started.getAndSet(true)) { bc.getBroadcasterCache().start(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,GroupIndexMatchResult, (MatchResult r){ this.r=r; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,UriPattern,public  (Pattern regexPattern int[] groupIndexes){ if (regexPattern == null) throw new IllegalArgumentException(); this.regex=regexPattern.toString(); this.regexPattern=regexPattern; this.groupIndexes=groupIndexes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,compile,private static Pattern  (String regex){ return (regex == null || regex.length() == 0) ? null : Pattern.compile(regex); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,end,public int  (int group){ if (group > groupCount()) throw new IndexOutOfBoundsException(); return (group > 0) ? r.end(groupIndexes[group - 1]) : r.end(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,equals,@Override public final boolean  (Object obj){ if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } final UriPattern that=(UriPattern)obj; if (this.regex != that.regex && (this.regex == null || !this.regex.equals(that.rege
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,getGroupIndexes,public final int[]  (){ return groupIndexes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,getRegex,public final String  (){ return regex; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,group,public String  (int group){ if (group > groupCount()) throw new IndexOutOfBoundsException(); return (group > 0) ? r.group(groupIndexes[group - 1]) : r.group(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,groupCount,public int  (){ return groupIndexes.length - 1; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,hashCode,@Override public final int  (){ return regex.hashCode(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,match,public final boolean  (CharSequence uri List<String> groupNames Map<String String> groupValues){ if (groupValues == null) throw new IllegalArgumentException(); if (uri == null || uri.length() == 0) return (regexPattern == null) ? true : false; else if (regexPattern == null) return false; Matcher m=regexPattern.matcher(uri); if (!m.matches()) return false; groupValues.clear(); for (int i=0; i < groupNames.size(); i++) { String name=groupNames.get(i); String currentValue=m.group((groupIndexes.length > 0) ? groupIndexes[i] : i + 1); String previousValue=groupValues.get(name); if (previousValue != null && !previousValue.equals(currentValue)) return false; groupValues.put(name currentValue); } return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,start,public int  (int group){ if (group > groupCount()) throw new IndexOutOfBoundsException(); return (group > 0) ? r.start(groupIndexes[group - 1]) : r.start(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriPattern.java,toString,@Override public final String  (){ return regex; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,UriTemplate,protected  (UriTemplateParser templateParser) throws PatternSyntaxException  IllegalArgumentException { this.template=templateParser.getTemplate(); this.normalizedTemplate=templateParser.getNormalizedTemplate(); this.pattern=createUriPattern(templateParser); this.numOfExplicitRegexes=templateParser.getNumberOfExplicitRegexes(); this.numOfCharacters=templateParser.getNumberOfLiteralCharacters(); this.endsWithSlash=template.charAt(template.length() - 1) == '/'; this.templateVariables=templateParser.getNames(); templateParser.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,compare,public int  (UriTemplate o1 UriTemplate o2){ if (o1 == null && o2 == null) return 0; if (o1 == null) return 1; if (o2 == null) return -1; if (o1 == EMPTY && o2 == EMPTY) return 0; if (o1 == EMPTY) return 1; if (o2 == EMPTY) return -1; int i=o2.getNumberOfExplicitCharacters() - o1.getNumberOfExplicitCharacters(); if (i != 0) return i; i=o2.getNumberOfTemplateVariables() - o1.getNumberOfTemplateVariables(); if (i != 0) return i; i=o2.getNumberOfExplicitRegexes() - o1.getNumberOfExplicitRegexes(); if (i != 0) return i; return o2.pattern.getRegex().compareTo(o1.pattern.getRegex()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,createURI,public final static String  (final String scheme String authority final String userInfo final String host final String port final String path final String query final String fragment final Object[] values final boolean encode){ String[] stringValues=new String[values.length]; for (int i=0; i < values.length; i++) { if (values[i] != null) stringValues[i]=values[i].toString(); } return createURIWithStringValues(scheme authority userInfo host port path query fragment stringValues encode); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,createURIComponent,private static int  (final UriComponent.Type t String template final String[] values final int offset final boolean encode final Map<String String> mapValues final StringBuilder b){ if (template.indexOf('{') == -1) { b.append(template); return offset; } template=new UriTemplateParser(template).getNormalizedTemplate(); final Matcher m=TEMPLATE_NAMES_PATTERN.matcher(template); int v=offset; int i=0; while (m.find()) { b.append(template i m.start()); final String tVariable=m.group(1); String tValue=mapValues.get(tVariable); if (tValue != null) { b.append(tValue); } else if (v < values.length) { tValue=values[v++]; if (tValue != null) { if (encode) tValue=UriComponent.encode(tValue t); else tValue=UriComponent.contextualEncode(tValue t); mapValues.put(tVariable tValue); b.append(tValue); } else { throw templateVariableHasNoValue(tVariable); } } else { throw templateVariableHasNoValue(tVariable); } i=m.end(); } b.append(template i template.length()); return v; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,createURIWithStringValues,"public final static String  (final String scheme final String authority final String userInfo final String host final String port final String path final String query final String fragment final String[] values final boolean encode){ final Map<String String> mapValues=new HashMap<String String>(); final StringBuilder sb=new StringBuilder(); int offset=0; if (scheme != null) { offset=createURIComponent(UriComponent.Type.SCHEME scheme values offset false mapValues sb); sb.append(':'); } if (userInfo != null || host != null || port != null) { sb.append(""//""); if (userInfo != null && userInfo.length() > 0) { offset=createURIComponent(UriComponent.Type.USER_INFO userInfo values offset encode mapValues sb); sb.append('@'); } if (host != null) { offset=createURIComponent(UriComponent.Type.HOST host values offset encode mapValues sb); } if (port != null && port.length() > 0) { sb.append(':'); offset=createURIComponent(UriComponent.Type.PORT port values offset false mapValues sb); } } else if (authority != null) { sb.append(""//""); offset=createURIComponent(UriComponent.Type.AUTHORITY authority values offset encode mapValues sb); } if (path != null) offset=createURIComponent(UriComponent.Type.PATH path values offset encode mapValues sb); if (query != null && query.length() > 0) { sb.append('?'); offset=createURIComponent(UriComponent.Type.QUERY_PARAM query values offset encode mapValues sb); } if (fragment != null && fragment.length() > 0) { sb.append('#'); offset=createURIComponent(UriComponent.Type.FRAGMENT fragment values offset encode mapValues sb); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,createUriPattern,protected UriPattern  (UriTemplateParser templateParser){ return new UriPattern(templateParser.getPattern() templateParser.getGroupIndexes()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,destroy,public UriTemplate  (){ templateVariables.clear(); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,endsWithSlash,public final boolean  (){ return endsWithSlash; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,equals,@Override public final boolean  (Object o){ if (o instanceof UriTemplate) { UriTemplate that=(UriTemplate)o; return this.pattern.equals(that.pattern); } else { return false; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,getNumberOfExplicitCharacters,public final int  (){ return numOfCharacters; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,getNumberOfExplicitRegexes,public final int  (){ return numOfExplicitRegexes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,getNumberOfTemplateVariables,public final int  (){ return templateVariables.size(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,getPattern,public final UriPattern  (){ return pattern; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,getTemplate,public final String  (){ return template; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,getTemplateVariables,public final List<String>  (){ return templateVariables; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,hashCode,@Override public final int  (){ return pattern.hashCode(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,isTemplateVariablePresent,public final boolean  (String name){ for ( String s : templateVariables) { if (s.equals(name)) return true; } return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,match,public final boolean  (CharSequence uri List<String> groupValues) throws IllegalArgumentException { if (groupValues == null) throw new IllegalArgumentException(); return pattern.match(uri groupValues); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,templateVariableHasNoValue,"private static IllegalArgumentException  (String tVariable){ return new IllegalArgumentException(""The template variable  "" + tVariable + ""  has no value""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplate.java,toString,@Override public final String  (){ return pattern.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,PathSegmentImpl, (String path boolean decode Map<String String> matrixParameters){ this.path=(decode) ? UriComponent.decode(path UriComponent.Type.PATH_SEGMENT) : path; this.matrixParameters=matrixParameters; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,_encode,private static String  (String s Type t boolean template boolean contextualEncode){ final boolean[] table=ENCODING_TABLES[t.ordinal()]; StringBuilder sb=null; for (int i=0; i < s.length(); i++) { final char c=s.charAt(i); if (c < 0x80 && table[c]) { if (sb != null) sb.append(c); } else { if (template && (c == '{' || c == '}')) { if (sb != null) sb.append(c); continue; } else if (contextualEncode) { if (c == '%' && i + 2 < s.length()) { if (isHexCharacter(s.charAt(i + 1)) && isHexCharacter(s.charAt(i + 2))) { if (sb != null) sb.append('%').append(s.charAt(i + 1)).append(s.charAt(i + 2)); i+=2; continue; } } } if (sb == null) { sb=new StringBuilder(); sb.append(s.substring(0 i)); } if (c < 0x80) { if (c == ' ' && (t == Type.QUERY_PARAM)) { sb.append('+'); } else { appendPercentEncodedOctet(sb c); } } else { appendUTF8EncodedCharacter(sb c); } } } return (sb == null) ? s : sb.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,_valid,private static int  (String s Type t boolean template){ boolean[] table=ENCODING_TABLES[t.ordinal()]; for (int i=0; i < s.length(); i++) { final char c=s.charAt(i); if ((c < 0x80 && c != '%' && !table[c]) || c >= 0x80) { if (!template || (c != '{' && c != '}')) { return i; } } } return -1; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,appendPercentEncodedOctet,private static void  (StringBuilder sb int b){ sb.append('%'); sb.append(HEX_DIGITS[b >> 4]); sb.append(HEX_DIGITS[b & 0x0F]); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,appendUTF8EncodedCharacter,"private static void  (StringBuilder sb char c){ final ByteBuffer bb=UTF_8_CHARSET.encode("""" + c); while (bb.hasRemaining()) { appendPercentEncodedOctet(sb bb.get() & 0xFF); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,contextualEncode,public static String  (String s Type t boolean template){ return _encode(s t template true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,createHexTable,private static int[]  (){ int[] table=new int[0x80]; Arrays.fill(table -1); for (char c='0'; c <= '9'; c++) { table[c]=c - '0'; } for (char c='A'; c <= 'F'; c++) { table[c]=c - 'A' + 10; } for (char c='a'; c <= 'f'; c++) { table[c]=c - 'a' + 10; } return table; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,creatingEncodingTable,private static boolean[]  (List<String> allowed){ boolean[] table=new boolean[0x80]; for ( String range : allowed) { if (range.length() == 1) { table[range.charAt(0)]=true; } else if (range.length() == 3 && range.charAt(1) == '-') { for (int i=range.charAt(0); i <= range.charAt(2); i++) { table[i]=true; } } } return table; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,creatingEncodingTables,"private static boolean[][]  (){ boolean[][] tables=new boolean[Type.values().length][]; List<String> l=new ArrayList<String>(); l.addAll(Arrays.asList(SCHEME)); tables[Type.SCHEME.ordinal()]=creatingEncodingTable(l); l.clear(); l.addAll(Arrays.asList(UNRESERVED)); tables[Type.UNRESERVED.ordinal()]=creatingEncodingTable(l); l.addAll(Arrays.asList(SUB_DELIMS)); tables[Type.HOST.ordinal()]=creatingEncodingTable(l); tables[Type.PORT.ordinal()]=creatingEncodingTable(Arrays.asList(""0-9"")); l.add("":""); tables[Type.USER_INFO.ordinal()]=creatingEncodingTable(l); l.add(""@""); tables[Type.AUTHORITY.ordinal()]=creatingEncodingTable(l); tables[Type.PATH_SEGMENT.ordinal()]=creatingEncodingTable(l); tables[Type.PATH_SEGMENT.ordinal()][';']=false; tables[Type.MATRIX_PARAM.ordinal()]=tables[Type.PATH_SEGMENT.ordinal()].clone(); tables[Type.MATRIX_PARAM.ordinal()]['=']=false; l.add(""/""); tables[Type.PATH.ordinal()]=creatingEncodingTable(l); l.add(""?""); tables[Type.QUERY.ordinal()]=creatingEncodingTable(l); tables[Type.FRAGMENT.ordinal()]=tables[Type.QUERY.ordinal()]; tables[Type.QUERY_PARAM.ordinal()]=creatingEncodingTable(l); tables[Type.QUERY_PARAM.ordinal()]['=']=false; tables[Type.QUERY_PARAM.ordinal()]['+']=false; tables[Type.QUERY_PARAM.ordinal()]['&']=false; return tables; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decode,private static String  (String s int n){ final StringBuilder sb=new StringBuilder(n); ByteBuffer bb=null; for (int i=0; i < n; ) { final char c=s.charAt(i++); if (c != '%') { sb.append(c); } else { bb=decodePercentEncodedOctets(s i bb); i=decodeOctets(i bb sb); } } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodeHex,private static int  (char c){ return (c < 128) ? HEX_TABLE[c] : -1; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodeHost,private static String  (String s int n){ final StringBuilder sb=new StringBuilder(n); ByteBuffer bb=null; boolean betweenBrackets=false; for (int i=0; i < n; ) { final char c=s.charAt(i++); if (c == '[') { betweenBrackets=true; } else if (betweenBrackets && c == ']') { betweenBrackets=false; } if (c != '%' || betweenBrackets) { sb.append(c); } else { bb=decodePercentEncodedOctets(s i bb); i=decodeOctets(i bb sb); } } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodeMatrix,public static Map<String String>  (String pathSegment boolean decode){ Map<String String> matrixMap=new HashMap<String String>(); int s=pathSegment.indexOf(';') + 1; if (s == 0 || s == pathSegment.length()) { return matrixMap; } int e=0; do { e=pathSegment.indexOf(';' s); if (e == -1) { decodeMatrixParam(matrixMap pathSegment.substring(s) decode); } else if (e > s) { decodeMatrixParam(matrixMap pathSegment.substring(s e) decode); } s=e + 1; } while (s > 0 && s < pathSegment.length()); return matrixMap; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodeMatrixParam,"private static void  (Map<String String> params String param boolean decode){ int equals=param.indexOf('='); if (equals > 0) { params.put(UriComponent.decode(param.substring(0 equals) UriComponent.Type.MATRIX_PARAM) (decode) ? UriComponent.decode(param.substring(equals + 1) UriComponent.Type.MATRIX_PARAM) : param.substring(equals + 1)); } else if (equals == 0) { } else if (param.length() > 0) { params.put(UriComponent.decode(param UriComponent.Type.MATRIX_PARAM) """"); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodeOctets,private static int  (int i ByteBuffer bb StringBuilder sb){ if (bb.limit() == 1 && (bb.get(0) & 0xFF) < 0x80) { sb.append((char)bb.get(0)); return i + 2; } else { CharBuffer cb=UTF_8_CHARSET.decode(bb); sb.append(cb.toString()); return i + bb.limit() * 3 - 1; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodePath,public static List<PathSegmentImpl>  (String path boolean decode){ List<PathSegmentImpl> segments=new LinkedList<PathSegmentImpl>(); if (path == null) { return segments; } int s=0; int e=-1; do { s=e + 1; e=path.indexOf('/' s); if (e > s) { decodePathSegment(segments path.substring(s e) decode); } else if (e == s) { segments.add(PathSegmentImpl.EMPTY_PATH_SEGMENT); } } while (e != -1); if (s < path.length()) { decodePathSegment(segments path.substring(s) decode); } else { segments.add(PathSegmentImpl.EMPTY_PATH_SEGMENT); } return segments; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodePathSegment,"public static void  (List<PathSegmentImpl> segments String segment boolean decode){ int colon=segment.indexOf(';'); if (colon != -1) { segments.add(new PathSegmentImpl((colon == 0) ? """" : segment.substring(0 colon) decode decodeMatrix(segment decode))); } else { segments.add(new PathSegmentImpl(segment decode)); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodePercentEncodedOctets,private static ByteBuffer  (String s int i ByteBuffer bb){ if (bb == null) bb=ByteBuffer.allocate(1); else bb.clear(); while (true) { bb.put((byte)(decodeHex(s i++) << 4 | decodeHex(s i++))); if (i == s.length()) { break; } if (s.charAt(i++) != '%') { break; } if (bb.position() == bb.capacity()) { bb.flip(); ByteBuffer bb_new=ByteBuffer.allocate(s.length() / 3); bb_new.put(bb); bb=bb_new; } } bb.flip(); return bb; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodeQuery,public static Map<String String>  (String q boolean decode){ Map<String String> queryParameters=new HashMap<String String>(); if (q == null || q.length() == 0) { return queryParameters; } int s=0  e=0; do { e=q.indexOf('&' s); if (e == -1) { decodeQueryParam(queryParameters q.substring(s) decode); } else if (e > s) { decodeQueryParam(queryParameters q.substring(s e) decode); } s=e + 1; } while (s > 0 && s < q.length()); return queryParameters; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,decodeQueryParam,private static String  (String s int n){ final StringBuilder sb=new StringBuilder(n); ByteBuffer bb=null; for (int i=0; i < n; ) { final char c=s.charAt(i++); if (c != '%') { if (c != '+') sb.append(c); else sb.append(' '); } else { bb=decodePercentEncodedOctets(s i bb); i=decodeOctets(i bb sb); } } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,encode,public static String  (String s Type t boolean template){ return _encode(s t template false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,encodeTemplateNames,"public static String  (String s){ int i=s.indexOf('{'); if (i != -1) s=s.replace(""{"" ""%7B""); i=s.indexOf('}'); if (i != -1) s=s.replace(""}"" ""%7D""); return s; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,getMatrixParameters,public Map<String String>  (){ return matrixParameters; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,isHexCharacter,private static boolean  (char c){ return c < 128 && HEX_TABLE[c] != -1; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,valid,public static boolean  (String s Type t boolean template){ return _valid(s t template) == -1; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriComponent.java,validate,"public static void  (String s Type t boolean template){ int i=_valid(s t template); if (i > -1) { throw new IllegalArgumentException(""The string '"" + s + ""' for the URI component ""+ t+ "" contains an invalid character  '""+ s.charAt(i)+ ""'  at index ""+ i); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,StringCharacterIterator,public  (String s){ this.s=s; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,UriTemplateParser,"public  (String template){ if (template == null || template.length() == 0) throw new IllegalArgumentException(); this.template=template; parse(new StringCharacterIterator(template)); try { pattern=Pattern.compile(regex.toString()); } catch ( PatternSyntaxException ex) { throw new IllegalArgumentException(""Invalid syntax for the template expression '"" + regex + ""'"" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,consumeWhiteSpace,private char  (CharacterIterator ci){ char c=ci.next(); while (c == ' ') c=ci.next(); return c; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,createReserved,private static Set<Character>  (){ char[] reserved={'.' '?' '(' ')'}; Set<Character> s=new HashSet<Character>(reserved.length); for ( char c : reserved) s.add(c); return s; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,destroy,public UriTemplateParser  (){ names.clear(); groupCounts.clear(); nameToPattern.clear(); regex.setLength(0); normalizedTemplate.setLength(0); literalCharactersBuffer.setLength(0); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,encodeLiteralCharacters,protected String  (String literalCharacters){ return literalCharacters; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getGroupCounts,public final List<Integer>  (){ return groupCounts; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getGroupIndexes,public final int[]  (){ if (names.isEmpty()) return EMPTY_INT_ARRAY; int[] indexes=new int[names.size() + 1]; indexes[0]=1; for (int i=1; i < indexes.length; i++) { indexes[i]=indexes[i - 1] + groupCounts.get(i - 1); } for (int i=0; i < indexes.length; i++) { if (indexes[i] != i + 1) return indexes; } return EMPTY_INT_ARRAY; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getNameToPattern,public final Map<String Pattern>  (){ return nameToPattern; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getNames,public final List<String>  (){ return names; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getNormalizedTemplate,public final String  (){ return normalizedTemplate.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getNumberOfExplicitRegexes,public final int  (){ return numOfExplicitRegexes; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getNumberOfLiteralCharacters,public final int  (){ return literalCharacters; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getPattern,public final Pattern  (){ return pattern; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,getTemplate,public final String  (){ return template; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,hasNext,public boolean  (){ return pos < s.length(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,next,public char  (){ if (!hasNext()) throw new NoSuchElementException(); return s.charAt(pos++); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,parse,"private void  (CharacterIterator ci){ try { while (ci.hasNext()) { char c=ci.next(); if (c == '{') { processLiteralCharacters(); parseName(ci); } else { literalCharactersBuffer.append(c); } } processLiteralCharacters(); } catch ( NoSuchElementException ex) { throw new IllegalArgumentException(""Invalid syntax for the template  \"""" + template + ""\"". Check if a path parameter is terminated with a '}'."" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,parseName,"private void  (CharacterIterator ci){ char c=consumeWhiteSpace(ci); StringBuilder nameBuffer=new StringBuilder(); if (Character.isLetterOrDigit(c) || c == '_') { nameBuffer.append(c); } else { throw new IllegalArgumentException(""Illegal character '"" + c + ""' at position ""+ ci.pos()+ "" is not as the start of a name""); } String nameRegexString=""""; while (true) { c=ci.next(); if (Character.isLetterOrDigit(c) || c == '_' || c == '-' || c == '.') { nameBuffer.append(c); } else if (c == ':') { nameRegexString=parseRegex(ci); break; } else if (c == '}') { break; } else if (c == ' ') { c=consumeWhiteSpace(ci); if (c == ':') { nameRegexString=parseRegex(ci); break; } else if (c == '}') { break; } else { throw new IllegalArgumentException(""Illegal character '"" + c + ""' at position ""+ ci.pos()+ "" is not allowed after a name""); } } else { throw new IllegalArgumentException(""Illegal character '"" + c + ""' at position ""+ ci.pos()+ "" is not allowed as part of a name""); } } String name=nameBuffer.toString(); names.add(name); try { if (nameRegexString.length() > 0) numOfExplicitRegexes++; Pattern namePattern=(nameRegexString.length() == 0) ? TEMPLATE_VALUE_PATTERN : Pattern.compile(nameRegexString); if (nameToPattern.containsKey(name)) { if (!nameToPattern.get(name).equals(namePattern)) { throw new IllegalArgumentException(""The name '"" + name + ""' is declared ""+ ""more than once with different regular expressions""); } } else { nameToPattern.put(name namePattern); } Matcher m=namePattern.matcher(""""); int g=m.groupCount(); groupCounts.add(g + 1); regex.append('(').append(namePattern).append(')'); normalizedTemplate.append('{').append(name).append('}'); } catch ( PatternSyntaxException ex) { throw new IllegalArgumentException(""Invalid syntax for the expression '"" + nameRegexString + ""' associated with the name '""+ name+ ""'"" ex); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,parseRegex,private String  (CharacterIterator ci){ StringBuilder regexBuffer=new StringBuilder(); int braceCount=1; while (true) { char c=ci.next(); if (c == '{') { braceCount++; } else if (c == '}') { braceCount--; if (braceCount == 0) break; } regexBuffer.append(c); } return regexBuffer.toString().trim(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,peek,public char  (){ if (!hasNext()) throw new NoSuchElementException(); return s.charAt(pos++); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,pos,public int  (){ if (pos == 0) return 0; return pos - 1; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\uri\UriTemplateParser.java,processLiteralCharacters,"private void  (){ if (literalCharactersBuffer.length() > 0) { literalCharacters+=literalCharactersBuffer.length(); String s=encodeLiteralCharacters(literalCharactersBuffer.toString()); normalizedTemplate.append(s); for (int i=0; i < s.length(); i++) { char c=s.charAt(i); if (RESERVED_REGEX_CHARACTERS.contains(c)) regex.append(""\\""); regex.append(c); } literalCharactersBuffer.setLength(0); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,atmosphereProtocol,public final static boolean  (AtmosphereRequest r){ String p=r.getHeader(HeaderConfig.X_ATMO_PROTOCOL); return (p != null && Boolean.valueOf(p)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,closeMessage,public static final boolean  (HttpServletRequest request){ String s=request.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT); return s != null && s.equalsIgnoreCase(HeaderConfig.DISCONNECT_TRANSPORT_MESSAGE); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,firefoxWebSocketEnabled,"public final static boolean  (HttpServletRequest request){ return webSocketEnabled(request) && request.getHeader(HeaderConfig.X_ATMO_PROTOCOL) != null && request.getHeader(HeaderConfig.X_ATMO_PROTOCOL).equals(""true"") && request.getHeader(""User-Agent"") != null && request.getHeader(""User-Agent"").toLowerCase().indexOf(""firefox"") != -1; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,getInheritedPrivateFields,public final static Set<Field>  (Class<?> type){ Set<Field> result=new HashSet<Field>(); Class<?> i=type; while (i != null && i != Object.class) { for ( Field field : i.getDeclaredFields()) { if (!field.isSynthetic()) { result.add(field); } } i=i.getSuperclass(); } return result; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,getInheritedPrivateMethod,public final static Set<Method>  (Class<?> type){ Set<Method> result=new HashSet<>(); Class<?> i=type; while (i != null && i != Object.class) { for ( Method m : i.getDeclaredMethods()) { if (!m.isSynthetic()) { result.add(m); } } i=i.getSuperclass(); } return result; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,inject,public static final void  (Object object Class clazz AtmosphereConfig config) throws IllegalAccessException { InjectableObjectFactory.class.cast(config.framework().objectFactory()).requestScoped(object clazz); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,injectWith,private static Object  (AtmosphereHandler h){ if (AnnotatedProxy.class.isAssignableFrom(h.getClass())) { return AnnotatedProxy.class.cast(h).target(); } else if (ReflectorServletProcessor.class.isAssignableFrom(h.getClass())) { return ReflectorServletProcessor.class.cast(h).getServlet(); } else { return h; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,invoke,"public static Object  (final Object proxiedInstance Method m Object o){ if (m != null) { try { return m.invoke(proxiedInstance (o == null || m.getParameterTypes().length == 0) ? new Object[]{} : new Object[]{o}); } catch ( IllegalAccessException e) { LOGGER.debug("""" e); } catch ( InvocationTargetException e) { LOGGER.debug("""" e); } } LOGGER.trace(""No Method Mapped for {}"" o); return null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,pathInfo,"public static String  (AtmosphereRequest request){ String pathInfo=null; String path=null; try { pathInfo=request.getPathInfo(); } catch ( IllegalStateException ex) { } if (pathInfo != null) { path=request.getServletPath() + pathInfo; } else { path=request.getServletPath(); } if (path == null || path.isEmpty()) { path=""/""; } return path; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,pollableTransport,public final static boolean  (AtmosphereResource.TRANSPORT t){ switch (t) { case POLLING: case CLOSE: case AJAX: return true; default : return false; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,properProtocol,"public static boolean  (HttpServletRequest request){ Enumeration<String> connection=request.getHeaders(""Connection""); if (connection == null || !connection.hasMoreElements()) { connection=request.getHeaders(""connection""); } boolean isOK=false; boolean isWebSocket=(request.getHeader(WEBSOCKET_VERSION) != null || request.getHeader(""Sec-WebSocket-Draft"") != null); if (connection != null && connection.hasMoreElements()) { String[] e=connection.nextElement().toString().split("" ""); for ( String upgrade : e) { if (upgrade.trim().equalsIgnoreCase(""upgrade"")) { isOK=true; } } } return isWebSocket ? isOK : true; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,pushMessage,public final static boolean  (AtmosphereResource.TRANSPORT t){ switch (t) { case POLLING: case UNDEFINED: case AJAX: return true; default : return false; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,rawWebSocket,"public final static boolean  (HttpServletRequest request){ Enumeration<String> connection=request.getHeaders(""Connection""); if (connection == null || !connection.hasMoreElements()) { connection=request.getHeaders(""connection""); } if (connection != null && connection.hasMoreElements()) { String[] e=connection.nextElement().toString().split("" ""); for ( String upgrade : e) { if (upgrade.trim().equalsIgnoreCase(WEBSOCKET_UPGRADE)) { return true; } } } return false; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,requestScopedInjection,"public static final boolean  (AtmosphereConfig config Object o){ AtmosphereObjectFactory injectableFactory=config.framework().objectFactory(); if (!InjectableObjectFactory.class.isAssignableFrom(injectableFactory.getClass())) { return false; } try { return InjectableObjectFactory.class.cast(config.framework().objectFactory()).needRequestScoped(o.getClass()); } catch ( Exception var4) { LOGGER.error("""" var4); return false; } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,resumableTransport,public final static boolean  (AtmosphereResource.TRANSPORT t){ switch (t) { case JSONP: case LONG_POLLING: return true; default : return false; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,twoConnectionsTransport,public final static boolean  (AtmosphereResource.TRANSPORT t){ switch (t) { case JSONP: case LONG_POLLING: case STREAMING: case SSE: case POLLING: case HTMLFILE: return true; default : return false; } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,webSocketEnabled,public final static boolean  (HttpServletRequest request){ if (closeMessage(request) || !webSocketQueryStringPresentOrNull(request)) return false; boolean allowWebSocketWithoutHeaders=request.getHeader(HeaderConfig.X_ATMO_WEBSOCKET_PROXY) != null ? true : false; if (allowWebSocketWithoutHeaders) return true; boolean webSocketEnabled=rawWebSocket(request); return webSocketEnabled; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,webSocketMessage,public final static boolean  (AtmosphereResource r){ AtmosphereRequest request=AtmosphereResourceImpl.class.cast(r).getRequest(false); return request.getAttribute(FrameworkConfig.WEBSOCKET_MESSAGE) != null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,webSocketQueryStringPresentOrNull,public final static boolean  (HttpServletRequest request){ String transport=request.getHeader(HeaderConfig.X_ATMOSPHERE_TRANSPORT); if (transport == null) { return true; } else { return transport.equalsIgnoreCase(HeaderConfig.WEBSOCKET_TRANSPORT); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Utils.java,websocketResource,public static final AtmosphereResource  (AtmosphereResource r){ String parentUUID=(String)AtmosphereResourceImpl.class.cast(r).getRequest(false).getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID); if (parentUUID != null) { AtmosphereResource resource=r.getAtmosphereConfig().resourcesFactory().find(parentUUID); if (resource != null) { r=resource; } } return r; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ThreadLocalInvoker.java,get,public T  (){ return this.threadLocalInstance.get(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ThreadLocalInvoker.java,invoke,"public Object  (Object proxy Method method Object[] args) throws Throwable { if (threadLocalInstance.get() == null) { throw new IllegalStateException(""No thread local"" + proxy.getClass()); } try { return method.invoke(threadLocalInstance.get() args); } catch ( IllegalAccessException ex) { throw new IllegalStateException(ex); } catch ( InvocationTargetException ex) { throw ex.getTargetException(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\ThreadLocalInvoker.java,set,public void  (T threadLocalInstance){ this.threadLocalInstance.set(threadLocalInstance); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,equalVersion,public static boolean  (int major int minor){ return minor == Version.minor && major == Version.major; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,getDotedVersion,public static String  (){ return dotedVersion; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,getMajorVersion,public static int  (){ return major; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,getMicroVersion,public static int  (){ return micro; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,getMinorVersion,public static int  (){ return minor; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,getRawVersion,public static String  (){ return version; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\Version.java,main,public static void  (String[] args){ System.out.println(Version.getDotedVersion()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidAnnotationProcessor.java,scan,@Override public AnnotationProcessor  (String packageName) throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidAnnotationProcessor.java,scanAll,@Override public AnnotationProcessor  () throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,VoidServletConfig,public  (Map<String String> initParams){ this.initParams=initParams; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,getInitParameter,@Override public String  (String name){ return initParams.get(name); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,getInitParameterNames,@Override public Enumeration<String>  (){ return Collections.enumeration(initParams.values()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,getServletContext,@Override public ServletContext  (){ return (ServletContext)Proxy.newProxyInstance(getClass().getClassLoader() new Class[]{ServletContext.class} new InvocationHandler(){ @Override public Object invoke( Object proxy  Method method  Object[] args) throws Th
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,getServletName,@Override public String  (){ return ATMOSPHERE_SERVLET; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidServletConfig.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { return ServletProxyFactory.getDefault().proxy(proxy method args); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\WebDotXmlReader.java,WebDotXmlReader,public  (InputStream stream){ DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance(); try { parse(factory.newDocumentBuilder().parse(stream)); } catch ( SAXException e) { logger.error(e.getMessage() e); throw new RuntimeException(e); } catch ( IOException e) { logger.error(e.getMessage() e); throw new RuntimeException(e); } catch ( ParserConfigurationException e) { logger.error(e.getMessage() e); throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\WebDotXmlReader.java,getMappings,public ArrayList<String>  (){ return mappings; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\WebDotXmlReader.java,parse,"private void  (Document document){ Element element=document.getDocumentElement(); NodeList servlets=element.getElementsByTagName(""servlet""); String atmosphereServletName=null; for (int i=0; i < servlets.getLength(); i++) { Node m=servlets.item(i); NodeList list=m.getChildNodes(); for (int j=0; j < list.getLength(); j++) { Node n=list.item(j); if (n.getNodeName().equals(""servlet-name"")) { atmosphereServletName=n.getFirstChild().getNodeValue(); } if (n.getNodeName().equals(""servlet-class"")) { if (n.getFirstChild().getNodeValue().equals(FrameworkConfig.ATMOSPHERE_SERVLET)) { break; } } } } NodeList servletMappings=element.getElementsByTagName(""servlet-mapping""); for (int i=0; i < servletMappings.getLength(); i++) { Node m=servletMappings.item(i); NodeList list=m.getChildNodes(); String urlMapping=null; String servletName=null; for (int j=0; j < list.getLength(); j++) { Node n=list.item(j); if (n.getNodeName().equals(""servlet-name"")) { servletName=n.getFirstChild().getNodeValue(); if (!servletName.equals(atmosphereServletName)) { servletName=null; } } if (n.getNodeName().equals(""url-pattern"")) { urlMapping=n.getFirstChild().getNodeValue(); } if (servletName != null && urlMapping != null) { mappings.add(urlMapping); servletName=null; urlMapping=null; } } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketFactory.java,find,@Override public WebSocket  (String uuid){ AtmosphereResource r=factory.find(uuid); if (r != null) { return AtmosphereResourceImpl.class.cast(r).webSocket(); } return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,awaitTermination,@Override public boolean  (long l TimeUnit timeUnit) throws InterruptedException { return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,execute,@Override public void  (Runnable runnable){ runnable.run(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,invokeAll,@Override public <T>List<Future<T>>  (Collection<? extends Callable<T>> callables long l TimeUnit timeUnit) throws InterruptedException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,invokeAny,@Override public <T>T  (Collection<? extends Callable<T>> callables long l TimeUnit timeUnit) throws InterruptedException  ExecutionException  TimeoutException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,isShutdown,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,isTerminated,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,shutdownNow,@Override public List<Runnable>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\VoidExecutorService.java,submit,@Override public Future<?>  (Runnable runnable){ runnable.run(); return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\util\XSSHtmlFilter.java,filter,"public BroadcastAction  (String broadcasterId Object originalMessage Object o){ if (o instanceof String) { String message=(String)o; StringBuffer buffer=new StringBuffer(message.length()); for (int i=0; i < message.length(); i++) { char c=message.charAt(i); switch (c) { case '\b': buffer.append(""\\b""); break; case '\f': buffer.append(""\\f""); break; case '\n': buffer.append(""<br />""); break; case '\r': break; case '\t': buffer.append(""\\t""); break; case '\'': buffer.append(""\\'""); break; case '\""': buffer.append(""\\\""""); break; case '\\': buffer.append(""\\\\""); break; case '<': buffer.append(""&lt;""); break; case '>': buffer.append(""&gt;""); break; case '&': buffer.append(""&amp;""); break; default : buffer.append(c); } } return new BroadcastAction(buffer.toString()); } else { return new BroadcastAction(o); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\ProtocolUtil.java,attributes,private static Map<String Object>  (WebSocket webSocket AtmosphereRequest request){ Map<String Object> m=new ConcurrentHashMap<String Object>(); m.putAll(webSocket.attributes()); return m; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\ProtocolUtil.java,constructRequest,protected static AtmosphereRequestImpl.Builder  (WebSocket webSocket String pathInfo String requestURI String methodType String contentType boolean destroyable){ AtmosphereResource resource=webSocket.resource(); AtmosphereRequest request=AtmosphereResourceImpl.class.cast(resource).getRequest(false); Map<String Object> m=attributes(webSocket request); AtmosphereRequestImpl.Builder b=(new AtmosphereRequestImpl.Builder().request(request).method(methodType).contentType(contentType == null ? request.getContentType() : contentType).attributes(m).pathInfo(pathInfo).contextPath(request.getContextPath()).servletPath(request.getServletPath()).requestURI(requestURI).requestURL(request.requestURL()).destroyable(destroyable).headers(request.headersMap()).session(resource.session())); return b; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,allowedCloseCode,private boolean  (int closeCode){ return closeCode <= 1001 || closeCode > 1004 ? true : false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,byteBufferMaxSize,public DefaultWebSocketProcessor  (int byteBufferMaxSize){ this.byteBufferMaxSize=byteBufferMaxSize; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,call,@Override public Object  () throws Exception { AtmosphereResource currentResource=framework.atmosphereFactory().find(resource.uuid()); if (currentResource != null && currentResource.isSuspended()) { executeClose(webSocket 1005); finish(webSocket currentRe
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,charBufferMaxSize,public DefaultWebSocketProcessor  (int charBufferMaxSize){ this.charBufferMaxSize=charBufferMaxSize; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,close,"@Override public void  (final WebSocket webSocket int closeCode){ WebSocketHandler webSocketHandler=webSocket.webSocketHandler(); final AtmosphereResourceImpl resource=(AtmosphereResourceImpl)webSocket.resource(); if (resource == null) { logger.trace(""Alr"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,closingTime,public long  (){ return closingTime; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,configure,"public WebSocketProcessor  (AtmosphereConfig config){ this.framework=config.framework(); this.webSocketProtocol=framework.getWebSocketProtocol(); String s=framework.getAtmosphereConfig().getInitParameter(RECYCLE_ATMOSPHERE_REQUEST_RESPONSE); if (s != null && Boolean.valueOf(s)) { destroyable=true; } else { destroyable=false; } s=framework.getAtmosphereConfig().getInitParameter(WEBSOCKET_PROTOCOL_EXECUTION); if (s != null && Boolean.valueOf(s)) { executeAsync=true; } else { executeAsync=false; } s=framework.getAtmosphereConfig().getInitParameter(IN_MEMORY_STREAMING_BUFFER_SIZE); if (s != null) { byteBufferMaxSize=Integer.valueOf(s); charBufferMaxSize=byteBufferMaxSize; } if (executeAsync) { asyncExecutor=ExecutorsFactory.getAsyncOperationExecutor(config ""WebSocket""); } else { asyncExecutor=VoidExecutorService.VOID; } scheduler=ExecutorsFactory.getScheduler(config); optimizeMapping(); closingTime=Long.valueOf(config.getInitParameter(ApplicationConfig.CLOSED_ATMOSPHERE_THINK_TIME ""0"")); invokeInterceptors=Boolean.valueOf(config.getInitParameter(INVOKE_ATMOSPHERE_INTERCEPTOR_ON_WEBSOCKET_MESSAGE ""true"")); config.startupHook(new AtmosphereConfig.StartupHook(){ @Override public void started( final AtmosphereFramework framework){ if (AsynchronousProcessor.class.isAssignableFrom(framework.getAsyncSupport().getClass())) { asynchronousProcessor=AsynchronousProcessor.class.cast(framework.getAsyncSupport()); } else { asynchronousProcessor=new AsynchronousProcessor(framework.getAtmosphereConfig()){ @Override public Action service( AtmosphereRequest req  AtmosphereResponse res) throws IOException  ServletException { return framework.getAsyncSupport().service(req res); } } ; } } } ); return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,configureHeader,public static final Map<String String>  (AtmosphereRequest request){ Map<String String> headers=new HashMap<String String>(); Enumeration<String> e=request.getParameterNames(); String s; while (e.hasMoreElements()) { s=e.nextElement(); headers.put(s request.getParameter(s)); } headers.put(HeaderConfig.X_ATMOSPHERE_TRANSPORT HeaderConfig.WEBSOCKET_TRANSPORT); return headers; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,destroy,@Override public void  (){ boolean shared=framework.isShareExecutorServices(); if (asyncExecutor != null && !shared) { asyncExecutor.shutdown(); } if (scheduler != null && !shared) { scheduler.shutdown(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,destroyable,public boolean  (){ return destroyable; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,dispatch,"public final void  (WebSocket webSocket final AtmosphereRequest request final AtmosphereResponse r){ if (request == null) return; try { framework.doCometSupport(request r); } catch ( Throwable e) { logger.warn(""Failed invoking AtmosphereFramework.doCometSupport()"" e); webSocketProtocol.onError(webSocket new WebSocketException(e new AtmosphereResponseImpl.Builder().request(request).status(500).statusMessage(""Server Error"").build())); return; } if (r.getStatus() >= 400) { webSocketProtocol.onError(webSocket new WebSocketException(""Status code higher or equal than 400"" r)); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,dispatchReader,protected void  (WebSocket webSocket Reader r) throws IOException { int read=0; CharBuffer cb=webSocket.cb; try { while (read > -1) { cb.position(cb.position() + read); if (cb.remaining() == 0) { cb=resizeCharBuffer(webSocket); } read=r.read(cb.array() cb.position() cb.remaining()); } cb.flip(); invokeWebSocketProtocol(webSocket cb.toString()); } finally { cb.clear(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,dispatchStream,protected void  (WebSocket webSocket InputStream is) throws IOException { int read=0; ByteBuffer bb=webSocket.bb; try { while (read > -1) { bb.position(bb.position() + read); if (bb.remaining() == 0) { bb=resizeByteBuffer(webSocket); } read=is.read(bb.array() bb.position() bb.remaining()); } bb.flip(); invokeWebSocketProtocol(webSocket bb.array() 0 bb.limit()); } finally { bb.clear(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,executeAsync,public boolean  (){ return executeAsync; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,executeClose,public void  (WebSocket webSocket int closeCode){ AtmosphereResource r=webSocket.resource(); boolean isClosedByClient=r == null ? true : r.getAtmosphereResourceEvent().isClosedByClient(); try { if (r != null) { asynchronousProcessor.endRequest(AtmosphereResourceImpl.class.cast(r) true); } } finally { if (!isClosedByClient) { notifyListener(webSocket new WebSocketEventListener.WebSocketEvent(closeCode CLOSE webSocket)); } } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,finish,"private void  (WebSocket webSocket AtmosphereResource resource AtmosphereRequest r AtmosphereResponse s boolean closeWebSocket){ framework.atmosphereFactory().remove(resource.uuid()); if (webSocket != null) { try { r.setAttribute(WebSocket.CLEAN_CLOSE Boolean.TRUE); webSocket.resource(null); if (closeWebSocket) webSocket.close(s); } catch ( IOException e) { logger.trace("""" e); } } if (r != null) { r.destroy(true); } if (s != null) { s.destroy(true); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,handleException,"private void  (Exception ex WebSocket webSocket WebSocketHandler webSocketHandler){ logger.error("""" ex); AtmosphereResource r=webSocket.resource(); if (r != null) { webSocketHandler.onError(webSocket new WebSocketException(ex new AtmosphereResponseImpl.Builder().request(r != null ? AtmosphereResourceImpl.class.cast(r).getRequest(false) : null).status(500).statusMessage(""Server Error"").build())); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,handlers,public Map<String WebSocketHandlerProxy>  (){ return handlers; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,handshake,"@Override public boolean  (HttpServletRequest request){ if (request != null) { logger.trace(""Processing request {}"" request); } return true; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,invokeInterceptors,public boolean  (){ return invokeInterceptors; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,invokeWebSocketProtocol,@Override public void  (WebSocket webSocket Reader reader){ WebSocketHandlerProxy webSocketHandler=webSocketHandlerForMessage(webSocket); try { if (webSocketHandler == null) { if (WebSocketProtocolStream.class.isAssignableFrom(webSocketProtocol.getClass()
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,mapper,public EndpointMapper<WebSocketHandlerProxy>  (){ return mapper; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,notifyListener,@Override public void  (WebSocket webSocket WebSocketEventListener.WebSocketEvent event){ AtmosphereResource resource=webSocket.resource(); if (resource == null) return; AtmosphereResourceImpl r=AtmosphereResourceImpl.class.cast(resource); for ( Atmospher
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,onDisconnect,private void  (WebSocketEvent event AtmosphereResourceEventListener l){ if (event.webSocket() != null && event.webSocket().resource() != null) { framework.notifyDestroyed(event.webSocket().resource().uuid()); } WebSocketEventListener.class.cast(l).onDisconnect(event); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,onPing,@Override public void  (WebSocket webSocket byte[] payload int offset int length){ WebSocketHandlerProxy webSocketHandler=webSocketHandlerForMessage(webSocket); if (webSocketHandler != null && WebSocketPingPongListener.class.isAssignableFrom(webSocketHand
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,onPong,@Override public void  (WebSocket webSocket byte[] payload int offset int length){ WebSocketHandlerProxy webSocketHandler=webSocketHandlerForMessage(webSocket); if (webSocketHandler != null && WebSocketPingPongListener.class.isAssignableFrom(webSocketHand
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,open,@Override public final void  (final WebSocket webSocket final AtmosphereRequest request final AtmosphereResponse response) throws IOException { if (framework.isDestroyed()) return; if (framework.getAtmosphereConfig().handlers().isEmpty()) { synchronized (
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,optimizeMapping,"protected void  (){ for ( String w : framework.getAtmosphereConfig().handlers().keySet()) { if (w.contains(""{"") && w.contains(""}"")) { wildcardMapping=true; } } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,postProcessMapping,"protected WebSocketHandler  (WebSocket webSocket AtmosphereRequest request WebSocketHandlerProxy w){ WebSocketHandlerProxy p=null; String path=w.path(); if (wildcardMapping()) { String pathInfo=null; try { pathInfo=request.getPathInfo(); } catch ( IllegalStateException ex) { } if (pathInfo != null) { path=request.getServletPath() + pathInfo; } else { path=request.getServletPath(); } if (path == null || path.isEmpty()) { path=""/""; } synchronized (handlers) { p=handlers.get(path); if (p == null) { WebSocketHandlerService a=w.proxied.getClass().getAnnotation(WebSocketHandlerService.class); if (a != null) { String targetPath=a.path(); if (targetPath.indexOf(""{"") != -1 && targetPath.indexOf(""}"") != -1) { try { boolean singleton=w.proxied.getClass().getAnnotation(Singleton.class) != null; if (!singleton) { w=new WebSocketHandlerProxy(a.broadcaster() framework.newClassInstance(WebSocketHandler.class w.proxied.getClass())); } registerWebSocketHandler(path new WebSocketHandlerProxy(a.broadcaster() w)); request.localAttributes().put(Named.class.getName() path.substring(targetPath.indexOf(""{""))); p=handlers.get(path); } catch ( Throwable e) { logger.warn(""Unable to create WebSocketHandler"" e); } } } } } } try { webSocket.resource().setBroadcaster(AnnotationUtil.broadcaster(framework p != null ? p.broadcasterClazz : w.broadcasterClazz path)); } catch ( Exception e) { logger.error("""" e); } return p != null ? p : w; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,registerWebSocketHandler,@Override public WebSocketProcessor  (String path WebSocketHandlerProxy webSockethandler){ handlers.put(path webSockethandler.path(path)); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,resizeByteBuffer,"private ByteBuffer  (WebSocket webSocket) throws IOException { int maxSize=byteBufferMaxSize; ByteBuffer bb=webSocket.bb; if (bb.limit() >= maxSize) { throw new IOException(""Message Buffer too small. Use "" + StreamingHttpProtocol.class.getName() + "" when streaming over websocket.""); } long newSize=bb.limit() * 2; if (newSize > maxSize) { newSize=maxSize; } ByteBuffer newBuffer=ByteBuffer.allocate((int)newSize); bb.rewind(); newBuffer.put(bb); webSocket.bb=newBuffer; return newBuffer; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,resizeCharBuffer,"private CharBuffer  (WebSocket webSocket) throws IOException { int maxSize=charBufferMaxSize; CharBuffer cb=webSocket.cb; if (cb.limit() >= maxSize) { throw new IOException(""Message Buffer too small. Use "" + StreamingHttpProtocol.class.getName() + "" when streaming over websocket.""); } long newSize=cb.limit() * 2; if (newSize > maxSize) { newSize=maxSize; } CharBuffer newBuffer=CharBuffer.allocate((int)newSize); cb.rewind(); newBuffer.put(cb); webSocket.cb=newBuffer; return newBuffer; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,run,@Override public void  (){ AtmosphereResponse w=new AtmosphereResponseImpl(webSocket r destroyable); try { dispatch(webSocket r w); } finally { r.destroy(); w.destroy(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return framework.getAsyncSupport().service(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,started,@Override public void  (final AtmosphereFramework framework){ if (AsynchronousProcessor.class.isAssignableFrom(framework.getAsyncSupport().getClass())) { asynchronousProcessor=AsynchronousProcessor.class.cast(framework.getAsyncSupport()); } else { asynchr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,webSocketHandlerForMessage,"private WebSocketHandlerProxy  (WebSocket webSocket){ AtmosphereResourceImpl impl=AtmosphereResourceImpl.class.cast(webSocket.resource()); if (impl != null) { impl.getRequest(false).setAttribute(FrameworkConfig.WEBSOCKET_MESSAGE ""true""); try { Utils.inject(impl); } catch ( IllegalAccessException e) { logger.warn("""" e); } } return WebSocketHandlerProxy.class.cast(webSocket.webSocketHandler()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\DefaultWebSocketProcessor.java,wildcardMapping,public DefaultWebSocketProcessor  (boolean wildcardMapping){ this.wildcardMapping=wildcardMapping; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\SimpleHttpProtocol.java,configure,"@Override public void  (AtmosphereConfig config){ String contentType=config.getInitParameter(ApplicationConfig.WEBSOCKET_CONTENT_TYPE); if (contentType == null) { contentType=""text/plain""; } this.contentType=contentType; String methodType=config.getInitPa"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\SimpleHttpProtocol.java,onError,"@Override public void  (WebSocket webSocket WebSocketProcessor.WebSocketException t){ logger.warn(t.getMessage() + "". Unable to deliver the websocket messages to installed component."" + "" Status {} Message {}"" t.response().getStatus() t.response().getStat"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\SimpleHttpProtocol.java,onMessage,"@Override public List<AtmosphereRequest>  (WebSocket webSocket byte[] d final int offset final int length){ AtmosphereResourceImpl resource=(AtmosphereResourceImpl)webSocket.resource(); if (resource == null) { logger.trace(""The WebSocket has been closed b"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\EchoProtocol.java,onError,"@Override public void  (WebSocket webSocket WebSocketProcessor.WebSocketException t){ logger.error(t.getMessage() + "" Status {} Message {}"" t.response().getStatus() t.response().getStatusMessage()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\EchoProtocol.java,onMessage,"@Override public List<AtmosphereRequest>  (WebSocket webSocket byte[] data int offset int length){ logger.trace(""broadcast byte""); byte[] b=new byte[length]; System.arraycopy(data offset b 0 length); webSocket.resource().getBroadcaster().broadcast(b); ret"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,StreamingHttpProtocol,public  (){ delegate=new SimpleHttpProtocol(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,configure,"@Override public void  (AtmosphereConfig config){ String contentType=config.getInitParameter(ApplicationConfig.WEBSOCKET_CONTENT_TYPE); if (contentType == null) { contentType=""text/plain""; } this.contentType=contentType; String methodType=config.getInitPa"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,onBinaryStream,"@Override public List<AtmosphereRequest>  (WebSocket webSocket InputStream stream){ AtmosphereResourceImpl resource=(AtmosphereResourceImpl)webSocket.resource(); if (resource == null) { logger.trace(""The WebSocket has been closed before the message was pr"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,onError,"@Override public void  (WebSocket webSocket WebSocketProcessor.WebSocketException t){ logger.warn(t.getMessage() + "" Status {} Message {}"" t.response().getStatus() t.response().getStatusMessage()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,onMessage,@Override public List<AtmosphereRequest>  (WebSocket webSocket byte[] data int offset int length){ return delegate.onMessage(webSocket data offset length); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\protocol\StreamingHttpProtocol.java,onTextStream,"@Override public List<AtmosphereRequest>  (WebSocket webSocket Reader r){ AtmosphereResourceImpl resource=(AtmosphereResourceImpl)webSocket.resource(); if (resource == null) { logger.trace(""The WebSocket has been closed before the message was processed."")"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,WebSocket,public  (AtmosphereConfig config){ String s=config.getInitParameter(ApplicationConfig.WEBSOCKET_BINARY_WRITE); if (s != null && Boolean.parseBoolean(s)) { binaryWrite=true; } else { binaryWrite=false; } this.config=config; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,attachment,public Object  (){ return attachment; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,attributes,public Map<String Object>  (){ return attributesAtWebSocketOpen; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,binaryWrite,public WebSocket  (boolean binaryWrite){ this.binaryWrite=binaryWrite; return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocket.java,broadcast,"public WebSocket  (Object o){ if (r != null) { r.getBroadcaster().broadcast(o); } else { logger.debug(""No AtmosphereResource Associated with this WebSocket.""); } return this; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListener.java,WebSocketEvent,public  (T message TYPE type WebSocket webSocket){ this.message=message; this.type=type; this.webSocket=webSocket; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListener.java,message,public T  (){ return message; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onBroadcast,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onClose,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onConnect,"@Override public void  (WebSocketEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onControl,"@Override public void  (WebSocketEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onDisconnect,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onHandshake,"@Override public void  (WebSocketEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onHeartbeat,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onMessage,"@Override public void  (WebSocketEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onPreSuspend,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onResume,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onSuspend,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketEventListenerAdapter.java,onThrowable,"@Override public void  (AtmosphereResourceEvent event){ logger.trace(""{}"" event); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketHandshakeFilter.java,doFilter,@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { HttpServletRequest r=HttpServletRequest.class.cast(request); if (Utils.webSocketEnabled(r)) { int draft=r.getIntHeader(WEBSOC
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketHandshakeFilter.java,init,"@Override public void  (FilterConfig filterConfig) throws ServletException { String draft=filterConfig.getInitParameter(ApplicationConfig.WEB_SOCKET_BANNED_VERSION); if (draft != null) { bannedVersion=draft.split("" ""); logger.debug(""Blocked WebSocket Draf"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessor.java,WebSocketException,public  (Throwable throwable AtmosphereResponse r){ super(throwable); this.r=r; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessor.java,WebSocketHandlerProxy,public  (WebSocketHandler proxied){ this.broadcasterClazz=SimpleBroadcaster.class; this.proxied=proxied; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessorAdapter.java,configure,@Override public WebSocketProcessor  (AtmosphereConfig config){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessorAdapter.java,handshake,@Override public boolean  (HttpServletRequest request){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketProcessorAdapter.java,registerWebSocketHandler,@Override public WebSocketProcessor  (String path WebSocketHandlerProxy webSockethandler){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,onBinaryStream,"@Override public void  (WebSocket webSocket InputStream inputStream) throws IOException { logger.trace(""onBinaryStream {}"" webSocket); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,onByteMessage,"@Override public void  (WebSocket webSocket byte[] data int offset int length) throws IOException { logger.trace(""onByteMessage {}"" webSocket); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,onClose,"@Override public void  (WebSocket webSocket){ logger.trace(""onClose {}"" webSocket); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,onError,"@Override public void  (WebSocket webSocket WebSocketProcessor.WebSocketException t){ logger.trace(""onError {}"" webSocket t); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,onOpen,"@Override public void  (WebSocket webSocket) throws IOException { logger.trace(""onOpen {}"" webSocket); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,onTextMessage,"@Override public void  (WebSocket webSocket String data) throws IOException { logger.trace(""onTextMessage {}"" webSocket); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\main\java\org\atmosphere\websocket\WebSocketStreamingHandlerAdapter.java,onTextStream,"@Override public void  (WebSocket webSocket Reader reader) throws IOException { logger.trace(""onTextStream {}"" webSocket); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,after,@AfterMethod public void  (){ r.set(null); framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()); framework.addAnnotationPackage(BroadcasterCacheTest.class); framework.setAsyncSupport(new As
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\cache\ManagedAtmosphereHandlerTest.java,testBroadcasterCache,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/cache"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertEquals(frame"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,after,@AfterMethod public void  (){ r.set(null); framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()); framework.addAnnotationPackage(MyAnnotation.class); framework.setAsyncSupport(new Asynchrono
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,handle,@Override public void  (AtmosphereFramework framework Class<Object> annotatedClass){ MyAnnotation a=annotatedClass.getAnnotation(MyAnnotation.class); try { framework.addAtmosphereHandler(a.value() (AtmosphereHandler)framework.newClassInstance(Object.class
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { resource.suspend(); r.set(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\custom\CustomAnnotationTest.java,testGet,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/z"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); r.get().resume(); asse"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,after,@AfterMethod public void  (){ r.set(null); framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()); framework.addAnnotationPackage(ManagedMessage.class); framework.setAsyncSupport(new Asynchro
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,decode,@Override public StringBuffer  (String s){ return new StringBuffer(s); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,encode,"@Override public String  (StringBuffer s){ return s.toString() + ""-yo!""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,get,"@Get public void  (AtmosphereResource resource){ r.set(resource); resource.addEventListener(new OnSuspend(){ @Override public void onSuspend( AtmosphereResourceEvent event){ AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/h"").meth"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,message,@Message(encoders={StringBufferEncoder.class} decoders={StringBufferDecoder.class}) public void  (StringBuffer m){ message.set(m.toString()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,onBroadcast,@Override public void  (AtmosphereResourceEvent event){ latch.get().countDown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,onSuspend,"@Override public void  (AtmosphereResourceEvent event){ AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/h"").method(""POST"").body(""message"").build(); try { event.getResource().addEventListener(new OnBroadcast(){ @Override public voi"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,testDecoder,"@Test public void  () throws IOException  ServletException  InterruptedException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/g"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,testEncoder,"@Test public void  () throws IOException  ServletException  InterruptedException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/h"").method(""GET"").build(); AtmosphereResponse response=AtmosphereResponseImpl.newInstance(); final "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,testMessage,"@Test public void  () throws IOException  ServletException  InterruptedException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/f"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\EncoderDecoderTest.java,write,@Override public AsyncIOWriter  (AtmosphereResponse r byte[] data) throws IOException { ref.set(new String(data)); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,ArrayBaseWebSocket,public  (OutputStream outputStream){ super(framework.getAtmosphereConfig()); this.outputStream=outputStream; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,after,@AfterMethod public void  (){ r.set(null); framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()); framework.addAnnotationPackage(ManagedGet.class); framework.setAsyncSupport(new Asynchronous
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,delete,@Delete public void  (AtmosphereResource resource){ resource.suspend(); r.set(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,get,@Get public void  (AtmosphereResource resource){ resource.setBroadcaster(broadcaster); r.set(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,getInitParameter,"@Override public String  (String name){ return ApplicationConfig.CLIENT_HEARTBEAT_INTERVAL_IN_SECONDS.equals(name) ? ""10"" : null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,heartbeat,@org.atmosphere.config.service.Heartbeat public void  (AtmosphereResourceEvent resource){ message.set(paddingData); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,inspect,@Override public Action  (AtmosphereResource r){ invoked=true; return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,isOpen,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,message,@Message public void  (String s){ message.set(message.get() + s); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,onOpen,@Override public void  (WebSocket webSocket) throws IOException { WebSocket w=factory.find(webSocket.resource().uuid()); r.set(w == null ? null : webSocket.resource()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,onSuspend,"@Override public void  (AtmosphereResourceEvent event){ AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/postConstruct"").method(""POST"").body(""message"").build(); try { framework.doCometSupport(request AtmosphereResponseImpl.newInsta"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,post,@Post public void  (AtmosphereResource resource){ resource.suspend(); r.set(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,postConstruct,"@PostConstruct private void  (){ if (message.get() == ""postConstruct"") message.set(""error""); message.set(""postConstruct""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,priority,@Override public PRIORITY  (){ return InvokationOrder.FIRST_BEFORE_DEFAULT; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,put,@Put public void  (AtmosphereResource resource){ resource.suspend(); r.set(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,suspend,@Ready public void  (AtmosphereResource resource){ r.set(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testBinaryPost,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/b"").method(""POST"").body(""test"".getBytes()).build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testDelete,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/c"").method(""DELETE"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertNotNull(r.get"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testGet,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/a"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); r.get().resume(); asse"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testHeartbeat,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/heartbeat"").method(""GET"").build(); request.header(X_ATMOSPHERE_TRANSPORT WEBSOCKET_TRANSPORT); framework.doCometSupport(r"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testInjectAnnotation,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/injectAnnotation"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertN"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testInputStreamMessage,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/inputStreamInjection"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); ass"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testMessage,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/e"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertNotNull(r.get())"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testMessageWithResource,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/k"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertNotNull(r.get())"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testNamed,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/named"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertNotNull(r.ge"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testOverrideBroadcaster,"@Test public void  () throws IOException  ServletException { framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()); AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/override"").method(""GET"").build(); request.he"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testPost,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/b"").method(""POST"").body(""test"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertNo"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testPostConstruct,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/postConstruct"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertNotN"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testPriority,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/priority"").method(""GET"").build(); request.header(X_ATMOSPHERE_TRANSPORT LONG_POLLING_TRANSPORT); framework.doCometSupport"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testPut,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/d"").method(""PUT"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertNotNull(r.get())"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testReaderMessage,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/readerInjection"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); assertNo"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testSuspend,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/j"").method(""GET"").build(); request.header(X_ATMOSPHERE_TRANSPORT LONG_POLLING_TRANSPORT); framework.doCometSupport(reques"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,testWebSocketFactory,@Test public void  () throws IOException  ServletException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,toString,"@Override public String  (){ return ""XXX""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\ManagedAtmosphereHandlerTest.java,write,@Override public WebSocket  (byte[] b int offset int length) throws IOException { outputStream.write(b offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()); framework.addAnnotationPackage(AnnotationScanningTest.class); framework.setAsyncSupport(new 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,onDisconnect,@Override public void  (String uuid){ disconnected.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { resource.suspend(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,onSuspended,@Override public void  (String uuid){ suspended.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\scanning\AnnotationScanningTest.java,testAnnotation,"@Test public void  () throws IOException  ServletException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/a"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); AsynchronousProcessor."
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,ArrayBaseWebSocket,public  (OutputStream outputStream){ super(framework.getAtmosphereConfig()); this.outputStream=outputStream; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,AtmosphereHandlerPath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,InjectAtmosphereRequest,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,InjectAtmosphereResource,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,InjectAtmosphereResourceEvent,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,InjectAtmosphereResponse,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,InjectRuntime,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,ManagedDoublePath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,ManagedPath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,MeteorPath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,PathVar,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,SingletonAtmosphereHandlerPath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,SingletonManagedPath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,SingletonMeteorPath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,SingletonWebSocketHandlerPath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,WebSocketHandlerPath,public  (){ ++instanceCount; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,action,@Override public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,after,@AfterMethod public void  (){ r.set(null); framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.addAnnotationPackage(AtmosphereHandlerPath.class); framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()){ @Override public Actio
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,doGet,@Override public void  (HttpServletRequest req HttpServletResponse res) throws IOException { r.set(req.getPathInfo()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,get,@Get public void  (){ r.set(event.getResource().getRequest().getPathInfo()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,inspect,@Override public Action  (AtmosphereResource r){ invokationCount++; return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,isOpen,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,onOpen,public void  (WebSocket webSocket) throws IOException { r.set(webSocket.resource().getRequest().getPathInfo()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { r.set(resource.getRequest().getPathInfo()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testAtmosphereHandlerPath,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/ah/test2"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance())"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testAtmosphereRequestInjection,"@Test(enabled=true) public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/request/b123"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseI"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testAtmosphereResourceEventInjection,"@Test(enabled=true) public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/resourceEvent/b123"").method(""GET"").build(); framework.doCometSupport(request AtmosphereRes"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testAtmosphereResourceInjection,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/resource/b123"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstan"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testAtmosphereResponsetInjection,"@Test(enabled=true) public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/response/b123"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponse"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testManagedManagedDoublePathMessage,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/foo/bar/yo"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance("
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testManagedPathMessage,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/test"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()); as"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testManagedWebSocketPathMessage,@Test public void  () throws IOException  ServletException { instanceCount=0; ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorFactory.getDefault().getWe
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testMeteorPath,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/a/b/test2"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testNamedInjection,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/inject/b123"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testPathVar,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/pathVar/aaa/pathTest/b123"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseIm"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testSingletonAtmosphereHandler,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/singleton/atmospherehandler/yes"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResp"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testSingletonManaged,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/singleton/managed/yes"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl.n"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testSingletonManagedWebSocketPathMessage,@Test public void  () throws IOException  ServletException { instanceCount=0; ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorFactory.getDefault().getWe
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,testSingletonMeteorPath,"@Test public void  () throws IOException  ServletException { instanceCount=0; AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/singleton/meteor/test2"").method(""GET"").build(); framework.doCometSupport(request AtmosphereResponseImpl."
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\annotation\path\PathTest.java,write,@Override public WebSocket  (byte[] b int offset int length) throws IOException { outputStream.write(b offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,createAtmosphereResource,"private AtmosphereResource  (String method String path String data){ AtmosphereRequest.Builder b=new AtmosphereRequestImpl.Builder(); AtmosphereRequest request=b.method(""POST"").pathInfo(""/"").body(data).build(); AtmosphereResponse response=AtmosphereResponseImpl.newInstance(request); response.request(request); AtmosphereResourceImpl resource=new AtmosphereResourceImpl(); resource.initialize(framework.getAtmosphereConfig() framework.getBroadcasterFactory().get() request response Mockito.mock(AsyncSupport.class) null); return resource; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,extractContent,private String  (Reader reader){ char[] cbuf=new char[512]; StringBuilder sb=new StringBuilder(); int n; try { while ((n=reader.read(cbuf 0 cbuf.length)) != -1) { sb.append(cbuf 0 n); } } catch ( IOException e) { } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,getServletContext,@Override public ServletContext  (){ return Mockito.mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,setupAtmosphere,"private void  () throws Exception { framework=new AtmosphereFramework(); framework.setAsyncSupport(Mockito.mock(AsyncSupport.class)); framework.init(new ServletConfig(){ @Override public String getServletName(){ return ""void""; } @Override public ServletContext getServletContext(){ return Mockito.mock(ServletContext.class); } @Override public String getInitParameter( String name){ return null; } @Override public Enumeration<String> getInitParameterNames(){ return null; } } ); config=framework.getAtmosphereConfig(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testCreateRequestContinued,"@Test public void  () throws Exception { setupAtmosphere(); final String data1=""{\""id\"": \""123\""  \""method\"": \""POST\""  \""path\"": \""/topics/test\""  "" + ""\""type\"": \""application/json\""  \""detached\"": true  \""continue\"": true}\n{\""records\"": [""; final Strin"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testCreateRequestDetached,"@Test public void  () throws Exception { setupAtmosphere(); final String data=""{\""id\"": \""123\""  \""method\"": \""POST\""  \""path\"": \""/topics/test\""  "" + ""\""type\"": \""application/json\""  \""detached\"": true}\n{\""records\"": [{\""value\"": \""S2Fma2E=\""}]}""; Atmos"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testCreateRequestNormal,"@Test public void  () throws Exception { setupAtmosphere(); final String data=""{\""id\"": \""123\""  \""method\"": \""POST\""  \""path\"": \""/topics/test\""  "" + ""\""type\"": \""application/json\""  \""data\"":{\""records\"": [{\""value\"": \""S2Fma2E=\""}]}}""; AtmosphereResour"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingNoData,"@Test public void  () throws Exception { final String data=""{\""id\"": \""123\""  \""accept\"" : \""text/plain\"" }""; Reader r=new StringReader(data); SimpleRestInterceptor.JSONEnvelopeReader jer=new SimpleRestInterceptor.JSONEnvelopeReader(r); Map<String String>"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingNoDataApos,"@Test public void  () throws Exception { final String data=""{'id': \""123\""  'accept' : 'text/plain' }""; Reader r=new StringReader(data); SimpleRestInterceptor.JSONEnvelopeReader jer=new SimpleRestInterceptor.JSONEnvelopeReader(r); Map<String String> expec"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingNoDataAposMixedSpace,"@Test public void  () throws Exception { final String data=""{\n 'id':\""123\"" 'accept'\n: 'text/plain'\r }""; Reader r=new StringReader(data); SimpleRestInterceptor.JSONEnvelopeReader jer=new SimpleRestInterceptor.JSONEnvelopeReader(r); Map<String String> e"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingNoDataNumber,"@Test public void  () throws Exception { final String data=""{'id': \""123\""  \""size\"" : 69124  'ack' : true }""; Reader r=new StringReader(data); SimpleRestInterceptor.JSONEnvelopeReader jer=new SimpleRestInterceptor.JSONEnvelopeReader(r); Map<String String"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingNoDataNumberMixedSpace,"@Test public void  () throws Exception { final String data=""{'id': \""123\""  \""size\"":69124  \r\n'ack' :true }""; Reader r=new StringReader(data); SimpleRestInterceptor.JSONEnvelopeReader jer=new SimpleRestInterceptor.JSONEnvelopeReader(r); Map<String Strin"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingWithData,"@Test public void  () throws Exception { final String data=""{\""id\"": \""123\""  \""type\"" : \""application/json\""  \""data\"":{\""records\"": [{\""value\"": \""S2Fma2E=\""}]}}""; Reader r=new StringReader(data); SimpleRestInterceptor.JSONEnvelopeReader jer=new SimpleR"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingWithDetachedDataWithCRLF,"@Test public void  () throws Exception { final String data=""{\""id\"": \""123\""  \""type\"" : \""application/json\""  \""detached\"": true}\r\n"" + ""{\""records\"": [{\""value\"": \""S2Fma2E=\""}  {\""value\"": \""S2Fma2E=\""} {\""value\"": \""S2Fma2E=\""}]}""; Reader r=new Strin"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingWithDetachedDataWithLF,"@Test public void  () throws Exception { final String data=""{\""id\"": \""123\""  \""type\"" : \""application/json\""  \""detached\"": true}\n"" + ""{\""records\"": [{\""value\"": \""S2Fma2E=\""}  {\""value\"": \""S2Fma2E=\""} {\""value\"": \""S2Fma2E=\""}]}""; Reader r=new StringR"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingWithDetachedTextData,"@Test public void  () throws Exception { final String data=""{\""id\"": \""123\""  \""type\"" : \""text/plain\""  \""detached\"": true}\n"" + ""This is just a plain text""; Reader r=new StringReader(data); SimpleRestInterceptor.JSONEnvelopeReader jer=new SimpleRestInte"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,testParsingWithMoreData,"@Test public void  () throws Exception { final String data=""{\""id\"": \""123\""  \""type\"" : \""application/json\""  "" + ""\""data\"":{\""records\"": [{\""value\"": \""S2Fma2E=\""}  {\""value\"": \""S2Fma2E=\""} {\""value\"": \""S2Fma2E=\""}]}}""; Reader r=new StringReader(data)"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SimpleRestInterceptorTest.java,verify,"private void  (SimpleRestInterceptor.JSONEnvelopeReader jer Map<String String> expectedHeaders String expectedBody){ Map<String String> headers=jer.getHeaders(); assertEquals(expectedHeaders.size() headers.size()); for ( String key : expectedHeaders.keySet()) { assertEquals(headers.get(key) expectedHeaders.get(key) ""value of key "" + key + "" differs""); } if (expectedBody == null) { assertNull(jer.getReader()); } else { assertEquals(extractContent(jer.getReader()) expectedBody); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,answer,@Override public Void  (final InvocationOnMock invocationOnMock) throws Throwable { new Thread(){ @Override public void run(){ ((SendHandler)invocationOnMock.getArguments()[1]).onResult(sendResult); } } .start(); return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,isOpen,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,mockWriteResult,private void  (final SendResult sendResult){ doAnswer(new Answer<Void>(){ @Override public Void answer( final InvocationOnMock invocationOnMock) throws Throwable { new Thread(){ @Override public void run(){ ((SendHandler)invocationOnMock.getArguments()[1]).onResult(sendResult); } } .start(); return null; } } ).when(asyncRemoteEndpoint).sendText(anyString() any(SendHandler.class)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,run,@Override public void  (){ ((SendHandler)invocationOnMock.getArguments()[1]).onResult(sendResult); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,setUp,@BeforeMethod public void  () throws Exception { session=mock(Session.class); asyncRemoteEndpoint=mock(RemoteEndpoint.Async.class); when(session.getAsyncRemote()).thenReturn(asyncRemoteEndpoint); webSocket=new JSR356WebSocket(session new AtmosphereFramewo
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test_semaphore_is_released_in_case_of_ERROR_in_getAsyncRemote,"@Test(timeOut=1000 expectedExceptions=RuntimeException.class) public void  () throws Exception { when(session.getAsyncRemote()).thenThrow(new Error(""Unexpected error"")).thenReturn(asyncRemoteEndpoint); webSocket.write(""Hello1""); webSocket.write(""Hello2"");"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test_semaphore_is_released_in_case_of_NPE_in_getAsyncRemote,"@Test(timeOut=1000) public void  () throws Exception { when(session.getAsyncRemote()).thenThrow(new NullPointerException()).thenReturn(asyncRemoteEndpoint); webSocket.write(""Hello1""); webSocket.write(""Hello2""); verify(asyncRemoteEndpoint).sendText(eq(""Hel"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test_semaphore_is_released_in_case_of_RuntimeException_in_getAsyncRemote,"@Test(timeOut=1000 expectedExceptions=RuntimeException.class) public void  () throws Exception { when(session.getAsyncRemote()).thenThrow(new IllegalArgumentException(""Invalid argument"")).thenReturn(asyncRemoteEndpoint); webSocket.write(""Hello1""); webSock"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test_semaphore_is_released_in_case_of_failing_write,"@Test(timeOut=1000) public void  () throws Exception { mockWriteResult(new SendResult(new RuntimeException(""Fails""))); webSocket.write(""Hello""); webSocket.write(""Hello""); verify(asyncRemoteEndpoint times(2)).sendText(eq(""Hello"") any(SendHandler.class)); }"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\container\version\JSR356WebSocketTest.java,test_semaphore_is_released_in_case_of_successful_write,"@Test(timeOut=1000) public void  () throws Exception { mockWriteResult(new SendResult()); webSocket.write(""Hello""); webSocket.write(""Hello""); verify(asyncRemoteEndpoint times(2)).sendText(eq(""Hello"") any(SendHandler.class)); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,add,@Override public boolean  (Broadcaster b Object id){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,addBroadcasterListener,@Override public BroadcasterFactory  (BroadcasterListener b){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,broadcasterListeners,@Override public Collection<BroadcasterListener>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,get,@Override public <T extends Broadcaster>T  (Class<T> c Object id){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,init,@Override public void  (ServletConfig config) throws ServletException { super.init(config); framework().setBroadcasterFactory(new MyBroadcasterFactory()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,inspect,@Override public Action  (final AtmosphereResource r){ r.getRequest().setAttribute(MyInterceptor.class.getName() ++call); return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,lookup,@Override public <T extends Broadcaster>T  (Object id boolean createIfNull){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,lookupAll,@Override public Collection<Broadcaster>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,onPostDestroy,@Override public void  (AtmosphereFramework f){ count.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,onPostInit,@Override public void  (AtmosphereFramework f){ count.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,onPreDestroy,@Override public void  (AtmosphereFramework f){ count.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,onPreInit,@Override public void  (AtmosphereFramework f){ count.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,remove,@Override public boolean  (Object id){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,removeBroadcasterListener,@Override public BroadcasterFactory  (BroadcasterListener b){ return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,started,@Override public void  (AtmosphereFramework framework){ b.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,testAtmosphereFrameworkListener,@Test public void  () throws ServletException { AtmosphereServlet s=new MyAtmosphereServlet(); final AtomicInteger count=new AtomicInteger(); s.framework().frameworkListener(new AtmosphereFrameworkListener(){ @Override public void onPreInit( AtmosphereFra
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,testAtmosphereServlet,"@Test public void  () throws ServletException { AtmosphereServlet s=new MyAtmosphereServlet(); s.init(new ServletConfig(){ @Override public String getServletName(){ return ""void""; } @Override public ServletContext getServletContext(){ return mock(ServletC"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,testBroadcasterFactory,"@Test public void  () throws Exception { AtmosphereFramework f=new AtmosphereFramework(); f.setBroadcasterFactory(new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" f.getAtmosphereConfig())); assertNotNull(f.getBroadcasterFactory()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,testIsInit,@Test public void  () throws ServletException { AtmosphereFramework f=new AtmosphereFramework(); ; f.init(); final AtomicBoolean b=new AtomicBoolean(); f.getAtmosphereConfig().startupHook(new AtmosphereConfig.StartupHook(){ @Override public void started( 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,testReload,@Test public void  () throws ServletException { AtmosphereFramework f=new AtmosphereFramework(); ; f.init(); f.destroy(); f.init(); assertNotNull(f.getBroadcasterFactory()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereFrameworkTest.java,testServletContextFactory,@Test public void  () throws ServletException { AtmosphereFramework f=new AtmosphereFramework(); ; f.init(); assertNotNull(ServletContextFactory.getDefault().getServletContext()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,getServletContext,@Override public ServletContext  (){ return Mockito.mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,isReady,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,setup,"@BeforeMethod public void  () throws Exception { framework=new AtmosphereFramework(); framework.setAsyncSupport(Mockito.mock(AsyncSupport.class)); framework.init(new ServletConfig(){ @Override public String getServletName(){ return ""void""; } @Override pub"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,testDataWriter,@Test public void  () throws Exception { final ByteArrayOutputStream baos=new ByteArrayOutputStream(); ServletResponse resp=Mockito.mock(HttpServletResponse.class); Mockito.when(resp.getOutputStream()).thenReturn(new ServletOutputStream(){ @Override publi
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\interceptor\SSEAtmosphereInterceptorTest.java,write,@Override public void  (byte[] b int off int len) throws IOException { baos.write(b off len); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AsyncIOInterceptorTest.java,chaining,@Test public void  () throws ServletException  IOException { final AtomicReference<StringBuffer> s=new AtomicReference<>(new StringBuffer()); AtmosphereResponse res=AtmosphereResponseImpl.newInstance().request(AtmosphereRequestImpl.newInstance()); res.req
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AsyncIOInterceptorTest.java,error,@Override public byte[]  (AtmosphereResponse response int statusCode String reasonPhrase){ return new byte[0]; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AsyncIOInterceptorTest.java,singleTest,@Test public void  () throws ServletException  IOException { final AtomicReference<String> s=new AtomicReference<>(); AtmosphereResponse res=AtmosphereResponseImpl.newInstance().request(AtmosphereRequestImpl.newInstance()); res.request().setAttribute(PROP
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AsyncIOInterceptorTest.java,transformPayload,"@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { s.get().append(new String(responseDraft) + ""-yoyo""); return responseDraft; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()){ @Override public Action service( AtmosphereRequest req  AtmosphereResponse res) thr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent event) throws IOException { e.set(event); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,tesOnStateChange,@Test public void  () throws IOException  ServletException { final AtomicReference<AtmosphereResource> r=new AtomicReference<AtmosphereResource>(); final AtomicReference<AtmosphereResourceEvent> e=new AtomicReference<AtmosphereResourceEvent>(); framework.
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,testByteCachedList,"@Test public void  () throws Exception { AtmosphereFramework f=new AtmosphereFramework(); f.setBroadcasterFactory(new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" f.getAtmosphereConfig())); assertNotNull(f.getBroadcasterFactory()); broadcast"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereHandlerTest.java,write,@Override public AsyncIOWriter  (AtmosphereResponse r byte[] data) throws IOException { ref.set(data); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorWriterTest.java,addInterceptors,@Test public void  (){ AtmosphereInterceptorWriter writer=new AtmosphereInterceptorWriter(); TestFilter[] filters=new TestFilter[4]; for (int i=0; i < 4; i++) { filters[i]=new TestFilter(); } writer.interceptor(filters[0]); writer.interceptor(filters[1]);
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorWriterTest.java,error,@Override public byte[]  (AtmosphereResponse response int statusCode String reasonPhrase){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorWriterTest.java,transformPayload,@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorWriterTest.java,verifyInterceptors,"private void  (AtmosphereInterceptorWriter writer AsyncIOInterceptor[] filters){ int p=0; for ( AsyncIOInterceptor f : writer.filters) { if (!filters[p].equals(f)) { fail(""filter at index "" + p + "" does not match""); } p++; } assertEquals(filters.length p ""the wrong size of the list""); p=filters.length; for ( AsyncIOInterceptor f : writer.reversedFilters) { --p; if (!filters[p].equals(f)) { fail(""reversedFilter index at "" + p + "" does not match""); } } assertEquals(filters.length filters.length - p ""the wrong size of the list""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.init(new ServletConfig(){ @Override public String getServletName(){ ret
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,inspect,@Override public Action  (AtmosphereResource r){ e.set(r.getRequest().getQueryString()); return Action.CANCELLED; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,onPreSuspend,"@Override public void  (AtmosphereResourceEvent event){ AtmosphereResponse response=event.getResource().getResponse(); response.setCharacterEncoding(""utf-8""); e.set(response); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { e.set(resource.getRequest().body()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,stop,@AfterMethod public void  (){ framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,testEncodingOnPreSuspend,"@Test public void  () throws IOException  ServletException { final AtomicReference<AtmosphereResponse> e=new AtomicReference<AtmosphereResponse>(); framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onReque"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,testForceContentType,"@Test public void  () throws Exception { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/a"").body(""test"".getBytes()).build(); assertEquals(request.getContentType() ""text/plain""); request=new AtmosphereRequestImpl.Builder().pathInf"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,testNormalQueryStringBuilder,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { } @Override public void destroy()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,testQueryStringAsRequest,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { } @Override public void destroy()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,testQueryStringBuilder,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { } @Override public void destroy()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,testRequestBodyBytes,"@Test public void  () throws IOException  ServletException { final AtomicReference<AtmosphereRequestImpl.Body> e=new AtomicReference<AtmosphereRequestImpl.Body>(); framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override pub"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,testRequestBodyString,"@Test public void  () throws IOException  ServletException { final AtomicReference<AtmosphereRequestImpl.Body> e=new AtomicReference<AtmosphereRequestImpl.Body>(); framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override pub"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereRequestTest.java,testStrinpQueryStringBuilder,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { } @Override public void destroy()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,actionCancelledTest,"@Test public void  () throws ServletException  IOException { framework.addAtmosphereHandler(""/*"" handler); framework.interceptor(new AtmosphereInterceptor(){ @Override public void configure( AtmosphereConfig config){ } @Override public void destroy(){ } @"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,actionContinueCreatedTest,"@Test public void  () throws ServletException  IOException { framework.addAtmosphereHandler(""/*"" handler); framework.interceptor(new AtmosphereInterceptor(){ @Override public void configure( AtmosphereConfig config){ } @Override public void destroy(){ } @"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,actionContinueTest,"@Test public void  () throws ServletException  IOException { framework.addAtmosphereHandler(""/*"" handler); framework.interceptor(new AtmosphereInterceptor(){ @Override public void configure( AtmosphereConfig config){ } @Override public Action inspect( Atm"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,actionCreatedTest,"@Test public void  () throws ServletException  IOException { framework.addAtmosphereHandler(""/*"" handler); framework.interceptor(new AtmosphereInterceptor(){ @Override public void configure( AtmosphereConfig config){ } @Override public void destroy(){ } @"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,configureTest,@Test public void  () throws ServletException  IOException { final AtomicInteger count=new AtomicInteger(); framework=new AtmosphereFramework(); framework.setAsyncSupport(mock(AsyncSupport.class)); framework.interceptor(new AtmosphereInterceptor(){ @Overr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,create,"@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(mock(AsyncSupport.class)); framework.init(new ServletConfig(){ @Override public String getServletName(){ return ""void""; } @Override public Serv"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,inspect,@Override public Action  (AtmosphereResource r){ return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,postInspect,@Override public void  (AtmosphereResource r){ postInspected.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,postInspectOnThrown,"@Test public void  () throws Exception { AtmosphereHandler handler=mock(AtmosphereHandler.class); Mockito.doThrow(new RuntimeException()).when(handler).onRequest(Mockito.any(AtmosphereResource.class)); framework.addAtmosphereHandler(""/*"" handler); final A"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,priority,@Override public PRIORITY  (){ return InvokationOrder.FIRST_BEFORE_DEFAULT; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,priorityIllegalTest,"@Test public void  () throws ServletException  IOException { framework.addAtmosphereHandler(""/*"" handler); framework.interceptor(new AtmosphereInterceptorAdapter(){ @Override public Action inspect( AtmosphereResource r){ return Action.CREATED; } @Override"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,priorityTest,"@Test public void  () throws ServletException  IOException { framework.addAtmosphereHandler(""/*"" handler); framework.interceptor(new AtmosphereInterceptorAdapter(){ @Override public Action inspect( AtmosphereResource r){ return Action.CREATED; } @Override"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return action(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereInterceptorTest.java,toString,"@Override public String  (){ return ""XXX""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,broadcastersTest,"@Test public void  (){ Broadcaster b1=framework.getBroadcasterFactory().get(""b1""); Broadcaster b2=framework.getBroadcasterFactory().get(""b2""); AtmosphereResource r=framework.getAtmosphereConfig().resourcesFactory().create(framework.getAtmosphereConfig() b"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,create,"@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(mock(AsyncSupport.class)); framework.init(new ServletConfig(){ @Override public String getServletName(){ return ""void""; } @Override public Serv"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,createTest,@Test public void  (){ AtmosphereResource r=framework.getAtmosphereConfig().resourcesFactory().create(framework.getAtmosphereConfig() mock(Broadcaster.class) AtmosphereResponseImpl.newInstance().request(AtmosphereRequestImpl.newInstance()) mock(AsyncSuppo
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,deleteTest,"@Test public void  (){ for (int i=0; i < 10; i++) { framework.getBroadcasterFactory().get(String.valueOf(i)); } Broadcaster b2=framework.getBroadcasterFactory().get(""b2""); AtmosphereResource r=framework.getAtmosphereConfig().resourcesFactory().create(fram"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,findTest,"@Test public void  (){ Broadcaster b1=framework.getBroadcasterFactory().get(""b1""); Broadcaster b2=framework.getBroadcasterFactory().get(""b2""); AtmosphereResource r=framework.getAtmosphereConfig().resourcesFactory().create(framework.getAtmosphereConfig() b"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceFactoryTest.java,notFoundTest,@Test public void  (){ for (int i=0; i < 10; i++) { framework.getBroadcasterFactory().get(String.valueOf(i)); } AtmosphereResource r=framework.getAtmosphereConfig().resourcesFactory().create(framework.getAtmosphereConfig() framework.getBroadcasterFactory(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.init(new ServletConfig(){ @Override public String getServletName(){ ret
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,inspect,"@Override public Action  (AtmosphereResource r){ r.addEventListener(listener).suspend(); try { r.getBroadcaster().broadcast(""void"").get(); } catch ( InterruptedException e) { } catch ( ExecutionException e) { } return Action.CONTINUE; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,onBroadcast,@Override public void  (AtmosphereResourceEvent event){ broadcasted.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,onClose,@Override public void  (AtmosphereResourceEvent event){ closed.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,onDisconnect,@Override public void  (AtmosphereResourceEvent event){ disconnected.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,onPreSuspend,@Override public void  (AtmosphereResourceEvent event){ preSuspended.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,onResume,@Override public void  (AtmosphereResourceEvent event){ resumed.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,onSuspend,@Override public void  (AtmosphereResourceEvent event){ suspended.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,postInspect,@Override public void  (AtmosphereResource r){ try { r.close(); } catch ( IOException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,testListenersCallback,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { } @Override public void destroy()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceListenerTest.java,testOnClose,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { } @Override public void destroy()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,basicTrackingTest,@Test public void  () throws ServletException  IOException { recovery.configure(config); recovery.inspect(r); r.suspend(); assertEquals(recovery.states().size() 1); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,cancelAtmosphereResourceTest,@Test public void  () throws ServletException  IOException { recovery.configure(config); recovery.inspect(r); r.suspend(); r.getBroadcaster().removeAtmosphereResource(r); r.close(); assertEquals(recovery.states().size() 1); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,create,"@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(mock(AsyncSupport.class)); framework.init(); config=framework.getAtmosphereConfig(); r=config.resourcesFactory().create(config ""1234567""); r.se"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,destroy,@AfterMethod public void  (){ recovery.states().clear(); framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,longPollingAggregatedTest,@Test(enabled=false) public void  () throws ServletException  IOException  ExecutionException  InterruptedException { final AtomicReference<Object> ref=new AtomicReference<>(); AtmosphereResourceImpl r=(AtmosphereResourceImpl)config.resourcesFactory().cre
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,onResume,@Override public void  (AtmosphereResourceEvent event){ resumed.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent event) throws IOException { ref.set(event.getMessage()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,removeAtmosphereResourceTest,@Test public void  () throws ServletException  IOException { recovery.states().clear(); recovery.configure(config); recovery.inspect(r); r.suspend(); r.getBroadcaster().removeAtmosphereResource(r); assertEquals(recovery.states().get(r.uuid()).ids().size()
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,restorePartialStateTest,"@Test public void  () throws ServletException  IOException { recovery.configure(config); recovery.inspect(r); config.getBroadcasterFactory().lookup(""/1"" true).addAtmosphereResource(r); config.getBroadcasterFactory().lookup(""/2"" true).addAtmosphereResource"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,restoreStateTest,"@Test(enabled=false) public void  () throws ServletException  IOException { recovery.configure(config); recovery.inspect(r); config.getBroadcasterFactory().lookup(""/1"" true).addAtmosphereResource(r); config.getBroadcasterFactory().lookup(""/2"" true).addAtm"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceStateRecoveryTest.java,timeoutTest,@Test public void  () throws ServletException  IOException  InterruptedException { recovery.configure(config); recovery.inspect(r); final AtomicBoolean resumed=new AtomicBoolean(); final CountDownLatch latch=new CountDownLatch(1); r.addEventListener(new A
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,TestAsyncIOWriter,public  (OutputStream out){ this.out=out; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.init(new ServletConfig(){ @Override public String getServletName(){ ret
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,flush,@Override public AsyncIOWriter  (AtmosphereResponse r) throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,inspect,@Override public Action  (AtmosphereResource r){ try { r.getBroadcaster().addAtmosphereResource(r); if (suspended.getCount() == 1) { r.suspend(); return Action.SUSPEND; } else { return Action.CONTINUE; } } finally { suspended.countDown(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,redirect,@Override public AsyncIOWriter  (AtmosphereResponse r String location) throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,run,public void  (){ try { framework.doCometSupport(parentRequest AtmosphereResponseImpl.newInstance().request(parentRequest)); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCancelParentUUID,"@Test public void  () throws IOException  ServletException  InterruptedException { framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { } @Override"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCloseResponseOutputStream,@Test public void  () throws IOException { AtmosphereResponse response=AtmosphereResponseImpl.newInstance(); AsyncIOWriter writer=mock(AsyncIOWriter.class); AsyncIOWriter wswriter=mock(WebSocket.class); response.asyncIOWriter(writer); ServletOutputStream 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCloseResponseWriter,@Test public void  () throws IOException { AtmosphereResponse response=AtmosphereResponseImpl.newInstance(); AsyncIOWriter writer=mock(AsyncIOWriter.class); AsyncIOWriter wswriter=mock(WebSocket.class); response.asyncIOWriter(writer); PrintWriter pw=respo
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCompletionAwareForGetAsync,@Test public void  () throws IOException { verifyTestCompletionAwareForGetAsync(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCompletionAwareForStartAsync,@Test public void  () throws IOException { verifyTestCompletionAwareForStartAsync(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCompletionAwareForSync,@Test public void  () throws IOException  ServletException { verifyTestCompletionAwareForSync(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCompletionAwareForSyncButStartAsync,"@Test public void  () throws IOException  ServletException { Servlet s=mock(Servlet.class); framework.addInitParameter(ApplicationConfig.RESPONSE_COMPLETION_AWARE ""true""); ReflectorServletProcessor handler=new ReflectorServletProcessor(s); handler.init(fr"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCompletionNotAwareForGetAsync,@Test public void  () throws IOException { verifyTestCompletionAwareForGetAsync(false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCompletionNotAwareForStartAsync,@Test public void  () throws IOException { verifyTestCompletionAwareForStartAsync(false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testCompletionNotAwareForSync,@Test public void  () throws IOException  ServletException { verifyTestCompletionAwareForSync(false); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testHashCode,@Test public void  (){ String uuid=UUID.randomUUID().toString(); AtmosphereRequest request=AtmosphereRequestImpl.newInstance(); request.setAttribute(ApplicationConfig.SUSPENDED_ATMOSPHERE_RESOURCE_UUID uuid); AtmosphereResponse response=AtmosphereResponse
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testResponseWritingBuffered,@Test public void  () throws IOException { final ByteArrayOutputStream baos=new ByteArrayOutputStream(); AtmosphereRequest request=mock(AtmosphereRequestImpl.class); when(request.getAttribute(ApplicationConfig.RESPONSE_COMPLETION_AWARE)).thenReturn(Boolea
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testResponseWritingBufferedReset,@Test public void  () throws IOException { final ByteArrayOutputStream baos=new ByteArrayOutputStream(); AtmosphereRequest request=mock(AtmosphereRequestImpl.class); when(request.getAttribute(ApplicationConfig.RESPONSE_COMPLETION_AWARE)).thenReturn(Boolea
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testResponseWritingUnbuffered,@Test public void  () throws IOException { final ByteArrayOutputStream baos=new ByteArrayOutputStream(); AtmosphereResponse response=new AtmosphereResponseImpl.Builder().asyncIOWriter(new TestAsyncIOWriter(baos)).build(); response.getOutputStream(); respo
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,testUUID,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/a"" new AbstractReflectorAtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { } @Override public void destroy()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,verifyTestCompletionAwareForGetAsync,"private void  (boolean aware) throws IOException { if (aware) { framework.addInitParameter(ApplicationConfig.RESPONSE_COMPLETION_AWARE ""true""); } AtmosphereRequest request=AtmosphereRequestImpl.newInstance(); AtmosphereResponseImpl response=mock(AtmosphereResponseImpl.class); AtmosphereResourceImpl res=new AtmosphereResourceImpl(); res.initialize(framework.getAtmosphereConfig() framework.getBroadcasterFactory().get() request response null null); res.transport(AtmosphereResource.TRANSPORT.WEBSOCKET); request.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE res); AsyncContext ac=request.getAsyncContext(); verify(response times(0)).onComplete(); ac.complete(); verify(response times(aware ? 1 : 0)).onComplete(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,verifyTestCompletionAwareForStartAsync,"private void  (boolean aware) throws IOException { if (aware) { framework.addInitParameter(ApplicationConfig.RESPONSE_COMPLETION_AWARE ""true""); } AtmosphereRequest request=AtmosphereRequestImpl.newInstance(); AtmosphereResponseImpl response=mock(AtmosphereResponseImpl.class); AtmosphereResourceImpl res=new AtmosphereResourceImpl(); res.initialize(framework.getAtmosphereConfig() framework.getBroadcasterFactory().get() request response null null); res.transport(AtmosphereResource.TRANSPORT.WEBSOCKET); request.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE res); AsyncContext ac=request.startAsync(); verify(response times(0)).onComplete(); ac.complete(); verify(response times(aware ? 1 : 0)).onComplete(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,verifyTestCompletionAwareForSync,"private void  (boolean aware) throws IOException  ServletException { Servlet s=mock(Servlet.class); if (aware) { framework.addInitParameter(ApplicationConfig.RESPONSE_COMPLETION_AWARE ""true""); } ReflectorServletProcessor handler=new ReflectorServletProcessor(s); handler.init(framework.getAtmosphereConfig()); AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/a"").build(); AtmosphereResponseImpl response=mock(AtmosphereResponseImpl.class); AtmosphereResourceImpl res=new AtmosphereResourceImpl(); res.initialize(framework.getAtmosphereConfig() framework.getBroadcasterFactory().get() request response null null); res.transport(AtmosphereResource.TRANSPORT.WEBSOCKET); request.setAttribute(FrameworkConfig.ATMOSPHERE_RESOURCE res); request.setAttribute(FrameworkConfig.INJECTED_ATMOSPHERE_RESOURCE res); handler.onRequest(res); verify(response times(aware ? 1 : 0)).onComplete(); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,write,@Override public AsyncIOWriter  (AtmosphereResponse r byte[] data int offset int length) throws IOException { out.write(data offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereResourceTest.java,writeError,@Override public AsyncIOWriter  (AtmosphereResponse r int errorCode String message) throws IOException { return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.init(new ServletConfig(){ @Override public String getServletName(){ ret
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,onRequest,@Override public void  (final AtmosphereResource resource) throws IOException { resource.suspend(2 TimeUnit.SECONDS); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent event) throws IOException { try { rrr.set(session.get().tryAcquire()); _latch.countDown(); } catch ( InterruptedException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,run,"public void  (){ try { Thread.sleep(1000); AtmosphereRequest request=new AtmosphereRequestImpl.Builder().queryString(qs).pathInfo(""/acquire"").build(); framework.doCometSupport(request AtmosphereResponseImpl.newInstance(request)); } catch ( Exception e) { e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\AtmosphereSessionTest.java,testTrackAndTryAcquire,@Test public void  () throws IOException  ServletException  InterruptedException { final CountDownLatch latch=new CountDownLatch(1); final AtomicReference<AtmosphereSession> session=new AtomicReference<AtmosphereSession>(); framework.addAtmosphereHandler(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,addToCache,@Override public CacheMessage  (String id String uuid BroadcastMessage e){ CacheMessage c=put(e System.nanoTime() uuid broadcaster.getID()); cachedMessage.set(messages); latch.countDown(); return c; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,inspect,@Override public boolean  (BroadcastMessage message){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,retrieveFromCache,@Override public List<Object>  (String id String uuid){ return Collections.<Object>emptyList(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,setUp,"@BeforeMethod public void  () throws Exception { config=new AtmosphereFramework().getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" config); broadcaster=factory.get(DefaultBroadcaster.c"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,testBasicExcludeCache,@Test public void  () throws ExecutionException  InterruptedException  ServletException { BroadcasterCache cache=new UUIDBroadcasterCache(); cache.configure(config); AtmosphereResource r=config.resourcesFactory().create(broadcaster.getBroadcasterConfig().
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,testCache,@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache(){ @Override public CacheMessage addToCache( String id  String uuid  BroadcastMes
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,testCloseExcludeCache,"@Test public void  () throws ExecutionException  InterruptedException  ServletException  IOException { UUIDBroadcasterCache cache=new UUIDBroadcasterCache(); SimpleBroadcaster b=config.getBroadcasterFactory().lookup(SimpleBroadcaster.class ""uuidTest"" true"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,testEmptyCache,@Test public void  () throws ExecutionException  InterruptedException  ServletException { final CountDownLatch latch=new CountDownLatch(1); broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache(){ @Override public CacheMessag
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,testEmptyRejectedCache,@Test public void  () throws ExecutionException  InterruptedException  ServletException { final CountDownLatch latch=new CountDownLatch(1); broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache(){ @Override public CacheMessag
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,testExcludeCache,@Test public void  () throws ExecutionException  InterruptedException  ServletException { BroadcasterCache cache=new UUIDBroadcasterCache(); cache.configure(config); AtmosphereResource r=config.resourcesFactory().create(broadcaster.getBroadcasterConfig().
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,testRejectedCache,@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache(){ @Override public CacheMessage addToCache( String id  String uuid  BroadcastMes
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,testSuspendExcludeCache,"@Test public void  () throws ExecutionException  InterruptedException  ServletException  IOException { UUIDBroadcasterCache cache=new UUIDBroadcasterCache(); SimpleBroadcaster b=config.getBroadcasterFactory().lookup(SimpleBroadcaster.class ""uuidTest"" true"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterCacheTest.java,unSetUp,@AfterMethod public void  () throws Exception { broadcaster.removeAtmosphereResource(ar); config.getBroadcasterFactory().destroy(); ExecutorsFactory.reset(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,after,@AfterMethod public void  (){ framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()); framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()){ @Overr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,destroy,@Override public void  (){ destroy.set(true); latch.countDown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,onRequest,@Override public void  (AtmosphereResource e) throws IOException { e.suspend(); resource=e; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,releaseExternalResources,@Override public void  (){ releaseExternalResources.set(true); latch.countDown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,testEmpty,"@Test public void  () throws IOException  ServletException { Broadcaster b=framework.getBroadcasterFactory().lookup(B.class ""/test"" true); b.setBroadcasterLifeCyclePolicy(BroadcasterLifeCyclePolicy.EMPTY); AR ah=new AR(); framework.addAtmosphereHandler(""/"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,testEmptyDestroy,"@Test public void  () throws IOException  ServletException { Broadcaster b=framework.getBroadcasterFactory().lookup(B.class ""/test"" true); b.setBroadcasterLifeCyclePolicy(BroadcasterLifeCyclePolicy.EMPTY_DESTROY); AR ah=new AR(); framework.addAtmosphereHa"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,testIdle,"@Test public void  () throws IOException  ServletException  InterruptedException { B b=framework.getBroadcasterFactory().lookup(B.class ""/test"" true); b.setBroadcasterLifeCyclePolicy(new BroadcasterLifeCyclePolicy.Builder().policy(BroadcasterLifeCyclePoli"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,testIdleDestroy,"@Test public void  () throws IOException  ServletException  InterruptedException { B b=framework.getBroadcasterFactory().lookup(B.class ""/test"" true); b.setBroadcasterLifeCyclePolicy(new BroadcasterLifeCyclePolicy.Builder().policy(BroadcasterLifeCyclePoli"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,testIdleResume,"@Test public void  () throws IOException  ServletException  InterruptedException { B b=framework.getBroadcasterFactory().lookup(B.class ""/test"" true); b.setBroadcasterLifeCyclePolicy(new BroadcasterLifeCyclePolicy.Builder().policy(BroadcasterLifeCyclePoli"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterLifecyclePolicyTest.java,testNever,"@Test public void  () throws IOException  ServletException { Broadcaster b=framework.getBroadcasterFactory().lookup(B.class ""/test"" true); b.setBroadcasterLifeCyclePolicy(BroadcasterLifeCyclePolicy.NEVER); AR ah=new AR(); framework.addAtmosphereHandler(""/"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,after,@AfterMethod public void  (){ BAR.count.set(0); framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setDefaultBroadcasterClassName(SimpleBroadcaster.class.getName()); framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()){ @Overr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,onBroadcast,@Override public void  (AtmosphereResourceEvent event){ count.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,onComplete,@Override public void  (Broadcaster b){ completed.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,onMessage,@Override public void  (Broadcaster b Deliver d){ onMessage.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,onPostCreate,@Override public void  (Broadcaster b){ postCreated.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,onPreDestroy,@Override public void  (Broadcaster b){ preDestroyed.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,onRequest,"@Override public void  (AtmosphereResource e) throws IOException { try { e.getBroadcaster().broadcast(""test"").get(); e.getBroadcaster().destroy(); } catch ( InterruptedException e1) { e1.printStackTrace(); } catch ( ExecutionException e1) { e1.printStackT"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,testCachedOnBroadcast,"@Test public void  () throws IOException  ServletException { framework.setBroadcasterCacheClassName(UUIDBroadcasterCache.class.getName()).addAtmosphereHandler(""/*"" new CachedAR()).init(); Map<String String> m=new HashMap<>(); m.put(HeaderConfig.X_ATMOSPHE"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,testGet,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/*"" new AR()).init(); AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/a"").method(""GET"").build(); framework.doCometSupport(request Atmosph"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,testLongPollingOnBroadcast,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/*"" new BAR()).init(); Map<String String> m=new HashMap<>(); m.put(HeaderConfig.X_ATMOSPHERE_TRANSPORT HeaderConfig.LONG_POLLING_TRANSPORT); AtmosphereRequest req"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,testOnBroadcast,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/*"" new BAR()).init(); AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/a"").method(""GET"").build(); framework.doCometSupport(request Atmosp"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterListenerTest.java,testOnRemove,"@Test public void  () throws IOException  ServletException { framework.addAtmosphereHandler(""/*"" new BAR()).init(); AtmosphereRequest request=new AtmosphereRequestImpl.Builder().pathInfo(""/a"").method(""GET"").build(); framework.doCometSupport(request Atmosp"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,onComplete,@Override public void  (Broadcaster b){ complete.set(Boolean.TRUE); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent e) throws IOException { value.get().add(e.getResource()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return Action.CONTINUE; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,setUp,"@BeforeMethod public void  () throws Exception { config=new AtmosphereFramework().getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" config); config.framework().setBroadcasterFactory(fac"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,shouldCleanUpBroadcasterUponDestory,"@Test public void  (){ Broadcaster b1=config.getBroadcasterFactory().lookup(""/LEAK/EXISTS"" true); b1.destroy(); Assert.assertNull(config.getBroadcasterFactory().lookup(""/LEAK/EXISTS"")); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testAtmosphereResourceCancel,"@Test public void  () throws ExecutionException  InterruptedException  ServletException  IOException { Broadcaster two=ar.getAtmosphereConfig().getBroadcasterFactory().get(DefaultBroadcaster.class ""two""); two.addAtmosphereResource(ar); AtmosphereResourceI"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testBroadcasterListenerOnPostCreate,@Test public void  (){ final AtomicReference<Boolean> create=new AtomicReference<Boolean>(); BroadcasterListener l=new BroadcasterListenerAdapter(){ @Override public void onPostCreate( Broadcaster b){ create.set(Boolean.TRUE); } @Override public void onCo
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testBroadcasterListenerOnPreDestroy,@Test public void  (){ final AtomicReference<Boolean> deleted=new AtomicReference<Boolean>(); BroadcasterListener l=new BroadcasterListenerAdapter(){ @Override public void onPostCreate( Broadcaster b){ } @Override public void onComplete( Broadcaster b){ }
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testBroadcasterOnComplete,@Test public void  () throws ExecutionException  InterruptedException { final AtomicReference<Boolean> complete=new AtomicReference<Boolean>(false); BroadcasterListener l=new BroadcasterListenerAdapter(){ @Override public void onPostCreate( Broadcaster b)
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testCancelAtmosphereResource,"@Test public void  () throws ExecutionException  InterruptedException  ServletException  IOException { Broadcaster two=ar.getAtmosphereConfig().getBroadcasterFactory().get(DefaultBroadcaster.class ""two""); two.addAtmosphereResource(ar); ar.getRequest().set"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testDirectBroadcastMethod,"@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.broadcast(""foo"" ar).get(); assertEquals(atmosphereHandler.value.get().toArray()[0] ar); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testEmptyBroadcastMethod,"@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.resumeAll(); broadcaster.broadcast(""foo"").get(); assertEquals(atmosphereHandler.value.get() new HashSet()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testSetBroadcastMethod,@Test public void  () throws ExecutionException  InterruptedException  ServletException { AtmosphereConfig config=new AtmosphereFramework().setAsyncSupport(mock(Servlet30CometSupport.class)).init(new ServletConfig(){ @Override public String getServletName
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,testTimeoutAtmosphereResource,"@Test public void  () throws ExecutionException  InterruptedException  ServletException  IOException { Broadcaster two=ar.getAtmosphereConfig().getBroadcasterFactory().get(DefaultBroadcaster.class ""two""); two.addAtmosphereResource(ar); ar.getRequest().set"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcasterTest.java,unSetUp,@AfterMethod public void  () throws Exception { broadcaster.destroy(); atmosphereHandler.value.set(new HashSet()); config.getBroadcasterFactory().destroy(); ExecutorsFactory.reset(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,AbortFilter,public  (boolean perRequest){ this.perRequest=perRequest; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,DoNohingFilter,public  (String msg){ this.msg=msg; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,Filter,public  (String msg){ this.msg=msg; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,PerRequestFilter,public  (String msg){ this.msg=msg; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,SlipFilter,public  (boolean perRequest){ this.perRequest=perRequest; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,VoidAtmosphereResource,public  (String msg){ this.msg=msg; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,filter,@Override public BroadcastAction  (String broadcasterId Object originalMessage Object message){ return new BroadcastAction(BroadcastAction.ACTION.CONTINUE message + msg); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent e) throws IOException { value.get().append(e.getMessage()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,setUp,"@BeforeMethod public void  () throws Exception { AtmosphereConfig config=new AtmosphereFramework().getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" config); config.framework().setBroad"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testAbortFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new AbortFilter(true)); broadcaster.broadcast(""0"").get(); assertEquals(atmosphereHandler.value.get().toString() """"); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testAbortPerFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new AbortFilter(false)); broadcaster.getBroadcasterConfig().addFilter(new AbortFilter(true)); broadcaster.broadcast(""0"").get(); assertEqua"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testAbortPerFilterFuture,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new AbortFilter2()); broadcaster.broadcast(""0"").get(); assertEquals(atmosphereHandler.value.get().toString() """"); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testInitBroadcastFilter,@Test public void  () throws ExecutionException  InterruptedException  ServletException { AtmosphereConfig config=new AtmosphereFramework().addInitParameter(ApplicationConfig.BROADCAST_FILTER_CLASSES Filter.class.getName()).setAsyncSupport(mock(Servlet30C
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testMessageLengthFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new TrackMessageSizeFilter()); broadcaster.broadcast(""0"").get(); assertEquals(atmosphereHandler.value.get().toString() ""1|0""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testMixedPerRequestFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new Filter(""1"")); broadcaster.getBroadcasterConfig().addFilter(new DoNohingFilter(""a"")); broadcaster.getBroadcasterConfig().addFilter(new "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testMultipleFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new Filter(""1"")); broadcaster.getBroadcasterConfig().addFilter(new Filter(""2"")); broadcaster.getBroadcasterConfig().addFilter(new Filter("""
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testMultipleMessageLengthFilter,"@Test public void  () throws ExecutionException  InterruptedException { HashMap<String String> m=new HashMap<String String>(); m.put(HeaderConfig.X_ATMOSPHERE_TRACKMESSAGESIZE ""true""); AtmosphereRequest req=new AtmosphereRequestImpl.Builder().headers(m).b"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testMultipleMixedFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new Filter(""1"")); broadcaster.getBroadcasterConfig().addFilter(new Filter(""2"")); broadcaster.getBroadcasterConfig().addFilter(new Filter("""
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testMultipleMixedPerRequestFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new Filter(""1"")); broadcaster.getBroadcasterConfig().addFilter(new PerRequestFilter(""a"")); broadcaster.getBroadcasterConfig().addFilter(ne"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testMultiplePerRequestFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new PerRequestFilter(""1"")); broadcaster.getBroadcasterConfig().addFilter(new PerRequestFilter(""2"")); broadcaster.getBroadcasterConfig().ad"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testProgrammaticBroadcastFilter,"@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.getBroadcasterConfig().addFilter(new Filter()); broadcaster.broadcast(""0"").get(); assertEquals(atmosphereHandler.value.get().toString() ""0foo""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testSetMultipleMessageLengthFilter,"@Test public void  () throws ExecutionException  InterruptedException { HashMap<String String> m=new HashMap<String String>(); m.put(HeaderConfig.X_ATMOSPHERE_TRACKMESSAGESIZE ""true""); AtmosphereRequest req=new AtmosphereRequestImpl.Builder().headers(m).b"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testSkipFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new SlipFilter(true)); broadcaster.broadcast(""0"").get(); assertEquals(atmosphereHandler.value.get().toString() ""0-filter-perFilter""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testSkipPerFilter,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.getBroadcasterConfig().addFilter(new SlipFilter(true)); broadcaster.getBroadcasterConfig().addFilter(new Filter(""1"")); broadcaster.getBroadcasterConfig().addFilter(new Sli"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\BroadcastFilterTest.java,testVoidAtmosphereResouce,"@Test public void  () throws ExecutionException  InterruptedException { broadcaster.removeAtmosphereResource(ar); broadcaster.getBroadcasterConfig().addFilter(new VoidAtmosphereResource(""1"")); String s=(String)broadcaster.broadcast(""0"").get(); assertEqual"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,basicHandlerTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { final AtomicReference<Cookie> cValue=new AtomicReference<Cookie>(); final AtomicReference<AtmosphereResource> r=new AtomicReference<AtmosphereResource>(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.init(new ServletConfig(){ @Override public String getServletName(){ ret
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { resource.getResponse().addCookie(resource.getRequest().getCookies()[0]); r.set(resource); resource.getBroadcaster().addAtmosphereResource(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent event) throws IOException { Cookie[] c=event.getResource().getRequest().getCookies(); cValue.set(c[0]); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,setCookieTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { final AtomicReference<Cookie> cValue=new AtomicReference<Cookie>(); final AtomicReference<AtmosphereResource> r=new AtomicReference<AtmosphereResource>(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\CookieTest.java,unSet,@AfterMethod public void  () throws Exception { framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,newAR,AtmosphereResource  (AtmosphereHandler a){ return new AtmosphereResourceImpl(broadcaster.getBroadcasterConfig().getAtmosphereConfig() broadcaster mock(AtmosphereRequestImpl.class) AtmosphereResponseImpl.newInstance() mock(Servlet30CometSupport.class) a); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,onComplete,@Override public void  (Broadcaster b){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent e) throws IOException { count.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,setUp,"@BeforeMethod public void  () throws Exception { config=new AtmosphereFramework().addInitParameter(ApplicationConfig.BROADCASTER_SHARABLE_THREAD_POOLS ""true"").getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(DefaultBr"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,testMultipleConcurrentBroadcast,@Test public void  () throws InterruptedException { long t1=System.currentTimeMillis(); AR2 a=new AR2(); int count=50; int client=100; for (int i=0; i < client; i++) { broadcaster.addAtmosphereResource(newAR(a)); } final CountDownLatch latch=new CountDown
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,testMultipleNonOrderedConcurrentBroadcast,"@Test public void  () throws InterruptedException { AtmosphereConfig config=new AtmosphereFramework().addInitParameter(ApplicationConfig.BROADCASTER_SHARABLE_THREAD_POOLS ""true"").addInitParameter(ApplicationConfig.OUT_OF_ORDER_BROADCAST ""true"").getAtmosph"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,testMultipleNonOrderedSimpleBroadcast,"@Test public void  () throws InterruptedException { AtmosphereConfig config=new AtmosphereFramework().addInitParameter(ApplicationConfig.BROADCASTER_SHARABLE_THREAD_POOLS ""true"").addInitParameter(ApplicationConfig.OUT_OF_ORDER_BROADCAST ""true"").getAtmosph"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,testMultipleOrderedSimpleBroadcast,"@Test public void  () throws InterruptedException { AtmosphereConfig config=new AtmosphereFramework().getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(SimpleBroadcaster.class ""NEVER"" config); config.framework().setBro"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,testOrderedConcurrentBroadcast,@Test public void  () throws InterruptedException { long t1=System.currentTimeMillis(); atmosphereHandler=new AR(); ar=new AtmosphereResourceImpl(broadcaster.getBroadcasterConfig().getAtmosphereConfig() broadcaster mock(AtmosphereRequestImpl.class) Atmosp
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,testOrderedSimpleBroadcast,"@Test public void  () throws InterruptedException { AtmosphereConfig config=new AtmosphereFramework().getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(SimpleBroadcaster.class ""NEVER"" config); config.framework().setBro"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ConcurrentBroadcasterTest.java,unSetUp,@AfterMethod public void  () throws Exception { broadcaster.destroy(); config.getBroadcasterFactory().destroy(); ExecutorsFactory.reset(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,InvalidAsyncSupportClass,"public  (AtmosphereConfig config) throws InvocationTargetException { throw new InvocationTargetException(new Exception() ""This is an invalid AsyncSupport class for testing purposes""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,complete,@Override public AsyncSupport  (AtmosphereResource r){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,getContainerName,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,setUp,@BeforeMethod public void  () throws Exception { config=new AtmosphereFramework().init().getAtmosphereConfig(); defaultAsyncSupportResolver=new DefaultAsyncSupportResolver(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,supportWebSocket,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,testAsyncSupportClassNotFoundDefaultsToBlockingIOIfServlet30IsNotAvailable,@Test public void  (){ boolean useNativeIfPossible=false; boolean defaultToBlocking=false; boolean useServlet30Async=true; defaultAsyncSupportResolver=spy(defaultAsyncSupportResolver); List<Class<? extends AsyncSupport>> asyncSupportList=new ArrayList(){ 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,testAsyncSupportClassNotFoundDefaultsToServlet30IfAvailable,public void  (){ boolean useNativeIfPossible=false; boolean defaultToBlocking=false; boolean useServlet30Async=true; defaultAsyncSupportResolver=spy(defaultAsyncSupportResolver); List<Class<? extends AsyncSupport>> asyncSupportList=new ArrayList(){ { add(InvalidAsyncSupportClass.class); } } ; doReturn(asyncSupportList).when(defaultAsyncSupportResolver).detectWebSocketPresent(useNativeIfPossible useServlet30Async); doReturn(null).when(defaultAsyncSupportResolver).resolveNativeCometSupport(anyList()); Assert.assertEquals(defaultAsyncSupportResolver.resolve(useNativeIfPossible defaultToBlocking useServlet30Async).getClass() Servlet30CometSupport.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,testNullIfNonInstantiableWebSocketClass,public void  (){ Assert.assertNull(defaultAsyncSupportResolver.newCometSupport(InvalidAsyncSupportClass.class)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAsyncSupportResolverTest.java,unSet,@AfterMethod public void  () throws Exception { config.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultAtmosphereResourceSessionFactoryTest.java,testSessionLifecycle,@Test public void  (){ DefaultAtmosphereResourceSessionFactory factory=new DefaultAtmosphereResourceSessionFactory(); AtmosphereResourceEventListener disconnectListener=factory.getDisconnectListener(); AtmosphereResource r1=Mockito.mock(AtmosphereResource
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,addToCache,@Override public CacheMessage  (String id String uuid BroadcastMessage e){ CacheMessage c=put(e System.nanoTime() uuid broadcaster.getID()); cache.put(id e); return c; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,cacheAndSuspend,protected void  (AtmosphereResource r){ try { Thread.sleep(100); } catch ( InterruptedException e) { e.printStackTrace(); } super.cacheAndSuspend(r); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,retrieveFromCache,@Override public List<Object>  (String id String uuid){ ArrayList<Object> cacheContents=new ArrayList<Object>(); if (!cache.isEmpty()) { cacheContents.add(cache.get(id).message()); cache.clear(); } return cacheContents; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,run,@Override public void  (){ broadcaster.addAtmosphereResource(ar); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,setUp,"@BeforeMethod public void  () throws Exception { AtmosphereFramework framework=new AtmosphereFramework(); framework.addInitParameter(ApplicationConfig.BROADCASTER_CACHE_STRATEGY ""beforeFilter""); AtmosphereConfig config=framework.getAtmosphereConfig(); Def"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterTest.java,testSimultaneousAddResourceAndPush,@Test public void  () throws ExecutionException  InterruptedException  ServletException { final Map<String BroadcastMessage> cache=new HashMap<String BroadcastMessage>(); broadcaster.getBroadcasterConfig().setBroadcasterCache(new AbstractBroadcasterCache(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,TestBroadcaster,public  (){ instance.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,concurrentAccessLookupTest,"@Test public void  () throws InterruptedException { final DefaultBroadcasterFactory f=new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" config); final CountDownLatch latch=new CountDownLatch(1000); final AtomicInteger created=new AtomicIntege"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,concurrentLookupTest,"@Test public void  () throws InterruptedException { String id=""id""; final DefaultBroadcasterFactory f=new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" config); final CountDownLatch latch=new CountDownLatch(100); final AtomicInteger created=n"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,onPostCreate,@Override public void  (Broadcaster b){ created.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,run,@Override public void  (){ try { f.get(TestBroadcaster.class me); } finally { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,setUp,"@BeforeMethod public void  () throws Exception { config=new AtmosphereFramework().getAtmosphereConfig(); factory=new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" config); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testAdd,"@Test public void  (){ String id=""id""; String id2=""foo""; Broadcaster b=factory.get(id); assert factory.add(b id) == false; assert factory.lookup(id) != null; assert factory.add(b id2) == true; assert factory.lookup(id2) != null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testEmailFactory,"@Test public void  (){ factory.lookup(""/atmosphere@atmosphere.com"" true); factory.lookup(""/atmosphere@atmosphere.com"" true); factory.lookup(""/atmosphere"" true); assertEquals(factory.lookupAll().size() 2); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testGet_0args,@Test public void  (){ Broadcaster result=factory.get(); assert result != null; assert result instanceof DefaultBroadcaster; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testGet_Object,"@Test public void  (){ String id=""id""; Broadcaster result=factory.get(id); assert result != null; assert result instanceof DefaultBroadcaster; assert id.equals(result.getID()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testGet_Object_Twice,"@Test(expectedExceptions=IllegalStateException.class) public void  (){ String id=""id""; factory.get(id); factory.get(id); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testLookup_Class_Object,"@Test public void  (){ String id=""id""; String id2=""foo""; assert factory.lookup(DefaultBroadcaster.class id true) != null; assert factory.lookup(DefaultBroadcaster.class id2) == null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testLookup_Class_Object_BadClass,"@Test(expectedExceptions=IllegalStateException.class) public void  (){ String id=""id""; factory.get(id); factory.lookup(SimpleBroadcaster.class id); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testLookup_Class_Object_boolean,"@Test public void  (){ String id=""id""; assert factory.lookup(DefaultBroadcaster.class id false) == null; Broadcaster b=factory.lookup(DefaultBroadcaster.class id true); assert b != null; assert b instanceof DefaultBroadcaster; assert id.equals(b.getID());"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testLookup_Object,"@Test public void  (){ String id=""id""; String id2=""foo""; factory.get(id); assert factory.lookup(id) != null; assert factory.lookup(id2) == null; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testLookup_Object_boolean,"@Test public void  (){ String id=""id""; assert factory.lookup(id false) == null; Broadcaster b=factory.lookup(id true); assert b != null; assert id.equals(b.getID()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testRemove,"@Test public void  (){ String id=""id""; String id2=""foo""; Broadcaster b=factory.get(id); Broadcaster b2=factory.get(id2); assert factory.remove(b id2) == false; assert factory.remove(b2 id) == false; assert factory.remove(b id) == true; assert factory.look"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testSlashEmailFactory,"@Test public void  (){ factory.lookup(""/atmosphere@atmosphere.com"" true); factory.lookup(""/atmosphere@atmosphere.com"" true); assertEquals(factory.lookupAll().size() 1); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,testSlashFactory,"@Test public void  (){ factory.lookup(""/atmosphere"" true); factory.lookup(""/atmosphere"" true); assertEquals(factory.lookupAll().size() 1); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\DefaultBroadcasterFactoryTest.java,unSet,@AfterMethod public void  () throws Exception { config.destroy(); ExecutorsFactory.reset(config); factory.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,chatTest,"@Test public void  () throws ExecutionException  InterruptedException { factory.get(""/a/chat1""); factory.get(""/a/chat2""); factory.get(""/a/chat3""); assertEquals(metaBroadcaster.broadcastTo(""/a/*"" ""yo"").get().size() 3); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,complexBroadcastTest,"@Test public void  () throws ExecutionException  InterruptedException { factory.get(""/a/b/c/d""); factory.get(""/b""); factory.get(""/c""); assertEquals(metaBroadcaster.broadcastTo(""/*"" ""yo"").get().size() 3); assertEquals(metaBroadcaster.broadcastTo(""/a/b/c/d"""
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,exactBroadcastTest,"@Test public void  () throws ExecutionException  InterruptedException { factory.get(""/a""); factory.get(""/a/b""); factory.get(""/c""); assertEquals(metaBroadcaster.broadcastTo(""/a"" ""yo"").get().get(0).getID() ""/a""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,issue836Test,"@Test public void  () throws ExecutionException  InterruptedException { factory.get(""/a/@b""); factory.get(""/b""); factory.get(""/c""); assertEquals(metaBroadcaster.broadcastTo(""/a/@b"" ""yo"").get().size() 1); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,setUp,@BeforeMethod public void  () throws Exception { AtmosphereFramework f=new AtmosphereFramework(); config=f.init().getAtmosphereConfig(); factory=config.getBroadcasterFactory(); factory.remove(Broadcaster.ROOT_MASTER); metaBroadcaster=config.metaBroadcaste
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ExcludeSessionBroadcasterTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent e) throws IOException { value.get().add(e.getResource()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,traillingBroadcastTest,"@Test public void  () throws ExecutionException  InterruptedException { factory.get(""/a/b""); factory.get(""/b""); factory.get(""/c""); assertEquals(metaBroadcaster.broadcastTo(""/a/b"" ""yo"").get().size() 1); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,unSet,@AfterMethod public void  () throws Exception { config.destroy(); ExecutorsFactory.reset(config); factory.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,underscoreMatching,"@Test public void  () throws ExecutionException  InterruptedException { factory.get(""/a/_b""); factory.get(""/b""); factory.get(""/c""); assertEquals(metaBroadcaster.broadcastTo(""/a/_b"" ""yo"").get().size() 1); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ExcludeSessionBroadcasterTest.java,setUp,"@BeforeMethod public void  () throws Exception { config=new AtmosphereFramework().getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(ExcludeSessionBroadcaster.class ""NEVER"" config); config.framework().setBroadcasterFact"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ExcludeSessionBroadcasterTest.java,testDirectBroadcastMethod,"@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.broadcast(""foo"" ar).get(); assertEquals(atmosphereHandler.value.get() new HashSet()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\MetaBroadcasterTest.java,wildcardBroadcastTest,"@Test public void  () throws ExecutionException  InterruptedException { factory.get(""/a""); factory.get(""/b""); factory.get(""/c""); assertEquals(metaBroadcaster.broadcastTo(""/*"" ""yo"").get().size() 3); assertEquals(metaBroadcaster.broadcastTo(""/a/b"" ""yo"").get"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ExcludeSessionBroadcasterTest.java,unSetUp,@AfterMethod public void  () throws Exception { broadcaster.removeAtmosphereResource(ar); atmosphereHandler.value.set(new HashSet()); config.getBroadcasterFactory().destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,action,public void  (AtmosphereResourceImpl r){ try { resumed(r.getRequest() r.getResponse()); } catch ( IOException e) { e.printStackTrace(); } catch ( ServletException e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,after,@AfterMethod public void  (){ framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.addAnnotationPackage(B.class); framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()){ @Override public Action service( Atmospher
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return suspended(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,testBroadcasterService,"@Test public void  () throws IOException  ServletException { assertEquals(framework.getBroadcasterFactory().get(""test"").getClass().getName() B.class.getName()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\ServiceTest.java,testFrameworkListenerService,@Test public void  () throws IOException  ServletException { assertEquals(framework.frameworkListeners().get(0).getClass().getName() C.class.getName()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,basicQueryStringTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { final AtomicReference<AtmosphereResource> r=new AtomicReference<AtmosphereResource>(); final AtomicReference<String> q=new AtomicReference<String>(); fr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.init(new ServletConfig(){ @Override public String getServletName(){ ret
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,concurrentAccessLookupTest,@Test public void  () throws InterruptedException { final CountDownLatch latch=new CountDownLatch(1000); final AtomicInteger created=new AtomicInteger(); factory.poolableProvider(new UnboundedApachePoolableProvider()); factory.addBroadcasterListener(new B
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,concurrentLookupTest,"@Test public void  () throws InterruptedException { String id=""id""; final CountDownLatch latch=new CountDownLatch(100); final AtomicInteger created=new AtomicInteger(); factory.addBroadcasterListener(new BroadcasterListenerAdapter(){ @Override public void"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,onPostCreate,@Override public void  (Broadcaster b){ created.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,run,@Override public void  (){ c.add(factory.get(me)); latch.countDown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,setUp,"@BeforeMethod public void  () throws Exception { AtmosphereFramework f=new AtmosphereFramework(); config=f.getAtmosphereConfig(); factory=new PoolableBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" config); factory.poolableProvider(new BoundedApachePo"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,testAddRemove,@Test public void  (){ Broadcaster result=factory.get(); assert result != null; assert result instanceof DefaultBroadcaster; result.destroy(); Broadcaster result2=factory.get(); assert result2 != null; assert result2 instanceof DefaultBroadcaster; assertE
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,testGet_0args,@Test public void  (){ Broadcaster result=factory.get(); assert result != null; assert result instanceof DefaultBroadcaster; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,testGet_Object,"@Test public void  (){ String id=""id""; Broadcaster result=factory.get(id); assert result != null; assert result instanceof DefaultBroadcaster; assert id.equals(result.getID()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,testImplementation,@Test public void  (){ assertNotNull(factory.poolableProvider()); assertNotNull(factory.poolableProvider().implementation()); assertEquals(factory.poolableProvider().implementation().getClass() GenericObjectPool.class); GenericObjectPool nativePool=(Gener
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\PoolableBroadcasterFactoryTest.java,unSet,@AfterMethod public void  () throws Exception { config.destroy(); ExecutorsFactory.reset(config); factory.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,issue1321,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { final AtomicReference<AtmosphereResource> r=new AtomicReference<AtmosphereResource>(); final AtomicReference<String> q=new AtomicReference<String>(); fr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,ArrayBaseWebSocket,public  (OutputStream outputStream){ super(framework.getAtmosphereConfig()); this.outputStream=outputStream; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()){ @Override public Action service( AtmosphereRequest req  AtmosphereResponse res) thr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,isOpen,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { resource.getResponse().write(resource.getRequest().getReader().readLine()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent event) throws IOException { event.getResource().write(event.getMessage().toString().getBytes()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return action(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,testTrackMessageSize,"private void  (boolean enabled AtmosphereInterceptor icp String expected) throws Exception { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework); framework.interceptor(icp); framework.addAtmosphereHandler(""/*"" new AtmosphereHandler(){ @Override public void onRequest( AtmosphereResource resource) throws IOException { resource.getResponse().write(resource.getRequest().getReader().readLine()); } @Override public void onStateChange( AtmosphereResourceEvent event) throws IOException { event.getResource().write(event.getMessage().toString().getBytes()); } @Override public void destroy(){ } } ); Map<String String> reqheaders=new HashMap<>(); if (enabled) { reqheaders.put(HeaderConfig.X_ATMOSPHERE_TRACKMESSAGESIZE ""true""); } AtmosphereRequest request=new AtmosphereRequestImpl.Builder().destroyable(false).headers(reqheaders).body(""yoComet"").pathInfo(""/a"").build(); processor.open(w request AtmosphereResponseImpl.newInstance(framework.getAtmosphereConfig() request w)); processor.invokeWebSocketProtocol(w ""yoWebSocket""); assertEquals(b.toString() expected); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,testTrackMessageSizeB64Disabled,"@Test public void  () throws Exception { testTrackMessageSize(false new TrackMessageSizeB64Interceptor() ""yoCometyoWebSocket""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,testTrackMessageSizeB64Enabled,"@Test public void  () throws Exception { testTrackMessageSize(true new TrackMessageSizeB64Interceptor() ""12|eW9Db21ldA==16|eW9XZWJTb2NrZXQ=""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,testTrackMessageSizeDisabled,"@Test public void  () throws Exception { testTrackMessageSize(false new TrackMessageSizeInterceptor() ""yoCometyoWebSocket""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,testTrackMessageSizeEnabled,"@Test public void  () throws Exception { testTrackMessageSize(true new TrackMessageSizeInterceptor() ""7|yoComet11|yoWebSocket""); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\TrackMessageSizeInterceptorTest.java,write,@Override public WebSocket  (byte[] b int offset int length) throws IOException { outputStream.write(b offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,issue1421,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { final AtomicReference<AtmosphereResource> r=new AtomicReference<AtmosphereResource>(); final AtomicReference<String> q=new AtomicReference<String>(); fr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\QueryStringTest.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { r.set(resource); q.set(resource.getRequest().getContentType()); resource.getBroadcaster().addAtmosphereResource(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\SessionTest.java,basicAtmosphereResourceSessionTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().build(); AtmosphereResponse response=new AtmosphereResponseImpl.Builder().build(); Atmosph
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\SessionTest.java,basicSessionTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { AtmosphereRequest request=new AtmosphereRequestImpl.Builder().build(); assertNull(request.getSession(false)); assertNotNull(request.getSession()); asser
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\SessionTest.java,sessionReplacementTest,@Test public void  (){ AtmosphereConfig config=new AtmosphereFramework().getAtmosphereConfig(); config.setSupportSession(true); HttpServletRequest httpRequest=new NoOpsRequest(); AtmosphereRequest request=new AtmosphereRequestImpl.Builder().request(httpRe
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,addAR,@AfterMethod public void  (){ broadcaster.removeAtmosphereResource(ar); config.getBroadcasterFactory().destroy(); ExecutorsFactory.reset(config); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,addRemoveAddTest,"@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.broadcast(""e1"").get(); broadcaster.removeAtmosphereResource(ar); broadcaster.broadcast(""e2"").get(); assertEquals(1 broadcasterCache.messages().size()); b"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,concurrentCache,@Test public void  () throws ExecutionException  InterruptedException  ServletException { final CountDownLatch latch=new CountDownLatch(101); broadcaster.addBroadcasterListener(new BroadcasterListenerAdapter(){ @Override public void onPostCreate( Broadcas
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,everythingCachedTest,"@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.removeAtmosphereResource(ar); broadcaster.broadcast(""e1"").get(); broadcaster.broadcast(""e2"").get(); assertEquals(1 broadcasterCache.messages().size()); }"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,onComplete,@Override public void  (Broadcaster b){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent e) throws IOException { value.get().append(e.getMessage()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,run,"@Override public void  (){ broadcaster.broadcast(""e"" + y.getAndIncrement()); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,setUp,"@BeforeMethod public void  () throws Exception { config=new AtmosphereFramework().getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(DefaultBroadcaster.class ""NEVER"" config); broadcaster=factory.get(DefaultBroadcaster.c"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UUIDBroadcasterCacheTest.java,testBasicCache,"@Test public void  () throws ExecutionException  InterruptedException  ServletException { broadcaster.broadcast(""e1"").get(); broadcaster.removeAtmosphereResource(ar); broadcaster.broadcast(""e2"").get(); broadcaster.broadcast(""e3"").get(); assertEquals(broad"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,AH,public  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,batchMappingTest,"@Test public void  () throws ServletException { framework.addAtmosphereHandler(""/"" new AH(""/"")); framework.addAtmosphereHandler(""/red"" new AH(""red"")); framework.addAtmosphereHandler(""/red/*"" new AH(""red"")); framework.addAtmosphereHandler(""/red/red/*"" new "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,create,"@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(mock(AsyncSupport.class)); framework.init(new ServletConfig(){ @Override public String getServletName(){ return ""void""; } @Override public Serv"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mappingDotWildcard,"@Test public void  () throws ServletException { framework.addAtmosphereHandler(""/*"" handler); AtmosphereRequest r=new AtmosphereRequestImpl.Builder().pathInfo(""/a.b/b"").build(); assertNotNull(processor.map(r)); r=new AtmosphereRequestImpl.Builder().pathIn"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mappingExactUrl,"@Test public void  () throws ServletException { framework.addAtmosphereHandler(""/foo/a/"" handler); AtmosphereRequest r=new AtmosphereRequestImpl.Builder().servletPath(""/foo"").pathInfo(""/a"").build(); assertNotNull(processor.map(r)); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mappingSubWildcardPath,"@Test public void  () throws ServletException { framework.addAtmosphereHandler(""/foo/*"" handler); AtmosphereRequest r=new AtmosphereRequestImpl.Builder().servletPath(""/foo"").pathInfo(""/a"").build(); assertNotNull(processor.map(r)); r=new AtmosphereRequestI"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mappingTest1,"@Test public void  () throws ServletException { framework.addAtmosphereHandler(""/a/"" handler); framework.addAtmosphereHandler(""/a"" handler); framework.addAtmosphereHandler(""/ab/"" handler); framework.addAtmosphereHandler(""/abc/"" handler); framework.addAtmo"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mappingTestServletPath,"@Test public void  () throws ServletException { framework.addAtmosphereHandler(""/com.zyxabc.abc.Abc/gwtCometEvent*"" handler); AtmosphereRequest r=new AtmosphereRequestImpl.Builder().servletPath(""/com.zyxabc.abc.Abc/gwtCometEvent"").build(); assertNotNull(p"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mappingTestTraillingHandler,"@Test public void  () throws ServletException { framework.addAtmosphereHandler(""/a"" handler); AtmosphereRequest r=new AtmosphereRequestImpl.Builder().pathInfo(""/a/"").build(); assertNotNull(processor.map(r)); r=new AtmosphereRequestImpl.Builder().pathInfo("
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mappingWildcardPath,"@Test public void  () throws ServletException { framework.addAtmosphereHandler(""/*"" handler); AtmosphereRequest r=new AtmosphereRequestImpl.Builder().servletPath(""/foo"").pathInfo(""/a"").build(); assertNotNull(processor.map(r)); r=new AtmosphereRequestImpl."
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,mathTest,"@Test public void  () throws ServletException { EndpointMapper<String> mapper=new DefaultEndpointMapper<String>(); Map<String String> mappingPoints=new HashMap<String String>(); mappingPoints.put(""/c"" ""/c""); mappingPoints.put(""/{a}/{b}"" ""/{a}/{b}""); Asser"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return new Action(Action.TYPE.CREATED); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,toString,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\UrlMappingTest.java,unSet,@AfterMethod public void  () throws Exception { framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(mock(AsyncSupport.class)); framework.addAnnotationPackage(WebSocketFactoryTest.class); framework.init(new ServletConfig(){ @Override public Str
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,destroy,@AfterMethod public void  (){ framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,find,@Override public WebSocket  (String uuid){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketFactoryTest.java,testAnnotation,@Test public void  () throws IOException  ServletException { assertNotNull(framework.webSocketFactory()); assertEquals(CustomFactory.class framework.webSocketFactory().getClass()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,ArrayBaseWebSocket,public  (OutputStream outputStream){ super(framework.getAtmosphereConfig()); this.outputStream=outputStream; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,basicWorkflow,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,create,"@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.addInitParameter(RECYCLE_ATMOSPHERE_REQUEST_RESPONSE ""false""); framewor"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,destroy,@AfterMethod public void  () throws Throwable { framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,invalidPathHandler,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,isOpen,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,multipleWebSocketAndHandler,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,multipleWebSocketHandler,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,onByteMessage,@Override public void  (WebSocket webSocket byte[] data int offset int length) throws IOException { webSocket.write(data offset length); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,onTextMessage,@Override public void  (WebSocket webSocket String data) throws IOException { webSocket.write(data); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,registerWebSocketHandler,private void  (String path WebSocketProcessor.WebSocketHandlerProxy w){ WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework).registerWebSocketHandler(path w); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,testInjection,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { EchoHandler e=new EchoHandler(); ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProces
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketHandlerTest.java,write,@Override public WebSocket  (byte[] b int offset int length) throws IOException { outputStream.write(b offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,ArrayBaseWebSocket,public  (OutputStream outputStream){ super(framework.getAtmosphereConfig()); this.outputStream=outputStream; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,basicWorkflow,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,create,"@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.addInitParameter(RECYCLE_ATMOSPHERE_REQUEST_RESPONSE ""false""); framewor"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,destroy,@AfterMethod public void  () throws Throwable { framework.destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,drainReader,protected static String  (Reader r) throws IOException { CharBuffer cb=CharBuffer.allocate(8192); int read=0; while (read > -1) { cb.position(cb.position() + read); read=r.read(cb.array() cb.position() cb.remaining()); } cb.flip(); return cb.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,invalidPathHandler,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,isOpen,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,multipleWebSocketAndHandler,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,multipleWebSocketHandler,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,onTextStream,@Override public void  (WebSocket webSocket Reader reader) throws IOException { webSocket.write(drainReader(reader)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,registerWebSocketHandler,private void  (String path WebSocketStreamingHandler w){ WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework).registerWebSocketHandler(path new WebSocketProcessor.WebSocketHandlerProxy(framework.getBroadcasterFactory().lookup(path true).getClass() w)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketStreamingHandlerTest.java,write,@Override public WebSocket  (byte[] b int offset int length) throws IOException { outputStream.write(b offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,ArrayBaseWebSocket,public  (OutputStream outputStream){ super(framework.getAtmosphereConfig()); this.outputStream=outputStream; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,basicBackwardCompatbileWorkflow,@Test public void  () throws Throwable { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorFactory.getDefault().getWebSocketProcessor(framework); framewor
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,basicProgrammaticAPIWorkflow,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,basicWebSocketCookieTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { final AtomicReference<Cookie> cValue=new AtomicReference<Cookie>(); final AtomicReference<AtmosphereResource> r=new AtomicReference<AtmosphereResource>(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,basicWorkflow,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new AsynchronousProcessor(framework.getAtmosphereConfig()){ @Override public Action service( AtmosphereRequest req  AtmosphereResponse res) thr
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,AR,public  (CountDownLatch latch){ this.latch=latch; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,encodeURLProxyTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent e) throws IOException { try { if (latch != null) latch.await(10 TimeUnit.SECONDS); } catch ( InterruptedException e1) { e1.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,onThrowable,@Override public void  (AtmosphereResourceEvent event){ t.set(event.throwable()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,setUp,"@BeforeMethod public void  () throws Exception { config=new AtmosphereFramework().addInitParameter(""org.atmosphere.runtime.Broadcaster.writeTimeout"" ""2000"").init().getAtmosphereConfig(); DefaultBroadcasterFactory factory=new DefaultBroadcasterFactory(Defa"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,inClosePhaseTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,isOpen,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,onClose,@Override public void  (WebSocketEvent event){ uuid.set((String)event.webSocket().resource().getRequest().getAttribute(SUSPENDED_ATMOSPHERE_RESOURCE_UUID)); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,testNoWriteTimeout,@Test public void  () throws ExecutionException  InterruptedException  ServletException { atmosphereHandler=new AR(null); ar=new AtmosphereResourceImpl(config broadcaster mock(AtmosphereRequestImpl.class) AtmosphereResponseImpl.newInstance() mock(Servlet3
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,testWriteTimeout,@Test public void  () throws ExecutionException  InterruptedException  ServletException { final CountDownLatch latch=new CountDownLatch(1); final CountDownLatch guard=new CountDownLatch(1); atmosphereHandler=new AR(latch); ar=new AtmosphereResourceImpl(co
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WriteTimeoutTest.java,unSetUp,@AfterMethod public void  () throws Exception { broadcaster.destroy(); config.getBroadcasterFactory().destroy(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,onCloseAtmosphereRequestAttribute,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,onDisconnect,@Override public void  (AtmosphereResourceEvent event){ if (event.isCancelled()) dirtyDisconnect.set(true); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,onDisconnectAtmosphereRequestAttribute,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { ByteArrayOutputStream b=new ByteArrayOutputStream(); final WebSocket w=new ArrayBaseWebSocket(b); final WebSocketProcessor processor=WebSocketProcessorF
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,onOpen,@Override public void  (WebSocket webSocket) throws IOException { webSocket.write(webSocket.resource().getRequest().getReader().readLine()); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,onRequest,@Override public void  (AtmosphereResource resource) throws IOException { r.set(resource); resource.getBroadcaster().addAtmosphereResource(resource); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,onStateChange,@Override public void  (AtmosphereResourceEvent event) throws IOException { Cookie[] c=event.getResource().getRequest().getCookies(); cValue.set(c[0]); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,onTextMessage,@Override public void  (WebSocket webSocket String data) throws IOException { webSocket.write(data); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,service,@Override public Action  (AtmosphereRequest req AtmosphereResponse res) throws IOException  ServletException { return action(req res); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,undetectedCloseWebSocketTest,@Test public void  () throws IOException  ServletException  ExecutionException  InterruptedException { final AtomicReference<Cookie> cValue=new AtomicReference<Cookie>(); final AtomicReference<AtmosphereResource> r=new AtomicReference<AtmosphereResource>(
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\runtime\WebSocketProcessorTest.java,write,@Override public WebSocket  (byte[] b int offset int length) throws IOException { outputStream.write(b offset length); return this; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,performReaasmbleChunkedMessges,"private void  (int limit) throws Exception { final ChunkConcatReaderPool pool=new ChunkConcatReaderPool(); Reader reader=pool.getReader(""123"" true); pool.addChunk(""123"" new StringReader(TEST_MESSAGES[0]) true); assertNotNull(reader); for (int i=1; i < TEST_MESSAGES.length; i++) { pool.addChunk(""123"" new StringReader(TEST_MESSAGES[i]) i < TEST_MESSAGES.length - 1); } String data=readAll(reader limit TEST_MESSAGES_CONCATENATED.length() < limit); assertEquals(data TEST_MESSAGES_CONCATENATED); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,performtestReassembleDelayedChunkedMessages,"private void  (int limit) throws Exception { final ChunkConcatReaderPool pool=new ChunkConcatReaderPool(); Reader reader=pool.getReader(""123"" true); pool.addChunk(""123"" new StringReader(TEST_MESSAGES[0]) true); assertNotNull(reader); new Thread(new Runnable(){ public void run(){ try { Thread.sleep(1000); } catch ( InterruptedException e) { } for (int i=1; i < TEST_MESSAGES.length; i++) { pool.addChunk(""123"" new StringReader(TEST_MESSAGES[i]) i < TEST_MESSAGES.length - 1); } } } ).start(); String data=readAll(reader 5 false); assertEquals(TEST_MESSAGES_CONCATENATED data); } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,readAll,private static String  (Reader reader int limit boolean once) throws IOException { StringBuilder sb=new StringBuilder(); char[] buf=new char[limit]; for (; ; ) { int c=reader.read(buf 0 buf.length); if (c == -1) { break; } sb.append(buf 0 c); if (once) { break; } } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,readOnlyAvailable,private static String  (Reader reader) throws IOException { StringBuilder sb=new StringBuilder(); char[] buf=new char[512]; while (reader.ready()) { try { int c=reader.read(buf 0 buf.length); assertNotEquals(c -1); sb.append(buf 0 c); } catch ( IOException e) { e.printStackTrace(); } } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,run,"public void  (){ try { Thread.sleep(1000); } catch ( InterruptedException e) { } for (int i=1; i < TEST_MESSAGES.length; i++) { pool.addChunk(""123"" new StringReader(TEST_MESSAGES[i]) i < TEST_MESSAGES.length - 1); } } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,testIncorementalNonBlockingRead,"@Test public void  () throws Exception { final ChunkConcatReaderPool pool=new ChunkConcatReaderPool(); Reader reader=pool.getReader(""123"" true); assertNotNull(reader); pool.addChunk(""123"" new StringReader(TEST_MESSAGES[0]) true); assertTrue(reader.ready()"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,testInterruptReadWithTimeout,"@Test public void  () throws Exception { final ChunkConcatReaderPool pool=new ChunkConcatReaderPool(); pool.setTimeout(100); Reader reader=pool.getReader(""123"" true); pool.addChunk(""123"" new StringReader(TEST_MESSAGES[0]) true); assertNotNull(reader); try"
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,testReassembleChunkedMessagesUsingBigBuffer,@Test public void  () throws Exception { performReaasmbleChunkedMessges(512); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,testReassembleChunkedMessagesUsingSmallBuffer,@Test public void  () throws Exception { performReaasmbleChunkedMessges(5); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,testReassembleDelayedChunkedMessagesUsingLargeBuffer,@Test public void  () throws Exception { performtestReassembleDelayedChunkedMessages(512); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\ChunkConcatReaderPoolTest.java,testReassembleDelayedChunkedMessagesUsingSmallBuffer,@Test public void  () throws Exception { performtestReassembleDelayedChunkedMessages(5); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\CookieUtilTest.java,testDecodeServerCookies,@Test public void  () throws Exception { Set<Cookie> cookies=new HashSet<Cookie>(); for ( String cookieHeader : COOKIES1) { CookieUtil.ServerCookieDecoder.STRICT.decode(cookieHeader cookies); } assertEquals(cookies.size() 3); for ( Cookie cookie : cookies
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\util\IOUtilsTest.java,testGetCleanedServletPath,"@Test public void  (){ String testFullPath; String testCleanedPath; testFullPath=""/foo/bar/*""; testCleanedPath=IOUtils.getCleanedServletPath(testFullPath); assertEquals(testCleanedPath ""/foo/bar""); testFullPath=""foo/bar/**/*""; testCleanedPath=IOUtils.getC"
C:\Users\User\Desktop\Thesis\atmosphere\modules\shiro\src\main\java\org\atmosphere\interceptor\ShiroInterceptor.java,inspect,@Override public Action  (AtmosphereResource r){ if (Utils.webSocketMessage(r)) return Action.CONTINUE; if (r.getRequest().localAttributes().containsKey(FrameworkConfig.SECURITY_SUBJECT) == false) { try { Subject currentUser=null; if (r.transport().equals
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,DummyInterceptor,public  (long time){ this.time=time; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,Worker,public  (WebSocket ws AtmosphereResponse response){ this.ws=ws; this.response=response; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,create,@BeforeMethod public void  () throws Throwable { framework=new AtmosphereFramework(); framework.setAsyncSupport(new BlockingIOCometSupport(framework.getAtmosphereConfig())); framework.init(new ServletConfig(){ @Override public String getServletName(){ ret
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,error,@Override public byte[]  (AtmosphereResponse response int statusCode String reasonPhrase){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,getInitParameterNames,@Override public Enumeration<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,getServletContext,@Override public ServletContext  (){ return mock(ServletContext.class); } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,getServletName,"@Override public String  (){ return ""void""; } "
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,isCorrupted,public boolean  (){ return corrupted; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,isOpen,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,run,@Override public void  (){ try { byte[] b=ws.transform(response TEST_DATA 0 TEST_DATA.length); corrupted|=!Arrays.equals(TEST_DATA b); b=ws.transform(response TEST_DATA 0 TEST_DATA.length); corrupted|=!Arrays.equals(TEST_DATA b); } catch ( IOException e) 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,testTransformWithConcurrency,@Test public void  () throws Exception { WebSocket ws=new WebSocket(framework.getAtmosphereConfig()){ @Override public boolean isOpen(){ return false; } @Override public WebSocket write( String s) throws IOException { return null; } @Override public WebSo
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,transformPayload,@Override public byte[]  (AtmosphereResponse response byte[] responseDraft byte[] data) throws IOException { try { Thread.sleep(time); } catch ( InterruptedException e) { } return responseDraft; } 
C:\Users\User\Desktop\Thesis\atmosphere\modules\runtime\src\test\java\org\atmosphere\websocket\WebSocketTest.java,write,@Override public WebSocket  (byte[] b int offset int length) throws IOException { return null; } 
