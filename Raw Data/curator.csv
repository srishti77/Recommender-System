ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\connection\StandardConnectionHandlingPolicy.java,StandardConnectionHandlingPolicy,"public  (int expirationPercent){ Preconditions.checkArgument((expirationPercent > 0) && (expirationPercent <= 100) ""expirationPercent must be > 0 and <= 100""); this.expirationPercent=expirationPercent; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\connection\StandardConnectionHandlingPolicy.java,callWithRetry,@Override public <T>T  (CuratorZookeeperClient client Callable<T> proc) throws Exception { client.internalBlockUntilConnectedOrTimedOut(); T result=null; RetryLoop retryLoop=client.newRetryLoop(); while (retryLoop.shouldContinue()) { try { result=proc.cal
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\connection\StandardConnectionHandlingPolicy.java,checkTimeouts,@Override public CheckTimeoutsResult  (Callable<String> hasNewConnectionString long connectionStartMs int sessionTimeoutMs int connectionTimeoutMs) throws Exception { if (hasNewConnectionString.call() != null) { return CheckTimeoutsResult.NEW_CONNECTION_S
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\connection\StandardConnectionHandlingPolicy.java,getSimulatedSessionExpirationPercent,@Override public int  (){ return expirationPercent; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,ConnectionState, (ZookeeperFactory zookeeperFactory EnsembleProvider ensembleProvider int sessionTimeoutMs int connectionTimeoutMs Watcher parentWatcher AtomicReference<TracerDriver> tracer boolean canBeReadOnly ConnectionHandlingPolicy connectionHandlingPolicy){ this.ensembleProvider=ensembleProvider; this.sessionTimeoutMs=sessionTimeoutMs; this.connectionTimeoutMs=connectionTimeoutMs; this.tracer=tracer; this.connectionHandlingPolicy=connectionHandlingPolicy; if (parentWatcher != null) { parentWatchers.offer(parentWatcher); } zooKeeper=new HandleHolder(zookeeperFactory this ensembleProvider sessionTimeoutMs canBeReadOnly); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,addParentWatcher,void  (Watcher watcher){ parentWatchers.offer(watcher); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,call,@Override public String  (){ newConnectionString.set(zooKeeper.getNewConnectionString()); return newConnectionString.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,checkState,"private boolean  (Event.KeeperState state boolean wasConnected){ boolean isConnected=wasConnected; boolean checkNewConnectionString=true; switch (state) { default : case Disconnected: { isConnected=false; break; } case SyncConnected: case ConnectedReadOnly: { isConnected=true; break; } case AuthFailed: { isConnected=false; log.error(""Authentication failed""); break; } case Expired: { isConnected=false; checkNewConnectionString=false; handleExpiredSession(); break; } case SaslAuthenticated: { break; } } if (state != Event.KeeperState.Expired) { new EventTrace(state.toString() tracer.get() getSessionId()).commit(); } if (checkNewConnectionString) { String newConnectionString=zooKeeper.getNewConnectionString(); if (newConnectionString != null) { handleNewConnectionString(newConnectionString); } } return isConnected; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,checkTimeouts,"private synchronized void  () throws Exception { final AtomicReference<String> newConnectionString=new AtomicReference<>(); Callable<String> hasNewConnectionString=new Callable<String>(){ @Override public String call(){ newConnectionString.set(zooKeeper.getNewConnectionString()); return newConnectionString.get(); } } ; int lastNegotiatedSessionTimeoutMs=getLastNegotiatedSessionTimeoutMs(); int useSessionTimeoutMs=(lastNegotiatedSessionTimeoutMs > 0) ? lastNegotiatedSessionTimeoutMs : sessionTimeoutMs; ConnectionHandlingPolicy.CheckTimeoutsResult result=connectionHandlingPolicy.checkTimeouts(hasNewConnectionString connectionStartMs useSessionTimeoutMs connectionTimeoutMs); switch (result) { default : case NOP: { break; } case NEW_CONNECTION_STRING: { handleNewConnectionString(newConnectionString.get()); break; } case RESET_CONNECTION: { if (!Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES)) { long elapsed=System.currentTimeMillis() - connectionStartMs; int maxTimeout=Math.max(useSessionTimeoutMs connectionTimeoutMs); log.warn(String.format(""Connection attempt unsuccessful after %d (greater than max timeout of %d). Resetting connection and trying again with a new connection."" elapsed maxTimeout)); } reset(); break; } case CONNECTION_TIMEOUT: { KeeperException.ConnectionLossException connectionLossException=new CuratorConnectionLossException(); if (!Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES)) { long elapsed=System.currentTimeMillis() - connectionStartMs; log.error(String.format(""Connection timed out for connection string (%s) and timeout (%d) / elapsed (%d)"" zooKeeper.getConnectionString() connectionTimeoutMs elapsed) connectionLossException); } new EventTrace(""connections-timed-out"" tracer.get() getSessionId()).commit(); throw connectionLossException; } case SESSION_TIMEOUT: { handleExpiredSession(); break; } } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,close,"@Override public void  () throws IOException { log.debug(""Closing""); CloseableUtils.closeQuietly(ensembleProvider); try { zooKeeper.closeAndClear(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new IOException(e); } finally { isConnecte"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,getEnsembleProvider,EnsembleProvider  (){ return ensembleProvider; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,getInstanceIndex,long  (){ return instanceIndex.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,getLastNegotiatedSessionTimeoutMs,int  (){ return lastNegotiatedSessionTimeoutMs.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,getSessionId,public long  (){ long sessionId=0; try { ZooKeeper zk=zooKeeper.getZooKeeper(); if (zk != null) { sessionId=zk.getSessionId(); } } catch ( Exception e) { } return sessionId; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,getZooKeeper,"ZooKeeper  () throws Exception { if (SessionFailRetryLoop.sessionForThreadHasFailed()) { throw new SessionFailRetryLoop.SessionFailedException(); } Exception exception=backgroundExceptions.poll(); if (exception != null) { new EventTrace(""background-exceptions"" tracer.get()).commit(); throw exception; } boolean localIsConnected=isConnected.get(); if (!localIsConnected) { checkTimeouts(); } return zooKeeper.getZooKeeper(); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,handleExpiredSession,"private void  (){ log.warn(""Session expired event received""); new EventTrace(""session-expired"" tracer.get() getSessionId()).commit(); try { reset(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); queueBackgroundException(e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,handleNewConnectionString,"private void  (String newConnectionString){ log.info(""Connection string changed to: "" + newConnectionString); new EventTrace(""connection-string-changed"" tracer.get() getSessionId()).commit(); try { ZooKeeper zooKeeper=this.zooKeeper.getZooKeeper(); if (zooKeeper == null) { log.warn(""Could not update the connection string because getZooKeeper() returned null.""); } else { if (ensembleProvider.updateServerListEnabled()) { zooKeeper.updateServerList(newConnectionString); } else { reset(); } } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); queueBackgroundException(e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,isConnected,boolean  (){ return isConnected.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,process,"@Override public void  (WatchedEvent event){ if (LOG_EVENTS) { log.debug(""ConnectState watcher: "" + event); } if (event.getType() == Watcher.Event.EventType.None) { boolean wasConnected=isConnected.get(); boolean newIsConnected=checkState(event.getState()"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,queueBackgroundException,"@SuppressWarnings({""ThrowableResultOfMethodCallIgnored""}) private void  (Exception e){ while (backgroundExceptions.size() >= MAX_BACKGROUND_EXCEPTIONS) { backgroundExceptions.poll(); } backgroundExceptions.offer(e); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,removeParentWatcher,void  (Watcher watcher){ parentWatchers.remove(watcher); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,reset,"synchronized void  () throws Exception { log.debug(""reset""); instanceIndex.incrementAndGet(); isConnected.set(false); connectionStartMs=System.currentTimeMillis(); zooKeeper.closeAndReset(); zooKeeper.getZooKeeper(); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ConnectionState.java,start,"void  () throws Exception { log.debug(""Starting""); ensembleProvider.start(); reset(); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\EventTrace.java,EventTrace,public  (String name TracerDriver driver long sessionId){ this.name=name; this.driver=driver; this.sessionId=sessionId; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\EventTrace.java,commit,public void  (){ if (this.driver instanceof AdvancedTracerDriver) { ((AdvancedTracerDriver)this.driver).addEvent(this); } else { this.driver.addCount(this.name 1); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\EventTrace.java,getName,public String  (){ return this.name; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\EventTrace.java,getSessionId,public long  (){ return this.sessionId; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,CuratorZookeeperClient,"public  (ZookeeperFactory zookeeperFactory EnsembleProvider ensembleProvider int sessionTimeoutMs int connectionTimeoutMs Watcher watcher RetryPolicy retryPolicy boolean canBeReadOnly ConnectionHandlingPolicy connectionHandlingPolicy){ this.connectionHandlingPolicy=connectionHandlingPolicy; if (sessionTimeoutMs < connectionTimeoutMs) { log.warn(String.format(""session timeout [%d] is less than connection timeout [%d]"" sessionTimeoutMs connectionTimeoutMs)); } retryPolicy=Preconditions.checkNotNull(retryPolicy ""retryPolicy cannot be null""); ensembleProvider=Preconditions.checkNotNull(ensembleProvider ""ensembleProvider cannot be null""); this.connectionTimeoutMs=connectionTimeoutMs; state=new ConnectionState(zookeeperFactory ensembleProvider sessionTimeoutMs connectionTimeoutMs watcher tracer canBeReadOnly connectionHandlingPolicy); setRetryPolicy(retryPolicy); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,addParentWatcher,void  (Watcher watcher){ state.addParentWatcher(watcher); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,blockUntilConnectedOrTimedOut,"public boolean  () throws InterruptedException { Preconditions.checkState(started.get() ""Client is not started""); log.debug(""blockUntilConnectedOrTimedOut() start""); OperationTrace trace=startAdvancedTracer(""blockUntilConnectedOrTimedOut""); internalBlockUntilConnectedOrTimedOut(); trace.commit(); boolean localIsConnected=state.isConnected(); log.debug(""blockUntilConnectedOrTimedOut() end. isConnected: "" + localIsConnected); return localIsConnected; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,close,"public void  (){ log.debug(""Closing""); started.set(false); try { state.close(); } catch ( IOException e) { ThreadUtils.checkInterrupted(e); log.error("""" e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,getConnectionHandlingPolicy,public ConnectionHandlingPolicy  (){ return connectionHandlingPolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,getConnectionTimeoutMs,public int  (){ return connectionTimeoutMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,getCurrentConnectionString,public String  (){ return state.getEnsembleProvider().getConnectionString(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,getInstanceIndex,public long  (){ return state.getInstanceIndex(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,getLastNegotiatedSessionTimeoutMs,public int  (){ return state.getLastNegotiatedSessionTimeoutMs(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,getRetryPolicy,public RetryPolicy  (){ return retryPolicy.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,getTracerDriver,public TracerDriver  (){ return tracer.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,getZooKeeper,"public ZooKeeper  () throws Exception { Preconditions.checkState(started.get() ""Client is not started""); return state.getZooKeeper(); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,internalBlockUntilConnectedOrTimedOut,public void  () throws InterruptedException { long waitTimeMs=connectionTimeoutMs; while (!state.isConnected() && (waitTimeMs > 0)) { final CountDownLatch latch=new CountDownLatch(1); Watcher tempWatcher=new Watcher(){ @Override public void process( WatchedEvent event){ latch.countDown(); } } ; state.addParentWatcher(tempWatcher); long startTimeMs=System.currentTimeMillis(); try { latch.await(1 TimeUnit.SECONDS); } finally { state.removeParentWatcher(tempWatcher); } long elapsed=Math.max(1 System.currentTimeMillis() - startTimeMs); waitTimeMs-=elapsed; } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,isConnected,public boolean  (){ return state.isConnected(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,newRetryLoop,public RetryLoop  (){ return new RetryLoop(retryPolicy.get() tracer); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,newSessionFailRetryLoop,public SessionFailRetryLoop  (SessionFailRetryLoop.Mode mode){ return new SessionFailRetryLoop(this mode); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,process,@Override public void  (WatchedEvent event){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,removeParentWatcher,void  (Watcher watcher){ state.removeParentWatcher(watcher); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,reset,public void  () throws Exception { state.reset(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,setRetryPolicy,"public void  (RetryPolicy policy){ Preconditions.checkNotNull(policy ""policy cannot be null""); retryPolicy.set(policy); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,setTracerDriver,public void  (TracerDriver tracer){ this.tracer.set(tracer); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,start,"public void  () throws Exception { log.debug(""Starting""); if (!started.compareAndSet(false true)) { throw new IllegalStateException(""Already started""); } state.start(); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,startAdvancedTracer,public OperationTrace  (String name){ return new OperationTrace(name tracer.get() state.getSessionId()); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\CuratorZookeeperClient.java,startTracer,public TimeTrace  (String name){ return new TimeTrace(name tracer.get()); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,OperationTrace,public  (String name TracerDriver driver long sessionId){ this.name=name; this.driver=driver; this.sessionId=sessionId; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,commit,public void  (){ long elapsed=System.nanoTime() - startTimeNanos; this.latencyMs=TimeUnit.MILLISECONDS.convert(elapsed TimeUnit.NANOSECONDS); if (this.driver instanceof AdvancedTracerDriver) { ((AdvancedTracerDriver)this.driver).addTrace(this); } else { this.driver.addTrace(this.name elapsed TimeUnit.NANOSECONDS); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,getLatencyMs,public long  (){ return this.latencyMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,getName,public String  (){ return this.name; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,getPath,public String  (){ return this.path; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,getRequestBytesLength,public long  (){ return this.requestBytesLength; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,getResponseBytesLength,public long  (){ return this.responseBytesLength; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,getReturnCode,public int  (){ return this.returnCode; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,getSessionId,public long  (){ return this.sessionId; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,getStat,public Stat  (){ return this.stat; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,isWithWatcher,public boolean  (){ return this.withWatcher; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,setPath,public OperationTrace  (String path){ this.path=path; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,setRequestBytesLength,public OperationTrace  (byte[] data){ if (data == null) { return this; } return this.setRequestBytesLength(data.length); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,setResponseBytesLength,public OperationTrace  (byte[] data){ if (data == null) { return this; } return this.setResponseBytesLength(data.length); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,setReturnCode,public OperationTrace  (int returnCode){ this.returnCode=returnCode; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,setStat,public OperationTrace  (Stat stat){ this.stat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\drivers\OperationTrace.java,setWithWatcher,public OperationTrace  (boolean withWatcher){ this.withWatcher=withWatcher; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\DefaultExhibitorRestClient.java,DefaultExhibitorRestClient,public  (boolean useSsl){ this.useSsl=useSsl; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\DefaultExhibitorRestClient.java,getRaw,"@Override public String  (String hostname int port String uriPath String mimeType) throws Exception { URI uri=new URI(useSsl ? ""https"" : ""http"" null hostname port uriPath null null); HttpURLConnection connection=(HttpURLConnection)uri.toURL().openConnecti"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\Exhibitors.java,Exhibitors,"public  (Collection<String> hostnames int restPort BackupConnectionStringProvider backupConnectionStringProvider){ this.backupConnectionStringProvider=Preconditions.checkNotNull(backupConnectionStringProvider ""backupConnectionStringProvider cannot be null""); this.hostnames=ImmutableList.copyOf(hostnames); this.restPort=restPort; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\Exhibitors.java,getBackupConnectionString,public String  () throws Exception { return backupConnectionStringProvider.getBackupConnectionString(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\Exhibitors.java,getHostnames,public Collection<String>  (){ return hostnames; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\Exhibitors.java,getRestPort,public int  (){ return restPort; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\HandleHolder.java,HandleHolder, (ZookeeperFactory zookeeperFactory Watcher watcher EnsembleProvider ensembleProvider int sessionTimeout boolean canBeReadOnly){ this.zookeeperFactory=zookeeperFactory; this.watcher=watcher; this.ensembleProvider=ensembleProvider; this.sessionTimeout=sessionTimeout; this.canBeReadOnly=canBeReadOnly; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\HandleHolder.java,closeAndClear,void  () throws Exception { internalClose(); helper=null; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\HandleHolder.java,closeAndReset,void  () throws Exception { internalClose(); helper=new Helper(){ private volatile ZooKeeper zooKeeperHandle=null; private volatile String connectionString=null; @Override public ZooKeeper getZooKeeper() throws Exception { synchronized (this) { if (zooKeeperHandle == null) { connectionString=ensembleProvider.getConnectionString(); zooKeeperHandle=zookeeperFactory.newZooKeeper(connectionString sessionTimeout watcher canBeReadOnly); } helper=new Helper(){ @Override public ZooKeeper getZooKeeper() throws Exception { return zooKeeperHandle; } @Override public String getConnectionString(){ return connectionString; } @Override public int getNegotiatedSessionTimeoutMs(){ return (zooKeeperHandle != null) ? zooKeeperHandle.getSessionTimeout() : 0; } } ; return zooKeeperHandle; } } @Override public String getConnectionString(){ return connectionString; } @Override public int getNegotiatedSessionTimeoutMs(){ return (zooKeeperHandle != null) ? zooKeeperHandle.getSessionTimeout() : 0; } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\HandleHolder.java,getConnectionString,@Override public String  (){ return connectionString; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\HandleHolder.java,getNegotiatedSessionTimeoutMs,@Override public int  (){ return (zooKeeperHandle != null) ? zooKeeperHandle.getSessionTimeout() : 0; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\HandleHolder.java,getNewConnectionString,String  (){ String helperConnectionString=(helper != null) ? helper.getConnectionString() : null; return ((helperConnectionString != null) && !ensembleProvider.getConnectionString().equals(helperConnectionString)) ? helperConnectionString : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\HandleHolder.java,getZooKeeper,@Override public ZooKeeper  () throws Exception { return zooKeeperHandle; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\HandleHolder.java,internalClose,private void  () throws Exception { try { ZooKeeper zooKeeper=(helper != null) ? helper.getZooKeeper() : null; if (zooKeeper != null) { Watcher dummyWatcher=new Watcher(){ @Override public void process( WatchedEvent event){ } } ; zooKeeper.register(dummyWatcher); zooKeeper.close(); } } catch ( InterruptedException dummy) { Thread.currentThread().interrupt(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,ExhibitorEnsembleProvider,public  (Exhibitors exhibitors ExhibitorRestClient restClient String restUriPath int pollingMs RetryPolicy retryPolicy){ this.exhibitors.set(exhibitors); this.masterExhibitors.set(exhibitors); this.restClient=restClient; this.restUriPath=restUriPath; this.pollingMs=pollingMs; this.retryPolicy=retryPolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,close,"@Override public void  () throws IOException { Preconditions.checkState(state.compareAndSet(State.STARTED State.CLOSED) ""Already closed or has not been started""); service.shutdownNow(); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,decodeExhibitorList,"private static Map<String String>  (String str) throws UnsupportedEncodingException { Map<String String> values=Maps.newHashMap(); for ( String spec : str.split(""&"")) { String[] parts=spec.split(""=""); if (parts.length == 2) { values.put(parts[0] URLDecoder.decode(parts[1] ""UTF-8"")); } } return values; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,getBackupConnectionString,@Override public String  () throws Exception { return masterExhibitors.get().getBackupConnectionString(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,getConnectionString,@Override public String  (){ return connectionString.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,getCountFromValues,private int  (Map<String String> values){ try { return Integer.parseInt(values.get(VALUE_COUNT)); } catch ( NumberFormatException e) { } return 0; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,newValues,"private Map<String String>  (){ Map<String String> values=Maps.newHashMap(); values.put(VALUE_COUNT ""0""); return values; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,poll,"@VisibleForTesting protected void  (){ Exhibitors localExhibitors=exhibitors.get(); Map<String String> values=queryExhibitors(localExhibitors); int count=getCountFromValues(values); if (count == 0) { log.warn(""0 count returned from Exhibitors. Using backu"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,pollForInitialEnsemble,"public void  () throws Exception { Preconditions.checkState(state.get() == State.LATENT ""Cannot be called after start()""); poll(); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,queryExhibitors,"private Map<String String>  (Exhibitors localExhibitors){ Map<String String> values=newValues(); long start=System.currentTimeMillis(); int retries=0; boolean done=false; while (!done) { List<String> hostnames=Lists.newArrayList(localExhibitors.getHostnames()); if (hostnames.size() == 0) { done=true; } else { String hostname=hostnames.get(random.nextInt(hostnames.size())); try { String encoded=restClient.getRaw(hostname localExhibitors.getRestPort() restUriPath MIME_TYPE); values.putAll(decodeExhibitorList(encoded)); done=true; } catch ( Throwable e) { ThreadUtils.checkInterrupted(e); if (retryPolicy.allowRetry(retries++ System.currentTimeMillis() - start RetryLoop.getDefaultRetrySleeper())) { log.warn(""Couldn't get servers from Exhibitor. Retrying."" e); } else { log.error(""Couldn't get servers from Exhibitor. Giving up."" e); done=true; } } } } return values; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,run,@Override public void  (){ poll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,setConnectionString,"@Override public void  (String connectionString){ log.info(""setConnectionString received. Ignoring. "" + connectionString); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,setExhibitors,public void  (Exhibitors newExhibitors){ exhibitors.set(newExhibitors); masterExhibitors.set(newExhibitors); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,start,"@Override public void  () throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); service.scheduleWithFixedDelay(new Runnable(){ @Override public void run(){ poll(); } }  pollingMs p"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,updateServerListEnabled,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\exhibitor\ExhibitorEnsembleProvider.java,useBackup,"private Map<String String>  (Exhibitors localExhibitors){ Map<String String> values=newValues(); try { String backupConnectionString=localExhibitors.getBackupConnectionString(); int thePort=-1; int count=0; for ( String spec : backupConnectionString.split("" "")) { spec=spec.trim(); String[] parts=spec.split("":""); if (parts.length == 2) { String hostname=parts[0]; int port=Integer.parseInt(parts[1]); if (thePort < 0) { thePort=port; } else if (port != thePort) { log.warn(""Inconsistent port in connection component: "" + spec); } values.put(VALUE_SERVER_PREFIX + count hostname); ++count; } else { log.warn(""Bad backup connection component: "" + spec); } } values.put(VALUE_COUNT Integer.toString(count)); values.put(VALUE_PORT Integer.toString(thePort)); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""Couldn't get backup connection string"" e); } return values; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\fixed\FixedEnsembleProvider.java,FixedEnsembleProvider,"public  (String connectionString boolean updateServerListEnabled){ this.updateServerListEnabled=updateServerListEnabled; Preconditions.checkArgument(!Strings.isNullOrEmpty(connectionString) ""connectionString cannot be null or empty""); this.connectionString.set(connectionString); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\fixed\FixedEnsembleProvider.java,getConnectionString,@Override public String  (){ return connectionString.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\fixed\FixedEnsembleProvider.java,setConnectionString,@Override public void  (String connectionString){ this.connectionString.set(connectionString); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\ensemble\fixed\FixedEnsembleProvider.java,updateServerListEnabled,@Override public boolean  (){ return updateServerListEnabled; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\ExponentialBackoffRetry.java,ExponentialBackoffRetry,public  (int baseSleepTimeMs int maxRetries int maxSleepMs){ super(validateMaxRetries(maxRetries)); this.baseSleepTimeMs=baseSleepTimeMs; this.maxSleepMs=maxSleepMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\ExponentialBackoffRetry.java,getBaseSleepTimeMs,@VisibleForTesting public int  (){ return baseSleepTimeMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\ExponentialBackoffRetry.java,getSleepTimeMs,"@Override protected long  (int retryCount long elapsedTimeMs){ long sleepMs=baseSleepTimeMs * Math.max(1 random.nextInt(1 << (retryCount + 1))); if (sleepMs > maxSleepMs) { log.warn(String.format(""Sleep extension too large (%d). Pinning to %d"" sleepMs max"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\ExponentialBackoffRetry.java,validateMaxRetries,"private static int  (int maxRetries){ if (maxRetries > MAX_RETRIES_LIMIT) { log.warn(String.format(""maxRetries too large (%d). Pinning to %d"" maxRetries MAX_RETRIES_LIMIT)); maxRetries=MAX_RETRIES_LIMIT; } return maxRetries; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\BoundedExponentialBackoffRetry.java,BoundedExponentialBackoffRetry,public  (int baseSleepTimeMs int maxSleepTimeMs int maxRetries){ super(baseSleepTimeMs maxRetries); this.maxSleepTimeMs=maxSleepTimeMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\BoundedExponentialBackoffRetry.java,getMaxSleepTimeMs,@VisibleForTesting public int  (){ return maxSleepTimeMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\BoundedExponentialBackoffRetry.java,getSleepTimeMs,@Override protected long  (int retryCount long elapsedTimeMs){ return Math.min(maxSleepTimeMs super.getSleepTimeMs(retryCount elapsedTimeMs)); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\RetryForever.java,RetryForever,public  (int retryIntervalMs){ checkArgument(retryIntervalMs > 0); this.retryIntervalMs=retryIntervalMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\RetryForever.java,allowRetry,"@Override public boolean  (int retryCount long elapsedTimeMs RetrySleeper sleeper){ try { sleeper.sleepFor(retryIntervalMs TimeUnit.MILLISECONDS); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); log.warn(""Error occurred while sleep"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\RetryNTimes.java,RetryNTimes,public  (int n int sleepMsBetweenRetries){ super(n); this.sleepMsBetweenRetries=sleepMsBetweenRetries; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\RetryNTimes.java,getSleepTimeMs,@Override protected long  (int retryCount long elapsedTimeMs){ return sleepMsBetweenRetries; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\RetryOneTime.java,RetryOneTime,public  (int sleepMsBetweenRetry){ super(1 sleepMsBetweenRetry); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\RetryUntilElapsed.java,RetryUntilElapsed,public  (int maxElapsedTimeMs int sleepMsBetweenRetries){ super(Integer.MAX_VALUE); this.maxElapsedTimeMs=maxElapsedTimeMs; this.sleepMsBetweenRetries=sleepMsBetweenRetries; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\RetryUntilElapsed.java,allowRetry,@Override public boolean  (int retryCount long elapsedTimeMs RetrySleeper sleeper){ return super.allowRetry(retryCount elapsedTimeMs sleeper) && (elapsedTimeMs < maxElapsedTimeMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\RetryUntilElapsed.java,getSleepTimeMs,@Override protected long  (int retryCount long elapsedTimeMs){ return sleepMsBetweenRetries; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\SleepingRetry.java,SleepingRetry,protected  (int n){ this.n=n; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\SleepingRetry.java,allowRetry,public boolean  (int retryCount long elapsedTimeMs RetrySleeper sleeper){ if (retryCount < n) { try { sleeper.sleepFor(getSleepTimeMs(retryCount elapsedTimeMs) TimeUnit.MILLISECONDS); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); return false; } return true; } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\retry\SleepingRetry.java,getN,public int  (){ return n; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,RetryLoop, (RetryPolicy retryPolicy AtomicReference<TracerDriver> tracer){ this.retryPolicy=retryPolicy; this.tracer=tracer; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,callWithRetry,public static <T>T  (CuratorZookeeperClient client Callable<T> proc) throws Exception { return client.getConnectionHandlingPolicy().callWithRetry(client proc); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,getDefaultRetrySleeper,public static RetrySleeper  (){ return sleeper; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,isRetryException,public static boolean  (Throwable exception){ if (exception instanceof KeeperException) { KeeperException keeperException=(KeeperException)exception; return shouldRetry(keeperException.code().intValue()); } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,markComplete,public void  (){ isDone=true; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,shouldContinue,public boolean  (){ return !isDone; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,shouldRetry,public static boolean  (int rc){ return (rc == KeeperException.Code.CONNECTIONLOSS.intValue()) || (rc == KeeperException.Code.OPERATIONTIMEOUT.intValue()) || (rc == KeeperException.Code.SESSIONMOVED.intValue())|| (rc == KeeperException.Code.SESSIONEXPIRED.intValue())|| (rc == -13); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,sleepFor,@Override public void  (long time TimeUnit unit) throws InterruptedException { unit.sleep(time); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\RetryLoop.java,takeException,"public void  (Exception exception) throws Exception { boolean rethrow=true; if (isRetryException(exception)) { if (!Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES)) { log.debug(""Retry-able exception received"" exception); } if (retryPolicy.allowRetry(retryCount++ System.currentTimeMillis() - startTimeMs sleeper)) { new EventTrace(""retries-allowed"" tracer.get()).commit(); if (!Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES)) { log.debug(""Retrying operation""); } rethrow=false; } else { new EventTrace(""retries-disallowed"" tracer.get()).commit(); if (!Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES)) { log.debug(""Retry policy not allowing retry""); } } } if (rethrow) { throw exception; } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\SessionFailRetryLoop.java,SessionFailRetryLoop, (CuratorZookeeperClient client Mode mode){ this.client=client; this.mode=mode; retryLoop=client.newRetryLoop(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\SessionFailRetryLoop.java,callWithRetry,public static <T>T  (CuratorZookeeperClient client Mode mode Callable<T> proc) throws Exception { T result=null; SessionFailRetryLoop retryLoop=client.newSessionFailRetryLoop(mode); retryLoop.start(); try { while (retryLoop.shouldContinue()) { try { result=proc.call(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); retryLoop.takeException(e); } } } finally { retryLoop.close(); } return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\SessionFailRetryLoop.java,close,"@Override public void  (){ Preconditions.checkState(Thread.currentThread().equals(ourThread) ""Not in the correct thread""); failedSessionThreads.remove(ourThread); client.removeParentWatcher(watcher); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\SessionFailRetryLoop.java,process,@Override public void  (WatchedEvent event){ if (event.getState() == Event.KeeperState.Expired) { sessionHasFailed.set(true); failedSessionThreads.add(ourThread); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\SessionFailRetryLoop.java,sessionForThreadHasFailed,static boolean  (){ return failedSessionThreads.contains(Thread.currentThread()); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\SessionFailRetryLoop.java,shouldContinue,public boolean  (){ boolean localIsDone=isDone.getAndSet(true); return !localIsDone; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\SessionFailRetryLoop.java,start,"public void  (){ Preconditions.checkState(Thread.currentThread().equals(ourThread) ""Not in the correct thread""); client.addParentWatcher(watcher); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\SessionFailRetryLoop.java,takeException,"public void  (Exception exception) throws Exception { Preconditions.checkState(Thread.currentThread().equals(ourThread) ""Not in the correct thread""); boolean passUp=true; if (sessionHasFailed.get()) { switch (mode) { case RETRY: { sessionHasFailed.set(false); failedSessionThreads.remove(ourThread); if (exception instanceof SessionFailedException) { isDone.set(false); passUp=false; } break; } case FAIL: { break; } } } if (passUp) { retryLoop.takeException(exception); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\TimeTrace.java,TimeTrace,public  (String name TracerDriver driver){ this.name=name; this.driver=driver; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\TimeTrace.java,commit,public void  (){ long elapsed=System.nanoTime() - startTimeNanos; driver.addTrace(name elapsed TimeUnit.NANOSECONDS); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableScheduledExecutorService.java,CloseableScheduledExecutorService,public  (ScheduledExecutorService scheduledExecutorService boolean shutdownOnClose){ super(scheduledExecutorService shutdownOnClose); this.scheduledExecutorService=scheduledExecutorService; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableScheduledExecutorService.java,schedule,"public Future<?>  (Runnable task long delay TimeUnit unit){ Preconditions.checkState(isOpen.get() ""CloseableExecutorService is closed""); InternalFutureTask<Void> futureTask=new InternalFutureTask<Void>(new FutureTask<Void>(task null)); scheduledExecutorService.schedule(futureTask delay unit); return futureTask; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableScheduledExecutorService.java,scheduleWithFixedDelay,"public Future<?>  (Runnable task long initialDelay long delay TimeUnit unit){ Preconditions.checkState(isOpen.get() ""CloseableExecutorService is closed""); ScheduledFuture<?> scheduledFuture=scheduledExecutorService.scheduleWithFixedDelay(task initialDelay delay unit); return new InternalScheduledFutureTask(scheduledFuture); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableUtils.java,closeQuietly,"public static void  (Closeable closeable){ try { Closeables.close(closeable true); } catch ( IOException e) { log.error(""IOException should not have been thrown."" e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,CloseableExecutorService,"public  (ExecutorService executorService boolean shutdownOnClose){ this.executorService=Preconditions.checkNotNull(executorService ""executorService cannot be null""); this.shutdownOnClose=shutdownOnClose; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,InternalFutureTask, (RunnableFuture<T> task){ super(task null); this.task=task; futures.add(task); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,InternalScheduledFutureTask,public  (ScheduledFuture<?> scheduledFuture){ this.scheduledFuture=scheduledFuture; futures.add(scheduledFuture); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,cancel,@Override public boolean  (boolean mayInterruptIfRunning){ futures.remove(scheduledFuture); return scheduledFuture.cancel(mayInterruptIfRunning); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,close,@Override public void  (){ isOpen.set(false); Iterator<Future<?>> iterator=futures.iterator(); while (iterator.hasNext()) { Future<?> future=iterator.next(); iterator.remove(); if (!future.isDone() && !future.isCancelled() && !future.cancel(true)) { log.w
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,done,protected void  (){ futures.remove(task); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,get,@Override public Void  (long timeout TimeUnit unit) throws InterruptedException  ExecutionException  TimeoutException { return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,isCancelled,@Override public boolean  (){ return scheduledFuture.isCancelled(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,isDone,@Override public boolean  (){ return scheduledFuture.isDone(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,isShutdown,public boolean  (){ return !isOpen.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,size,@VisibleForTesting int  (){ return futures.size(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\CloseableExecutorService.java,submit,"public Future<?>  (Runnable task){ Preconditions.checkState(isOpen.get() ""CloseableExecutorService is closed""); InternalFutureTask<Void> futureTask=new InternalFutureTask<Void>(new FutureTask<Void>(task null)); executorService.execute(futureTask); return futureTask; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\Compatibility.java,injectSessionExpiration,public static void  (ZooKeeper zooKeeper){ if (isZK34()) { InjectSessionExpiration.injectSessionExpiration(zooKeeper); } else { zooKeeper.getTestable().injectSessionExpiration(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\Compatibility.java,isZK34,public static boolean  (){ return !hasZooKeeperAdmin; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\DefaultTracerDriver.java,addCount,"@Override public void  (String name int increment){ if (log.isTraceEnabled()) { log.trace(""Counter "" + name + "": ""+ increment); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\DefaultTracerDriver.java,addTrace,"@Override public void  (String name long time TimeUnit unit){ if (log.isTraceEnabled()) { log.trace(""Trace: "" + name + "" - ""+ TimeUnit.MILLISECONDS.convert(time unit)+ "" ms""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\DefaultZookeeperFactory.java,newZooKeeper,@Override public ZooKeeper  (String connectString int sessionTimeout Watcher watcher boolean canBeReadOnly) throws Exception { return new ZooKeeper(connectString sessionTimeout watcher canBeReadOnly); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ExceptionAccumulator.java,add,public void  (Throwable e){ if (e instanceof InterruptedException) { if (mainEx != null) { e.addSuppressed(mainEx); } Thread.currentThread().interrupt(); } if (mainEx == null) { mainEx=e; } else { mainEx.addSuppressed(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ExceptionAccumulator.java,propagate,public void  (){ if (mainEx != null) { Throwables.propagate(mainEx); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\EnsurePath.java,EnsurePath,protected  (String path AtomicReference<Helper> helper boolean makeLastNode InternalACLProvider aclProvider){ this.path=path; this.makeLastNode=makeLastNode; this.aclProvider=aclProvider; this.helper=(helper != null) ? helper : new AtomicReference<Helper>(new InitialHelper()); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\EnsurePath.java,asContainers,protected boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\EnsurePath.java,call,@Override public Object  () throws Exception { ZKPaths.mkdirs(client.getZooKeeper() path makeLastNode aclProvider asContainers()); helper.set(doNothingHelper); isSet=true; return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\EnsurePath.java,ensure,@Override public synchronized void  (final CuratorZookeeperClient client final String path final boolean makeLastNode) throws Exception { if (!isSet) { RetryLoop.callWithRetry(client new Callable<Object>(){ @Override public Object call() throws Exception 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\EnsurePath.java,excludingLast,public EnsurePath  (){ return new EnsurePath(path helper false aclProvider); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\EnsurePath.java,getPath,public String  (){ return this.path; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\InjectSessionExpiration.java,injectSessionExpiration,"public static void  (ZooKeeper zooKeeper){ try { WatchedEvent event=new WatchedEvent(Watcher.Event.EventType.None Watcher.Event.KeeperState.Expired null); ClientCnxn clientCnxn=(ClientCnxn)cnxnField.get(zooKeeper); Object eventThread=eventThreadField.get(clientCnxn); queueEventMethod.invoke(eventThread event); queueEventOfDeathMethod.invoke(eventThread); stateField.set(clientCnxn ZooKeeper.States.CLOSED); Object sendThread=sendThreadField.get(clientCnxn); Object clientCnxnSocket=getClientCnxnSocketMethod.invoke(sendThread); wakeupCnxnMethod.invoke(clientCnxnSocket); } catch ( ReflectiveOperationException e) { throw new RuntimeException(""Could not inject session expiration using reflection"" e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,checkInterrupted,public static boolean  (Throwable e){ if (e instanceof InterruptedException) { Thread.currentThread().interrupt(); return true; } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,getProcessName,public static String  (Class<?> clazz){ if (clazz.isAnonymousClass()) { return getProcessName(clazz.getEnclosingClass()); } return clazz.getSimpleName(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,newFixedThreadPool,public static ExecutorService  (int qty String processName){ return Executors.newFixedThreadPool(qty newThreadFactory(processName)); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,newFixedThreadScheduledPool,public static ScheduledExecutorService  (int qty String processName){ return Executors.newScheduledThreadPool(qty newThreadFactory(processName)); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,newGenericThreadFactory,"public static ThreadFactory  (String processName){ Thread.UncaughtExceptionHandler uncaughtExceptionHandler=new Thread.UncaughtExceptionHandler(){ @Override public void uncaughtException( Thread t  Throwable e){ log.error(""Unexpected exception in thread: "" + t e); Throwables.propagate(e); } } ; return new ThreadFactoryBuilder().setNameFormat(processName + ""-%d"").setDaemon(true).setUncaughtExceptionHandler(uncaughtExceptionHandler).build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,newSingleThreadExecutor,public static ExecutorService  (String processName){ return Executors.newSingleThreadExecutor(newThreadFactory(processName)); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,newSingleThreadScheduledExecutor,public static ScheduledExecutorService  (String processName){ return Executors.newSingleThreadScheduledExecutor(newThreadFactory(processName)); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,newThreadFactory,"public static ThreadFactory  (String processName){ return newGenericThreadFactory(""Curator-"" + processName); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ThreadUtils.java,uncaughtException,"@Override public void  (Thread t Throwable e){ log.error(""Unexpected exception in thread: "" + t e); Throwables.propagate(e); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\PathUtils.java,validatePath,"public static String  (String path) throws IllegalArgumentException { if (path == null) { throw new IllegalArgumentException(""Path cannot be null""); } if (path.length() == 0) { throw new IllegalArgumentException(""Path length must be > 0""); } if (path.charAt(0) != '/') { throw new IllegalArgumentException(""Path must start with / character""); } if (path.length() == 1) { return path; } if (path.charAt(path.length() - 1) == '/') { throw new IllegalArgumentException(""Path must not end with / character""); } String reason=null; char lastc='/'; char chars[]=path.toCharArray(); char c; for (int i=1; i < chars.length; lastc=chars[i]  i++) { c=chars[i]; if (c == 0) { reason=""null character not allowed @"" + i; break; } else if (c == '/' && lastc == '/') { reason=""empty node name specified @"" + i; break; } else if (c == '.' && lastc == '.') { if (chars[i - 2] == '/' && ((i + 1 == chars.length) || chars[i + 1] == '/')) { reason=""relative paths not allowed @"" + i; break; } } else if (c == '.') { if (chars[i - 1] == '/' && ((i + 1 == chars.length) || chars[i + 1] == '/')) { reason=""relative paths not allowed @"" + i; break; } } else if (c > '\u0000' && c < '\u001f' || c > '\u007f' && c < '\u009F' || c > '\ud800' && c < '\uf8ff' || c > '\ufff0' && c < '\uffff') { reason=""invalid charater @"" + i; break; } } if (reason != null) { throw new IllegalArgumentException(""Invalid path string \"""" + path + ""\"" caused by ""+ reason); } return path; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,PathAndNode,public  (String path String node){ this.path=path; this.node=node; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,deleteChildren,public static void  (ZooKeeper zookeeper String path boolean deleteSelf) throws InterruptedException  KeeperException { PathUtils.validatePath(path); List<String> children; try { children=zookeeper.getChildren(path null); } catch ( KeeperException.NoNodeException e) { return; } for ( String child : children) { String fullPath=makePath(path child); deleteChildren(zookeeper fullPath true); } if (deleteSelf) { try { zookeeper.delete(path -1); } catch ( KeeperException.NotEmptyException e) { deleteChildren(zookeeper path true); } catch ( KeeperException.NoNodeException e) { } } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,fixForNamespace,public static String  (String namespace String path boolean isSequential){ PathUtils.validatePath(path isSequential); if (namespace != null) { return makePath(namespace path); } return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,getContainerCreateMode,public static CreateMode  (){ return CreateModeHolder.containerCreateMode; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,getCreateMode,private static CreateMode  (boolean asContainers){ return asContainers ? getContainerCreateMode() : CreateMode.PERSISTENT; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,getNode,public String  (){ return node; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,getNodeFromPath,"public static String  (String path){ PathUtils.validatePath(path); int i=path.lastIndexOf(PATH_SEPARATOR); if (i < 0) { return path; } if ((i + 1) >= path.length()) { return """"; } return path.substring(i + 1); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,getPathAndNode,"public static PathAndNode  (String path){ PathUtils.validatePath(path); int i=path.lastIndexOf(PATH_SEPARATOR); if (i < 0) { return new PathAndNode(path """"); } if ((i + 1) >= path.length()) { return new PathAndNode(PATH_SEPARATOR """"); } String node=path.substring(i + 1); String parentPath=(i > 0) ? path.substring(0 i) : PATH_SEPARATOR; return new PathAndNode(parentPath node); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,getSortedChildren,public static List<String>  (ZooKeeper zookeeper String path) throws InterruptedException  KeeperException { List<String> children=zookeeper.getChildren(path false); List<String> sortedList=Lists.newArrayList(children); Collections.sort(sortedList); return sortedList; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,hasContainerSupport,public static boolean  (){ return getContainerCreateMode() != NON_CONTAINER_MODE; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,joinPath,private static void  (StringBuilder path String parent String child){ if ((parent != null) && (parent.length() > 0)) { if (!parent.startsWith(PATH_SEPARATOR)) { path.append(PATH_SEPARATOR); } if (parent.endsWith(PATH_SEPARATOR)) { path.append(parent.substring(0 parent.length() - 1)); } else { path.append(parent); } } if ((child == null) || (child.length() == 0) || (child.equals(PATH_SEPARATOR))) { if (path.length() == 0) { path.append(PATH_SEPARATOR); } return; } path.append(PATH_SEPARATOR); if (child.startsWith(PATH_SEPARATOR)) { child=child.substring(1); } if (child.endsWith(PATH_SEPARATOR)) { child=child.substring(0 child.length() - 1); } path.append(child); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,makePath,"public static String  (String parent String firstChild String... restChildren){ StringBuilder path=new StringBuilder(); joinPath(path parent firstChild); if (restChildren == null) { return path.toString(); } else { for ( String child : restChildren) { joinPath(path """" child); } return path.toString(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,mkdirs,public static void  (ZooKeeper zookeeper String path boolean makeLastNode InternalACLProvider aclProvider boolean asContainers) throws InterruptedException  KeeperException { PathUtils.validatePath(path); int pos=1; do { pos=path.indexOf(PATH_SEPARATOR pos + 1); if (pos == -1) { if (makeLastNode) { pos=path.length(); } else { break; } } String subPath=path.substring(0 pos); if (zookeeper.exists(subPath false) == null) { try { List<ACL> acl=null; if (aclProvider != null) { acl=aclProvider.getAclForPath(subPath); if (acl == null) { acl=aclProvider.getDefaultAcl(); } } if (acl == null) { acl=ZooDefs.Ids.OPEN_ACL_UNSAFE; } zookeeper.create(subPath new byte[0] acl getCreateMode(asContainers)); } catch ( KeeperException.NodeExistsException e) { } } } while (pos < path.length()); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\main\java\org\apache\curator\utils\ZKPaths.java,split,public static List<String>  (String path){ PathUtils.validatePath(path); return PATH_SPLITTER.splitToList(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\ensemble\exhibitor\TestExhibitorEnsembleProvider.java,call,"@Override public Stat  () throws Exception { return client.getZooKeeper().exists(""/test"" false); } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\ensemble\exhibitor\TestExhibitorEnsembleProvider.java,getBackupConnectionString,@Override public String  (){ return backupConnectionString.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\BasicTests.java,call,"@Override public Object  () throws Exception { if (firstTime.compareAndSet(true false)) { try { client.getZooKeeper().create(""/foo"" new byte[0] ZooDefs.Ids.OPEN_ACL_UNSAFE CreateMode.PERSISTENT); } catch ( KeeperException.NodeExistsException ignore) { } K"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\BasicTests.java,newZooKeeper,@Override public ZooKeeper  (String connectString int sessionTimeout Watcher watcher boolean canBeReadOnly) throws Exception { return mockZookeeper; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\BasicTests.java,process,@Override public void  (WatchedEvent event){ if (event.getState() == Event.KeeperState.Expired) { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\BasicTests.java,testBackgroundConnect,@Test public void  () throws Exception { final int CONNECTION_TIMEOUT_MS=4000; CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() 10000 CONNECTION_TIMEOUT_MS null new RetryOneTime(1)); try { Assert.assertFalse(client.isConn
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\BasicTests.java,testExpiredSession,@Test public void  () throws Exception { final Timing timing=new Timing(); final CountDownLatch latch=new CountDownLatch(1); Watcher watcher=new Watcher(){ @Override public void process( WatchedEvent event){ if (event.getState() == Event.KeeperState.Expir
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\BasicTests.java,testFactory,@Test public void  () throws Exception { final ZooKeeper mockZookeeper=Mockito.mock(ZooKeeper.class); ZookeeperFactory zookeeperFactory=new ZookeeperFactory(){ @Override public ZooKeeper newZooKeeper( String connectString  int sessionTimeout  Watcher watc
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\BasicTests.java,testReconnect,@Test public void  () throws Exception { CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() 10000 10000 null new RetryOneTime(1)); client.start(); try { client.blockUntilConnectedOrTimedOut(); byte[] writtenData={1 2 3}; cl
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\BasicTests.java,testSimple,@Test public void  () throws Exception { CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() 10000 10000 null new RetryOneTime(1)); client.start(); try { client.blockUntilConnectedOrTimedOut(); String path=client.getZooKeepe
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\ensemble\exhibitor\TestExhibitorEnsembleProvider.java,getRaw,"@Override public String  (String hostname int port String uriPath String mimeType) throws Exception { return ""count=1&port="" + server.getPort() + ""&server0=localhost""; } "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\ensemble\exhibitor\TestExhibitorEnsembleProvider.java,poll,@Override protected void  (){ super.poll(); semaphore.release(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\ensemble\exhibitor\TestExhibitorEnsembleProvider.java,testChanging,"@Test public void  () throws Exception { TestingServer secondServer=new TestingServer(); try { String mainConnectionString=""count=1&port="" + server.getPort() + ""&server0=localhost""; String secondConnectionString=""count=1&port="" + secondServer.getPort() + "
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\ensemble\exhibitor\TestExhibitorEnsembleProvider.java,testExhibitorFailures,"@Test public void  () throws Exception { final AtomicReference<String> backupConnectionString=new AtomicReference<String>(""backup1:1""); final AtomicReference<String> connectionString=new AtomicReference<String>(""count=1&port=2&server0=localhost""); Exhibit"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\ensemble\exhibitor\TestExhibitorEnsembleProvider.java,testSimple,"@Test public void  () throws Exception { Exhibitors exhibitors=new Exhibitors(Lists.newArrayList(""foo"" ""bar"") 1000 dummyConnectionStringProvider); ExhibitorRestClient mockRestClient=new ExhibitorRestClient(){ @Override public String getRaw( String hostnam"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestSessionFailRetryLoop.java,call,"@Override public Void  () throws Exception { Assert.assertNull(client.getZooKeeper().exists(""/foo/bar"" false)); KillSession2.kill(client.getZooKeeper()); client.getZooKeeper(); client.blockUntilConnectedOrTimedOut(); Assert.assertNull(client.getZooKeeper("
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestSessionFailRetryLoop.java,testBasic,@Test public void  () throws Exception { final Timing timing=new Timing(); final CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() timing.session() timing.connection() null new ExponentialBackoffRetry(100 3)); SessionFailR
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestSessionFailRetryLoop.java,testBasicStatic,@Test public void  () throws Exception { Timing timing=new Timing(); final CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() timing.session() timing.connection() null new ExponentialBackoffRetry(100 3)); SessionFailRetryLo
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestSessionFailRetryLoop.java,testRetry,@Test public void  () throws Exception { Timing timing=new Timing(); final CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() timing.session() timing.connection() null new ExponentialBackoffRetry(100 3)); SessionFailRetryLo
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestSessionFailRetryLoop.java,testRetryStatic,@Test public void  () throws Exception { Timing timing=new Timing(); final CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() timing.session() timing.connection() null new ExponentialBackoffRetry(100 3)); SessionFailRetryLo
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestEnsurePath.java,answer,@Override public Stat  (InvocationOnMock invocation) throws Throwable { semaphore.acquire(); return fakeStat; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestEnsurePath.java,call,@Override public Void  () throws Exception { startedLatch.countDown(); ensurePath.ensure(curator); finishedLatch.countDown(); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestEnsurePath.java,testBasic,@Test public void  () throws Exception { ZooKeeper client=mock(ZooKeeper.class Mockito.RETURNS_MOCKS); CuratorZookeeperClient curator=mock(CuratorZookeeperClient.class); RetryPolicy retryPolicy=new RetryOneTime(1); RetryLoop retryLoop=new RetryLoop(retryP
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestEnsurePath.java,testSimultaneous,@Test public void  () throws Exception { ZooKeeper client=mock(ZooKeeper.class Mockito.RETURNS_MOCKS); RetryPolicy retryPolicy=new RetryOneTime(1); RetryLoop retryLoop=new RetryLoop(retryPolicy null); final CuratorZookeeperClient curator=mock(CuratorZooke
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestRetryLoop.java,sleepFor,@Override public void  (long time TimeUnit unit) throws InterruptedException { Assert.assertTrue(unit.toMillis(time) <= 100); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestRetryLoop.java,testExponentialBackoffRetryLimit,@Test public void  (){ RetrySleeper sleeper=new RetrySleeper(){ @Override public void sleepFor( long time  TimeUnit unit) throws InterruptedException { Assert.assertTrue(unit.toMillis(time) <= 100); } } ; ExponentialBackoffRetry retry=new ExponentialBacko
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestRetryLoop.java,testRetryForever,@Test public void  () throws Exception { int retryIntervalMs=1; RetrySleeper sleeper=Mockito.mock(RetrySleeper.class); RetryForever retryForever=new RetryForever(retryIntervalMs); for (int i=0; i < 10; i++) { boolean allowed=retryForever.allowRetry(i 0 sl
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestRetryLoop.java,testRetryLoop,@Test public void  () throws Exception { CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() 10000 10000 null new RetryOneTime(1)); client.start(); try { int loopCount=0; RetryLoop retryLoop=client.newRetryLoop(); while (ret
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\TestRetryLoop.java,testRetryLoopWithFailure,@Test public void  () throws Exception { CuratorZookeeperClient client=new CuratorZookeeperClient(server.getConnectString() 5000 5000 null new RetryOneTime(1)); client.start(); try { int loopCount=0; RetryLoop retryLoop=client.newRetryLoop(); outer: while
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,call,@Override public Void  () throws Exception { try { startLatch.countDown(); Thread.currentThread().join(); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,run,@Override public void  (){ try { startLatch.countDown(); Thread.sleep(100000); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } finally { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,setup,@BeforeMethod public void  (){ executorService=Executors.newFixedThreadPool(QTY * 2); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,submitRunnable,private void  (CloseableExecutorService service final CountDownLatch startLatch final CountDownLatch latch){ service.submit(new Runnable(){ @Override public void run(){ try { startLatch.countDown(); Thread.sleep(100000); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } finally { latch.countDown(); } } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,tearDown,@AfterMethod public void  (){ executorService.shutdownNow(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,testBasicCallable,@Test public void  () throws InterruptedException { CloseableExecutorService service=new CloseableExecutorService(executorService); final CountDownLatch startLatch=new CountDownLatch(QTY); final CountDownLatch latch=new CountDownLatch(QTY); for (int i=0; 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,testBasicRunnable,@Test public void  () throws InterruptedException { try { CloseableExecutorService service=new CloseableExecutorService(executorService); CountDownLatch startLatch=new CountDownLatch(QTY); CountDownLatch latch=new CountDownLatch(QTY); for (int i=0; i < QT
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,testListeningCallable,@Test public void  () throws InterruptedException { CloseableExecutorService service=new CloseableExecutorService(executorService); final CountDownLatch startLatch=new CountDownLatch(QTY); List<Future<?>> futures=Lists.newArrayList(); for (int i=0; i < QT
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,testListeningRunnable,@Test public void  () throws InterruptedException { CloseableExecutorService service=new CloseableExecutorService(executorService); List<Future<?>> futures=Lists.newArrayList(); final CountDownLatch startLatch=new CountDownLatch(QTY); for (int i=0; i < QT
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableExecutorService.java,testPartialRunnable,@Test public void  () throws InterruptedException { final CountDownLatch outsideLatch=new CountDownLatch(1); executorService.submit(new Runnable(){ @Override public void run(){ try { Thread.currentThread().join(); } catch ( InterruptedException e) { Threa
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestZKPaths.java,testMakePath,"@SuppressWarnings(""NullArgumentToVariableArgMethod"") @Test public void  (){ Assert.assertEquals(ZKPaths.makePath(null ""/"") ""/""); Assert.assertEquals(ZKPaths.makePath("""" null) ""/""); Assert.assertEquals(ZKPaths.makePath(""/"" null) ""/""); Assert.assertEquals(Z"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestZKPaths.java,testSplit,"@Test public void  (){ Assert.assertEquals(ZKPaths.split(""/"") Collections.emptyList()); Assert.assertEquals(ZKPaths.split(""/test"") Collections.singletonList(""test"")); Assert.assertEquals(ZKPaths.split(""/test/one"") Arrays.asList(""test"" ""one"")); Assert.asse"
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableScheduledExecutorService.java,run,@Override public void  (){ innerCounter.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableScheduledExecutorService.java,setup,@BeforeMethod public void  (){ executorService=Executors.newScheduledThreadPool(QTY * 2); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableScheduledExecutorService.java,tearDown,@AfterMethod public void  (){ executorService.shutdownNow(); } 
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableScheduledExecutorService.java,testCloseableScheduleWithFixedDelay,@Test public void  () throws InterruptedException { CloseableScheduledExecutorService service=new CloseableScheduledExecutorService(executorService); final CountDownLatch latch=new CountDownLatch(QTY); service.scheduleWithFixedDelay(new Runnable(){ @Overr
C:\Users\User\Desktop\Thesis\curator\curator-client\src\test\java\org\apache\curator\utils\TestCloseableScheduledExecutorService.java,testCloseableScheduleWithFixedDelayAndAdditionalTasks,@Test public void  () throws InterruptedException { final AtomicInteger outerCounter=new AtomicInteger(0); Runnable command=new Runnable(){ @Override public void run(){ outerCounter.incrementAndGet(); } } ; executorService.scheduleWithFixedDelay(command D
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\PathCacheExample.java,addListener,"private static void  (PathChildrenCache cache){ PathChildrenCacheListener listener=new PathChildrenCacheListener(){ @Override public void childEvent( CuratorFramework client  PathChildrenCacheEvent event) throws Exception { switch (event.getType()) { case CHILD_ADDED: { System.out.println(""Node added: "" + ZKPaths.getNodeFromPath(event.getData().getPath())); break; } case CHILD_UPDATED: { System.out.println(""Node changed: "" + ZKPaths.getNodeFromPath(event.getData().getPath())); break; } case CHILD_REMOVED: { System.out.println(""Node removed: "" + ZKPaths.getNodeFromPath(event.getData().getPath())); break; } } } } ; cache.getListenable().addListener(listener); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\PathCacheExample.java,childEvent,"@Override public void  (CuratorFramework client PathChildrenCacheEvent event) throws Exception { switch (event.getType()) { case CHILD_ADDED: { System.out.println(""Node added: "" + ZKPaths.getNodeFromPath(event.getData().getPath())); break; } case CHILD_UP"
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\PathCacheExample.java,list,"private static void  (PathChildrenCache cache){ if (cache.getCurrentData().size() == 0) { System.out.println(""* empty *""); } else { for ( ChildData data : cache.getCurrentData()) { System.out.println(data.getPath() + "" = "" + new String(data.getData())); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\PathCacheExample.java,main,public static void  (String[] args) throws Exception { TestingServer server=new TestingServer(); CuratorFramework client=null; PathChildrenCache cache=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() new ExponentialBackoffRetry(1000 3)); client.start(); cache=new PathChildrenCache(client PATH true); cache.start(); processCommands(client cache); } finally { CloseableUtils.closeQuietly(cache); CloseableUtils.closeQuietly(client); CloseableUtils.closeQuietly(server); } } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\PathCacheExample.java,printHelp,"private static void  (){ System.out.println(""An example of using PathChildrenCache. This example is driven by entering commands at the prompt:\n""); System.out.println(""set <name> <value>: Adds or updates a node with the given name""); System.out.println(""remove <name>: Deletes the node with the given name""); System.out.println(""list: List the nodes/values in the cache""); System.out.println(""quit: Quit the example""); System.out.println(); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\PathCacheExample.java,processCommands,"private static void  (CuratorFramework client PathChildrenCache cache) throws Exception { printHelp(); List<ExampleServer> servers=Lists.newArrayList(); try { addListener(cache); BufferedReader in=new BufferedReader(new InputStreamReader(System.in)); boolean done=false; while (!done) { System.out.print(""> ""); String line=in.readLine(); if (line == null) { break; } String command=line.trim(); String[] parts=command.split(""\\s""); if (parts.length == 0) { continue; } String operation=parts[0]; String args[]=Arrays.copyOfRange(parts 1 parts.length); if (operation.equalsIgnoreCase(""help"") || operation.equalsIgnoreCase(""?"")) { printHelp(); } else if (operation.equalsIgnoreCase(""q"") || operation.equalsIgnoreCase(""quit"")) { done=true; } else if (operation.equals(""set"")) { setValue(client command args); } else if (operation.equals(""remove"")) { remove(client command args); } else if (operation.equals(""list"")) { list(cache); } Thread.sleep(1000); } } finally { for ( ExampleServer server : servers) { CloseableUtils.closeQuietly(server); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\PathCacheExample.java,remove,"private static void  (CuratorFramework client String command String[] args) throws Exception { if (args.length != 1) { System.err.println(""syntax error (expected remove <path>): "" + command); return; } String name=args[0]; if (name.contains(""/"")) { System.err.println(""Invalid node name"" + name); return; } String path=ZKPaths.makePath(PATH name); try { client.delete().forPath(path); } catch ( KeeperException.NoNodeException e) { } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\PathCacheExample.java,setValue,"private static void  (CuratorFramework client String command String[] args) throws Exception { if (args.length != 2) { System.err.println(""syntax error (expected set <path> <value>): "" + command); return; } String name=args[0]; if (name.contains(""/"")) { System.err.println(""Invalid node name"" + name); return; } String path=ZKPaths.makePath(PATH name); byte[] bytes=args[1].getBytes(); try { client.setData().forPath(path bytes); } catch ( KeeperException.NoNodeException e) { client.create().creatingParentContainersIfNeeded().forPath(path bytes); } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\async\AsyncExamples.java,create,"public static void  (CuratorFramework client String path byte[] payload){ AsyncCuratorFramework async=AsyncCuratorFramework.wrap(client); async.create().forPath(path payload).whenComplete((name exception) -> { if (exception != null) { exception.printStackTrace(); } else { System.out.println(""Created node name is: "" + name); } } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\async\AsyncExamples.java,createThenWatch,public static void  (CuratorFramework client String path){ AsyncCuratorFramework async=AsyncCuratorFramework.wrap(client); async.create().forPath(path).whenComplete((name exception) -> { if (exception != null) { exception.printStackTrace(); } else { handleWatchedStage(async.watched().checkExists().forPath(path).event()); } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\async\AsyncExamples.java,createThenWatchSimple,public static void  (CuratorFramework client String path){ AsyncCuratorFramework async=AsyncCuratorFramework.wrap(client); async.create().forPath(path).whenComplete((name exception) -> { if (exception != null) { exception.printStackTrace(); } else { async.with(WatchMode.successOnly).watched().checkExists().forPath(path).event().thenAccept(event -> { System.out.println(event.getType()); System.out.println(event); } ); } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\async\AsyncExamples.java,handleWatchedStage,private static void  (CompletionStage<WatchedEvent> watchedStage){ watchedStage.thenAccept(event -> { System.out.println(event.getType()); System.out.println(event); } ); watchedStage.exceptionally(exception -> { AsyncEventException asyncEx=(AsyncEventException)exception; asyncEx.printStackTrace(); handleWatchedStage(asyncEx.reset()); return null; } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\async\AsyncExamples.java,wrap,public static AsyncCuratorFramework  (CuratorFramework client){ return AsyncCuratorFramework.wrap(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\cache\TreeCacheExample.java,main,"public static void  (String[] args) throws Exception { CuratorFramework client=CreateClientExamples.createSimple(""127.0.0.1:2181""); client.getUnhandledErrorListenable().addListener((message e) -> { System.err.println(""error="" + message); e.printStackTrace(); } ); client.getConnectionStateListenable().addListener((c newState) -> { System.out.println(""state="" + newState); } ); client.start(); TreeCache cache=TreeCache.newBuilder(client ""/"").setCacheData(false).build(); cache.getListenable().addListener((c event) -> { if (event.getData() != null) { System.out.println(""type="" + event.getType() + "" path=""+ event.getData().getPath()); } else { System.out.println(""type="" + event.getType()); } } ); cache.start(); BufferedReader in=new BufferedReader(new InputStreamReader(System.in)); in.readLine(); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,addInstance,"private static void  (String[] args CuratorFramework client String command List<ExampleServer> servers) throws Exception { if (args.length < 2) { System.err.println(""syntax error (expected add <name> <description>): "" + command); return; } StringBuilder description=new StringBuilder(); for (int i=1; i < args.length; ++i) { if (i > 1) { description.append(' '); } description.append(args[i]); } String serviceName=args[0]; ExampleServer server=new ExampleServer(client PATH serviceName description.toString()); servers.add(server); server.start(); System.out.println(serviceName + "" added""); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,apply,@Override public boolean  (ExampleServer server){ return server.getThisInstance().getName().endsWith(serviceName); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,deleteInstance,"private static void  (String[] args String command List<ExampleServer> servers){ if (args.length != 1) { System.err.println(""syntax error (expected delete <name>): "" + command); return; } final String serviceName=args[0]; ExampleServer server=Iterables.find(servers new Predicate<ExampleServer>(){ @Override public boolean apply( ExampleServer server){ return server.getThisInstance().getName().endsWith(serviceName); } }  null); if (server == null) { System.err.println(""No servers found named: "" + serviceName); return; } servers.remove(server); CloseableUtils.closeQuietly(server); System.out.println(""Removed a random instance of: "" + serviceName); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,listInstances,"private static void  (ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception { try { Collection<String> serviceNames=serviceDiscovery.queryForNames(); System.out.println(serviceNames.size() + "" type(s)""); for ( String serviceName : serviceNames) { Collection<ServiceInstance<InstanceDetails>> instances=serviceDiscovery.queryForInstances(serviceName); System.out.println(serviceName); for ( ServiceInstance<InstanceDetails> instance : instances) { outputInstance(instance); } } } finally { CloseableUtils.closeQuietly(serviceDiscovery); } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,listRandomInstance,"private static void  (String[] args ServiceDiscovery<InstanceDetails> serviceDiscovery Map<String ServiceProvider<InstanceDetails>> providers String command) throws Exception { if (args.length != 1) { System.err.println(""syntax error (expected random <name>): "" + command); return; } String serviceName=args[0]; ServiceProvider<InstanceDetails> provider=providers.get(serviceName); if (provider == null) { provider=serviceDiscovery.serviceProviderBuilder().serviceName(serviceName).providerStrategy(new RandomStrategy<InstanceDetails>()).build(); providers.put(serviceName provider); provider.start(); Thread.sleep(2500); } ServiceInstance<InstanceDetails> instance=provider.getInstance(); if (instance == null) { System.err.println(""No instances named: "" + serviceName); } else { outputInstance(instance); } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,main,public static void  (String[] args) throws Exception { TestingServer server=new TestingServer(); CuratorFramework client=null; ServiceDiscovery<InstanceDetails> serviceDiscovery=null; Map<String ServiceProvider<InstanceDetails>> providers=Maps.newHashMap(); try { client=CuratorFrameworkFactory.newClient(server.getConnectString() new ExponentialBackoffRetry(1000 3)); client.start(); JsonInstanceSerializer<InstanceDetails> serializer=new JsonInstanceSerializer<InstanceDetails>(InstanceDetails.class); serviceDiscovery=ServiceDiscoveryBuilder.builder(InstanceDetails.class).client(client).basePath(PATH).serializer(serializer).build(); serviceDiscovery.start(); processCommands(serviceDiscovery providers client); } finally { for ( ServiceProvider<InstanceDetails> cache : providers.values()) { CloseableUtils.closeQuietly(cache); } CloseableUtils.closeQuietly(serviceDiscovery); CloseableUtils.closeQuietly(client); CloseableUtils.closeQuietly(server); } } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,outputInstance,"private static void  (ServiceInstance<InstanceDetails> instance){ System.out.println(""\t"" + instance.getPayload().getDescription() + "": ""+ instance.buildUriSpec()); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,printHelp,"private static void  (){ System.out.println(""An example of using the ServiceDiscovery APIs. This example is driven by entering commands at the prompt:\n""); System.out.println(""add <name> <description>: Adds a mock service with the given name and description""); System.out.println(""delete <name>: Deletes one of the mock services with the given name""); System.out.println(""list: Lists all the currently registered services""); System.out.println(""random <name>: Lists a random instance of the service with the given name""); System.out.println(""quit: Quit the example""); System.out.println(); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\DiscoveryExample.java,processCommands,"private static void  (ServiceDiscovery<InstanceDetails> serviceDiscovery Map<String ServiceProvider<InstanceDetails>> providers CuratorFramework client) throws Exception { printHelp(); List<ExampleServer> servers=Lists.newArrayList(); try { BufferedReader in=new BufferedReader(new InputStreamReader(System.in)); boolean done=false; while (!done) { System.out.print(""> ""); String line=in.readLine(); if (line == null) { break; } String command=line.trim(); String[] parts=command.split(""\\s""); if (parts.length == 0) { continue; } String operation=parts[0]; String args[]=Arrays.copyOfRange(parts 1 parts.length); if (operation.equalsIgnoreCase(""help"") || operation.equalsIgnoreCase(""?"")) { printHelp(); } else if (operation.equalsIgnoreCase(""q"") || operation.equalsIgnoreCase(""quit"")) { done=true; } else if (operation.equals(""add"")) { addInstance(args client command servers); } else if (operation.equals(""delete"")) { deleteInstance(args command servers); } else if (operation.equals(""random"")) { listRandomInstance(args serviceDiscovery providers command); } else if (operation.equals(""list"")) { listInstances(serviceDiscovery); } } } finally { for ( ExampleServer server : servers) { CloseableUtils.closeQuietly(server); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\ExampleServer.java,ExampleServer,"public  (CuratorFramework client String path String serviceName String description) throws Exception { UriSpec uriSpec=new UriSpec(""{scheme}://foo.com:{port}""); thisInstance=ServiceInstance.<InstanceDetails>builder().name(serviceName).payload(new InstanceDetails(description)).port((int)(65535 * Math.random())).uriSpec(uriSpec).build(); JsonInstanceSerializer<InstanceDetails> serializer=new JsonInstanceSerializer<InstanceDetails>(InstanceDetails.class); serviceDiscovery=ServiceDiscoveryBuilder.builder(InstanceDetails.class).client(client).basePath(path).serializer(serializer).thisInstance(thisInstance).build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\ExampleServer.java,close,@Override public void  () throws IOException { CloseableUtils.closeQuietly(serviceDiscovery); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\ExampleServer.java,getThisInstance,public ServiceInstance<InstanceDetails>  (){ return thisInstance; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\ExampleServer.java,start,public void  () throws Exception { serviceDiscovery.start(); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\InstanceDetails.java,InstanceDetails,public  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\InstanceDetails.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\discovery\InstanceDetails.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\TransactionExamples.java,transaction,"public static Collection<CuratorTransactionResult>  (CuratorFramework client) throws Exception { CuratorOp createOp=client.transactionOp().create().forPath(""/a/path"" ""some data"".getBytes()); CuratorOp setDataOp=client.transactionOp().setData().forPath(""/another/path"" ""other data"".getBytes()); CuratorOp deleteOp=client.transactionOp().delete().forPath(""/yet/another/path""); Collection<CuratorTransactionResult> results=client.transaction().forOperations(createOp setDataOp deleteOp); for ( CuratorTransactionResult result : results) { System.out.println(result.getForPath() + "" - "" + result.getType()); } return results; } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CreateClientExamples.java,createSimple,public static CuratorFramework  (String connectionString){ ExponentialBackoffRetry retryPolicy=new ExponentialBackoffRetry(1000 3); return CuratorFrameworkFactory.newClient(connectionString retryPolicy); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CreateClientExamples.java,createWithOptions,public static CuratorFramework  (String connectionString RetryPolicy retryPolicy int connectionTimeoutMs int sessionTimeoutMs){ return CuratorFrameworkFactory.builder().connectString(connectionString).retryPolicy(retryPolicy).connectionTimeoutMs(connectionTimeoutMs).sessionTimeoutMs(sessionTimeoutMs).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,create,public static void  (CuratorFramework client String path byte[] payload) throws Exception { client.create().forPath(path payload); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,createEphemeral,public static void  (CuratorFramework client String path byte[] payload) throws Exception { client.create().withMode(CreateMode.EPHEMERAL).forPath(path payload); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,createEphemeralSequential,public static String  (CuratorFramework client String path byte[] payload) throws Exception { return client.create().withProtection().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(path payload); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,delete,public static void  (CuratorFramework client String path) throws Exception { client.delete().forPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,guaranteedDelete,public static void  (CuratorFramework client String path) throws Exception { client.delete().guaranteed().forPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,setData,public static void  (CuratorFramework client String path byte[] payload) throws Exception { client.setData().forPath(path payload); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,setDataAsync,public static void  (CuratorFramework client String path byte[] payload) throws Exception { CuratorListener listener=new CuratorListener(){ @Override public void eventReceived( CuratorFramework client  CuratorEvent event) throws Exception { } } ; client.getCuratorListenable().addListener(listener); client.setData().inBackground().forPath(path payload); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,setDataAsyncWithCallback,public static void  (CuratorFramework client BackgroundCallback callback String path byte[] payload) throws Exception { client.setData().inBackground(callback).forPath(path payload); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\framework\CrudExamples.java,watchedGetChildren,public static List<String>  (CuratorFramework client String path Watcher watcher) throws Exception { return client.getChildren().usingWatcher(watcher).forPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\leader\ExampleClient.java,ExampleClient,public  (CuratorFramework client String path String name){ this.name=name; leaderSelector=new LeaderSelector(client path this); leaderSelector.autoRequeue(); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\leader\ExampleClient.java,close,@Override public void  () throws IOException { leaderSelector.close(); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\leader\ExampleClient.java,start,public void  () throws IOException { leaderSelector.start(); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\leader\ExampleClient.java,takeLeadership,"@Override public void  (CuratorFramework client) throws Exception { final int waitSeconds=(int)(5 * Math.random()) + 1; System.out.println(name + "" is now the leader. Waiting "" + waitSeconds+ "" seconds...""); System.out.println(name + "" has been leader "" +"
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\leader\LeaderSelectorExample.java,main,"public static void  (String[] args) throws Exception { System.out.println(""Create "" + CLIENT_QTY + "" clients  have each negotiate for leadership and then wait a random number of seconds before letting another leader election occur.""); System.out.println(""Notice that leader election is fair: all clients will become leader and will do so the same number of times.""); List<CuratorFramework> clients=Lists.newArrayList(); List<ExampleClient> examples=Lists.newArrayList(); TestingServer server=new TestingServer(); try { for (int i=0; i < CLIENT_QTY; ++i) { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new ExponentialBackoffRetry(1000 3)); clients.add(client); ExampleClient example=new ExampleClient(client PATH ""Client #"" + i); examples.add(example); client.start(); example.start(); } System.out.println(""Press enter/return to quit\n""); new BufferedReader(new InputStreamReader(System.in)).readLine(); } finally { System.out.println(""Shutting down...""); for ( ExampleClient exampleClient : examples) { CloseableUtils.closeQuietly(exampleClient); } for ( CuratorFramework client : clients) { CloseableUtils.closeQuietly(client); } CloseableUtils.closeQuietly(server); } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\locking\ExampleClientThatLocks.java,ExampleClientThatLocks,public  (CuratorFramework client String lockPath FakeLimitedResource resource String clientName){ this.resource=resource; this.clientName=clientName; lock=new InterProcessMutex(client lockPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\locking\ExampleClientThatLocks.java,doWork,"public void  (long time TimeUnit unit) throws Exception { if (!lock.acquire(time unit)) { throw new IllegalStateException(clientName + "" could not acquire the lock""); } try { System.out.println(clientName + "" has the lock""); resource.use(); } finally { System.out.println(clientName + "" releasing the lock""); lock.release(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\locking\FakeLimitedResource.java,use,"public void  () throws InterruptedException { if (!inUse.compareAndSet(false true)) { throw new IllegalStateException(""Needs to be used by one client at a time""); } try { Thread.sleep((long)(3 * Math.random())); } finally { inUse.set(false); } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ModeledCuratorExamples.java,createOrUpdate,public static void  (ModeledFramework<PersonModel> modeled PersonModel model){ ModeledFramework<PersonModel> atId=modeled.child(model.getId().getId()); atId.set(model); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ModeledCuratorExamples.java,readPerson,public static void  (ModeledFramework<PersonModel> modeled String id Consumer<PersonModel> receiver){ modeled.child(id).read().whenComplete((person exception) -> { if (exception != null) { exception.printStackTrace(); } else { receiver.accept(person); } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ModeledCuratorExamples.java,wrap,"public static ModeledFramework<PersonModel>  (AsyncCuratorFramework client){ JacksonModelSerializer<PersonModel> serializer=JacksonModelSerializer.build(PersonModel.class); ModelSpec<PersonModel> modelSpec=ModelSpec.builder(ZPath.parse(""/example/path"") serializer).build(); return ModeledFramework.wrap(client modelSpec); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ModeledCuratorExamplesAlt.java,createOrUpdate,public static void  (PersonModelSpec modelSpec PersonModel model){ ModeledFramework<PersonModel> resolved=modelSpec.resolved(model.getContainerType() model.getId()); resolved.set(model); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ModeledCuratorExamplesAlt.java,readPerson,public static void  (PersonModelSpec modelSpec ContainerType containerType PersonId id Consumer<PersonModel> receiver){ ModeledFramework<PersonModel> resolved=modelSpec.resolved(containerType id); resolved.read().whenComplete((person exception) -> { if (exception != null) { exception.printStackTrace(); } else { receiver.accept(person); } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ContainerType.java,ContainerType,public  (int typeId){ this.typeId=typeId; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ContainerType.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ContainerType that=(ContainerType)o; return typeId == that.typeId; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ContainerType.java,getTypeId,public int  (){ return typeId; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ContainerType.java,hashCode,@Override public int  (){ return typeId; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\ContainerType.java,toString,"@Override public String  (){ return ""ContainerType{"" + ""typeId="" + typeId + '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\locking\LockingExample.java,call,@Override public Void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new ExponentialBackoffRetry(1000 3)); try { client.start(); ExampleClientThatLocks example=new ExampleClientThatLocks(client P
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\locking\LockingExample.java,main,"public static void  (String[] args) throws Exception { final FakeLimitedResource resource=new FakeLimitedResource(); ExecutorService service=Executors.newFixedThreadPool(QTY); final TestingServer server=new TestingServer(); try { for (int i=0; i < QTY; ++i) { final int index=i; Callable<Void> task=new Callable<Void>(){ @Override public Void call() throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new ExponentialBackoffRetry(1000 3)); try { client.start(); ExampleClientThatLocks example=new ExampleClientThatLocks(client PATH resource ""Client "" + index); for (int j=0; j < REPETITIONS; ++j) { example.doWork(10 TimeUnit.SECONDS); } } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } catch ( Exception e) { e.printStackTrace(); } finally { CloseableUtils.closeQuietly(client); } return null; } } ; service.submit(task); } service.shutdown(); service.awaitTermination(10 TimeUnit.MINUTES); } finally { CloseableUtils.closeQuietly(server); } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonId.java,PersonId,"public  (String id){ this.id=Objects.requireNonNull(id ""id cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonId.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } PersonId personId=(PersonId)o; return id.equals(personId.id); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonId.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonId.java,hashCode,@Override public int  (){ return id.hashCode(); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonId.java,toString,"@Override public String  (){ return ""PersonId{"" + ""id='"" + id + '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModelSpec.java,PersonModelSpec,"public  (AsyncCuratorFramework client){ this.client=client; JacksonModelSerializer<PersonModel> serializer=JacksonModelSerializer.build(PersonModel.class); ZPath path=ZPath.parseWithIds(""/example/{id}/path/{id}""); modelSpec=ModelSpec.builder(path serializer).build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModelSpec.java,resolved,public ModeledFramework<PersonModel>  (ContainerType containerType PersonId personId){ ModelSpec<PersonModel> resolved=modelSpec.resolved(containerType.getTypeId() personId.getId()); return ModeledFramework.wrap(client resolved); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,PersonModel,"public  (PersonId id ContainerType containerType String firstName String lastName int age){ this.id=Objects.requireNonNull(id ""id cannot be null""); this.containerType=Objects.requireNonNull(containerType ""containerType cannot be null""); this.firstName=Objects.requireNonNull(firstName ""firstName cannot be null""); this.lastName=Objects.requireNonNull(lastName ""lastName cannot be null""); this.age=age; } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\messages\LocationAvailable.java,LocationAvailable,"public  (String id Priority priority String name Duration availableUntil){ super(id priority); this.name=Objects.requireNonNull(name ""name cannot be null""); this.availableUntil=Objects.requireNonNull(availableUntil ""availableUntil cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\messages\LocationAvailable.java,toString,"@Override public String  (){ return ""LocationAvailable{"" + ""name='"" + name + '\''+ ""  availableUntil=""+ availableUntil+ ""} ""+ super.toString(); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } PersonModel that=(PersonModel)o; if (age != that.age) { return false; } if (!id.equals(that.id)) { return false; } if (!co
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,getAge,public int  (){ return age; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,getContainerType,public ContainerType  (){ return containerType; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,getFirstName,public String  (){ return firstName; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,getId,public PersonId  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,getLastName,public String  (){ return lastName; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,hashCode,@Override public int  (){ int result=id.hashCode(); result=31 * result + containerType.hashCode(); result=31 * result + firstName.hashCode(); result=31 * result + lastName.hashCode(); result=31 * result + age; return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\modeled\PersonModel.java,toString,"@Override public String  (){ return ""PersonModel{"" + ""id="" + id + ""  containerType=""+ containerType+ ""  firstName='""+ firstName+ '\''+ ""  lastName='""+ lastName+ '\''+ ""  age=""+ age+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Clients.java,builder,private static <T>ModelSpecBuilder<T>  (Class<T> clazz){ return ModelSpec.builder(JacksonModelSerializer.build(clazz)).withTtl(TimeUnit.MINUTES.toMillis(10)).withCreateMode(CreateMode.PERSISTENT_WITH_TTL); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Group.java,Group,public  (String groupName){ this.groupName=groupName; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Group.java,getGroupName,public String  (){ return groupName; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Group.java,nodeName,@Override public String  (){ return groupName; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Instance.java,Instance,"public  (String id InstanceType type String hostname int port){ this.id=Objects.requireNonNull(id ""id cannot be null""); this.type=Objects.requireNonNull(type ""type cannot be null""); this.hostname=Objects.requireNonNull(hostname ""hostname cannot be null""); this.port=port; } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Instance.java,getHostname,public String  (){ return hostname; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Instance.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Instance.java,getPort,public int  (){ return port; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Instance.java,getType,public InstanceType  (){ return type; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Instance.java,nodeName,@Override public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Instance.java,toString,"@Override public String  (){ return ""Instance{"" + ""id='"" + id + '\''+ ""  type=""+ type+ ""  hostname='""+ hostname+ '\''+ ""  port=""+ port+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\messages\UserCreated.java,UserCreated,"public  (String id Priority priority String name String position){ super(id priority); this.name=Objects.requireNonNull(name ""name cannot be null""); this.position=Objects.requireNonNull(position ""position cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\messages\UserCreated.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\messages\UserCreated.java,getPosition,public String  (){ return position; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\messages\UserCreated.java,toString,"@Override public String  (){ return ""UserCreated{"" + ""name='"" + name + '\''+ ""  position='""+ position+ '\''+ ""} ""+ super.toString(); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Message.java,Message,"protected  (String id Priority priority){ this.id=Objects.requireNonNull(id ""id cannot be null""); this.priority=Objects.requireNonNull(priority ""messageType cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Message.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Message.java,getPriority,public Priority  (){ return priority; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Message.java,nodeName,@Override public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\models\Message.java,toString,"@Override public String  (){ return ""Message{"" + ""id='"" + id + '\''+ ""  priority=""+ priority+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\SubPubTest.java,SubPubTest,public  () throws Exception { this.testingServer=new TestingServer(); client=AsyncCuratorFramework.wrap(CuratorFrameworkFactory.newClient(testingServer.getConnectString() new RetryOneTime(1))); executorService=Executors.newSingleThreadScheduledExecutor(); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\SubPubTest.java,close,@Override public void  () throws IOException { executorService.shutdownNow(); try { executorService.awaitTermination(5 TimeUnit.SECONDS); } catch ( InterruptedException ignore) { Thread.currentThread().interrupt(); } userCreatedSubscribers.forEach(CachedM
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\SubPubTest.java,generalListener,"private <T>ModeledCacheListener<T>  (){ return (type path stat model) -> System.out.println(String.format(""Subscribed %s @ %s"" model.getClass().getSimpleName() path)); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\SubPubTest.java,main,public static void  (String[] args){ try (SubPubTest subPubTest=new SubPubTest()){ subPubTest.start(); TimeUnit.MINUTES.sleep(1); } catch ( Exception e) { e.printStackTrace(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\SubPubTest.java,nextId,private String  (){ return Long.toString(nextId.getAndIncrement()); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\SubPubTest.java,publishSomething,"private void  (Publisher publisher){ switch (ThreadLocalRandom.current().nextInt(6)) { case 0: { Instance instance=new Instance(nextId() random(InstanceType.values()) random(hostnames) random(ports)); System.out.println(""Publishing 1 instance""); publisher.publishInstance(instance); break; } case 1: { List<Instance> instances=IntStream.range(1 10).mapToObj(__ -> new Instance(nextId() random(InstanceType.values()) random(hostnames) random(ports))).collect(Collectors.toList()); System.out.println(String.format(""Publishing %d instances"" instances.size())); publisher.publishInstances(instances); break; } case 2: { LocationAvailable locationAvailable=new LocationAvailable(nextId() random(Priority.values()) random(locations) random(durations)); System.out.println(""Publishing 1 locationAvailable""); publisher.publishLocationAvailable(random(groups) locationAvailable); break; } case 3: { List<LocationAvailable> locationsAvailable=IntStream.range(1 10).mapToObj(__ -> new LocationAvailable(nextId() random(Priority.values()) random(locations) random(durations))).collect(Collectors.toList()); System.out.println(String.format(""Publishing %d locationsAvailable"" locationsAvailable.size())); publisher.publishLocationsAvailable(random(groups) locationsAvailable); break; } case 4: { UserCreated userCreated=new UserCreated(nextId() random(Priority.values()) random(locations) random(positions)); System.out.println(""Publishing 1 userCreated""); publisher.publishUserCreated(random(groups) userCreated); break; } case 5: { List<UserCreated> usersCreated=IntStream.range(1 10).mapToObj(__ -> new UserCreated(nextId() random(Priority.values()) random(locations) random(positions))).collect(Collectors.toList()); System.out.println(String.format(""Publishing %d usersCreated"" usersCreated.size())); publisher.publishUsersCreated(random(groups) usersCreated); break; } } } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\SubPubTest.java,random,@SafeVarargs private final <T>T  (T... tab){ int index=ThreadLocalRandom.current().nextInt(tab.length); return tab[index]; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\SubPubTest.java,start,public void  (){ client.unwrap().start(); Publisher publisher=new Publisher(client); Subscriber subscriber=new Subscriber(client); instanceSubscribers.addAll(Arrays.stream(InstanceType.values()).map(subscriber::startInstanceSubscriber).collect(Collectors.toList())); locationAvailableSubscribers.addAll(Arrays.stream(Priority.values()).flatMap(priority -> Arrays.stream(groups).map(group -> subscriber.startLocationAvailableSubscriber(group priority))).collect(Collectors.toList())); userCreatedSubscribers.addAll(Arrays.stream(Priority.values()).flatMap(priority -> Arrays.stream(groups).map(group -> subscriber.startUserCreatedSubscriber(group priority))).collect(Collectors.toList())); instanceSubscribers.forEach(s -> s.listenable().addListener(generalListener())); locationAvailableSubscribers.forEach(s -> s.listenable().addListener(generalListener())); userCreatedSubscribers.forEach(s -> s.listenable().addListener(generalListener())); executorService.scheduleAtFixedRate(() -> publishSomething(publisher) 1 1 TimeUnit.SECONDS); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Subscriber.java,Subscriber,public  (AsyncCuratorFramework client){ this.client=client; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Subscriber.java,startInstanceSubscriber,public CachedModeledFramework<Instance>  (InstanceType instanceType){ CachedModeledFramework<Instance> resolved=Clients.instanceClient.resolved(client instanceType).cached(); resolved.start(); return resolved; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Subscriber.java,startLocationAvailableSubscriber,public CachedModeledFramework<LocationAvailable>  (Group group Priority priority){ return startSubscriber(Clients.locationAvailableClient group priority); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Subscriber.java,startSubscriber,private <T extends Message>CachedModeledFramework<T>  (TypedModeledFramework2<T Group Priority> typedClient Group group Priority priority){ CachedModeledFramework<T> resolved=typedClient.resolved(client group priority).cached(); resolved.start(); return resolved; } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Subscriber.java,startUserCreatedSubscriber,public CachedModeledFramework<UserCreated>  (Group group Priority priority){ return startSubscriber(Clients.userCreatedClient group priority); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,Publisher,"public  (AsyncCuratorFramework client){ this.client=Objects.requireNonNull(client ""client cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,publishInstance,"public void  (Instance instance){ ModeledFramework<Instance> resolvedClient=Clients.instanceClient.resolved(client instance.getType()); resolvedClient.set(instance).exceptionally(e -> { log.error(""Could not publish instance: "" + instance e); return null; } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,publishInstances,"public void  (List<Instance> instances){ List<CuratorOp> operations=instances.stream().map(instance -> Clients.instanceClient.resolved(client instance.getType()).createOp(instance)).collect(Collectors.toList()); client.transaction().forOperations(operations).exceptionally(e -> { log.error(""Could not publish instances: "" + instances e); return null; } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,publishLocationAvailable,public void  (Group group LocationAvailable locationAvailable){ publishMessage(Clients.locationAvailableClient group locationAvailable); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,publishLocationsAvailable,public void  (Group group List<LocationAvailable> locationsAvailable){ publishMessages(Clients.locationAvailableClient group locationsAvailable); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,publishMessage,"private <T extends Message>void  (TypedModeledFramework2<T Group Priority> typedClient Group group T message){ ModeledFramework<T> resolvedClient=typedClient.resolved(client group message.getPriority()); resolvedClient.set(message).exceptionally(e -> { log.error(""Could not publish message: "" + message e); return null; } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,publishMessages,"private <T extends Message>void  (TypedModeledFramework2<T Group Priority> typedClient Group group List<T> messages){ List<CuratorOp> operations=messages.stream().map(message -> typedClient.resolved(client group message.getPriority()).createOp(message)).collect(Collectors.toList()); client.transaction().forOperations(operations).exceptionally(e -> { log.error(""Could not publish messages: "" + messages e); return null; } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,publishUserCreated,public void  (Group group UserCreated userCreated){ publishMessage(Clients.userCreatedClient group userCreated); } 
C:\Users\User\Desktop\Thesis\curator\curator-examples\src\main\java\pubsub\Publisher.java,publishUsersCreated,public void  (Group group List<UserCreated> usersCreated){ publishMessages(Clients.userCreatedClient group usersCreated); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\CuratorTransactionResult.java,CuratorTransactionResult,public  (OperationType type String forPath String resultPath Stat resultStat int error){ this.forPath=forPath; this.resultPath=resultPath; this.resultStat=resultStat; this.type=type; this.error=error; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\CuratorTransactionResult.java,apply,@Override public boolean  (CuratorTransactionResult result){ return (result.getType() == type) && result.getForPath().equals(forPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\CuratorTransactionResult.java,getError,public int  (){ return error; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\CuratorTransactionResult.java,getForPath,public String  (){ return forPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\CuratorTransactionResult.java,getResultPath,public String  (){ return resultPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\CuratorTransactionResult.java,getResultStat,public Stat  (){ return resultStat; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\CuratorTransactionResult.java,getType,public OperationType  (){ return type; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\CuratorTransactionResult.java,ofTypeAndPath,public static Predicate<CuratorTransactionResult>  (final OperationType type final String forPath){ return new Predicate<CuratorTransactionResult>(){ @Override public boolean apply( CuratorTransactionResult result){ return (result.getType() == type) && result.getForPath().equals(forPath); } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\TypeAndPath.java,TypeAndPath,public  (OperationType type String forPath){ this.type=type; this.forPath=forPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\TypeAndPath.java,getForPath,public String  (){ return forPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\api\transaction\TypeAndPath.java,getType,public OperationType  (){ return type; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\AuthInfo.java,AuthInfo,public  (String scheme byte[] auth){ this.scheme=scheme; this.auth=auth; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\AuthInfo.java,getAuth,public byte[]  (){ return auth; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\AuthInfo.java,getScheme,public String  (){ return scheme; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\AuthInfo.java,toString,"@Override public String  (){ return ""AuthInfo{"" + ""scheme='"" + scheme + '\''+ ""  auth=""+ Arrays.toString(auth)+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\EnsureContainers.java,EnsureContainers,public  (CuratorFramework client String path){ this.client=client; this.path=path; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\EnsureContainers.java,ensure,public void  () throws Exception { if (ensureNeeded.get()) { internalEnsure(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\EnsureContainers.java,internalEnsure,private synchronized void  () throws Exception { if (ensureNeeded.compareAndSet(true false)) { client.createContainers(path); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\EnsureContainers.java,reset,public void  (){ ensureNeeded.set(true); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,aclProvider,public Builder  (ACLProvider aclProvider){ this.aclProvider=aclProvider; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,authorization,public Builder  (List<AuthInfo> authInfos){ this.authInfos=ImmutableList.copyOf(authInfos); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,build,public CuratorFramework  (){ return new CuratorFrameworkImpl(this); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,buildTemp,public CuratorTempFramework  (long inactiveThreshold TimeUnit unit){ return new CuratorTempFrameworkImpl(this unit.toMillis(inactiveThreshold)); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,builder,public static Builder  (){ return new Builder(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,canBeReadOnly,public boolean  (){ return canBeReadOnly; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,compressionProvider,public Builder  (CompressionProvider compressionProvider){ this.compressionProvider=compressionProvider; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,connectString,public Builder  (String connectString){ ensembleProvider=new FixedEnsembleProvider(connectString); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,connectionHandlingPolicy,public Builder  (ConnectionHandlingPolicy connectionHandlingPolicy){ this.connectionHandlingPolicy=connectionHandlingPolicy; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,connectionStateErrorPolicy,public Builder  (ConnectionStateErrorPolicy connectionStateErrorPolicy){ this.connectionStateErrorPolicy=connectionStateErrorPolicy; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,connectionTimeoutMs,public Builder  (int connectionTimeoutMs){ this.connectionTimeoutMs=connectionTimeoutMs; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,defaultData,public Builder  (byte[] defaultData){ this.defaultData=(defaultData != null) ? Arrays.copyOf(defaultData defaultData.length) : null; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,dontUseContainerParents,public Builder  (){ this.useContainerParentsIfAvailable=false; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,ensembleProvider,public Builder  (EnsembleProvider ensembleProvider){ this.ensembleProvider=ensembleProvider; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getAclProvider,public ACLProvider  (){ return aclProvider; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getAuthInfos,public List<AuthInfo>  (){ return authInfos; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getAuthScheme,"@Deprecated public String  (){ int qty=(authInfos != null) ? authInfos.size() : 0; switch (qty) { case 0: { return null; } case 1: { return authInfos.get(0).scheme; } default : { throw new IllegalStateException(""More than 1 auth has been added""); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getAuthValue,@Deprecated public byte[]  (){ int qty=(authInfos != null) ? authInfos.size() : 0; switch (qty) { case 0: { return null; } case 1: { byte[] bytes=authInfos.get(0).getAuth(); return (bytes != null) ? Arrays.copyOf(bytes bytes.length) : null; } default : { 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getCompressionProvider,public CompressionProvider  (){ return compressionProvider; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getConnectionHandlingPolicy,public ConnectionHandlingPolicy  (){ return connectionHandlingPolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getConnectionStateErrorPolicy,public ConnectionStateErrorPolicy  (){ return connectionStateErrorPolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getConnectionTimeoutMs,public int  (){ return connectionTimeoutMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getDefaultData,public byte[]  (){ return defaultData; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getEnsembleProvider,public EnsembleProvider  (){ return ensembleProvider; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getLocalAddress,public static byte[]  (){ try { return InetAddress.getLocalHost().getHostAddress().getBytes(); } catch ( UnknownHostException ignore) { } return new byte[0]; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getMaxCloseWaitMs,public int  (){ return maxCloseWaitMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getNamespace,public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getRetryPolicy,public RetryPolicy  (){ return retryPolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getSchemaSet,public SchemaSet  (){ return schemaSet; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getSessionTimeoutMs,public int  (){ return sessionTimeoutMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getThreadFactory,public ThreadFactory  (){ return threadFactory; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,getZookeeperFactory,public ZookeeperFactory  (){ return zookeeperFactory; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,isZk34CompatibilityMode,public boolean  (){ return zk34CompatibilityMode; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,maxCloseWaitMs,public Builder  (int maxCloseWaitMs){ this.maxCloseWaitMs=maxCloseWaitMs; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,namespace,public Builder  (String namespace){ this.namespace=namespace; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,newClient,public static CuratorFramework  (String connectString int sessionTimeoutMs int connectionTimeoutMs RetryPolicy retryPolicy){ return builder().connectString(connectString).sessionTimeoutMs(sessionTimeoutMs).connectionTimeoutMs(connectionTimeoutMs).retryPolicy(retryPolicy).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,retryPolicy,public Builder  (RetryPolicy retryPolicy){ this.retryPolicy=retryPolicy; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,schemaSet,public Builder  (SchemaSet schemaSet){ this.schemaSet=schemaSet; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,sessionTimeoutMs,public Builder  (int sessionTimeoutMs){ this.sessionTimeoutMs=sessionTimeoutMs; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,threadFactory,public Builder  (ThreadFactory threadFactory){ this.threadFactory=threadFactory; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,useContainerParentsIfAvailable,public boolean  (){ return useContainerParentsIfAvailable; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,zk34CompatibilityMode,public Builder  (boolean mode){ this.zk34CompatibilityMode=mode; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\CuratorFrameworkFactory.java,zookeeperFactory,public Builder  (ZookeeperFactory zookeeperFactory){ this.zookeeperFactory=zookeeperFactory; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ACLing.java,ACLing, (ACLProvider aclProvider List<ACL> aclList boolean applyToParents){ this.aclProvider=aclProvider; this.aclList=(aclList != null) ? ImmutableList.copyOf(aclList) : null; this.applyToParents=applyToParents; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ACLing.java,getACLProviderForParents,InternalACLProvider  (){ return applyToParents ? this : aclProvider; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ACLing.java,getAclForPath,@Override public List<ACL>  (String path){ return getAclList(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ACLing.java,getAclList,List<ACL>  (String path){ if (aclList != null) return aclList; if (path != null) { List<ACL> localAclList=aclProvider.getAclForPath(path); if (localAclList != null) { return localAclList; } } return aclProvider.getDefaultAcl(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ACLing.java,getDefaultAcl,@Override public List<ACL>  (){ return aclProvider.getDefaultAcl(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Backgrounding.java,Backgrounding, (){ inBackground=false; context=null; this.callback=null; errorListener=null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Backgrounding.java,checkError,"void  (Throwable e Watching watching) throws Exception { if (e != null) { if (errorListener != null) { errorListener.unhandledError(""n/a"" e); } else if (e instanceof Exception) { throw (Exception)e; } else { Throwables.propagate(e); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Backgrounding.java,getCallback,BackgroundCallback  (){ return callback; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Backgrounding.java,getContext,Object  (){ return context; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Backgrounding.java,inBackground,boolean  (){ return inBackground; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Backgrounding.java,processResult,@Override public void  (CuratorFramework dummy final CuratorEvent event) throws Exception { executor.execute(new Runnable(){ @Override public void run(){ try { callback.processResult(client event); } catch ( Exception e) { ThreadUtils.checkInterrupted(e);
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Backgrounding.java,run,@Override public void  (){ try { callback.processResult(client event); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); if (e instanceof KeeperException) { client.validateConnection(client.codeToState(((KeeperException)e).code())); } client.logEr
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Backgrounding.java,wrapCallback,"private static BackgroundCallback  (final CuratorFrameworkImpl client final BackgroundCallback callback final Executor executor){ return new BackgroundCallback(){ @Override public void processResult( CuratorFramework dummy  final CuratorEvent event) throws Exception { executor.execute(new Runnable(){ @Override public void run(){ try { callback.processResult(client event); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); if (e instanceof KeeperException) { client.validateConnection(client.codeToState(((KeeperException)e).code())); } client.logError(""Background operation result handling threw exception"" e); } } } ); } } ; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\BackgroundSyncImpl.java,BackgroundSyncImpl, (CuratorFrameworkImpl client Object context){ this.client=client; this.context=context; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\BackgroundSyncImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<String> operationAndData) throws Exception { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""BackgroundSyncImpl""); final String data=operationAndData.getData(); client.getZooKeeper"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\BackgroundSyncImpl.java,processResult,@Override public void  (int rc String path Object ctx){ trace.setReturnCode(rc).setRequestBytesLength(data).commit(); CuratorEventImpl event=new CuratorEventImpl(client CuratorEventType.SYNC rc path null ctx null null null null null null); client.processB
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,CuratorEventImpl, (CuratorFrameworkImpl client CuratorEventType type int resultCode String path String name Object context Stat stat byte[] data List<String> children WatchedEvent watchedEvent List<ACL> aclList List<CuratorTransactionResult> opResults){ this.type=type; this.resultCode=resultCode; this.opResults=(opResults != null) ? ImmutableList.copyOf(opResults) : null; this.path=client.unfixForNamespace(path); this.name=name; this.context=context; this.stat=stat; this.data=data; this.children=children; this.watchedEvent=(watchedEvent != null) ? new NamespaceWatchedEvent(client watchedEvent) : null; this.aclList=(aclList != null) ? ImmutableList.copyOf(aclList) : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getACLList,@Override public List<ACL>  (){ return aclList; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getChildren,@Override public List<String>  (){ return children; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getContext,@Override public Object  (){ return context; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getData,@Override public byte[]  (){ return data; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getName,@Override public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getOpResults,@Override public List<CuratorTransactionResult>  (){ return opResults; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getPath,@Override public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getResultCode,@Override public int  (){ return resultCode; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getStat,@Override public Stat  (){ return stat; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getType,@Override public CuratorEventType  (){ return type; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,getWatchedEvent,@Override public WatchedEvent  (){ return watchedEvent; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorEventImpl.java,toString,"@Override public String  (){ return ""CuratorEventImpl{"" + ""type="" + type + ""  resultCode=""+ resultCode+ ""  path='""+ path+ '\''+ ""  name='""+ name+ '\''+ ""  children=""+ children+ ""  context=""+ context+ ""  stat=""+ stat+ ""  data=""+ Arrays.toString(data)+ ""  w"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateZK35.java,create,static void  (ZooKeeper zooKeeper String path byte data[] List<ACL> acl CreateMode createMode final CompatibleCreateCallback compatibleCallback Object ctx long ttl){ AsyncCallback.Create2Callback callback=new AsyncCallback.Create2Callback(){ @Override public void processResult( int rc  String path  Object ctx  String name  Stat stat){ compatibleCallback.processResult(rc path ctx name stat); } } ; zooKeeper.create(path data acl createMode callback ctx ttl); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateZK35.java,processResult,@Override public void  (int rc String path Object ctx String name Stat stat){ compatibleCallback.processResult(rc path ctx name stat); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,CreateBuilderImpl,public  (CuratorFrameworkImpl client CreateMode createMode Backgrounding backgrounding boolean createParentsIfNeeded boolean createParentsAsContainers boolean doProtected boolean compress boolean setDataIfExists List<ACL> aclList Stat storingStat long ttl){ this.client=client; this.createMode=createMode; this.backgrounding=backgrounding; this.createParentsIfNeeded=createParentsIfNeeded; this.createParentsAsContainers=createParentsAsContainers; this.doProtected=doProtected; this.compress=compress; this.setDataIfExists=setDataIfExists; protectedId=null; this.acling=new ACLing(client.getAclProvider() aclList); this.storingStat=storingStat; this.ttl=ttl; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,adjustPath,@VisibleForTesting String  (String path) throws Exception { if (doProtected) { ZKPaths.PathAndNode pathAndNode=ZKPaths.getPathAndNode(path); String name=getProtectedPrefix(protectedId) + pathAndNode.getNode(); path=ZKPaths.makePath(pathAndNode.getPath() n
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,apply,@Override public boolean  (String node){ return node.startsWith(protectedPrefix); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,asACLCreateModePathAndBytesable,private ACLCreateModePathAndBytesable<String>  (){ return new ACLCreateModePathAndBytesable<String>(){ @Override public PathAndBytesable<String> withACL( List<ACL> aclList){ return CreateBuilderImpl.this.withACL(aclList); } @Override public PathAndBytesable<String> withACL( List<ACL> aclList  boolean applyToParents){ CreateBuilderImpl.this.withACL(aclList applyToParents); return this; } @Override public ACLPathAndBytesable<String> withMode( CreateMode mode){ createMode=mode; return new ACLPathAndBytesable<String>(){ @Override public PathAndBytesable<String> withACL( List<ACL> aclList){ return CreateBuilderImpl.this.withACL(aclList); } @Override public PathAndBytesable<String> withACL( List<ACL> aclList  boolean applyToParents){ return CreateBuilderImpl.this.withACL(aclList applyToParents); } @Override public String forPath( String path  byte[] data) throws Exception { return CreateBuilderImpl.this.forPath(path data); } @Override public String forPath( String path) throws Exception { return CreateBuilderImpl.this.forPath(path); } } ; } @Override public String forPath( String path  byte[] data) throws Exception { return CreateBuilderImpl.this.forPath(path data); } @Override public String forPath( String path) throws Exception { return CreateBuilderImpl.this.forPath(path); } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,asACLCreateModeStatBackgroundPathAndBytesable,private ACLCreateModeStatBackgroundPathAndBytesable<String>  (){ return new ACLCreateModeStatBackgroundPathAndBytesable<String>(){ @Override public BackgroundPathAndBytesable<String> withACL( List<ACL> aclList){ return CreateBuilderImpl.this.withACL(aclList); } @Override public BackgroundPathAndBytesable<String> withACL( List<ACL> aclList  boolean applyToParents){ CreateBuilderImpl.this.withACL(aclList applyToParents); return this; } @Override public ErrorListenerPathAndBytesable<String> inBackground(){ return CreateBuilderImpl.this.inBackground(); } @Override public ErrorListenerPathAndBytesable<String> inBackground( BackgroundCallback callback  Object context  Executor executor){ return CreateBuilderImpl.this.inBackground(callback context executor); } @Override public ErrorListenerPathAndBytesable<String> inBackground( BackgroundCallback callback  Executor executor){ return CreateBuilderImpl.this.inBackground(callback executor); } @Override public ErrorListenerPathAndBytesable<String> inBackground( BackgroundCallback callback  Object context){ return CreateBuilderImpl.this.inBackground(callback context); } @Override public ErrorListenerPathAndBytesable<String> inBackground( BackgroundCallback callback){ return CreateBuilderImpl.this.inBackground(callback); } @Override public ErrorListenerPathAndBytesable<String> inBackground( Object context){ return CreateBuilderImpl.this.inBackground(context); } @Override public String forPath( String path) throws Exception { return CreateBuilderImpl.this.forPath(path); } @Override public String forPath( String path  byte[] data) throws Exception { return CreateBuilderImpl.this.forPath(path data); } @Override public ACLBackgroundPathAndBytesable<String> withMode( CreateMode mode){ return CreateBuilderImpl.this.withMode(mode); } @Override public ACLCreateModeBackgroundPathAndBytesable<String> storingStatIn( Stat stat){ storingStat=stat; return CreateBuilderImpl.this; } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,asCreateBackgroundModeACLable,private CreateBackgroundModeACLable  (){ return new CreateBackgroundModeACLable(){ @Override public BackgroundPathAndBytesable<String> withACL( List<ACL> aclList){ return CreateBuilderImpl.this.withACL(aclList); } @Override public BackgroundPathAndBytesable<String> withACL( List<ACL> aclList  boolean applyToParents){ return CreateBuilderImpl.this.withACL(aclList applyToParents); } @Override public ACLBackgroundPathAndBytesable<String> withMode( CreateMode mode){ return CreateBuilderImpl.this.withMode(mode); } @Override public String forPath( String path) throws Exception { return CreateBuilderImpl.this.forPath(path); } @Override public String forPath( String path  byte[] data) throws Exception { return CreateBuilderImpl.this.forPath(path data); } @Override public ErrorListenerPathAndBytesable<String> inBackground( BackgroundCallback callback  Object context  Executor executor){ return CreateBuilderImpl.this.inBackground(callback context executor); } @Override public ErrorListenerPathAndBytesable<String> inBackground( BackgroundCallback callback  Executor executor){ return CreateBuilderImpl.this.inBackground(callback executor); } @Override public ErrorListenerPathAndBytesable<String> inBackground( BackgroundCallback callback  Object context){ return CreateBuilderImpl.this.inBackground(callback context); } @Override public ErrorListenerPathAndBytesable<String> inBackground( BackgroundCallback callback){ return CreateBuilderImpl.this.inBackground(callback); } @Override public ErrorListenerPathAndBytesable<String> inBackground( Object context){ return CreateBuilderImpl.this.inBackground(context); } @Override public ErrorListenerPathAndBytesable<String> inBackground(){ return CreateBuilderImpl.this.inBackground(); } @Override public ACLPathAndBytesable<String> withProtectedEphemeralSequential(){ return CreateBuilderImpl.this.withProtectedEphemeralSequential(); } @Override public ACLCreateModePathAndBytesable<String> creatingParentsIfNeeded(){ createParentsIfNeeded=true; return asACLCreateModePathAndBytesable(); } @Override public ACLCreateModePathAndBytesable<String> creatingParentContainersIfNeeded(){ setCreateParentsAsContainers(); return asACLCreateModePathAndBytesable(); } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,asTransactionCreateBuilder,<T>TransactionCreateBuilder<T>  (final T context final CuratorMultiTransactionRecord transaction){ return new TransactionCreateBuilder<T>(){ @Override public PathAndBytesable<T> withACL( List<ACL> aclList){ return withACL(aclList false); } @Override public PathAndBytesable<T> withACL( List<ACL> aclList  boolean applyToParents){ CreateBuilderImpl.this.withACL(aclList applyToParents); return this; } @Override public TransactionCreateBuilder2<T> withTtl( long ttl){ CreateBuilderImpl.this.withTtl(ttl); return this; } @Override public ACLPathAndBytesable<T> withMode( CreateMode mode){ CreateBuilderImpl.this.withMode(mode); return this; } @Override public ACLCreateModePathAndBytesable<T> compressed(){ CreateBuilderImpl.this.compressed(); return this; } @Override public T forPath( String path) throws Exception { return forPath(path client.getDefaultData()); } @Override public T forPath( String path  byte[] data) throws Exception { if (compress) { data=client.getCompressionProvider().compress(path data); } String fixedPath=client.fixForNamespace(path); if (client.isZk34CompatibilityMode()) { transaction.add(Op.create(fixedPath data acling.getAclList(path) createMode) OperationType.CREATE path); } else { transaction.add(Op.create(fixedPath data acling.getAclList(path) createMode ttl) OperationType.CREATE path); } return context; } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,backgroundCreateParentsThenNode,static <T>void  (final CuratorFrameworkImpl client final OperationAndData<T> mainOperationAndData final String path Backgrounding backgrounding final InternalACLProvider aclProvider final boolean createParentsAsContainers){ BackgroundOperation<T> operation=new BackgroundOperation<T>(){ @Override public void performBackgroundOperation( OperationAndData<T> dummy) throws Exception { try { ZKPaths.mkdirs(client.getZooKeeper() path false aclProvider createParentsAsContainers); } catch ( KeeperException e) { if (!RetryLoop.isRetryException(e)) { throw e; } } client.queueOperation(mainOperationAndData); } } ; OperationAndData<T> parentOperation=new OperationAndData<>(operation mainOperationAndData.getData() null null backgrounding.getContext() null); client.queueOperation(parentOperation); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,backgroundSetData,private void  (final CuratorFrameworkImpl client final OperationAndData<PathAndBytes> mainOperationAndData final String path final Backgrounding backgrounding){ final AsyncCallback.StatCallback statCallback=new AsyncCallback.StatCallback(){ @Override public void processResult( int rc  String path  Object ctx  Stat stat){ if (rc == KeeperException.Code.NONODE.intValue()) { client.queueOperation(mainOperationAndData); } else { sendBackgroundResponse(rc path ctx path stat mainOperationAndData); } } } ; BackgroundOperation<PathAndBytes> operation=new BackgroundOperation<PathAndBytes>(){ @Override public void performBackgroundOperation( OperationAndData<PathAndBytes> op) throws Exception { try { client.getZooKeeper().setData(path mainOperationAndData.getData().getData() setDataIfExistsVersion statCallback backgrounding.getContext()); } catch ( KeeperException e) { } } } ; client.queueOperation(new OperationAndData<>(operation null null null null null)); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,call,@Override public String  () throws Exception { String foundNode=null; try { final ZKPaths.PathAndNode pathAndNode=ZKPaths.getPathAndNode(path); List<String> children=client.getZooKeeper().getChildren(pathAndNode.getPath() false); foundNode=findNode(childr
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,callPerformBackgroundOperation,@Override void  () throws Exception { boolean callSuper=true; boolean localFirstTime=firstTime.getAndSet(false) && !debugForceFindProtectedNode; if (!localFirstTime && doProtected) { debugForceFindProtectedNode=false; String createdPath=null; try { create
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,compressed,@Override public CreateBackgroundModeStatACLable  (){ compress=true; return new CreateBackgroundModeStatACLable(){ @Override public CreateBackgroundModeACLable storingStatIn( Stat stat){ storingStat=stat; return asCreateBackgroundModeACLable(); } @Overrid
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,creatingParentContainersIfNeeded,@Override public ACLCreateModePathAndBytesable<String>  (){ setCreateParentsAsContainers(); return asACLCreateModePathAndBytesable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,creatingParentsIfNeeded,@Override public ACLCreateModePathAndBytesable<String>  (){ createParentsIfNeeded=true; return asACLCreateModePathAndBytesable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,findNode,static String  (final List<String> children final String path final String protectedId){ final String protectedPrefix=getProtectedPrefix(protectedId); String foundNode=Iterables.find(children new Predicate<String>(){ @Override public boolean apply( String node){ return node.startsWith(protectedPrefix); } }  null); if (foundNode != null) { foundNode=ZKPaths.makePath(path foundNode); } return foundNode; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,findProtectedNodeInForeground,"private String  (final String path) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""CreateBuilderImpl-findProtectedNodeInForeground""); String returnPath=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<String>(){ @Override public String call() throws Exception { String foundNode=null; try { final ZKPaths.PathAndNode pathAndNode=ZKPaths.getPathAndNode(path); List<String> children=client.getZooKeeper().getChildren(pathAndNode.getPath() false); foundNode=findNode(children pathAndNode.getPath() protectedId); } catch ( KeeperException.NoNodeException ignore) { } return foundNode; } } ); trace.setPath(path).commit(); return returnPath; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,forPath,@Override public String  (String path byte[] data) throws Exception { return CreateBuilderImpl.this.forPath(path data); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,getProtectedPrefix,"private static String  (String protectedId){ return PROTECTED_PREFIX + protectedId + ""-""; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,inBackground,@Override public ErrorListenerPathAndBytesable<String>  (Object context){ return CreateBuilderImpl.this.inBackground(context); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,orSetData,@Override public CreateBuilder2  (int version){ setDataIfExists=true; setDataIfExistsVersion=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,pathInBackground,"private void  (final String path final byte[] data final String givenPath){ final AtomicBoolean firstTime=new AtomicBoolean(true); OperationAndData<PathAndBytes> operationAndData=new OperationAndData<PathAndBytes>(this new PathAndBytes(path data) backgrounding.getCallback() new OperationAndData.ErrorCallback<PathAndBytes>(){ public void retriesExhausted( OperationAndData<PathAndBytes> operationAndData){ if (doProtected) { new FindAndDeleteProtectedNodeInBackground(client ZKPaths.getPathAndNode(path).getPath() protectedId).execute(); protectedId=UUID.randomUUID().toString(); } } }  backgrounding.getContext() null){ @Override void callPerformBackgroundOperation() throws Exception { boolean callSuper=true; boolean localFirstTime=firstTime.getAndSet(false) && !debugForceFindProtectedNode; if (!localFirstTime && doProtected) { debugForceFindProtectedNode=false; String createdPath=null; try { createdPath=findProtectedNodeInForeground(path); } catch ( KeeperException.ConnectionLossException e) { sendBackgroundResponse(KeeperException.Code.CONNECTIONLOSS.intValue() path backgrounding.getContext() null null this); callSuper=false; } if (createdPath != null) { try { sendBackgroundResponse(KeeperException.Code.OK.intValue() createdPath backgrounding.getContext() createdPath null this); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); client.logError(""Processing protected create for path: "" + givenPath e); } callSuper=false; } } if (failNextCreateForTesting) { pathInForeground(path data acling.getAclList(path)); failNextCreateForTesting=false; throw new KeeperException.ConnectionLossException(); } if (callSuper) { super.callPerformBackgroundOperation(); } } } ; client.processBackgroundOperation(operationAndData null); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,pathInForeground,"private String  (final String path final byte[] data final List<ACL> aclList) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""CreateBuilderImpl-Foreground""); final AtomicBoolean firstTime=new AtomicBoolean(true); String returnPath=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<String>(){ @Override public String call() throws Exception { boolean localFirstTime=firstTime.getAndSet(false) && !debugForceFindProtectedNode; String createdPath=null; if (!localFirstTime && doProtected) { debugForceFindProtectedNode=false; createdPath=findProtectedNodeInForeground(path); } if (createdPath == null) { try { if (client.isZk34CompatibilityMode()) { createdPath=client.getZooKeeper().create(path data aclList createMode); } else { createdPath=client.getZooKeeper().create(path data aclList createMode storingStat ttl); } } catch ( KeeperException.NoNodeException e) { if (createParentsIfNeeded) { ZKPaths.mkdirs(client.getZooKeeper() path false acling.getACLProviderForParents() createParentsAsContainers); if (client.isZk34CompatibilityMode()) { createdPath=client.getZooKeeper().create(path data acling.getAclList(path) createMode); } else { createdPath=client.getZooKeeper().create(path data acling.getAclList(path) createMode storingStat ttl); } } else { throw e; } } catch ( KeeperException.NodeExistsException e) { if (setDataIfExists) { Stat setStat=client.getZooKeeper().setData(path data setDataIfExistsVersion); if (storingStat != null) { DataTree.copyStat(setStat storingStat); } createdPath=path; } else { throw e; } } } if (failNextCreateForTesting) { failNextCreateForTesting=false; throw new KeeperException.ConnectionLossException(); } return createdPath; } } ); trace.setRequestBytesLength(data).setPath(path).commit(); return returnPath; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,performBackgroundOperation,@Override public void  (OperationAndData<PathAndBytes> op) throws Exception { try { client.getZooKeeper().setData(path mainOperationAndData.getData().getData() setDataIfExistsVersion statCallback backgrounding.getContext()); } catch ( KeeperException e) {
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx Stat stat){ if (rc == KeeperException.Code.NONODE.intValue()) { client.queueOperation(mainOperationAndData); } else { sendBackgroundResponse(rc path ctx path stat mainOperationAndData); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,protectedPathInForeground,private String  (String adjustedPath byte[] data List<ACL> aclList) throws Exception { try { return pathInForeground(adjustedPath data aclList); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); if ((e instanceof KeeperException.ConnectionLossException || !(e instanceof KeeperException)) && protectedId != null) { new FindAndDeleteProtectedNodeInBackground(client ZKPaths.getPathAndNode(adjustedPath).getPath() protectedId).execute(); protectedId=UUID.randomUUID().toString(); } throw e; } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,retriesExhausted,public void  (OperationAndData<PathAndBytes> operationAndData){ if (doProtected) { new FindAndDeleteProtectedNodeInBackground(client ZKPaths.getPathAndNode(path).getPath() protectedId).execute(); protectedId=UUID.randomUUID().toString(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,sendBackgroundResponse,private void  (int rc String path Object ctx String name Stat stat OperationAndData<PathAndBytes> operationAndData){ path=client.unfixForNamespace(path); name=client.unfixForNamespace(name); CuratorEvent event=new CuratorEventImpl(client CuratorEventType.CREATE rc path name ctx stat null null null null null); client.processBackgroundOperation(operationAndData event); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,setCreateParentsAsContainers,private void  (){ if (client.useContainerParentsIfAvailable()) { createParentsAsContainers=true; } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,setProtected,private void  (){ doProtected=true; protectedId=UUID.randomUUID().toString(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,setSetDataIfExistsVersion,public void  (int version){ this.setDataIfExistsVersion=version; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionImpl.java,CuratorMultiTransactionImpl,public  (CuratorFrameworkImpl client Backgrounding backgrounding){ this.client=client; this.backgrounding=backgrounding; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionImpl.java,call,@Override public List<OpResult>  () throws Exception { return client.getZooKeeper().multi(record); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionImpl.java,forOperations,"@Override public List<CuratorTransactionResult>  (List<CuratorOp> operations) throws Exception { operations=Preconditions.checkNotNull(operations ""operations cannot be null""); Preconditions.checkArgument(!operations.isEmpty() ""operations list cannot be em"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionImpl.java,forOperationsInForeground,"private List<CuratorTransactionResult>  (final CuratorMultiTransactionRecord record) throws Exception { TimeTrace trace=client.getZookeeperClient().startTracer(""CuratorMultiTransactionImpl-Foreground""); List<OpResult> responseData=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<List<OpResult>>(){ @Override public List<OpResult> call() throws Exception { return client.getZooKeeper().multi(record); } } ); trace.commit(); return CuratorTransactionImpl.wrapResults(client responseData record); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionImpl.java,inBackground,@Override public ErrorListenerMultiTransactionMain  (BackgroundCallback callback Object context Executor executor){ backgrounding=new Backgrounding(client callback context executor); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<CuratorMultiTransactionRecord> operationAndData) throws Exception { try { final TimeTrace trace=client.getZookeeperClient().startTracer(""CuratorMultiTransactionImpl-Background""); AsyncCallback.MultiCallback c"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionImpl.java,processResult,@Override public void  (int rc String path Object ctx List<OpResult> opResults){ trace.commit(); List<CuratorTransactionResult> curatorResults=(opResults != null) ? CuratorTransactionImpl.wrapResults(client opResults operationAndData.getData()) : null; Cu
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionImpl.java,withUnhandledErrorListener,@Override public CuratorMultiTransactionMain  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,storingStatIn,@Override public ACLCreateModeBackgroundPathAndBytesable<String>  (Stat stat){ storingStat=stat; return CreateBuilderImpl.this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,withACL,@Override public BackgroundPathAndBytesable<String>  (List<ACL> aclList boolean applyToParents){ CreateBuilderImpl.this.withACL(aclList applyToParents); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,withMode,@Override public ACLBackgroundPathAndBytesable<String>  (CreateMode mode){ return CreateBuilderImpl.this.withMode(mode); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,withProtectedEphemeralSequential,@Override public ACLPathAndBytesable<String>  (){ return CreateBuilderImpl.this.withProtectedEphemeralSequential(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,withProtection,@Override public ACLCreateModeBackgroundPathAndBytesable<String>  (){ return CreateBuilderImpl.this.withProtection(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,withTtl,@Override public TransactionCreateBuilder2<T>  (long ttl){ CreateBuilderImpl.this.withTtl(ttl); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CreateBuilderImpl.java,withUnhandledErrorListener,@Override public PathAndBytesable<String>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,CuratorFrameworkImpl,protected  (CuratorFrameworkImpl parent){ client=parent.client; listeners=parent.listeners; unhandledErrorListeners=parent.unhandledErrorListeners; threadFactory=parent.threadFactory; maxCloseWaitMs=parent.maxCloseWaitMs; backgroundOperations=parent.backgroundOperations; forcedSleepOperations=parent.forcedSleepOperations; connectionStateManager=parent.connectionStateManager; defaultData=parent.defaultData; failedDeleteManager=parent.failedDeleteManager; failedRemoveWatcherManager=parent.failedRemoveWatcherManager; compressionProvider=parent.compressionProvider; aclProvider=parent.aclProvider; namespaceFacadeCache=parent.namespaceFacadeCache; namespace=new NamespaceImpl(this null); state=parent.state; authInfos=parent.authInfos; useContainerParentsIfAvailable=parent.useContainerParentsIfAvailable; connectionStateErrorPolicy=parent.connectionStateErrorPolicy; internalConnectionHandler=parent.internalConnectionHandler; schemaSet=parent.schemaSet; zk34CompatibilityMode=parent.zk34CompatibilityMode; ensembleTracker=null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,addStateChange,void  (ConnectionState newConnectionState){ connectionStateManager.addStateChange(newConnectionState); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,apply,"@Override public Void  (CuratorListener listener){ try { OperationTrace trace=client.startAdvancedTracer(""EventListener""); listener.eventReceived(CuratorFrameworkImpl.this curatorEvent); trace.commit(); } catch ( Exception e) { ThreadUtils.checkInterrupte"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,backgroundOperationsLoop,"private void  (){ try { while (state.get() == CuratorFrameworkState.STARTED) { OperationAndData<?> operationAndData; try { operationAndData=backgroundOperations.take(); if (debugListener != null) { debugListener.listen(operationAndData); } performBackgroundOperation(operationAndData); } catch ( InterruptedException e) { } } } finally { log.info(""backgroundOperationsLoop exiting""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,blockUntilConnected,@Override public void  () throws InterruptedException { blockUntilConnected(0 null); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,buildAuths,private List<AuthInfo>  (CuratorFrameworkFactory.Builder builder){ ImmutableList.Builder<AuthInfo> builder1=ImmutableList.builder(); if (builder.getAuthInfos() != null) { builder1.addAll(builder.getAuthInfos()); } return builder1.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,call,@Override public Object  () throws Exception { backgroundOperationsLoop(); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,checkBackgroundRetry,"@SuppressWarnings({""ThrowableResultOfMethodCallIgnored""}) private <DATA_TYPE>boolean  (OperationAndData<DATA_TYPE> operationAndData CuratorEvent event){ boolean doRetry=false; if (client.getRetryPolicy().allowRetry(operationAndData.getThenIncrementRetryCo"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,checkExists,"@Override public ExistsBuilder  (){ Preconditions.checkState(getState() == CuratorFrameworkState.STARTED ""instance must be started before calling this method""); return new ExistsBuilderImpl(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,checkInstanceIndex,void  (){ long instanceIndex=client.getInstanceIndex(); long newInstanceIndex=currentInstanceIndex.getAndSet(instanceIndex); if ((newInstanceIndex >= 0) && (instanceIndex != newInstanceIndex)) { connectionStateManager.addStateChange(ConnectionState.LOST); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,close,"@Override public void  (){ log.debug(""Closing""); if (state.compareAndSet(CuratorFrameworkState.STARTED CuratorFrameworkState.STOPPED)) { listeners.forEach(new Function<CuratorListener Void>(){ @Override public Void apply( CuratorListener listener){ Curato"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,codeToState,Watcher.Event.KeeperState  (KeeperException.Code code){ switch (code) { case AUTHFAILED: case NOAUTH: { return Watcher.Event.KeeperState.AuthFailed; } case CONNECTIONLOSS: case OPERATIONTIMEOUT: { return Watcher.Event.KeeperState.Disconnected; } case SESSIONEXPIRED: { return Watcher.Event.KeeperState.Expired; } case OK: case SESSIONMOVED: { return Watcher.Event.KeeperState.SyncConnected; } } return Watcher.Event.KeeperState.fromInt(-1); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,create,"@Override public CreateBuilder  (){ Preconditions.checkState(getState() == CuratorFrameworkState.STARTED ""instance must be started before calling this method""); return new CreateBuilderImpl(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,createContainers,"@Override public void  (String path) throws Exception { checkExists().creatingParentContainersIfNeeded().forPath(ZKPaths.makePath(path ""foo"")); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,delete,"@Override public DeleteBuilder  (){ Preconditions.checkState(getState() == CuratorFrameworkState.STARTED ""instance must be started before calling this method""); return new DeleteBuilderImpl(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,fixForNamespace,String  (String path boolean isSequential){ return namespace.fixForNamespace(path isSequential); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getACL,"@Override public GetACLBuilder  (){ Preconditions.checkState(getState() == CuratorFrameworkState.STARTED ""instance must be started before calling this method""); return new GetACLBuilderImpl(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getAclProvider,ACLProvider  (){ return aclProvider; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getChildren,"@Override public GetChildrenBuilder  (){ Preconditions.checkState(getState() == CuratorFrameworkState.STARTED ""instance must be started before calling this method""); return new GetChildrenBuilderImpl(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getCompressionProvider,CompressionProvider  (){ return compressionProvider; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getConfig,"@Override public GetConfigBuilder  (){ Preconditions.checkState(!isZk34CompatibilityMode() ""reconfig/config APIs are not support when running in ZooKeeper 3.4 compatibility mode""); return new GetConfigBuilderImpl(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getConnectionStateErrorPolicy,@Override public ConnectionStateErrorPolicy  (){ return connectionStateErrorPolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getConnectionStateListenable,@Override public Listenable<ConnectionStateListener>  (){ return connectionStateManager.getListenable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getCuratorListenable,@Override public Listenable<CuratorListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getCurrentConfig,@Override public QuorumVerifier  (){ return (ensembleTracker != null) ? ensembleTracker.getCurrentConfig() : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getData,"@Override public GetDataBuilder  (){ Preconditions.checkState(getState() == CuratorFrameworkState.STARTED ""instance must be started before calling this method""); return new GetDataBuilderImpl(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getDefaultData,byte[]  (){ return defaultData; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getEnsembleTracker,EnsembleTracker  (){ return ensembleTracker; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getFailedDeleteManager,FailedDeleteManager  (){ return failedDeleteManager; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getFailedRemoveWatcherManager,FailedRemoveWatchManager  (){ return failedRemoveWatcherManager; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getNamespace,"@Override public String  (){ String str=namespace.getNamespace(); return (str != null) ? str : """"; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getNamespaceFacadeCache,NamespaceFacadeCache  (){ return namespaceFacadeCache; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getSchemaSet,@Override public SchemaSet  (){ return schemaSet; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getState,@Override public CuratorFrameworkState  (){ return state.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getThreadFactory,"private ThreadFactory  (CuratorFrameworkFactory.Builder builder){ ThreadFactory threadFactory=builder.getThreadFactory(); if (threadFactory == null) { threadFactory=ThreadUtils.newThreadFactory(""Framework""); } return threadFactory; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getUnhandledErrorListenable,@Override public Listenable<UnhandledErrorListener>  (){ return unhandledErrorListeners; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getWatcherRemovalManager,WatcherRemovalManager  (){ return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getZooKeeper,ZooKeeper  () throws Exception { return client.getZooKeeper(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,getZookeeperClient,@Override public CuratorZookeeperClient  (){ return client; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,handleBackgroundOperationException,"private <DATA_TYPE>void  (OperationAndData<DATA_TYPE> operationAndData Throwable e){ do { if ((operationAndData != null) && RetryLoop.isRetryException(e)) { if (!Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES)) { log.debug(""Retry-able exception received"" e); } if (client.getRetryPolicy().allowRetry(operationAndData.getThenIncrementRetryCount() operationAndData.getElapsedTimeMs() operationAndData)) { if (!Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES)) { log.debug(""Retrying operation""); } backgroundOperations.offer(operationAndData); break; } else { if (!Boolean.getBoolean(DebugUtils.PROPERTY_DONT_LOG_CONNECTION_ISSUES)) { log.debug(""Retry policy did not allow retry""); } if (operationAndData.getErrorCallback() != null) { operationAndData.getErrorCallback().retriesExhausted(operationAndData); } } } logError(""Background exception was not retry-able or retry gave up"" e); } while (false); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,inTransaction,"@Override public CuratorTransaction  (){ Preconditions.checkState(getState() == CuratorFrameworkState.STARTED ""instance must be started before calling this method""); return new CuratorTransactionImpl(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,internalSync,protected void  (CuratorFrameworkImpl impl String path Object context){ BackgroundOperation<String> operation=new BackgroundSyncImpl(impl context); performBackgroundOperation(new OperationAndData<String>(operation path null null context null)); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,isStarted,@Override @Deprecated public boolean  (){ return state.get() == CuratorFrameworkState.STARTED; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorFrameworkImpl.java,isZk34CompatibilityMode,@Override public boolean  (){ return zk34CompatibilityMode; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionRecord.java,add,void  (Op op OperationType type String forPath){ super.add(op); metadata.add(new TypeAndPath(type forPath)); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionRecord.java,addToDigest,void  (MessageDigest digest){ for ( Op op : this) { digest.update(op.getPath().getBytes()); digest.update(Integer.toString(op.getType()).getBytes()); digest.update(op.toRequestRecord().toString().getBytes()); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionRecord.java,getMetadata,TypeAndPath  (int index){ return metadata.get(index); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorMultiTransactionRecord.java,metadataSize,int  (){ return metadata.size(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,CuratorTempFrameworkImpl,public  (CuratorFrameworkFactory.Builder factory long inactiveThresholdMs){ this.factory=factory; this.inactiveThresholdMs=inactiveThresholdMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,checkInactive,private synchronized void  (){ long elapsed=System.currentTimeMillis() - lastAccess; if (elapsed >= inactiveThresholdMs) { closeClient(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,close,@Override public void  (){ closeClient(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,closeClient,private synchronized void  (){ if (cleanup != null) { cleanup.shutdownNow(); cleanup=null; } if (client != null) { CloseableUtils.closeQuietly(client); client=null; } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,getCleanup,@VisibleForTesting ScheduledExecutorService  (){ return cleanup; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,getClient,@VisibleForTesting CuratorFrameworkImpl  (){ return client; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,getData,@Override public TempGetDataBuilder  () throws Exception { openConnectionIfNeeded(); return new TempGetDataBuilderImpl(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,inTransaction,@Override public CuratorTransaction  () throws Exception { openConnectionIfNeeded(); return new CuratorTransactionImpl(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,openConnectionIfNeeded,"private synchronized void  () throws Exception { if (client == null) { client=(CuratorFrameworkImpl)factory.build(); client.start(); } if (cleanup == null) { ThreadFactory threadFactory=factory.getThreadFactory(); if (threadFactory == null) { threadFactory=ThreadUtils.newGenericThreadFactory(""CuratorTempFrameworkImpl""); } cleanup=Executors.newScheduledThreadPool(1 threadFactory); Runnable command=new Runnable(){ @Override public void run(){ checkInactive(); } } ; cleanup.scheduleAtFixedRate(command inactiveThresholdMs inactiveThresholdMs TimeUnit.MILLISECONDS); } updateLastAccess(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,run,@Override public void  (){ checkInactive(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTempFrameworkImpl.java,updateLastAccess,@VisibleForTesting synchronized void  (){ lastAccess=System.currentTimeMillis(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DefaultACLProvider.java,getAclForPath,@Override public List<ACL>  (String path){ return ZooDefs.Ids.OPEN_ACL_UNSAFE; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DefaultACLProvider.java,getDefaultAcl,@Override public List<ACL>  (){ return ZooDefs.Ids.OPEN_ACL_UNSAFE; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,CuratorTransactionImpl, (CuratorFrameworkImpl client){ this.client=client; transaction=new CuratorMultiTransactionRecord(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,and,@Override public CuratorTransactionFinal  (){ return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,call,@Override public List<OpResult>  () throws Exception { return doOperation(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,check,"@Override public TransactionCheckBuilder<CuratorTransactionBridge>  (){ Preconditions.checkState(!isCommitted ""transaction already committed""); CuratorTransactionBridge asBridge=this; return makeTransactionCheckBuilder(client asBridge transaction); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,commit,"@Override public Collection<CuratorTransactionResult>  () throws Exception { Preconditions.checkState(!isCommitted ""transaction already committed""); isCommitted=true; List<OpResult> resultList=RetryLoop.callWithRetry(client.getZookeeperClient() new Callab"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,create,"@Override public TransactionCreateBuilder<CuratorTransactionBridge>  (){ Preconditions.checkState(!isCommitted ""transaction already committed""); CuratorTransactionBridge asBridge=this; return new CreateBuilderImpl(client).asTransactionCreateBuilder(asBrid"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,delete,"@Override public TransactionDeleteBuilder<CuratorTransactionBridge>  (){ Preconditions.checkState(!isCommitted ""transaction already committed""); CuratorTransactionBridge asBridge=this; return new DeleteBuilderImpl(client).asTransactionDeleteBuilder(asBrid"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,doOperation,private List<OpResult>  () throws Exception { List<OpResult> opResults=client.getZooKeeper().multi(transaction); if (opResults.size() > 0) { OpResult firstResult=opResults.get(0); if (firstResult.getType() == ZooDefs.OpCode.error) { OpResult.ErrorResult error=(OpResult.ErrorResult)firstResult; KeeperException.Code code=KeeperException.Code.get(error.getErr()); if (code == null) { code=KeeperException.Code.UNIMPLEMENTED; } throw KeeperException.create(code); } } return opResults; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,forPath,@Override public T  (String path) throws Exception { String fixedPath=client.fixForNamespace(path); transaction.add(Op.check(fixedPath version) OperationType.CHECK path); return context; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,makeCuratorResult,static CuratorTransactionResult  (CuratorFrameworkImpl client OpResult opResult TypeAndPath metadata){ String resultPath=null; Stat resultStat=null; int error=0; switch (opResult.getType()) { default : { break; } case ZooDefs.OpCode.create: { OpResult.CreateResult createResult=(OpResult.CreateResult)opResult; resultPath=client.unfixForNamespace(createResult.getPath()); break; } case ZooDefs.OpCode.setData: { OpResult.SetDataResult setDataResult=(OpResult.SetDataResult)opResult; resultStat=setDataResult.getStat(); break; } case ZooDefs.OpCode.error: { OpResult.ErrorResult errorResult=(OpResult.ErrorResult)opResult; error=errorResult.getErr(); break; } } return new CuratorTransactionResult(metadata.getType() metadata.getForPath() resultPath resultStat error); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,makeTransactionCheckBuilder,static <T>TransactionCheckBuilder<T>  (final CuratorFrameworkImpl client final T context final CuratorMultiTransactionRecord transaction){ return new TransactionCheckBuilder<T>(){ private int version=-1; @Override public T forPath( String path) throws Exception { String fixedPath=client.fixForNamespace(path); transaction.add(Op.check(fixedPath version) OperationType.CHECK path); return context; } @Override public Pathable<T> withVersion( int version){ this.version=version; return this; } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,setData,"@Override public TransactionSetDataBuilder<CuratorTransactionBridge>  (){ Preconditions.checkState(!isCommitted ""transaction already committed""); CuratorTransactionBridge asBridge=this; return new SetDataBuilderImpl(client).asTransactionSetDataBuilder(asB"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,withVersion,@Override public Pathable<T>  (int version){ this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\CuratorTransactionImpl.java,wrapResults,static List<CuratorTransactionResult>  (CuratorFrameworkImpl client List<OpResult> resultList CuratorMultiTransactionRecord transaction){ ImmutableList.Builder<CuratorTransactionResult> builder=ImmutableList.builder(); for (int i=0; i < resultList.size(); ++i) { OpResult opResult=resultList.get(i); TypeAndPath metadata=transaction.getMetadata(i); CuratorTransactionResult curatorResult=makeCuratorResult(client opResult metadata); builder.add(curatorResult); } return builder.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,DeleteBuilderImpl,public  (CuratorFrameworkImpl client int version Backgrounding backgrounding boolean deletingChildrenIfNeeded boolean guaranteed boolean quietly){ this.client=client; this.version=version; this.backgrounding=backgrounding; this.deletingChildrenIfNeeded=deletingChildrenIfNeeded; this.guaranteed=guaranteed; this.quietly=quietly; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,asTransactionDeleteBuilder,<T>TransactionDeleteBuilder<T>  (final T context final CuratorMultiTransactionRecord transaction){ return new TransactionDeleteBuilder<T>(){ @Override public T forPath( String path) throws Exception { String fixedPath=client.fixForNamespace(path); transaction.add(Op.delete(fixedPath version) OperationType.DELETE path); return context; } @Override public Pathable<T> withVersion( int version){ DeleteBuilderImpl.this.withVersion(version); return this; } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,backgroundDeleteChildrenThenNode,private void  (final OperationAndData<String> mainOperationAndData){ BackgroundOperation<String> operation=new BackgroundOperation<String>(){ @Override public void performBackgroundOperation( OperationAndData<String> dummy) throws Exception { try { ZKPaths.deleteChildren(client.getZooKeeper() mainOperationAndData.getData() false); } catch ( KeeperException e) { } client.queueOperation(mainOperationAndData); } } ; OperationAndData<String> parentOperation=new OperationAndData<String>(operation mainOperationAndData.getData() null null backgrounding.getContext() null); client.queueOperation(parentOperation); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,call,@Override public Void  () throws Exception { try { client.getZooKeeper().delete(path version); } catch ( KeeperException.NoNodeException e) { if (!quietly) { throw e; } } catch ( KeeperException.NotEmptyException e) { if (deletingChildrenIfNeeded) { ZKPat
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,deletingChildrenIfNeeded,@Override public BackgroundVersionable  (){ deletingChildrenIfNeeded=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,forPath,@Override public Void  (String path) throws Exception { client.getSchemaSet().getSchema(path).validateDelete(path); final String unfixedPath=path; path=client.fixForNamespace(path); if (backgrounding.inBackground()) { OperationAndData.ErrorCallback<String
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,getVersion,protected int  (){ return version; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,guaranteed,@Override public ChildrenDeletable  (){ guaranteed=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,inBackground,@Override public ErrorListenerPathable<Void>  (Object context){ backgrounding=new Backgrounding(context); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,pathInForeground,"private void  (final String path String unfixedPath) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""DeleteBuilderImpl-Foreground""); try { RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<Void>(){ @Override public Void call() throws Exception { try { client.getZooKeeper().delete(path version); } catch ( KeeperException.NoNodeException e) { if (!quietly) { throw e; } } catch ( KeeperException.NotEmptyException e) { if (deletingChildrenIfNeeded) { ZKPaths.deleteChildren(client.getZooKeeper() path true); } else { throw e; } } return null; } } ); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); if ((RetryLoop.isRetryException(e) || (e instanceof InterruptedException)) && guaranteed) { client.getFailedDeleteManager().addFailedOperation(unfixedPath); } throw e; } trace.setPath(path).commit(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,performBackgroundOperation,@Override public void  (OperationAndData<String> dummy) throws Exception { try { ZKPaths.deleteChildren(client.getZooKeeper() mainOperationAndData.getData() false); } catch ( KeeperException e) { } client.queueOperation(mainOperationAndData); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx){ trace.setReturnCode(rc).setPath(path).commit(); if ((rc == KeeperException.Code.NOTEMPTY.intValue()) && deletingChildrenIfNeeded) { backgroundDeleteChildrenThenNode(operationAndData); } else { if ((r
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,quietly,@Override public DeleteBuilderMain  (){ quietly=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,retriesExhausted,@Override public void  (OperationAndData<String> operationAndData){ client.getFailedDeleteManager().addFailedOperation(unfixedPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,withUnhandledErrorListener,@Override public Pathable<Void>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\DeleteBuilderImpl.java,withVersion,@Override public BackgroundPathable<Void>  (int version){ this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,EnsembleTracker, (CuratorFramework client EnsembleProvider ensembleProvider){ this.client=client.newWatcherRemoveCuratorFramework(); this.ensembleProvider=ensembleProvider; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,ExistsBuilderImpl,public  (CuratorFrameworkImpl client Backgrounding backgrounding Watcher watcher boolean createParentsIfNeeded boolean createParentContainersIfNeeded){ this.client=client; this.backgrounding=backgrounding; this.watching=new Watching(client watcher); this.createParentsIfNeeded=createParentsIfNeeded; this.createParentContainersIfNeeded=createParentContainersIfNeeded; this.acling=new ACLing(client.getAclProvider()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,close,@Override public void  (){ if (state.compareAndSet(State.STARTED State.CLOSED)) { client.removeWatchers(); client.getConnectionStateListenable().removeListener(connectionStateListener); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,call,@Override public Stat  () throws Exception { Stat returnStat; if (watching.isWatched()) { returnStat=client.getZooKeeper().exists(path true); } else { returnStat=client.getZooKeeper().exists(path watching.getWatcher(path)); int rc=(returnStat != null) ? K
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,creatingParentContainersIfNeeded,@Override public ACLableExistBuilderMain  (){ createParentContainersIfNeeded=true; createParentsIfNeeded=false; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,creatingParentsIfNeeded,@Override public ACLableExistBuilderMain  (){ createParentContainersIfNeeded=false; createParentsIfNeeded=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,forPath,@Override public Stat  (String path) throws Exception { path=client.fixForNamespace(path); client.getSchemaSet().getSchema(path).validateWatch(path watching.isWatched() || watching.hasWatcher()); Stat returnStat=null; if (backgrounding.inBackground()) { O
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,inBackground,@Override public ErrorListenerPathable<Stat>  (Object context){ backgrounding=new Backgrounding(context); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,pathInForeground,"private Stat  (final String path) throws Exception { if (createParentContainersIfNeeded || createParentsIfNeeded) { final String parent=ZKPaths.getPathAndNode(path).getPath(); if (!parent.equals(ZKPaths.PATH_SEPARATOR)) { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""ExistsBuilderImpl-Foreground-CreateParents""); RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<Void>(){ @Override public Void call() throws Exception { try { ZKPaths.mkdirs(client.getZooKeeper() parent true acling.getACLProviderForParents() createParentContainersIfNeeded); } catch ( KeeperException.NodeExistsException e) { } catch ( KeeperException.NoNodeException e) { } return null; } } ); trace.setPath(path).commit(); } } return pathInForegroundStandard(path); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,pathInForegroundStandard,"private Stat  (final String path) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""ExistsBuilderImpl-Foreground""); Stat returnStat=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<Stat>(){ @Override public Stat call() throws Exception { Stat returnStat; if (watching.isWatched()) { returnStat=client.getZooKeeper().exists(path true); } else { returnStat=client.getZooKeeper().exists(path watching.getWatcher(path)); int rc=(returnStat != null) ? KeeperException.NoNodeException.Code.OK.intValue() : KeeperException.NoNodeException.Code.NONODE.intValue(); watching.commitWatcher(rc true); } return returnStat; } } ); trace.setPath(path).setWithWatcher(watching.hasWatcher()).setStat(returnStat).commit(); return returnStat; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<String> operationAndData) throws Exception { try { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""ExistsBuilderImpl-Background""); AsyncCallback.StatCallback callback=new AsyncCall"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx Stat stat){ watching.commitWatcher(rc true); trace.setReturnCode(rc).setPath(path).setWithWatcher(watching.hasWatcher()).setStat(stat).commit(); CuratorEvent event=new CuratorEventImpl(client CuratorEv
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,usingWatcher,@Override public BackgroundPathable<Stat>  (CuratorWatcher watcher){ watching=new Watching(client watcher); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,watched,@Override public BackgroundPathable<Stat>  (){ watching=new Watching(client true); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,withACL,@Override public ExistsBuilderMain  (List<ACL> aclList){ acling=new ACLing(client.getAclProvider() aclList true); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExistsBuilderImpl.java,withUnhandledErrorListener,@Override public Pathable<Stat>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,configToConnectionString,@VisibleForTesting public static String  (QuorumVerifier data) throws Exception { StringBuilder sb=new StringBuilder(); for ( QuorumPeer.QuorumServer server : data.getAllMembers().values()) { if (server.clientAddr == null) { continue; } if (sb.length() !=
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,getCurrentConfig,public QuorumVerifier  (){ return currentConfig.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,hasOutstanding,@VisibleForTesting public boolean  (){ return outstanding.get() > 0; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,process,@Override public void  (WatchedEvent event) throws Exception { if (event.getType() == Watcher.Event.EventType.NodeDataChanged) { reset(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,processConfigData,"private void  (byte[] data) throws Exception { Properties properties=new Properties(); properties.load(new ByteArrayInputStream(data)); log.info(""New config event received: {}"" properties); if (!properties.isEmpty()) { QuorumMaj newConfig=new QuorumMaj(properties); String connectionString=configToConnectionString(newConfig); if (connectionString.trim().length() > 0) { currentConfig.set(newConfig); ensembleProvider.setConnectionString(connectionString); } else { log.error(""Invalid config event received: {}"" properties); } } else { log.debug(""Ignoring new config as it is empty""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { outstanding.decrementAndGet(); if ((event.getType() == CuratorEventType.GET_CONFIG) && (event.getResultCode() == KeeperException.Code.OK.intValue())) { processConfigDat
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,reset,private void  () throws Exception { if ((client.getState() == CuratorFrameworkState.STARTED) && (state.get() == State.STARTED)) { BackgroundCallback backgroundCallback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework client  CuratorEvent event) throws Exception { outstanding.decrementAndGet(); if ((event.getType() == CuratorEventType.GET_CONFIG) && (event.getResultCode() == KeeperException.Code.OK.intValue())) { processConfigData(event.getData()); } } } ; outstanding.incrementAndGet(); try { client.getConfig().usingWatcher(this).inBackground(backgroundCallback).forEnsemble(); outstanding.incrementAndGet(); } finally { outstanding.decrementAndGet(); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,start,"public void  () throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); client.getConnectionStateListenable().addListener(connectionStateListener); reset(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\EnsembleTracker.java,stateChanged,"@Override public void  (CuratorFramework client ConnectionState newState){ if ((newState == ConnectionState.CONNECTED) || (newState == ConnectionState.RECONNECTED)) { try { reset(); } catch ( Exception e) { log.error(""Trying to reset after reconnection"" e"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExtractingCuratorOp.java,addToDigest,public void  (MessageDigest digest){ record.addToDigest(digest); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExtractingCuratorOp.java,get,@Override public Op  (){ validate(); return record.iterator().next(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExtractingCuratorOp.java,getRecord,CuratorMultiTransactionRecord  (){ return record; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExtractingCuratorOp.java,getTypeAndPath,@Override public TypeAndPath  (){ validate(); return record.getMetadata(0); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ExtractingCuratorOp.java,validate,"private void  (){ Preconditions.checkArgument(record.size() > 0 ""No operation has been added""); Preconditions.checkArgument(record.size() == 1 ""Multiple operations added""); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FailedDeleteManager.java,FailedDeleteManager, (CuratorFramework client){ super(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FailedDeleteManager.java,executeGuaranteedOperationInBackground,@Override protected void  (String path) throws Exception { client.delete().guaranteed().inBackground().forPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FindAndDeleteProtectedNodeInBackground.java,FindAndDeleteProtectedNodeInBackground, (CuratorFrameworkImpl client String namespaceAdjustedParentPath String protectedId){ this.client=client; this.namespaceAdjustedParentPath=namespaceAdjustedParentPath; this.protectedId=protectedId; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FindAndDeleteProtectedNodeInBackground.java,execute,void  (){ OperationAndData.ErrorCallback<Void> errorCallback=new OperationAndData.ErrorCallback<Void>(){ @Override public void retriesExhausted( OperationAndData<Void> operationAndData){ operationAndData.reset(); client.processBackgroundOperation(operationAndData null); } } ; OperationAndData<Void> operationAndData=new OperationAndData<Void>(this null null errorCallback null null); client.processBackgroundOperation(operationAndData null); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FindAndDeleteProtectedNodeInBackground.java,performBackgroundOperation,"@Override public void  (final OperationAndData<Void> operationAndData) throws Exception { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""FindAndDeleteProtectedNodeInBackground""); AsyncCallback.Children2Callback callback=new As"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FindAndDeleteProtectedNodeInBackground.java,processResult,@Override public void  (int rc String path Object o List<String> strings Stat stat){ trace.setReturnCode(rc).setPath(path).setStat(stat).commit(); if (debugInsertError.compareAndSet(true false)) { rc=KeeperException.Code.CONNECTIONLOSS.intValue(); } if (r
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FindAndDeleteProtectedNodeInBackground.java,retriesExhausted,@Override public void  (OperationAndData<Void> operationAndData){ operationAndData.reset(); client.processBackgroundOperation(operationAndData null); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FailedOperationManager.java,FailedOperationManager, (CuratorFramework client){ this.client=client; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FailedOperationManager.java,addFailedOperation,"void  (T details){ if (debugListener != null) { debugListener.pathAddedForGuaranteedOperation(details); } if (client.getState() == CuratorFrameworkState.STARTED) { log.debug(""Details being added to guaranteed operation set: "" + details); try { executeGuaranteedOperationInBackground(details); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); addFailedOperation(details); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FailedRemoveWatchManager.java,FailedRemoveWatchDetails,public  (String path Watcher watcher){ this.path=path; this.watcher=watcher; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FailedRemoveWatchManager.java,FailedRemoveWatchManager, (CuratorFramework client){ super(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\FailedRemoveWatchManager.java,executeGuaranteedOperationInBackground,@Override protected void  (FailedRemoveWatchDetails details) throws Exception { if (details.watcher == null) { client.watches().removeAll().guaranteed().inBackground().forPath(details.path); } else { client.watches().remove(details.watcher).guaranteed().i
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,GetACLBuilderImpl,public  (CuratorFrameworkImpl client Backgrounding backgrounding Stat responseStat){ this.client=client; this.backgrounding=backgrounding; this.responseStat=responseStat; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,call,@Override public List<ACL>  () throws Exception { return client.getZooKeeper().getACL(path responseStat); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,forPath,@Override public List<ACL>  (String path) throws Exception { path=client.fixForNamespace(path); List<ACL> result=null; if (backgrounding.inBackground()) { client.processBackgroundOperation(new OperationAndData<String>(this path backgrounding.getCallback()
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,inBackground,@Override public ErrorListenerPathable<List<ACL>>  (BackgroundCallback callback Executor executor){ backgrounding=new Backgrounding(client callback executor); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,pathInForeground,"private List<ACL>  (final String path) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""GetACLBuilderImpl-Foreground""); List<ACL> result=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<List<ACL>>(){ @Override public List<ACL> call() throws Exception { return client.getZooKeeper().getACL(path responseStat); } } ); trace.setPath(path).setStat(responseStat).commit(); return result; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<String> operationAndData) throws Exception { try { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""GetACLBuilderImpl-Background""); AsyncCallback.ACLCallback callback=new AsyncCallb"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx List<ACL> acl Stat stat){ trace.setReturnCode(rc).setPath(path).setStat(stat).commit(); CuratorEventImpl event=new CuratorEventImpl(client CuratorEventType.GET_ACL rc path null ctx stat null null null 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,storingStatIn,@Override public Pathable<List<ACL>>  (Stat stat){ responseStat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetACLBuilderImpl.java,withUnhandledErrorListener,@Override public Pathable<List<ACL>>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,GetChildrenBuilderImpl,public  (CuratorFrameworkImpl client Watcher watcher Backgrounding backgrounding Stat responseStat){ this.client=client; this.watching=new Watching(client watcher); this.backgrounding=backgrounding; this.responseStat=responseStat; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,call,@Override public List<String>  () throws Exception { List<String> children; if (watching.isWatched()) { children=client.getZooKeeper().getChildren(path true responseStat); } else { children=client.getZooKeeper().getChildren(path watching.getWatcher(path) 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,forPath,@Override public List<String>  (String path) throws Exception { client.getSchemaSet().getSchema(path).validateWatch(path watching.isWatched() || watching.hasWatcher()); path=client.fixForNamespace(path); List<String> children=null; if (backgrounding.inBac
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,inBackground,@Override public ErrorListenerPathable<List<String>>  (Object context){ backgrounding=new Backgrounding(context); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,pathInForeground,"private List<String>  (final String path) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""GetChildrenBuilderImpl-Foreground""); List<String> children=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<List<String>>(){ @Override public List<String> call() throws Exception { List<String> children; if (watching.isWatched()) { children=client.getZooKeeper().getChildren(path true responseStat); } else { children=client.getZooKeeper().getChildren(path watching.getWatcher(path) responseStat); watching.commitWatcher(KeeperException.NoNodeException.Code.OK.intValue() false); } return children; } } ); trace.setPath(path).setWithWatcher(watching.hasWatcher()).setStat(responseStat).commit(); return children; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<String> operationAndData) throws Exception { try { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""GetChildrenBuilderImpl-Background""); AsyncCallback.Children2Callback callback=new"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,processResult,@Override public void  (int rc String path Object o List<String> strings Stat stat){ watching.commitWatcher(rc false); trace.setReturnCode(rc).setPath(path).setWithWatcher(watching.hasWatcher()).setStat(stat).commit(); if (strings == null) { strings=Lists
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,storingStatIn,@Override public WatchPathable<List<String>>  (Stat stat){ responseStat=stat; return new WatchPathable<List<String>>(){ @Override public List<String> forPath( String path) throws Exception { return GetChildrenBuilderImpl.this.forPath(path); } @Override pu
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,usingWatcher,@Override public BackgroundPathable<List<String>>  (CuratorWatcher watcher){ watching=new Watching(client watcher); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,watched,@Override public BackgroundPathable<List<String>>  (){ watching=new Watching(client true); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetChildrenBuilderImpl.java,withUnhandledErrorListener,@Override public Pathable<List<String>>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,GetDataBuilderImpl,public  (CuratorFrameworkImpl client Stat responseStat Watcher watcher Backgrounding backgrounding boolean decompress){ this.client=client; this.responseStat=responseStat; this.watching=new Watching(client watcher); this.backgrounding=backgrounding; this.decompress=decompress; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,call,@Override public byte[]  () throws Exception { byte[] responseData; if (watching.isWatched()) { responseData=client.getZooKeeper().getData(path true responseStat); } else { responseData=client.getZooKeeper().getData(path watching.getWatcher(path) response
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,decompressed,@Override public GetDataWatchBackgroundStatable  (){ decompress=true; return new GetDataWatchBackgroundStatable(){ @Override public ErrorListenerPathable<byte[]> inBackground(){ return GetDataBuilderImpl.this.inBackground(); } @Override public ErrorListen
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,forPath,@Override public byte[]  (String path) throws Exception { client.getSchemaSet().getSchema(path).validateWatch(path watching.isWatched() || watching.hasWatcher()); path=client.fixForNamespace(path); byte[] responseData=null; if (backgrounding.inBackground(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,inBackground,@Override public ErrorListenerPathable<byte[]>  (Object context){ backgrounding=new Backgrounding(context); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,pathInForeground,"private byte[]  (final String path) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""GetDataBuilderImpl-Foreground""); byte[] responseData=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<byte[]>(){ @Override public byte[] call() throws Exception { byte[] responseData; if (watching.isWatched()) { responseData=client.getZooKeeper().getData(path true responseStat); } else { responseData=client.getZooKeeper().getData(path watching.getWatcher(path) responseStat); watching.commitWatcher(KeeperException.NoNodeException.Code.OK.intValue() false); } return responseData; } } ); trace.setResponseBytesLength(responseData).setPath(path).setWithWatcher(watching.hasWatcher()).setStat(responseStat).commit(); return decompress ? client.getCompressionProvider().decompress(path responseData) : responseData; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<String> operationAndData) throws Exception { try { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""GetDataBuilderImpl-Background""); AsyncCallback.DataCallback callback=new AsyncCal"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx byte[] data Stat stat){ watching.commitWatcher(rc false); trace.setReturnCode(rc).setResponseBytesLength(data).setPath(path).setWithWatcher(watching.hasWatcher()).setStat(stat).commit(); if ((responseS
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,storingStatIn,@Override public WatchPathable<byte[]>  (Stat stat){ this.responseStat=stat; return new WatchPathable<byte[]>(){ @Override public byte[] forPath( String path) throws Exception { return GetDataBuilderImpl.this.forPath(path); } @Override public Pathable<byt
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,usingWatcher,@Override public BackgroundPathable<byte[]>  (CuratorWatcher watcher){ watching=new Watching(client watcher); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,watched,@Override public BackgroundPathable<byte[]>  (){ watching=new Watching(client true); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetDataBuilderImpl.java,withUnhandledErrorListener,@Override public Pathable<byte[]>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GzipCompressionProvider.java,compress,@Override public byte[]  (String path byte[] data) throws Exception { ByteArrayOutputStream bytes=new ByteArrayOutputStream(); GZIPOutputStream out=new GZIPOutputStream(bytes); try { out.write(data); out.finish(); } finally { out.close(); } return bytes.t
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GzipCompressionProvider.java,decompress,@Override public byte[]  (String path byte[] compressedData) throws Exception { ByteArrayOutputStream bytes=new ByteArrayOutputStream(compressedData.length); GZIPInputStream in=new GZIPInputStream(new ByteArrayInputStream(compressedData)); try { byte[] bu
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,GetConfigBuilderImpl,public  (CuratorFrameworkImpl client Backgrounding backgrounding Watcher watcher Stat stat){ this.client=client; this.backgrounding=backgrounding; this.watching=new Watching(client watcher); this.stat=stat; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,call,@Override public byte[]  () throws Exception { if (watching.isWatched()) { return client.getZooKeeper().getConfig(true stat); } byte[] config=client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE) stat); watching.commitWatcher(KeeperExce
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,configInForeground,"private byte[]  () throws Exception { TimeTrace trace=client.getZookeeperClient().startTracer(""GetConfigBuilderImpl-Foreground""); try { return RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<byte[]>(){ @Override public byte[] call() throws Exception { if (watching.isWatched()) { return client.getZooKeeper().getConfig(true stat); } byte[] config=client.getZooKeeper().getConfig(watching.getWatcher(ZooDefs.CONFIG_NODE) stat); watching.commitWatcher(KeeperException.NoNodeException.Code.OK.intValue() false); return config; } } ); } finally { trace.commit(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,forEnsemble,@Override public byte[]  () throws Exception { return GetConfigBuilderImpl.this.forEnsemble(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,inBackground,@Override public ErrorListenerEnsembleable<byte[]>  (BackgroundCallback callback Object context Executor executor){ return GetConfigBuilderImpl.this.inBackground(callback context executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<Void> operationAndData) throws Exception { try { final TimeTrace trace=client.getZookeeperClient().startTracer(""GetDataBuilderImpl-Background""); AsyncCallback.DataCallback callback=new AsyncCallback.DataCallb"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx byte[] data Stat stat){ watching.commitWatcher(rc false); trace.commit(); CuratorEvent event=new CuratorEventImpl(client CuratorEventType.GET_CONFIG rc path null ctx stat data null null null null); cli
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,storingStatIn,@Override public WatchBackgroundEnsembleable<byte[]>  (Stat stat){ this.stat=stat; return new WatchBackgroundEnsembleable<byte[]>(){ @Override public ErrorListenerEnsembleable<byte[]> inBackground(){ return GetConfigBuilderImpl.this.inBackground(); } @Ove
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,usingWatcher,@Override public BackgroundEnsembleable<byte[]>  (CuratorWatcher watcher){ watching=new Watching(client watcher); return new InternalBackgroundEnsembleable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,watched,@Override public BackgroundEnsembleable<byte[]>  (){ watching=new Watching(client true); return new InternalBackgroundEnsembleable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\GetConfigBuilderImpl.java,withUnhandledErrorListener,@Override public Ensembleable<byte[]>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,NamespaceFacade, (CuratorFrameworkImpl client String namespace){ super(client); this.client=client; this.namespace=new NamespaceImpl(client namespace); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,close,@Override public void  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,fixForNamespace,@Override String  (String path boolean isSequential){ return namespace.fixForNamespace(path isSequential); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,getConnectionStateListenable,@Override public Listenable<ConnectionStateListener>  (){ return client.getConnectionStateListenable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,getCuratorListenable,"@Override public Listenable<CuratorListener>  (){ throw new UnsupportedOperationException(""getCuratorListenable() is only available from a non-namespaced CuratorFramework instance""); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,getFailedDeleteManager,@Override FailedDeleteManager  (){ return failedDeleteManager; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,getNamespace,@Override public String  (){ return namespace.getNamespace(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,getUnhandledErrorListenable,@Override public Listenable<UnhandledErrorListener>  (){ return client.getUnhandledErrorListenable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,getZooKeeper,@Override ZooKeeper  () throws Exception { return client.getZooKeeper(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,getZookeeperClient,@Override public CuratorZookeeperClient  (){ return client.getZookeeperClient(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,logError,@Override void  (String reason Throwable e){ client.logError(reason e); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,newNamespaceAwareEnsurePath,@Override public EnsurePath  (String path){ return namespace.newNamespaceAwareEnsurePath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,newRetryLoop,@Override RetryLoop  (){ return client.newRetryLoop(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,nonNamespaceView,@Override public CuratorFramework  (){ return usingNamespace(null); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,processBackgroundOperation,@Override <DATA_TYPE>void  (OperationAndData<DATA_TYPE> operationAndData CuratorEvent event){ client.processBackgroundOperation(operationAndData event); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,start,@Override public void  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,sync,@Override public void  (String path Object context){ internalSync(this path context); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,unfixForNamespace,@Override String  (String path){ return namespace.unfixForNamespace(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacade.java,usingNamespace,@Override public CuratorFramework  (String newNamespace){ return client.getNamespaceFacadeCache().get(newNamespace); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceImpl.java,NamespaceImpl," (CuratorFrameworkImpl client String namespace){ if (namespace != null) { try { PathUtils.validatePath(""/"" + namespace); } catch ( IllegalArgumentException e) { throw new IllegalArgumentException(""Invalid namespace: "" + namespace + ""  ""+ e.getMessage()); } } this.client=client; this.namespace=namespace; ensurePathNeeded=new AtomicBoolean(namespace != null); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceImpl.java,call,"@Override public Object  () throws Exception { ZKPaths.mkdirs(zookeeperClient.getZooKeeper() ZKPaths.makePath(""/"" namespace) true client.getAclProvider() true); return null; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceImpl.java,fixForNamespace,"String  (String path boolean isSequential){ if (ensurePathNeeded.get()) { try { final CuratorZookeeperClient zookeeperClient=client.getZookeeperClient(); RetryLoop.callWithRetry(zookeeperClient new Callable<Object>(){ @Override public Object call() throws Exception { ZKPaths.mkdirs(zookeeperClient.getZooKeeper() ZKPaths.makePath(""/"" namespace) true client.getAclProvider() true); return null; } } ); ensurePathNeeded.set(false); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); client.logError(""Ensure path threw exception"" e); } } return ZKPaths.fixForNamespace(namespace path isSequential); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceImpl.java,getNamespace,String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceImpl.java,newNamespaceAwareEnsurePath,EnsurePath  (String path){ return new EnsurePath(fixForNamespace(path false) client.getAclProvider()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceImpl.java,unfixForNamespace,"String  (String path){ if ((namespace != null) && (path != null)) { String namespacePath=ZKPaths.makePath(namespace null); if (!namespacePath.equals(""/"") && path.startsWith(namespacePath)) { path=(path.length() > namespacePath.length()) ? path.substring(namespacePath.length()) : ""/""; } } return path; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacadeCache.java,NamespaceFacadeCache, (CuratorFrameworkImpl client){ this.client=client; nullNamespace=new NamespaceFacade(client null); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacadeCache.java,get,NamespaceFacade  (String namespace){ try { return (namespace != null) ? cache.get(namespace) : nullNamespace; } catch ( ExecutionException e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceFacadeCache.java,load,@Override public NamespaceFacade  (String namespace) throws Exception { return new NamespaceFacade(client namespace); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceWatchedEvent.java,NamespaceWatchedEvent, (CuratorFrameworkImpl client WatchedEvent event){ super(event.getType() event.getState() client.unfixForNamespace(event.getPath())); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceWatcher.java,NamespaceWatcher," (CuratorFrameworkImpl client CuratorWatcher curatorWatcher String unfixedPath){ this.client=client; this.actualWatcher=null; this.curatorWatcher=curatorWatcher; this.unfixedPath=Preconditions.checkNotNull(unfixedPath ""unfixedPath cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceWatcher.java,close,@Override public void  (){ client=null; actualWatcher=null; curatorWatcher=null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceWatcher.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null) { return false; } if (getClass() == o.getClass()) { NamespaceWatcher watcher=(NamespaceWatcher)o; return Objects.equal(unfixedPath watcher.getUnfixedPath()) && Objects.eq
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceWatcher.java,getUnfixedPath,String  (){ return unfixedPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceWatcher.java,hashCode,@Override public int  (){ return Objects.hashCode(actualWatcher unfixedPath curatorWatcher); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\NamespaceWatcher.java,process,@Override public void  (WatchedEvent event){ if (client != null) { if ((event.getType() != Event.EventType.None) && (client.getWatcherRemovalManager() != null)) { client.getWatcherRemovalManager().noteTriggeredWatcher(this); } if (actualWatcher != null) {
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,OperationAndData, (BackgroundOperation<T> operation T data BackgroundCallback callback ErrorCallback<T> errorCallback Object context Watching watching){ this(operation data callback errorCallback context true); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,callPerformBackgroundOperation,void  () throws Exception { operation.performBackgroundOperation(this); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,clearSleep,void  (){ sleepUntilTimeMs.set(0); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,compareTo,@Override public int  (Delayed o){ if (o == this) { return 0; } long diff=getDelay(TimeUnit.MILLISECONDS) - o.getDelay(TimeUnit.MILLISECONDS); if (diff == 0) { if (o instanceof OperationAndData) { diff=ordinal.get() - ((OperationAndData)o).ordinal.get(); 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,getCallback,BackgroundCallback  (){ return callback; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,getContext,Object  (){ return context; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,getData,T  (){ return data; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,getDelay,@Override public long  (TimeUnit unit){ return unit.convert(sleepUntilTimeMs.get() - System.currentTimeMillis() TimeUnit.MILLISECONDS); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,getElapsedTimeMs,long  (){ return System.currentTimeMillis() - startTimeMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,getErrorCallback,ErrorCallback<T>  (){ return errorCallback; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,getOperation,@VisibleForTesting BackgroundOperation<T>  (){ return operation; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,getThenIncrementRetryCount,int  (){ return retryCount.getAndIncrement(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,isConnectionRequired,boolean  (){ return connectionRequired; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\OperationAndData.java,reset,void  (){ retryCount.set(0); ordinal.set(nextOrdinal.getAndIncrement()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\PathAndBytes.java,PathAndBytes, (String path byte[] data){ this.path=path; this.data=data; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\PathAndBytes.java,getData,byte[]  (){ return data; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\PathAndBytes.java,getPath,String  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,RemoveWatchesBuilderImpl,public  (CuratorFrameworkImpl client Watcher watcher CuratorWatcher curatorWatcher WatcherType watcherType boolean guaranteed boolean local boolean quietly Backgrounding backgrounding){ this.client=client; this.watcher=watcher; this.curatorWatcher=curatorWatcher; this.watcherType=watcherType; this.guaranteed=guaranteed; this.local=local; this.quietly=quietly; this.backgrounding=backgrounding; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,call,@Override public Void  () throws Exception { try { ZooKeeper zkClient=client.getZookeeperClient().getZooKeeper(); if (finalNamespaceWatcher != null) { zkClient.removeWatches(path finalNamespaceWatcher watcherType false); } else { zkClient.removeAllWatches
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,forPath,@Override public Void  (String path) throws Exception { final String adjustedPath=client.fixForNamespace(path); if (backgrounding.inBackground()) { pathInBackground(adjustedPath); } else { pathInForeground(adjustedPath); } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,guaranteed,@Override public RemoveWatchesLocal  (){ guaranteed=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,inBackground,@Override public ErrorListenerPathable<Void>  (Object context){ backgrounding=new Backgrounding(context); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,internalRemoval,void  (Watcher watcher String path) throws Exception { this.watcher=watcher; watcherType=WatcherType.Any; quietly=true; guaranteed=true; if (Boolean.getBoolean(DebugUtils.PROPERTY_REMOVE_WATCHERS_IN_FOREGROUND)) { this.backgrounding=new Backgrounding(); pathInForeground(path); } else { this.backgrounding=new Backgrounding(true); pathInBackground(path); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,locally,@Override public BackgroundPathableQuietlyable<Void>  (){ local=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,makeNamespaceWatcher,private NamespaceWatcher  (String path){ NamespaceWatcher namespaceWatcher=null; if (watcher != null) { if (watcher instanceof NamespaceWatcher) { namespaceWatcher=(NamespaceWatcher)watcher; } else { namespaceWatcher=new NamespaceWatcher(client watcher path); } } else if (curatorWatcher != null) { namespaceWatcher=new NamespaceWatcher(client curatorWatcher path); } return namespaceWatcher; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,ofType,@Override public RemoveWatchesLocal  (WatcherType watcherType){ this.watcherType=watcherType; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,pathInBackground,private void  (final String path){ OperationAndData.ErrorCallback<String> errorCallback=null; if (guaranteed) { errorCallback=new OperationAndData.ErrorCallback<String>(){ @Override public void retriesExhausted( OperationAndData<String> operationAndData){ client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path watcher)); } } ; } client.processBackgroundOperation(new OperationAndData<String>(this path backgrounding.getCallback() errorCallback backgrounding.getContext() !local) null); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,pathInForeground,private void  (final String path) throws Exception { NamespaceWatcher namespaceWatcher=makeNamespaceWatcher(path); if (local) { ZooKeeper zkClient=client.getZooKeeper(); if (namespaceWatcher != null) { zkClient.removeWatches(path namespaceWatcher watcherType local); } else { zkClient.removeAllWatches(path watcherType local); } } else { final NamespaceWatcher finalNamespaceWatcher=namespaceWatcher; RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<Void>(){ @Override public Void call() throws Exception { try { ZooKeeper zkClient=client.getZookeeperClient().getZooKeeper(); if (finalNamespaceWatcher != null) { zkClient.removeWatches(path finalNamespaceWatcher watcherType false); } else { zkClient.removeAllWatches(path watcherType false); } } catch ( Exception e) { if (RetryLoop.isRetryException(e) && guaranteed) { client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path finalNamespaceWatcher)); throw e; } else if (e instanceof KeeperException.NoWatcherException && quietly) { } else { throw e; } } return null; } } ); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<String> operationAndData) throws Exception { try { final TimeTrace trace=client.getZookeeperClient().startTracer(""RemoteWatches-Background""); AsyncCallback.VoidCallback callback=new AsyncCallback.VoidCallback"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx){ trace.commit(); CuratorEvent event=new CuratorEventImpl(client CuratorEventType.REMOVE_WATCHES rc path null ctx null null null null null null); client.processBackgroundOperation(operationAndData even
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,quietly,@Override public BackgroundPathable<Void>  (){ quietly=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,remove,@Override public RemoveWatchesType  (CuratorWatcher watcher){ this.watcher=null; this.curatorWatcher=watcher; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,removeAll,@Override public RemoveWatchesType  (){ this.watcher=null; this.curatorWatcher=null; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,retriesExhausted,@Override public void  (OperationAndData<String> operationAndData){ client.getFailedRemoveWatcherManager().addFailedOperation(new FailedRemoveWatchManager.FailedRemoveWatchDetails(path watcher)); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\RemoveWatchesBuilderImpl.java,withUnhandledErrorListener,@Override public Pathable<Void>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,ReconfigBuilderImpl,public  (CuratorFrameworkImpl client Backgrounding backgrounding Stat responseStat long fromConfig List<String> newMembers List<String> joining List<String> leaving){ this.client=client; this.backgrounding=backgrounding; this.responseStat=responseStat; this.fromConfig=fromConfig; this.newMembers=newMembers; this.joining=joining; this.leaving=leaving; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,call,@Override public byte[]  () throws Exception { return client.getZooKeeper().reconfig(joining leaving newMembers fromConfig responseStat); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,ensembleInForeground,"private byte[]  () throws Exception { TimeTrace trace=client.getZookeeperClient().startTracer(""ReconfigBuilderImpl-Foreground""); byte[] responseData=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<byte[]>(){ @Override public byte[] call() throws Exception { return client.getZooKeeper().reconfig(joining leaving newMembers fromConfig responseStat); } } ); trace.commit(); return responseData; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,forEnsemble,@Override public byte[]  () throws Exception { return ReconfigBuilderImpl.this.forEnsemble(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,fromConfig,@Override public Ensembleable<byte[]>  (long config) throws Exception { fromConfig=config; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,inBackground,@Override public ErrorListenerReconfigBuilderMain  (BackgroundCallback callback Object context Executor executor){ backgrounding=new Backgrounding(client callback context executor); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,joining,@Override public LeaveStatConfigEnsembleable  (List<String> servers){ return ReconfigBuilderImpl.this.joining(servers); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,leaving,@Override public JoinStatConfigEnsembleable  (List<String> servers){ leaving=(servers != null) ? ImmutableList.copyOf(servers) : ImmutableList.<String>of(); return new JoinStatConfigEnsembleable(){ @Override public byte[] forEnsemble() throws Exception { 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<Void> data) throws Exception { try { final TimeTrace trace=client.getZookeeperClient().startTracer(""ReconfigBuilderImpl-Background""); AsyncCallback.DataCallback callback=new AsyncCallback.DataCallback(){ @Ove"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx byte[] bytes Stat stat){ trace.commit(); if ((responseStat != null) && (stat != null)) { DataTree.copyStat(stat responseStat); } CuratorEvent event=new CuratorEventImpl(client CuratorEventType.RECONFIG
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,storingStatIn,@Override public ConfigureEnsembleable  (Stat stat){ responseStat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,withNewMembers,@Override public StatConfigureEnsembleable  (List<String> servers){ newMembers=(servers != null) ? ImmutableList.copyOf(servers) : ImmutableList.<String>of(); return new StatConfigureEnsembleable(){ @Override public Ensembleable<byte[]> fromConfig( long c
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\ReconfigBuilderImpl.java,withUnhandledErrorListener,@Override public ReconfigBuilderMain  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,SetDataBuilderImpl,public  (CuratorFrameworkImpl client Backgrounding backgrounding int version boolean compress){ this.client=client; this.backgrounding=backgrounding; this.version=version; this.compress=compress; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,asTransactionSetDataBuilder,<T>TransactionSetDataBuilder<T>  (final T context final CuratorMultiTransactionRecord transaction){ return new TransactionSetDataBuilder<T>(){ @Override public T forPath( String path  byte[] data) throws Exception { if (compress) { data=client.getCompressionProvider().compress(path data); } String fixedPath=client.fixForNamespace(path); transaction.add(Op.setData(fixedPath data version) OperationType.SET_DATA path); return context; } @Override public T forPath( String path) throws Exception { return forPath(path client.getDefaultData()); } @Override public PathAndBytesable<T> withVersion( int version){ SetDataBuilderImpl.this.withVersion(version); return this; } @Override public VersionPathAndBytesable<T> compressed(){ compress=true; return this; } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,call,@Override public Stat  () throws Exception { return client.getZooKeeper().setData(path data version); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,compressed,@Override public SetDataBackgroundVersionable  (){ compress=true; return new SetDataBackgroundVersionable(){ @Override public ErrorListenerPathAndBytesable<Stat> inBackground(){ return SetDataBuilderImpl.this.inBackground(); } @Override public ErrorListen
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,forPath,@Override public Stat  (String path byte[] data) throws Exception { client.getSchemaSet().getSchema(path).validateGeneral(path data null); if (compress) { data=client.getCompressionProvider().compress(path data); } path=client.fixForNamespace(path); Stat 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,getVersion,int  (){ return version; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,inBackground,@Override public ErrorListenerPathAndBytesable<Stat>  (BackgroundCallback callback Executor executor){ backgrounding=new Backgrounding(client callback executor); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,pathInForeground,"private Stat  (final String path final byte[] data) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""SetDataBuilderImpl-Foreground""); Stat resultStat=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<Stat>(){ @Override public Stat call() throws Exception { return client.getZooKeeper().setData(path data version); } } ); trace.setRequestBytesLength(data).setPath(path).setStat(resultStat).commit(); return resultStat; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<PathAndBytes> operationAndData) throws Exception { try { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""SetDataBuilderImpl-Background""); final byte[] data=operationAndData.getData"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,processResult,"@SuppressWarnings({""unchecked""}) @Override public void  (int rc String path Object ctx Stat stat){ trace.setReturnCode(rc).setRequestBytesLength(data).setPath(path).setStat(stat).commit(); CuratorEvent event=new CuratorEventImpl(client CuratorEventType.SE"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,withUnhandledErrorListener,@Override public PathAndBytesable<Stat>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetDataBuilderImpl.java,withVersion,@Override public BackgroundPathAndBytesable<Stat>  (int version){ this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\StandardInternalConnectionHandler.java,checkNewConnection,@Override public void  (CuratorFrameworkImpl client){ client.checkInstanceIndex(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\StandardInternalConnectionHandler.java,suspendConnection,@Override public void  (CuratorFrameworkImpl client){ client.setToSuspended(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,SetACLBuilderImpl,public  (CuratorFrameworkImpl client Backgrounding backgrounding List<ACL> aclList int version){ this.client=client; this.acling=new ACLing(client.getAclProvider() aclList); this.version=version; this.backgrounding=backgrounding; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,call,@Override public Stat  () throws Exception { return client.getZooKeeper().setACL(path aclList version); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,forPath,@Override public Stat  (String path) throws Exception { String fixedPath=client.fixForNamespace(path); List<ACL> aclList=acling.getAclList(fixedPath); client.getSchemaSet().getSchema(path).validateGeneral(path null aclList); Stat resultStat=null; if (back
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,inBackground,@Override public ErrorListenerPathable<Stat>  (BackgroundCallback callback Executor executor){ backgrounding=new Backgrounding(client callback executor); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,pathInForeground,"private Stat  (final String path final List<ACL> aclList) throws Exception { OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""SetACLBuilderImpl-Foreground""); Stat resultStat=RetryLoop.callWithRetry(client.getZookeeperClient() new Callable<Stat>(){ @Override public Stat call() throws Exception { return client.getZooKeeper().setACL(path aclList version); } } ); trace.setPath(path).setStat(resultStat).commit(); return resultStat; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<String> operationAndData) throws Exception { try { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""SetACLBuilderImpl-Background""); String path=operationAndData.getData(); client.ge"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,processResult,"@SuppressWarnings({""unchecked""}) @Override public void  (int rc String path Object ctx Stat stat){ trace.setReturnCode(rc).setPath(path).setStat(stat).commit(); CuratorEvent event=new CuratorEventImpl(client CuratorEventType.SET_ACL rc path null ctx stat "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,withACL,@Override public BackgroundPathable<Stat>  (List<ACL> aclList){ acling=new ACLing(client.getAclProvider() aclList false); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,withUnhandledErrorListener,@Override public Pathable<Stat>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SetACLBuilderImpl.java,withVersion,@Override public ACLable<BackgroundPathable<Stat>>  (int version){ this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SyncBuilderImpl.java,SyncBuilderImpl,public  (CuratorFrameworkImpl client Backgrounding backgrounding){ this.client=client; this.backgrounding=backgrounding; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SyncBuilderImpl.java,forPath,@Override public Void  (String path) throws Exception { OperationAndData<String> operationAndData=new OperationAndData<String>(this path backgrounding.getCallback() null backgrounding.getContext() null); client.processBackgroundOperation(operationAndData 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SyncBuilderImpl.java,inBackground,@Override public ErrorListenerPathable<Void>  (BackgroundCallback callback Object context Executor executor){ backgrounding=new Backgrounding(client callback context executor); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SyncBuilderImpl.java,performBackgroundOperation,"@Override public void  (final OperationAndData<String> operationAndData) throws Exception { try { final OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""SyncBuilderImpl-Background""); final String path=operationAndData.getData(); Strin"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SyncBuilderImpl.java,processResult,@Override public void  (int rc String path Object ctx){ trace.setReturnCode(rc).setPath(path).commit(); CuratorEvent event=new CuratorEventImpl(client CuratorEventType.SYNC rc path path ctx null null null null null null); client.processBackgroundOperation
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\SyncBuilderImpl.java,withUnhandledErrorListener,@Override public Pathable<Void>  (UnhandledErrorListener listener){ backgrounding=new Backgrounding(backgrounding listener); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,WatcherRemovalFacade, (CuratorFrameworkImpl client){ super(client); this.client=client; removalManager=new WatcherRemovalManager(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,close,@Override public void  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,fixForNamespace,@Override String  (String path boolean isSequential){ return client.fixForNamespace(path isSequential); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getConnectionStateListenable,@Override public Listenable<ConnectionStateListener>  (){ return client.getConnectionStateListenable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getCuratorListenable,@Override public Listenable<CuratorListener>  (){ return client.getCuratorListenable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getCurrentConfig,@Override public QuorumVerifier  (){ return client.getCurrentConfig(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getFailedDeleteManager,@Override FailedDeleteManager  (){ return client.getFailedDeleteManager(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getNamespace,@Override public String  (){ return client.getNamespace(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getRemovalManager,WatcherRemovalManager  (){ return removalManager; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getUnhandledErrorListenable,@Override public Listenable<UnhandledErrorListener>  (){ return client.getUnhandledErrorListenable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getWatcherRemovalManager,@Override WatcherRemovalManager  (){ return removalManager; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getZooKeeper,@Override ZooKeeper  () throws Exception { return client.getZooKeeper(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,getZookeeperClient,@Override public CuratorZookeeperClient  (){ return client.getZookeeperClient(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,logError,@Override void  (String reason Throwable e){ client.logError(reason e); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,newNamespaceAwareEnsurePath,@Override public EnsurePath  (String path){ return client.newNamespaceAwareEnsurePath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,newRetryLoop,@Override RetryLoop  (){ return client.newRetryLoop(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,newWatcherRemoveCuratorFramework,@Override public WatcherRemoveCuratorFramework  (){ return client.newWatcherRemoveCuratorFramework(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,nonNamespaceView,@Override public CuratorFramework  (){ return client.nonNamespaceView(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,processBackgroundOperation,@Override <DATA_TYPE>void  (OperationAndData<DATA_TYPE> operationAndData CuratorEvent event){ client.processBackgroundOperation(operationAndData event); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,removeWatchers,@Override public void  (){ removalManager.removeWatchers(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,start,@Override public void  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,sync,@Override public void  (String path Object context){ client.sync(path context); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,unfixForNamespace,@Override String  (String path){ return client.unfixForNamespace(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalFacade.java,usingNamespace,@Override public CuratorFramework  (String newNamespace){ return client.usingNamespace(newNamespace); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TempGetDataBuilderImpl.java,TempGetDataBuilderImpl, (CuratorFrameworkImpl client){ this.client=client; responseStat=null; decompress=false; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TempGetDataBuilderImpl.java,call,@Override public byte[]  () throws Exception { return client.getZooKeeper().getData(localPath false responseStat); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TempGetDataBuilderImpl.java,decompressed,@Override public StatPathable<byte[]>  (){ decompress=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TempGetDataBuilderImpl.java,forPath,"@Override public byte[]  (String path) throws Exception { final String localPath=client.fixForNamespace(path); OperationTrace trace=client.getZookeeperClient().startAdvancedTracer(""GetDataBuilderImpl-Foreground""); byte[] responseData=RetryLoop.callWithRet"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TempGetDataBuilderImpl.java,storingStatIn,@Override public Pathable<byte[]>  (Stat stat){ responseStat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TransactionOpImpl.java,TransactionOpImpl,public  (CuratorFrameworkImpl client){ this.client=client; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TransactionOpImpl.java,check,@Override public TransactionCheckBuilder<CuratorOp>  (){ ExtractingCuratorOp op=new ExtractingCuratorOp(); return CuratorTransactionImpl.<CuratorOp>makeTransactionCheckBuilder(client op op.getRecord()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TransactionOpImpl.java,create,@Override public TransactionCreateBuilder<CuratorOp>  (){ ExtractingCuratorOp op=new ExtractingCuratorOp(); return new CreateBuilderImpl(client).<CuratorOp>asTransactionCreateBuilder(op op.getRecord()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TransactionOpImpl.java,delete,@Override public TransactionDeleteBuilder<CuratorOp>  (){ ExtractingCuratorOp op=new ExtractingCuratorOp(); return new DeleteBuilderImpl(client).<CuratorOp>asTransactionDeleteBuilder(op op.getRecord()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\TransactionOpImpl.java,setData,@Override public TransactionSetDataBuilder<CuratorOp>  (){ ExtractingCuratorOp op=new ExtractingCuratorOp(); return new SetDataBuilderImpl(client).<CuratorOp>asTransactionSetDataBuilder(op op.getRecord()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalManager.java,WatcherRemovalManager, (CuratorFrameworkImpl client){ this.client=client; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalManager.java,add,"void  (NamespaceWatcher watcher){ watcher=Preconditions.checkNotNull(watcher ""watcher cannot be null""); entries.add(watcher); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalManager.java,getEntries,@VisibleForTesting Set<? extends Watcher>  (){ return Sets.newHashSet(entries); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalManager.java,noteTriggeredWatcher,void  (NamespaceWatcher watcher){ entries.remove(watcher); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\WatcherRemovalManager.java,removeWatchers,"void  (){ if (client.isZk34CompatibilityMode()) { return; } List<NamespaceWatcher> localEntries=Lists.newArrayList(entries); while (localEntries.size() > 0) { NamespaceWatcher watcher=localEntries.remove(0); if (entries.remove(watcher) && !client.isZk34CompatibilityMode()) { try { log.debug(""Removing watcher for path: "" + watcher.getUnfixedPath()); RemoveWatchesBuilderImpl builder=new RemoveWatchesBuilderImpl(client); builder.internalRemoval(watcher watcher.getUnfixedPath()); } catch ( Exception e) { log.error(""Could not remove watcher for path: "" + watcher.getUnfixedPath()); } } } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Watching.java,Watching, (CuratorFrameworkImpl client){ this.client=client; watcher=null; watched=false; curatorWatcher=null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Watching.java,commitWatcher,void  (int rc boolean isExists){ boolean doCommit=false; if (isExists) { doCommit=((rc == KeeperException.Code.OK.intValue()) || (rc == KeeperException.Code.NONODE.intValue())); } else { doCommit=(rc == KeeperException.Code.OK.intValue()); } if (doCommit && (namespaceWatcher != null)) { if (client.getWatcherRemovalManager() != null) { client.getWatcherRemovalManager().add(namespaceWatcher); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Watching.java,getWatcher,Watcher  (String unfixedPath){ namespaceWatcher=null; if (watcher != null) { namespaceWatcher=new NamespaceWatcher(client this.watcher unfixedPath); } else if (curatorWatcher != null) { namespaceWatcher=new NamespaceWatcher(client curatorWatcher unfixedPath); } return namespaceWatcher; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Watching.java,hasWatcher,boolean  (){ return (watcher != null) || (curatorWatcher != null); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\imps\Watching.java,isWatched,boolean  (){ return watched; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\listen\ListenerEntry.java,ListenerEntry,public  (T listener Executor executor){ this.listener=listener; this.executor=executor; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\listen\ListenerContainer.java,addListener,@Override public void  (T listener Executor executor){ listeners.put(listener new ListenerEntry<T>(listener executor)); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\listen\ListenerContainer.java,clear,public void  (){ listeners.clear(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\listen\ListenerContainer.java,forEach,"public void  (final Function<T Void> function){ for ( final ListenerEntry<T> entry : listeners.values()) { entry.executor.execute(new Runnable(){ @Override public void run(){ try { function.apply(entry.listener); } catch ( Throwable e) { ThreadUtils.checkInterrupted(e); log.error(String.format(""Listener (%s) threw an exception"" entry.listener) e); } } } ); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\listen\ListenerContainer.java,removeListener,@Override public void  (T listener){ listeners.remove(listener); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\listen\ListenerContainer.java,run,"@Override public void  (){ try { function.apply(entry.listener); } catch ( Throwable e) { ThreadUtils.checkInterrupted(e); log.error(String.format(""Listener (%s) threw an exception"" entry.listener) e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\listen\ListenerContainer.java,size,public int  (){ return listeners.size(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\SafeIsTtlMode.java,isTtl,public static boolean  (CreateMode mode){ return !Compatibility.isZK34() && Internal.instance.isTtl(mode); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\DefaultSchemaValidator.java,isValid,@Override public boolean  (Schema schema String path byte[] data List<ACL> acl){ return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,Schema," (String name Pattern pathRegex String path String documentation SchemaValidator schemaValidator Allowance ephemeral Allowance sequential Allowance watched boolean canBeDeleted Map<String String> metadata){ Preconditions.checkNotNull((pathRegex != null) || (path != null) ""pathRegex and path cannot both be null""); this.pathRegex=pathRegex; this.fixedPath=fixPath(path); this.metadata=ImmutableMap.copyOf(Preconditions.checkNotNull(metadata ""metadata cannot be null"")); this.name=Preconditions.checkNotNull(name ""name cannot be null""); this.documentation=Preconditions.checkNotNull(documentation ""documentation cannot be null""); this.schemaValidator=Preconditions.checkNotNull(schemaValidator ""dataValidator cannot be null""); this.ephemeral=Preconditions.checkNotNull(ephemeral ""ephemeral cannot be null""); this.sequential=Preconditions.checkNotNull(sequential ""sequential cannot be null""); this.watched=Preconditions.checkNotNull(watched ""watched cannot be null""); this.canBeDeleted=canBeDeleted; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,builder,public static SchemaBuilder  (Pattern pathRegex){ return new SchemaBuilder(pathRegex null); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,builderForRecipe,"public static SchemaBuilder  (String parentPath){ return new SchemaBuilder(Pattern.compile(ZKPaths.makePath(parentPath "".*"")) null).sequential(Allowance.MUST).ephemeral(Allowance.MUST).watched(Allowance.MUST).canBeDeleted(true); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,builderForRecipeParent,public static SchemaBuilder  (String parentPath){ return new SchemaBuilder(null parentPath).sequential(Allowance.CANNOT).ephemeral(Allowance.CANNOT); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,canBeDeleted,public boolean  (){ return canBeDeleted; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Schema schema=(Schema)o; if (!pathRegex.equals(schema.pathRegex)) { return false; } return fixedPath.equals(schema.fixedPa
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,fixPath,"private String  (String path){ if (path != null) { if (path.endsWith(ZKPaths.PATH_SEPARATOR)) { return (path.length() > 1) ? path.substring(0 path.length() - 1) : """"; } return path; } return null; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getDocumentation,public String  (){ return documentation; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getEphemeral,public Allowance  (){ return ephemeral; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getMetadata,public Map<String String>  (){ return metadata; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getPath,public String  (){ return fixedPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getPathRegex,public Pattern  (){ return pathRegex; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getRawPath,public String  (){ return (fixedPath != null) ? fixedPath : pathRegex.pattern(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getSchemaValidator,public SchemaValidator  (){ return schemaValidator; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getSequential,public Allowance  (){ return sequential; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,getWatched,public Allowance  (){ return watched; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,hashCode,@Override public int  (){ int result=pathRegex.hashCode(); result=31 * result + fixedPath.hashCode(); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,toDocumentation,"public String  (){ String pathLabel=(pathRegex != null) ? ""Path Regex: "" : ""Path: ""; return ""Name: "" + name + '\n'+ pathLabel+ getRawPath()+ '\n'+ ""Doc: ""+ documentation+ '\n'+ ""Validator: ""+ schemaValidator.getClass().getSimpleName()+ '\n'+ ""Meta: ""+ metadata+ '\n'+ String.format(""ephemeral: %s | sequential: %s | watched: %s | canBeDeleted: %s"" ephemeral sequential watched canBeDeleted)+ '\n'; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,toString,"@Override public String  (){ return ""Schema{"" + ""name='"" + name + '\''+ ""  pathRegex=""+ pathRegex+ ""  path='""+ fixedPath+ '\''+ ""  documentation='""+ documentation+ '\''+ ""  dataValidator=""+ schemaValidator.getClass()+ ""  ephemeral=""+ ephemeral+ ""  sequent"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,validateCreate,"public void  (CreateMode mode String path byte[] data List<ACL> acl){ if (mode.isEphemeral() && (ephemeral == Allowance.CANNOT)) { throw new SchemaViolation(this new SchemaViolation.ViolatorData(path data acl) ""Cannot be ephemeral""); } if (!mode.isEphemeral() && (ephemeral == Allowance.MUST)) { throw new SchemaViolation(this new SchemaViolation.ViolatorData(path data acl) ""Must be ephemeral""); } if (mode.isSequential() && (sequential == Allowance.CANNOT)) { throw new SchemaViolation(this new SchemaViolation.ViolatorData(path data acl) ""Cannot be sequential""); } if (!mode.isSequential() && (sequential == Allowance.MUST)) { throw new SchemaViolation(this new SchemaViolation.ViolatorData(path data acl) ""Must be sequential""); } validateGeneral(path data acl); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,validateDelete,"public void  (String path){ if (!canBeDeleted) { throw new SchemaViolation(this new SchemaViolation.ViolatorData(path null null) ""Cannot be deleted""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,validateGeneral,"public void  (String path byte[] data List<ACL> acl){ if (!schemaValidator.isValid(this path data acl)) { throw new SchemaViolation(this new SchemaViolation.ViolatorData(path data acl) ""Data is not valid""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\Schema.java,validateWatch,"public void  (String path boolean isWatching){ if (isWatching && (watched == Allowance.CANNOT)) { throw new SchemaViolation(this new SchemaViolation.ViolatorData(path null null) ""Cannot be watched""); } if (!isWatching && (watched == Allowance.MUST)) { throw new SchemaViolation(this new SchemaViolation.ViolatorData(path null null) ""Must be watched""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,SchemaBuilder, (Pattern pathRegex String path){ this.pathRegex=pathRegex; this.path=path; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,build,public Schema  (){ return new Schema(name pathRegex path documentation schemaValidator ephemeral sequential watched canBeDeleted metadata); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,canBeDeleted,public SchemaBuilder  (boolean canBeDeleted){ this.canBeDeleted=canBeDeleted; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,dataValidator,"public SchemaBuilder  (SchemaValidator schemaValidator){ this.schemaValidator=Preconditions.checkNotNull(schemaValidator ""dataValidator cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,documentation,"public SchemaBuilder  (String documentation){ this.documentation=Preconditions.checkNotNull(documentation ""documentation cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,ephemeral,"public SchemaBuilder  (Schema.Allowance ephemeral){ this.ephemeral=Preconditions.checkNotNull(ephemeral ""ephemeral cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,metadata,public SchemaBuilder  (Map<String String> metadata){ this.metadata=ImmutableMap.copyOf(metadata); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,name,"public SchemaBuilder  (String name){ this.name=Preconditions.checkNotNull(name ""name cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,sequential,"public SchemaBuilder  (Schema.Allowance sequential){ this.sequential=Preconditions.checkNotNull(sequential ""sequential cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaBuilder.java,watched,public SchemaBuilder  (Schema.Allowance watched){ this.watched=watched; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSetLoader.java,SchemaSetLoader,public  (JsonNode root SchemaValidatorMapper schemaValidatorMapper){ ImmutableList.Builder<Schema> builder=ImmutableList.builder(); read(builder root schemaValidatorMapper); schemas=builder.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSetLoader.java,getAllowance,"private Schema.Allowance  (JsonNode node String name){ JsonNode namedNode=node.get(name); try { return (namedNode != null) ? Schema.Allowance.valueOf(namedNode.asText().toUpperCase()) : Schema.Allowance.CAN; } catch ( IllegalArgumentException ignore) { throw new RuntimeException(""Must be one of: "" + Arrays.toString(Schema.Allowance.values()) + "" at ""+ node); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSetLoader.java,getBoolean,private boolean  (JsonNode node String name){ JsonNode namedNode=node.get(name); return (namedNode != null) && namedNode.asBoolean(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSetLoader.java,getRoot,private static JsonNode  (Reader in){ try { return new ObjectMapper().readTree(in); } catch ( IOException e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,SchemaSet,"public  (List<Schema> schemas boolean useDefaultSchema){ schemas=Preconditions.checkNotNull(schemas ""schemas cannot be null""); this.useDefaultSchema=useDefaultSchema; this.schemas=Maps.uniqueIndex(schemas new Function<Schema String>(){ @Override public String apply( Schema schema){ return schema.getName(); } } ); ImmutableMap.Builder<String Schema> pathBuilder=ImmutableMap.builder(); ImmutableList.Builder<Schema> regexBuilder=ImmutableList.builder(); for ( Schema schema : schemas) { if (schema.getPath() != null) { pathBuilder.put(schema.getPath() schema); } else { regexBuilder.add(schema); } } pathToSchemas=pathBuilder.build(); regexSchemas=regexBuilder.build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,apply,@Override public String  (Schema schema){ return schema.getName(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,getDefaultSchemaSet,"public static SchemaSet  (){ return new SchemaSet(Collections.<Schema>emptyList() true){ @Override public String toDocumentation(){ return ""Default schema""; } } ; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,getNamedPath,public static String  (CuratorFramework client String name){ return client.getSchemaSet().getNamedSchema(name).getRawPath(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,getNamedSchema,public Schema  (String name){ return schemas.get(name); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,getSchema,"public Schema  (String path){ if (schemas.size() > 0) { Schema schema=pathToSchemas.get(path); if (schema == null) { try { schema=regexCache.get(path); if (schema.equals(nullSchema)) { schema=useDefaultSchema ? defaultSchema : null; } } catch ( ExecutionException e) { throw new RuntimeException(e); } } if (schema != null) { return schema; } } if (useDefaultSchema) { return defaultSchema; } throw new SchemaViolation(null new SchemaViolation.ViolatorData(path null null) ""No schema found for: "" + path); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,getSchemas,public Collection<Schema>  (){ return schemas.values(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,load,"@Override public Schema  (String path) throws Exception { for ( Schema schema : regexSchemas) { if (schema.getPathRegex().matcher(path).matches()) { log.debug(""path -> {}"" schema); return schema; } } return nullSchema; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaSet.java,toDocumentation,"public String  (){ StringBuilder str=new StringBuilder(""Curator Schemas:\n\n""); for ( Map.Entry<String Schema> schemaEntry : schemas.entrySet()) { str.append(schemaEntry.getKey()).append('\n').append(schemaEntry.getValue().toDocumentation()).append('\n'); } return str.toString(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,SchemaViolation,public  (Schema schema ViolatorData violatorData String violation){ super(toString(schema violation violatorData)); this.schema=schema; this.violation=violation; this.violatorData=violatorData; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,ViolatorData,public  (String path byte[] data List<ACL> acl){ this.path=path; this.data=(data != null) ? Arrays.copyOf(data data.length) : null; this.acl=(acl != null) ? ImmutableList.copyOf(acl) : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,getAcl,public List<ACL>  (){ return acl; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,getData,public byte[]  (){ return data; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,getSchema,public Schema  (){ return schema; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,getViolation,public String  (){ return violation; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,getViolatorData,public ViolatorData  (){ return violatorData; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\schema\SchemaViolation.java,toString,"private static String  (Schema schema String violation ViolatorData violatorData){ return Objects.firstNonNull(violation """") + "" "" + schema+ "" ""+ violatorData; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,ConnectionStateManager,"public  (CuratorFramework client ThreadFactory threadFactory int sessionTimeoutMs int sessionExpirationPercent){ this.client=client; this.sessionTimeoutMs=sessionTimeoutMs; this.sessionExpirationPercent=sessionExpirationPercent; if (threadFactory == null) { threadFactory=ThreadUtils.newThreadFactory(""ConnectionStateManager""); } service=Executors.newSingleThreadExecutor(threadFactory); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,addStateChange,public synchronized boolean  (ConnectionState newConnectionState){ if (state.get() != State.STARTED) { return false; } ConnectionState previousState=currentConnectionState; if (previousState == newConnectionState) { return false; } setCurrentConnectionState(newConnectionState); ConnectionState localState=newConnectionState; boolean isNegativeMessage=((newConnectionState == ConnectionState.LOST) || (newConnectionState == ConnectionState.SUSPENDED) || (newConnectionState == ConnectionState.READ_ONLY)); if (!isNegativeMessage && initialConnectMessageSent.compareAndSet(false true)) { localState=ConnectionState.CONNECTED; } postState(localState); return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,apply,@Override public Void  (ConnectionStateListener listener){ listener.stateChanged(client newState); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,blockUntilConnected,public synchronized boolean  (int maxWaitTime TimeUnit units) throws InterruptedException { long startTime=System.currentTimeMillis(); boolean hasMaxWait=(units != null); long maxWaitTimeMs=hasMaxWait ? TimeUnit.MILLISECONDS.convert(maxWaitTime units) : 0; while (!isConnected()) { if (hasMaxWait) { long waitTime=maxWaitTimeMs - (System.currentTimeMillis() - startTime); if (waitTime <= 0) { return isConnected(); } wait(waitTime); } else { wait(); } } return isConnected(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,call,@Override public Object  () throws Exception { processEvents(); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,checkSessionExpiration,"private void  (){ if ((currentConnectionState == ConnectionState.SUSPENDED) && (startOfSuspendedEpoch != 0)) { long elapsedMs=System.currentTimeMillis() - startOfSuspendedEpoch; int lastNegotiatedSessionTimeoutMs=client.getZookeeperClient().getLastNegotiatedSessionTimeoutMs(); int useSessionTimeoutMs=(lastNegotiatedSessionTimeoutMs > 0) ? lastNegotiatedSessionTimeoutMs : sessionTimeoutMs; useSessionTimeoutMs=(useSessionTimeoutMs * sessionExpirationPercent) / 100; if (elapsedMs >= useSessionTimeoutMs) { log.warn(String.format(""Session timeout has elapsed while SUSPENDED. Injecting a session expiration. Elapsed ms: %d. Adjusted session timeout ms: %d"" elapsedMs useSessionTimeoutMs)); try { Compatibility.injectSessionExpiration(client.getZookeeperClient().getZooKeeper()); } catch ( Exception e) { log.error(""Could not inject session expiration"" e); } } } else if (currentConnectionState == ConnectionState.LOST) { try { client.getZookeeperClient().getZooKeeper(); } catch ( Exception e) { log.error(""Could not get ZooKeeper"" e); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,close,@Override public void  (){ if (state.compareAndSet(State.STARTED State.CLOSED)) { service.shutdownNow(); listeners.clear(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,getListenable,public ListenerContainer<ConnectionStateListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,isConnected,public synchronized boolean  (){ return (currentConnectionState != null) && currentConnectionState.isConnected(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,postState,"private void  (ConnectionState state){ log.info(""State change: "" + state); notifyAll(); while (!eventQueue.offer(state)) { eventQueue.poll(); log.warn(""ConnectionStateManager queue full - dropping events to make room""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,processEvents,"private void  (){ while (state.get() == State.STARTED) { try { int lastNegotiatedSessionTimeoutMs=client.getZookeeperClient().getLastNegotiatedSessionTimeoutMs(); int useSessionTimeoutMs=(lastNegotiatedSessionTimeoutMs > 0) ? lastNegotiatedSessionTimeoutMs : sessionTimeoutMs; long elapsedMs=startOfSuspendedEpoch == 0 ? useSessionTimeoutMs / 2 : System.currentTimeMillis() - startOfSuspendedEpoch; long pollMaxMs=useSessionTimeoutMs - elapsedMs; final ConnectionState newState=eventQueue.poll(pollMaxMs TimeUnit.MILLISECONDS); if (newState != null) { if (listeners.size() == 0) { log.warn(""There are no ConnectionStateListeners registered.""); } listeners.forEach(new Function<ConnectionStateListener Void>(){ @Override public Void apply( ConnectionStateListener listener){ listener.stateChanged(client newState); return null; } } ); } else if (sessionExpirationPercent > 0) { synchronized (this) { checkSessionExpiration(); } } } catch ( InterruptedException e) { } } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,setCurrentConnectionState,private void  (ConnectionState newConnectionState){ currentConnectionState=newConnectionState; startOfSuspendedEpoch=(currentConnectionState == ConnectionState.SUSPENDED) ? System.currentTimeMillis() : 0; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,setToSuspended,public synchronized boolean  (){ if (state.get() != State.STARTED) { return false; } if ((currentConnectionState == ConnectionState.LOST) || (currentConnectionState == ConnectionState.SUSPENDED)) { return false; } setCurrentConnectionState(ConnectionState.SUSPENDED); postState(ConnectionState.SUSPENDED); return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\ConnectionStateManager.java,start,"public void  (){ Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); service.submit(new Callable<Object>(){ @Override public Object call() throws Exception { processEvents(); return null; } } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\StandardConnectionStateErrorPolicy.java,isErrorState,@Override public boolean  (ConnectionState state){ return ((state == ConnectionState.SUSPENDED) || (state == ConnectionState.LOST)); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\main\java\org\apache\curator\framework\state\SessionConnectionStateErrorPolicy.java,isErrorState,@Override public boolean  (ConnectionState state){ return state == ConnectionState.LOST; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestBlockUntilConnected.java,run,@Override public void  (){ threadToInterrupt.interrupt(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestBlockUntilConnected.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.LOST) { lostLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestBlockUntilConnected.java,testBlockUntilConnectedConnectTimeout,@Test public void  (){ CloseableUtils.closeQuietly(server); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(); Assert.assertFalse(client.blockU
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestBlockUntilConnected.java,testBlockUntilConnectedCurrentlyAwaitingReconnect,@Test public void  (){ Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).retryPolicy(new RetryOneTime(1)).build(); final CountDownLatch lostLat
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestBlockUntilConnected.java,testBlockUntilConnectedCurrentlyConnected,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { final CountDownLatch connectedLatch=new
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestBlockUntilConnected.java,testBlockUntilConnectedCurrentlyNeverConnected,"@Test public void  (){ CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(); Assert.assertTrue(client.blockUntilConnected(5 TimeUnit.SECONDS) ""Not"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestBlockUntilConnected.java,testBlockUntilConnectedInterrupt,@Test public void  (){ CloseableUtils.closeQuietly(server); final CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(); final Thread threadToInter
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestBlockUntilConnected.java,testBlockUntilConnectedTightLoop,@Test public void  () throws InterruptedException { CuratorFramework client; for (int i=0; i < 50; i++) { client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(100)); try { client.start(); client.blockUntilConnected(); Assert
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCleanState.java,closeAndTestClean,"public static void  (CuratorFramework client){ if (client == null) { return; } if (Compatibility.isZK34()) { CloseableUtils.closeQuietly(client); return; } try { CuratorFrameworkImpl internalClient=(CuratorFrameworkImpl)client; EnsembleTracker ensembleTracker=internalClient.getEnsembleTracker(); if (ensembleTracker != null) { while (ensembleTracker.hasOutstanding()) { Thread.sleep(100); } ensembleTracker.close(); } ZooKeeper zooKeeper=internalClient.getZooKeeper(); if (zooKeeper != null) { final int maxLoops=3; for (int i=0; i < maxLoops; ++i) { if (i > 0) { Thread.sleep(500); } boolean isLast=(i + 1) == maxLoops; if (WatchersDebug.getChildWatches(zooKeeper).size() != 0) { if (isLast) { throw new AssertionError(""One or more child watchers are still registered: "" + WatchersDebug.getChildWatches(zooKeeper)); } continue; } if (WatchersDebug.getExistWatches(zooKeeper).size() != 0) { if (isLast) { throw new AssertionError(""One or more exists watchers are still registered: "" + WatchersDebug.getExistWatches(zooKeeper)); } continue; } if (WatchersDebug.getDataWatches(zooKeeper).size() != 0) { if (isLast) { throw new AssertionError(""One or more data watchers are still registered: "" + WatchersDebug.getDataWatches(zooKeeper)); } continue; } break; } } } catch ( IllegalStateException ignore) { } catch ( Exception e) { e.printStackTrace(); } finally { CloseableUtils.closeQuietly(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCleanState.java,test,public static void  (CuratorFramework client Callable<Void> proc) throws Exception { boolean succeeded=false; try { proc.call(); succeeded=true; } finally { if (succeeded) { closeAndTestClean(client); } else { CloseableUtils.closeQuietly(client); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\ensemble\TestEnsembleProvider.java,CountingEnsembleProvider,public  (Semaphore getConnectionStringCounter){ this.getConnectionStringCounter=getConnectionStringCounter; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\ensemble\TestEnsembleProvider.java,getConnectionString,@Override public String  (){ getConnectionStringCounter.release(); return server.getConnectString(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\ensemble\TestEnsembleProvider.java,newClient,private CuratorFramework  (Semaphore counter){ return CuratorFrameworkFactory.builder().ensembleProvider(new CountingEnsembleProvider(counter)).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.connection()).retryPolicy(new RetryOneTime(1)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\ensemble\TestEnsembleProvider.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.CONNECTED) { connectedLatch.countDown(); } if (newState == ConnectionState.LOST) { lostLatch.countDown(); } if (newState == ConnectionState.RECONNEC
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\ensemble\TestEnsembleProvider.java,testAfterSessionExpiration,@Test public void  () throws Exception { TestingServer oldServer=server; Semaphore counter=new Semaphore(0); final CuratorFramework client=newClient(counter); try { final CountDownLatch connectedLatch=new CountDownLatch(1); final CountDownLatch lostLatch=
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\ensemble\TestEnsembleProvider.java,testBasic,@Test public void  (){ Semaphore counter=new Semaphore(0); final CuratorFramework client=newClient(counter); try { client.start(); Assert.assertTrue(timing.acquireSemaphore(counter)); } finally { CloseableUtils.closeQuietly(client); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\ensemble\TestEnsembleProvider.java,updateServerListEnabled,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompression.java,compress,@Override public byte[]  (String path byte[] data) throws Exception { compressCounter.incrementAndGet(); byte[] bytes=new byte[data.length * 2]; System.arraycopy(data 0 bytes 0 data.length); System.arraycopy(data 0 bytes data.length data.length); return b
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompression.java,decompress,@Override public byte[]  (String path byte[] compressedData) throws Exception { decompressCounter.incrementAndGet(); byte[] bytes=new byte[compressedData.length / 2]; System.arraycopy(compressedData 0 bytes 0 bytes.length); return bytes; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompression.java,testCompressionProvider,"@Test public void  () throws Exception { final byte[] data=""here's a string"".getBytes(); final AtomicInteger compressCounter=new AtomicInteger(); final AtomicInteger decompressCounter=new AtomicInteger(); CompressionProvider compressionProvider=new Compre"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompression.java,testSetData,"@Test public void  () throws Exception { final byte[] data=""here's a string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.create().creatingParentsIfNeede"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompression.java,testSimple,"@Test public void  () throws Exception { final byte[] data=""here's a string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.create().compressed().creatingP"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompressionInTransactionNew.java,testCreateCompressedAndUncompressed,"@Test public void  () throws Exception { final String path1=""/a""; final String path2=""/b""; final byte[] data1=""here's a string"".getBytes(); final byte[] data2=""here's another string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient(se"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompressionInTransactionNew.java,testSetCompressedAndUncompressed,"@Test public void  () throws Exception { final String path1=""/a""; final String path2=""/b""; final byte[] data1=""here's a string"".getBytes(); final byte[] data2=""here's another string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient(se"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompressionInTransactionNew.java,testSetData,"@Test public void  () throws Exception { final String path=""/a""; final byte[] data=""here's a string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); CuratorOp op=c"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompressionInTransactionNew.java,testSimple,"@Test public void  () throws Exception { final String path1=""/a""; final String path2=""/a/b""; final byte[] data1=""here's a string"".getBytes(); final byte[] data2=""here's another string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient("
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,compare,private void  (CuratorFramework client String path Stat expected) throws Exception { Stat queriedStat=client.checkExists().forPath(path); Assert.assertEquals(queriedStat expected); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,createClient,private CuratorFramework  (){ return CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getType() == CuratorEventType.CREATE) { statRef.set(event.getStat()); latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,testCreateReturningStat,"@Test public void  () throws Exception { CuratorFramework client=createClient(); try { client.start(); String path=""/bla""; Stat stat=new Stat(); client.create().storingStatIn(stat).forPath(path); compare(client path stat); } finally { CloseableUtils.close"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,testCreateReturningStatCompressed,"@Test public void  () throws Exception { CuratorFramework client=createClient(); try { client.start(); String path=""/bla""; Stat stat=new Stat(); client.create().compressed().storingStatIn(stat).forPath(path); compare(client path stat); } finally { Closeab"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,testCreateReturningStatInBackground,"@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=createClient(); try { client.start(); String path=""/bla""; Stat stat=new Stat(); final CountDownLatch latch=new CountDownLatch(1); final AtomicReference<Stat> stat"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,testCreateReturningStatIncludingParents,"@Test public void  () throws Exception { CuratorFramework client=createClient(); try { client.start(); String path=""/bla/bla""; Stat stat=new Stat(); client.create().creatingParentsIfNeeded().storingStatIn(stat).forPath(path); compare(client path stat); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,testCreateReturningStatIncludingParentsReverse,"@Test public void  () throws Exception { CuratorFramework client=createClient(); try { client.start(); String path=""/bla/bla""; Stat stat=new Stat(); client.create().storingStatIn(stat).creatingParentsIfNeeded().forPath(path); compare(client path stat); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,testCreateReturningStatWithProtected,"@Test public void  () throws Exception { CuratorFramework client=createClient(); try { client.start(); String path=""/bla""; Stat stat=new Stat(); path=client.create().withProtection().storingStatIn(stat).forPath(path); compare(client path stat); } finally "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreateReturningStat.java,testOrSetDataStoringStatIn,"@Test public void  () throws Exception { try (CuratorFramework client=createClient()){ client.start(); client.getZookeeperClient().blockUntilConnectedOrTimedOut(); final String path=""/test""; final Stat versionZeroStat=new Stat(); client.create().orSetData"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompressionInTransactionOld.java,testCreateCompressedAndUncompressed,"@Test public void  () throws Exception { final String path1=""/a""; final String path2=""/b""; final byte[] data1=""here's a string"".getBytes(); final byte[] data2=""here's another string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient(se"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompressionInTransactionOld.java,testSetCompressedAndUncompressed,"@Test public void  () throws Exception { final String path1=""/a""; final String path2=""/b""; final byte[] data1=""here's a string"".getBytes(); final byte[] data2=""here's another string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient(se"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompressionInTransactionOld.java,testSetData,"@Test public void  () throws Exception { final String path=""/a""; final byte[] data=""here's a string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.inTrans"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCompressionInTransactionOld.java,testSimple,"@Test public void  () throws Exception { final String path1=""/a""; final String path2=""/a/b""; final byte[] data1=""here's a string"".getBytes(); final byte[] data2=""here's another string"".getBytes(); CuratorFramework client=CuratorFrameworkFactory.newClient("
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,createClient,private CuratorFramework  (ACLProvider aclProvider){ return CuratorFrameworkFactory.builder().aclProvider(aclProvider).connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,getAclForPath,"@Override public List<ACL>  (String path){ switch (path) { case ""/bar"": return READ_CREATE; case ""/bar/foo"": return READ_CREATE_WRITE; } return null; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,getDefaultAcl,@Override public List<ACL>  (){ return ZooDefs.Ids.OPEN_ACL_UNSAFE; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,testCreateWithParentsWithAcl,"@Test public void  () throws Exception { CuratorFramework client=createClient(new DefaultACLProvider()); try { client.start(); String path=""/bar/foo""; List<ACL> acl=Collections.singletonList(new ACL(ZooDefs.Perms.CREATE | ZooDefs.Perms.READ ANYONE_ID_UNSA"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,testCreateWithParentsWithAclApplyToParents,"@Test public void  () throws Exception { CuratorFramework client=createClient(new DefaultACLProvider()); try { client.start(); String path=""/bar/foo""; List<ACL> acl=Collections.singletonList(new ACL(ZooDefs.Perms.CREATE | ZooDefs.Perms.READ ANYONE_ID_UNSA"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,testCreateWithParentsWithAclApplyToParentsInBackground,"@Test public void  () throws Exception { CuratorFramework client=createClient(new DefaultACLProvider()); try { client.start(); final CountDownLatch latch=new CountDownLatch(1); String path=""/bar/foo""; List<ACL> acl=Collections.singletonList(new ACL(ZooDef"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,testCreateWithParentsWithAclInBackground,"@Test public void  () throws Exception { CuratorFramework client=createClient(new DefaultACLProvider()); try { client.start(); final CountDownLatch latch=new CountDownLatch(1); String path=""/bar/foo""; List<ACL> acl=Collections.singletonList(new ACL(ZooDef"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,testCreateWithParentsWithoutAcl,"@Test public void  () throws Exception { CuratorFramework client=createClient(testACLProvider); try { client.start(); String path=""/bar/foo/boo""; client.create().creatingParentsIfNeeded().forPath(path); List<ACL> actual_bar_foo_boo=client.getACL().forPath"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestCreate.java,testCreateWithParentsWithoutAclInBackground,@Test public void  () throws Exception { CuratorFramework client=createClient(testACLProvider); try { client.start(); final CountDownLatch latch=new CountDownLatch(1); BackgroundCallback callback=new BackgroundCallback(){ @Override public void processResu
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,process,@Override public void  (WatchedEvent event){ if (event.getType() == Event.EventType.None) { if (event.getState() == Event.KeeperState.Expired) { latch.countDown(); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,setup,@BeforeMethod @Override public void  () throws Exception { super.setup(); client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).connectionTimeoutMs(timing.connection()).sessionTimeoutMs(timing.session()).retryPolicy(new RetryOn
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ states.add(newState); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,teardown,@AfterMethod @Override public void  () throws Exception { try { CloseableUtils.closeQuietly(client); } finally { super.teardown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,testInjectedWatchedEvent,@Test public void  () throws Exception { Assert.assertEquals(states.poll(timing.milliseconds() TimeUnit.MILLISECONDS) ConnectionState.CONNECTED); final CountDownLatch latch=new CountDownLatch(1); Watcher watcher=new Watcher(){ @Override public void proces
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,testKillSession,@Test public void  () throws Exception { Assert.assertEquals(states.poll(timing.milliseconds() TimeUnit.MILLISECONDS) ConnectionState.CONNECTED); KillSession2.kill(client.getZookeeperClient().getZooKeeper()); Assert.assertEquals(states.poll(timing.forSess
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,testReconnectWithoutExpiration,"@Test public void  () throws Exception { Assert.assertEquals(states.poll(timing.milliseconds() TimeUnit.MILLISECONDS) ConnectionState.CONNECTED); server.stop(); try { client.checkExists().forPath(""/""); } catch ( KeeperException.ConnectionLossException ign"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,testResetCausesLost,"@Test public void  () throws Exception { Assert.assertEquals(states.poll(timing.milliseconds() TimeUnit.MILLISECONDS) ConnectionState.CONNECTED); client.checkExists().forPath(""/""); client.getZookeeperClient().reset(); Assert.assertEquals(states.poll(timin"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,testSessionExpirationFromTimeout,@Test public void  () throws Exception { Assert.assertEquals(states.poll(timing.milliseconds() TimeUnit.MILLISECONDS) ConnectionState.CONNECTED); server.stop(); Assert.assertEquals(states.poll(timing.milliseconds() TimeUnit.MILLISECONDS) ConnectionState.S
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnabledSessionExpiredState.java,testSessionExpirationFromTimeoutWithRestart,@Test public void  () throws Exception { Assert.assertEquals(states.poll(timing.milliseconds() TimeUnit.MILLISECONDS) ConnectionState.CONNECTED); server.stop(); timing.forSessionSleep().sleep(); Assert.assertEquals(states.poll(timing.milliseconds() TimeUn
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestExistsBuilder.java,createClient,private CuratorFramework  (ACLProvider aclProvider){ return CuratorFrameworkFactory.builder().aclProvider(aclProvider).connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestExistsBuilder.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestExistsBuilder.java,testExistsWithParentsWithAclApplyToParents,"@Test public void  () throws Exception { CuratorFramework client=createClient(new DefaultACLProvider()); try { client.start(); String path=""/bar/foo/test""; List<ACL> acl=Collections.singletonList(new ACL(ZooDefs.Perms.CREATE | ZooDefs.Perms.READ ANYONE_ID"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestExistsBuilder.java,testExistsWithParentsWithAclApplyToParentsInBackground,"@Test public void  () throws Exception { CuratorFramework client=createClient(new DefaultACLProvider()); try { client.start(); final CountDownLatch latch=new CountDownLatch(1); String path=""/bar/foo/test""; List<ACL> acl=Collections.singletonList(new ACL(Z"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnsureContainers.java,testBasic,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); EnsureContainers ensureContainers=new EnsureContainers(client ""/one/two/three""); ensur"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestEnsureContainers.java,testSingleExecution,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); EnsureContainers ensureContainers=new EnsureContainers(client ""/one/two/three""); ensur"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,pathAddedForGuaranteedOperation,@Override public void  (String path){ pathAdded.set(true); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { backgroundLatch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if ((newState == ConnectionState.LOST) || (newState == ConnectionState.SUSPENDED)) { semaphore.release(); } else if (newState == ConnectionState.RECONNECTED) { latch.countDown(); }
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,testBasic,"@Test public void  () throws Exception { final String PATH=""/one/two/three""; Timing timing=new Timing(); CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTi"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,testGuaranteedDeleteOnNonExistentNodeInBackground,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); final AtomicBoolean pathAdded=new AtomicBoolean(false); ((CuratorFrameworkImpl)client).getFa
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,testGuaranteedDeleteOnNonExistentNodeInForeground,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); final AtomicBoolean pathAdded=new AtomicBoolean(false); ((CuratorFrameworkImpl)client).getFa
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,testLostSession,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new ExponentialBackoffRetry(100 3)); try { client.start(); client
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,testWithNamespaceAndLostSession,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.connection()).retryPolicy
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFailedDeleteManager.java,testWithNamespaceAndLostSessionAlt,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.connection()).retryPolicy
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,getAclForPath,@Override public List<ACL>  (String path){ if (aclProviderCalled.getAndSet(true)) { throw new UnsupportedOperationException(); } else { return new ArrayList<>(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,getDefaultAcl,@Override public List<ACL>  (){ if (aclProviderCalled.getAndSet(true)) { throw new UnsupportedOperationException(); } else { return new ArrayList<>(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,listen,@Override public void  (OperationAndData<?> data){ try { operationReadyLatch.await(); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getResultCode() == Code.CONNECTIONLOSS.intValue()) { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,stateChanged,"@Override public void  (CuratorFramework client ConnectionState newState){ if (firstListenerAction.compareAndSet(true false)) { firstListenerState.set(newState); System.out.println(""First listener state is "" + newState); } if (newState == ConnectionState."
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testBasic,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); final BlockingQueue<S
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testCuratorCallbackOnError,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.connection()).retryPolicy
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testErrorListener,@Test public void  () throws Exception { final AtomicBoolean aclProviderCalled=new AtomicBoolean(false); ACLProvider badAclProvider=new ACLProvider(){ @Override public List<ACL> getDefaultAcl(){ if (aclProviderCalled.getAndSet(true)) { throw new Unsupport
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testListenerConnectedAtStart,@Test public void  () throws Exception { server.stop(); Timing timing=new Timing(2); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryNTimes(0 0)); try { client.start(); fina
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testRetries,@Test public void  () throws Exception { final int SLEEP=1000; final int TIMES=5; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryNTimes(TIMES SL
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testShutdown,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.connection()).retryPolicy
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,unhandledError,@Override public void  (String message Throwable e){ if (e instanceof IllegalStateException) { hadIllegalStateException.set(true); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,allowRetry,@Override public boolean  (int retryCount long elapsedTimeMs RetrySleeper sleeper){ semaphore.release(); if (retries.incrementAndGet() == MAX_RETRIES) { try { server.restart(); } catch ( Exception e) { throw new Error(e); } } try { sleeper.sleepFor(100 Ti
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,connectionLossWithBackgroundTest,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() 1 new RetryOneTime(1)); try { final CountDownLatch latch=new CountDownLatch(1); client.start(); client.getZookeep
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,eventReceived,"@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getType() == CuratorEventType.EXISTS) { Stat stat=client.checkExists().forPath(""/yo/yo/yo""); Assert.assertNull(stat); client.create().inBackground(event.getCo"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,internalTestPathsFromProtectingInBackground,"private void  (CreateMode mode) throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() 1 new RetryOneTime(1)); try { client.start(); client.create().creatingParentsIfNeeded().forPath(""/a/b/c""); final BlockingQueue<String> paths=new ArrayBlockingQueue<String>(2); BackgroundCallback callback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework client  CuratorEvent event) throws Exception { paths.put(event.getName()); paths.put(event.getPath()); } } ; final String TEST_PATH=""/a/b/c/test-""; long ttl=timing.forWaiting().milliseconds() * 1000; CreateBuilder firstCreateBuilder=client.create(); if (SafeIsTtlMode.isTtl(mode)) { firstCreateBuilder.withTtl(ttl); } firstCreateBuilder.withMode(mode).inBackground(callback).forPath(TEST_PATH); String name1=timing.takeFromQueue(paths); String path1=timing.takeFromQueue(paths); client.close(); client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() 1 new RetryOneTime(1)); client.start(); CreateBuilderImpl createBuilder=(CreateBuilderImpl)client.create(); createBuilder.withProtection(); if (SafeIsTtlMode.isTtl(mode)) { createBuilder.withTtl(ttl); } client.create().forPath(createBuilder.adjustPath(TEST_PATH)); createBuilder.debugForceFindProtectedNode=true; createBuilder.withMode(mode).inBackground(callback).forPath(TEST_PATH); String name2=timing.takeFromQueue(paths); String path2=timing.takeFromQueue(paths); Assert.assertEquals(ZKPaths.getPathAndNode(name1).getPath() ZKPaths.getPathAndNode(TEST_PATH).getPath()); Assert.assertEquals(ZKPaths.getPathAndNode(name2).getPath() ZKPaths.getPathAndNode(TEST_PATH).getPath()); Assert.assertEquals(ZKPaths.getPathAndNode(path1).getPath() ZKPaths.getPathAndNode(TEST_PATH).getPath()); Assert.assertEquals(ZKPaths.getPathAndNode(path2).getPath() ZKPaths.getPathAndNode(TEST_PATH).getPath()); client.delete().deletingChildrenIfNeeded().forPath(""/a/b/c""); client.delete().forPath(""/a/b""); client.delete().forPath(""/a""); } finally { CloseableUtils.closeQuietly(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,process,@Override public void  (WatchedEvent event){ if (event.getState() == Event.KeeperState.Expired) { sessionDied.set(true); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { queue.put(event.getPath()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,run,"@Override public void  (){ try { client.delete().deletingChildrenIfNeeded().forPath(""/parent""); } catch ( Exception e) { if (e instanceof KeeperException.NoNodeException) { Assert.fail(""client delete failed  shouldn't throw NoNodeException"" e); } else { A"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.LOST) { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testBackgroundFailure,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { final CountDownLatch latch=new CountDownLatch(1);
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testBackgroundLatencyUnSleep,@Test public void  () throws Exception { server.stop(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); ((CuratorFrameworkImpl)client).sleepAndQueueOperationSeconds=Integer.MA
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testCreateContainersForBadConnect,@Test public void  () throws Exception { final int serverPort=server.getPort(); server.close(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() 1000 1000 new RetryNTimes(10 timing.forSleepingABit().milliseconds())); try
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testDeleteChildrenConcurrently,@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); CuratorFramework client2=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testFailure,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() 100 100 new RetryOneTime(1)); client.start(); try { client.checkExists().forPath(""/hey""); client.checkExists().inBackground().forP"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testGetAclNoStat,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { try { client.getACL().forPath(""/""); } catch ( Nul"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testMissedResponseOnBackgroundESCreate,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { CreateBuilderImpl createBuilder=(CreateBuilderImp
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testMissedResponseOnESCreate,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { CreateBuilderImpl createBuilder=(CreateBuilderImp
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testNestedCalls,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { client.getCuratorListenable().addListener(new Cur
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testNotStarted,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.getData(); Assert.fail(); } catch ( Exception e) { } catch ( Throwable e) { Assert.fail("""" e); "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testPathsFromProtectingInBackground,@Test public void  () throws Exception { for ( CreateMode mode : CreateMode.values()) { internalTestPathsFromProtectingInBackground(mode); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testProtectedCreateNodeDeletion,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() 1 new RetryNTimes(0 0)); try { client.start(); for (int i=0; i < 2; ++i) { CuratorFramework localClient=(i == 0) 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testQuickClose,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() 1 new RetryNTimes(0 0)); try { client.start(); client.close(); } finally { CloseableUtils.closeQuietly(client); }
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testReconnectAfterLoss,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); final CountDownLatch lostLatch=new CountDownLatch
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testRetry,@Test public void  () throws Exception { final int MAX_RETRIES=3; final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(10)); client.start(); try { final AtomicInteg
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testSessionKilled,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { client.create().forPath(""/sessionTest""); final At"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFrameworkEdges.java,testStopped,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.getData(); } finally { CloseableUtils.closeQuietly(client); } try { client.getD
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,checkForContainers,"private boolean  (){ if (ZKPaths.getContainerCreateMode() == CreateMode.PERSISTENT) { System.out.println(""Not using CreateMode.CONTAINER enabled version of ZooKeeper""); return false; } return true; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,eventReceived,"@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getType() == CuratorEventType.CREATE) { Assert.assertEquals(event.getPath() ""/test""); ((CountDownLatch)event.getContext()).countDown(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,process,@Override public void  (WatchedEvent event){ try { queue.put(event.getPath()); } catch ( InterruptedException e) { throw new Error(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getType() == CuratorEventType.SYNC) { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,setup,"@BeforeMethod @Override public void  () throws Exception { System.setProperty(""znode.container.checkIntervalMs"" ""1000""); super.setup(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.LOST) { lostLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,teardown,"@AfterMethod @Override public void  () throws Exception { System.clearProperty(""znode.container.checkIntervalMs""); super.teardown(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testACLDeprecatedApis,@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)); Assert.assertNull(builder.getAuthScheme()); Assert.assertNull(bui
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testBackgroundCreate,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.getCuratorListenable().addListener(new CuratorListener(){ @Override public void
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testBackgroundDelete,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.getCuratorListenable().addListener(new CuratorListener(){ @Override public void
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testBackgroundDeleteWithChildren,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.getCuratorListenable().addListener(new CuratorListener(){ @Override public void
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testBackgroundGetDataWithWatch,@Test public void  () throws Exception { final byte[] data1={1 2 3}; final byte[] data2={4 5 6 7}; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final CountDownLatch watched
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testConnectionState,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { final BlockingQueue<ConnectionState> 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateACLMultipleAuths,"@Test public void  () throws Exception { List<AuthInfo> authInfos=new ArrayList<AuthInfo>(); authInfos.add(new AuthInfo(""digest"" ""me1:pass1"".getBytes())); authInfos.add(new AuthInfo(""digest"" ""me2:pass2"".getBytes())); CuratorFrameworkFactory.Builder builde"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateACLSingleAuth,"@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).authorization(""digest"" ""me1:pass1"".getBytes()).retryPolicy(new Ret"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateACLWithReset,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).con
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateContainersUsingNamespace,"@Test public void  () throws Exception { final String namespace=""container2""; CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTime("
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateContainersWithNamespace,"@Test public void  () throws Exception { final String namespace=""container1""; CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTime("
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateModes,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { byte[] writtenBytes={1 2 3}; client.create().forPath(""/test"" writtenBytes); client.clo"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateOrSetData,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); String name=client.create().forPath(""/hey"" ""there"".getBytes()); Assert.assertEquals(na"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateParentContainers,@Test public void  () throws Exception { if (!checkForContainers()) { return; } CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTim
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateParents,@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); client.start(); try { cl
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreatingParentsTheSame,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); Assert.assertNull(client.checkExists().forPath(""/one/two"")); client.create().creatingP"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCustomCallback,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final CountDownLatch latch=new CountDownLatch(1); BackgroundCallback callback=new Back
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testDelete,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().forPath(""/head""); Assert.assertNotNull(client.checkExists().forPath(""/"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testDeleteGuaranteedWithChildren,@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); client.start(); try { cl
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testDeleteWithChildren,@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); client.start(); try { cl
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testEnsurePathWithNamespace,"@Test public void  () throws Exception { final String namespace=""jz""; CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).name"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testExistsCreatingParents,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); Assert.assertNull(client.checkExists().forPath(""/one/two"")); client.checkExists().crea"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testExistsCreatingParentsInBackground,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); Assert.assertNull(client.checkExists().forPath(""/one/two"")); final CountDownLatch latc"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testGetSequentialChildren,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().forPath(""/head""); for (int i=0; i < 10; ++i) { client.create().withMod"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testACL,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); client.getZookeeperClient().blockUntilConnectedOrTimedOut(); client.create().creatingParents
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testBasic,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.create().forPath(""/one""); Assert.assertNotNull(client.getZookeeperClient().getZ"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testCache,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); Assert.assertSame(client.usingNamespace(""foo"") client.usingNamespace(""foo"")); Assert.a"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testGetNamespace,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); CuratorFramework client2=CuratorFrameworkFactory.builder().namespace(""snafu"").retryPolicy(new RetryOneTime(1"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testInvalid,"@Test public void  () throws Exception { try { CuratorFrameworkFactory.builder().namespace(""/snafu"").retryPolicy(new RetryOneTime(1)).connectString(""foo"").build(); Assert.fail(); } catch ( IllegalArgumentException e) { } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testIsStarted,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); CuratorFramework namespaced=client.usingNamespace(null); Assert.assertEquals(client.getState
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testRootAccess,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.create().forPath(""/one""); Assert.assertNotNull(client.getZookeeperClient().getZ"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testSimultaneous,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); CuratorFramework fooClient=client.usingNamespace(""foo""); CuratorFramework barClient=cl"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNamespaceFacade.java,testUnfixForEmptyNamespace,"@Test public void  (){ CuratorFramework client=CuratorFrameworkFactory.builder().namespace("""").retryPolicy(new RetryOneTime(1)).connectString(""foo"").build(); CuratorFrameworkImpl clientImpl=(CuratorFrameworkImpl)client; Assert.assertEquals(clientImpl.unfi"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testNamespace,"@Test public void  () throws Exception { final String namespace=""TestNamespace""; CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTi"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testNamespaceInBackground,"@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).namespace(""aisa"").retryPolicy(new RetryOneTime(1)).build(); client"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testNamespaceWithWatcher,"@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).namespace(""aisa"").retryPolicy(new RetryOneTime(1)).build(); client"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testOverrideCreateParentContainers,@Test public void  () throws Exception { if (!checkForContainers()) { return; } CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).dontUseContainerParents().build(); try { cl
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testQuietDelete,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.delete().quietly().forPath(""/foo/bar""); final BlockingQueue<Integer> rc=new Lin"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testSequentialWithTrailingSeparator,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().forPath(""/test""); String path=client.create().withMode(CreateMode.PERS"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testSessionLossWithLongTimeout,@Test public void  () throws Exception { final Timing timing=new Timing(); try (final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.forWaiting().milliseconds() timing.connection() new RetryOneTime(1))){ final C
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testSimple,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { String path=client.create().withMode(CreateMode.PERSISTENT).forPath(""/test"" new byte[]"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testSync,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.getCuratorListenable().addListener(new CuratorListener(){ @Override public void
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testSyncNew,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().forPath(""/head""); Assert.assertNotNull(client.checkExists().forPath(""/"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestMultiClient.java,eventReceived,"@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getType() == CuratorEventType.SYNC) { client.setData().forPath(""/test"" new byte[]{10 20}); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestMultiClient.java,testNotify,@Test public void  () throws Exception { CuratorFramework client1=null; CuratorFramework client2=null; try { client1=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client2=CuratorFrameworkFactory.newClient(server.getConn
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNeverConnected.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState state){ queue.add(state); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestNeverConnected.java,testNeverConnected,"@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(""localhost:1111"" 100 100 new RetryOneTime(1)); try { final BlockingQueue<ConnectionState> queue=Queues.newLinkedBlockingQueue();"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTempFramework.java,run,@Override public void  (){ client.updateLastAccess(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTempFramework.java,testBasic,"@Test public void  () throws Exception { CuratorTempFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).buildTemp(); try { client.inTransaction().create().forPath(""/foo"" ""data"".getBy"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTempFramework.java,testInactivity,@Test public void  () throws Exception { final CuratorTempFrameworkImpl client=(CuratorTempFrameworkImpl)CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).buildTemp(1 TimeUnit.SECONDS); try { Sched
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReadOnly.java,setup,"@BeforeMethod public void  (){ System.setProperty(""readonlymode.enabled"" ""true""); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReadOnly.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.READ_ONLY) { readOnlyLatch.countDown(); } else if (newState == ConnectionState.RECONNECTED) { reconnectedLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReadOnly.java,tearDown,"@AfterMethod public void  (){ System.setProperty(""readonlymode.enabled"" ""false""); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReadOnly.java,testConnectionStateNewClient,@Test public void  () throws Exception { Timing timing=new Timing(); TestingCluster cluster=new TestingCluster(3); CuratorFramework client=null; try { cluster.start(); client=CuratorFrameworkFactory.newClient(cluster.getConnectString() timing.session() ti
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReadOnly.java,testReadOnly,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=null; TestingCluster cluster=new TestingCluster(2); try { cluster.start(); client=CuratorFrameworkFactory.builder().connectString(cluster.getConnectString()).canB
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,assertConfig,"private void  (QuorumVerifier config Collection<InstanceSpec> instances){ for ( InstanceSpec instance : instances) { QuorumPeer.QuorumServer quorumServer=config.getAllMembers().get((long)instance.getServerId()); Assert.assertNotNull(quorumServer String.format(""Looking for %s - found %s"" instance.getServerId() config.getAllMembers())); Assert.assertEquals(quorumServer.clientAddr.getPort() instance.getPort()); } } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,getConnectionString,@Override public String  (){ return connectString.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,newClient,"private CuratorFramework  (String connectionString){ final AtomicReference<String> connectString=new AtomicReference<>(connectionString); ensembleProvider=new EnsembleProvider(){ @Override public void start() throws Exception { } @Override public boolean updateServerListEnabled(){ return false; } @Override public String getConnectionString(){ return connectString.get(); } @Override public void close() throws IOException { } @Override public void setConnectionString( String connectionString){ connectString.set(connectionString); } } ; return CuratorFrameworkFactory.builder().ensembleProvider(ensembleProvider).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.connection()).authorization(""digest"" superUserPassword.getBytes()).retryPolicy(new ExponentialBackoffRetry(timing.forSleepingABit().milliseconds() 3)).build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,process,@Override public void  (WatchedEvent event){ if (event.getType() == Event.EventType.NodeDataChanged) { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getType() == CuratorEventType.RECONFIG) { callbackLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,setChangeWaiter,private CountDownLatch  (CuratorFramework client) throws Exception { final CountDownLatch latch=new CountDownLatch(1); Watcher watcher=new Watcher(){ @Override public void process( WatchedEvent event){ if (event.getType() == Event.EventType.NodeDataChanged) { latch.countDown(); } } } ; client.getConfig().usingWatcher(watcher).forEnsemble(); return latch; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,setConnectionString,@Override public void  (String connectionString){ connectString.set(connectionString); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,setup,"@BeforeMethod @Override public void  () throws Exception { super.setup(); QuorumPeerConfig.setReconfigEnabled(true); System.setProperty(""zookeeper.DigestAuthenticationProvider.superDigest"" superUserPasswordDigest); CloseableUtils.closeQuietly(server); ser"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,teardown,"@AfterMethod @Override public void  () throws Exception { CloseableUtils.closeQuietly(cluster); ensembleProvider=null; System.clearProperty(""zookeeper.DigestAuthenticationProvider.superDigest""); super.teardown(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testAdd,@Test public void  () throws Exception { try (CuratorFramework client=newClient()){ client.start(); QuorumVerifier oldConfig=toQuorumVerifier(client.getConfig().forEnsemble()); assertConfig(oldConfig cluster.getInstances()); CountDownLatch latch=setChange
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testAddAndRemove,@Test public void  () throws Exception { try (CuratorFramework client=newClient()){ client.start(); QuorumVerifier oldConfig=toQuorumVerifier(client.getConfig().forEnsemble()); assertConfig(oldConfig cluster.getInstances()); CountDownLatch latch=setChange
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testAddAsync,@Test public void  () throws Exception { try (CuratorFramework client=newClient()){ client.start(); QuorumVerifier oldConfig=toQuorumVerifier(client.getConfig().forEnsemble()); assertConfig(oldConfig cluster.getInstances()); CountDownLatch latch=setChange
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testApiPermutations,"@SuppressWarnings(""ConstantConditions"") @Test(enabled=false) public void  () throws Exception { Watcher watcher=null; Stat stat=null; CuratorFramework client=null; client.getConfig().forEnsemble(); client.getConfig().inBackground().forEnsemble(); client.g"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testBasicGetConfig,@Test public void  () throws Exception { try (CuratorFramework client=newClient()){ client.start(); byte[] configData=client.getConfig().forEnsemble(); QuorumVerifier quorumVerifier=toQuorumVerifier(configData); System.out.println(quorumVerifier); assertC
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testConfigToConnectionStringIPv4NoClientAddr,"@Test public void  () throws Exception { String config=""server.1=10.1.2.3:2888:3888:participant;2181""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config.getBytes())); Assert.assertEquals(""10.1.2.3:2181"" configString); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testConfigToConnectionStringIPv4Normal,"@Test public void  () throws Exception { String config=""server.1=10.1.2.3:2888:3888:participant;10.2.3.4:2181""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config.getBytes())); Assert.assertEquals(""10.2.3.4:2181"" configSt"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testConfigToConnectionStringIPv4WildcardClientAddr,"@Test public void  () throws Exception { String config=""server.1=10.1.2.3:2888:3888:participant;0.0.0.0:2181""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config.getBytes())); Assert.assertEquals(""10.1.2.3:2181"" configStr"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testConfigToConnectionStringIPv6Normal,"@Test public void  () throws Exception { String config=""server.1=[1010:0001:0002:0003:0004:0005:0006:0007]:2888:3888:participant;[2001:db8:85a3:0:0:8a2e:370:7334]:2181""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config."
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testConfigToConnectionStringNoClientAddrOrPort,"@Test public void  () throws Exception { String config=""server.1=10.1.2.3:2888:3888:participant""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config.getBytes())); Assert.assertEquals("""" configString); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testIPv6Wildcard1,"@Test public void  () throws Exception { String config=""server.1=[2001:db8:85a3:0:0:8a2e:370:7334]:2888:3888:participant;[::]:2181""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config.getBytes())); Assert.assertEquals(""20"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testIPv6Wildcard2,"@Test public void  () throws Exception { String config=""server.1=[1010:0001:0002:0003:0004:0005:0006:0007]:2888:3888:participant;[::0]:2181""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config.getBytes())); Assert.assertE"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testMixedIPv1,"@Test public void  () throws Exception { String config=""server.1=10.1.2.3:2888:3888:participant;[::]:2181""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config.getBytes())); Assert.assertEquals(""10.1.2.3:2181"" configString"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testMixedIPv2,"@Test public void  () throws Exception { String config=""server.1=[2001:db8:85a3:0:0:8a2e:370:7334]:2888:3888:participant;127.0.0.1:2181""; String configString=EnsembleTracker.configToConnectionString(toQuorumVerifier(config.getBytes())); Assert.assertEqual"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,testNewMembers,@Test(enabled=false) public void  () throws Exception { cluster.close(); cluster=null; TestingCluster smallCluster=null; TestingCluster localCluster=new TestingCluster(5); try { List<TestingZooKeeperServer> servers=localCluster.getServers(); List<Instance
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,toQuorumVerifier,private static QuorumVerifier  (byte[] bytes) throws Exception { Assert.assertNotNull(bytes); Properties properties=new Properties(); properties.load(new ByteArrayInputStream(bytes)); return new QuorumMaj(properties); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,toReconfigSpec,"private List<String>  (Collection<InstanceSpec> instances) throws Exception { String localhost=new InetSocketAddress((InetAddress)null 0).getAddress().getHostAddress(); List<String> specs=Lists.newArrayList(); for ( InstanceSpec instance : instances) { specs.add(""server."" + instance.getServerId() + ""=""+ localhost+ "":""+ instance.getElectionPort()+ "":""+ instance.getQuorumPort()+ "";""+ instance.getPort()); } return specs; } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestReconfiguration.java,updateServerListEnabled,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,BooleanWatcher,public  (String path AtomicBoolean removedFlag EventType eventType){ this.path=path; this.eventType=eventType; this.removedFlag=removedFlag; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,CountDownWatcher,public  (String path CountDownLatch removeLatch EventType eventType){ this.path=path; this.eventType=eventType; this.removeLatch=removeLatch; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,blockUntilDesiredConnectionState,private boolean  (AtomicReference<ConnectionState> stateRef Timing timing final ConnectionState desiredState){ if (stateRef.get() == desiredState) { return true; } synchronized (stateRef) { if (stateRef.get() == desiredState) { return true; } try { stateRef.wait(timing.milliseconds()); return stateRef.get() == desiredState; } catch ( InterruptedException e) { Thread.currentThread().interrupt(); return false; } } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,eventReceived,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getType() == CuratorEventType.WATCHED && event.getWatchedEvent().getType() == EventType.DataWatchRemoved) { removedLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,pathAddedForGuaranteedOperation,@Override public void  (FailedRemoveWatchDetails detail){ guaranteeAddedLatch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,process,@Override public void  (WatchedEvent event){ if (event.getPath() == null || event.getType() == null) { return; } if (event.getPath().equals(path) && event.getType() == eventType) { removedFlag.set(true); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getType() == CuratorEventType.REMOVE_WATCHES && event.getPath().equals(path)) { removedLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,registerConnectionStateListener,private AtomicReference<ConnectionState>  (CuratorFramework client){ final AtomicReference<ConnectionState> state=new AtomicReference<ConnectionState>(); client.getConnectionStateListenable().addListener(new ConnectionStateListener(){ @Override public void stateChanged( CuratorFramework client  ConnectionState newState){ state.set(newState); synchronized (state) { state.notify(); } } } ); return state; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ state.set(newState); synchronized (state) { state.notify(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testGuaranteedRemoveWatch,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(); AtomicReference<Connect
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testGuaranteedRemoveWatchInBackground,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new ExponentialBackoffRetry(100 3)); try { client.start(); Atomic
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveAllChildWatches,"@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(); final String path=""/""; "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveAllDataWatches,"@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(); final String path=""/""; "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveAllWatches,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkImpl client=(CuratorFrameworkImpl)CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveCuratorDefaultWatcher,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(); final CountDownLatch re
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveCuratorWatch,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkImpl client=(CuratorFrameworkImpl)CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveLocalWatch,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkImpl client=(CuratorFrameworkImpl)CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveLocalWatchInBackground,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkImpl client=(CuratorFrameworkImpl)CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveUnregisteredWatcher,@Test(expectedExceptions=KeeperException.NoWatcherException.class) public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveUnregisteredWatcherQuietly,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(); final AtomicBoolean wat
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveWatch,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkImpl client=(CuratorFrameworkImpl)CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveWatchInBackgroundWithCallback,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkImpl client=(CuratorFrameworkImpl)CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestRemoveWatches.java,testRemoveWatchInBackgroundWithNoCallback,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkImpl client=(CuratorFrameworkImpl)CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); try { client.start(
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsNew.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { queue.add(event.getOpResults()); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsNew.java,testBackground,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); CuratorOp createOp1=client.transactionOp().create().forPath(""/foo""); CuratorOp createO"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsNew.java,testBackgroundWithNamespace,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(""galt"").build(); try { client.start(); CuratorOp createOp1=client.transa"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsNew.java,testBasic,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); CuratorOp createOp1=client.transactionOp().create().forPath(""/foo""); CuratorOp createO"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsNew.java,testCheckVersion,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.create().forPath(""/foo""); Stat stat=client.setData().forPath(""/foo"" ""new"".getBy"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsNew.java,testErrors,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); CuratorOp createOp1=client.transactionOp().create().forPath(""/bar""); CuratorOp createO"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsNew.java,testWithNamespace,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(""galt"").build(); try { client.start(); CuratorOp createOp1=client.transa"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsOld.java,testBasic,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); Collection<CuratorTransactionResult> results=client.inTransaction().create().forPath("""
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsOld.java,testCheckVersion,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.create().forPath(""/foo""); Stat stat=client.setData().forPath(""/foo"" ""new"".getBy"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsOld.java,testWithCompression,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(""galt"").build(); client.start(); try { Collection<CuratorTransactionResu"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTransactionsOld.java,testWithNamespace,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(""galt"").build(); try { client.start(); Collection<CuratorTransactionResu"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTtlNodes.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTtlNodes.java,setup,"@BeforeMethod @Override public void  () throws Exception { System.setProperty(""znode.container.checkIntervalMs"" ""1""); super.setup(); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTtlNodes.java,teardown,"@AfterMethod @Override public void  () throws Exception { super.teardown(); System.clearProperty(""znode.container.checkIntervalMs""); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTtlNodes.java,testBasic,@Test public void  () throws Exception { try (CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1))){ client.start(); client.create().withTtl(10).creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT_W
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestTtlNodes.java,testBasicInBackground,@Test public void  () throws Exception { try (CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1))){ client.start(); final CountDownLatch latch=new CountDownLatch(1); BackgroundCallback callback=new Back
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherIdentity.java,testCuratorWatcher,@Test public void  () throws Exception { Timing timing=new Timing(); CountCuratorWatcher watcher=new CountCuratorWatcher(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryO
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherIdentity.java,testSameCuratorWatcherPerZKDocs,@Test public void  () throws Exception { CountCuratorWatcher actualWatcher=new CountCuratorWatcher(); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherIdentity.java,testSameWatcherPerZKDocs,@Test public void  () throws Exception { CountZKWatcher actualWatcher=new CountZKWatcher(); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTi
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherIdentity.java,testSetAddition,"@Test public void  (){ Watcher watcher=new Watcher(){ @Override public void process( WatchedEvent event){ } } ; NamespaceWatcher namespaceWatcher1=new NamespaceWatcher(null watcher ""/foo""); NamespaceWatcher namespaceWatcher2=new NamespaceWatcher(null watc"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherIdentity.java,testZKWatcher,@Test public void  () throws Exception { Timing timing=new Timing(); CountZKWatcher watcher=new CountZKWatcher(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1))
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\AfterConnectionEstablished.java,execute,"public static Future<?>  (final CuratorFramework client final Runnable runAfterConnection) throws Exception { final ExecutorService executor=ThreadUtils.newSingleThreadExecutor(ThreadUtils.getProcessName(runAfterConnection.getClass())); Runnable internalCall=new Runnable(){ @Override public void run(){ try { client.blockUntilConnected(); runAfterConnection.run(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""An error occurred blocking until a connection is available"" e); } finally { executor.shutdown(); } } } ; return executor.submit(internalCall); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\AfterConnectionEstablished.java,run,"@Override public void  (){ try { client.blockUntilConnected(); runAfterConnection.run(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""An error occurred blocking until a connection is available"" e); } finally { executor.shutdown(); "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWithCluster.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if ((newState == ConnectionState.SUSPENDED) || (newState == ConnectionState.LOST)) { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWithCluster.java,testSessionSurvives,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=null; TestingCluster cluster=new TestingCluster(3); cluster.start(); try { client=CuratorFrameworkFactory.newClient(cluster.getConnectString() timing.session() ti
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWithCluster.java,testSplitBrain,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=null; TestingCluster cluster=new TestingCluster(3); cluster.start(); try { for ( InstanceSpec instanceSpec : cluster.getInstances()) { client=CuratorFrameworkFact
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,getSchemaValidator,@Override public SchemaValidator  (String name){ return schemaValidator; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,isValid,@Override public boolean  (Schema schema String path byte[] data List<ACL> acl){ return data.length > 0; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,loadSchemaSet,private SchemaSet  (String name SchemaSetLoader.SchemaValidatorMapper schemaValidatorMapper) throws IOException { String json=Resources.toString(Resources.getResource(name) Charsets.UTF_8); return new SchemaSetLoader(json schemaValidatorMapper).toSchemaSet(true); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,newClient,private CuratorFramework  (SchemaSet schemaSet){ return CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).schemaSet(schemaSet).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,testBasics,"@Test public void  () throws Exception { SchemaSet schemaSet=loadSchemaSet(""schema1.json"" null); Schema schema=schemaSet.getNamedSchema(""test""); Assert.assertNotNull(schema); Map<String String> expectedMetadata=Maps.newHashMap(); expectedMetadata.put(""one"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,testMulti,"@Test public void  () throws Exception { SchemaSet schemaSet=loadSchemaSet(""schema2.json"" null); CuratorFramework client=newClient(schemaSet); try { client.start(); try { client.create().creatingParentsIfNeeded().forPath(""/a/b/c""); Assert.fail(""Should've "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,testOrdering,"@Test public void  () throws Exception { SchemaSet schemaSet=loadSchemaSet(""schema5.json"" null); CuratorFramework client=newClient(schemaSet); try { client.start(); try { client.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(""/e"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,testSchemaValidator,@Test public void  () throws Exception { final SchemaValidator schemaValidator=new SchemaValidator(){ @Override public boolean isValid( Schema schema  String path  byte[] data  List<ACL> acl){ return data.length > 0; } } ; SchemaSetLoader.SchemaValidatorM
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,testTransaction,@Test public void  () throws Exception { final SchemaValidator schemaValidator=new SchemaValidator(){ @Override public boolean isValid( Schema schema  String path  byte[] data  List<ACL> acl){ return data.length > 0; } } ; SchemaSetLoader.SchemaValidatorM
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\schema\TestSchema.java,testYaml,"@Test public void  () throws Exception { String yaml=Resources.toString(Resources.getResource(""schema.yaml"") Charsets.UTF_8); JsonNode root=new ObjectMapper(new YAMLFactory()).readTree(yaml); List<Schema> schemas=new SchemaSetLoader(root null).getSchemas("
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,call,@Override public Void  () throws Exception { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatcherRemoveCuratorFramework(); Watcher w=new Watcher(){ @Override public void process( WatchedEvent event){ } } ; final Count
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,internalTryBasic,"private void  (CuratorFramework client) throws Exception { WatcherRemoveCuratorFramework removerClient=client.newWatcherRemoveCuratorFramework(); final CountDownLatch latch=new CountDownLatch(1); Watcher watcher=new Watcher(){ @Override public void process( WatchedEvent event){ if (event.getType() == Event.EventType.DataWatchRemoved) { latch.countDown(); } } } ; removerClient.checkExists().usingWatcher(watcher).forPath(""/hey""); List<String> existWatches=WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper()); Assert.assertEquals(existWatches.size() 1); removerClient.removeWatchers(); Assert.assertTrue(new Timing().awaitLatch(latch)); existWatches=WatchersDebug.getExistWatches(client.getZookeeperClient().getZooKeeper()); Assert.assertEquals(existWatches.size() 0); } "
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,process,@Override public void  (WatchedEvent event){ if (event.getType() == Event.EventType.DataWatchRemoved) { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testBasic,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); internalTryBasic(client); } finally { TestCleanState.closeAndTestClean(client); } } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testBasicNamespace1,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); internalTryBasic(client.usingNamespace(""foo"")); } finally { TestCleanState.closeAndTes"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testBasicNamespace2,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(""hey"").build(); try { client.start(); internalTryBasic(client); } finall"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testBasicNamespace3,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).namespace(""hey"").build(); try { client.start(); internalTryBasic(client.usingNames"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testMissingNode,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatcherRemoveCurato
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testMissingNodeInBackground,@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); Callable<Void> proc=new Callable<Void>(){ @Override public Void call() throws Exception { client.start
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testResetFromWatcher,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final WatcherRemovalFacade removerClient=(WatcherRemovalFa
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testSameWatcher,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); client.create().forPath(""/test""); WatcherRemovalFacade removerClient=(WatcherRemovalFa"
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testSameWatcherDifferentKinds,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatcherRemoveCurato
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testSameWatcherDifferentKinds1Triggered,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatcherRemoveCurato
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\AtomicStats.java,getOptimisticTimeMs,public long  (){ return optimisticTimeMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\AtomicStats.java,getOptimisticTries,public int  (){ return optimisticTries; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\AtomicStats.java,getPromotedLockTries,public int  (){ return promotedLockTries; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\AtomicStats.java,getPromotedTimeMs,public long  (){ return promotedTimeMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\AtomicStats.java,incrementOptimisticTries,void  (){ ++optimisticTries; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\AtomicStats.java,incrementPromotedTries,void  (){ ++promotedLockTries; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\AtomicStats.java,setOptimisticTimeMs,void  (long optimisticTimeMs){ this.optimisticTimeMs=optimisticTimeMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\AtomicStats.java,setPromotedTimeMs,void  (long promotedTimeMs){ this.promotedTimeMs=promotedTimeMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testSameWatcherDifferentPaths,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatcherRemoveCurato
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testSameWatcherDifferentPaths1Triggered,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatcherRemoveCurato
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testTriggered,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatcherRemoveCurato
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testWithRetry,@Test public void  () throws Exception { server.stop(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatc
C:\Users\User\Desktop\Thesis\curator\curator-framework\src\test\java\org\apache\curator\framework\imps\TestWatcherRemovalManager.java,testWithRetryInBackground,@Test public void  () throws Exception { server.stop(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); WatcherRemovalFacade removerClient=(WatcherRemovalFacade)client.newWatc
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,AtomicLong,private  (AtomicValue<byte[]> bytes){ this.bytes=bytes; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,DistributedAtomicLong,public  (CuratorFramework client String counterPath RetryPolicy retryPolicy PromotedToLock promotedToLock){ value=new DistributedAtomicValue(client counterPath retryPolicy promotedToLock); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,add,@Override public AtomicValue<Long>  (Long delta) throws Exception { return worker(delta); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,bytesToValue,@VisibleForTesting long  (byte[] data){ if ((data == null) || (data.length == 0)) { return 0; } ByteBuffer wrapper=ByteBuffer.wrap(data); try { return wrapper.getLong(); } catch ( BufferUnderflowException e) { throw value.createCorruptionException(data); 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,compareAndSet,@Override public AtomicValue<Long>  (Long expectedValue Long newValue) throws Exception { return new AtomicLong(value.compareAndSet(valueToBytes(expectedValue) valueToBytes(newValue))); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,decrement,@Override public AtomicValue<Long>  () throws Exception { return worker(-1L); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,forceSet,@Override public void  (Long newValue) throws Exception { value.forceSet(valueToBytes(newValue)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,get,@Override public AtomicValue<Long>  () throws Exception { return new AtomicLong(value.get()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,getStats,@Override public AtomicStats  (){ return bytes.getStats(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,increment,@Override public AtomicValue<Long>  () throws Exception { return worker(1L); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,initialize,@Override public boolean  (Long initialize) throws Exception { return value.initialize(valueToBytes(initialize)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,makeFrom,@Override public byte[]  (byte[] previous){ long previousValue=(previous != null) ? bytesToValue(previous) : 0; long newValue=previousValue + addAmount; return valueToBytes(newValue); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,postValue,@Override public Long  (){ return bytesToValue(bytes.postValue()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,preValue,@Override public Long  (){ return bytesToValue(bytes.preValue()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,subtract,@Override public AtomicValue<Long>  (Long delta) throws Exception { return worker(-1 * delta); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,succeeded,@Override public boolean  (){ return bytes.succeeded(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,trySet,@Override public AtomicValue<Long>  (Long newValue) throws Exception { return new AtomicLong(value.trySet(valueToBytes(newValue))); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,valueToBytes,"@VisibleForTesting byte[]  (Long newValue){ Preconditions.checkNotNull(newValue ""newValue cannot be null""); byte[] newData=new byte[8]; ByteBuffer wrapper=ByteBuffer.wrap(newData); wrapper.putLong(newValue); return newData; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicLong.java,worker,"private AtomicValue<Long>  (final Long addAmount) throws Exception { Preconditions.checkNotNull(addAmount ""addAmount cannot be null""); MakeValue makeValue=new MakeValue(){ @Override public byte[] makeFrom( byte[] previous){ long previousValue=(previous != null) ? bytesToValue(previous) : 0; long newValue=previousValue + addAmount; return valueToBytes(newValue); } } ; AtomicValue<byte[]> result=value.trySet(makeValue); return new AtomicLong(result); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\CachedAtomicInteger.java,CachedAtomicInteger,public  (DistributedAtomicInteger number int cacheFactor){ this.number=number; this.cacheFactor=cacheFactor; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\CachedAtomicInteger.java,next,public AtomicValue<Integer>  () throws Exception { MutableAtomicValue<Integer> result=new MutableAtomicValue<Integer>(0 0); if (currentValue == null) { currentValue=number.add(cacheFactor); if (!currentValue.succeeded()) { currentValue=null; result.succeeded=false; return result; } currentIndex=0; } result.succeeded=true; result.preValue=currentValue.preValue() + currentIndex; result.postValue=result.preValue + 1; if (++currentIndex >= cacheFactor) { currentValue=null; } return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\CachedAtomicLong.java,CachedAtomicLong,public  (DistributedAtomicLong number int cacheFactor){ this.number=number; this.cacheFactor=cacheFactor; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\CachedAtomicLong.java,next,public AtomicValue<Long>  () throws Exception { MutableAtomicValue<Long> result=new MutableAtomicValue<Long>(0L 0L); if (currentValue == null) { currentValue=number.add(cacheFactor); if (!currentValue.succeeded()) { currentValue=null; result.succeeded=false; return result; } currentIndex=0; } result.succeeded=true; result.preValue=currentValue.preValue() + currentIndex; result.postValue=result.preValue + 1; if (++currentIndex >= cacheFactor) { currentValue=null; } return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,AtomicInteger,private  (AtomicValue<byte[]> bytes){ this.bytes=bytes; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,DistributedAtomicInteger,public  (CuratorFramework client String counterPath RetryPolicy retryPolicy PromotedToLock promotedToLock){ value=new DistributedAtomicValue(client counterPath retryPolicy promotedToLock); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,add,@Override public AtomicValue<Integer>  (Integer delta) throws Exception { return worker(delta); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,bytesToValue,@VisibleForTesting int  (byte[] data){ if ((data == null) || (data.length == 0)) { return 0; } ByteBuffer wrapper=ByteBuffer.wrap(data); try { return wrapper.getInt(); } catch ( BufferUnderflowException e) { throw value.createCorruptionException(data); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,compareAndSet,@Override public AtomicValue<Integer>  (Integer expectedValue Integer newValue) throws Exception { return new AtomicInteger(value.compareAndSet(valueToBytes(expectedValue) valueToBytes(newValue))); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,decrement,@Override public AtomicValue<Integer>  () throws Exception { return worker(-1); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,forceSet,@Override public void  (Integer newValue) throws Exception { value.forceSet(valueToBytes(newValue)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,get,@Override public AtomicValue<Integer>  () throws Exception { return new AtomicInteger(value.get()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,getStats,@Override public AtomicStats  (){ return bytes.getStats(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,increment,@Override public AtomicValue<Integer>  () throws Exception { return worker(1); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,initialize,@Override public boolean  (Integer initialize) throws Exception { return value.initialize(valueToBytes(initialize)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,makeFrom,@Override public byte[]  (byte[] previous){ int previousValue=(previous != null) ? bytesToValue(previous) : 0; int newValue=previousValue + addAmount; return valueToBytes(newValue); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,postValue,@Override public Integer  (){ return bytesToValue(bytes.postValue()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,preValue,@Override public Integer  (){ return bytesToValue(bytes.preValue()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,subtract,@Override public AtomicValue<Integer>  (Integer delta) throws Exception { return worker(-1 * delta); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,succeeded,@Override public boolean  (){ return bytes.succeeded(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,trySet,@Override public AtomicValue<Integer>  (Integer newValue) throws Exception { return new AtomicInteger(value.trySet(valueToBytes(newValue))); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,valueToBytes,"@VisibleForTesting byte[]  (Integer newValue){ Preconditions.checkNotNull(newValue ""newValue cannot be null""); byte[] newData=new byte[4]; ByteBuffer wrapper=ByteBuffer.wrap(newData); wrapper.putInt(newValue); return newData; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicInteger.java,worker,"private AtomicValue<Integer>  (final Integer addAmount) throws Exception { Preconditions.checkNotNull(addAmount ""addAmount cannot be null""); MakeValue makeValue=new MakeValue(){ @Override public byte[] makeFrom( byte[] previous){ int previousValue=(previous != null) ? bytesToValue(previous) : 0; int newValue=previousValue + addAmount; return valueToBytes(newValue); } } ; AtomicValue<byte[]> result=value.trySet(makeValue); return new AtomicInteger(result); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,DistributedAtomicValue,public  (CuratorFramework client String path RetryPolicy retryPolicy PromotedToLock promotedToLock){ this.client=client; this.path=PathUtils.validatePath(path); this.retryPolicy=retryPolicy; this.promotedToLock=promotedToLock; mutex=(promotedToLock != null) ? new InterProcessMutex(client promotedToLock.getPath()) : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,compareAndSet,public AtomicValue<byte[]>  (byte[] expectedValue byte[] newValue) throws Exception { Stat stat=new Stat(); MutableAtomicValue<byte[]> result=new MutableAtomicValue<byte[]>(null null false); boolean createIt=getCurrentValue(result stat); if (!createIt && Arrays.equals(expectedValue result.preValue)) { try { client.setData().withVersion(stat.getVersion()).forPath(path newValue); result.succeeded=true; result.postValue=newValue; } catch ( KeeperException.BadVersionException dummy) { result.succeeded=false; } catch ( KeeperException.NoNodeException dummy) { result.succeeded=false; } } else { result.succeeded=false; } return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,createCorruptionException,"RuntimeException  (byte[] bytes){ StringBuilder str=new StringBuilder(); str.append('['); boolean first=true; for ( byte b : bytes) { if (first) { first=false; } else { str.append(""  ""); } str.append(""0x"").append(Integer.toHexString((b & 0xff))); } str.append(']'); return new RuntimeException(String.format(""Corrupted data for node \""%s\"": %s"" path str.toString())); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,forceSet,public void  (byte[] newValue) throws Exception { try { client.setData().forPath(path newValue); } catch ( KeeperException.NoNodeException dummy) { try { client.create().creatingParentContainersIfNeeded().forPath(path newValue); } catch ( KeeperException.NodeExistsException dummy2) { client.setData().forPath(path newValue); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,get,public AtomicValue<byte[]>  () throws Exception { MutableAtomicValue<byte[]> result=new MutableAtomicValue<byte[]>(null null false); getCurrentValue(result new Stat()); result.postValue=result.preValue; result.succeeded=true; return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,getCurrentValue,private boolean  (MutableAtomicValue<byte[]> result Stat stat) throws Exception { boolean createIt=false; try { result.preValue=client.getData().storingStatIn(stat).forPath(path); } catch ( KeeperException.NoNodeException e) { result.preValue=null; createIt=true; } return createIt; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,initialize,public boolean  (byte[] value) throws Exception { try { client.create().creatingParentContainersIfNeeded().forPath(path value); } catch ( KeeperException.NodeExistsException ignore) { return false; } return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,makeFrom,@Override public byte[]  (byte[] previous){ return newValue; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,tryOnce,private boolean  (MutableAtomicValue<byte[]> result MakeValue makeValue) throws Exception { Stat stat=new Stat(); boolean createIt=getCurrentValue(result stat); boolean success=false; try { byte[] newValue=makeValue.makeFrom(result.preValue); if (createIt) { client.create().creatingParentContainersIfNeeded().forPath(path newValue); } else { client.setData().withVersion(stat.getVersion()).forPath(path newValue); } result.postValue=Arrays.copyOf(newValue newValue.length); success=true; } catch ( KeeperException.NodeExistsException e) { } catch ( KeeperException.BadVersionException e) { } catch ( KeeperException.NoNodeException e) { } return success; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,tryOptimistic,private void  (MutableAtomicValue<byte[]> result MakeValue makeValue) throws Exception { long startMs=System.currentTimeMillis(); int retryCount=0; boolean done=false; while (!done) { result.stats.incrementOptimisticTries(); if (tryOnce(result makeValue)) { result.succeeded=true; done=true; } else { if (!retryPolicy.allowRetry(retryCount++ System.currentTimeMillis() - startMs RetryLoop.getDefaultRetrySleeper())) { done=true; } } } result.stats.setOptimisticTimeMs(System.currentTimeMillis() - startMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,trySet,AtomicValue<byte[]>  (MakeValue makeValue) throws Exception { MutableAtomicValue<byte[]> result=new MutableAtomicValue<byte[]>(null null false); tryOptimistic(result makeValue); if (!result.succeeded() && (mutex != null)) { tryWithMutex(result makeValue); } return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\DistributedAtomicValue.java,tryWithMutex,private void  (MutableAtomicValue<byte[]> result MakeValue makeValue) throws Exception { long startMs=System.currentTimeMillis(); int retryCount=0; if (mutex.acquire(promotedToLock.getMaxLockTime() promotedToLock.getMaxLockTimeUnit())) { try { boolean done=false; while (!done) { result.stats.incrementPromotedTries(); if (tryOnce(result makeValue)) { result.succeeded=true; done=true; } else { if (!promotedToLock.getRetryPolicy().allowRetry(retryCount++ System.currentTimeMillis() - startMs RetryLoop.getDefaultRetrySleeper())) { done=true; } } } } finally { mutex.release(); } } result.stats.setPromotedTimeMs(System.currentTimeMillis() - startMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\MutableAtomicValue.java,MutableAtomicValue, (T preValue T postValue boolean succeeded){ this.preValue=preValue; this.postValue=postValue; this.succeeded=succeeded; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\MutableAtomicValue.java,getStats,@Override public AtomicStats  (){ return stats; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\MutableAtomicValue.java,postValue,@Override public T  (){ return postValue; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\MutableAtomicValue.java,preValue,@Override public T  (){ return preValue; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\MutableAtomicValue.java,succeeded,@Override public boolean  (){ return succeeded; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,PromotedToLock,private  (String path long maxLockTime TimeUnit maxLockTimeUnit RetryPolicy retryPolicy){ this.path=path; this.maxLockTime=maxLockTime; this.maxLockTimeUnit=maxLockTimeUnit; this.retryPolicy=retryPolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,build,"public PromotedToLock  (){ Preconditions.checkNotNull(instance.path ""path cannot be null""); Preconditions.checkNotNull(instance.retryPolicy ""retryPolicy cannot be null""); return new PromotedToLock(instance.path instance.maxLockTime instance.maxLockTimeUnit instance.retryPolicy); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,builder,public static Builder  (){ return new Builder(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,getMaxLockTime,long  (){ return maxLockTime; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,getMaxLockTimeUnit,TimeUnit  (){ return maxLockTimeUnit; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,getPath,String  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,getRetryPolicy,RetryPolicy  (){ return retryPolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,lockPath,public Builder  (String path){ instance=new PromotedToLock(PathUtils.validatePath(path) instance.maxLockTime instance.maxLockTimeUnit instance.retryPolicy); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,retryPolicy,public Builder  (RetryPolicy retryPolicy){ instance=new PromotedToLock(instance.path instance.maxLockTime instance.maxLockTimeUnit retryPolicy); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\atomic\PromotedToLock.java,timeout,public Builder  (long maxLockTime TimeUnit maxLockTimeUnit){ instance=new PromotedToLock(instance.path maxLockTime maxLockTimeUnit instance.retryPolicy); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedBarrier.java,DistributedBarrier,public  (CuratorFramework client String barrierPath){ this.client=client; this.barrierPath=PathUtils.validatePath(barrierPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedBarrier.java,notifyFromWatcher,private synchronized void  (){ notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedBarrier.java,process,@Override public void  (WatchedEvent event){ notifyFromWatcher(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedBarrier.java,removeBarrier,public synchronized void  () throws Exception { try { client.delete().forPath(barrierPath); } catch ( KeeperException.NoNodeException ignore) { } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedBarrier.java,setBarrier,public synchronized void  () throws Exception { try { client.create().creatingParentContainersIfNeeded().forPath(barrierPath); } catch ( KeeperException.NodeExistsException ignore) { } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedBarrier.java,waitOnBarrier,public synchronized boolean  (long maxWait TimeUnit unit) throws Exception { long startMs=System.currentTimeMillis(); boolean hasMaxWait=(unit != null); long maxWaitMs=hasMaxWait ? TimeUnit.MILLISECONDS.convert(maxWait unit) : Long.MAX_VALUE; boolean result; for (; ; ) { result=(client.checkExists().usingWatcher(watcher).forPath(barrierPath) == null); if (result) { break; } if (hasMaxWait) { long elapsed=System.currentTimeMillis() - startMs; long thisWaitMs=maxWaitMs - elapsed; if (thisWaitMs <= 0) { break; } wait(thisWaitMs); } else { wait(); } } return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,DistributedDoubleBarrier,"public  (CuratorFramework client String barrierPath int memberQty){ Preconditions.checkState(memberQty > 0 ""memberQty cannot be 0""); this.client=client; this.barrierPath=PathUtils.validatePath(barrierPath); this.memberQty=memberQty; ourPath=ZKPaths.makePath(barrierPath UUID.randomUUID().toString()); readyPath=ZKPaths.makePath(barrierPath READY_NODE); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,apply,@Override public boolean  (String name){ return !name.equals(READY_NODE); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,checkDeleteOurPath,private void  (boolean shouldExist) throws Exception { if (shouldExist) { client.delete().forPath(ourPath); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,enter,public boolean  (long maxWait TimeUnit unit) throws Exception { long startMs=System.currentTimeMillis(); boolean hasMaxWait=(unit != null); long maxWaitMs=hasMaxWait ? TimeUnit.MILLISECONDS.convert(maxWait unit) : Long.MAX_VALUE; boolean readyPathExists=(client.checkExists().usingWatcher(watcher).forPath(readyPath) != null); client.create().creatingParentContainersIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(ourPath); boolean result=(readyPathExists || internalEnter(startMs hasMaxWait maxWaitMs)); if (connectionLost.get()) { throw new KeeperException.ConnectionLossException(); } return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,filterAndSortChildren,private List<String>  (List<String> children){ Iterable<String> filtered=Iterables.filter(children new Predicate<String>(){ @Override public boolean apply( String name){ return !name.equals(READY_NODE); } } ); ArrayList<String> filteredList=Lists.newArrayList(filtered); Collections.sort(filteredList); return filteredList; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,getChildrenForEntering,@VisibleForTesting protected List<String>  () throws Exception { return client.getChildren().forPath(barrierPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,internalEnter,private synchronized boolean  (long startMs boolean hasMaxWait long maxWaitMs) throws Exception { boolean result=true; do { List<String> children=getChildrenForEntering(); int count=(children != null) ? children.size() : 0; if (count >= memberQty) { try { client.create().forPath(readyPath); } catch ( KeeperException.NodeExistsException ignore) { } break; } if (hasMaxWait && !hasBeenNotified.get()) { long elapsed=System.currentTimeMillis() - startMs; long thisWaitMs=maxWaitMs - elapsed; if (thisWaitMs <= 0) { result=false; } else { wait(thisWaitMs); } if (!hasBeenNotified.get()) { result=false; } } else { wait(); } } while (false); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,internalLeave,"private boolean  (long startMs boolean hasMaxWait long maxWaitMs) throws Exception { String ourPathName=ZKPaths.getNodeFromPath(ourPath); boolean ourNodeShouldExist=true; boolean result=true; for (; ; ) { if (connectionLost.get()) { throw new KeeperException.ConnectionLossException(); } List<String> children; try { children=client.getChildren().forPath(barrierPath); } catch ( KeeperException.NoNodeException dummy) { children=Lists.newArrayList(); } children=filterAndSortChildren(children); if ((children == null) || (children.size() == 0)) { break; } int ourIndex=children.indexOf(ourPathName); if ((ourIndex < 0) && ourNodeShouldExist) { if (connectionLost.get()) { break; } else { throw new IllegalStateException(String.format(""Our path (%s) is missing"" ourPathName)); } } if (children.size() == 1) { if (ourNodeShouldExist && !children.get(0).equals(ourPathName)) { throw new IllegalStateException(String.format(""Last path (%s) is not ours (%s)"" children.get(0) ourPathName)); } checkDeleteOurPath(ourNodeShouldExist); break; } Stat stat; boolean IsLowestNode=(ourIndex == 0); if (IsLowestNode) { String highestNodePath=ZKPaths.makePath(barrierPath children.get(children.size() - 1)); stat=client.checkExists().usingWatcher(watcher).forPath(highestNodePath); } else { String lowestNodePath=ZKPaths.makePath(barrierPath children.get(0)); stat=client.checkExists().usingWatcher(watcher).forPath(lowestNodePath); checkDeleteOurPath(ourNodeShouldExist); ourNodeShouldExist=false; } if (stat != null) { if (hasMaxWait) { long elapsed=System.currentTimeMillis() - startMs; long thisWaitMs=maxWaitMs - elapsed; if (thisWaitMs <= 0) { result=false; } else { wait(thisWaitMs); } } else { wait(); } } } try { client.delete().forPath(readyPath); } catch ( KeeperException.NoNodeException ignore) { } return result; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,leave,public synchronized boolean  (long maxWait TimeUnit unit) throws Exception { long startMs=System.currentTimeMillis(); boolean hasMaxWait=(unit != null); long maxWaitMs=hasMaxWait ? TimeUnit.MILLISECONDS.convert(maxWait unit) : Long.MAX_VALUE; return internalLeave(startMs hasMaxWait maxWaitMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,notifyFromWatcher,private synchronized void  (){ hasBeenNotified.set(true); notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\barriers\DistributedDoubleBarrier.java,process,@Override public void  (WatchedEvent event){ connectionLost.set(event.getState() != Event.KeeperState.SyncConnected); notifyFromWatcher(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\EventOperation.java,EventOperation, (PathChildrenCache cache PathChildrenCacheEvent event){ this.cache=cache; this.event=event; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\EventOperation.java,invoke,@Override public void  (){ cache.callListeners(event); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\EventOperation.java,toString,"@Override public String  (){ return ""EventOperation{"" + ""event="" + event + '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\ChildData.java,ChildData,public  (String path Stat stat byte[] data){ this.path=PathUtils.validatePath(path); this.stat=stat; this.data=data; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\ChildData.java,compareTo,@Override public int  (ChildData rhs){ if (this == rhs) { return 0; } if (rhs == null || getClass() != rhs.getClass()) { return -1; } return path.compareTo(rhs.path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\ChildData.java,equals,"@SuppressWarnings(""RedundantIfStatement"") @Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ChildData childData=(ChildData)o; if (!Arrays.equals(data childData.data)) { ret"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\ChildData.java,getData,public byte[]  (){ return data; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\ChildData.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\ChildData.java,getStat,public Stat  (){ return stat; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\ChildData.java,hashCode,@Override public int  (){ int result=path != null ? path.hashCode() : 0; result=31 * result + (stat != null ? stat.hashCode() : 0); result=31 * result + Arrays.hashCode(data); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\ChildData.java,toString,"@Override public String  (){ return ""ChildData{"" + ""path='"" + path + '\''+ ""  stat=""+ stat+ ""  data=""+ Arrays.toString(data)+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\DefaultTreeCacheSelector.java,acceptChild,@Override public boolean  (String fullPath){ return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\DefaultTreeCacheSelector.java,traverseChildren,@Override public boolean  (String fullPath){ return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\GetDataOperation.java,GetDataOperation, (PathChildrenCache cache String fullPath){ this.cache=cache; this.fullPath=PathUtils.validatePath(fullPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\GetDataOperation.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } GetDataOperation that=(GetDataOperation)o; if (!fullPath.equals(that.fullPath)) { return false; } return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\GetDataOperation.java,hashCode,@Override public int  (){ return fullPath.hashCode(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\GetDataOperation.java,invoke,@Override public void  () throws Exception { cache.getDataAndStat(fullPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\GetDataOperation.java,toString,"@Override public String  (){ return ""GetDataOperation{"" + ""fullPath='"" + fullPath + '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,NodeCache,public  (CuratorFramework client String path boolean dataIsCompressed){ this.client=client.newWatcherRemoveCuratorFramework(); this.path=PathUtils.validatePath(path); this.dataIsCompressed=dataIsCompressed; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,apply,"@Override public Void  (NodeCacheListener listener){ try { listener.nodeChanged(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""Calling listener"" e); } return null; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,close,@Override public void  () throws IOException { if (state.compareAndSet(State.STARTED State.CLOSED)) { client.removeWatchers(); listeners.clear(); client.getConnectionStateListenable().removeListener(connectionStateListener); connectionStateListener=null; 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,getClient,public CuratorFramework  (){ return client; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,getCurrentData,public ChildData  (){ return data.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,getListenable,"public ListenerContainer<NodeCacheListener>  (){ Preconditions.checkState(state.get() != State.CLOSED ""Closed""); return listeners; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,handleException,"protected void  (Throwable e){ log.error("""" e); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,internalRebuild,private void  () throws Exception { try { Stat stat=new Stat(); byte[] bytes=dataIsCompressed ? client.getData().decompressed().storingStatIn(stat).forPath(path) : client.getData().storingStatIn(stat).forPath(path); data.set(new ChildData(path stat bytes)); } catch ( KeeperException.NoNodeException e) { data.set(null); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,process,@Override public void  (WatchedEvent event){ try { reset(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,processBackgroundResult,private void  (CuratorEvent event) throws Exception { switch (event.getType()) { case GET_DATA: { if (event.getResultCode() == KeeperException.Code.OK.intValue()) { ChildData childData=new ChildData(path event.getStat() event.getData()); setNewData(childData); } break; } case EXISTS: { if (event.getResultCode() == KeeperException.Code.NONODE.intValue()) { setNewData(null); } else if (event.getResultCode() == KeeperException.Code.OK.intValue()) { if (dataIsCompressed) { client.getData().decompressed().usingWatcher(watcher).inBackground(backgroundCallback).forPath(path); } else { client.getData().usingWatcher(watcher).inBackground(backgroundCallback).forPath(path); } } break; } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { processBackgroundResult(event); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,rebuild,"public void  () throws Exception { Preconditions.checkState(state.get() == State.STARTED ""Not started""); internalRebuild(); reset(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,reset,private void  () throws Exception { if ((state.get() == State.STARTED) && isConnected.get()) { client.checkExists().creatingParentContainersIfNeeded().usingWatcher(watcher).inBackground(backgroundCallback).forPath(path); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,setNewData,"private void  (ChildData newData) throws InterruptedException { ChildData previousData=data.getAndSet(newData); if (!Objects.equal(previousData newData)) { listeners.forEach(new Function<NodeCacheListener Void>(){ @Override public Void apply( NodeCacheListener listener){ try { listener.nodeChanged(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""Calling listener"" e); } return null; } } ); if (rebuildTestExchanger != null) { try { rebuildTestExchanger.exchange(new Object()); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,start,"public void  (boolean buildInitial) throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); client.getConnectionStateListenable().addListener(connectionStateListener); if (buildInitial) { client.checkExists().creatingParentContainersIfNeeded().forPath(path); internalRebuild(); } reset(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\NodeCache.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if ((newState == ConnectionState.CONNECTED) || (newState == ConnectionState.RECONNECTED)) { if (isConnected.compareAndSet(false true)) { try { reset(); } catch ( Exception e) { Thr
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCacheEvent.java,PathChildrenCacheEvent,public  (Type type ChildData data){ this.type=type; this.data=data; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCacheEvent.java,getData,public ChildData  (){ return data; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCacheEvent.java,getInitialData,public List<ChildData>  (){ return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCacheEvent.java,getType,public Type  (){ return type; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCacheEvent.java,toString,"@Override public String  (){ return ""PathChildrenCacheEvent{"" + ""type="" + type + ""  data=""+ data+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,PathChildrenCache,public  (CuratorFramework client String path boolean cacheData boolean dataIsCompressed final CloseableExecutorService executorService){ this.client=client.newWatcherRemoveCuratorFramework(); this.path=PathUtils.validatePath(path); this.cacheData=cacheData; this.dataIsCompressed=dataIsCompressed; this.executorService=executorService; ensureContainers=new EnsureContainers(client path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,apply,@Override public boolean  (ChildData input){ return (input == NULL_CHILD_DATA); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,applyNewData,private void  (String fullPath int resultCode Stat stat byte[] bytes){ if (resultCode == KeeperException.Code.OK.intValue()) { ChildData data=new ChildData(fullPath stat bytes); ChildData previousData=currentData.put(fullPath data); if (previousData == null) { offerOperation(new EventOperation(this new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_ADDED data))); } else if (stat.getMzxid() != previousData.getStat().getMzxid()) { offerOperation(new EventOperation(this new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_UPDATED data))); } updateInitialSet(ZKPaths.getNodeFromPath(fullPath) data); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,callListeners,void  (final PathChildrenCacheEvent event){ listeners.forEach(new Function<PathChildrenCacheListener Void>(){ @Override public Void apply( PathChildrenCacheListener listener){ try { listener.childEvent(client event); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } return null; } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,clear,public void  (){ currentData.clear(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,clearAndRefresh,public void  () throws Exception { currentData.clear(); offerOperation(new RefreshOperation(this RefreshMode.STANDARD)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,clearDataBytes,public boolean  (String fullPath int ifVersion){ ChildData data=currentData.get(fullPath); if (data != null) { if ((ifVersion < 0) || (ifVersion == data.getStat().getVersion())) { if (data.getData() != null) { currentData.replace(fullPath data new ChildData(data.getPath() data.getStat() null)); } return true; } } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,close,@Override public void  () throws IOException { if (state.compareAndSet(State.STARTED State.CLOSED)) { client.getConnectionStateListenable().removeListener(connectionStateListener); listeners.clear(); executorService.close(); client.removeWatchers(); conne
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,ensurePath,protected void  () throws Exception { ensureContainers.ensure(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,getCurrentData,public ChildData  (String fullPath){ return currentData.get(fullPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,getDataAndStat,void  (final String fullPath) throws Exception { BackgroundCallback callback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework client  CuratorEvent event) throws Exception { applyNewData(fullPath event.getResultCode() event.getStat() cacheData ? event.getData() : null); } } ; if (USE_EXISTS && !cacheData) { client.checkExists().usingWatcher(dataWatcher).inBackground(callback).forPath(fullPath); } else { if (dataIsCompressed && cacheData) { client.getData().decompressed().usingWatcher(dataWatcher).inBackground(callback).forPath(fullPath); } else { client.getData().usingWatcher(dataWatcher).inBackground(callback).forPath(fullPath); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,getInitialData,@Override public List<ChildData>  (){ return children; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,getListenable,public ListenerContainer<PathChildrenCacheListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,handleException,"protected void  (Throwable e){ log.error("""" e); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,handleStateChange,private void  (ConnectionState newState){ switch (newState) { case SUSPENDED: { offerOperation(new EventOperation(this new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CONNECTION_SUSPENDED null))); break; } case LOST: { offerOperation(new EventOperation(this new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CONNECTION_LOST null))); break; } case CONNECTED: case RECONNECTED: { try { offerOperation(new RefreshOperation(this RefreshMode.FORCE_GET_DATA_AND_STAT)); offerOperation(new EventOperation(this new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CONNECTION_RECONNECTED null))); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } break; } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,hasUninitialized,private boolean  (Map<String ChildData> localInitialSet){ if (localInitialSet == null) { return false; } Map<String ChildData> uninitializedChildren=Maps.filterValues(localInitialSet new Predicate<ChildData>(){ @Override public boolean apply( ChildData input){ return (input == NULL_CHILD_DATA); } } ); return (uninitializedChildren.size() != 0); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,internalRebuildNode,private void  (String fullPath) throws Exception { if (cacheData) { try { Stat stat=new Stat(); byte[] bytes=dataIsCompressed ? client.getData().decompressed().storingStatIn(stat).forPath(fullPath) : client.getData().storingStatIn(stat).forPath(fullPath); currentData.put(fullPath new ChildData(fullPath stat bytes)); } catch ( KeeperException.NoNodeException ignore) { currentData.remove(fullPath); } } else { Stat stat=client.checkExists().forPath(fullPath); if (stat != null) { currentData.put(fullPath new ChildData(fullPath stat null)); } else { currentData.remove(fullPath); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,maybeOfferInitializedEvent,private void  (Map<String ChildData> localInitialSet){ if (!hasUninitialized(localInitialSet)) { if (initialSet.getAndSet(null) != null) { final List<ChildData> children=ImmutableList.copyOf(localInitialSet.values()); PathChildrenCacheEvent event=new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.INITIALIZED null){ @Override public List<ChildData> getInitialData(){ return children; } } ; offerOperation(new EventOperation(this event)); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,offerOperation,void  (final Operation operation){ if (operationsQuantizer.add(operation)) { submitToExecutor(new Runnable(){ @Override public void run(){ try { operationsQuantizer.remove(operation); operation.invoke(); } catch ( InterruptedException e) { if (state.get() != State.CLOSED) { handleException(e); } Thread.currentThread().interrupt(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } } } ); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,process,@Override public void  (WatchedEvent event){ try { if (event.getType() == Event.EventType.NodeDeleted) { remove(event.getPath()); } else if (event.getType() == Event.EventType.NodeDataChanged) { offerOperation(new GetDataOperation(PathChildrenCache.this e
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,processChildren,private void  (List<String> children RefreshMode mode) throws Exception { Set<String> removedNodes=Sets.newHashSet(currentData.keySet()); for ( String child : children) { removedNodes.remove(ZKPaths.makePath(path child)); } for ( String fullPath : removedNodes) { remove(fullPath); } for ( String name : children) { String fullPath=ZKPaths.makePath(path name); if ((mode == RefreshMode.FORCE_GET_DATA_AND_STAT) || !currentData.containsKey(fullPath)) { getDataAndStat(fullPath); } updateInitialSet(name NULL_CHILD_DATA); } maybeOfferInitializedEvent(initialSet.get()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { applyNewData(fullPath event.getResultCode() event.getStat() cacheData ? event.getData() : null); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,rebuild,"public void  () throws Exception { Preconditions.checkState(state.get() == State.STARTED ""cache has been closed""); ensurePath(); clear(); List<String> children=client.getChildren().forPath(path); for ( String child : children) { String fullPath=ZKPaths.makePath(path child); internalRebuildNode(fullPath); if (rebuildTestExchanger != null) { rebuildTestExchanger.exchange(new Object()); } } offerOperation(new RefreshOperation(this RefreshMode.FORCE_GET_DATA_AND_STAT)); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,rebuildNode,"public void  (String fullPath) throws Exception { Preconditions.checkArgument(ZKPaths.getPathAndNode(fullPath).getPath().equals(path) ""Node is not part of this cache: "" + fullPath); Preconditions.checkState(state.get() == State.STARTED ""cache has been closed""); ensurePath(); internalRebuildNode(fullPath); offerOperation(new RefreshOperation(this RefreshMode.FORCE_GET_DATA_AND_STAT)); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,refresh,"void  (final RefreshMode mode) throws Exception { ensurePath(); final BackgroundCallback callback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework client  CuratorEvent event) throws Exception { if (PathChildrenCache.this.state.get().equals(State.CLOSED)) { PathChildrenCache.this.client.removeWatchers(); return; } if (event.getResultCode() == KeeperException.Code.OK.intValue()) { processChildren(event.getChildren() mode); } else if (event.getResultCode() == KeeperException.Code.NONODE.intValue()) { if (mode == RefreshMode.NO_NODE_EXCEPTION) { log.debug(""KeeperException.NoNodeException received for getChildren() and refresh has failed. Resetting ensureContainers but not refreshing. Path: [{}]"" path); ensureContainers.reset(); } else { log.debug(""KeeperException.NoNodeException received for getChildren(). Resetting ensureContainers. Path: [{}]"" path); ensureContainers.reset(); offerOperation(new RefreshOperation(PathChildrenCache.this RefreshMode.NO_NODE_EXCEPTION)); } } } } ; client.getChildren().usingWatcher(childrenWatcher).inBackground(callback).forPath(path); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,remove,@VisibleForTesting protected void  (String fullPath){ ChildData data=currentData.remove(fullPath); if (data != null) { offerOperation(new EventOperation(this new PathChildrenCacheEvent(PathChildrenCacheEvent.Type.CHILD_REMOVED data))); } Map<String ChildD
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,run,@Override public void  (){ try { operationsQuantizer.remove(operation); operation.invoke(); } catch ( InterruptedException e) { if (state.get() != State.CLOSED) { handleException(e); } Thread.currentThread().interrupt(); } catch ( Exception e) { ThreadUti
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,start,"public void  (StartMode mode) throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""already started""); mode=Preconditions.checkNotNull(mode ""mode cannot be null""); client.getConnectionStateListenable().addListener(connectionStateListener); switch (mode) { case NORMAL: { offerOperation(new RefreshOperation(this RefreshMode.STANDARD)); break; } case BUILD_INITIAL_CACHE: { rebuild(); break; } case POST_INITIALIZED_EVENT: { initialSet.set(Maps.<String ChildData>newConcurrentMap()); offerOperation(new RefreshOperation(this RefreshMode.POST_INITIALIZED)); break; } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ handleStateChange(newState); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,submitToExecutor,private synchronized void  (final Runnable command){ if (state.get() == State.STARTED) { executorService.submit(command); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\PathChildrenCache.java,updateInitialSet,private void  (String name ChildData data){ Map<String ChildData> localInitialSet=initialSet.get(); if (localInitialSet != null) { localInitialSet.put(name data); maybeOfferInitializedEvent(localInitialSet); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCacheEvent.java,TreeCacheEvent,public  (Type type ChildData data){ this.type=type; this.data=data; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCacheEvent.java,getData,public ChildData  (){ return data; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCacheEvent.java,getType,public Type  (){ return type; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCacheEvent.java,toString,"@Override public String  (){ return TreeCacheEvent.class.getSimpleName() + ""{"" + ""type=""+ type+ ""  data=""+ data+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\RefreshOperation.java,RefreshOperation, (PathChildrenCache cache PathChildrenCache.RefreshMode mode){ this.cache=cache; this.mode=mode; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\RefreshOperation.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } RefreshOperation that=(RefreshOperation)o; if (mode != that.mode) { return false; } return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\RefreshOperation.java,hashCode,@Override public int  (){ return mode.hashCode(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\RefreshOperation.java,invoke,@Override public void  () throws Exception { cache.refresh(mode); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\RefreshOperation.java,toString,"@Override public String  (){ return ""RefreshOperation("" + mode + ""){}""; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,Builder,private  (CuratorFramework client String path){ this.client=checkNotNull(client); this.path=validatePath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,TreeCache," (CuratorFramework client String path boolean cacheData boolean dataIsCompressed int maxDepth final ExecutorService executorService boolean createParentNodes TreeCacheSelector selector){ this.createParentNodes=createParentNodes; this.selector=Preconditions.checkNotNull(selector ""selector cannot be null""); this.root=new TreeNode(validatePath(path) null); Preconditions.checkNotNull(client ""client cannot be null""); this.client=client.newWatcherRemoveCuratorFramework(); this.cacheData=cacheData; this.dataIsCompressed=dataIsCompressed; this.maxDepth=maxDepth; this.executorService=Preconditions.checkNotNull(executorService ""executorService cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,TreeNode, (String path TreeNode parent){ this.path=path; this.parent=parent; this.depth=parent == null ? 0 : parent.depth + 1; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,apply,"@Override public Void  (UnhandledErrorListener listener){ try { listener.unhandledError("""" e); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); LOG.error(""Exception handling exception"" e); } return null; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,build,public TreeCache  (){ ExecutorService executor=executorService; if (executor == null) { executor=Executors.newSingleThreadExecutor(defaultThreadFactory); } return new TreeCache(client path cacheData dataIsCompressed maxDepth executor createParentNodes selector); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,callListeners,private void  (final TreeCacheEvent event){ listeners.forEach(new Function<TreeCacheListener Void>(){ @Override public Void apply( TreeCacheListener listener){ try { listener.childEvent(client event); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } return null; } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,close,@Override public void  (){ if (treeState.compareAndSet(TreeState.STARTED TreeState.CLOSED)) { client.removeWatchers(); client.getConnectionStateListenable().removeListener(connectionStateListener); listeners.clear(); executorService.shutdown(); try { root
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,doRefreshChildren,private void  () throws Exception { if (treeState.get() == TreeState.STARTED) { client.getChildren().usingWatcher(this).inBackground(this).forPath(path); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,doRefreshData,private void  () throws Exception { if (treeState.get() == TreeState.STARTED) { if (dataIsCompressed) { client.getData().decompressed().usingWatcher(this).inBackground(this).forPath(path); } else { client.getData().usingWatcher(this).inBackground(this).forPath(path); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,find,private TreeNode  (String findPath){ PathUtils.validatePath(findPath); LinkedList<String> rootElements=new LinkedList<String>(ZKPaths.split(root.path)); LinkedList<String> findElements=new LinkedList<String>(ZKPaths.split(findPath)); while (!rootElements.isEmpty()) { if (findElements.isEmpty()) { return null; } String nextRoot=rootElements.removeFirst(); String nextFind=findElements.removeFirst(); if (!nextFind.equals(nextRoot)) { return null; } } TreeNode current=root; while (!findElements.isEmpty()) { String nextFind=findElements.removeFirst(); ConcurrentMap<String TreeNode> map=current.children; if (map == null) { return null; } current=map.get(nextFind); if (current == null) { return null; } } return current; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,getCurrentChildren,public Map<String ChildData>  (String fullPath){ TreeNode node=find(fullPath); if (node == null || !isLive(node.childData)) { return null; } ConcurrentMap<String TreeNode> map=node.children; Map<String ChildData> result; if (map == null) { result=ImmutableMap.of(); } else { ImmutableMap.Builder<String ChildData> builder=ImmutableMap.builder(); for ( Map.Entry<String TreeNode> entry : map.entrySet()) { ChildData childData=entry.getValue().childData; if (isLive(childData)) { builder.put(entry.getKey() childData); } } result=builder.build(); } return isLive(node.childData) ? result : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,getCurrentData,public ChildData  (String fullPath){ TreeNode node=find(fullPath); if (node == null) { return null; } ChildData result=node.childData; return isLive(result) ? result : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,getListenable,public Listenable<TreeCacheListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,getUnhandledErrorListenable,@VisibleForTesting public Listenable<UnhandledErrorListener>  (){ return errorListeners; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,handleException,"private void  (final Throwable e){ if (errorListeners.size() == 0) { LOG.error("""" e); } else { errorListeners.forEach(new Function<UnhandledErrorListener Void>(){ @Override public Void apply( UnhandledErrorListener listener){ try { listener.unhandledError("""" e); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); LOG.error(""Exception handling exception"" e); } return null; } } ); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,handleStateChange,private void  (ConnectionState newState){ switch (newState) { case SUSPENDED: publishEvent(TreeCacheEvent.Type.CONNECTION_SUSPENDED); break; case LOST: isInitialized.set(false); publishEvent(TreeCacheEvent.Type.CONNECTION_LOST); break; case CONNECTED: try { root.wasCreated(); } catch (Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } break; case RECONNECTED: try { root.wasReconnected(); publishEvent(TreeCacheEvent.Type.CONNECTION_RECONNECTED); } catch (Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } break; } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,isLive,private static boolean  (ChildData cd){ return cd != null && cd != DEAD; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,newBuilder,public static Builder  (CuratorFramework client String path){ return new Builder(client path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,process,"@Override public void  (WatchedEvent event){ LOG.debug(""process: {}"" event); try { switch (event.getType()) { case NodeCreated: Preconditions.checkState(parent == null ""unexpected NodeCreated on non-root node""); wasCreated(); break; case NodeChildrenChang"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,processResult,"@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { LOG.debug(""processResult: {}"" event); Stat newStat=event.getStat(); switch (event.getType()) { case EXISTS: Preconditions.checkState(parent == null ""unexpected EXISTS o"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,publishEvent,"private void  (final TreeCacheEvent event){ if (treeState.get() != TreeState.CLOSED) { LOG.debug(""publishEvent: {}"" event); executorService.submit(new Runnable(){ @Override public void run(){ try { callListeners(event); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } } } ); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,refresh,private void  () throws Exception { if ((depth < maxDepth) && selector.traverseChildren(path)) { outstandingOps.addAndGet(2); doRefreshData(); doRefreshChildren(); } else { refreshData(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,refreshChildren,private void  () throws Exception { if ((depth < maxDepth) && selector.traverseChildren(path)) { outstandingOps.incrementAndGet(); doRefreshChildren(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,refreshData,private void  () throws Exception { outstandingOps.incrementAndGet(); doRefreshData(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,run,@Override public void  (){ try { callListeners(event); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); handleException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,setCacheData,public Builder  (boolean cacheData){ this.cacheData=cacheData; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,setCreateParentNodes,public Builder  (boolean createParentNodes){ this.createParentNodes=createParentNodes; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,setDataIsCompressed,public Builder  (boolean dataIsCompressed){ this.dataIsCompressed=dataIsCompressed; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,setExecutor,public Builder  (ExecutorService executorService){ this.executorService=checkNotNull(executorService); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,setMaxDepth,public Builder  (int maxDepth){ this.maxDepth=maxDepth; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,setSelector,public Builder  (TreeCacheSelector selector){ this.selector=selector; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,start,"public TreeCache  () throws Exception { Preconditions.checkState(treeState.compareAndSet(TreeState.LATENT TreeState.STARTED) ""already started""); if (createParentNodes) { client.createContainers(root.path); } client.getConnectionStateListenable().addListener(connectionStateListener); if (client.getZookeeperClient().isConnected()) { root.wasCreated(); } return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ handleStateChange(newState); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,wasCreated,void  () throws Exception { refresh(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,wasDeleted,void  () throws Exception { ChildData oldChildData=childDataUpdater.getAndSet(this DEAD); if (oldChildData == DEAD) { return; } ConcurrentMap<String TreeNode> childMap=childrenUpdater.getAndSet(this null); if (childMap != null) { ArrayList<TreeNode> childCopy=new ArrayList<TreeNode>(childMap.values()); childMap.clear(); for ( TreeNode child : childCopy) { child.wasDeleted(); } } if (treeState.get() == TreeState.CLOSED) { return; } if (isLive(oldChildData)) { publishEvent(TreeCacheEvent.Type.NODE_REMOVED oldChildData); } if (parent == null) { client.checkExists().usingWatcher(this).inBackground(this).forPath(path); } else { ConcurrentMap<String TreeNode> parentChildMap=parent.children; if (parentChildMap != null) { parentChildMap.remove(ZKPaths.getNodeFromPath(path) this); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\cache\TreeCache.java,wasReconnected,void  () throws Exception { refresh(); ConcurrentMap<String TreeNode> childMap=children; if (childMap != null) { for ( TreeNode child : childMap.values()) { child.wasReconnected(); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\CancelLeadershipException.java,CancelLeadershipException,public  (Throwable cause){ super(cause); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,LeaderLatch,"public  (CuratorFramework client String latchPath String id CloseMode closeMode){ this.client=Preconditions.checkNotNull(client ""client cannot be null"").newWatcherRemoveCuratorFramework(); this.latchPath=PathUtils.validatePath(latchPath); this.id=Preconditions.checkNotNull(id ""id cannot be null""); this.closeMode=Preconditions.checkNotNull(closeMode ""closeMode cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,addListener,public void  (LeaderLatchListener listener Executor executor){ listeners.addListener(listener executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,apply,@Override public Void  (LeaderLatchListener input){ input.isLeader(); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,await,public boolean  (long timeout TimeUnit unit) throws InterruptedException { long waitNanos=TimeUnit.NANOSECONDS.convert(timeout unit); synchronized (this) { while ((waitNanos > 0) && (state.get() == State.STARTED) && !hasLeadership.get()) { long startNanos=System.nanoTime(); TimeUnit.NANOSECONDS.timedWait(this waitNanos); long elapsed=System.nanoTime() - startNanos; waitNanos-=elapsed; } } return hasLeadership(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,cancelStartTask,@VisibleForTesting protected boolean  (){ Future<?> localStartTask=startTask.getAndSet(null); if (localStartTask != null) { localStartTask.cancel(true); return true; } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,checkLeadership,"private void  (List<String> children) throws Exception { final String localOurPath=ourPath.get(); List<String> sortedChildren=LockInternals.getSortedChildren(LOCK_NAME sorter children); int ourIndex=(localOurPath != null) ? sortedChildren.indexOf(ZKPaths.getNodeFromPath(localOurPath)) : -1; if (ourIndex < 0) { log.error(""Can't find our node. Resetting. Index: "" + ourIndex); reset(); } else if (ourIndex == 0) { setLeadership(true); } else { String watchPath=sortedChildren.get(ourIndex - 1); Watcher watcher=new Watcher(){ @Override public void process( WatchedEvent event){ if ((state.get() == State.STARTED) && (event.getType() == Event.EventType.NodeDeleted) && (localOurPath != null)) { try { getChildren(); } catch ( Exception ex) { ThreadUtils.checkInterrupted(ex); log.error(""An error occurred checking the leadership."" ex); } } } } ; BackgroundCallback callback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework client  CuratorEvent event) throws Exception { if (event.getResultCode() == KeeperException.Code.NONODE.intValue()) { reset(); } } } ; client.getData().usingWatcher(watcher).inBackground(callback).forPath(ZKPaths.makePath(latchPath watchPath)); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,close,"public synchronized void  (CloseMode closeMode) throws IOException { Preconditions.checkState(state.compareAndSet(State.STARTED State.CLOSED) ""Already closed or has not been started""); Preconditions.checkNotNull(closeMode ""closeMode cannot be null""); cancelStartTask(); try { setNode(null); client.removeWatchers(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new IOException(e); } finally { client.getConnectionStateListenable().removeListener(listener); switch (closeMode) { case NOTIFY_LEADER: { setLeadership(false); listeners.clear(); break; } default : { listeners.clear(); setLeadership(false); break; } } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,fixForSorting,@Override public String  (String str String lockName){ return StandardLockInternalsDriver.standardFixForSorting(str lockName); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,getChildren,private void  () throws Exception { BackgroundCallback callback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework client  CuratorEvent event) throws Exception { if (event.getResultCode() == KeeperException.Code.OK.intValue()) { checkLeadership(event.getChildren()); } } } ; client.getChildren().inBackground(callback).forPath(ZKPaths.makePath(latchPath null)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,getLeader,public Participant  () throws Exception { Collection<String> participantNodes=LockInternals.getParticipantNodes(client latchPath LOCK_NAME sorter); return LeaderSelector.getLeader(client participantNodes); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,getParticipants,public Collection<Participant>  () throws Exception { Collection<String> participantNodes=LockInternals.getParticipantNodes(client latchPath LOCK_NAME sorter); return LeaderSelector.getParticipants(client participantNodes); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,getState,public State  (){ return state.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,handleStateChange,"private void  (ConnectionState newState){ switch (newState) { default : { break; } case RECONNECTED: { try { if (client.getConnectionStateErrorPolicy().isErrorState(ConnectionState.SUSPENDED) || !hasLeadership.get()) { reset(); } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""Could not reset leader latch"" e); setLeadership(false); } break; } case SUSPENDED: { if (client.getConnectionStateErrorPolicy().isErrorState(ConnectionState.SUSPENDED)) { setLeadership(false); } break; } case LOST: { setLeadership(false); break; } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,hasLeadership,public boolean  (){ return (state.get() == State.STARTED) && hasLeadership.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,internalStart,"private synchronized void  (){ if (state.get() == State.STARTED) { client.getConnectionStateListenable().addListener(listener); try { reset(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""An error occurred checking resetting leadership."" e); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,process,"@Override public void  (WatchedEvent event){ if ((state.get() == State.STARTED) && (event.getType() == Event.EventType.NodeDeleted) && (localOurPath != null)) { try { getChildren(); } catch ( Exception ex) { ThreadUtils.checkInterrupted(ex); log.error(""An"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getResultCode() == KeeperException.Code.OK.intValue()) { checkLeadership(event.getChildren()); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,removeListener,public void  (LeaderLatchListener listener){ listeners.removeListener(listener); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,reset,@VisibleForTesting void  () throws Exception { setLeadership(false); setNode(null); BackgroundCallback callback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework client  CuratorEvent event) throws Exception { if (debugResetWa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,run,@Override public void  (){ try { internalStart(); } finally { startTask.set(null); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,setLeadership,private synchronized void  (boolean newValue){ boolean oldValue=hasLeadership.getAndSet(newValue); if (oldValue && !newValue) { listeners.forEach(new Function<LeaderLatchListener Void>(){ @Override public Void apply( LeaderLatchListener listener){ listener.notLeader(); return null; } } ); } else if (!oldValue && newValue) { listeners.forEach(new Function<LeaderLatchListener Void>(){ @Override public Void apply( LeaderLatchListener input){ input.isLeader(); return null; } } ); } notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,setNode,private void  (String newValue) throws Exception { String oldPath=ourPath.getAndSet(newValue); if (oldPath != null) { client.delete().guaranteed().inBackground().forPath(oldPath); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,start,"public void  () throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); startTask.set(AfterConnectionEstablished.execute(client new Runnable(){ @Override public void run(){ try { internalStart(); } finally { startTask.set(null); } } } )); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderLatch.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ handleStateChange(newState); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,LeaderSelector,"public  (CuratorFramework client String leaderPath CloseableExecutorService executorService LeaderSelectorListener listener){ Preconditions.checkNotNull(client ""client cannot be null""); PathUtils.validatePath(leaderPath); Preconditions.checkNotNull(listener ""listener cannot be null""); this.client=client; this.listener=new WrappedListener(this listener); hasLeadership=false; this.executorService=executorService; mutex=new InterProcessMutex(client leaderPath){ @Override protected byte[] getLockNodeBytes(){ return (id.length() > 0) ? getIdBytes(id) : null; } } ; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,WrappedListener,public  (LeaderSelector leaderSelector LeaderSelectorListener listener){ this.leaderSelector=leaderSelector; this.listener=listener; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,autoRequeue,public void  (){ autoRequeue.set(true); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,awaitTermination,@Override public boolean  (long timeout TimeUnit unit) throws InterruptedException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,call,@Override public Void  () throws Exception { try { doWorkLoop(); } finally { clearIsQueued(); if (autoRequeue.get()) { internalRequeue(); } } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,clearIsQueued,private synchronized void  (){ isQueued=false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,close,"public synchronized void  (){ Preconditions.checkState(state.compareAndSet(State.STARTED State.CLOSED) ""Already closed or has not been started""); client.getConnectionStateListenable().removeListener(listener); executorService.close(); ourTask.set(null); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,doWork,@VisibleForTesting void  () throws Exception { hasLeadership=false; try { mutex.acquire(); hasLeadership=true; try { if (debugLeadershipLatch != null) { debugLeadershipLatch.countDown(); } if (debugLeadershipWaitLatch != null) { debugLeadershipWaitLatch.a
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,doWorkLoop,private void  () throws Exception { KeeperException exception=null; try { doWork(); } catch ( KeeperException.ConnectionLossException e) { exception=e; } catch ( KeeperException.SessionExpiredException e) { exception=e; } catch ( InterruptedException ignore) { Thread.currentThread().interrupt(); } if ((exception != null) && !autoRequeue.get()) { throw exception; } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,execute,@Override public void  (Runnable command){ try { executor.execute(command); } finally { isShutdown=true; isTerminated=true; } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,getIdBytes,"static byte[]  (String id){ try { return id.getBytes(""UTF-8""); } catch ( UnsupportedEncodingException e) { throw new Error(e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,getLeader,static Participant  (CuratorFramework client Collection<String> participantNodes) throws Exception { Participant result=null; if (participantNodes.size() > 0) { Iterator<String> iter=participantNodes.iterator(); while (iter.hasNext()) { result=participantForPath(client iter.next() true); if (result != null) { break; } } } if (result == null) { result=new Participant(); } return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,getLockNodeBytes,@Override protected byte[]  (){ return (id.length() > 0) ? getIdBytes(id) : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,getParticipants,static Collection<Participant>  (CuratorFramework client Collection<String> participantNodes) throws Exception { ImmutableList.Builder<Participant> builder=ImmutableList.builder(); boolean isLeader=true; for ( String path : participantNodes) { Participant participant=participantForPath(client path isLeader); if (participant != null) { builder.add(participant); isLeader=false; } } return builder.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,hasLeadership,public boolean  (){ return hasLeadership; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,internalRequeue,private synchronized boolean  (){ if (!isQueued && (state.get() == State.STARTED)) { isQueued=true; Future<Void> task=executorService.submit(new Callable<Void>(){ @Override public Void call() throws Exception { try { doWorkLoop(); } finally { clearIsQueued(); if (autoRequeue.get()) { internalRequeue(); } } return null; } } ); ourTask.set(task); return true; } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,interruptLeadership,public synchronized void  (){ Future<?> task=ourTask.get(); if (task != null) { task.cancel(true); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,isShutdown,@Override public boolean  (){ return isShutdown; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,isTerminated,@Override public boolean  (){ return isTerminated; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,participantForPath,"private static Participant  (CuratorFramework client String path boolean markAsLeader) throws Exception { try { byte[] bytes=client.getData().forPath(path); String thisId=new String(bytes ""UTF-8""); return new Participant(thisId markAsLeader); } catch ( KeeperException.NoNodeException e) { return null; } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,requeue,"public boolean  (){ Preconditions.checkState(state.get() == State.STARTED ""close() has already been called""); return internalRequeue(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,setId,"public void  (String id){ Preconditions.checkNotNull(id ""id cannot be null""); this.id=id; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,shutdown,@Override public void  (){ isShutdown=true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,shutdownNow,@Override public List<Runnable>  (){ return Lists.newArrayList(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,start,"public void  (){ Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); Preconditions.checkState(!executorService.isShutdown() ""Already started""); Preconditions.checkState(!hasLeadership ""Already has leadership""); client.getConnectionStateListenable().addListener(listener); requeue(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ try { listener.stateChanged(client newState); } catch ( CancelLeadershipException dummy) { leaderSelector.interruptLeadership(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,takeLeadership,@Override public void  (CuratorFramework client) throws Exception { listener.takeLeadership(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelector.java,wrapExecutor,private static ExecutorService  (final Executor executor){ return new AbstractExecutorService(){ private volatile boolean isShutdown=false; private volatile boolean isTerminated=false; @Override public void shutdown(){ isShutdown=true; } @Override public List<Runnable> shutdownNow(){ return Lists.newArrayList(); } @Override public boolean isShutdown(){ return isShutdown; } @Override public boolean isTerminated(){ return isTerminated; } @Override public boolean awaitTermination( long timeout  TimeUnit unit) throws InterruptedException { throw new UnsupportedOperationException(); } @Override public void execute( Runnable command){ try { executor.execute(command); } finally { isShutdown=true; isTerminated=true; } } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\Participant.java,Participant," (){ this("""" false); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\Participant.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } Participant that=(Participant)o; if (isLeader != that.isLeader) { return false; } if (!id.equals(that.id)) { return false;
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\Participant.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\Participant.java,hashCode,@Override public int  (){ int result=id.hashCode(); result=31 * result + (isLeader ? 1 : 0); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\Participant.java,isLeader,public boolean  (){ return isLeader; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\Participant.java,toString,"@Override public String  (){ return ""Participant{"" + ""id='"" + id + '\''+ ""  isLeader=""+ isLeader+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,ChildReaper,public  (CuratorFramework client String path Reaper.Mode mode ScheduledExecutorService executor int reapingThresholdMs String leaderPath Set<String> lockSchema){ this.client=client; this.mode=mode; this.executor=new CloseableScheduledExecutorService(executor); this.reapingThresholdMs=reapingThresholdMs; if (leaderPath != null) { leaderLatch=new LeaderLatch(client leaderPath); } else { leaderLatch=null; } this.reaper=new Reaper(client executor reapingThresholdMs leaderLatch); this.lockSchema=lockSchema; addPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,addPath,public ChildReaper  (String path){ paths.add(PathUtils.validatePath(path)); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,addPathToReaperIfEmpty,"private void  (String path) throws Exception { Stat stat=client.checkExists().forPath(path); if ((stat != null) && (stat.getNumChildren() == 0)) { log.info(""Adding "" + path); reaper.addPath(path mode); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,close,@Override public void  () throws IOException { if (state.compareAndSet(State.STARTED State.CLOSED)) { CloseableUtils.closeQuietly(reaper); if (leaderLatch != null) { CloseableUtils.closeQuietly(leaderLatch); } task.cancel(true); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,doWork,"private void  (){ if (shouldDoWork()) { if ((pathIterator == null) || !pathIterator.hasNext()) { pathIterator=paths.iterator(); } while (pathIterator.hasNext()) { String path=pathIterator.next(); try { int maxChildren=this.maxChildren.get(); if (maxChildren > 0) { Stat stat=client.checkExists().forPath(path); if ((stat != null) && (stat.getNumChildren() > maxChildren)) { warnMaxChildren(path stat); continue; } } List<String> children=client.getChildren().forPath(path); log.info(String.format(""Found %d children for %s"" children.size() path)); for ( String name : children) { String childPath=ZKPaths.makePath(path name); addPathToReaperIfEmpty(childPath); for ( String subNode : lockSchema) { addPathToReaperIfEmpty(ZKPaths.makePath(childPath subNode)); } } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""Could not get children for path: "" + path e); } } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,newExecutorService,"public static ScheduledExecutorService  (){ return ThreadUtils.newFixedThreadScheduledPool(2 ""ChildReaper""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,removePath,public boolean  (String path){ return paths.remove(PathUtils.validatePath(path)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,run,@Override public void  (){ doWork(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,setMaxChildren,public void  (int maxChildren){ this.maxChildren.set(maxChildren); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,shouldDoWork,private boolean  (){ return this.leaderLatch == null || this.leaderLatch.hasLeadership(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,start,"public void  () throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); task=executor.scheduleWithFixedDelay(new Runnable(){ @Override public void run(){ doWork(); } }  reapingThresholdMs reapingThresholdMs TimeUnit.MILLISECONDS); if (leaderLatch != null) { leaderLatch.start(); } reaper.start(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\ChildReaper.java,warnMaxChildren,"@VisibleForTesting protected void  (String path Stat stat){ log.warn(String.format(""Skipping %s as it has too many children: %d"" path stat.getNumChildren())); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\leader\LeaderSelectorListenerAdapter.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (client.getConnectionStateErrorPolicy().isErrorState(newState)) { throw new CancelLeadershipException(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMultiLock.java,InterProcessMultiLock,public  (List<InterProcessLock> locks){ this.locks=ImmutableList.copyOf(locks); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMultiLock.java,acquire,@Override public boolean  (long time TimeUnit unit) throws Exception { Exception exception=null; List<InterProcessLock> acquired=Lists.newArrayList(); boolean success=true; for ( InterProcessLock lock : locks) { try { if (unit == null) { lock.acquire(); a
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMultiLock.java,isAcquiredInThisProcess,@Override public synchronized boolean  (){ for ( InterProcessLock lock : locks) { if (!lock.isAcquiredInThisProcess()) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMultiLock.java,makeLocks,private static List<InterProcessLock>  (CuratorFramework client List<String> paths){ ImmutableList.Builder<InterProcessLock> builder=ImmutableList.builder(); for ( String path : paths) { InterProcessLock lock=new InterProcessMutex(client path); builder.add(lock); } return builder.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMultiLock.java,release,@Override public synchronized void  () throws Exception { Exception baseException=null; for ( InterProcessLock lock : reverse(locks)) { try { lock.release(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); if (baseException == null) { baseExcept
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,InterProcessMutex, (CuratorFramework client String path String lockName int maxLeases LockInternalsDriver driver){ basePath=PathUtils.validatePath(path); internals=new LockInternals(client driver path lockName maxLeases); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,LockData,private  (Thread owningThread String lockPath){ this.owningThread=owningThread; this.lockPath=lockPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,acquire,@Override public boolean  (long time TimeUnit unit) throws Exception { return internalLock(time unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,getLockNodeBytes,protected byte[]  (){ return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,getLockPath,protected String  (){ LockData lockData=threadData.get(Thread.currentThread()); return lockData != null ? lockData.lockPath : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,getParticipantNodes,public Collection<String>  () throws Exception { return LockInternals.getParticipantNodes(internals.getClient() basePath internals.getLockName() internals.getDriver()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,internalLock,private boolean  (long time TimeUnit unit) throws Exception { Thread currentThread=Thread.currentThread(); LockData lockData=threadData.get(currentThread); if (lockData != null) { lockData.lockCount.incrementAndGet(); return true; } String lockPath=internals.attemptLock(time unit getLockNodeBytes()); if (lockPath != null) { LockData newLockData=new LockData(currentThread lockPath); threadData.put(currentThread newLockData); return true; } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,isAcquiredInThisProcess,@Override public boolean  (){ return (threadData.size() > 0); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,isOwnedByCurrentThread,public boolean  (){ LockData lockData=threadData.get(Thread.currentThread()); return (lockData != null) && (lockData.lockCount.get() > 0); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,makeRevocable,@Override public void  (final RevocationListener<InterProcessMutex> listener Executor executor){ internals.makeRevocable(new RevocationSpec(executor new Runnable(){ @Override public void run(){ listener.revocationRequested(InterProcessMutex.this); } } ));
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,release,"@Override public void  () throws Exception { Thread currentThread=Thread.currentThread(); LockData lockData=threadData.get(currentThread); if (lockData == null) { throw new IllegalMonitorStateException(""You do not own the lock: "" + basePath); } int newLoc"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessMutex.java,run,@Override public void  (){ listener.revocationRequested(InterProcessMutex.this); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,InterProcessReadWriteLock,public  (CuratorFramework client String basePath byte[] lockData){ lockData=(lockData == null) ? null : Arrays.copyOf(lockData lockData.length); writeMutex=new InternalInterProcessMutex(client basePath WRITE_LOCK_NAME lockData 1 new SortingLockInternalsDriver(){ @Override public PredicateResults getsTheLock( CuratorFramework client  List<String> children  String sequenceNodeName  int maxLeases) throws Exception { return super.getsTheLock(client children sequenceNodeName maxLeases); } } ); readMutex=new InternalInterProcessMutex(client basePath READ_LOCK_NAME lockData Integer.MAX_VALUE new SortingLockInternalsDriver(){ @Override public PredicateResults getsTheLock( CuratorFramework client  List<String> children  String sequenceNodeName  int maxLeases) throws Exception { return readLockPredicate(children sequenceNodeName); } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,InternalInterProcessMutex, (CuratorFramework client String path String lockName byte[] lockData int maxLeases LockInternalsDriver driver){ super(client path lockName maxLeases driver); this.lockName=lockName; this.lockData=lockData; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,apply,@Override public boolean  (String node){ return node.contains(lockName); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,fixForSorting,@Override public final String  (String str String lockName){ str=super.fixForSorting(str READ_LOCK_NAME); str=super.fixForSorting(str WRITE_LOCK_NAME); return str; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,getLockNodeBytes,@Override protected byte[]  (){ return lockData; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,getParticipantNodes,@Override public Collection<String>  () throws Exception { Collection<String> nodes=super.getParticipantNodes(); Iterable<String> filtered=Iterables.filter(nodes new Predicate<String>(){ @Override public boolean apply( String node){ return node.contains(l
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,getsTheLock,@Override public PredicateResults  (CuratorFramework client List<String> children String sequenceNodeName int maxLeases) throws Exception { return readLockPredicate(children sequenceNodeName); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,readLock,public InterProcessMutex  (){ return readMutex; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,readLockPredicate,private PredicateResults  (List<String> children String sequenceNodeName) throws Exception { if (writeMutex.isOwnedByCurrentThread()) { return new PredicateResults(null true); } int index=0; int firstWriteIndex=Integer.MAX_VALUE; int ourIndex=-1; for ( String node : children) { if (node.contains(WRITE_LOCK_NAME)) { firstWriteIndex=Math.min(index firstWriteIndex); } else if (node.startsWith(sequenceNodeName)) { ourIndex=index; break; } ++index; } StandardLockInternalsDriver.validateOurIndex(sequenceNodeName ourIndex); boolean getsTheLock=(ourIndex < firstWriteIndex); String pathToWatch=getsTheLock ? null : children.get(firstWriteIndex); return new PredicateResults(pathToWatch getsTheLock); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessReadWriteLock.java,writeLock,public InterProcessMutex  (){ return writeMutex; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,InterProcessSemaphore,private  (CuratorFramework client String path int maxLeases SharedCountReader count){ internals=new LockInternals(client new StandardLockInternalsDriver() path LOCK_NAME (count != null) ? count.getCount() : maxLeases); if (count != null) { count.addListener(new SharedCountListener(){ @Override public void countHasChanged( SharedCountReader sharedCount  int newCount) throws Exception { internals.setMaxLeases(newCount); } @Override public void stateChanged( CuratorFramework client  ConnectionState newState){ } } ); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,acquire,"public Collection<Lease>  (int qty long time TimeUnit unit) throws Exception { long startMs=System.currentTimeMillis(); long waitMs=TimeUnit.MILLISECONDS.convert(time unit); Preconditions.checkArgument(qty > 0 ""qty cannot be 0""); ImmutableList.Builder<Lease> builder=ImmutableList.builder(); try { while (qty-- > 0) { long elapsedMs=System.currentTimeMillis() - startMs; long thisWaitMs=waitMs - elapsedMs; String path=(thisWaitMs > 0) ? internals.attemptLock(thisWaitMs TimeUnit.MILLISECONDS null) : null; if (path == null) { returnAll(builder.build()); return null; } builder.add(makeLease(path)); } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); returnAll(builder.build()); throw e; } return builder.build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,close,"@Override public void  () throws IOException { try { internals.releaseLock(path); } catch ( KeeperException.NoNodeException e) { log.warn(""Lease already released"" e); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new IOException(e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,countHasChanged,@Override public void  (SharedCountReader sharedCount int newCount) throws Exception { internals.setMaxLeases(newCount); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,getData,@Override public byte[]  () throws Exception { return internals.getClient().getData().forPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,getNodeName,@Override public String  (){ return ZKPaths.getNodeFromPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,makeLease,"private Lease  (final String path){ return new Lease(){ @Override public void close() throws IOException { try { internals.releaseLock(path); } catch ( KeeperException.NoNodeException e) { log.warn(""Lease already released"" e); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new IOException(e); } } @Override public byte[] getData() throws Exception { return internals.getClient().getData().forPath(path); } @Override public String getNodeName(){ return ZKPaths.getNodeFromPath(path); } } ; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,returnAll,public void  (Collection<Lease> leases){ for ( Lease l : leases) { CloseableUtils.closeQuietly(l); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphore.java,returnLease,public void  (Lease lease){ CloseableUtils.closeQuietly(lease); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreMutex.java,InterProcessSemaphoreMutex,public  (CuratorFramework client String path){ watcherRemoveClient=client.newWatcherRemoveCuratorFramework(); this.semaphore=new InterProcessSemaphoreV2(watcherRemoveClient path 1); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreMutex.java,acquire,@Override public boolean  (long time TimeUnit unit) throws Exception { Lease acquiredLease=semaphore.acquire(time unit); if (acquiredLease == null) { return false; } lease=acquiredLease; return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreMutex.java,isAcquiredInThisProcess,@Override public boolean  (){ return (lease != null); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreMutex.java,release,"@Override public void  () throws Exception { Lease lease=this.lease; Preconditions.checkState(lease != null ""Not acquired""); this.lease=null; lease.close(); watcherRemoveClient.removeWatchers(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,InterProcessSemaphoreV2,private  (CuratorFramework client String path int maxLeases SharedCountReader count){ this.client=client.newWatcherRemoveCuratorFramework(); path=PathUtils.validatePath(path); lock=new InterProcessMutex(client ZKPaths.makePath(path LOCK_PARENT)); this.maxLeases=(count != null) ? count.getCount() : maxLeases; leasesPath=ZKPaths.makePath(path LEASE_PARENT); if (count != null) { count.addListener(new SharedCountListener(){ @Override public void countHasChanged( SharedCountReader sharedCount  int newCount) throws Exception { InterProcessSemaphoreV2.this.maxLeases=newCount; notifyFromWatcher(); } @Override public void stateChanged( CuratorFramework client  ConnectionState newState){ } } ); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,acquire,"public Collection<Lease>  (int qty long time TimeUnit unit) throws Exception { long startMs=System.currentTimeMillis(); boolean hasWait=(unit != null); long waitMs=hasWait ? TimeUnit.MILLISECONDS.convert(time unit) : 0; Preconditions.checkArgument(qty > 0 ""qty cannot be 0""); ImmutableList.Builder<Lease> builder=ImmutableList.builder(); boolean success=false; try { while (qty-- > 0) { int retryCount=0; long startMillis=System.currentTimeMillis(); boolean isDone=false; while (!isDone) { switch (internalAcquire1Lease(builder startMs hasWait waitMs)) { case CONTINUE: { isDone=true; break; } case RETURN_NULL: { return null; } case RETRY_DUE_TO_MISSING_NODE: { if (!client.getZookeeperClient().getRetryPolicy().allowRetry(retryCount++ System.currentTimeMillis() - startMillis RetryLoop.getDefaultRetrySleeper())) { throw new KeeperException.NoNodeException(""Sequential path not found - possible session loss""); } break; } } } } success=true; } finally { if (!success) { returnAll(builder.build()); } } return builder.build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,close,"@Override public void  () throws IOException { try { client.delete().guaranteed().forPath(path); } catch ( KeeperException.NoNodeException e) { log.warn(""Lease already released"" e); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new IOExc"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,countHasChanged,@Override public void  (SharedCountReader sharedCount int newCount) throws Exception { InterProcessSemaphoreV2.this.maxLeases=newCount; notifyFromWatcher(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,getData,@Override public byte[]  () throws Exception { return client.getData().forPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,getNodeName,@Override public String  (){ return ZKPaths.getNodeFromPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,getParticipantNodes,public Collection<String>  () throws Exception { return client.getChildren().forPath(leasesPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,getThisWaitMs,private long  (long startMs long waitMs){ long elapsedMs=System.currentTimeMillis() - startMs; return waitMs - elapsedMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,internalAcquire1Lease,"private InternalAcquireResult  (ImmutableList.Builder<Lease> builder long startMs boolean hasWait long waitMs) throws Exception { if (client.getState() != CuratorFrameworkState.STARTED) { return InternalAcquireResult.RETURN_NULL; } if (hasWait) { long thisWaitMs=getThisWaitMs(startMs waitMs); if (!lock.acquire(thisWaitMs TimeUnit.MILLISECONDS)) { return InternalAcquireResult.RETURN_NULL; } } else { lock.acquire(); } Lease lease=null; try { PathAndBytesable<String> createBuilder=client.create().creatingParentContainersIfNeeded().withProtection().withMode(CreateMode.EPHEMERAL_SEQUENTIAL); String path=(nodeData != null) ? createBuilder.forPath(ZKPaths.makePath(leasesPath LEASE_BASE_NAME) nodeData) : createBuilder.forPath(ZKPaths.makePath(leasesPath LEASE_BASE_NAME)); String nodeName=ZKPaths.getNodeFromPath(path); lease=makeLease(path); if (debugAcquireLatch != null) { debugAcquireLatch.await(); } try { synchronized (this) { for (; ; ) { List<String> children; try { children=client.getChildren().usingWatcher(watcher).forPath(leasesPath); } catch ( Exception e) { if (debugFailedGetChildrenLatch != null) { debugFailedGetChildrenLatch.countDown(); } returnLease(lease); throw e; } if (!children.contains(nodeName)) { log.error(""Sequential path not found: "" + path); returnLease(lease); return InternalAcquireResult.RETRY_DUE_TO_MISSING_NODE; } if (children.size() <= maxLeases) { break; } if (hasWait) { long thisWaitMs=getThisWaitMs(startMs waitMs); if (thisWaitMs <= 0) { returnLease(lease); return InternalAcquireResult.RETURN_NULL; } wait(thisWaitMs); } else { wait(); } } } } finally { client.removeWatchers(); } } finally { lock.release(); } builder.add(Preconditions.checkNotNull(lease)); return InternalAcquireResult.CONTINUE; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,makeLease,"private Lease  (final String path){ return new Lease(){ @Override public void close() throws IOException { try { client.delete().guaranteed().forPath(path); } catch ( KeeperException.NoNodeException e) { log.warn(""Lease already released"" e); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new IOException(e); } } @Override public byte[] getData() throws Exception { return client.getData().forPath(path); } @Override public String getNodeName(){ return ZKPaths.getNodeFromPath(path); } } ; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,notifyFromWatcher,private synchronized void  (){ notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,process,@Override public void  (WatchedEvent event){ notifyFromWatcher(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,returnAll,public void  (Collection<Lease> leases){ for ( Lease l : leases) { CloseableUtils.closeQuietly(l); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,returnLease,public void  (Lease lease){ CloseableUtils.closeQuietly(lease); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\InterProcessSemaphoreV2.java,setNodeData,public void  (byte[] nodeData){ this.nodeData=(nodeData != null) ? Arrays.copyOf(nodeData nodeData.length) : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Locker.java,Locker,public  (InterProcessLock lock) throws Exception { this.lock=lock; acquireLock(lock); acquired.set(true); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Locker.java,acquireLock,protected boolean  (InterProcessLock lock long timeout TimeUnit unit) throws Exception { return lock.acquire(timeout unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Locker.java,close,@Override public void  () throws Exception { if (acquired.compareAndSet(true false)) { releaseLock(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Locker.java,releaseLock,protected void  () throws Exception { lock.release(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,LockInternals, (CuratorFramework client LockInternalsDriver driver String path String lockName int maxLeases){ this.driver=driver; this.lockName=lockName; this.maxLeases=maxLeases; this.client=client.newWatcherRemoveCuratorFramework(); this.basePath=PathUtils.validatePath(path); this.path=ZKPaths.makePath(path lockName); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,apply,@Override public String  (String name){ return ZKPaths.makePath(basePath name); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,attemptLock,String  (long time TimeUnit unit byte[] lockNodeBytes) throws Exception { final long startMillis=System.currentTimeMillis(); final Long millisToWait=(unit != null) ? unit.toMillis(time) : null; final byte[] localLockNodeBytes=(revocable.get() != null) ? new byte[0] : lockNodeBytes; int retryCount=0; String ourPath=null; boolean hasTheLock=false; boolean isDone=false; while (!isDone) { isDone=true; try { ourPath=driver.createsTheLock(client path localLockNodeBytes); hasTheLock=internalLockLoop(startMillis millisToWait ourPath); } catch ( KeeperException.NoNodeException e) { if (client.getZookeeperClient().getRetryPolicy().allowRetry(retryCount++ System.currentTimeMillis() - startMillis RetryLoop.getDefaultRetrySleeper())) { isDone=false; } else { throw e; } } } if (hasTheLock) { return ourPath; } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,checkRevocableWatcher,private void  (String path) throws Exception { RevocationSpec entry=revocable.get(); if (entry != null) { try { byte[] bytes=client.getData().usingWatcher(revocableWatcher).forPath(path); if (Arrays.equals(bytes REVOKE_MESSAGE)) { entry.getExecutor().execute(entry.getRunnable()); } } catch ( KeeperException.NoNodeException ignore) { } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,clean,public void  () throws Exception { try { client.delete().forPath(basePath); } catch ( KeeperException.BadVersionException ignore) { } catch ( KeeperException.NotEmptyException ignore) { } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,compare,@Override public int  (String lhs String rhs){ return sorter.fixForSorting(lhs lockName).compareTo(sorter.fixForSorting(rhs lockName)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,deleteOurPath,private void  (String ourPath) throws Exception { try { client.delete().guaranteed().forPath(ourPath); } catch ( KeeperException.NoNodeException e) { } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,getClient,CuratorFramework  (){ return client; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,getDriver,LockInternalsDriver  (){ return driver; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,getLockName,String  (){ return lockName; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,getParticipantNodes,public static Collection<String>  (CuratorFramework client final String basePath String lockName LockInternalsSorter sorter) throws Exception { List<String> names=getSortedChildren(client basePath lockName sorter); Iterable<String> transformed=Iterables.transform(names new Function<String String>(){ @Override public String apply( String name){ return ZKPaths.makePath(basePath name); } } ); return ImmutableList.copyOf(transformed); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,getSortedChildren,List<String>  () throws Exception { return getSortedChildren(client basePath lockName driver); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,internalLockLoop,"private boolean  (long startMillis Long millisToWait String ourPath) throws Exception { boolean haveTheLock=false; boolean doDelete=false; try { if (revocable.get() != null) { client.getData().usingWatcher(revocableWatcher).forPath(ourPath); } while ((client.getState() == CuratorFrameworkState.STARTED) && !haveTheLock) { List<String> children=getSortedChildren(); String sequenceNodeName=ourPath.substring(basePath.length() + 1); PredicateResults predicateResults=driver.getsTheLock(client children sequenceNodeName maxLeases); if (predicateResults.getsTheLock()) { haveTheLock=true; } else { String previousSequencePath=basePath + ""/"" + predicateResults.getPathToWatch(); synchronized (this) { try { client.getData().usingWatcher(watcher).forPath(previousSequencePath); if (millisToWait != null) { millisToWait-=(System.currentTimeMillis() - startMillis); startMillis=System.currentTimeMillis(); if (millisToWait <= 0) { doDelete=true; break; } wait(millisToWait); } else { wait(); } } catch ( KeeperException.NoNodeException e) { } } } } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); doDelete=true; throw e; } finally { if (doDelete) { deleteOurPath(ourPath); } } return haveTheLock; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,makeRevocable,void  (RevocationSpec entry){ revocable.set(entry); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,notifyFromWatcher,private synchronized void  (){ notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,process,@Override public void  (WatchedEvent event){ notifyFromWatcher(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,releaseLock,final void  (String lockPath) throws Exception { client.removeWatchers(); revocable.set(null); deleteOurPath(lockPath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\LockInternals.java,setMaxLeases,synchronized void  (int maxLeases){ this.maxLeases=maxLeases; notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\PredicateResults.java,PredicateResults,public  (String pathToWatch boolean getsTheLock){ this.pathToWatch=pathToWatch; this.getsTheLock=getsTheLock; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\PredicateResults.java,getPathToWatch,public String  (){ return pathToWatch; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\PredicateResults.java,getsTheLock,public boolean  (){ return getsTheLock; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,PathHolder,private  (String path Mode mode int emptyCount){ this.path=path; this.mode=mode; this.emptyCount=emptyCount; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,Reaper,private  (CuratorFramework client ScheduledExecutorService executor int reapingThresholdMs LeaderLatch leaderLatch boolean ownsLeaderLatch){ this.client=client; this.executor=new CloseableScheduledExecutorService(executor); this.reapingThresholdMs=reapingThresholdMs / EMPTY_COUNT_THRESHOLD; this.leaderLatch=leaderLatch; if (leaderLatch != null) { addListenerToLeaderLatch(leaderLatch); } this.ownsLeaderLatch=ownsLeaderLatch; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,addListenerToLeaderLatch,private void  (LeaderLatch leaderLatch){ LeaderLatchListener listener=new LeaderLatchListener(){ @Override public void isLeader(){ reapingIsActive.set(true); for ( PathHolder holder : activePaths.values()) { schedule(holder reapingThresholdMs); } } @Override public void notLeader(){ reapingIsActive.set(false); } } ; leaderLatch.addListener(listener); reapingIsActive.set(leaderLatch.hasLeadership()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,addPath,public void  (String path Mode mode){ PathHolder pathHolder=new PathHolder(path mode 0); activePaths.put(path pathHolder); schedule(pathHolder reapingThresholdMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,close,@Override public void  () throws IOException { if (state.compareAndSet(State.STARTED State.CLOSED)) { executor.close(); if (leaderLatch != null && ownsLeaderLatch) { leaderLatch.close(); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,isLeader,@Override public void  (){ reapingIsActive.set(true); for ( PathHolder holder : activePaths.values()) { schedule(holder reapingThresholdMs); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,makeLeaderLatchIfPathNotNull,private static LeaderLatch  (CuratorFramework client String leaderPath){ if (leaderPath == null) { return null; } else { return new LeaderLatch(client leaderPath); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,newExecutorService,"public static ScheduledExecutorService  (){ return ThreadUtils.newSingleThreadScheduledExecutor(""Reaper""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,notLeader,@Override public void  (){ reapingIsActive.set(false); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,reap,@VisibleForTesting protected void  (PathHolder holder){ if (!activePaths.containsKey(holder.path)) { return; } boolean addBack=true; int newEmptyCount=0; try { Stat stat=client.checkExists().forPath(holder.path); if (stat != null) { if (stat.getNumChildre
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,removePath,public boolean  (String path){ return activePaths.remove(path) != null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,run,@Override public void  (){ reap(this); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,schedule,@VisibleForTesting protected Future<?>  (PathHolder pathHolder int reapingThresholdMs){ if (reapingIsActive.get()) { return executor.schedule(pathHolder reapingThresholdMs TimeUnit.MILLISECONDS); } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Reaper.java,start,"public void  () throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); if (leaderLatch != null && ownsLeaderLatch) { leaderLatch.start(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\RevocationSpec.java,RevocationSpec, (Executor executor Runnable runnable){ this.runnable=runnable; this.executor=executor; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\RevocationSpec.java,getExecutor,Executor  (){ return executor; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\RevocationSpec.java,getRunnable,Runnable  (){ return runnable; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentEphemeralNode.java,PersistentEphemeralNode,"@SuppressWarnings(""deprecation"") public  (CuratorFramework client Mode mode String basePath byte[] initData){ super(client mode.getCreateMode(false) mode.isProtected() basePath initData); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\StandardLockInternalsDriver.java,createsTheLock,@Override public String  (CuratorFramework client String path byte[] lockNodeBytes) throws Exception { String ourPath; if (lockNodeBytes != null) { ourPath=client.create().creatingParentContainersIfNeeded().withProtection().withMode(CreateMode.EPHEMERAL_S
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\StandardLockInternalsDriver.java,fixForSorting,@Override public String  (String str String lockName){ return standardFixForSorting(str lockName); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\GroupMember.java,GroupMember,"public  (CuratorFramework client String membershipPath String thisId byte[] payload){ this.thisId=Preconditions.checkNotNull(thisId ""thisId cannot be null""); cache=newPathChildrenCache(client membershipPath); pen=newPersistentEphemeralNode(client membershipPath thisId payload); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\GroupMember.java,close,@Override public void  (){ CloseableUtils.closeQuietly(cache); CloseableUtils.closeQuietly(pen); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\GroupMember.java,getCurrentMembers,public Map<String byte[]>  (){ ImmutableMap.Builder<String byte[]> builder=ImmutableMap.builder(); boolean thisIdAdded=false; for ( ChildData data : cache.getCurrentData()) { String id=idFromPath(data.getPath()); thisIdAdded=thisIdAdded || id.equals(thisId); builder.put(id data.getData()); } if (!thisIdAdded) { builder.put(thisId pen.getData()); } return builder.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\GroupMember.java,idFromPath,public String  (String path){ return ZKPaths.getNodeFromPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\GroupMember.java,newPathChildrenCache,protected PathChildrenCache  (CuratorFramework client String membershipPath){ return new PathChildrenCache(client membershipPath true); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\GroupMember.java,newPersistentEphemeralNode,protected PersistentEphemeralNode  (CuratorFramework client String membershipPath String thisId byte[] payload){ return new PersistentEphemeralNode(client PersistentEphemeralNode.Mode.EPHEMERAL ZKPaths.makePath(membershipPath thisId) payload); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\GroupMember.java,setThisData,public void  (byte[] data){ try { pen.setData(data); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); Throwables.propagate(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\GroupMember.java,start,public void  (){ pen.start(); try { cache.start(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); Throwables.propagate(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\StandardLockInternalsDriver.java,getsTheLock,@Override public PredicateResults  (CuratorFramework client List<String> children String sequenceNodeName int maxLeases) throws Exception { int ourIndex=children.indexOf(sequenceNodeName); validateOurIndex(sequenceNodeName ourIndex); boolean getsTheLock=o
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\StandardLockInternalsDriver.java,standardFixForSorting,"public static String  (String str String lockName){ int index=str.lastIndexOf(lockName); if (index >= 0) { index+=lockName.length(); return index <= str.length() ? str.substring(index) : """"; } return str; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\StandardLockInternalsDriver.java,validateOurIndex,"static void  (String sequenceNodeName int ourIndex) throws KeeperException { if (ourIndex < 0) { throw new KeeperException.NoNodeException(""Sequential path not found: "" + sequenceNodeName); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\locks\Revoker.java,attemptRevoke,public static void  (CuratorFramework client String path) throws Exception { try { client.setData().forPath(path LockInternals.REVOKE_MESSAGE); } catch ( KeeperException.NoNodeException ignore) { } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentTtlNode.java,PersistentTtlNode,"public  (CuratorFramework client ScheduledExecutorService executorService String path long ttlMs byte[] initData String childNodeName int touchScheduleFactor){ this.client=Objects.requireNonNull(client ""client cannot be null""); this.ttlMs=ttlMs; this.touchScheduleFactor=touchScheduleFactor; node=new PersistentNode(client CreateMode.CONTAINER false path initData){ @Override protected void deleteNode(){ } } ; this.executorService=Objects.requireNonNull(executorService ""executorService cannot be null""); childPath=ZKPaths.makePath(Objects.requireNonNull(path ""path cannot be null"") childNodeName); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentTtlNode.java,close,@Override public void  (){ Future<?> future=futureRef.getAndSet(null); if (future != null) { future.cancel(true); } try { node.close(); } catch ( IOException e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentTtlNode.java,getData,public byte[]  (){ return node.getData(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentTtlNode.java,run,@Override public void  (){ try { try { client.setData().forPath(childPath); } catch ( KeeperException.NoNodeException e) { client.create().orSetData().withTtl(ttlMs).withMode(CreateMode.PERSISTENT_WITH_TTL).forPath(childPath); } } catch ( KeeperException.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentTtlNode.java,setData,public void  (byte[] data) throws Exception { node.setData(data); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentTtlNode.java,start,"public void  (){ node.start(); Runnable touchTask=new Runnable(){ @Override public void run(){ try { try { client.setData().forPath(childPath); } catch ( KeeperException.NoNodeException e) { client.create().orSetData().withTtl(ttlMs).withMode(CreateMode.PERSISTENT_WITH_TTL).forPath(childPath); } } catch ( KeeperException.NoNodeException ignore) { } catch ( Exception e) { if (!ThreadUtils.checkInterrupted(e)) { log.debug(""Could not touch child node"" e); } } } } ; Future<?> future=executorService.scheduleAtFixedRate(touchTask ttlMs / touchScheduleFactor ttlMs / touchScheduleFactor TimeUnit.MILLISECONDS); futureRef.set(future); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentTtlNode.java,waitForInitialCreate,public boolean  (long timeout TimeUnit unit) throws InterruptedException { return node.waitForInitialCreate(timeout unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\BlockingQueueConsumer.java,BlockingQueueConsumer,public  (ConnectionStateListener connectionStateListener BlockingQueue<T> queue){ this.connectionStateListener=connectionStateListener; this.items=queue; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\BlockingQueueConsumer.java,consumeMessage,@Override public void  (T message) throws Exception { items.add(message); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\BlockingQueueConsumer.java,drainTo,public int  (Collection<? super T> c){ return items.drainTo(c); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\BlockingQueueConsumer.java,getItems,public List<T>  (){ return ImmutableList.copyOf(items); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\BlockingQueueConsumer.java,size,public int  (){ return items.size(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\BlockingQueueConsumer.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ connectionStateListener.stateChanged(client newState); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\BlockingQueueConsumer.java,take,public T  (int time TimeUnit unit) throws InterruptedException { return items.poll(time unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,PersistentNode,"public  (CuratorFramework givenClient final CreateMode mode boolean useProtection final String basePath byte[] initData long ttl){ this.useProtection=useProtection; this.client=Preconditions.checkNotNull(givenClient ""client cannot be null"").newWatcherRemoveCuratorFramework(); this.basePath=PathUtils.validatePath(basePath); this.mode=Preconditions.checkNotNull(mode ""mode cannot be null""); this.ttl=ttl; final byte[] data=Preconditions.checkNotNull(initData ""data cannot be null""); backgroundCallback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework dummy  CuratorEvent event) throws Exception { if (isActive()) { processBackgroundCallback(event); } else { processBackgroundCallbackClosedState(event); } } } ; this.data.set(Arrays.copyOf(data data.length)); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,apply,"@Override public Void  (PersistentNodeListener listener){ try { listener.nodeCreated(path); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""From PersistentNode listener"" e); } return null; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,close,@Override public void  () throws IOException { if (debugWaitMsForBackgroundBeforeClose.get() > 0) { try { Thread.sleep(debugWaitMsForBackgroundBeforeClose.get()); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } } if (!state.compa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,createNode,"private void  (){ if (!isActive()) { return; } if (debugCreateNodeLatch != null) { try { debugCreateNodeLatch.await(); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); return; } } try { String existingPath=nodePath.get(); String createPath=(existingPath != null && !useProtection) ? existingPath : basePath; CreateModable<ACLBackgroundPathAndBytesable<String>> localCreateMethod=createMethod.get(); if (localCreateMethod == null) { CreateBuilderMain createBuilder=SafeIsTtlMode.isTtl(mode) ? client.create().withTtl(ttl) : client.create(); CreateModable<ACLBackgroundPathAndBytesable<String>> tempCreateMethod=useProtection ? createBuilder.creatingParentContainersIfNeeded().withProtection() : createBuilder.creatingParentContainersIfNeeded(); createMethod.compareAndSet(null tempCreateMethod); localCreateMethod=createMethod.get(); } localCreateMethod.withMode(getCreateMode(existingPath != null)).inBackground(backgroundCallback).forPath(createPath data.get()); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new RuntimeException(""Creating node. BasePath: "" + basePath e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,deleteNode,protected void  () throws Exception { String localNodePath=nodePath.getAndSet(null); if (localNodePath != null) { try { client.delete().guaranteed().forPath(localNodePath); } catch ( KeeperException.NoNodeException ignore) { } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,getActualPath,public String  (){ return nodePath.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,getCreateMode,private CreateMode  (boolean pathIsSet){ if (pathIsSet) { switch (mode) { default : { break; } case EPHEMERAL_SEQUENTIAL: { return CreateMode.EPHEMERAL; } case PERSISTENT_SEQUENTIAL: { return CreateMode.PERSISTENT; } case PERSISTENT_SEQUENTIAL_WITH_TTL: { return CreateMode.PERSISTENT_WITH_TTL; } } } return mode; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,getData,public byte[]  (){ return this.data.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,getListenable,public ListenerContainer<PersistentNodeListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,initialisationComplete,private void  (){ CountDownLatch localLatch=initialCreateLatch.getAndSet(null); if (localLatch != null) { localLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,isActive,private boolean  (){ return (state.get() == State.STARTED); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,isAuthFailure,@VisibleForTesting boolean  (){ return authFailure.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,notifyListeners,"private void  (){ final String path=getActualPath(); listeners.forEach(new Function<PersistentNodeListener Void>(){ @Override public Void apply( PersistentNodeListener listener){ try { listener.nodeCreated(path); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""From PersistentNode listener"" e); } return null; } } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,process,@Override public void  (WatchedEvent event) throws Exception { if (isActive()) { if (event.getType() == EventType.NodeDeleted) { createNode(); } else if (event.getType() == EventType.NodeDataChanged) { watchNode(); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,processBackgroundCallback,"private void  (CuratorEvent event) throws Exception { String path=null; boolean nodeExists=false; if (event.getResultCode() == KeeperException.Code.NODEEXISTS.intValue()) { path=event.getPath(); nodeExists=true; } else if (event.getResultCode() == KeeperException.Code.OK.intValue()) { path=event.getName(); } else if (event.getResultCode() == KeeperException.Code.NOAUTH.intValue()) { log.warn(""Client does not have authorisation to create node at path {}"" event.getPath()); authFailure.set(true); return; } if (path != null) { authFailure.set(false); nodePath.set(path); watchNode(); if (nodeExists) { client.setData().inBackground(setDataCallback).forPath(getActualPath() getData()); } else { initialisationComplete(); notifyListeners(); } } else { createNode(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,processBackgroundCallbackClosedState,"private void  (CuratorEvent event){ String path=null; if (event.getResultCode() == KeeperException.Code.NODEEXISTS.intValue()) { path=event.getPath(); } else if (event.getResultCode() == KeeperException.Code.OK.intValue()) { path=event.getName(); } if (path != null) { try { client.delete().guaranteed().inBackground().forPath(path); } catch ( Exception e) { log.error(""Could not delete node after close"" e); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,processResult,@Override public void  (CuratorFramework dummy CuratorEvent event) throws Exception { if (isActive()) { processBackgroundCallback(event); } else { processBackgroundCallbackClosedState(event); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,setData,"public void  (byte[] data) throws Exception { data=Preconditions.checkNotNull(data ""data cannot be null""); Preconditions.checkState(nodePath.get() != null ""initial create has not been processed. Call waitForInitialCreate() to ensure.""); this.data.set(Arrays.copyOf(data data.length)); if (isActive()) { client.setData().inBackground(setDataCallback).forPath(getActualPath() getData()); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,start,"public void  (){ Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Already started""); client.getConnectionStateListenable().addListener(connectionStateListener); createNode(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,stateChanged,@Override public void  (CuratorFramework dummy ConnectionState newState){ if ((newState == ConnectionState.RECONNECTED) && isActive()) { createNode(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,waitForInitialCreate,"public boolean  (long timeout TimeUnit unit) throws InterruptedException { Preconditions.checkState(state.get() == State.STARTED ""Not started""); CountDownLatch localLatch=initialCreateLatch.get(); return (localLatch == null) || localLatch.await(timeout unit); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\nodes\PersistentNode.java,watchNode,private void  () throws Exception { if (!isActive()) { return; } String localNodePath=nodePath.get(); if (localNodePath != null) { client.checkExists().usingWatcher(watcher).inBackground(checkExistsCallback).forPath(localNodePath); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,ChildrenCache, (CuratorFramework client String path){ this.client=client.newWatcherRemoveCuratorFramework(); this.path=PathUtils.validatePath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,Data,private  (List<String> children long version){ this.children=ImmutableList.copyOf(children); this.version=version; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,blockingNextGetData,synchronized Data  (long startVersion long maxWait TimeUnit unit) throws InterruptedException { long startMs=System.currentTimeMillis(); boolean hasMaxWait=(unit != null); long maxWaitMs=hasMaxWait ? unit.toMillis(maxWait) : -1; while (startVersion == children.get().version) { if (hasMaxWait) { long elapsedMs=System.currentTimeMillis() - startMs; long thisWaitMs=maxWaitMs - elapsedMs; if (thisWaitMs <= 0) { break; } wait(thisWaitMs); } else { wait(); } } return children.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,close,@Override public void  () throws IOException { client.removeWatchers(); isClosed.set(true); notifyFromCallback(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,getData,Data  (){ return children.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,notifyFromCallback,private synchronized void  (){ notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,process,@Override public void  (WatchedEvent event) throws Exception { if (!isClosed.get()) { sync(true); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getResultCode() == KeeperException.Code.OK.intValue()) { setNewChildren(event.getChildren()); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,setNewChildren,private synchronized void  (List<String> newChildren){ if (newChildren != null) { Data currentData=children.get(); children.set(new Data(newChildren currentData.version + 1)); notifyFromCallback(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,start,void  () throws Exception { sync(true); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ChildrenCache.java,sync,private  hronized void sync(boolean watched) throws Exception { if (watched) { client.getChildren().usingWatcher(watcher).inBackground(callback).forPath(path); } else { client.getChildren().inBackground(callback).forPath(path); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,DistributedDelayQueue," (CuratorFramework client QueueConsumer<T> consumer QueueSerializer<T> serializer String queuePath ThreadFactory threadFactory Executor executor int minItemsBeforeRefresh String lockPath int maxItems boolean putInBackground int finalFlushMs){ Preconditions.checkArgument(minItemsBeforeRefresh >= 0 ""minItemsBeforeRefresh cannot be negative""); queue=new DistributedQueue<T>(client consumer serializer queuePath threadFactory executor minItemsBeforeRefresh true lockPath maxItems putInBackground finalFlushMs){ @Override protected long getDelay( String itemNode){ return getDelay(itemNode System.currentTimeMillis()); } private long getDelay( String itemNode  long sortTime){ long epoch=getEpoch(itemNode); return epoch - sortTime; } @Override protected void sortChildren( List<String> children){ final long sortTime=System.currentTimeMillis(); Collections.sort(children new Comparator<String>(){ @Override public int compare( String o1  String o2){ long diff=getDelay(o1 sortTime) - getDelay(o2 sortTime); return (diff < 0) ? -1 : ((diff > 0) ? 1 : 0); } } ); } } ; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,close,@Override public void  () throws IOException { queue.close(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,compare,@Override public int  (String o1 String o2){ long diff=getDelay(o1 sortTime) - getDelay(o2 sortTime); return (diff < 0) ? -1 : ((diff > 0) ? 1 : 0); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,epochToString,"@VisibleForTesting static String  (long epoch){ return SEPARATOR + String.format(""%08X"" epoch) + SEPARATOR; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,flushPuts,@Override public boolean  (long waitTime TimeUnit timeUnit) throws InterruptedException { return queue.flushPuts(waitTime timeUnit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,getDelay,private long  (String itemNode long sortTime){ long epoch=getEpoch(itemNode); return epoch - sortTime; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,getEpoch,private static long  (String itemNode){ int index2=itemNode.lastIndexOf(SEPARATOR); int index1=(index2 > 0) ? itemNode.lastIndexOf(SEPARATOR index2 - 1) : -1; if ((index1 > 0) && (index2 > (index1 + 1))) { try { String epochStr=itemNode.substring(index1 + 1 index2); return Long.parseLong(epochStr 16); } catch ( NumberFormatException ignore) { } } return 0; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,getLastMessageCount,@Override public int  (){ return queue.getLastMessageCount(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,getPutListenerContainer,@Override public ListenerContainer<QueuePutListener<T>>  (){ return queue.getPutListenerContainer(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,put,"public boolean  (T item long delayUntilEpoch int maxWait TimeUnit unit) throws Exception { Preconditions.checkArgument(delayUntilEpoch > 0 ""delayUntilEpoch cannot be negative""); queue.checkState(); return queue.internalPut(item null queue.makeItemPath() + epochToString(delayUntilEpoch) maxWait unit); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,putMulti,"public boolean  (MultiItem<T> items long delayUntilEpoch int maxWait TimeUnit unit) throws Exception { Preconditions.checkArgument(delayUntilEpoch > 0 ""delayUntilEpoch cannot be negative""); queue.checkState(); return queue.internalPut(null items queue.makeItemPath() + epochToString(delayUntilEpoch) maxWait unit); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,setErrorMode,@Override public void  (ErrorMode newErrorMode){ queue.setErrorMode(newErrorMode); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,sortChildren,@Override protected void  (List<String> children){ final long sortTime=System.currentTimeMillis(); Collections.sort(children new Comparator<String>(){ @Override public int compare( String o1  String o2){ long diff=getDelay(o1 sortTime) - getDelay(o2 sortT
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedDelayQueue.java,start,@Override public void  () throws Exception { queue.start(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,DistributedIdQueue," (CuratorFramework client QueueConsumer<T> consumer QueueSerializer<T> serializer String queuePath ThreadFactory threadFactory Executor executor int minItemsBeforeRefresh boolean refreshOnWatch String lockPath int maxItems boolean putInBackground int finalFlushMs){ queue=new DistributedQueue<T>(client consumer serializer queuePath threadFactory executor minItemsBeforeRefresh refreshOnWatch lockPath maxItems putInBackground finalFlushMs){ @Override protected void sortChildren( List<String> children){ internalSortChildren(children); } @Override protected String makeRequeueItemPath( String itemPath){ return makeIdPath(parseId(itemPath).id); } } ; if (queue.makeItemPath().contains(Character.toString(SEPARATOR))) { throw new IllegalStateException(""DistributedQueue can't use "" + SEPARATOR); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,Parts,private  (String id String cleaned){ this.id=id; this.cleaned=cleaned; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,close,@Override public void  () throws IOException { queue.close(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,compare,@Override public int  (String o1 String o2){ return parseId(o1).cleaned.compareTo(parseId(o2).cleaned); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,debugIsQueued,@VisibleForTesting boolean  (String id) throws Exception { for ( String name : queue.getChildren()) { if (parseId(name).id.equals(id)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,fixId,private static String  (String id){ String fixed=id.replace('/' '_'); return fixed.replace(SEPARATOR '_'); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,flushPuts,@Override public boolean  (long waitTime TimeUnit timeUnit) throws InterruptedException { return queue.flushPuts(waitTime timeUnit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,getLastMessageCount,@Override public int  (){ return queue.getLastMessageCount(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,getPutListenerContainer,@Override public ListenerContainer<QueuePutListener<T>>  (){ return queue.getPutListenerContainer(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,internalSortChildren,private void  (List<String> children){ Collections.sort(children new Comparator<String>(){ @Override public int compare( String o1  String o2){ return parseId(o1).cleaned.compareTo(parseId(o2).cleaned); } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,isValidId,private boolean  (String id){ return (id != null) && (id.length() > 0); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,makeIdPath,private String  (String itemId){ return queue.makeItemPath() + SEPARATOR + fixId(itemId)+ SEPARATOR; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,makeRequeueItemPath,@Override protected String  (String itemPath){ return makeIdPath(parseId(itemPath).id); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,parseId,"private Parts  (String name){ int firstIndex=name.indexOf(SEPARATOR); int secondIndex=name.indexOf(SEPARATOR firstIndex + 1); if ((firstIndex < 0) || (secondIndex < 0)) { log.error(""Bad node in queue: "" + name); return new Parts(name name); } return new Parts(name.substring(firstIndex + 1 secondIndex) name.substring(0 firstIndex) + name.substring(secondIndex + 1)); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,put,"public boolean  (T item String itemId int maxWait TimeUnit unit) throws Exception { Preconditions.checkArgument(isValidId(itemId) ""Invalid id: "" + itemId); queue.checkState(); return queue.internalPut(item null makeIdPath(itemId) maxWait unit); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,remove,"public int  (String id) throws Exception { id=Preconditions.checkNotNull(id ""id cannot be null""); queue.checkState(); int count=0; for ( String name : queue.getChildren()) { if (parseId(name).id.equals(id)) { if (queue.tryRemove(name)) { ++count; } } } return count; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,setErrorMode,@Override public void  (ErrorMode newErrorMode){ queue.setErrorMode(newErrorMode); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,sortChildren,@Override protected void  (List<String> children){ internalSortChildren(children); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedIdQueue.java,start,@Override public void  () throws Exception { queue.start(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,DistributedPriorityQueue," (CuratorFramework client QueueConsumer<T> consumer QueueSerializer<T> serializer String queuePath ThreadFactory threadFactory Executor executor int minItemsBeforeRefresh String lockPath int maxItems boolean putInBackground int finalFlushMs){ Preconditions.checkArgument(minItemsBeforeRefresh >= 0 ""minItemsBeforeRefresh cannot be negative""); queue=new DistributedQueue<T>(client consumer serializer queuePath threadFactory executor minItemsBeforeRefresh true lockPath maxItems putInBackground finalFlushMs); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,close,@Override public void  () throws IOException { queue.close(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,flushPuts,@Override public boolean  (long waitTime TimeUnit timeUnit) throws InterruptedException { return queue.flushPuts(waitTime timeUnit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,getCache,@VisibleForTesting ChildrenCache  (){ return queue.getCache(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,getLastMessageCount,@Override public int  (){ return queue.getLastMessageCount(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,getPutListenerContainer,@Override public ListenerContainer<QueuePutListener<T>>  (){ return queue.getPutListenerContainer(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,priorityToString,"@VisibleForTesting static String  (int priority){ long l=(long)priority & 0xFFFFFFFFL; return String.format(""%s%08X"" (priority >= 0) ? ""1"" : ""0"" l); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,put,public boolean  (T item int priority int maxWait TimeUnit unit) throws Exception { queue.checkState(); String priorityHex=priorityToString(priority); return queue.internalPut(item null queue.makeItemPath() + priorityHex maxWait unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,putMulti,public boolean  (MultiItem<T> items int priority int maxWait TimeUnit unit) throws Exception { queue.checkState(); String priorityHex=priorityToString(priority); return queue.internalPut(null items queue.makeItemPath() + priorityHex maxWait unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,setErrorMode,@Override public void  (ErrorMode newErrorMode){ queue.setErrorMode(newErrorMode); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedPriorityQueue.java,start,@Override public void  () throws Exception { queue.start(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,DistributedQueue," (CuratorFramework client QueueConsumer<T> consumer QueueSerializer<T> serializer String queuePath ThreadFactory threadFactory Executor executor int minItemsBeforeRefresh boolean refreshOnWatch String lockPath int maxItems boolean putInBackground int finalFlushMs){ Preconditions.checkNotNull(client ""client cannot be null""); Preconditions.checkNotNull(serializer ""serializer cannot be null""); Preconditions.checkNotNull(threadFactory ""threadFactory cannot be null""); Preconditions.checkNotNull(executor ""executor cannot be null""); Preconditions.checkArgument(maxItems > 0 ""maxItems must be a positive number""); isProducerOnly=(consumer == null); this.lockPath=(lockPath == null) ? null : PathUtils.validatePath(lockPath); this.putInBackground=putInBackground; this.consumer=consumer; this.minItemsBeforeRefresh=minItemsBeforeRefresh; this.refreshOnWatch=refreshOnWatch; this.client=client; this.serializer=serializer; this.queuePath=PathUtils.validatePath(queuePath); this.executor=executor; this.maxItems=maxItems; this.finalFlushMs=finalFlushMs; service=Executors.newFixedThreadPool(2 threadFactory); childrenCache=new ChildrenCache(client queuePath); if ((maxItems != QueueBuilder.NOT_SET) && putInBackground) { log.warn(""Bounded queues should set putInBackground(false) in the builder. Putting in the background will result in spotty maxItem consistency.""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,apply,@Override public Void  (QueuePutListener<T> listener){ if (item != null) { listener.putCompleted(item); } else { listener.putMultiCompleted(givenMultiItem); } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,blockIfMaxed,private boolean  (int maxWait TimeUnit unit) throws Exception { ChildrenCache.Data data=childrenCache.getData(); while (data.children.size() >= maxItems) { long previousVersion=data.version; data=childrenCache.blockingNextGetData(data.version maxWait unit); if (data.version == previousVersion) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,call,@Override public Object  (){ runLoop(); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,checkState,void  () throws Exception { if (state.get() != State.STARTED) { throw new IllegalStateException(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,close,@Override public void  () throws IOException { if (state.compareAndSet(State.STARTED State.STOPPED)) { if (finalFlushMs > 0) { try { flushPuts(finalFlushMs TimeUnit.MILLISECONDS); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } }
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,doPutInBackground,private void  (final T item String path final MultiItem<T> givenMultiItem byte[] bytes) throws Exception { BackgroundCallback callback=new BackgroundCallback(){ @Override public void processResult( CuratorFramework client  CuratorEvent event) throws Exception { if (event.getResultCode() != KeeperException.Code.OK.intValue()) { return; } if (event.getType() == CuratorEventType.CREATE) { synchronized (putCount) { putCount.decrementAndGet(); putCount.notifyAll(); } } putListenerContainer.forEach(new Function<QueuePutListener<T> Void>(){ @Override public Void apply( QueuePutListener<T> listener){ if (item != null) { listener.putCompleted(item); } else { listener.putMultiCompleted(givenMultiItem); } return null; } } ); } } ; internalCreateNode(path bytes callback); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,doPutInForeground,private void  (final T item String path final MultiItem<T> givenMultiItem byte[] bytes) throws Exception { client.create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(path bytes); synchronized (putCount) { putCount.decrementAndGet(); putCount.notifyAll(); } putListenerContainer.forEach(new Function<QueuePutListener<T> Void>(){ @Override public Void apply( QueuePutListener<T> listener){ if (item != null) { listener.putCompleted(item); } else { listener.putMultiCompleted(givenMultiItem); } return null; } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,flushPuts,@Override public boolean  (long waitTime TimeUnit timeUnit) throws InterruptedException { long msWaitRemaining=TimeUnit.MILLISECONDS.convert(waitTime timeUnit); synchronized (putCount) { while (putCount.get() > 0) { if (msWaitRemaining <= 0) { return fals
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,getCache,@VisibleForTesting ChildrenCache  (){ return childrenCache; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,getChildren,protected List<String>  () throws Exception { return client.getChildren().forPath(queuePath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,getDelay,protected long  (String itemNode){ return 0; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,getLastMessageCount,@Override public int  (){ return lastChildCount.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,getPutListenerContainer,@Override public ListenerContainer<QueuePutListener<T>>  (){ return putListenerContainer; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,internalCreateNode,@VisibleForTesting void  (String path byte[] bytes BackgroundCallback callback) throws Exception { client.create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).inBackground(callback).forPath(path bytes); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,internalPut,boolean  (final T item MultiItem<T> multiItem String path int maxWait TimeUnit unit) throws Exception { if (!blockIfMaxed(maxWait unit)) { return false; } final MultiItem<T> givenMultiItem=multiItem; if (item != null) { final AtomicReference<T> ref=new AtomicReference<T>(item); multiItem=new MultiItem<T>(){ @Override public T nextItem() throws Exception { return ref.getAndSet(null); } } ; } putCount.incrementAndGet(); byte[] bytes=ItemSerializer.serialize(multiItem serializer); if (putInBackground) { doPutInBackground(item path givenMultiItem bytes); } else { doPutInForeground(item path givenMultiItem bytes); } return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,makeItemPath,String  (){ return ZKPaths.makePath(queuePath QUEUE_ITEM_NAME); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,makeRequeueItemPath,protected String  (String itemPath){ return makeItemPath(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,nextItem,@Override public T  () throws Exception { return ref.getAndSet(null); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,processChildren,"private void  (List<String> children long currentVersion) throws Exception { final Semaphore processedLatch=new Semaphore(0); final boolean isUsingLockSafety=(lockPath != null); int min=minItemsBeforeRefresh; for ( final String itemNode : children) { if (Thread.currentThread().isInterrupted()) { processedLatch.release(children.size()); break; } if (!itemNode.startsWith(QUEUE_ITEM_NAME)) { log.warn(""Foreign node in queue path: "" + itemNode); processedLatch.release(); continue; } if (min-- <= 0) { if (refreshOnWatch && (currentVersion != childrenCache.getData().version)) { processedLatch.release(children.size()); break; } } if (getDelay(itemNode) > 0) { processedLatch.release(); continue; } executor.execute(new Runnable(){ @Override public void run(){ try { if (isUsingLockSafety) { processWithLockSafety(itemNode ProcessType.NORMAL); } else { processNormally(itemNode ProcessType.NORMAL); } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""Error processing message at "" + itemNode e); } finally { processedLatch.release(); } } } ); } processedLatch.acquire(children.size()); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,processMessageBytes,"private ProcessMessageBytesCode  (String itemNode byte[] bytes) throws Exception { ProcessMessageBytesCode resultCode=ProcessMessageBytesCode.NORMAL; MultiItem<T> items; try { items=ItemSerializer.deserialize(bytes serializer); } catch ( Throwable e) { ThreadUtils.checkInterrupted(e); log.error(""Corrupted queue item: "" + itemNode e); return resultCode; } for (; ; ) { T item=items.nextItem(); if (item == null) { break; } try { consumer.consumeMessage(item); } catch ( Throwable e) { ThreadUtils.checkInterrupted(e); log.error(""Exception processing queue item: "" + itemNode e); if (errorMode.get() == ErrorMode.REQUEUE) { resultCode=ProcessMessageBytesCode.REQUEUE; break; } } } return resultCode; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,processNormally,private boolean  (String itemNode ProcessType type) throws Exception { try { String itemPath=ZKPaths.makePath(queuePath itemNode); Stat stat=new Stat(); byte[] bytes=null; if (type == ProcessType.NORMAL) { bytes=client.getData().storingStatIn(stat).forPath(itemPath); } if (client.getState() == CuratorFrameworkState.STARTED) { client.delete().withVersion(stat.getVersion()).forPath(itemPath); } if (type == ProcessType.NORMAL) { processMessageBytes(itemNode bytes); } return true; } catch ( KeeperException.NodeExistsException ignore) { } catch ( KeeperException.NoNodeException ignore) { } catch ( KeeperException.BadVersionException ignore) { } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getResultCode() != KeeperException.Code.OK.intValue()) { return; } if (event.getType() == CuratorEventType.CREATE) { synchronized (putCount) { putCount.decrem
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,processWithLockSafety,@VisibleForTesting protected boolean  (String itemNode ProcessType type) throws Exception { String lockNodePath=ZKPaths.makePath(lockPath itemNode); boolean lockCreated=false; try { client.create().withMode(CreateMode.EPHEMERAL).forPath(lockNodePath); loc
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,put,public boolean  (T item int maxWait TimeUnit unit) throws Exception { checkState(); String path=makeItemPath(); return internalPut(item null path maxWait unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,putMulti,public boolean  (MultiItem<T> items int maxWait TimeUnit unit) throws Exception { checkState(); String path=makeItemPath(); return internalPut(null items path maxWait unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,run,"@Override public void  (){ try { if (isUsingLockSafety) { processWithLockSafety(itemNode ProcessType.NORMAL); } else { processNormally(itemNode ProcessType.NORMAL); } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""Error processing me"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,runLoop,"private void  (){ long currentVersion=-1; long maxWaitMs=-1; try { while (state.get() == State.STARTED) { try { ChildrenCache.Data data=(maxWaitMs > 0) ? childrenCache.blockingNextGetData(currentVersion maxWaitMs TimeUnit.MILLISECONDS) : childrenCache.blockingNextGetData(currentVersion); currentVersion=data.version; List<String> children=Lists.newArrayList(data.children); sortChildren(children); if (children.size() > 0) { maxWaitMs=getDelay(children.get(0)); if (maxWaitMs > 0) { continue; } } else { continue; } processChildren(children currentVersion); } catch ( InterruptedException e) { } } } catch ( Exception e) { log.error(""Exception caught in background handler"" e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,setErrorMode,"@Override public void  (ErrorMode newErrorMode){ Preconditions.checkNotNull(lockPath ""lockPath cannot be null""); if (newErrorMode == ErrorMode.REQUEUE) { log.warn(""ErrorMode.REQUEUE requires ZooKeeper version 3.4.x+ - make sure you are not using a prior v"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,sortChildren,protected void  (List<String> children){ Collections.sort(children); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,start,@Override public void  () throws Exception { if (!state.compareAndSet(State.LATENT State.STARTED)) { throw new IllegalStateException(); } try { client.create().creatingParentContainersIfNeeded().forPath(queuePath); } catch ( KeeperException.NodeExistsExce
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\DistributedQueue.java,tryRemove,protected boolean  (String itemNode) throws Exception { boolean isUsingLockSafety=(lockPath != null); if (isUsingLockSafety) { return processWithLockSafety(itemNode ProcessType.REMOVE); } return processNormally(itemNode ProcessType.REMOVE); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ItemSerializer.java,deserialize,"static <T>MultiItem<T>  (byte[] bytes QueueSerializer<T> serializer) throws Exception { DataInputStream in=new DataInputStream(new ByteArrayInputStream(bytes)); int version=in.readInt(); if (version != VERSION) { throw new IOException(String.format(""Incorrect version. Expected %d - Found: %d"" VERSION version)); } List<T> items=Lists.newArrayList(); for (; ; ) { byte opcode=in.readByte(); if (opcode == EOF_OPCODE) { break; } if (opcode != ITEM_OPCODE) { throw new IOException(String.format(""Incorrect opcode. Expected %d - Found: %d"" ITEM_OPCODE opcode)); } int size=in.readInt(); if (size < 0) { throw new IOException(String.format(""Bad size: %d"" size)); } byte[] itemBytes=new byte[size]; if (size > 0) { in.readFully(itemBytes); } items.add(serializer.deserialize(itemBytes)); } final Iterator<T> iterator=items.iterator(); return new MultiItem<T>(){ @Override public T nextItem(){ return iterator.hasNext() ? iterator.next() : null; } } ; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ItemSerializer.java,nextItem,@Override public T  (){ return iterator.hasNext() ? iterator.next() : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\ItemSerializer.java,serialize,static <T>byte[]  (MultiItem<T> items QueueSerializer<T> serializer) throws Exception { ByteArrayOutputStream bytes=new ByteArrayOutputStream(INITIAL_BUFFER_SIZE); DataOutputStream out=new DataOutputStream(bytes); out.writeInt(VERSION); for (; ; ) { T item=items.nextItem(); if (item == null) { break; } byte[] itemBytes=serializer.serialize(item); out.writeByte(ITEM_OPCODE); out.writeInt(itemBytes.length); if (itemBytes.length > 0) { out.write(itemBytes); } } out.writeByte(EOF_OPCODE); out.close(); return bytes.toByteArray(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,QueueBuilder,private  (CuratorFramework client QueueConsumer<T> consumer QueueSerializer<T> serializer String queuePath){ this.client=client; this.consumer=consumer; this.serializer=serializer; this.queuePath=PathUtils.validatePath(queuePath); factory=defaultThreadFactory; executor=MoreExecutors.directExecutor(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,buildDelayQueue,public DistributedDelayQueue<T>  (){ return new DistributedDelayQueue<T>(client consumer serializer queuePath factory executor Integer.MAX_VALUE lockPath maxItems putInBackground finalFlushMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,buildIdQueue,public DistributedIdQueue<T>  (){ return new DistributedIdQueue<T>(client consumer serializer queuePath factory executor Integer.MAX_VALUE false lockPath maxItems putInBackground finalFlushMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,buildPriorityQueue,public DistributedPriorityQueue<T>  (int minItemsBeforeRefresh){ return new DistributedPriorityQueue<T>(client consumer serializer queuePath factory executor minItemsBeforeRefresh lockPath maxItems putInBackground finalFlushMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,buildQueue,public DistributedQueue<T>  (){ return new DistributedQueue<T>(client consumer serializer queuePath factory executor Integer.MAX_VALUE false lockPath maxItems putInBackground finalFlushMs); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,builder,public static <T>QueueBuilder<T>  (CuratorFramework client QueueConsumer<T> consumer QueueSerializer<T> serializer String queuePath){ return new QueueBuilder<T>(client consumer serializer queuePath); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,executor,"public QueueBuilder<T>  (Executor executor){ Preconditions.checkNotNull(executor ""executor cannot be null""); this.executor=executor; return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,finalFlushTime,public QueueBuilder<T>  (int time TimeUnit unit){ finalFlushMs=(int)unit.toMillis(time); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,lockPath,public QueueBuilder<T>  (String path){ lockPath=PathUtils.validatePath(path); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,maxItems,public QueueBuilder<T>  (int maxItems){ this.maxItems=maxItems; putInBackground=false; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,putInBackground,public QueueBuilder<T>  (boolean putInBackground){ this.putInBackground=putInBackground; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueBuilder.java,threadFactory,"public QueueBuilder<T>  (ThreadFactory factory){ Preconditions.checkNotNull(factory ""factory cannot be null""); this.factory=factory; return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSafety.java,QueueSafety, (String lockPath BlockingQueue<T> queue){ this.lockPath=PathUtils.validatePath(lockPath); this.consumer=null; this.queue=queue; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSafety.java,getConsumer,QueueConsumer<T>  (){ return consumer; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSafety.java,getLockPath,String  (){ return lockPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSafety.java,getQueue,BlockingQueue<T>  (){ return queue; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,QueueSharderPolicies,private  (){ this.newQueueThreshold=DEFAULT_QUEUE_THRESHOLD; this.thresholdCheckMs=DEFAULT_THRESHOLD_CHECK_MS; this.maxQueues=DEFAULT_MAX_QUEUES; this.threadFactory=QueueBuilder.defaultThreadFactory; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,build,public QueueSharderPolicies  (){ try { return policies; } finally { policies=new QueueSharderPolicies(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,builder,public static Builder  (){ return new Builder(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,getMaxQueues,int  (){ return maxQueues; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,getNewQueueThreshold,int  (){ return newQueueThreshold; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,getThreadFactory,ThreadFactory  (){ return threadFactory; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,getThresholdCheckMs,int  (){ return thresholdCheckMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,maxQueues,"public Builder  (int maxQueues){ Preconditions.checkArgument(maxQueues > 0 ""thresholdCheckMs must be a positive number""); policies.maxQueues=maxQueues; return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,newQueueThreshold,"public Builder  (int newQueueThreshold){ Preconditions.checkArgument(newQueueThreshold > 0 ""newQueueThreshold must be a positive number""); policies.newQueueThreshold=newQueueThreshold; return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,threadFactory,"public Builder  (ThreadFactory threadFactory){ policies.threadFactory=Preconditions.checkNotNull(threadFactory ""threadFactory cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharderPolicies.java,thresholdCheckMs,"public Builder  (int thresholdCheckMs){ Preconditions.checkArgument(thresholdCheckMs > 0 ""thresholdCheckMs must be a positive number""); policies.thresholdCheckMs=thresholdCheckMs; return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,QueueSharder,public  (CuratorFramework client QueueAllocator<U T> queueAllocator String queuePath String leaderPath QueueSharderPolicies policies){ this.client=client; this.queueAllocator=queueAllocator; this.queuePath=queuePath; this.policies=policies; leaderLatch=new LeaderLatch(client leaderPath); service=Executors.newSingleThreadExecutor(policies.getThreadFactory()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,addNewQueueIfNeeded,private void  (String newQueuePath) throws Exception { if (newQueuePath == null) { newQueuePath=ZKPaths.makePath(queuePath QUEUE_PREFIX + UUID.randomUUID().toString()); } if (!queues.containsKey(newQueuePath)) { T queue=queueAllocator.allocateQueue(client newQueuePath); if (queues.putIfAbsent(newQueuePath queue) == null) { queue.start(); preferredQueues.add(newQueuePath); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,call,@Override public Void  () throws Exception { while (state.get() == State.STARTED) { try { Thread.sleep(policies.getThresholdCheckMs()); checkThreshold(); } catch ( InterruptedException e) { } } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,checkThreshold,"private void  (){ try { boolean addAQueueIfLeader=false; int size=0; List<String> children=client.getChildren().forPath(queuePath); for ( String child : children) { String queuePath=ZKPaths.makePath(this.queuePath child); addNewQueueIfNeeded(queuePath); Stat stat=client.checkExists().forPath(queuePath); if (stat.getNumChildren() >= policies.getNewQueueThreshold()) { size=stat.getNumChildren(); addAQueueIfLeader=true; preferredQueues.remove(queuePath); } else if (stat.getNumChildren() <= (policies.getNewQueueThreshold() / 2)) { preferredQueues.add(queuePath); } } if (addAQueueIfLeader && leaderLatch.hasLeadership()) { if (queues.size() < policies.getMaxQueues()) { log.info(String.format(""Adding a queue due to exceeded threshold. Queue Size: %d - Threshold: %d"" size policies.getNewQueueThreshold())); addNewQueueIfNeeded(null); } else { log.warn(String.format(""Max number of queues (%d) reached. Consider increasing the max."" policies.getMaxQueues())); } } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""Checking queue counts against threshold"" e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,close,"@Override public void  (){ if (state.compareAndSet(State.STARTED State.CLOSED)) { service.shutdownNow(); CloseableUtils.closeQuietly(leaderLatch); for ( T queue : queues.values()) { try { queue.close(); } catch ( IOException e) { log.error(""Closing a queu"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,getInitialQueues,private void  () throws Exception { List<String> children=client.getChildren().forPath(queuePath); for ( String child : children) { String queuePath=ZKPaths.makePath(this.queuePath child); addNewQueueIfNeeded(queuePath); } if (children.size() == 0) { addNewQueueIfNeeded(null); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,getQueue,"public T  (){ Preconditions.checkState(state.get() == State.STARTED ""Not started""); List<String> localPreferredQueues=Lists.newArrayList(preferredQueues); if (localPreferredQueues.size() > 0) { String key=localPreferredQueues.get(random.nextInt(localPreferredQueues.size())); return queues.get(key); } List<String> keys=Lists.newArrayList(queues.keySet()); String key=keys.get(random.nextInt(keys.size())); return queues.get(key); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,getQueuePaths,public Collection<String>  (){ return ImmutableSet.copyOf(queues.keySet()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,getShardQty,public int  (){ return queues.size(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\QueueSharder.java,start,"public void  () throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); client.createContainers(queuePath); getInitialQueues(); leaderLatch.start(); service.submit(new Callable<Void>(){ @Override public Void call() throws Exception { while (state.get() == State.STARTED) { try { Thread.sleep(policies.getThresholdCheckMs()); checkThreshold(); } catch ( InterruptedException e) { } } return null; } } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,SimpleDistributedQueue,public  (CuratorFramework client String path){ this.client=client; this.path=PathUtils.validatePath(path); ensureContainers=new EnsureContainers(client path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,element,public byte[]  () throws Exception { byte[] bytes=internalElement(false null); if (bytes == null) { throw new NoSuchElementException(); } return bytes; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,ensurePath,protected void  () throws Exception { ensureContainers.ensure(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,internalElement,"private byte[]  (boolean removeIt Watcher watcher) throws Exception { ensurePath(); List<String> nodes; try { nodes=(watcher != null) ? client.getChildren().usingWatcher(watcher).forPath(path) : client.getChildren().forPath(path); } catch ( KeeperException.NoNodeException dummy) { throw new NoSuchElementException(); } Collections.sort(nodes); for ( String node : nodes) { if (!node.startsWith(PREFIX)) { log.warn(""Foreign node in queue path: "" + node); continue; } String thisPath=ZKPaths.makePath(path node); try { byte[] bytes=client.getData().forPath(thisPath); if (removeIt) { client.delete().forPath(thisPath); } return bytes; } catch ( KeeperException.NoNodeException ignore) { } } return null; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,internalPoll,"private byte[]  (long timeout TimeUnit unit) throws Exception { ensurePath(); long startMs=System.currentTimeMillis(); boolean hasTimeout=(unit != null); long maxWaitMs=hasTimeout ? TimeUnit.MILLISECONDS.convert(timeout unit) : Long.MAX_VALUE; for (; ; ) { final CountDownLatch latch=new CountDownLatch(1); Watcher watcher=new Watcher(){ @Override public void process( WatchedEvent event){ latch.countDown(); } } ; byte[] bytes; try { bytes=internalElement(true watcher); } catch ( NoSuchElementException dummy) { log.debug(""Parent containers appear to have lapsed - recreate and retry""); ensureContainers.reset(); continue; } if (bytes != null) { return bytes; } if (hasTimeout) { long elapsedMs=System.currentTimeMillis() - startMs; long thisWaitMs=maxWaitMs - elapsedMs; if (thisWaitMs <= 0) { return null; } latch.await(thisWaitMs TimeUnit.MILLISECONDS); } else { latch.await(); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,offer,public boolean  (byte[] data) throws Exception { String thisPath=ZKPaths.makePath(path PREFIX); client.create().creatingParentContainersIfNeeded().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(thisPath data); return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,peek,public byte[]  () throws Exception { try { return element(); } catch ( NoSuchElementException e) { return null; } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,poll,public byte[]  () throws Exception { try { return remove(); } catch ( NoSuchElementException e) { return null; } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,process,@Override public void  (WatchedEvent event){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,remove,public byte[]  () throws Exception { byte[] bytes=internalElement(true null); if (bytes == null) { throw new NoSuchElementException(); } return bytes; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\queue\SimpleDistributedQueue.java,take,public byte[]  () throws Exception { return internalPoll(0 null); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,SharedCount,protected  (CuratorFramework client String path SharedValue sv){ sharedValue=sv; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,addListener,@Override public void  (final SharedCountListener listener Executor executor){ SharedValueListener valueListener=new SharedValueListener(){ @Override public void valueHasChanged( SharedValueReader sharedValue  byte[] newValue) throws Exception { listener.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,close,@Override public void  () throws IOException { sharedValue.close(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,fromBytes,private static int  (byte[] bytes){ return ByteBuffer.wrap(bytes).getInt(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,getCount,@Override public int  (){ return fromBytes(sharedValue.getValue()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,getVersionedValue,@Override public VersionedValue<Integer>  (){ VersionedValue<byte[]> localValue=sharedValue.getVersionedValue(); return new VersionedValue<Integer>(localValue.getVersion() fromBytes(localValue.getValue())); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,removeListener,@Override public void  (SharedCountListener listener){ SharedValueListener valueListener=listeners.remove(listener); if (valueListener != null) { sharedValue.getListenable().removeListener(valueListener); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,setCount,public void  (int newCount) throws Exception { sharedValue.setValue(toBytes(newCount)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,start,public void  () throws Exception { sharedValue.start(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ listener.stateChanged(client newState); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,toBytes,@VisibleForTesting static byte[]  (int value){ byte[] bytes=new byte[4]; ByteBuffer.wrap(bytes).putInt(value); return bytes; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,trySetCount,public boolean  (VersionedValue<Integer> previous int newCount) throws Exception { VersionedValue<byte[]> previousCopy=new VersionedValue<byte[]>(previous.getVersion() toBytes(previous.getValue())); return sharedValue.trySetValue(previousCopy toBytes(newCount)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedCount.java,valueHasChanged,@Override public void  (SharedValueReader sharedValue byte[] newValue) throws Exception { listener.countHasChanged(SharedCount.this fromBytes(newValue)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\VersionedValue.java,VersionedValue," (int version T value){ this.version=version; this.value=Preconditions.checkNotNull(value ""value cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\VersionedValue.java,getValue,public T  (){ return value; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\VersionedValue.java,getVersion,public int  (){ return version; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,SharedValue,@VisibleForTesting protected  (WatcherRemoveCuratorFramework client String path byte[] seedValue CuratorWatcher watcher){ this.client=client; this.path=PathUtils.validatePath(path); this.seedValue=Arrays.copyOf(seedValue seedValue.length); this.watcher=wa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,apply,@Override public Void  (SharedValueListener listener){ listener.stateChanged(client newState); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,close,@Override public void  () throws IOException { state.set(State.CLOSED); client.removeWatchers(); client.getConnectionStateListenable().removeListener(connectionStateListener); listeners.clear(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,getListenable,public ListenerContainer<SharedValueListener>  (){ return listeners; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,getValue,@Override public byte[]  (){ VersionedValue<byte[]> localCopy=currentValue.get(); return Arrays.copyOf(localCopy.getValue() localCopy.getValue().length); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,getVersionedValue,@Override public VersionedValue<byte[]>  (){ VersionedValue<byte[]> localCopy=currentValue.get(); return new VersionedValue<byte[]>(localCopy.getVersion() Arrays.copyOf(localCopy.getValue() localCopy.getValue().length)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,notifyListenerOfStateChanged,private void  (final ConnectionState newState){ listeners.forEach(new Function<SharedValueListener Void>(){ @Override public Void apply( SharedValueListener listener){ listener.stateChanged(client newState); return null; } } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,notifyListeners,"private void  (){ final byte[] localValue=getValue(); listeners.forEach(new Function<SharedValueListener Void>(){ @Override public Void apply( SharedValueListener listener){ try { listener.valueHasChanged(SharedValue.this localValue); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""From SharedValue listener"" e); } return null; } } ); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,process,@Override public void  (WatchedEvent event) throws Exception { if (state.get() == State.STARTED && event.getType() != Watcher.Event.EventType.None) { readValueAndNotifyListenersInBackground(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { if (event.getResultCode() == KeeperException.Code.OK.intValue()) { updateValue(event.getStat().getVersion() event.getData()); notifyListeners(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,readValue,private void  () throws Exception { Stat localStat=new Stat(); byte[] bytes=client.getData().storingStatIn(localStat).usingWatcher(watcher).forPath(path); updateValue(localStat.getVersion() bytes); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,readValueAndNotifyListenersInBackground,private void  () throws Exception { client.getData().usingWatcher(watcher).inBackground(upadateAndNotifyListenerCallback).forPath(path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,setValue,"public void  (byte[] newValue) throws Exception { Preconditions.checkState(state.get() == State.STARTED ""not started""); Stat result=client.setData().forPath(path newValue); updateValue(result.getVersion() Arrays.copyOf(newValue newValue.length)); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,start,"public void  () throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); client.getConnectionStateListenable().addListener(connectionStateListener); try { client.create().creatingParentContainersIfNeeded().forPath(path seedValue); } catch ( KeeperException.NodeExistsException ignore) { } readValue(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ notifyListenerOfStateChanged(newState); if (newState.isConnected()) { try { readValueAndNotifyListenersInBackground(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,trySetValue,"public boolean  (VersionedValue<byte[]> previous byte[] newValue) throws Exception { Preconditions.checkState(state.get() == State.STARTED ""not started""); VersionedValue<byte[]> current=currentValue.get(); if (previous.getVersion() != current.getVersion() || !Arrays.equals(previous.getValue() current.getValue())) { return false; } try { Stat result=client.setData().withVersion(previous.getVersion()).forPath(path newValue); updateValue(result.getVersion() Arrays.copyOf(newValue newValue.length)); return true; } catch ( KeeperException.BadVersionException ignore) { } readValue(); return false; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\main\java\org\apache\curator\framework\recipes\shared\SharedValue.java,updateValue,private void  (int version byte[] bytes){ while (true) { VersionedValue<byte[]> current=currentValue.get(); if (current.getVersion() >= version) { return; } if (currentValue.compareAndSet(current new VersionedValue<byte[]>(version bytes))) { return; } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,call,@Override public Void  () throws Exception { doSimulation(executionQty timingStats optimisticTries promotedLockTries failures errors); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,doSimulation,"private void  (int executionQty SummaryStatistics timingStats AtomicInteger optimisticTries AtomicInteger promotedLockTries AtomicInteger failures AtomicInteger errors) throws Exception { Random random=new Random(); long previousValue=-1; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { RetryPolicy retryPolicy=new ExponentialBackoffRetry(3 3); PromotedToLock.Builder builder=PromotedToLock.builder().lockPath(""/lock"").retryPolicy(retryPolicy); DistributedAtomicLong dal=new DistributedAtomicLong(client ""/counter"" retryPolicy builder.build()); for (int i=0; i < executionQty; ++i) { Thread.sleep(random.nextInt(10)); long start=System.currentTimeMillis(); AtomicValue<Long> value=dal.increment(); long elapsed=System.currentTimeMillis() - start; timingStats.addValue(elapsed); if (value.succeeded()) { if (value.postValue() <= previousValue) { errors.incrementAndGet(); } previousValue=value.postValue(); } else { failures.incrementAndGet(); } optimisticTries.addAndGet(value.getStats().getOptimisticTries()); promotedLockTries.addAndGet(value.getStats().getPromotedLockTries()); } } finally { client.close(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,testBasic,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { DistributedAtomicLong dal=new DistributedAtomicLong(client ""/foo/bar/counter"" new Retr"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,testCompareAndSet,@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final AtomicBoolean doIncrement=new AtomicBoolean(false); DistributedAtomicLong 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,testCompareAndSetWithFreshInstance,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); DistributedAtomicLong dal=new DistributedAtomicLong(client ""/counter"" new RetryOneTime"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,testCorruptedValue,"@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().forPath(""/counter"" ""foo"".getBytes()); DistributedAtomicLong dal="
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,testForceSet,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final DistributedAtomicLong dal=new DistributedAtomicLong(client ""/counter"" new RetryO"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,testSimulation,@Test public void  () throws Exception { final int threadQty=20; final int executionQty=50; final AtomicInteger optimisticTries=new AtomicInteger(); final AtomicInteger promotedLockTries=new AtomicInteger(); final AtomicInteger failures=new AtomicInteger(
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestDistributedAtomicLong.java,valueToBytes,"@Override public byte[]  (Long newValue){ if (doIncrement.get()) { DistributedAtomicLong inc=new DistributedAtomicLong(client ""/counter"" new RetryOneTime(1)); try { inc.increment(); } catch ( Exception e) { throw new Error(e); } } return super.valueToByte"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\client\TestBackgroundStates.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ stateVector.offer(newState); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\client\TestBackgroundStates.java,testConnectionStateListener,@Test public void  () throws Exception { server.close(); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(timing.milliseconds())); try { c
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\client\TestBackgroundStates.java,testListenersReconnectedIsOK,@Test public void  () throws Exception { server.close(); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); PersistentEphemeralNode nod
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\client\TestResetConnectionWithBackgroundFailure.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ listenerSequence.add(newState); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\client\TestResetConnectionWithBackgroundFailure.java,takeLeadership,@Override public void  (CuratorFramework client) throws Exception { Thread.currentThread().join(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\client\TestResetConnectionWithBackgroundFailure.java,testConnectionStateListener,@Test public void  () throws Exception { server.stop(); LeaderSelector selector=null; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1))
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,add,@Override public AtomicValue<Long>  (Long delta) throws Exception { return fakeValueRef.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,compareAndSet,@Override public AtomicValue<Long>  (Long expectedValue Long newValue) throws Exception { return fakeValueRef.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,decrement,@Override public AtomicValue<Long>  () throws Exception { return fakeValueRef.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,get,@Override public AtomicValue<Long>  () throws Exception { return fakeValueRef.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,increment,@Override public AtomicValue<Long>  () throws Exception { return fakeValueRef.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,subtract,@Override public AtomicValue<Long>  (Long delta) throws Exception { return fakeValueRef.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,testBasic,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { DistributedAtomicLong dal=new DistributedAtomicLong(client ""/counter"" new RetryOneTime"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,testWithError,@Test public void  () throws Exception { final int FACTOR=100; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { AtomicValue<Long> value=new MutableAtomicValue<Long>(0L (long)FA
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\atomic\TestCachedAtomicCounter.java,trySet,@Override public AtomicValue<Long>  (Long newValue) throws Exception { return fakeValueRef.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedDoubleBarrier.java,call,"@Override public Void  () throws Exception { DistributedDoubleBarrier barrier=new DistributedDoubleBarrier(client ""/barrier"" QTY); Assert.assertTrue(barrier.enter(timing.seconds() TimeUnit.SECONDS)); synchronized (TestDistributedDoubleBarrier.this) { int "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedDoubleBarrier.java,getChildrenForEntering,@Override protected List<String>  () throws Exception { semaphore.release(); Assert.assertTrue(timing.awaitLatch(latch)); return super.getChildrenForEntering(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedDoubleBarrier.java,testBasic,@Test public void  () throws Exception { final Timing timing=new Timing(); final List<Closeable> closeables=Lists.newArrayList(); final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection(
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedDoubleBarrier.java,testMultiClient,@Test public void  () throws Exception { final Timing timing=new Timing(); final CountDownLatch postEnterLatch=new CountDownLatch(QTY); final CountDownLatch postLeaveLatch=new CountDownLatch(QTY); final AtomicInteger count=new AtomicInteger(0); final Atom
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedDoubleBarrier.java,testOverSubscribed,@Test public void  () throws Exception { final Timing timing=new Timing(); final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); ExecutorService service=Executo
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedBarrier.java,call,@Override public Object  () throws Exception { Thread.sleep(1000); barrier.removeBarrier(); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedBarrier.java,testBasic,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final DistributedBarrier barrier=new DistributedBarrier(client ""/barrier""); barrier.se"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedBarrier.java,testMultiClient,@Test public void  () throws Exception { CuratorFramework client1=null; CuratorFramework client2=null; try { { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); DistributedBarri
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedBarrier.java,testNoBarrier,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final DistributedBarrier barrier=new DistributedBarrier(client ""/barrier""); Assert.ass"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\barriers\TestDistributedBarrier.java,testServerCrash,@Test public void  () throws Exception { final int TIMEOUT=1000; final CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).connectionTimeoutMs(TIMEOUT).retryPolicy(new RetryOneTime(1)).build(); try { client.s
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,assertEvent,"TreeCacheEvent  (TreeCacheEvent.Type expectedType String expectedPath byte[] expectedData) throws InterruptedException { TreeCacheEvent event=events.poll(timing.forWaiting().seconds() TimeUnit.SECONDS); Assert.assertNotNull(event String.format(""Expected type: %s  path: %s"" expectedType expectedPath)); String message=event.toString(); Assert.assertEquals(event.getType() expectedType message); if (expectedPath == null) { Assert.assertNull(event.getData() message); } else { Assert.assertNotNull(event.getData() message); Assert.assertEquals(event.getData().getPath() expectedPath message); } if (expectedData != null) { Assert.assertEquals(event.getData().getData() expectedData message); } return event; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,assertNoMoreEvents,"void  () throws InterruptedException { timing.sleepABit(); Assert.assertTrue(events.isEmpty() String.format(""Expected no events  found %d; first event: %s"" events.size() events.peek())); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,buildWithListeners,protected TreeCache  (TreeCache.Builder builder){ TreeCache result=builder.build(); result.getListenable().addListener(eventListener); result.getUnhandledErrorListenable().addListener(errorListener); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,childEvent,"@Override public void  (CuratorFramework client TreeCacheEvent event) throws Exception { if (event.getData() != null && event.getData().getPath().startsWith(""/zookeeper"")) { return; } events.add(event); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,initCuratorFramework,void  (){ client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); client.getUnhandledErrorListenable().addListener(errorListener); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,newTreeCacheWithListeners,protected TreeCache  (CuratorFramework client String path){ TreeCache result=new TreeCache(client path); result.getListenable().addListener(eventListener); result.getUnhandledErrorListenable().addListener(errorListener); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,setup,@Override @BeforeMethod public void  () throws Exception { super.setup(); initCuratorFramework(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,teardown,"@Override @AfterMethod public void  () throws Exception { try { try { Assert.assertFalse(hadBackgroundException.get() ""Background exceptions were thrown  see stderr for details""); assertNoMoreEvents(); } finally { CloseableUtils.closeQuietly(cache); TestC"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\BaseTestTreeCache.java,unhandledError,@Override public void  (String message Throwable e){ hadBackgroundException.set(true); e.printStackTrace(System.err); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestEventOrdering.java,Event,public  (EventType eventType String path){ this.eventType=eventType; this.path=path; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestEventOrdering.java,asString,"private String  (List<Event> events){ int qty=0; StringBuilder str=new StringBuilder(); for ( Event event : events) { qty+=(event.eventType == EventType.ADDED) ? 1 : -1; str.append(event.eventType).append("" "").append(event.path).append("" @ "").append(event.time - start).append(' ').append(qty); str.append(""\n""); } return str.toString(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestEventOrdering.java,call,@Override public Void  () throws Exception { try { return task.call(); } finally { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCacheEventOrdering.java,childEvent,@Override public void  (CuratorFramework client PathChildrenCacheEvent event) throws Exception { if (event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED) { events.add(new Event(EventType.ADDED event.getData().getPath())); } if (event.getType() == P
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCacheEventOrdering.java,getActualQty,@Override protected int  (PathChildrenCache cache){ return cache.getCurrentData().size(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCacheEventOrdering.java,newCache,@Override protected PathChildrenCache  (CuratorFramework client String path final BlockingQueue<Event> events) throws Exception { PathChildrenCache cache=new PathChildrenCache(client path false); PathChildrenCacheListener listener=new PathChildrenCacheLis
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestNodeCache.java,call,"@Override public Object  () throws Exception { finalCache.rebuildTestExchanger.exchange(new Object() 10 TimeUnit.SECONDS); client.setData().forPath(""/test/snafu"" ""other"".getBytes()); ChildData currentData=finalCache.getCurrentData(); Assert.assertNotNull("
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestNodeCache.java,nodeChanged,@Override public void  () throws Exception { semaphore.release(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestNodeCache.java,testBasics,@Test public void  () throws Exception { NodeCache cache=null; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try {
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestNodeCache.java,testDeleteThenCreate,"@Test public void  () throws Exception { NodeCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().creatingParentsIfNeeded().forPath(""/test/foo"" ""o"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestNodeCache.java,testKilledSession,@Test public void  () throws Exception { NodeCache cache=null; Timing timing=new Timing(); CuratorFramework client=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); cl
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestNodeCache.java,testRebuildAgainstOtherProcesses,"@Test public void  () throws Exception { NodeCache cache=null; final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().forPath(""/test""); client.create().forPath("
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestNodeCache.java,unhandledError,@Override public void  (String message Throwable e){ error.set(e); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheEventOrdering.java,childEvent,"@Override public void  (CuratorFramework client TreeCacheEvent event) throws Exception { if ((event.getData() != null) && (event.getData().getPath().startsWith(""/root/""))) { if (event.getType() == TreeCacheEvent.Type.NODE_ADDED) { events.add(new Event(Eve"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheEventOrdering.java,getActualQty,"@Override protected int  (TreeCache cache){ return cache.getCurrentChildren(""/root"").size(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheEventOrdering.java,newCache,@Override protected TreeCache  (CuratorFramework client String path final BlockingQueue<Event> events) throws Exception { TreeCache cache=new TreeCache(client path); TreeCacheListener listener=new TreeCacheListener(){ @Override public void childEvent( Cur
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCacheInCluster.java,childEvent,@Override public void  (CuratorFramework client PathChildrenCacheEvent event) throws Exception { if (event.getType() == PathChildrenCacheEvent.Type.CONNECTION_SUSPENDED) { resetLatch.countDown(); } else if (event.getType() == PathChildrenCacheEvent.Type.C
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCacheInCluster.java,testMissedDelete,@Test(enabled=false) public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client1=null; CuratorFramework client2=null; TestingCluster cluster=new TestingCluster(3); try { cluster.start(); InstanceSp
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCacheInCluster.java,testServerLoss,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=null; PathChildrenCache cache=null; TestingCluster cluster=new TestingCluster(3); try { cluster.start(); client=CuratorFrameworkFactory.newClient(cluster.getConne
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,acceptChild,"@Override public boolean  (String fullPath){ return !fullPath.equals(""/root/n1-c""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,childEvent,"@Override public void  (CuratorFramework client TreeCacheEvent event) throws Exception { if (event.getType() == Type.NODE_UPDATED) { throw new RuntimeException(""Test Exception""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testAsyncInitialPopulation,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/one"" ""hey there"".getBytes()); cache=newTreeCacheWithListeners(client ""/test""); cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/test""); as"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testBasics,"@Test public void  () throws Exception { client.create().forPath(""/test""); cache=newTreeCacheWithListeners(client ""/test""); cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/test""); assertEvent(TreeCacheEvent.Type.INITIALIZED); Assert.assertEqua"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testBasicsOnTwoCaches,"@Test public void  () throws Exception { TreeCache cache2=newTreeCacheWithListeners(client ""/test""); cache2.getListenable().removeListener(eventListener); final Semaphore semaphore=new Semaphore(0); cache2.getListenable().addListener(new TreeCacheListener"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testChildrenInitialized,"@Test public void  () throws Exception { client.create().forPath(""/test"" """".getBytes()); client.create().forPath(""/test/1"" ""1"".getBytes()); client.create().forPath(""/test/2"" ""2"".getBytes()); client.create().forPath(""/test/3"" ""3"".getBytes()); cache=newTree"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testCreateParents,"@Test public void  () throws Exception { cache=newTreeCacheWithListeners(client ""/one/two/three""); cache.start(); assertEvent(TreeCacheEvent.Type.INITIALIZED); assertNoMoreEvents(); Assert.assertNull(client.checkExists().forPath(""/one/two/three"")); cache."
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testDeleteNodeAfterCloseDoesntCallExecutor,"@Test public void  () throws Exception { client.create().forPath(""/test""); cache=newTreeCacheWithListeners(client ""/test""); cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/test""); assertEvent(TreeCacheEvent.Type.INITIALIZED); client.create().f"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testDeleteThenCreate,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/foo"" ""one"".getBytes()); cache=newTreeCacheWithListeners(client ""/test""); cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/test""); assertEv"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testDeleteThenCreateRoot,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/foo"" ""one"".getBytes()); cache=newTreeCacheWithListeners(client ""/test/foo""); cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/test/foo""); "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testDepth0,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/1"" ""one"".getBytes()); client.create().forPath(""/test/2"" ""two"".getBytes()); client.create().forPath(""/test/3"" ""three"".getBytes()); client.create().for"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testDepth1,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/1"" ""one"".getBytes()); client.create().forPath(""/test/2"" ""two"".getBytes()); client.create().forPath(""/test/3"" ""three"".getBytes()); client.create().for"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testDepth1Deeper,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/foo""); client.create().forPath(""/test/foo/bar""); client.create().forPath(""/test/foo/bar/1"" ""one"".getBytes()); client.create().forPath(""/test/foo/bar/"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testErrorListener,"@Test public void  () throws Exception { client.create().forPath(""/test""); cache=buildWithListeners(TreeCache.newBuilder(client ""/test"")); cache.getListenable().addListener(new TreeCacheListener(){ @Override public void childEvent( CuratorFramework client"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testFromRoot,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/one"" ""hey there"".getBytes()); cache=newTreeCacheWithListeners(client ""/""); cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/""); assertEven"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testFromRootWithDepth,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/one"" ""hey there"".getBytes()); cache=buildWithListeners(TreeCache.newBuilder(client ""/"").setMaxDepth(1)); cache.start(); assertEvent(TreeCacheEvent.Ty"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testKilledSession,"@Test public void  () throws Exception { client.create().forPath(""/test""); cache=newTreeCacheWithListeners(client ""/test""); cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/test""); assertEvent(TreeCacheEvent.Type.INITIALIZED); client.create().f"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testSelector,"@Test public void  () throws Exception { client.create().forPath(""/root""); client.create().forPath(""/root/n1-a""); client.create().forPath(""/root/n1-b""); client.create().forPath(""/root/n1-b/n2-a""); client.create().forPath(""/root/n1-b/n2-b""); client.create("
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testServerNotStartedYet,"@Test public void  () throws Exception { server.stop(); client.close(); initCuratorFramework(); cache=newTreeCacheWithListeners(client ""/test""); cache.start(); assertNoMoreEvents(); server.restart(); assertEvent(TreeCacheEvent.Type.INITIALIZED); client.cr"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testStartEmpty,"@Test public void  () throws Exception { cache=newTreeCacheWithListeners(client ""/test""); cache.start(); assertEvent(TreeCacheEvent.Type.INITIALIZED); client.create().forPath(""/test""); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/test""); assertNoMoreEvent"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testStartEmptyDeeper,"@Test public void  () throws Exception { cache=newTreeCacheWithListeners(client ""/test/foo/bar""); cache.start(); assertEvent(TreeCacheEvent.Type.INITIALIZED); client.create().creatingParentsIfNeeded().forPath(""/test/foo""); assertNoMoreEvents(); client.cre"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testStartup,"@Test public void  () throws Exception { client.create().forPath(""/test""); client.create().forPath(""/test/1"" ""one"".getBytes()); client.create().forPath(""/test/2"" ""two"".getBytes()); client.create().forPath(""/test/3"" ""three"".getBytes()); client.create().for"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testSyncInitialPopulation,"@Test public void  () throws Exception { cache=newTreeCacheWithListeners(client ""/test""); cache.start(); assertEvent(TreeCacheEvent.Type.INITIALIZED); client.create().forPath(""/test""); client.create().forPath(""/test/one"" ""hey there"".getBytes()); assertEve"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testUpdateWhenNotCachingData,"@Test public void  () throws Exception { client.create().forPath(""/test""); cache=buildWithListeners(TreeCache.newBuilder(client ""/test"").setCacheData(false)); cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/test""); assertEvent(TreeCacheEvent.T"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testWithNamespace,"@Test public void  () throws Exception { client.create().forPath(""/outer""); client.create().forPath(""/outer/foo""); client.create().forPath(""/outer/test""); client.create().forPath(""/outer/test/one"" ""hey there"".getBytes()); cache=newTreeCacheWithListeners(c"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,testWithNamespaceAtRoot,"@Test public void  () throws Exception { client.create().forPath(""/outer""); client.create().forPath(""/outer/foo""); client.create().forPath(""/outer/test""); client.create().forPath(""/outer/test/one"" ""hey there"".getBytes()); cache=newTreeCacheWithListeners(c"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,traverseChildren,"@Override public boolean  (String fullPath){ return !fullPath.equals(""/root/n1-b/n2-b""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCache.java,unhandledError,@Override public void  (String message Throwable e){ Assert.assertFalse(isProcessed.compareAndSet(false true)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,call,"@Override public Object  () throws Exception { cache.rebuildTestExchanger.exchange(new Object()); client.create().forPath(""/test/test""); List<ChildData> currentData=cache.getCurrentData(); Assert.assertTrue(currentData.size() > 0); client.delete().forPath"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,childEvent,"@Override public void  (CuratorFramework client PathChildrenCacheEvent event) throws Exception { if (event.getData().getPath().equals(""/test/one"")) { events2.offer(event.getType()); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,ensurePath,@Override protected void  () throws Exception { try { super.ensurePath(); } catch ( Exception e) { ensurePathLatch.countDown(); throw e; } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,getDataAndStat,@Override void  (String fullPath) throws Exception { semaphore.acquire(); counter.incrementAndGet(); super.getDataAndStat(fullPath); latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,handleException,@Override protected void  (Throwable e){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,internalTestMode,"private void  (CuratorFramework client boolean cacheData) throws Exception { try (PathChildrenCache cache=new PathChildrenCache(client ""/test"" cacheData)){ final CountDownLatch latch=new CountDownLatch(2); cache.getListenable().addListener(new PathChildrenCacheListener(){ @Override public void childEvent( CuratorFramework client  PathChildrenCacheEvent event) throws Exception { if (event.getType() == PathChildrenCacheEvent.Type.CHILD_ADDED) { latch.countDown(); } } } ); cache.start(); client.create().forPath(""/test/one"" ""one"".getBytes()); client.create().forPath(""/test/two"" ""two"".getBytes()); Assert.assertTrue(latch.await(10 TimeUnit.SECONDS)); for ( ChildData data : cache.getCurrentData()) { if (cacheData) { Assert.assertNotNull(data.getData()); Assert.assertNotNull(data.getStat()); } else { Assert.assertNull(data.getData()); Assert.assertNotNull(data.getStat()); } } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,invoke,@Override public void  () throws Exception { Thread.sleep(5000); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.CONNECTED) { connectedLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testAsyncInitialPopulation,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testBasics,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { client.create().forPa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testBasicsOnTwoCachesWithSameExecutor,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { client.create().forPa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testChildrenInitialized,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testChildrenInitializedNormal,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testDeleteNodeAfterCloseDoesntCallExecutor,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { client.create().forPa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testDeleteThenCreate,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { client.create().forPa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testEnsurePath,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { try (PathChildrenCach
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testInterruptedOperationOnShutdown,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() 30000 30000 new RetryOneTime(1)); client.start(); try { final CountDownLatch latch=new CountDownLatch(1); try (final PathChildrenC
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testIssue27,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testIssue27Alt,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testKilledSession,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testModes,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { client.create().forPa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testParentContainerMissing,"@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); PathChildrenCache cache=new PathChildrenCache(client ""/a/b/test"" true); try { cl"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testPostInitializedForEmpty,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testRebuildAgainstOtherProcesses,@Test public void  () throws Exception { Timing timing=new Timing(); final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { client.create()
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testRebuildNode,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testUpdateWhenNotCachingData,@Test public void  () throws Exception { Timing timing=new Timing(); PathChildrenCache cache=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,testWithBadConnect,@Test public void  () throws Exception { final int serverPort=server.getPort(); server.close(); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() 1000 1000 new RetryOneTime(1)); try { client.st
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestPathChildrenCache.java,unhandledError,@Override public void  (String message Throwable e){ error.set(e); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheRandomTree.java,TestNode, (String fullPath byte[] data){ this.fullPath=fullPath; this.data=data; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheRandomTree.java,assertNodeEquals,private static void  (ChildData actualChild TestNode expectedNode){ String path=expectedNode.fullPath; Assert.assertNotNull(actualChild path); Assert.assertEquals(actualChild.getData() expectedNode.data path); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheRandomTree.java,assertTreeEquals,private void  (TreeCache cache TestNode expectedNode int depth){ String path=expectedNode.fullPath; Map<String ChildData> cacheChildren=cache.getCurrentChildren(path); Assert.assertNotNull(cacheChildren path); if (withDepth && depth == TEST_DEPTH) { return; } Assert.assertEquals(cacheChildren.keySet() expectedNode.children.keySet() path); for ( Map.Entry<String TestNode> entry : expectedNode.children.entrySet()) { String nodeName=entry.getKey(); ChildData childData=cacheChildren.get(nodeName); TestNode expectedChild=entry.getValue(); assertNodeEquals(childData expectedChild); assertTreeEquals(cache expectedChild depth + 1); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheRandomTree.java,doTestGiantRandomDeepTree,"private void  () throws Exception { client.create().forPath(""/tree"" null); CuratorFramework cl=client.usingNamespace(""tree""); if (withDepth) { cache=buildWithListeners(TreeCache.newBuilder(cl ""/"").setMaxDepth(TEST_DEPTH)); } else { cache=newTreeCacheWithListeners(cl ""/""); } cache.start(); assertEvent(TreeCacheEvent.Type.NODE_ADDED ""/""); assertEvent(TreeCacheEvent.Type.INITIALIZED); TestNode root=new TestNode(""/"" null); int maxDepth=0; int adds=0; int removals=0; int updates=0; for (int i=0; i < ITERATIONS; ++i) { int depth=0; TestNode last=null; TestNode node=root; while (!node.children.isEmpty() && random.nextDouble() < DIVE_CHANCE) { last=node; node=Iterables.get(node.children.values() random.nextInt(node.children.size())); ++depth; } maxDepth=Math.max(depth maxDepth); switch (random.nextInt(3)) { case 0: if (node != root && node.children.isEmpty()) { TestNode removed=last.children.remove(ZKPaths.getNodeFromPath(node.fullPath)); Assert.assertSame(node removed); cl.delete().forPath(node.fullPath); if (shouldSeeEventAt(node.fullPath)) { assertEvent(TreeCacheEvent.Type.NODE_REMOVED node.fullPath); } ++removals; } break; case 1: byte[] newData=new byte[10]; random.nextBytes(newData); if (Arrays.equals(node.data newData)) { continue; } node.data=newData; cl.setData().forPath(node.fullPath node.data); if (shouldSeeEventAt(node.fullPath)) { assertEvent(TreeCacheEvent.Type.NODE_UPDATED node.fullPath node.data); } ++updates; break; case 2: String name=Long.toHexString(random.nextLong()); if (node.children.containsKey(name)) { continue; } byte[] data=new byte[10]; random.nextBytes(data); TestNode child=new TestNode(ZKPaths.makePath(node.fullPath name) data); node.children.put(name child); cl.create().forPath(child.fullPath child.data); if (shouldSeeEventAt(child.fullPath)) { assertEvent(TreeCacheEvent.Type.NODE_ADDED child.fullPath child.data); } ++adds; break; } assertNodeEquals(cache.getCurrentData(""/"") root); assertTreeEquals(cache root 0); } System.out.println(String.format(""maxDepth: %s  adds: %s  removals: %s  updates: %s"" maxDepth adds removals updates)); assertNoMoreEvents(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheRandomTree.java,shouldSeeEventAt,private boolean  (String fullPath){ return !withDepth || ZKPaths.split(fullPath).size() <= TEST_DEPTH; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheRandomTree.java,testGiantRandomDeepTree,@Test public void  () throws Exception { doTestGiantRandomDeepTree(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\cache\TestTreeCacheRandomTree.java,testGiantRandomDeepTreeWithDepth,@Test public void  () throws Exception { withDepth=true; doTestGiantRandomDeepTree(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\ChaosMonkeyCnxnFactory.java,ChaosMonkeyZookeeperServer,public  (ZooKeeperServer zks){ this.zks=zks; setTxnLogFactory(zks.getTxnLogFactory()); setTickTime(zks.getTickTime()); setMinSessionTimeout(zks.getMinSessionTimeout()); setMaxSessionTimeout(zks.getMaxSessionTimeout()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\ChaosMonkeyCnxnFactory.java,startup,"@Override public void  (){ super.startup(); if (zks instanceof TestingZooKeeperMain.TestZooKeeperServer) { ((TestingZooKeeperMain.TestZooKeeperServer)zks).noteStartup(); } else { throw new RuntimeException(""Unknown ZooKeeperServer: "" + zks.getClass()); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\ChaosMonkeyCnxnFactory.java,submitRequest,@Override public void  (Request si){ long remaining=firstError != 0 ? LOCKOUT_DURATION_MS - (System.currentTimeMillis() - firstError) : 0; if (si.type != ZooDefs.OpCode.createSession && si.type != ZooDefs.OpCode.sync && si.type != ZooDefs.OpCode.ping && f
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderAcls.java,getAclForPath,"@Override public List<ACL>  (String path){ if (path.equals(""/base"")) { try { String testDigest=DigestAuthenticationProvider.generateDigest(""test:test""); return Collections.singletonList(new ACL(ZooDefs.Perms.ALL new Id(""digest"" testDigest))); } catch ( No"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderAcls.java,getDefaultAcl,@Override public List<ACL>  (){ return ZooDefs.Ids.OPEN_ACL_UNSAFE; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderAcls.java,testAclErrorWithLeader,"@Test(description=""Validation test for CURATOR-365"") public void  () throws Exception { ACLProvider provider=new ACLProvider(){ @Override public List<ACL> getDefaultAcl(){ return ZooDefs.Ids.OPEN_ACL_UNSAFE; } @Override public List<ACL> getAclForPath( Str"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderAcls.java,unhandledError,@Override public void  (String message Throwable e){ if (e instanceof KeeperException.NoAuthException) { noAuthLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatchCluster.java,ClientAndLatch,private  (CuratorFramework client LeaderLatch latch int index){ this.client=client; this.latch=latch; this.index=index; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatchCluster.java,getLeaders,private List<ClientAndLatch>  (Collection<ClientAndLatch> latches){ List<ClientAndLatch> leaders=Lists.newArrayList(); for ( ClientAndLatch clientAndLatch : latches) { if (clientAndLatch.latch.hasLeadership()) { leaders.add(clientAndLatch); } } return leaders; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatchCluster.java,testInCluster,@Test public void  () throws Exception { final int PARTICIPANT_QTY=3; List<ClientAndLatch> clients=Lists.newArrayList(); Timing timing=new Timing(); TestingCluster cluster=new TestingCluster(PARTICIPANT_QTY); try { cluster.start(); List<InstanceSpec> inst
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatchCluster.java,waitForALeader,private ClientAndLatch  (List<ClientAndLatch> latches Timing timing) throws InterruptedException { for (int i=0; i < MAX_LOOPS; ++i) { List<ClientAndLatch> leaders=getLeaders(latches); if (leaders.size() != 0) { return leaders.get(0); } timing.sleepABit(); } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,basic,private void  (Mode mode) throws Exception { final int PARTICIPANT_QTY=1; List<LeaderLatch> latches=Lists.newArrayList(); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); for (int i=0; i < PARTICIPANT_QTY; ++i) { LeaderLatch latch=new LeaderLatch(client PATH_NAME); if (mode == Mode.START_IMMEDIATELY) { latch.start(); } latches.add(latch); } if (mode == Mode.START_IN_THREADS) { ExecutorService service=Executors.newFixedThreadPool(latches.size()); for ( final LeaderLatch latch : latches) { service.submit(new Callable<Object>(){ @Override public Object call() throws Exception { Thread.sleep((int)(100 * Math.random())); latch.start(); return null; } } ); } service.shutdown(); } while (latches.size() > 0) { List<LeaderLatch> leaders=waitForALeader(latches timing); Assert.assertEquals(leaders.size() 1); LeaderLatch theLeader=leaders.get(0); if (mode == Mode.START_IMMEDIATELY) { Assert.assertEquals(latches.indexOf(theLeader) 0); } theLeader.close(); latches.remove(theLeader); } } finally { for ( LeaderLatch latch : latches) { CloseableUtils.closeQuietly(latch); } TestCleanState.closeAndTestClean(client); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,call,@Override public Object  () throws Exception { Thread.sleep((int)(100 * Math.random())); latch.start(); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,cancelStartTask,@Override protected boolean  (){ if (super.cancelStartTask()) { cancelStartTaskLatch.countDown(); return true; } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,getLeaders,private List<LeaderLatch>  (Collection<LeaderLatch> latches){ List<LeaderLatch> leaders=Lists.newArrayList(); for ( LeaderLatch latch : latches) { if (latch.hasLeadership()) { leaders.add(latch); } } return leaders; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,internalTestWaitingOnce,private void  () throws Exception { final int PARTICIPANT_QTY=10; ExecutorService executorService=Executors.newFixedThreadPool(PARTICIPANT_QTY); ExecutorCompletionService<Void> service=new ExecutorCompletionService<Void>(executorService); final Timing timing=new Timing(); final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); final AtomicBoolean thereIsALeader=new AtomicBoolean(false); for (int i=0; i < PARTICIPANT_QTY; ++i) { service.submit(new Callable<Void>(){ @Override public Void call() throws Exception { LeaderLatch latch=new LeaderLatch(client PATH_NAME); try { latch.start(); Assert.assertTrue(latch.await(timing.forWaiting().seconds() TimeUnit.SECONDS)); Assert.assertTrue(thereIsALeader.compareAndSet(false true)); Thread.sleep((int)(10 * Math.random())); thereIsALeader.set(false); } finally { latch.close(); } return null; } } ); } for (int i=0; i < PARTICIPANT_QTY; ++i) { service.take().get(); } } finally { executorService.shutdownNow(); TestCleanState.closeAndTestClean(client); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,isLeader,@Override public void  (){ leaderCounter.countDown(); leaderCount.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,notLeader,@Override public void  (){ notLeaderCount.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,reset,@Override void  () throws Exception { resetCalled.set(true); super.reset(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.LOST) { countDownLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testBasic,@Test public void  () throws Exception { basic(Mode.START_IMMEDIATELY); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testBasicAlt,@Test public void  () throws Exception { basic(Mode.START_IN_THREADS); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testCallbackDontNotify,@Test public void  () throws Exception { final AtomicLong masterCounter=new AtomicLong(0); final AtomicLong notLeaderCounter=new AtomicLong(0); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString()
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testCallbackNotifyLeader,@Test public void  () throws Exception { final int PARTICIPANT_QTY=10; final int SILENT_QTY=3; final CountDownLatch timesSquare=new CountDownLatch(PARTICIPANT_QTY); final AtomicLong masterCounter=new AtomicLong(0); final AtomicLong notLeaderCounter=new At
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testCallbackSanity,@Test public void  () throws Exception { final int PARTICIPANT_QTY=10; final CountDownLatch timesSquare=new CountDownLatch(PARTICIPANT_QTY); final AtomicLong masterCounter=new AtomicLong(0); final AtomicLong notLeaderCounter=new AtomicLong(0); Timing timi
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testCorrectWatching,@Test public void  () throws Exception { final int PARTICIPANT_QTY=10; final int PARTICIPANT_ID=2; List<LeaderLatch> latches=Lists.newArrayList(); final Timing timing=new Timing(); final CuratorFramework client=CuratorFrameworkFactory.newClient(server.get
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testCreateDeleteRace,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); client.create().creat
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testErrorPolicies,@Test public void  () throws Exception { Timing2 timing=new Timing2(); LeaderLatch latch=null; CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).connectionTimeoutMs(1000).sessionTimeoutMs(timing.session()).
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testLostConnection,@Test public void  () throws Exception { final int PARTICIPANT_QTY=10; List<LeaderLatch> latches=Lists.newArrayList(); final Timing timing=new Timing(); final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.sessi
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testNoServerAtStart,@Test public void  (){ CloseableUtils.closeQuietly(server); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryNTimes(5 1000)); client.start(); fina
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testProperCloseWithoutConnectionEstablished,@Test public void  () throws Exception { server.stop(); Timing timing=new Timing(); LeaderLatch latch=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testRelativePath,@Test(expectedExceptions=IllegalArgumentException.class) public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTi
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testResetRace,@Test public void  () throws Exception { Timing timing=new Timing(); LeaderLatch latch=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testSessionErrorPolicy,@Test public void  () throws Exception { Timing timing=new Timing(); LeaderLatch latch=null; CuratorFramework client=null; for (int i=0; i < 2; ++i) { boolean isSessionIteration=(i == 0); try { client=CuratorFrameworkFactory.builder().connectString(server
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testUncreatedPathGetLeader,"@Test public void  () throws Exception { try (CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1))){ client.start(); LeaderLatch latch=new LeaderLatch(client ""/foo/bar""); latch.getLeader(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,testWaiting,"@Test public void  () throws Exception { final int LOOPS=10; for (int i=0; i < LOOPS; ++i) { System.out.println(""TRY #"" + i); internalTestWaitingOnce(); Thread.sleep(10); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderLatch.java,waitForALeader,private List<LeaderLatch>  (List<LeaderLatch> latches Timing timing) throws InterruptedException { for (int i=0; i < MAX_LOOPS; ++i) { List<LeaderLatch> leaders=getLeaders(latches); if (leaders.size() != 0) { return leaders; } timing.sleepABit(); } return Lists.newArrayList(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorCluster.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.LOST) { internalLostLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorCluster.java,takeLeadership,"@Override public void  (CuratorFramework client) throws Exception { try { List<String> names=client.getChildren().forPath(""/leader""); if (names.size() != 1) { semaphore.release(); Exception exception=new Exception(""Names size isn't 1: "" + names.size()); e"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorCluster.java,testLostRestart,@Test public void  () throws Exception { final Timing timing=new Timing(); CuratorFramework client=null; TestingCluster cluster=new TestingCluster(3); cluster.start(); try { client=CuratorFrameworkFactory.newClient(cluster.getConnectString() timing.sessio
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorCluster.java,testRestart,@Test public void  () throws Exception { final Timing timing=new Timing(); CuratorFramework client=null; TestingCluster cluster=new TestingCluster(3); cluster.start(); try { client=CuratorFrameworkFactory.newClient(cluster.getConnectString() timing.sessio
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,takeLeadership,@Override public void  (CuratorFramework client) throws Exception { timing.sleepABit(); leaderList.add(ourIndex); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testAutoRequeue,@Test public void  () throws Exception { Timing timing=new Timing(); LeaderSelector selector=null; CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).sessionTimeoutMs(timing.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testClosing,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final CountDownLatch latch=new CountDownLatch(1); LeaderSelector leaderSelector1=new L
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testErrorPolicies,@Test public void  () throws Exception { Timing2 timing=new Timing2(); LeaderSelector selector=null; CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).connectionTimeoutMs(timing.connection()).sessionTimeout
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testInterruptLeadership,@Test public void  () throws Exception { LeaderSelector selector=null; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testInterruptLeadershipWithRequeue,@Test public void  () throws Exception { Timing timing=new Timing(); LeaderSelector selector=null; CuratorFramework client=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testKillServerThenCloseShouldElectNewLeader,@Test public void  () throws Exception { final Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { final Semaphore
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testKillSessionThenCloseShouldElectNewLeader,@Test public void  () throws Exception { final Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { final Semaphore
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testLeaderNodeDeleteOnInterrupt,@Test public void  () throws Exception { Timing2 timing=new Timing2(); LeaderSelector selector=null; CuratorFramework client=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTi
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testRaceAtStateChanged,@Test public void  () throws Exception { LeaderSelector selector=null; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testRotatingLeadership,"@SuppressWarnings({""ForLoopReplaceableByForEach""}) @Test public void  () throws Exception { final int LEADER_QTY=5; final int REPEAT_QTY=3; final Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelector.java,testServerDying,@Test public void  () throws Exception { Timing timing=new Timing(); LeaderSelector selector=null; CuratorFramework client=CuratorFrameworkFactory.builder().connectionTimeoutMs(timing.connection()).connectString(server.getConnectString()).retryPolicy(new 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorWithExecutor.java,getLeaderCount,public int  (){ return leaderCount.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorWithExecutor.java,stateChanged,@Override public void  (CuratorFramework curatorFramework ConnectionState newState){ if ((newState == ConnectionState.LOST) || (newState == ConnectionState.SUSPENDED)) { if (ourThread != null) { ourThread.interrupt(); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorWithExecutor.java,takeLeadership,@Override public void  (CuratorFramework curatorFramework) throws Exception { ourThread=Thread.currentThread(); try { leaderCount.incrementAndGet(); while (!Thread.currentThread().isInterrupted()) { Thread.sleep(1000); } } catch ( InterruptedException e) 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorWithExecutor.java,test,@Test public void  () throws Exception { Timing timing=new Timing(); LeaderSelector leaderSelector=null; CuratorFramework client=CuratorFrameworkFactory.builder().retryPolicy(new ExponentialBackoffRetry(100 3)).connectString(server.getConnectString()).ses
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorParticipants.java,doWork,@Override void  () throws Exception { workingLatch.countDown(); super.doWork(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorParticipants.java,takeLeadership,@Override public void  (CuratorFramework client) throws Exception { leaderLatch.countDown(); Thread.currentThread().join(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorParticipants.java,testBasic,@Test public void  () throws Exception { final int SELECTOR_QTY=10; List<LeaderSelector> selectors=Lists.newArrayList(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorParticipants.java,testId,@Test public void  () throws Exception { LeaderSelector selector=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final CountDownLatch latch=new CountDownLatch(1); Leader
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorEdges.java,createProtectedNodeInBackgroundTest,@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryNTimes(2 100)).connectionTimeoutMs(1000).sessionTimeoutMs(60000).build(); final CountDow
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorEdges.java,createProtectedNodeInBackgroundTestNoRetry,@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryNTimes(0 0)).connectionTimeoutMs(1000).sessionTimeoutMs(60000).build(); final CountDownL
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorEdges.java,flappingTest,@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryNTimes(1 500)).sessionTimeoutMs(30000).build(); final TestLeaderSelectorListener listene
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorEdges.java,processResult,"public void  (CuratorFramework client CuratorEvent event) throws Exception { log.info(""Receive event {}"" event.toString()); if (event.getResultCode() == KeeperException.Code.CONNECTIONLOSS.intValue()) { latch.countDown(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorEdges.java,resetCNXFactory,@AfterClass public static void  (){ System.clearProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorEdges.java,setCNXFactory,@BeforeClass public static void  (){ System.setProperty(ServerCnxnFactory.ZOOKEEPER_SERVER_CNXN_FACTORY ChaosMonkeyCnxnFactory.class.getName()); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorEdges.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.RECONNECTED) { reconnected.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\leader\TestLeaderSelectorEdges.java,takeLeadership,"@Override public void  (CuratorFramework client) throws Exception { log.info(""-->takeLeadership({})"" client.toString()); takeLeadership.countDown(); log.info(""<--takeLeadership({})"" client.toString()); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\Stepper.java,await,synchronized void  () throws InterruptedException { while (available == 0) { wait(); } --available; notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\Stepper.java,countDown,synchronized void  (int qty){ available+=qty; notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestChildReaper.java,testLargeNodes,"@Test public void  () throws Exception { server.close(); final int LARGE_QTY=10000; final int SMALL_QTY=100; System.setProperty(""jute.maxbuffer"" """" + LARGE_QTY); server=new TestingServer(); try { Timing timing=new Timing(); ChildReaper reaper=null; Curato"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestChildReaper.java,testLeaderElection,@Test public void  () throws Exception { Timing timing=new Timing(); ChildReaper reaper=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); LeaderLatch otherL
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestChildReaper.java,testMaxChildren,"@Test public void  () throws Exception { server.close(); final int LARGE_QTY=10000; System.setProperty(""jute.maxbuffer"" """" + LARGE_QTY); server=new TestingServer(); try { Timing timing=new Timing(); ChildReaper reaper=null; CuratorFramework client=Curator"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestChildReaper.java,testMultiPath,@Test public void  () throws Exception { Timing timing=new Timing(); ChildReaper reaper=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestChildReaper.java,testNamespace,@Test public void  () throws Exception { Timing timing=new Timing(); ChildReaper reaper=null; CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestChildReaper.java,testSimple,@Test public void  () throws Exception { Timing timing=new Timing(); ChildReaper reaper=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestChildReaper.java,testSomeNodes,@Test public void  () throws Exception { Timing timing=new Timing(); ChildReaper reaper=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestChildReaper.java,warnMaxChildren,@Override protected void  (String path Stat stat){ latch.countDown(); super.warnMaxChildren(path stat); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\SemaphoreClient.java,SemaphoreClient, (String connectionString String semaphorePath Callable<Void> operation) throws IOException { Timing timing=new Timing(); this.client=CuratorFrameworkFactory.newClient(connectionString timing.session() timing.connection() new ExponentialBackoffRetry(100 3)); client.start(); this.semaphorePath=semaphorePath; this.operation=operation; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\SemaphoreClient.java,acquireAndRun,"private void  () throws Exception { InterProcessSemaphoreV2 semaphore=new InterProcessSemaphoreV2(client semaphorePath MAX_SEMAPHORE_LEASES); Lease lease=semaphore.acquire(); try { hasAcquired=true; if (activeClient.compareAndSet(null this)) { throw new Exception(""Multiple acquirers""); } try { while (hasAcquired && shouldRun) { operation.call(); } } finally { if (activeClient.compareAndSet(this null)) { throw new Exception(""Bad release""); } } } finally { semaphore.returnLease(lease); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\SemaphoreClient.java,call,@Override public Void  () throws Exception { shouldRun=true; client.getConnectionStateListenable().addListener(this); try { while (shouldRun) { try { acquireAndRun(); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); throw e; } catch
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\SemaphoreClient.java,close,@Override public void  () throws IOException { shouldRun=false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\SemaphoreClient.java,getActiveClient,static SemaphoreClient  (){ return activeClient.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\SemaphoreClient.java,hasAcquired,boolean  (){ return hasAcquired; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\SemaphoreClient.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ hasAcquired=false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMultiMutex.java,acquire,"@Override public boolean  (long time TimeUnit unit) throws Exception { throw new Exception(""foo""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMultiMutex.java,isAcquiredInThisProcess,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMultiMutex.java,makeLock,@Override protected InterProcessLock  (CuratorFramework client){ return new InterProcessMultiLock(client Arrays.asList(LOCK_PATH_1 LOCK_PATH_2)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMultiMutex.java,release,"@Override public void  () throws Exception { throw new Exception(""foo""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMultiMutex.java,testSomeLocksFailToLock,@Test public void  () throws IOException { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final AtomicBoolean goodLockWasLocked=new AtomicBoolean(false); final InterProcessLo
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMultiMutex.java,testSomeReleasesFail,@Test public void  () throws IOException { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { InterProcessLock goodLock=new InterProcessMutex(client LOCK_PATH_1); final InterProc
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessReadWriteLock.java,call,"@Override public Void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { InterProcessReadWriteLock lock=new InterProcessReadWriteLock(client ""/lock""); for "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessReadWriteLock.java,doLocking,"private void  (InterProcessLock lock AtomicInteger concurrentCount AtomicInteger maxConcurrentCount Random random int maxAllowed) throws Exception { try { Assert.assertTrue(lock.acquire(10 TimeUnit.SECONDS)); int localConcurrentCount; synchronized (this) { localConcurrentCount=concurrentCount.incrementAndGet(); if (localConcurrentCount > maxConcurrentCount.get()) { maxConcurrentCount.set(localConcurrentCount); } } Assert.assertTrue(localConcurrentCount <= maxAllowed """" + localConcurrentCount); Thread.sleep(random.nextInt(9) + 1); } finally { synchronized (this) { concurrentCount.decrementAndGet(); lock.release(); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessReadWriteLock.java,testBasic,@Test public void  () throws Exception { final int CONCURRENCY=8; final int ITERATIONS=100; final Random random=new Random(); final AtomicInteger concurrentCount=new AtomicInteger(0); final AtomicInteger maxConcurrentCount=new AtomicInteger(0); final Atom
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessReadWriteLock.java,testDowngrading,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); InterProcessReadWriteLock lock=new InterProcessReadWriteLock(client ""/lock""); lock.wri"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessReadWriteLock.java,testGetParticipantNodes,@Test public void  () throws Exception { final int READERS=20; final int WRITERS=8; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final CountDownLatch latch=new CountDownLat
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessReadWriteLock.java,testSetNodeData,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final byte[] nodeData=new byte[]{1 2 3 4}; InterProcessReadWriteLock lock=new InterPro
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessReadWriteLock.java,testThatDowngradingRespectsThreads,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final InterProcessReadWriteLock lock=new InterProcessReadWriteLock(client ""/lock""); Ex"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessReadWriteLock.java,testThatUpgradingIsDisallowed,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); InterProcessReadWriteLock lock=new InterProcessReadWriteLock(client ""/lock""); lock.rea"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutex.java,call,@Override public Void  () throws Exception { Assert.assertTrue(lockLatch.await(10 TimeUnit.SECONDS)); Collection<String> nodes=lock.getParticipantNodes(); Assert.assertEquals(nodes.size() 1); Revoker.attemptRevoke(client nodes.iterator().next()); InterPro
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutex.java,createsTheLock,@Override public String  (CuratorFramework client String path byte[] lockNodeBytes) throws Exception { String ourPath; if (lockNodeBytes != null) { ourPath=client.create().creatingParentsIfNeeded().withProtection().withMode(CreateMode.PERSISTENT).forPath(
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutex.java,makeLock,@Override protected InterProcessLock  (CuratorFramework client){ return new InterProcessMutex(client LOCK_PATH); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutex.java,revocationRequested,@Override public void  (InterProcessMutex lock){ revokeLatch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutex.java,testPersistentLock,@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final InterProcessMutex lock=new InterProcessMutex(client LOCK_PATH new Standard
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutex.java,testRevoking,@Test public void  () throws Exception { final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); final InterProcessMutex lock=new InterProcessMutex(client LOCK_PATH); ExecutorSe
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutex.java,testWithSchema,"@Test public void  () throws Exception { Schema schemaRoot=Schema.builderForRecipeParent(""/foo"").name(""root"").build(); Schema schemaLocks=Schema.builderForRecipe(""/foo"").name(""locks"").build(); SchemaSet schemaSet=new SchemaSet(Lists.newArrayList(schemaRoo"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutexBase.java,bar,private void  (InterProcessLock mutex) throws Exception { mutex.acquire(10 TimeUnit.SECONDS); Assert.assertTrue(mutex.isAcquiredInThisProcess()); if (countLatchForBar != null) { countLatchForBar.countDown(); waitLatchForBar.await(10 TimeUnit.SECONDS); } snafu(mutex); Assert.assertTrue(mutex.isAcquiredInThisProcess()); mutex.release(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutexBase.java,call,@Override public Object  () throws Exception { try { mutexForClient2.acquire(10 TimeUnit.SECONDS); acquiredLatchForClient2.countDown(); latchForClient2.await(10 TimeUnit.SECONDS); mutexForClient2.release(); } catch ( Exception e) { exceptionRef.set(e); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessMutexBase.java,foo,private void  (InterProcessLock mutex) throws Exception { mutex.acquire(10 TimeUnit.SECONDS); Assert.assertTrue(mutex.isAcquiredInThisProcess()); bar(mutex); Assert.assertTrue(mutex.isAcquiredInThisProcess()); mutex.release(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphoreMutex.java,makeLock,@Override protected InterProcessLock  (CuratorFramework client){ return new InterProcessSemaphoreMutex(client LOCK_PATH); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphoreCluster.java,call,@Override public Void  () throws Exception { opCount.incrementAndGet(); Thread.sleep(OPERATION_TIME_MS); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphoreCluster.java,getConnectionString,@Override public String  (){ return connectionString.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphoreCluster.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.LOST) { latch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,call,@Override public Lease  () throws Exception { return semaphore.acquire(timing.forWaiting().multiple(2).seconds() TimeUnit.SECONDS); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,process,@Override public void  (WatchedEvent event) throws Exception { if (event.getType() == Watcher.Event.EventType.NodeCreated) { nodeCreatedLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphoreCluster.java,testCluster,"@Test public void  () throws Exception { final int QTY=20; final int OPERATION_TIME_MS=1000; final String PATH=""/foo/bar/lock""; ExecutorService executorService=Executors.newFixedThreadPool(QTY); ExecutorCompletionService<Void> completionService=new Execut"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,run,@Override public void  (){ while (!Thread.currentThread().isInterrupted()) { InterProcessSemaphoreV2 semaphore=new InterProcessSemaphoreV2(client SEMAPHORE_PATH MAX_SEMAPHORES); Lease lease=null; try { isReadyLatch.countDown(); lease=semaphore.acquire(); 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.LOST) { lostLatch.countDown(); } else if (newState == ConnectionState.RECONNECTED) { restartedLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphoreCluster.java,testKilledServerWithEnsembleProvider,"@Test public void  () throws Exception { final int CLIENT_QTY=10; final Timing timing=new Timing(); final String PATH=""/foo/bar/lock""; ExecutorService executorService=Executors.newFixedThreadPool(CLIENT_QTY); ExecutorCompletionService<Void> completionServ"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphoreCluster.java,updateServerListEnabled,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testAcquireAfterLostServer,"@Test public void  () throws Exception { final String SEMAPHORE_PATH=""/test""; final int MAX_SEMAPHORES=1; final int NUM_CLIENTS=10; ExecutorService executor=Executors.newFixedThreadPool(NUM_CLIENTS); final Timing timing=new Timing(); final CuratorFramewor"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testChildReaperCleansUpLockNodes,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); ChildReaper childReaper=nul
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testClientClose,@Test public void  () throws Exception { final Timing timing=new Timing(); CuratorFramework client1=null; CuratorFramework client2=null; InterProcessSemaphoreV2 semaphore1; InterProcessSemaphoreV2 semaphore2; try { client1=CuratorFrameworkFactory.newClien
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testGetParticipantNodes,@Test public void  () throws Exception { final int LEASES=3; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); List<Lease> leases=List
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testMaxPerSession,@Test public void  () throws Exception { final int CLIENT_QTY=10; final int LOOP_QTY=100; final Random random=new Random(); final int SESSION_MAX=random.nextInt(75) + 25; final Timing timing=new Timing(); List<Future<Object>> futures=Lists.newArrayList();
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testNoOrphanedNodes,@Test public void  () throws Exception { final Timing timing=new Timing(); final ExecutorService executor=Executors.newFixedThreadPool(1); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connecti
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testRelease1AtATime,@Test public void  () throws Exception { final Timing timing=new Timing(); final int CLIENT_QTY=10; final int MAX=CLIENT_QTY / 2; final AtomicInteger maxLeases=new AtomicInteger(0); final AtomicInteger activeQty=new AtomicInteger(0); final AtomicInteger u
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testReleaseInChunks,@Test public void  () throws Exception { final Timing timing=new Timing(); final int MAX_LEASES=11; final int THREADS=100; final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new R
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testSimple,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { InterProcessSemaphore
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testSimple2,@Test public void  () throws Exception { final int MAX_LEASES=3; Timing timing=new Timing(); List<Lease> leases=Lists.newArrayList(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testThreadedLeaseIncrease,@Test public void  () throws Exception { final Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); final SharedCou
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestInterProcessSemaphore.java,testThreads,@Test public void  () throws Exception { final int THREAD_QTY=10; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); tr
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,call,"@Override public Object  () throws Exception { final InterProcessMutex lock=new InterProcessMutex(client ""/a/b""); for (int i=0; i < ITERATIONS; ++i) { lock.acquire(); try { Thread.sleep((int)(Math.random() * MAX_WAIT_MS)); } finally { lock.release(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,makeClient,private CuratorFramework  (Timing timing String namespace) throws IOException { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder().connectionTimeoutMs(timing.connection()).sessionTimeoutMs(timing.session()).connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)); if (namespace != null) { builder=builder.namespace(namespace); } return builder.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,reap,@Override protected void  (PathHolder holder){ reaper2Count.incrementAndGet(); super.reap(holder); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,schedule,@Override protected Future<Void>  (final PathHolder pathHolder int reapingThresholdMs){ holders.add(pathHolder); final Future<?> f=super.schedule(pathHolder reapingThresholdMs); pool.submit(new Callable<Void>(){ @Override public Void call() throws Excepti
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,takeLeadership,"@Override public void  (CuratorFramework client) throws Exception { Reaper reaper=new Reaper(client 1); try { reaper.addPath(""/one/two/three"" Reaper.Mode.REAP_UNTIL_DELETE); reaper.start(); timing.sleepABit(); latch.countDown(); } finally { CloseableUtils"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testBasic,"private void  (String namespace) throws Exception { Timing timing=new Timing(); Reaper reaper=null; CuratorFramework client=makeClient(timing namespace); try { client.start(); client.create().creatingParentsIfNeeded().forPath(""/one/two/three""); Assert.assertNotNull(client.checkExists().forPath(""/one/two/three"")); reaper=new Reaper(client 100); reaper.start(); reaper.addPath(""/one/two/three""); timing.sleepABit(); Assert.assertNull(client.checkExists().forPath(""/one/two/three"")); } finally { CloseableUtils.closeQuietly(reaper); CloseableUtils.closeQuietly(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testBasicNamespace,"@Test public void  () throws Exception { testBasic(""test""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testReapUntilDelete,"private void  (String namespace) throws Exception { Timing timing=new Timing(); Reaper reaper=null; CuratorFramework client=makeClient(timing namespace); try { client.start(); client.create().creatingParentsIfNeeded().forPath(""/one/two/three""); Assert.assertNotNull(client.checkExists().forPath(""/one/two/three"")); reaper=new Reaper(client 100); reaper.start(); reaper.addPath(""/one/two/three"" Reaper.Mode.REAP_UNTIL_DELETE); timing.sleepABit(); Assert.assertNull(client.checkExists().forPath(""/one/two/three"")); client.create().forPath(""/one/two/three""); timing.sleepABit(); Assert.assertNotNull(client.checkExists().forPath(""/one/two/three"")); } finally { CloseableUtils.closeQuietly(reaper); CloseableUtils.closeQuietly(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testReapUntilDeleteNamespace,"@Test public void  () throws Exception { testReapUntilDelete(""test""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testReapUntilGone,"private void  (String namespace) throws Exception { Timing timing=new Timing(); Reaper reaper=null; CuratorFramework client=makeClient(timing namespace); try { client.start(); reaper=new Reaper(client 100); reaper.start(); reaper.addPath(""/one/two/three"" Reaper.Mode.REAP_UNTIL_GONE); timing.sleepABit(); client.create().creatingParentsIfNeeded().forPath(""/one/two/three""); Assert.assertNotNull(client.checkExists().forPath(""/one/two/three"")); reaper.addPath(""/one/two/three"" Reaper.Mode.REAP_UNTIL_GONE); timing.sleepABit(); Assert.assertNull(client.checkExists().forPath(""/one/two/three"")); } finally { CloseableUtils.closeQuietly(reaper); CloseableUtils.closeQuietly(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testReapUntilGoneNamespace,"@Test public void  () throws Exception { testReapUntilGone(""test""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testRemove,"private void  (String namespace) throws Exception { Timing timing=new Timing(); Reaper reaper=null; CuratorFramework client=makeClient(timing namespace); try { client.start(); client.create().creatingParentsIfNeeded().forPath(""/one/two/three""); Assert.assertNotNull(client.checkExists().forPath(""/one/two/three"")); reaper=new Reaper(client 100); reaper.start(); reaper.addPath(""/one/two/three""); timing.sleepABit(); Assert.assertNull(client.checkExists().forPath(""/one/two/three"")); Assert.assertTrue(reaper.removePath(""/one/two/three"")); client.create().forPath(""/one/two/three""); timing.sleepABit(); Assert.assertNotNull(client.checkExists().forPath(""/one/two/three"")); } finally { CloseableUtils.closeQuietly(reaper); CloseableUtils.closeQuietly(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testRemoveNamespace,"@Test public void  () throws Exception { testRemove(""test""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testSimulationWithLocks,"private void  (String namespace) throws Exception { final int LOCK_CLIENTS=10; final int ITERATIONS=250; final int MAX_WAIT_MS=10; ExecutorService service=Executors.newFixedThreadPool(LOCK_CLIENTS); ExecutorCompletionService<Object> completionService=new ExecutorCompletionService<Object>(service); Timing timing=new Timing(); Reaper reaper=null; final CuratorFramework client=makeClient(timing namespace); try { client.start(); reaper=new Reaper(client MAX_WAIT_MS / 2); reaper.start(); reaper.addPath(""/a/b""); for (int i=0; i < LOCK_CLIENTS; ++i) { completionService.submit(new Callable<Object>(){ @Override public Object call() throws Exception { final InterProcessMutex lock=new InterProcessMutex(client ""/a/b""); for (int i=0; i < ITERATIONS; ++i) { lock.acquire(); try { Thread.sleep((int)(Math.random() * MAX_WAIT_MS)); } finally { lock.release(); } } return null; } } ); } for (int i=0; i < LOCK_CLIENTS; ++i) { completionService.take().get(); } Thread.sleep(timing.session()); timing.sleepABit(); Stat stat=client.checkExists().forPath(""/a/b""); Assert.assertNull(stat ""Child qty: "" + ((stat != null) ? stat.getNumChildren() : 0)); } finally { service.shutdownNow(); CloseableUtils.closeQuietly(reaper); CloseableUtils.closeQuietly(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testSimulationWithLocksNamespace,"@Test public void  () throws Exception { testSimulationWithLocks(""test""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testSparseUseNoReap,"@Test public void  () throws Exception { final int THRESHOLD=3000; Timing timing=new Timing(); Reaper reaper=null; CuratorFramework client=makeClient(timing null); try { client.start(); client.create().creatingParentsIfNeeded().forPath(""/one/two/three""); "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testUsingLeaderLatch,@Test public void  () throws Exception { final Timing timing=new Timing(); CuratorFramework client=makeClient(timing null); Reaper reaper1=null; Reaper reaper2=null; LeaderLatch leaderLatch1=null; LeaderLatch leaderLatch2=null; try { final AtomicInteger r
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testUsingLeaderPath,@Test public void  () throws Exception { final Timing timing=new Timing(); CuratorFramework client=makeClient(timing null); Reaper reaper1=null; Reaper reaper2=null; try { final AtomicInteger reaper1Count=new AtomicInteger(); reaper1=new Reaper(client Rea
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testUsingManualLeader,@Test public void  () throws Exception { final Timing timing=new Timing(); final CuratorFramework client=makeClient(timing null); final CountDownLatch latch=new CountDownLatch(1); LeaderSelectorListener listener=new LeaderSelectorListener(){ @Override pub
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testWithEphemerals,"private void  (String namespace) throws Exception { Timing timing=new Timing(); Reaper reaper=null; CuratorFramework client2=null; CuratorFramework client=makeClient(timing namespace); try { client.start(); client.create().creatingParentsIfNeeded().forPath(""/one/two/three""); Assert.assertNotNull(client.checkExists().forPath(""/one/two/three"")); client2=makeClient(timing namespace); client2.start(); for (int i=0; i < 10; ++i) { client2.create().withMode(CreateMode.EPHEMERAL_SEQUENTIAL).forPath(""/one/two/three/foo-""); } reaper=new Reaper(client 100); reaper.start(); reaper.addPath(""/one/two/three""); timing.sleepABit(); Assert.assertNotNull(client.checkExists().forPath(""/one/two/three"")); client2.close(); client2=null; Thread.sleep(timing.session()); timing.sleepABit(); Assert.assertNull(client.checkExists().forPath(""/one/two/three"")); } finally { CloseableUtils.closeQuietly(reaper); CloseableUtils.closeQuietly(client2); CloseableUtils.closeQuietly(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestReaper.java,testWithEphemeralsNamespace,"@Test public void  () throws Exception { testWithEphemerals(""test""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestLockACLs.java,createClient,"private CuratorFramework  (ACLProvider provider) throws Exception { RetryPolicy retryPolicy=new ExponentialBackoffRetry(1000 3); CuratorFramework client=CuratorFrameworkFactory.builder().namespace(""ns"").connectString(server.getConnectString()).retryPolicy(retryPolicy).aclProvider(provider).build(); client.start(); return client; } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestLockACLs.java,getAclForPath,@Override public List<ACL>  (String path){ return ACLS1; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestLockACLs.java,getDefaultAcl,@Override public List<ACL>  (){ return ACLS1; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestLockACLs.java,testACLsCreatingParents,"@Test public void  () throws Exception { CuratorFramework client=createClient(new TestACLsCreatingParentsProvider()); try { client.create().creatingParentsIfNeeded().forPath(""/parent/foo""); Assert.assertEquals(ZooDefs.Perms.CREATE client.getACL().forPath("
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestLockACLs.java,testLockACLs,"@Test public void  () throws Exception { CuratorFramework client=createClient(new TestLockACLsProvider()); try { client.create().forPath(""/foo""); Assert.assertNotNull(client.checkExists().forPath(""/foo"")); Assert.assertEquals(ZooDefs.Perms.ALL client.getA"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestLockCleanlinessWithFaults.java,getSortedChildren,@Override List<String>  () throws Exception { throw new KeeperException.NoNodeException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\locks\TestLockCleanlinessWithFaults.java,testNodeDeleted,"@Test public void  () throws Exception { final String PATH=""/foo/bar""; CuratorFramework client=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryNTimes(0 0)); client.start(); client.create().creatingParentsIfNeeded()."
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestGroupMember.java,apply,@Override public String  (byte[] input){ return new String(input); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestGroupMember.java,testBasic,@Test public void  () throws Exception { Timing timing=new Timing(); GroupMember groupMember1=null; GroupMember groupMember2=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNodeListener.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ lastState.set(newState); if (newState == ConnectionState.CONNECTED) { connectedLatch.countDown(); } if (newState == ConnectionState.RECONNECTED) { reconnectedLatch.countDown(); } }
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNodeListener.java,testListenersReconnectedIsOK,@Test public void  () throws Exception { server.stop(); Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); Persis
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentTtlNode.java,childEvent,"@Override public void  (CuratorFramework client PathChildrenCacheEvent event) throws Exception { if ((event.getType() == PathChildrenCacheEvent.Type.CHILD_UPDATED) && ""/test"".equals(event.getData().getPath())) { changes.release(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentTtlNode.java,setup,"@BeforeMethod @Override public void  () throws Exception { System.setProperty(""znode.container.checkIntervalMs"" ""1""); super.setup(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentTtlNode.java,teardown,"@AfterMethod @Override public void  () throws Exception { System.clearProperty(""znode.container.checkIntervalMs""); super.teardown(); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentTtlNode.java,testBasic,"@Test public void  () throws Exception { try (CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1))){ client.start(); try (PersistentTtlNode node=new PersistentTtlNode(client ""/test"" ttlMs new byte[0])){ "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentTtlNode.java,testEventsOnParent,"@Test public void  () throws Exception { try (CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1))){ client.start(); try (PersistentTtlNode node=new PersistentTtlNode(client ""/test"" ttlMs new byte[0])){ "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentTtlNode.java,testForcedDeleteOfTouchNode,"@Test public void  () throws Exception { try (CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1))){ client.start(); try (PersistentTtlNode node=new PersistentTtlNode(client ""/test"" ttlMs new byte[0])){ "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentNode.java,testBasic,"@Test public void  () throws Exception { final byte[] TEST_DATA=""hey"".getBytes(); Timing2 timing=new Timing2(); PersistentNode pen=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentNode.java,testQuickClose,@Test public void  () throws Exception { Timing timing=new Timing(); PersistentNode pen=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentNode.java,testQuickCloseNodeExists,@Test public void  () throws Exception { Timing timing=new Timing(); PersistentNode pen=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentNode.java,testQuickSetData,"@Test public void  () throws Exception { final byte[] TEST_DATA=""hey"".getBytes(); final byte[] ALT_TEST_DATA=""there"".getBytes(); Timing timing=new Timing(); PersistentNode pen=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConne"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,Trigger,public  (Event.EventType... types){ assertNotNull(types); this.types=ImmutableSet.copyOf(types); this.latch=new CountDownLatch(1); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,assertNodeDoesNotExist,private void  (CuratorFramework curator String path) throws Exception { assertTrue(curator.checkExists().forPath(path) == null); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,assertNodeExists,private void  (CuratorFramework curator String path) throws Exception { assertNotNull(path); assertTrue(curator.checkExists().forPath(path) != null); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,created,private static Trigger  (){ return new Trigger(Event.EventType.NodeCreated); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,dataChanged,private static Trigger  (){ return new Trigger(EventType.NodeDataChanged); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,deletedOrSetData,private static Trigger  (){ return new Trigger(Event.EventType.NodeDeleted EventType.NodeDataChanged); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,firedWithin,public boolean  (long duration TimeUnit unit){ try { return latch.await(duration unit); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); throw Throwables.propagate(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,getAclForPath,@Override public List<ACL>  (String path){ return aclList; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,getDefaultAcl,@Override public List<ACL>  (){ return aclList; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,newCurator,private CuratorFramework  () throws IOException { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); curatorInstances.add(client); return client; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,process,"@Override public void  (WatchedEvent event){ if (types.contains(event.getType())) { latch.countDown(); } else if (event.getType() != EventType.None) { log.warn(""Unexpected watcher event: "" + event); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { dataUpdateLatch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,setDataTest,"protected void  (PersistentEphemeralNode.Mode mode) throws Exception { PersistentEphemeralNode node=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); node=new PersistentEphemeralNode(client mode PATH ""a"".getBytes()); node.debugWaitMsForBackgroundBeforeClose.set(timing.forSleepingABit().milliseconds()); node.start(); Assert.assertTrue(node.waitForInitialCreate(timing.forWaiting().seconds() TimeUnit.SECONDS)); Assert.assertEquals(client.getData().forPath(node.getActualPath()) ""a"".getBytes()); final Semaphore semaphore=new Semaphore(0); Watcher watcher=new Watcher(){ @Override public void process( WatchedEvent arg0){ semaphore.release(); } } ; client.checkExists().usingWatcher(watcher).forPath(node.getActualPath()); node.setData(""b"".getBytes()); Assert.assertTrue(timing.acquireSemaphore(semaphore)); Assert.assertEquals(node.getActualPath() node.getActualPath()); Assert.assertEquals(client.getData().usingWatcher(watcher).forPath(node.getActualPath()) ""b"".getBytes()); node.setData(""c"".getBytes()); Assert.assertTrue(timing.acquireSemaphore(semaphore)); Assert.assertEquals(node.getActualPath() node.getActualPath()); Assert.assertEquals(client.getData().usingWatcher(watcher).forPath(node.getActualPath()) ""c"".getBytes()); node.close(); Assert.assertTrue(timing.acquireSemaphore(semaphore)); } finally { CloseableUtils.closeQuietly(node); TestCleanState.closeAndTestClean(client); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.CONNECTED) { connectedLatch.countDown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,teardown,@AfterMethod @Override public void  () throws Exception { try { for ( PersistentEphemeralNode node : createdNodes) { CloseableUtils.closeQuietly(node); } for ( CuratorFramework curator : curatorInstances) { TestCleanState.closeAndTestClean(curator); } } f
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testClosingMultipleTimes,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL PATH new byte[0]); node.debugWaitMsForBackgroundBeforeClose.set(timing.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testData,"@Test public void  () throws Exception { CuratorFramework curator=newCurator(); byte[] data=""Hello World"".getBytes(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL PATH data); node.debugWaitMsForBa"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testDeletesNodeWhenClosed,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL PATH new byte[0]); node.debugWaitMsForBackgroundBeforeClose.set(timing.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testDeletesNodeWhenSessionDisconnects,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); CuratorFramework observer=newCurator(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL PATH new byte[0]); node.debugWa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testListenersReconnectedIsFast,@Test public void  () throws Exception { server.stop(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { client.start(); try (PersistentEphemeralNode node=
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testNoCreatePermission,"@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).authorization(""digest"" ""me1:pass1"".getBytes()).retryPolicy(new Ret"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testNoServerAtStart,@Test public void  () throws Exception { server.stop(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); PersistentEphemeralNode node=null; try { client.start();
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testNoWritePermission,@Test public void  () throws Exception { final ACLProvider aclProvider=new ACLProvider(){ final ACL acl=new ACL(ZooDefs.Perms.READ | ZooDefs.Perms.CREATE | ZooDefs.Perms.DELETE ZooDefs.Ids.ANYONE_ID_UNSAFE); final List<ACL> aclList=Collections.singletonLi
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testNodesCreateUniquePaths,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); try (PersistentEphemeralNode node1=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL_SEQUENTIAL PATH new byte[0])){ node1.debugWaitMsForBackgroundBefo
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testNullCurator,@Test(expectedExceptions=NullPointerException.class) public void  () throws Exception { new PersistentEphemeralNode(null PersistentEphemeralNode.Mode.EPHEMERAL PATH new byte[0]); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testNullData,@Test(expectedExceptions=NullPointerException.class) public void  () throws Exception { CuratorFramework curator=newCurator(); new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL PATH null); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testNullMode,@Test(expectedExceptions=NullPointerException.class) public void  () throws Exception { CuratorFramework curator=newCurator(); new PersistentEphemeralNode(curator null PATH new byte[0]); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testNullPath,@Test(expectedExceptions=IllegalArgumentException.class) public void  () throws Exception { CuratorFramework curator=newCurator(); new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL null new byte[0]); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testProtected,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.PROTECTED_EPHEMERAL PATH new byte[0]); try { node.debugWaitMsForBackgroundBeforeC
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testRecreatesNodeWhenEphemeralOwnerSessionExpires,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); CuratorFramework nodeCreator=newCurator(); CuratorFramework observer=newCurator(); nodeCreator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH n
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testRecreatesNodeWhenItGetsDeleted,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL PATH new byte[0]); node.debugWaitMsForBackgroundBeforeClose.set(timing.
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testRecreatesNodeWhenSessionReconnects,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); CuratorFramework observer=newCurator(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL PATH new byte[0]); node.debugWa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testRecreatesNodeWhenSessionReconnectsMultipleTimes,@Test public void  () throws Exception { CuratorFramework curator=newCurator(); CuratorFramework observer=newCurator(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode.Mode.EPHEMERAL PATH new byte[0]); node.debugWa
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testSetDataWhenDisconnected,"@Test public void  () throws Exception { CuratorFramework curator=newCurator(); byte[] initialData=""Hello World"".getBytes(); byte[] updatedData=""Updated"".getBytes(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode."
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testSetDataWhenNodeExists,"@Test public void  () throws Exception { CuratorFramework curator=newCurator(); curator.create().creatingParentsIfNeeded().withMode(CreateMode.EPHEMERAL).forPath(PATH ""InitialData"".getBytes()); byte[] data=""Hello World"".getBytes(); PersistentEphemeralNode"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testSetUpdatedDataWhenReconnected,"@Test public void  () throws Exception { CuratorFramework curator=newCurator(); byte[] initialData=""Hello World"".getBytes(); byte[] updatedData=""Updated"".getBytes(); PersistentEphemeralNode node=new PersistentEphemeralNode(curator PersistentEphemeralNode."
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testSettingData,@Test public void  () throws Exception { setDataTest(PersistentEphemeralNode.Mode.EPHEMERAL); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\nodes\TestPersistentEphemeralNode.java,testSettingDataSequential,@Test public void  () throws Exception { setDataTest(PersistentEphemeralNode.Mode.EPHEMERAL_SEQUENTIAL); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\QueueItemSerializer.java,deserialize,@Override public TestQueueItem  (byte[] bytes){ return new TestQueueItem(new String(bytes)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\QueueItemSerializer.java,serialize,@Override public byte[]  (TestQueueItem item){ return item.str.getBytes(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\QueueTestProducer.java,QueueTestProducer,public  (DistributedQueue<TestQueueItem> queue int itemQty int startIndex){ this.queue=queue; this.itemQty=itemQty; this.startIndex=startIndex; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\QueueTestProducer.java,call,@Override public Void  () throws Exception { int count=0; while (!Thread.currentThread().isInterrupted() && (count < itemQty)) { queue.put(new TestQueueItem(Integer.toString(count + startIndex))); ++count; } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedDelayQueue.java,deserialize,@Override public Long  (byte[] bytes){ return Long.parseLong(new String(bytes)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedDelayQueue.java,serialize,@Override public byte[]  (Long item){ return Long.toString(item).getBytes(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedDelayQueue.java,testBasic,@Test public void  () throws Exception { Timing timing=new Timing(); DistributedDelayQueue<Long> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); cli
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedDelayQueue.java,testLateAddition,@Test public void  () throws Exception { Timing timing=new Timing(); DistributedDelayQueue<Long> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); cli
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedDelayQueue.java,testSimple,@Test public void  () throws Exception { final int QTY=10; Timing timing=new Timing(); DistributedDelayQueue<Long> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new Ret
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedDelayQueue.java,testSorting,@Test public void  () throws Exception { Timing timing=new Timing(); final int QTY=1000; final int DELAY_MS=timing.multiple(.1).milliseconds(); DistributedDelayQueue<Long> putQueue=null; DistributedDelayQueue<Long> getQueue=null; CuratorFramework client=C
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestBoundedDistributedQueue.java,call,@Override public Void  () throws Exception { CuratorFramework client=null; DistributedQueue<String> queue=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.star
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestBoundedDistributedQueue.java,consumeMessage,@Override public void  (String message) throws Exception { messages.add(message); semaphore.acquire(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestBoundedDistributedQueue.java,deserialize,@Override public String  (byte[] bytes){ return new String(bytes); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestBoundedDistributedQueue.java,process,@Override public void  (WatchedEvent event){ synchronized (lock) { lock.notifyAll(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestBoundedDistributedQueue.java,putCompleted,@Override public void  (String item){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestBoundedDistributedQueue.java,serialize,@Override public byte[]  (String item){ return item.getBytes(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestBoundedDistributedQueue.java,testMulti,"@SuppressWarnings(""SynchronizationOnLocalVariableOrMethodParameter"") @Test public void  () throws Exception { final String PATH=""/queue""; final int CLIENT_QTY=4; final int MAX_ITEMS=10; final int ADD_ITEMS=MAX_ITEMS * 100; final QueueConsumer<String> cons"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestBoundedDistributedQueue.java,testSimple,@Test public void  () throws Exception { Timing timing=new Timing(); DistributedQueue<String> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); try { 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedIdQueue.java,consumeMessage,"@Override public void  (TestQueueItem message) throws Exception { consumingLatch.countDown(); throw new Exception(""Consumer failed""); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedIdQueue.java,testDeletingWithLock,@Test public void  () throws Exception { DistributedIdQueue<TestQueueItem> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final CountDownLatch consumingLatch=new 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedIdQueue.java,testOrdering,@Test public void  () throws Exception { final int ITEM_QTY=100; DistributedIdQueue<TestQueueItem> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { BlockingQueueCon
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedIdQueue.java,testRequeuingWithLock,@Test public void  () throws Exception { DistributedIdQueue<TestQueueItem> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final CountDownLatch consumingLatch=new 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedPriorityQueue.java,assertOrdering,"private void  (BlockingQueueConsumer<Integer> consumer int qty) throws Exception { int previous=0; for (int i=0; i < qty; ++i) { Integer value=consumer.take(10 TimeUnit.SECONDS); Assert.assertNotNull(value); if (i > 0) { Assert.assertTrue(value >= previous String.format(""Value: (%d:%s) Previous: (%d:%s)"" value DistributedPriorityQueue.priorityToString(value) previous DistributedPriorityQueue.priorityToString(previous))); } previous=value; } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedPriorityQueue.java,consumeMessage,@Override public void  (Integer message) throws Exception { hasConsumedLatch.countDown(); okToConsumeLatch.await(); super.consumeMessage(message); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedPriorityQueue.java,deserialize,@Override public Integer  (byte[] bytes){ return Integer.parseInt(new String(bytes)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedPriorityQueue.java,serialize,@Override public byte[]  (Integer item){ return Integer.toString(item).getBytes(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedPriorityQueue.java,testAdditions,@Test public void  () throws Exception { DistributedPriorityQueue<Integer> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final CountDownLatch latch=new CountDown
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedPriorityQueue.java,testMinItemsBeforeRefresh,@Test public void  () throws Exception { DistributedPriorityQueue<Integer> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final int minItemsBeforeRefresh=3; Block
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedPriorityQueue.java,testSimple,@Test public void  () throws Exception { List<Integer> nums=new ArrayList<Integer>(); Timing timing=new Timing(); DistributedPriorityQueue<Integer> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.sess
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedPriorityQueue.java,testSortingWhileTaking,@Test public void  () throws Exception { Timing timing=new Timing(); DistributedPriorityQueue<Integer> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueItem.java,TestQueueItem, (String str){ this.str=str; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueItem.java,compareTo,@Override public int  (TestQueueItem rhs){ if (this == rhs) { return 0; } int val=Integer.parseInt(str); int rhsVal=Integer.parseInt(rhs.str); int diff=val - rhsVal; return (diff < 0) ? -1 : ((diff > 0) ? 1 : 0); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueItem.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } TestQueueItem that=(TestQueueItem)o; return str.equals(that.str); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueItem.java,hashCode,@Override public int  (){ return str.hashCode(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,allocateQueue,@Override public DistributedQueue<String>  (CuratorFramework client String queuePath){ return QueueBuilder.<String>builder(client consumer serializer queuePath).buildQueue(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,consumeMessage,@Override public void  (String message) throws Exception { if (latch != null) { latch.await(); } super.consumeMessage(message); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,deserialize,@Override public String  (byte[] bytes){ return new String(bytes); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,makeAllocator,private QueueAllocator<String DistributedQueue<String>>  (final QueueConsumer<String> consumer){ final QueueSerializer<String> serializer=new QueueSerializer<String>(){ @Override public byte[] serialize( String item){ return item.getBytes(); } @Override public String deserialize( byte[] bytes){ return new String(bytes); } } ; return new QueueAllocator<String DistributedQueue<String>>(){ @Override public DistributedQueue<String> allocateQueue( CuratorFramework client  String queuePath){ return QueueBuilder.<String>builder(client consumer serializer queuePath).buildQueue(); } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,makeConsumer,private BlockingQueueConsumer<String>  (final CountDownLatch latch){ ConnectionStateListener connectionStateListener=new ConnectionStateListener(){ @Override public void stateChanged( CuratorFramework client  ConnectionState newState){ } } ; return new BlockingQueueConsumer<String>(connectionStateListener){ @Override public void consumeMessage( String message) throws Exception { if (latch != null) { latch.await(); } super.consumeMessage(message); } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,serialize,@Override public byte[]  (String item){ return item.getBytes(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,testDistribution,@Test public void  () throws Exception { final int threshold=100; final int factor=10; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,testSharderWatchSync,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); final BlockingQueueConsumer<String> consume
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestQueueSharder.java,testSimpleDistributedQueue,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); final CountDownLatch latch=new CountDownLat
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,QueueUser,public  (CuratorFramework curator int sleepMillis){ this.queue=new SimpleDistributedQueue(curator QUEUE_PATH); this.sleepMillis=sleepMillis; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,closeAll,private void  (CuratorFramework[] clients){ if (clients != null) { for ( CuratorFramework c : clients) { CloseableUtils.closeQuietly(c); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,createNremoveMelementTest,"public void  (String dir int n int m) throws Exception { CuratorFramework clients[]=null; try { String testString=""Hello World""; final int num_clients=2; clients=new CuratorFramework[num_clients]; SimpleDistributedQueue queueHandles[]=new SimpleDistributedQueue[num_clients]; for (int i=0; i < clients.length; i++) { clients[i]=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); clients[i].start(); queueHandles[i]=new SimpleDistributedQueue(clients[i] dir); } for (int i=0; i < n; i++) { String offerString=testString + i; queueHandles[0].offer(offerString.getBytes()); } for (int i=0; i < m; i++) { queueHandles[1].remove(); } assertEquals(new String(queueHandles[1].element()) testString + m); } finally { closeAll(clients); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,createNremoveMtest,"public void  (String dir int n int m) throws Exception { CuratorFramework clients[]=null; try { String testString=""Hello World""; final int num_clients=2; clients=new CuratorFramework[num_clients]; SimpleDistributedQueue queueHandles[]=new SimpleDistributedQueue[num_clients]; for (int i=0; i < clients.length; i++) { clients[i]=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); clients[i].start(); queueHandles[i]=new SimpleDistributedQueue(clients[i] dir); } for (int i=0; i < n; i++) { String offerString=testString + i; queueHandles[0].offer(offerString.getBytes()); } byte data[]=null; for (int i=0; i < m; i++) { data=queueHandles[1].remove(); } assertEquals(new String(data) testString + (m - 1)); } finally { closeAll(clients); } } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,processItem,"@Override protected void  (int itemNumber) throws Exception { System.out.println(""Taking item "" + itemNumber); byte[] item=queue.take(); if (item == null) { throw new IllegalStateException(""Null result for item "" + itemNumber); } System.out.println(""Got i"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,run,public void  (){ try { queueHandles[0].offer(threadTestString.getBytes()); } catch ( Exception e) { } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testElement1,"@Test public void  () throws Exception { createNremoveMelementTest(""/testElement1"" 1 0); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testElement2,"@Test public void  () throws Exception { createNremoveMelementTest(""/testElement2"" 10 2); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testElement3,"@Test public void  () throws Exception { createNremoveMelementTest(""/testElement3"" 1000 500); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testElement4,"@Test public void  () throws Exception { createNremoveMelementTest(""/testElement4"" 1000 1000 - 1); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testHangFromContainerLoss,"@Test public void  () throws Exception { server.close(); System.setProperty(""znode.container.checkIntervalMs"" ""100""); server=new TestingServer(); Timing timing=new Timing().multiple(.1); CuratorFramework client=CuratorFrameworkFactory.newClient(server.get"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testOffer1,"@Test public void  () throws Exception { CuratorFramework clients[]=null; try { String dir=""/testOffer1""; String testString=""Hello World""; final int num_clients=1; clients=new CuratorFramework[num_clients]; SimpleDistributedQueue queueHandles[]=new Simple"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testOffer2,"@Test public void  () throws Exception { CuratorFramework clients[]=null; try { String dir=""/testOffer2""; String testString=""Hello World""; final int num_clients=2; clients=new CuratorFramework[num_clients]; SimpleDistributedQueue queueHandles[]=new Simple"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testPollWithTimeout,"@Test public void  () throws Exception { CuratorFramework clients[]=null; try { String dir=""/testOffer1""; final int num_clients=1; clients=new CuratorFramework[num_clients]; SimpleDistributedQueue queueHandles[]=new SimpleDistributedQueue[num_clients]; fo"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testRemova1,"@Test public void  () throws Exception { CuratorFramework clients[]=null; try { String dir=""/testRemove1""; final int num_clients=1; clients=new CuratorFramework[num_clients]; SimpleDistributedQueue queueHandles[]=new SimpleDistributedQueue[num_clients]; f"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testRemove2,"@Test public void  () throws Exception { createNremoveMtest(""/testRemove2"" 10 2); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testRemove3,"@Test public void  () throws Exception { createNremoveMtest(""/testRemove3"" 1000 1000); } "
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testTake1,"@Test public void  () throws Exception { CuratorFramework clients[]=null; try { String dir=""/testTake1""; String testString=""Hello World""; final int num_clients=1; clients=new CuratorFramework[num_clients]; SimpleDistributedQueue queueHandles[]=new SimpleD"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testTakeWait1,"@Test public void  () throws Exception { CuratorFramework clients[]=null; try { String dir=""/testTakeWait1""; final String testString=""Hello World""; final int num_clients=1; clients=new CuratorFramework[num_clients]; final SimpleDistributedQueue queueHandl"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestSimpleDistributedQueue.java,testTakeWait2,"@Test public void  () throws Exception { String dir=""/testTakeWait2""; final String testString=""Hello World""; final int num_clients=1; final CuratorFramework clients[]=new CuratorFramework[num_clients]; final SimpleDistributedQueue queueHandles[]=new Simpl"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,FaultySharedCount,public  (CuratorFramework client String path int val){ super(client path faultySharedValue); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,FaultySharedValue,public  (CuratorFramework client String path byte[] seedValue){ super(client.newWatcherRemoveCuratorFramework() path seedValue faultyWatcher); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,call,@Override public List<Integer>  () throws Exception { final List<Integer> countList=Lists.newArrayList(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); clients.add(client); client.start(); client
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,countHasChanged,@Override public void  (SharedCountReader sharedCount int newCount) throws Exception { numChangeEvents.incrementAndGet(); gotChangeEvent.arrive(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,createSharedCountWithFaultyWatcher,private SharedCount  (CuratorFramework curatorFramework String path int val){ final CuratorWatcher faultyWatcher=new CuratorWatcher(){ @Override public void process( WatchedEvent event) throws Exception { } } ; class FaultySharedValue extends SharedValue { public FaultySharedValue( CuratorFramework client  String path  byte[] seedValue){ super(client.newWatcherRemoveCuratorFramework() path seedValue faultyWatcher); } } ; final SharedValue faultySharedValue=new FaultySharedValue(curatorFramework path SharedCount.toBytes(val)); class FaultySharedCount extends SharedCount { public FaultySharedCount( CuratorFramework client  String path  int val){ super(client path faultySharedValue); } } ; return new FaultySharedCount(curatorFramework path val); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { flushDone.countDown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,stateChanged,@Override public void  (CuratorFramework client ConnectionState newState){ if (newState == ConnectionState.SUSPENDED) { gotSuspendEvent.arrive(); } else if (newState == ConnectionState.RECONNECTED) { getReconnectEvent.arrive(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,testDisconnectEventOnWatcherDoesNotRetry,@Test public void  () throws Exception { final CountDownLatch gotSuspendEvent=new CountDownLatch(1); CuratorFramework curatorFramework=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryNTimes(10 1000)); curatorFramework.start(); curator
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,testDisconnectReconnectEventDoesNotFireValueWatcher,@Test public void  () throws Exception { final CountDownLatch gotSuspendEvent=new CountDownLatch(1); final CountDownLatch gotChangeEvent=new CountDownLatch(1); final CountDownLatch getReconnectEvent=new CountDownLatch(1); final AtomicInteger numChangeEven
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,testDisconnectReconnectWithMultipleClients,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework curatorFramework1=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryNTimes(10 500)); CuratorFramework curatorFramework2=CuratorFrameworkFactory.newCli
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,testMultiClientDifferentSeed,@Test public void  () throws Exception { CuratorFramework client1=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); CuratorFramework client2=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,addToTakenItems,private void  (TestQueueItem message Set<TestQueueItem> takenItems int itemQty){ synchronized (takenItems) { takenItems.add(message); if (takenItems.size() > itemQty) { takenItems.notifyAll(); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,call,@Override public Object  () throws Exception { latch.await(); timing.sleepABit(); client.create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).inBackground(callback).forPath(path bytes); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,testMultiClientVersioned,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client1=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); CuratorFramework client2=CuratorFrameworkFactory.newClient(server.getConnectStr
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,consumeMessage,@Override public void  (TestQueueItem message) throws Exception { addToTakenItems(message takenItems itemQty); synchronized (takenItemsForConsumer2) { takenItemsForConsumer2.add(message); } Thread.sleep((long)(Math.random() * 5)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,deserialize,@Override public String  (byte[] bytes){ return new String(bytes); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,internalCreateNode,@Override void  (final String path final byte[] bytes final BackgroundCallback callback) throws Exception { if (firstTime.compareAndSet(true false)) { Executors.newSingleThreadExecutor().submit(new Callable<Object>(){ @Override public Object call() throws
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,nextItem,@Override public TestQueueItem  () throws Exception { if (index >= itemQty) { return null; } return new TestQueueItem(Integer.toString(index++)); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,processWithLockSafety,"@SuppressWarnings(""SimplifiableConditionalExpression"") @Override protected boolean  (String itemNode DistributedQueue.ProcessType type) throws Exception { if (used.contains(itemNode)) { doubleUsed.add(itemNode); } else { used.add(itemNode); } return (clie"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,putCompleted,@Override public void  (TestQueueItem item){ listenerCalls.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,serialize,@Override public byte[]  (String item){ return item.getBytes(); } 
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testCustomExecutor,@Test public void  () throws Exception { final int ITERATIONS=1000; Timing timing=new Timing(); DistributedQueue<String> queue=null; final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connecti
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testErrorMode,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); client.start(); try { final AtomicReference
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,testMultiClients,@Test public void  () throws Exception { final int CLIENT_QTY=5; List<Future<List<Integer>>> futures=Lists.newArrayList(); final List<CuratorFramework> clients=new CopyOnWriteArrayList<CuratorFramework>(); final List<SharedCount> counts=new CopyOnWriteArr
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,testSimple,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); SharedCount count=new SharedCount(client ""/count"" 0); try { client.start(); count.start(); final CountDownLa"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testFlush,@Test public void  () throws Exception { final Timing timing=new Timing(); final CountDownLatch latch=new CountDownLatch(1); DistributedQueue<TestQueueItem> queue=null; final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectStrin
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\shared\TestSharedCount.java,testSimpleVersioned,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); SharedCount count=new SharedCount(client ""/count"" 0); client.start(); try { count.start(); VersionedValue<In"
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testMultiPutterSingleGetter,@Test public void  () throws Exception { final int itemQty=100; DistributedQueue<TestQueueItem> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { BlockingQueueConsum
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testNoDuplicateProcessing,@Test public void  () throws Exception { final int itemQty=1000; final int consumerQty=4; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new ExponentialB
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testPutListener,@Test public void  () throws Exception { final int itemQty=10; DistributedQueue<TestQueueItem> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { BlockingQueueConsume
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testPutMulti,@Test public void  () throws Exception { final int itemQty=100; DistributedQueue<TestQueueItem> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { BlockingQueueConsum
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testRetryAfterFailure_Curator56,@Test public void  () throws Exception { DistributedQueue<TestQueueItem> queue=null; final CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final int RETRY_COUNT=1; final Count
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testSafetyBasic,@Test public void  () throws Exception { final int itemQty=10; DistributedQueue<TestQueueItem> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { final BlockingQueueC
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testSafetyWithCrash,@Test public void  () throws Exception { final int itemQty=100; DistributedQueue<TestQueueItem> producerQueue=null; DistributedQueue<TestQueueItem> consumerQueue1=null; DistributedQueue<TestQueueItem> consumerQueue2=null; CuratorFramework producerClient=C
C:\Users\User\Desktop\Thesis\curator\curator-recipes\src\test\java\org\apache\curator\framework\recipes\queue\TestDistributedQueue.java,testSimple,@Test public void  () throws Exception { final int itemQty=10; DistributedQueue<TestQueueItem> queue=null; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { BlockingQueueConsume
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\KillSession2.java,kill,public static void  (ZooKeeper client){ Compatibility.injectSessionExpiration(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\BaseClassForTests.java,MethodListener, (Logger log){ this.log=log; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\BaseClassForTests.java,RetryAnalyzer," (Logger log RetryContext retryContext){ this.log=log; this.retryContext=Objects.requireNonNull(retryContext ""retryContext cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\BaseClassForTests.java,afterInvocation,"@Override public void  (IInvokedMethod method ITestResult testResult ITestContext context){ if (method.isTestMethod()) { RetryContext retryContext=(RetryContext)context.getAttribute(ATTRIBUTE_NAME); if (retryContext == null) { log.error(""No retryContext!"""
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\BaseClassForTests.java,beforeInvocation,@Override public void  (IInvokedMethod method ITestResult testResult ITestContext context){ if (method.getTestMethod().isBeforeMethodConfiguration()) { RetryContext retryContext=(RetryContext)context.getAttribute(ATTRIBUTE_NAME); if (retryContext == null)
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\BaseClassForTests.java,beforeSuite,@BeforeSuite(alwaysRun=true) public void  (ITestContext context){ context.getSuite().addListener(new MethodListener(log)); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\BaseClassForTests.java,retry,"@Override public boolean  (ITestResult result){ if (result.isSuccess() || retryContext.isRetrying.get()) { retryContext.isRetrying.set(false); return false; } if (result.getThrowable() != null) { log.error(""Retrying 1 time"" result.getThrowable()); } else "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\BaseClassForTests.java,setup,"@BeforeMethod public void  () throws Exception { if (INTERNAL_PROPERTY_DONT_LOG_CONNECTION_ISSUES != null) { System.setProperty(INTERNAL_PROPERTY_DONT_LOG_CONNECTION_ISSUES ""true""); } System.setProperty(INTERNAL_PROPERTY_REMOVE_WATCHERS_IN_FOREGROUND ""tru"
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\BaseClassForTests.java,teardown,@AfterMethod public void  () throws Exception { System.clearProperty(INTERNAL_PROPERTY_VALIDATE_NAMESPACE_WATCHER_MAP_EMPTY); System.clearProperty(INTERNAL_PROPERTY_REMOVE_WATCHERS_IN_FOREGROUND); if (server != null) { try { server.close(); } catch ( IOEx
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Compatibility.java,injectSessionExpiration,public static void  (ZooKeeper zooKeeper){ zooKeeper.getTestable().injectSessionExpiration(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Compatibility.java,isZK34,public static boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,Timing2,public  (long value TimeUnit unit int waitingMultiple){ this.value=value; this.unit=unit; this.waitingMultiple=waitingMultiple; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,acquireSemaphore,public boolean  (Semaphore semaphore int n){ Timing2 m=forWaiting(); try { return semaphore.tryAcquire(n m.value m.unit); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,awaitLatch,public boolean  (CountDownLatch latch){ Timing2 m=forWaiting(); try { return latch.await(m.value m.unit); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,connection,public int  (){ return milliseconds(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,forSessionSleep,public Timing2  (){ return multiple(SESSION_SLEEP_MULTIPLE 1); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,forSleepingABit,public Timing2  (){ return multiple(.25); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,forWaiting,"@SuppressWarnings(""PointlessArithmeticExpression"") public Timing2  (){ return multiple(waitingMultiple); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,getWaitingMultiple,"private static Integer  (){ return Integer.getInteger(""timing-waiting-multiple"" DEFAULT_WAITING_MULTIPLE); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,milliseconds,public int  (){ return (int)TimeUnit.MILLISECONDS.convert(value unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,multiple,public Timing2  (double n int waitingMultiple){ return new Timing2((int)(value * n) unit waitingMultiple); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,seconds,public int  (){ return (int)value; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,session,public int  (){ return multiple(SESSION_MULTIPLE).milliseconds(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,sleep,public void  () throws InterruptedException { unit.sleep(value); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,sleepABit,public void  () throws InterruptedException { forSleepingABit().sleep(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Timing2.java,takeFromQueue,"public <T>T  (BlockingQueue<T> queue) throws Exception { Timing2 m=forWaiting(); try { T value=queue.poll(m.value m.unit); if (value == null) { throw new TimeoutException(""Timed out trying to take from queue""); } return value; } catch ( InterruptedException e) { Thread.currentThread().interrupt(); throw e; } } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Zk35MethodInterceptor.java,intercept,@Override public List<IMethodInstance>  (List<IMethodInstance> methods ITestContext context){ if (!Compatibility.isZK34()) { return methods; } List<IMethodInstance> filteredMethods=new ArrayList<>(); for ( IMethodInstance method : methods) { if (!isInGrou
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\compatibility\Zk35MethodInterceptor.java,isInGroup,private boolean  (String[] groups){ return (groups != null) && Arrays.asList(groups).contains(zk35Group); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DirectoryUtils.java,deleteDirectoryContents,"public static void  (File directory) throws IOException { Preconditions.checkArgument(directory.isDirectory() ""Not a directory: %s"" directory); File[] files=directory.listFiles(); if (files == null) { log.warn(""directory.listFiles() returned null for: "" + directory); return; } for ( File file : files) { deleteRecursively(file); } } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DirectoryUtils.java,deleteRecursively,"public static void  (File file) throws IOException { if (file.isDirectory()) { deleteDirectoryContents(file); } if (!file.delete()) { log.error(""Failed to delete "" + file); } } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\KillSession.java,kill,public static void  (ZooKeeper client String connectString int maxMs) throws Exception { kill(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,DelegatingExecutorService,public  (ExecutorService delegate){ this.delegate=delegate; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,awaitTermination,@Override public boolean  (long timeout TimeUnit unit) throws InterruptedException { return delegate.awaitTermination(timeout unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,execute,@Override public void  (Runnable command){ delegate.execute(command); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,invokeAll,@Override public <T>List<Future<T>>  (Collection<? extends Callable<T>> tasks long timeout TimeUnit unit) throws InterruptedException { return delegate.invokeAll(tasks timeout unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,invokeAny,@Override public <T>T  (Collection<? extends Callable<T>> tasks long timeout TimeUnit unit) throws InterruptedException  ExecutionException  TimeoutException { return delegate.invokeAny(tasks timeout unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,isShutdown,@Override public boolean  (){ return delegate.isShutdown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,isTerminated,@Override public boolean  (){ return delegate.isTerminated(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,shutdown,@Override public void  (){ delegate.shutdown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,shutdownNow,@Override public List<Runnable>  (){ return delegate.shutdownNow(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\DelegatingExecutorService.java,submit,@Override public Future<?>  (Runnable task){ return delegate.submit(task); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\QuorumConfigBuilder.java,QuorumConfigBuilder,"public  (InstanceSpec... specs){ fromRandom=(specs == null) || (specs.length == 0); instanceSpecs=fromRandom ? ImmutableList.of(InstanceSpec.newInstanceSpec()) : ImmutableList.copyOf(specs); File fakeConfigFile=null; try { fakeConfigFile=File.createTempFile(""temp"" ""temp""); } catch ( IOException e) { Throwables.propagate(e); } this.fakeConfigFile=fakeConfigFile; } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\QuorumConfigBuilder.java,buildConfig,"public QuorumPeerConfig  (int instanceIndex) throws Exception { boolean isCluster=(instanceSpecs.size() > 1); InstanceSpec spec=instanceSpecs.get(instanceIndex); if (isCluster) { Files.write(Integer.toString(spec.getServerId()).getBytes() new File(spec.getDataDirectory() ""myid"")); } Properties properties=new Properties(); properties.setProperty(""initLimit"" ""10""); properties.setProperty(""syncLimit"" ""5""); properties.setProperty(""dataDir"" spec.getDataDirectory().getCanonicalPath()); properties.setProperty(""clientPort"" Integer.toString(spec.getPort())); int tickTime=spec.getTickTime(); if (tickTime >= 0) { properties.setProperty(""tickTime"" Integer.toString(tickTime)); } int maxClientCnxns=spec.getMaxClientCnxns(); if (maxClientCnxns >= 0) { properties.setProperty(""maxClientCnxns"" Integer.toString(maxClientCnxns)); } if (isCluster) { for ( InstanceSpec thisSpec : instanceSpecs) { properties.setProperty(""server."" + thisSpec.getServerId() String.format(""%s:%d:%d;%s:%d"" thisSpec.getHostname() thisSpec.getQuorumPort() thisSpec.getElectionPort() thisSpec.getHostname() thisSpec.getPort())); } } Map<String Object> customProperties=spec.getCustomProperties(); if (customProperties != null) { for ( Map.Entry<String Object> property : customProperties.entrySet()) { properties.put(property.getKey() property.getValue()); } } QuorumPeerConfig config=new QuorumPeerConfig(){ { if (fakeConfigFile != null) { configFileStr=fakeConfigFile.getPath(); } } } ; config.parseProperties(properties); return config; } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\QuorumConfigBuilder.java,close,@Override public void  (){ if (fakeConfigFile != null) { fakeConfigFile.delete(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\QuorumConfigBuilder.java,getInstanceSpec,public InstanceSpec  (int index){ return instanceSpecs.get(index); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\QuorumConfigBuilder.java,getInstanceSpecs,public List<InstanceSpec>  (){ return instanceSpecs; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\QuorumConfigBuilder.java,isFromRandom,public boolean  (){ return fromRandom; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\QuorumConfigBuilder.java,size,public int  (){ return instanceSpecs.size(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,InstanceSpec,public  (File dataDirectory int port int electionPort int quorumPort boolean deleteDataDirectoryOnClose int serverId int tickTime int maxClientCnxns Map<String Object> customProperties String hostname){ this.dataDirectory=(dataDirectory != null) ? dataDirectory : Files.createTempDir(); this.port=(port >= 0) ? port : getRandomPort(); this.electionPort=(electionPort >= 0) ? electionPort : getRandomPort(); this.quorumPort=(quorumPort >= 0) ? quorumPort : getRandomPort(); this.deleteDataDirectoryOnClose=deleteDataDirectoryOnClose; this.serverId=(serverId >= 0) ? serverId : nextServerId.getAndIncrement(); this.tickTime=(tickTime > 0 ? tickTime : -1); this.maxClientCnxns=(maxClientCnxns >= 0 ? maxClientCnxns : -1); this.customProperties=customProperties != null ? Collections.<String Object>unmodifiableMap(customProperties) : Collections.<String Object>emptyMap(); this.hostname=hostname == null ? localhost : hostname; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,deleteDataDirectoryOnClose,public boolean  (){ return deleteDataDirectoryOnClose; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } InstanceSpec that=(InstanceSpec)o; return hostname.equals(that.getHostname()) && port == that.port; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getConnectString,"public String  (){ return hostname + "":"" + port; } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getCustomProperties,public Map<String Object>  (){ return customProperties; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getDataDirectory,public File  (){ return dataDirectory; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getElectionPort,public int  (){ return electionPort; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getHostname,public String  (){ return hostname; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getMaxClientCnxns,public int  (){ return maxClientCnxns; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getPort,public int  (){ return port; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getQuorumPort,public int  (){ return quorumPort; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getRandomPort,public static int  (){ ServerSocket server=null; try { server=new ServerSocket(0); return server.getLocalPort(); } catch ( IOException e) { throw new Error(e); } finally { if (server != null) { try { server.close(); } catch ( IOException ignore) { } } } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getServerId,public int  (){ return serverId; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,getTickTime,public int  (){ return tickTime; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,hashCode,@Override public int  (){ return hostname.hashCode() + port; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,newInstanceSpec,public static InstanceSpec  (){ return new InstanceSpec(null -1 -1 -1 true -1 -1 -1); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,reset,public static void  (){ nextServerId.set(1); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\InstanceSpec.java,toString,"@Override public String  (){ return ""InstanceSpec{"" + ""dataDirectory="" + dataDirectory + ""  port=""+ port+ ""  electionPort=""+ electionPort+ ""  quorumPort=""+ quorumPort+ ""  deleteDataDirectoryOnClose=""+ deleteDataDirectoryOnClose+ ""  serverId=""+ serverId+ """
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\ServerHelper.java,NioServerCnxnMethods,private  (Constructor<?> constructor Method startupMethod Method shutdownMethod){ this.constructor=constructor; this.startupMethod=startupMethod; this.shutdownMethod=shutdownMethod; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\ServerHelper.java,ServerCnxnFactoryMethods,private  (Constructor<?> constructor Method configureMethod Method startupMethod Method shutdownMethod){ this.constructor=constructor; this.configureMethod=configureMethod; this.startupMethod=startupMethod; this.shutdownMethod=shutdownMethod; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\ServerHelper.java,makeFactory,static Object  (ZooKeeperServer server int port) throws Exception { Object factory; if (nioServerCnxn != null) { factory=nioServerCnxn.constructor.newInstance(new InetSocketAddress(port)); if (server != null) { nioServerCnxn.startupMethod.invoke(factory server); } } else { factory=serverCnxnFactoryMethods.constructor.newInstance(); serverCnxnFactoryMethods.configureMethod.invoke(factory new InetSocketAddress(port) 0); if (server != null) { serverCnxnFactoryMethods.startupMethod.invoke(factory server); } } return factory; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\ServerHelper.java,shutdownFactory,static void  (Object factory){ try { if (nioServerCnxn != null) { nioServerCnxn.shutdownMethod.invoke(factory); } else { serverCnxnFactoryMethods.shutdownMethod.invoke(factory); } } catch ( Exception e) { e.printStackTrace(); throw new Error(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\ExecuteCalledWatchingExecutorService.java,ExecuteCalledWatchingExecutorService,public  (ExecutorService delegate){ super(delegate); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\ExecuteCalledWatchingExecutorService.java,execute,@Override public synchronized void  (Runnable command){ executeCalled=true; super.execute(command); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\ExecuteCalledWatchingExecutorService.java,isExecuteCalled,public synchronized boolean  (){ return executeCalled; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\ExecuteCalledWatchingExecutorService.java,setExecuteCalled,public synchronized void  (boolean executeCalled){ this.executeCalled=executeCalled; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,TestingCluster,"public  (Map<InstanceSpec Collection<InstanceSpec>> specs){ ImmutableList.Builder<TestingZooKeeperServer> serverBuilder=ImmutableList.builder(); for ( Map.Entry<InstanceSpec Collection<InstanceSpec>> entry : specs.entrySet()) { List<InstanceSpec> instanceSpecs=Lists.newArrayList(entry.getValue()); int index=instanceSpecs.indexOf(entry.getKey()); Preconditions.checkState(index >= 0 entry.getKey() + "" not found in specs""); QuorumConfigBuilder builder=new QuorumConfigBuilder(instanceSpecs); serverBuilder.add(new TestingZooKeeperServer(builder index)); } servers=serverBuilder.build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,apply,@Override public InstanceSpec  (TestingZooKeeperServer server){ return server.getInstanceSpec(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,close,@Override public void  () throws IOException { for ( TestingZooKeeperServer server : servers) { server.close(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,findConnectionInstance,"public InstanceSpec  (ZooKeeper client) throws Exception { Method m=client.getClass().getDeclaredMethod(""testableRemoteSocketAddress""); m.setAccessible(true); InetSocketAddress address=(InetSocketAddress)m.invoke(client); if (address != null) { for ( TestingZooKeeperServer server : servers) { if (server.getInstanceSpec().getPort() == address.getPort()) { return server.getInstanceSpec(); } } } return null; } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,getConnectString,"public String  (){ StringBuilder str=new StringBuilder(); for ( InstanceSpec spec : getInstances()) { if (str.length() > 0) { str.append("" ""); } str.append(spec.getConnectString()); } return str.toString(); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,getInstances,public Collection<InstanceSpec>  (){ Iterable<InstanceSpec> transformed=Iterables.transform(servers new Function<TestingZooKeeperServer InstanceSpec>(){ @Override public InstanceSpec apply( TestingZooKeeperServer server){ return server.getInstanceSpec(); } } ); return Lists.newArrayList(transformed); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,getServers,public List<TestingZooKeeperServer>  (){ return Lists.newArrayList(servers); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,killServer,public boolean  (InstanceSpec instance) throws Exception { for ( TestingZooKeeperServer server : servers) { if (server.getInstanceSpec().equals(instance)) { server.kill(); return true; } } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,listToMap,private static Map<InstanceSpec Collection<InstanceSpec>>  (Collection<InstanceSpec> list){ ImmutableMap.Builder<InstanceSpec Collection<InstanceSpec>> mapBuilder=ImmutableMap.builder(); for ( InstanceSpec spec : list) { mapBuilder.put(spec list); } return mapBuilder.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,makeSpecs,public static Map<InstanceSpec Collection<InstanceSpec>>  (int instanceQty boolean resetServerIds){ if (resetServerIds) { InstanceSpec.reset(); } ImmutableList.Builder<InstanceSpec> builder=ImmutableList.builder(); for (int i=0; i < instanceQty; ++i) { builder.add(InstanceSpec.newInstanceSpec()); } return listToMap(builder.build()); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,restartServer,public boolean  (InstanceSpec instance) throws Exception { for ( TestingZooKeeperServer server : servers) { if (server.getInstanceSpec().equals(instance)) { server.restart(); return true; } } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,start,public void  () throws Exception { for ( TestingZooKeeperServer server : servers) { server.start(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingCluster.java,stop,public void  () throws IOException { for ( TestingZooKeeperServer server : servers) { server.stop(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingQuorumPeerMain.java,blockUntilStarted,@Override public void  () throws Exception { long startTime=System.currentTimeMillis(); while ((quorumPeer == null) && ((System.currentTimeMillis() - startTime) <= TestingZooKeeperMain.MAX_WAIT_MS)) { try { Thread.sleep(10); } catch ( InterruptedException
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingQuorumPeerMain.java,close,@Override public void  () throws IOException { if ((quorumPeer != null) && !isClosed) { isClosed=true; quorumPeer.shutdown(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingQuorumPeerMain.java,getTestingQuorumPeer,public QuorumPeer  (){ return quorumPeer; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingQuorumPeerMain.java,kill,"@Override public void  (){ try { if (quorumPeer != null) { Field cnxnFactoryField=QuorumPeer.class.getDeclaredField(""cnxnFactory""); cnxnFactoryField.setAccessible(true); ServerCnxnFactory cnxnFactory=(ServerCnxnFactory)cnxnFactoryField.get(quorumPeer); cn"
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingServer.java,TestingServer,public  (InstanceSpec spec boolean start) throws Exception { this.spec=spec; testingZooKeeperServer=new TestingZooKeeperServer(new QuorumConfigBuilder(spec)); if (start) { testingZooKeeperServer.start(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingServer.java,close,@Override public void  () throws IOException { testingZooKeeperServer.close(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingServer.java,getConnectString,public String  (){ return spec.getConnectString(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingServer.java,getPort,public int  (){ return spec.getPort(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingServer.java,getTempDirectory,public File  (){ return spec.getDataDirectory(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingServer.java,restart,public void  () throws Exception { testingZooKeeperServer.restart(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingServer.java,start,public void  () throws Exception { testingZooKeeperServer.start(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingServer.java,stop,public void  () throws IOException { testingZooKeeperServer.stop(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,TestZooKeeperServer,public  (FileTxnSnapLog txnLog ServerConfig config){ super(txnLog config.getTickTime() config.getMinSessionTimeout() config.getMaxSessionTimeout() null); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,blockUntilStarted,"@SuppressWarnings(""SynchronizationOnLocalVariableOrMethodParameter"") @Override public void  () throws Exception { if (!timing.awaitLatch(latch)) throw new IllegalStateException(""Timed out waiting for watch removal""); if (zkServer != null) { synchronized ("
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,close,@Override public void  () throws IOException { try { cnxnFactory.shutdown(); } catch ( Throwable e) { e.printStackTrace(); } finally { cnxnFactory=null; } if (containerManager != null) { containerManager.stop(); containerManager=null; } try { if (zkServer
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,getFirstProcessor,public RequestProcessor  (){ return firstProcessor; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,internalRunFromConfig,"private void  (ServerConfig config) throws IOException { log.info(""Starting server""); FileTxnSnapLog txnLog=null; try { txnLog=new FileTxnSnapLog(config.getDataLogDir() config.getDataDir()); zkServer=new TestZooKeeperServer(txnLog config); try { cnxnFactory=ServerCnxnFactory.createFactory(); cnxnFactory.configure(config.getClientPortAddress() config.getMaxClientCnxns()); } catch ( IOException e) { log.info(""Could not start server. Waiting and trying one more time."" e); timing.sleepABit(); cnxnFactory=ServerCnxnFactory.createFactory(); cnxnFactory.configure(config.getClientPortAddress() config.getMaxClientCnxns()); } cnxnFactory.startup(zkServer); containerManager=new ContainerManager(zkServer.getZKDatabase() zkServer.getFirstProcessor() Integer.getInteger(""znode.container.checkIntervalMs"" (int)TimeUnit.MINUTES.toMillis(1L)) Integer.getInteger(""znode.container.maxPerMinute"" 10000)); containerManager.start(); latch.countDown(); cnxnFactory.join(); if ((zkServer != null) && zkServer.isRunning()) { zkServer.shutdown(); } } catch ( InterruptedException e) { Thread.currentThread().interrupt(); log.warn(""Server interrupted"" e); } finally { if (txnLog != null) { txnLog.close(); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,isRunning,@Override public boolean  (){ return isRunning.get() || super.isRunning(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,kill,"@Override public void  (){ try { if (cnxnFactory != null) { cnxnFactory.closeAll(); Field ssField=cnxnFactory.getClass().getDeclaredField(""ss""); ssField.setAccessible(true); ServerSocketChannel ss=(ServerSocketChannel)ssField.get(cnxnFactory); ss.close();"
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,noteStartup,public void  (){ synchronized (this) { isRunning.set(true); this.notifyAll(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,runFromConfig,"@Override public void  (QuorumPeerConfig config) throws Exception { try { Field instance=MBeanRegistry.class.getDeclaredField(""instance""); instance.setAccessible(true); MBeanRegistry nopMBeanRegistry=new MBeanRegistry(){ @Override public void register( ZK"
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperMain.java,setState,@Override protected void  (State state){ this.state=state; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,TestingZooKeeperServer,"public  (QuorumConfigBuilder configBuilder int thisInstanceIndex){ System.setProperty(""zookeeper.jmx.log4j.disable"" ""true""); this.configBuilder=configBuilder; this.thisInstanceIndex=thisInstanceIndex; main=isCluster() ? new TestingQuorumPeerMain() : new TestingZooKeeperMain(); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,close,@Override public void  () throws IOException { stop(); if (state.compareAndSet(State.STOPPED State.CLOSED)) { configBuilder.close(); InstanceSpec spec=getInstanceSpec(); if (spec.deleteDataDirectoryOnClose()) { DirectoryUtils.deleteRecursively(spec.getDat
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,getInstanceSpec,public InstanceSpec  (){ return configBuilder.getInstanceSpec(thisInstanceIndex); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,getInstanceSpecs,public Collection<InstanceSpec>  (){ return configBuilder.getInstanceSpecs(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,getQuorumPeer,public QuorumPeer  (){ if (isCluster()) { return ((TestingQuorumPeerMain)main).getTestingQuorumPeer(); } throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,isCluster,private boolean  (){ return configBuilder.size() > 1; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,kill,public void  (){ main.kill(); state.set(State.STOPPED); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,restart,"public void  () throws Exception { if (state.get() == State.CLOSED) { throw new IllegalStateException(""Cannot restart a closed instance""); } if (state.get() == State.STARTED) { stop(); } state.set(State.LATENT); main=isCluster() ? new TestingQuorumPeerMain() : new TestingZooKeeperMain(); start(); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,run,"public void  (){ try { QuorumPeerConfig config=configBuilder.buildConfig(thisInstanceIndex); main.runFromConfig(config); } catch ( Exception e) { logger.error(String.format(""From testing server (random state: %s) for instance: %s"" String.valueOf(configBuilder.isFromRandom()) getInstanceSpec()) e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,start,"public void  () throws Exception { if (!state.compareAndSet(State.LATENT State.STARTED)) { return; } new Thread(new Runnable(){ public void run(){ try { QuorumPeerConfig config=configBuilder.buildConfig(thisInstanceIndex); main.runFromConfig(config); } catch ( Exception e) { logger.error(String.format(""From testing server (random state: %s) for instance: %s"" String.valueOf(configBuilder.isFromRandom()) getInstanceSpec()) e); } } } ).start(); main.blockUntilStarted(); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\TestingZooKeeperServer.java,stop,public void  () throws IOException { if (state.compareAndSet(State.STARTED State.STOPPED)) { main.close(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,Timing,public  (long value TimeUnit unit int waitingMultiple){ this.value=value; this.unit=unit; this.waitingMultiple=waitingMultiple; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,acquireSemaphore,public boolean  (Semaphore semaphore int n){ Timing m=forWaiting(); try { return semaphore.tryAcquire(n m.value m.unit); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,awaitLatch,public boolean  (CountDownLatch latch){ Timing m=forWaiting(); try { return latch.await(m.value m.unit); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,connection,public int  (){ return milliseconds(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,forWaiting,"@SuppressWarnings(""PointlessArithmeticExpression"") public Timing  (){ return multiple(waitingMultiple); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,getWaitingMultiple,"private static Integer  (){ return Integer.getInteger(""timing-waiting-multiple"" DEFAULT_WAITING_MULTIPLE); } "
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,milliseconds,public int  (){ return (int)TimeUnit.MILLISECONDS.convert(value unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,multiple,public Timing  (double n){ return new Timing((int)(value * n) unit); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,seconds,public int  (){ return (int)value; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,session,public int  (){ return multiple(SESSION_MULTIPLE).milliseconds(); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\Timing.java,sleepABit,public void  () throws InterruptedException { unit.sleep(value / 4); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\WatchersDebug.java,callMethod,private static List<String>  (ZooKeeper zooKeeper Method method){ if (zooKeeper == null) { return null; } try { return (List<String>)method.invoke(zooKeeper); } catch ( Exception e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\WatchersDebug.java,getChildWatches,public static List<String>  (ZooKeeper zooKeeper){ return callMethod(zooKeeper getChildWatches); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\WatchersDebug.java,getDataWatches,public static List<String>  (ZooKeeper zooKeeper){ return callMethod(zooKeeper WatchersDebug.getDataWatches); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\WatchersDebug.java,getExistWatches,public static List<String>  (ZooKeeper zooKeeper){ return callMethod(zooKeeper getExistWatches); } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\main\java\org\apache\curator\test\WatchersDebug.java,getMethod,private static Method  (String name) throws NoSuchMethodException { Method m=ZooKeeper.class.getDeclaredMethod(name); m.setAccessible(true); return m; } 
C:\Users\User\Desktop\Thesis\curator\curator-test\src\test\java\org\apache\curator\test\TestQuorumConfigBuilder.java,testCustomProperties,"@Test public void  () throws Exception { Map<String Object> customProperties=new HashMap<String Object>(); customProperties.put(""authProvider.1"" ""org.apache.zookeeper.server.auth.SASLAuthenticationProvider""); customProperties.put(""kerberos.removeHostFromP"
C:\Users\User\Desktop\Thesis\curator\curator-test-zk34\src\test\java\org\apache\curator\test\Compatibility.java,injectSessionExpiration,public static void  (ZooKeeper zooKeeper){ InjectSessionExpiration.injectSessionExpiration(zooKeeper); } 
C:\Users\User\Desktop\Thesis\curator\curator-test-zk34\src\test\java\org\apache\curator\test\Compatibility.java,isZK34,public static boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\curator\curator-test-zk34\src\test\java\org\apache\curator\test\TestCompatibility.java,testAutoState,@Test public void  (){ CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); Assert.assertTrue(client.isZk34CompatibilityMode()); } 
C:\Users\User\Desktop\Thesis\curator\curator-test-zk34\src\test\java\org\apache\curator\test\TestCompatibility.java,testGetConfig,@Test(expectedExceptions=IllegalStateException.class) public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.getConfig().forEnsemble(); } fi
C:\Users\User\Desktop\Thesis\curator\curator-test-zk34\src\test\java\org\apache\curator\test\TestCompatibility.java,testReconfig,"@Test(expectedExceptions=IllegalStateException.class) public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.reconfig().withNewMembers(""a"" """
C:\Users\User\Desktop\Thesis\curator\curator-test-zk34\src\test\java\org\apache\curator\test\TestCompatibility.java,testRemoveWatches,@Test(expectedExceptions=IllegalStateException.class) public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.watches().removeAll(); } finall
C:\Users\User\Desktop\Thesis\curator\curator-test-zk34\src\test\java\org\apache\curator\test\TestCompatibility.java,testTtl,"@Test(expectedExceptions=IllegalStateException.class) public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().withTtl(100).forPath("""
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,asyncEnsureContainers,public static CompletionStage<Void>  (AsyncCuratorFramework client String path){ return ensure(client path ExistsOption.createParentsAsContainers); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,asyncEnsureParents,public static CompletionStage<Void>  (AsyncCuratorFramework client String path){ return ensure(client path ExistsOption.createParentsIfNeeded); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,childrenWithData,public static CompletionStage<Map<String byte[]>>  (AsyncCuratorFramework client String path boolean isCompressed){ CompletableFuture<Map<String byte[]>> future=new CompletableFuture<>(); client.getChildren().forPath(path).handle((children e) -> { if (e != null) { if (Throwables.getRootCause(e) instanceof KeeperException.NoNodeException) { future.complete(Maps.newHashMap()); } else { future.completeExceptionally(e); } } else { completeChildren(client future path children isCompressed); } return null; } ); return future; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,completeChildren,private static void  (AsyncCuratorFramework client CompletableFuture<Map<String byte[]>> future String parentPath List<String> children boolean isCompressed){ Map<String byte[]> nodes=Maps.newHashMap(); if (children.size() == 0) { future.complete(nodes); return; } children.forEach(node -> { String path=ZKPaths.makePath(parentPath node); AsyncStage<byte[]> stage=isCompressed ? client.getData().decompressed().forPath(path) : client.getData().forPath(path); stage.handle((data e) -> { if (e != null) { future.completeExceptionally(e); } else { nodes.put(path data); if (nodes.size() == children.size()) { future.complete(nodes); } } return null; } ); } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,ensure,"private static CompletionStage<Void>  (AsyncCuratorFramework client String path ExistsOption option){ String localPath=ZKPaths.makePath(path ""foo""); return client.checkExists().withOptions(Collections.singleton(option)).forPath(localPath).thenApply(__ -> null); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,lock,private static void  (CompletableFuture<Void> future InterProcessLock lock long timeout TimeUnit unit){ try { if (unit != null) { if (lock.acquire(timeout unit)) { future.complete(null); } else { future.completeExceptionally(new TimeoutException()); } } else { lock.acquire(); future.complete(null); } } catch ( Throwable e) { ThreadUtils.checkInterrupted(e); future.completeExceptionally(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,lockAsync,public static CompletionStage<Void>  (InterProcessLock lock){ return lockAsync(lock 0 null null); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,lockAsyncIf,public static CompletionStage<Boolean>  (InterProcessLock lock long timeout TimeUnit unit){ return lockAsyncIf(lock timeout unit null); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,lockIf,private static void  (CompletableFuture<Boolean> future InterProcessLock lock long timeout TimeUnit unit){ try { future.complete(lock.acquire(timeout unit)); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); future.completeExceptionally(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\AsyncWrappers.java,release,public static void  (InterProcessLock lock boolean ignoreNoLockExceptions){ try { lock.release(); } catch ( IllegalStateException e) { if (!ignoreNoLockExceptions) { throw new RuntimeException(e); } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,AsyncCreateBuilderImpl, (CuratorFrameworkImpl client Filters filters){ this.client=client; this.filters=filters; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,forPath,@Override public AsyncStage<String>  (String path byte[] data){ return internalForPath(path data true); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,internalForPath,private AsyncStage<String>  (String path byte[] data boolean useData){ BuilderCommon<String> common=new BuilderCommon<>(filters nameProc); CreateBuilderImpl builder=new CreateBuilderImpl(client createMode common.backgrounding options.contains(CreateOption.createParentsIfNeeded) || options.contains(CreateOption.createParentsAsContainers) options.contains(CreateOption.createParentsAsContainers) options.contains(CreateOption.doProtected) options.contains(CreateOption.compress) options.contains(CreateOption.setDataIfExists) aclList stat ttl); builder.setSetDataIfExistsVersion(setDataVersion); return safeCall(common.internalCallback () -> useData ? builder.forPath(path data) : builder.forPath(path)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,storingStatIn,@Override public AsyncPathAndBytesable<AsyncStage<String>>  (Stat stat){ this.stat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,withACL,@Override public AsyncPathAndBytesable<AsyncStage<String>>  (List<ACL> aclList){ this.aclList=aclList; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,withMode,"@Override public AsyncPathAndBytesable<AsyncStage<String>>  (CreateMode createMode){ this.createMode=Objects.requireNonNull(createMode ""createMode cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,withOptions,"@Override public AsyncPathAndBytesable<AsyncStage<String>>  (Set<CreateOption> options CreateMode createMode List<ACL> aclList Stat stat long ttl int setDataVersion){ this.options=Objects.requireNonNull(options ""options cannot be null""); this.aclList=aclL"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,withSetDataVersion,@Override public AsyncPathAndBytesable<AsyncStage<String>>  (int version){ this.setDataVersion=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCreateBuilderImpl.java,withTtl,@Override public AsyncPathAndBytesable<AsyncStage<String>>  (long ttl){ this.ttl=ttl; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,AsyncCuratorFrameworkImpl,"public  (CuratorFrameworkImpl client Filters filters WatchMode watchMode boolean watched){ this.client=Objects.requireNonNull(client ""client cannot be null""); this.filters=Objects.requireNonNull(filters ""filters cannot be null""); this.watchMode=Objects.requireNonNull(watchMode ""watchMode cannot be null""); this.watched=watched; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,checkExists,@Override public AsyncExistsBuilder  (){ return new AsyncExistsBuilderImpl(client filters getBuilderWatchMode()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,create,@Override public AsyncCreateBuilder  (){ return new AsyncCreateBuilderImpl(client filters); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,delete,@Override public AsyncDeleteBuilder  (){ return new AsyncDeleteBuilderImpl(client filters); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,forPath,@Override public AsyncStage<List<ACL>>  (String path){ BuilderCommon<List<ACL>> common=new BuilderCommon<>(filters aclProc); GetACLBuilderImpl builder=new GetACLBuilderImpl(client common.backgrounding stat); return safeCall(common.internalCallback () -> b
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,getACL,@Override public AsyncGetACLBuilder  (){ return new AsyncGetACLBuilder(){ private Stat stat=null; @Override public AsyncPathable<AsyncStage<List<ACL>>> storingStatIn( Stat stat){ this.stat=stat; return this; } @Override public AsyncStage<List<ACL>> forPat
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,getBuilderWatchMode,private WatchMode  (){ return watched ? watchMode : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,getChildren,@Override public AsyncGetChildrenBuilder  (){ return new AsyncGetChildrenBuilderImpl(client filters getBuilderWatchMode()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,getConfig,@Override public AsyncGetConfigBuilder  (){ return new AsyncGetConfigBuilderImpl(client filters getBuilderWatchMode()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,getData,@Override public AsyncGetDataBuilder  (){ return new AsyncGetDataBuilderImpl(client filters getBuilderWatchMode()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,reconfig,@Override public AsyncReconfigBuilder  (){ return new AsyncReconfigBuilderImpl(client filters); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,removeWatches,@Override public AsyncRemoveWatchesBuilder  (){ return new AsyncRemoveWatchesBuilderImpl(client filters); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,reveal,"private static CuratorFrameworkImpl  (CuratorFramework client){ try { return (CuratorFrameworkImpl)Objects.requireNonNull(client ""client cannot be null""); } catch ( Exception e) { throw new IllegalArgumentException(""Only Curator clients created through CuratorFrameworkFactory are supported: "" + client.getClass().getName()); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,setACL,@Override public AsyncSetACLBuilder  (){ return new AsyncSetACLBuilderImpl(client filters); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,setData,@Override public AsyncSetDataBuilder  (){ return new AsyncSetDataBuilderImpl(client filters); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,storingStatIn,@Override public AsyncPathable<AsyncStage<List<ACL>>>  (Stat stat){ this.stat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,sync,@Override public A SyncBuilder sync(){ return path -> { BuilderCommon<Void> common=new BuilderCommon<>(filters ignoredProc); SyncBuilderImpl builder=new SyncBuilderImpl(client common.backgrounding); return safeCall(common.internalCallback () -> builder.fo
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,transaction,@Override public AsyncMultiTransaction  (){ return operations -> { BuilderCommon<List<CuratorTransactionResult>> common=new BuilderCommon<>(filters opResultsProc); CuratorMultiTransactionImpl builder=new CuratorMultiTransactionImpl(client common.backgroun
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,transactionOp,@Override public AsyncTransactionOp  (){ return new AsyncTransactionOpImpl(client); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,unwrap,@Override public CuratorFramework  (){ return client; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,watched,@Override public WatchableAsyncCuratorFramework  (){ return new AsyncCuratorFrameworkImpl(client filters watchMode true); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncCuratorFrameworkImpl.java,with,@Override public AsyncCuratorFrameworkDsl  (UnhandledErrorListener listener UnaryOperator<CuratorEvent> resultFilter UnaryOperator<WatchedEvent> watcherFilter){ return new AsyncCuratorFrameworkImpl(client new Filters(listener resultFilter watcherFilter) w
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncDeleteBuilderImpl.java,AsyncDeleteBuilderImpl, (CuratorFrameworkImpl client Filters filters){ this.client=client; this.filters=filters; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncDeleteBuilderImpl.java,forPath,@Override public AsyncStage<Void>  (String path){ BuilderCommon<Void> common=new BuilderCommon<>(filters ignoredProc); DeleteBuilderImpl builder=new DeleteBuilderImpl(client version common.backgrounding options.contains(DeleteOption.deletingChildrenIfNeed
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncDeleteBuilderImpl.java,withOptions,@Override public AsyncPathable<AsyncStage<Void>>  (Set<DeleteOption> options){ return withOptionsAndVersion(options -1); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncDeleteBuilderImpl.java,withOptionsAndVersion,"@Override public AsyncPathable<AsyncStage<Void>>  (Set<DeleteOption> options int version){ this.options=Objects.requireNonNull(options ""options cannot be null""); this.version=version; return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncDeleteBuilderImpl.java,withVersion,@Override public AsyncPathable<AsyncStage<Void>>  (int version){ this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncExistsBuilderImpl.java,AsyncExistsBuilderImpl, (CuratorFrameworkImpl client Filters filters WatchMode watchMode){ this.client=client; this.filters=filters; this.watchMode=watchMode; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncExistsBuilderImpl.java,forPath,@Override public AsyncStage<Stat>  (String path){ BuilderCommon<Stat> common=new BuilderCommon<>(filters watchMode safeStatProc); ExistsBuilderImpl builder=new ExistsBuilderImpl(client common.backgrounding common.watcher options.contains(ExistsOption.crea
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncExistsBuilderImpl.java,withOptions,"@Override public AsyncPathable<AsyncStage<Stat>>  (Set<ExistsOption> options){ this.options=Objects.requireNonNull(options ""options cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetChildrenBuilderImpl.java,AsyncGetChildrenBuilderImpl, (CuratorFrameworkImpl client Filters filters WatchMode watchMode){ this.client=client; this.filters=filters; this.watchMode=watchMode; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetChildrenBuilderImpl.java,forPath,@Override public AsyncStage<List<String>>  (String path){ BuilderCommon<List<String>> common=new BuilderCommon<>(filters watchMode childrenProc); GetChildrenBuilderImpl builder=new GetChildrenBuilderImpl(client common.watcher common.backgrounding stat); r
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetChildrenBuilderImpl.java,storingStatIn,@Override public AsyncPathable<AsyncStage<List<String>>>  (Stat stat){ this.stat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetConfigBuilderImpl.java,AsyncGetConfigBuilderImpl, (CuratorFrameworkImpl client Filters filters WatchMode watchMode){ this.client=client; this.filters=filters; this.watchMode=watchMode; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetConfigBuilderImpl.java,forEnsemble,@Override public AsyncStage<byte[]>  (){ BuilderCommon<byte[]> common=new BuilderCommon<>(filters watchMode dataProc); GetConfigBuilderImpl builder=new GetConfigBuilderImpl(client common.backgrounding common.watcher stat); return safeCall(common.internalC
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetConfigBuilderImpl.java,storingStatIn,@Override public AsyncEnsemblable<AsyncStage<byte[]>>  (Stat stat){ this.stat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetDataBuilderImpl.java,AsyncGetDataBuilderImpl, (CuratorFrameworkImpl client Filters filters WatchMode watchMode){ this.client=client; this.filters=filters; this.watchMode=watchMode; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetDataBuilderImpl.java,decompressed,@Override public AsyncPathable<AsyncStage<byte[]>>  (){ decompressed=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetDataBuilderImpl.java,decompressedStoringStatIn,@Override public AsyncPathable<AsyncStage<byte[]>>  (Stat stat){ decompressed=true; this.stat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetDataBuilderImpl.java,forPath,@Override public AsyncStage<byte[]>  (String path){ BuilderCommon<byte[]> common=new BuilderCommon<>(filters watchMode dataProc); GetDataBuilderImpl builder=new GetDataBuilderImpl(client stat common.watcher common.backgrounding decompressed); return safeC
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncGetDataBuilderImpl.java,storingStatIn,@Override public AsyncPathable<AsyncStage<byte[]>>  (Stat stat){ this.stat=stat; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncReconfigBuilderImpl.java,AsyncReconfigBuilderImpl, (CuratorFrameworkImpl client Filters filters){ this.client=client; this.filters=filters; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncReconfigBuilderImpl.java,forEnsemble,@Override public AsyncStage<Void>  (){ BuilderCommon<Void> common=new BuilderCommon<>(filters ignoredProc); ReconfigBuilderImpl builder=new ReconfigBuilderImpl(client common.backgrounding stat fromConfig newMembers joining leaving); return safeCall(common
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncReconfigBuilderImpl.java,withJoiningAndLeaving,@Override public AsyncEnsemblable<AsyncStage<Void>>  (List<String> joining List<String> leaving long fromConfig){ this.joining=joining; this.leaving=leaving; this.fromConfig=fromConfig; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncReconfigBuilderImpl.java,withNewMembers,@Override public AsyncEnsemblable<AsyncStage<Void>>  (List<String> servers long fromConfig){ this.newMembers=servers; this.fromConfig=fromConfig; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,AsyncResultImpl,"private  (T value KeeperException.Code code Throwable exception){ this.value=value; this.exception=exception; this.code=Objects.requireNonNull(code ""error cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,checkError,@Override public void  (){ checkException(); if (code != KeeperException.Code.OK) { throw new RuntimeException(KeeperException.create(code)); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,checkException,public void  (){ if (exception != null) { throw new RuntimeException(exception); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } AsyncResultImpl<?> that=(AsyncResultImpl<?>)o; if (value != null ? !value.equals(that.value) : that.value != null) { retur
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,getCode,public KeeperException.Code  (){ return code; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,getException,public Optional<Throwable>  (){ return Optional.ofNullable(exception); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,getRawException,public Throwable  (){ return exception; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,getRawValue,public T  (){ return value; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,getValue,public Optional<T>  (){ return Optional.ofNullable(value); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,hashCode,@Override public int  (){ int result=value != null ? value.hashCode() : 0; result=31 * result + code.hashCode(); result=31 * result + (exception != null ? exception.hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncResultImpl.java,toString,"@Override public String  (){ return ""AsyncResult{"" + ""value="" + value + ""  code=""+ code+ ""  exception=""+ exception+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetACLBuilderImpl.java,AsyncSetACLBuilderImpl, (CuratorFrameworkImpl client Filters filters){ this.client=client; this.filters=filters; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetACLBuilderImpl.java,forPath,@Override public AsyncStage<Stat>  (String path){ BuilderCommon<Stat> common=new BuilderCommon<>(filters statProc); SetACLBuilderImpl builder=new SetACLBuilderImpl(client common.backgrounding aclList version); return safeCall(common.internalCallback () ->
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetACLBuilderImpl.java,withACL,@Override public AsyncPathable<AsyncStage<Stat>>  (List<ACL> aclList int version){ this.aclList=aclList; this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetDataBuilderImpl.java,AsyncSetDataBuilderImpl, (CuratorFrameworkImpl client Filters filters){ this.client=client; this.filters=filters; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetDataBuilderImpl.java,compressed,@Override public AsyncPathAndBytesable<AsyncStage<Stat>>  (){ compressed=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetDataBuilderImpl.java,compressedWithVersion,@Override public AsyncPathAndBytesable<AsyncStage<Stat>>  (int version){ compressed=true; this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetDataBuilderImpl.java,forPath,@Override public AsyncStage<Stat>  (String path byte[] data){ return internalForPath(path data true); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetDataBuilderImpl.java,internalForPath,private AsyncStage<Stat>  (String path byte[] data boolean useData){ BuilderCommon<Stat> common=new BuilderCommon<>(filters statProc); SetDataBuilderImpl builder=new SetDataBuilderImpl(client common.backgrounding version compressed); return safeCall(common.internalCallback () -> useData ? builder.forPath(path data) : builder.forPath(path)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncSetDataBuilderImpl.java,withVersion,@Override public AsyncPathAndBytesable<AsyncStage<Stat>>  (int version){ this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,AsyncTransactionOpImpl, (CuratorFrameworkImpl client){ this.client=client; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,check,@Override public AsyncTransactionCheckBuilder  (){ return new AsyncTransactionCheckBuilder(){ private int version=-1; @Override public AsyncPathable<CuratorOp> withVersion( int version){ this.version=version; return this; } @Override public CuratorOp forP
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,compressed,@Override public AsyncPathAndBytesable<CuratorOp>  (){ compressed=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,create,@Override public AsyncTransactionCreateBuilder  (){ return new AsyncTransactionCreateBuilder(){ private List<ACL> aclList=null; private CreateMode createMode=CreateMode.PERSISTENT; private boolean compressed=false; private long ttl=-1; @Override public As
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,delete,@Override public AsyncTransactionDeleteBuilder  (){ return new AsyncTransactionDeleteBuilder(){ private int version=-1; @Override public AsyncPathable<CuratorOp> withVersion( int version){ this.version=version; return this; } @Override public CuratorOp fo
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,forPath,@Override public CuratorOp  (String path){ try { return client.transactionOp().check().withVersion(version).forPath(path); } catch ( Exception e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,internalForPath,private CuratorOp  (String path byte[] data boolean useData){ TransactionSetDataBuilder<CuratorOp> builder1=client.transactionOp().setData(); VersionPathAndBytesable<CuratorOp> builder2=compressed ? builder1.compressed() : builder1; PathAndBytesable<CuratorOp> builder3=builder2.withVersion(version); try { return useData ? builder3.forPath(path data) : builder3.forPath(path); } catch ( Exception e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,setData,@Override public AsyncTransactionSetDataBuilder  (){ return new AsyncTransactionSetDataBuilder(){ private int version=-1; private boolean compressed=false; @Override public AsyncPathAndBytesable<CuratorOp> withVersion( int version){ this.version=version; 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,withACL,@Override public AsyncPathAndBytesable<CuratorOp>  (List<ACL> aclList){ this.aclList=aclList; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,withMode,"@Override public AsyncPathAndBytesable<CuratorOp>  (CreateMode createMode){ this.createMode=Objects.requireNonNull(createMode ""createMode cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,withOptions,"@Override public AsyncPathAndBytesable<CuratorOp>  (CreateMode createMode List<ACL> aclList boolean compressed long ttl){ this.createMode=Objects.requireNonNull(createMode ""createMode cannot be null""); this.aclList=aclList; this.compressed=compressed; thi"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,withTtl,@Override public AsyncPathAndBytesable<CuratorOp>  (long ttl){ this.ttl=ttl; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,withVersion,@Override public AsyncPathable<CuratorOp>  (int version){ this.version=version; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncTransactionOpImpl.java,withVersionCompressed,@Override public AsyncPathAndBytesable<CuratorOp>  (int version){ this.version=version; compressed=true; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncRemoveWatchesBuilderImpl.java,AsyncRemoveWatchesBuilderImpl, (CuratorFrameworkImpl client Filters filters){ this.client=client; this.filters=filters; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncRemoveWatchesBuilderImpl.java,forPath,@Override public AsyncStage<Void>  (String path){ BuilderCommon<Void> common=new BuilderCommon<>(filters ignoredProc); RemoveWatchesBuilderImpl builder=new RemoveWatchesBuilderImpl(client watcher curatorWatcher watcherType options.contains(RemoveWatcherOp
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncRemoveWatchesBuilderImpl.java,removing,"@Override public AsyncPathable<AsyncStage<Void>>  (CuratorWatcher watcher Watcher.WatcherType watcherType){ this.curatorWatcher=Objects.requireNonNull(watcher ""watcher cannot be null""); this.watcherType=Objects.requireNonNull(watcherType ""watcherType cann"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\AsyncRemoveWatchesBuilderImpl.java,removingAll,"@Override public AsyncPathable<AsyncStage<Void>>  (Watcher.WatcherType watcherType){ this.watcherType=Objects.requireNonNull(watcherType ""watcherType cannot be null""); this.curatorWatcher=null; this.watcher=null; return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\BuilderCommon.java,BuilderCommon, (Filters filters WatchMode watchMode BackgroundProc<T> proc){ watcher=(watchMode != null) ? new InternalWatcher(watchMode filters.getWatcherFilter()) : null; internalCallback=new InternalCallback<>(proc watcher filters.getResultFilter()); backgrounding=new Backgrounding(internalCallback filters.getListener()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\BackgroundProcs.java,makeProc,static <T>BackgroundProc<T>  (Function<CuratorEvent T> proc){ return (event future) -> { if (event.getResultCode() == 0) { future.complete(proc.apply(event)); } else { future.completeExceptionally(KeeperException.create(KeeperException.Code.get(event.getResultCode()) event.getPath())); } return null; } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\BackgroundProcs.java,safeCall,static <T>InternalCallback<T>  (InternalCallback<T> callback Callable<?> proc){ try { proc.call(); } catch ( Exception e) { callback.toCompletableFuture().completeExceptionally(e); } return callback; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\Filters.java,Filters,public  (UnhandledErrorListener listener UnaryOperator<CuratorEvent> resultFilter UnaryOperator<WatchedEvent> watcherFilter){ this.listener=listener; this.resultFilter=resultFilter; this.watcherFilter=watcherFilter; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\Filters.java,getListener,public UnhandledErrorListener  (){ return listener; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\Filters.java,getResultFilter,public UnaryOperator<CuratorEvent>  (){ return resultFilter; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\Filters.java,getWatcherFilter,public UnaryOperator<WatchedEvent>  (){ return watcherFilter; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\InternalCallback.java,InternalCallback, (BackgroundProc<T> resultFunction InternalWatcher watcher UnaryOperator<CuratorEvent> resultFilter){ this.resultFunction=resultFunction; this.watcher=watcher; this.resultFilter=resultFilter; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\InternalCallback.java,event,@Override public CompletionStage<WatchedEvent>  (){ return (watcher != null) ? watcher.getFuture() : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\InternalCallback.java,processResult,@Override public void  (CuratorFramework client CuratorEvent event) throws Exception { event=(resultFilter != null) ? resultFilter.apply(event) : event; resultFunction.apply(event this); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\InternalWatcher.java,InternalWatcher, (WatchMode watchMode UnaryOperator<WatchedEvent> watcherFilter){ this.watchMode=watchMode; this.watcherFilter=watcherFilter; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\InternalWatcher.java,getFuture,CompletableFuture<WatchedEvent>  (){ return future; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\InternalWatcher.java,getKeeperState,@Override public Event.KeeperState  (){ return localEvent.getState(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\InternalWatcher.java,process,@Override public void  (WatchedEvent event){ final WatchedEvent localEvent=(watcherFilter != null) ? watcherFilter.apply(event) : event; switch (localEvent.getState()) { default : { if ((watchMode != WatchMode.stateChangeOnly) && (localEvent.getType() != 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\details\InternalWatcher.java,reset,"@Override public CompletionStage<WatchedEvent>  (){ Preconditions.checkState(isReset.compareAndSet(false true) ""Already reset""); future=new CompletableFuture<>(); return future; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationException.java,MigrationException,"public  (String migrationId String message){ super(message); this.migrationId=Objects.requireNonNull(migrationId ""migrationId cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationException.java,getMigrationId,public String  (){ return migrationId; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationManager.java,MigrationManager,"public  (AsyncCuratorFramework client String lockPath String metaDataPath Executor executor Duration lockMax){ this.client=Objects.requireNonNull(client ""client cannot be null""); this.lockPath=Objects.requireNonNull(lockPath ""lockPath cannot be null""); this.metaDataPath=Objects.requireNonNull(metaDataPath ""metaDataPath cannot be null""); this.executor=Objects.requireNonNull(executor ""executor cannot be null""); this.lockMax=Objects.requireNonNull(lockMax ""lockMax cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationManager.java,applyMetaData,private CompletionStage<Void>  (MigrationSet set Map<String byte[]> metaData String thisMetaDataPath){ List<byte[]> sortedMetaData=metaData.keySet().stream().sorted(Comparator.naturalOrder()).map(metaData::get).collect(Collectors.toList()); List<Migration> toBeApplied; try { toBeApplied=filter(set sortedMetaData); } catch ( MigrationException e) { CompletableFuture<Void> future=new CompletableFuture<>(); future.completeExceptionally(e); return future; } if (toBeApplied.size() == 0) { return CompletableFuture.completedFuture(null); } return asyncEnsureContainers(client thisMetaDataPath).thenCompose(__ -> applyMetaDataAfterEnsure(toBeApplied thisMetaDataPath)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationManager.java,applyMetaDataAfterEnsure,private CompletionStage<Void>  (List<Migration> toBeApplied String thisMetaDataPath){ if (debugCount != null) { debugCount.incrementAndGet(); } List<CuratorOp> operations=new ArrayList<>(); String metaDataBasePath=ZKPaths.makePath(thisMetaDataPath META_DATA_NODE_NAME); toBeApplied.forEach(migration -> { List<CuratorOp> thisMigrationOperations=migration.operations(); operations.addAll(thisMigrationOperations); operations.add(client.transactionOp().create().withMode(CreateMode.PERSISTENT_SEQUENTIAL).forPath(metaDataBasePath hash(thisMigrationOperations))); } ); return client.transaction().forOperations(operations).thenApply(__ -> null); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationManager.java,filter,"protected List<Migration>  (MigrationSet set List<byte[]> operationHashesInOrder) throws MigrationException { if (operationHashesInOrder.size() > set.migrations().size()) { throw new MigrationException(set.id() String.format(""More metadata than migrations. Migration ID: %s"" set.id())); } int compareSize=Math.min(set.migrations().size() operationHashesInOrder.size()); for (int i=0; i < compareSize; ++i) { byte[] setHash=hash(set.migrations().get(i).operations()); if (!Arrays.equals(setHash operationHashesInOrder.get(i))) { throw new MigrationException(set.id() String.format(""Metadata mismatch. Migration ID: %s"" set.id())); } } return set.migrations().subList(operationHashesInOrder.size() set.migrations().size()); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationManager.java,hash,"private byte[]  (List<CuratorOp> operations){ MessageDigest digest; try { digest=MessageDigest.getInstance(""SHA-256""); } catch ( NoSuchAlgorithmException e) { throw new RuntimeException(e); } operations.forEach(op -> { if (op instanceof ExtractingCuratorOp) { ((ExtractingCuratorOp)op).addToDigest(digest); } else { digest.update(op.toString().getBytes()); } } ); return digest.digest(); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationManager.java,migrate,public CompletionStage<Void>  (MigrationSet set){ InterProcessLock lock=new InterProcessSemaphoreMutex(client.unwrap() ZKPaths.makePath(lockPath set.id())); CompletionStage<Void> lockStage=lockAsync(lock lockMax.toMillis() TimeUnit.MILLISECONDS executor); return lockStage.thenCompose(__ -> runMigrationInLock(lock set)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationManager.java,runMigrationInLock,private CompletionStage<Void>  (InterProcessLock lock MigrationSet set){ String thisMetaDataPath=ZKPaths.makePath(metaDataPath set.id()); return childrenWithData(client thisMetaDataPath).thenCompose(metaData -> applyMetaData(set metaData thisMetaDataPath)).handle((v e) -> { release(lock true); if (e != null) { Throwables.propagate(e); } return v; } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationSet.java,build,"static MigrationSet  (String id List<Migration> migrations){ Objects.requireNonNull(id ""id cannot be null""); final List<Migration> migrationsCopy=ImmutableList.copyOf(migrations); return new MigrationSet(){ @Override public String id(){ return id; } @Override public List<Migration> migrations(){ return migrationsCopy; } } ; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationSet.java,id,@Overr e public String id(){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\migrations\MigrationSet.java,migrations,@Override public List<Migration>  (){ return migrationsCopy; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,Entry, (Stat stat T model){ this.stat=stat; this.model=model; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,ModeledCacheImpl, (CuratorFramework client ModelSpec<T> modelSpec ExecutorService executor){ if (!modelSpec.path().isResolved() && !modelSpec.path().isRoot() && modelSpec.path().parent().isResolved()) { modelSpec=modelSpec.parent(); } basePath=modelSpec.path(); this.serializer=modelSpec.serializer(); cache=TreeCache.newBuilder(client basePath.fullPath()).setCacheData(false).setDataIsCompressed(modelSpec.createOptions().contains(CreateOption.compress)).setExecutor(executor).setCreateParentNodes(modelSpec.createOptions().contains(CreateOption.createParentsIfNeeded) || modelSpec.createOptions().contains(CreateOption.createParentsAsContainers)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,accept,private void  (ModeledCacheListener.Type type ZPath path Stat stat T model){ listenerContainer.forEach(l -> { l.accept(type path stat model); return null; } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,basePath,ZPath  (){ return basePath; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,childEvent,@Override public void  (CuratorFramework client TreeCacheEvent event){ try { internalChildEvent(event); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); listenerContainer.forEach(l -> { l.handleException(e); return null; } ); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,close,public void  (){ cache.getListenable().removeListener(this); cache.close(); entries.clear(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,currentChildren,@Override public Map<ZPath ZNode<T>>  (ZPath path){ return entries.entrySet().stream().filter(entry -> entry.getKey().startsWith(path)).map(entry -> new AbstractMap.SimpleEntry<>(entry.getKey() new ZNodeImpl<>(entry.getKey() entry.getValue().stat entry.ge
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,currentData,@Override public Optional<ZNode<T>>  (ZPath path){ Entry<T> entry=entries.remove(path); if (entry != null) { return Optional.of(new ZNodeImpl<>(path entry.stat entry.model)); } return Optional.empty(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,internalChildEvent,private void  (TreeCacheEvent event) throws Exception { switch (event.getType()) { case NODE_ADDED: case NODE_UPDATED: { ZPath path=ZPath.parse(event.getData().getPath()); if (!path.equals(basePath)) { byte[] bytes=event.getData().getData(); if ((bytes != null) && (bytes.length > 0)) { T model=serializer.deserialize(bytes); entries.put(path new Entry<>(event.getData().getStat() model)); ModeledCacheListener.Type type=(event.getType() == TreeCacheEvent.Type.NODE_ADDED) ? ModeledCacheListener.Type.NODE_ADDED : ModeledCacheListener.Type.NODE_UPDATED; accept(type path event.getData().getStat() model); } } break; } case NODE_REMOVED: { ZPath path=ZPath.parse(event.getData().getPath()); if (!path.equals(basePath)) { Entry<T> entry=entries.remove(path); T model=(entry != null) ? entry.model : serializer.deserialize(event.getData().getData()); Stat stat=(entry != null) ? entry.stat : event.getData().getStat(); accept(ModeledCacheListener.Type.NODE_REMOVED path stat model); } break; } case INITIALIZED: { listenerContainer.forEach(l -> { l.initialized(); return null; } ); break; } default : break; } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,listenable,public Listenable<ModeledCacheListener<T>>  (){ return listenerContainer; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledCacheImpl.java,start,public void  (){ try { cache.getListenable().addListener(this); cache.start(); } catch ( Exception e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\cached\ModeledCacheListener.java,accept,@Override public void  (Type type ZPath path Stat stat T model){ if (isInitialized) { ModeledCacheListener.this.accept(type path stat model); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\cached\ModeledCacheListener.java,handleException,"default void  (Exception e){ LoggerFactory.getLogger(getClass()).error(""Could not process cache message"" e); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\cached\ModeledCacheListener.java,initialized,@Override public void  (){ isInitialized=true; ModeledCacheListener.this.initialized(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\cached\ModeledCacheListener.java,postInitializedOnly,default ModeledCacheListener<T>  (){ return new ModeledCacheListener<T>(){ private volatile boolean isInitialized=false; @Override public void accept( Type type  ZPath path  Stat stat  T model){ if (isInitialized) { ModeledCacheListener.this.accept(type path stat model); } } @Override public void initialized(){ isInitialized=true; ModeledCacheListener.this.initialized(); } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,ModeledFrameworkImpl,private  (AsyncCuratorFramework client AsyncCuratorFrameworkDsl dslClient WatchableAsyncCuratorFramework watchableClient ModelSpec<T> modelSpec WatchMode watchMode UnaryOperator<WatchedEvent> watcherFilter UnhandledErrorListener unhandledErrorListener UnaryOperator<CuratorEvent> resultFilter boolean isWatched Set<ModeledOptions> modeledOptions){ this.client=client; this.dslClient=dslClient; this.watchableClient=watchableClient; this.modelSpec=modelSpec; this.watchMode=watchMode; this.watcherFilter=watcherFilter; this.unhandledErrorListener=unhandledErrorListener; this.resultFilter=resultFilter; this.isWatched=isWatched; this.modeledOptions=modeledOptions; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,build,"public static <T>ModeledFrameworkImpl<T>  (AsyncCuratorFramework client ModelSpec<T> model WatchMode watchMode UnaryOperator<WatchedEvent> watcherFilter UnhandledErrorListener unhandledErrorListener UnaryOperator<CuratorEvent> resultFilter Set<ModeledOptions> modeledOptions){ boolean isWatched=(watchMode != null); Objects.requireNonNull(client ""client cannot be null""); Objects.requireNonNull(model ""model cannot be null""); modeledOptions=ImmutableSet.copyOf(Objects.requireNonNull(modeledOptions ""modeledOptions cannot be null"")); watchMode=(watchMode != null) ? watchMode : WatchMode.stateChangeAndSuccess; AsyncCuratorFrameworkDsl dslClient=client.with(watchMode unhandledErrorListener resultFilter watcherFilter); WatchableAsyncCuratorFramework watchableClient=isWatched ? dslClient.watched() : dslClient; return new ModeledFrameworkImpl<>(client dslClient watchableClient model watchMode watcherFilter unhandledErrorListener resultFilter isWatched modeledOptions); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,cached,"@Override public CachedModeledFramework<T>  (ExecutorService executor){ Preconditions.checkState(!isWatched ""CachedModeledFramework cannot be used with watched instances as the internal cache would bypass the watchers.""); return new CachedModeledFramework"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,checkExists,@Override public AsyncStage<Stat>  (){ return watchableClient.checkExists().forPath(modelSpec.path().fullPath()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,checkExistsOp,@Override public CuratorOp  (int version){ return client.transactionOp().check().withVersion(version).forPath(modelSpec.path().fullPath()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,child,@Override public ModeledFramework<T>  (Object child){ ModelSpec<T> newModelSpec=modelSpec.child(child); return new ModeledFrameworkImpl<>(client dslClient watchableClient newModelSpec watchMode watcherFilter unhandledErrorListener resultFilter isWatched m
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,children,@Override public AsyncStage<List<ZPath>>  (){ return internalGetChildren(modelSpec.path()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,childrenAsZNodes,"@Override public AsyncStage<List<ZNode<T>>>  (){ ModelStage<List<ZNode<T>>> modelStage=ModelStage.make(); Preconditions.checkState(!isWatched ""childrenAsZNodes() cannot be used with watched instances.""); children().handle((children e) -> { if (e != null) "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,completeChildrenAsZNodes,private void  (ModelStage<List<ZNode<T>>> modelStage List<ZPath> children){ List<ZNode<T>> nodes=Lists.newArrayList(); if (children.size() == 0) { modelStage.complete(nodes); return; } children.forEach(path -> withPath(path).readAsZNode().handle((node e) -> { if (e != null) { modelStage.completeExceptionally(e); } else { nodes.add(node); if (nodes.size() == children.size()) { modelStage.complete(nodes); } } return null; } )); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,createOp,@Override public CuratorOp  (T model){ return client.transactionOp().create().withOptions(modelSpec.createMode() fixAclList(modelSpec.aclList()) modelSpec.createOptions().contains(CreateOption.compress) modelSpec.ttl()).forPath(resolveForSet(model) modelS
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,delete,@Override public AsyncStage<Void>  (int version){ return dslClient.delete().withVersion(-1).forPath(modelSpec.path().fullPath()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,deleteOp,@Override public CuratorOp  (int version){ return client.transactionOp().delete().withVersion(version).forPath(modelSpec.path().fullPath()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,fixAclList,private List<ACL>  (List<ACL> aclList){ return (aclList.size() > 0) ? aclList : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,inTransaction,@Override public AsyncStage<List<CuratorTransactionResult>>  (List<CuratorOp> operations){ return client.transaction().forOperations(operations); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,internalGetChildren,private AsyncStage<List<ZPath>>  (ZPath path){ AsyncStage<List<String>> asyncStage=watchableClient.getChildren().forPath(path.fullPath()); ModelStage<List<ZPath>> modelStage=ModelStage.make(asyncStage.event()); asyncStage.whenComplete((children e) -> { if (e != null) { if (modeledOptions.contains(ModeledOptions.ignoreMissingNodesForChildren) && (Throwables.getRootCause(e) instanceof KeeperException.NoNodeException)) { modelStage.complete(Collections.emptyList()); } else { modelStage.completeExceptionally(e); } } else { modelStage.complete(children.stream().map(path::child).collect(Collectors.toList())); } } ); return modelStage; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,internalRead,private <U>ModelStage<U>  (Function<ZNode<T> U> resolver Stat storingStatIn){ Stat stat=(storingStatIn != null) ? storingStatIn : new Stat(); AsyncPathable<AsyncStage<byte[]>> next=isCompressed() ? watchableClient.getData().decompressedStoringStatIn(stat) : watchableClient.getData().storingStatIn(stat); AsyncStage<byte[]> asyncStage=next.forPath(modelSpec.path().fullPath()); ModelStage<U> modelStage=ModelStage.make(asyncStage.event()); asyncStage.whenComplete((value e) -> { if (e != null) { modelStage.completeExceptionally(e); } else { try { ZNode<T> node=new ZNodeImpl<>(modelSpec.path() stat modelSpec.serializer().deserialize(value)); modelStage.complete(resolver.apply(node)); } catch ( Exception deserializeException) { modelStage.completeExceptionally(deserializeException); } } } ); return modelStage; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,isCompressed,private boolean  (){ return modelSpec.createOptions().contains(CreateOption.compress); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,modelSpec,@Override public ModelSpec<T>  (){ return modelSpec; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,parent,@Override public ModeledFramework<T>  (){ ModelSpec<T> newModelSpec=modelSpec.parent(); return new ModeledFrameworkImpl<>(client dslClient watchableClient newModelSpec watchMode watcherFilter unhandledErrorListener resultFilter isWatched modeledOptions); 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,read,@Override public AsyncStage<T>  (Stat storingStatIn){ return internalRead(ZNode::model storingStatIn); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,readAsZNode,@Override public AsyncStage<ZNode<T>>  (){ return internalRead(Function.identity() null); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,resolveForSet,private String  (T model){ if (modelSpec.path().isResolved()) { return modelSpec.path().fullPath(); } return modelSpec.path().resolved(model).fullPath(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,set,@Override public AsyncStage<String>  (T item Stat storingStatIn int version){ try { byte[] bytes=modelSpec.serializer().serialize(item); return dslClient.create().withOptions(modelSpec.createOptions() modelSpec.createMode() fixAclList(modelSpec.aclList())
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,unwrap,@Override public AsyncCuratorFramework  (){ return client; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,update,@Override public AsyncStage<Stat>  (T item int version){ try { byte[] bytes=modelSpec.serializer().serialize(item); AsyncPathAndBytesable<AsyncStage<Stat>> next=isCompressed() ? dslClient.setData().compressedWithVersion(version) : dslClient.setData(); ret
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,updateOp,@Override public CuratorOp  (T model int version){ AsyncTransactionSetDataBuilder builder=client.transactionOp().setData(); if (isCompressed()) { return builder.withVersionCompressed(version).forPath(resolveForSet(model) modelSpec.serializer().serialize(m
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,versioned,@Override public VersionedModeledFramework<T>  (){ return new VersionedModeledFrameworkImpl<>(this); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModeledFrameworkImpl.java,withPath,@Override public ModeledFramework<T>  (ZPath path){ ModelSpec<T> newModelSpec=modelSpec.withPath(path); return new ModeledFrameworkImpl<>(client dslClient watchableClient newModelSpec watchMode watcherFilter unhandledErrorListener resultFilter isWatched m
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,ModelSpecImpl,"public  (ZPath path ModelSerializer<T> serializer CreateMode createMode List<ACL> aclList Set<CreateOption> createOptions Set<DeleteOption> deleteOptions long ttl){ this.path=Objects.requireNonNull(path ""path cannot be null""); this.serializer=Objects.requireNonNull(serializer ""serializer cannot be null""); this.createMode=Objects.requireNonNull(createMode ""createMode cannot be null""); this.aclList=ImmutableList.copyOf(Objects.requireNonNull(aclList ""aclList cannot be null"")); this.createOptions=ImmutableSet.copyOf(Objects.requireNonNull(createOptions ""createOptions cannot be null"")); this.deleteOptions=ImmutableSet.copyOf(Objects.requireNonNull(deleteOptions ""deleteOptions cannot be null"")); this.ttl=ttl; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,aclList,@Override public List<ACL>  (){ return aclList; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,child,@Override public ModelSpec<T>  (Object child){ return withPath(path.child(child)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,createMode,@Override public CreateMode  (){ return createMode; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,createOptions,@Override public Set<CreateOption>  (){ return createOptions; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,deleteOptions,@Override public Set<DeleteOption>  (){ return deleteOptions; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ModelSpecImpl<?> modelSpec=(ModelSpecImpl<?>)o; if (ttl != modelSpec.ttl) { return false; } if (!path.equals(modelSpec.pat
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,hashCode,@Override public int  (){ int result=path.hashCode(); result=31 * result + serializer.hashCode(); result=31 * result + createMode.hashCode(); result=31 * result + aclList.hashCode(); result=31 * result + createOptions.hashCode(); result=31 * result + dele
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,isValid,@Override public boolean  (Schema schema String path byte[] data List<ACL> acl){ if (acl != null) { List<ACL> localAclList=(aclList.size() > 0) ? aclList : ZooDefs.Ids.OPEN_ACL_UNSAFE; if (!acl.equals(localAclList)) { throw new SchemaViolation(schema new 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,parent,@Override public ModelSpec<T>  (){ return withPath(path.parent()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,path,@Override public ZPath  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,resolved,@Override public ModelSpec<T>  (List<Object> parameters){ return withPath(path.resolved(parameters)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,schema,@Override public Schema  (){ if (schema == null) { schema=Schema.builder(path.toSchemaPathPattern()).dataValidator(this).ephemeral(createMode.isEphemeral() ? Schema.Allowance.MUST : Schema.Allowance.CANNOT).canBeDeleted(true).sequential(createMode.isSeque
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,serializer,@Override public ModelSerializer<T>  (){ return serializer; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,toString,"@Override public String  (){ return ""ModelSpecImpl{"" + ""path="" + path + ""  serializer=""+ serializer+ ""  createMode=""+ createMode+ ""  aclList=""+ aclList+ ""  createOptions=""+ createOptions+ ""  deleteOptions=""+ deleteOptions+ ""  ttl=""+ ttl+ ""  schema=""+ sche"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,ttl,@Override public long  (){ return ttl; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelSpecImpl.java,withPath,@Override public ModelSpec<T>  (ZPath newPath){ return new ModelSpecImpl<>(newPath serializer createMode aclList createOptions deleteOptions ttl); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,CachedModeledFrameworkImpl,private  (ModeledFramework<T> client ModeledCacheImpl<T> cache Executor executor){ this.client=client; this.cache=cache; this.executor=executor; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,cache,@Override public ModeledCache<T>  (){ return cache; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,cached,"@Override public CachedModeledFramework<T>  (ExecutorService executor){ throw new UnsupportedOperationException(""Already a cached instance""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,checkExists,@Override public AsyncStage<Stat>  (){ ZPath path=client.modelSpec().path(); Optional<ZNode<T>> data=cache.currentData(path); return data.map(node -> completed(node.stat())).orElseGet(() -> completed(null)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,checkExistsOp,@Override public CuratorOp  (int version){ return client.checkExistsOp(version); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,child,@Override public CachedModeledFramework<T>  (Object child){ return new CachedModeledFrameworkImpl<>(client.child(child) cache executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,children,@Override public AsyncStage<List<ZPath>>  (){ List<ZPath> paths=cache.currentChildren(client.modelSpec().path()).keySet().stream().filter(path -> path.equals(cache.basePath())).collect(Collectors.toList()); return completed(paths); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,childrenAsZNodes,@Override public AsyncStage<List<ZNode<T>>>  (){ List<ZNode<T>> nodes=cache.currentChildren(client.modelSpec().path()).entrySet().stream().filter(e -> e.getKey().equals(cache.basePath())).map(Map.Entry::getValue).collect(Collectors.toList()); return compl
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,close,@Override public void  (){ cache.close(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,completed,private <U>AsyncStage<U>  (U value){ return ModelStage.completed(value); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,createOp,@Override public CuratorOp  (T model){ return client.createOp(model); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,delete,@Override public AsyncStage<Void>  (int version){ return client.delete(version); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,deleteOp,@Override public CuratorOp  (int version){ return client.deleteOp(version); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,exceptionally,private <U>AsyncStage<U>  (){ KeeperException.NoNodeException exception=new KeeperException.NoNodeException(client.modelSpec().path().fullPath()); return ModelStage.exceptionally(exception); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,inTransaction,@Override public AsyncStage<List<CuratorTransactionResult>>  (List<CuratorOp> operations){ return client.inTransaction(operations); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,internalRead,private <U>AsyncStage<U>  (Function<ZNode<T> U> resolver Supplier<AsyncStage<U>> elseProc){ ZPath path=client.modelSpec().path(); Optional<ZNode<T>> data=cache.currentData(path); return data.map(node -> completed(resolver.apply(node))).orElseGet(elseProc); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,list,@Override public AsyncStage<List<T>>  (){ List<T> children=cache.currentChildren().values().stream().map(ZNode::model).collect(Collectors.toList()); return ModelStage.completed(children); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,listenable,@Override public Listenable<ModeledCacheListener<T>>  (){ return cache.listenable(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,modelSpec,@Override public ModelSpec<T>  (){ return client.modelSpec(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,parent,"@Override public ModeledFramework<T>  (){ throw new UnsupportedOperationException(""Not supported for CachedModeledFramework. Instead  call parent() on the ModeledFramework before calling cached()""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,read,@Override public AsyncStage<T>  (Stat storingStatIn){ return internalRead(n -> { if (storingStatIn != null) { DataTree.copyStat(n.stat() storingStatIn); } return n.model(); }  this::exceptionally); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,readAsZNode,@Override public AsyncStage<ZNode<T>>  (){ return internalRead(Function.identity() this::exceptionally); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,readThrough,@Override public AsyncStage<T>  (Stat storingStatIn){ return internalRead(ZNode::model () -> client.read(storingStatIn)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,readThroughAsZNode,@Override public AsyncStage<ZNode<T>>  (){ return internalRead(Function.identity() client::readAsZNode); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,set,@Override public AsyncStage<String>  (T model int version){ return client.set(model version); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,start,@Override public void  (){ cache.start(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,unwrap,@Override public AsyncCuratorFramework  (){ return client.unwrap(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,update,@Override public AsyncStage<Stat>  (T model int version){ return client.update(model version); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,updateOp,@Override public CuratorOp  (T model int version){ return client.updateOp(model version); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,versioned,@Override public VersionedModeledFramework<T>  (){ return new VersionedModeledFrameworkImpl<>(this); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\CachedModeledFrameworkImpl.java,withPath,@Override public CachedModeledFramework<T>  (ZPath path){ return new CachedModeledFrameworkImpl<>(client.withPath(path) cache executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZNodeImpl.java,ZNodeImpl,"public  (ZPath path Stat stat T model){ this.path=Objects.requireNonNull(path ""path cannot be null""); this.stat=Objects.requireNonNull(stat ""stat cannot be null""); this.model=Objects.requireNonNull(model ""model cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZNodeImpl.java,model,@Override public T  (){ return model; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZNodeImpl.java,path,@Override public ZPath  (){ return path; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZNodeImpl.java,stat,@Override public Stat  (){ return stat; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\VersionedModeledFrameworkImpl.java,VersionedModeledFrameworkImpl, (ModeledFramework<T> client){ this.client=client; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\VersionedModeledFrameworkImpl.java,read,@Override public AsyncStage<Versioned<T>>  (Stat storingStatIn){ Stat localStat=(storingStatIn != null) ? storingStatIn : new Stat(); AsyncStage<T> stage=client.read(localStat); ModelStage<Versioned<T>> modelStage=ModelStage.make(stage.event()); stage.whe
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\VersionedModeledFrameworkImpl.java,set,@Override public AsyncStage<String>  (Versioned<T> model Stat storingStatIn){ return client.set(model.model() storingStatIn model.version()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\VersionedModeledFrameworkImpl.java,update,@Override public AsyncStage<Stat>  (Versioned<T> model){ return client.update(model.model() model.version()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\VersionedModeledFrameworkImpl.java,updateOp,@Override public CuratorOp  (Versioned<T> model){ return client.updateOp(model.model() model.version()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,AsyncModelStage,public  (Executor executor){ super(null); this.executor=executor; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,ModelStage,private  (CompletionStage<WatchedEvent> event){ this.event=event; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,acceptEitherAsync,@Override public CompletableFuture<Void>  (CompletionStage<? extends U> other Consumer<? super U> action){ return super.acceptEitherAsync(other action executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,applyToEitherAsync,@Override public <U1>CompletableFuture<U1>  (CompletionStage<? extends U> other Function<? super U U1> fn){ return super.applyToEitherAsync(other fn executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,async,static <U>ModelStage<U>  (Executor executor){ return new AsyncModelStage<>(executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,asyncCompleted,static <U>ModelStage<U>  (U value Executor executor){ ModelStage<U> stage=new AsyncModelStage<>(executor); stage.complete(value); return stage; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,asyncExceptionally,static <U>ModelStage<U>  (Exception e Executor executor){ ModelStage<U> stage=new AsyncModelStage<>(executor); stage.completeExceptionally(e); return stage; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,completed,static <U>ModelStage<U>  (U value){ ModelStage<U> stage=new ModelStage<>(null); stage.complete(value); return stage; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,event,@Override public CompletionStage<WatchedEvent>  (){ return event; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,exceptionally,static <U>ModelStage<U>  (Exception e){ ModelStage<U> stage=new ModelStage<>(null); stage.completeExceptionally(e); return stage; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,handleAsync,@Override public <U1>CompletableFuture<U1>  (BiFunction<? super U Throwable ? extends U1> fn){ return super.handleAsync(fn executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,make,static <U>ModelStage<U>  (CompletionStage<WatchedEvent> event){ return new ModelStage<>(event); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,runAfterBothAsync,@Override public CompletableFuture<Void>  (CompletionStage<?> other Runnable action){ return super.runAfterBothAsync(other action executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,runAfterEitherAsync,@Override public CompletableFuture<Void>  (CompletionStage<?> other Runnable action){ return super.runAfterEitherAsync(other action executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,thenAcceptAsync,@Override public CompletableFuture<Void>  (Consumer<? super U> action){ return super.thenAcceptAsync(action executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,thenAcceptBothAsync,@Override public <U1>CompletableFuture<Void>  (CompletionStage<? extends U1> other BiConsumer<? super U ? super U1> action){ return super.thenAcceptBothAsync(other action executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,thenApplyAsync,@Override public <U1>CompletableFuture<U1>  (Function<? super U ? extends U1> fn){ return super.thenApplyAsync(fn executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,thenCombineAsync,@Override public <U1 V>CompletableFuture<V>  (CompletionStage<? extends U1> other BiFunction<? super U ? super U1 ? extends V> fn){ return super.thenCombineAsync(other fn executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,thenComposeAsync,@Override public <U1>CompletableFuture<U1>  (Function<? super U ? extends CompletionStage<U1>> fn){ return super.thenComposeAsync(fn executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,thenRunAsync,@Override public CompletableFuture<Void>  (Runnable action){ return super.thenRunAsync(action executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ModelStage.java,whenCompleteAsync,@Override public CompletableFuture<U>  (BiConsumer<? super U ? super Throwable> action){ return super.whenCompleteAsync(action executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\JacksonModelSerializer.java,JacksonModelSerializer,"public  (ObjectReader reader ObjectWriter writer){ this.reader=Objects.requireNonNull(reader ""reader cannot be null""); this.writer=Objects.requireNonNull(writer ""writer cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\JacksonModelSerializer.java,build,public static <T>JacksonModelSerializer<T>  (TypeReference type){ return new JacksonModelSerializer<>(type); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\JacksonModelSerializer.java,deserialize,"@Override public T  (byte[] bytes){ try { return reader.readValue(bytes); } catch ( IOException e) { throw new RuntimeException(String.format(""Could not deserialize value: %s"" Arrays.toString(bytes)) e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\JacksonModelSerializer.java,serialize,"@Override public byte[]  (T model){ try { return writer.writeValueAsBytes(model); } catch ( JsonProcessingException e) { throw new RuntimeException(String.format(""Could not serialize value: %s"" model) e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,ZPathImpl,private  (List<String> nodes String child){ ImmutableList.Builder<String> builder=ImmutableList.<String>builder().addAll(nodes); if (child != null) { validate(child); builder.add(child); } this.nodes=builder.build(); isResolved=this.nodes.stream().noneMatch(ZPathImpl::isParameter); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,buildFullPath,private String  (UnaryOperator<String> filter){ boolean addSeparator=false; StringBuilder str=new StringBuilder(); int size=nodes.size(); int parameterIndex=0; for (int i=0; i < size; ++i) { if (i > 1) { str.append(PATH_SEPARATOR); } str.append(filter.apply(nodes.get(i))); } return str.toString(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,checkResolved,"private void  (){ if (!isResolved) { throw new IllegalStateException(""This ZPath has not been resolved: "" + toString()); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,checkRootAccess,"private void  (){ if (isRoot()) { throw new NoSuchElementException(""The root has no parent""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,child,@Override public ZPath  (Object child){ return new ZPathImpl(nodes NodeName.nameFrom(child)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ZPathImpl zPaths=(ZPathImpl)o; return nodes.equals(zPaths.nodes); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,from,"public static ZPath  (ZPath base List<String> names){ names=Objects.requireNonNull(names ""names cannot be null""); names.forEach(ZPathImpl::validate); ImmutableList.Builder<String> builder=ImmutableList.builder(); if (base != null) { if (base instanceof ZPathImpl) { builder.addAll(((ZPathImpl)base).nodes); } else { builder.addAll(Splitter.on(PATH_SEPARATOR).omitEmptyStrings().splitToList(base.fullPath())); } } else { builder.add(PATH_SEPARATOR); } List<String> nodes=builder.addAll(names).build(); return new ZPathImpl(nodes null); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,fullPath,@Override public String  (){ checkResolved(); if (fullPath == null) { fullPath=buildFullPath(s -> s); } return fullPath; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,hashCode,@Override public int  (){ return nodes.hashCode(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,isParameter,private static boolean  (String name){ return (name.length() > 1) && name.startsWith(PATH_SEPARATOR); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,isResolved,@Override public boolean  (){ return isResolved; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,isRoot,@Override public boolean  (){ return nodes.size() == 1; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,nodeName,@Override public String  (){ return nodes.get(nodes.size() - 1); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,parent,@Override public ZPath  (){ checkRootAccess(); if (parent == null) { parent=new ZPathImpl(nodes.subList(0 nodes.size() - 1) null); } return parent; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,parse,public static ZPath  (String fullPath UnaryOperator<String> nameFilter){ return parseInternal(fullPath nameFilter); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,parseInternal,private static ZPathImpl  (String fullPath UnaryOperator<String> nameFilter){ List<String> nodes=ImmutableList.<String>builder().add(PATH_SEPARATOR).addAll(Splitter.on(PATH_SEPARATOR).omitEmptyStrings().splitToList(fullPath).stream().map(nameFilter).collect(Collectors.toList())).build(); nodes.forEach(ZPathImpl::validate); return new ZPathImpl(nodes null); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,resolved,@Override public ZPath  (List<Object> parameters){ Iterator<Object> iterator=parameters.iterator(); List<String> nodeNames=nodes.stream().map(name -> { if (isParameter(name) && iterator.hasNext()) { return NodeName.nameFrom(iterator.next()); } return name
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,startsWith,@Override public boolean  (ZPath path){ ZPathImpl rhs; if (path instanceof ZPathImpl) { rhs=(ZPathImpl)path; } else { rhs=parseInternal(path.fullPath() s -> s); } return (nodes.size() >= rhs.nodes.size()) && nodes.subList(0 rhs.nodes.size()).equals(rhs.no
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,toSchemaPathPattern,"@Override public Pattern  (){ if (schema == null) { schema=Pattern.compile(buildFullPath(s -> isParameter(s) ? "".*"" : s)); } return schema; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,toString,"@Override public String  (){ return nodes.subList(1 nodes.size()).stream().map(name -> isParameter(name) ? name.substring(1) : name).collect(Collectors.joining(PATH_SEPARATOR PATH_SEPARATOR """")); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\details\ZPathImpl.java,validate,"private static void  (String nodeName){ if (isParameter(Objects.requireNonNull(nodeName ""nodeName cannot be null""))) { return; } if (nodeName.equals(PATH_SEPARATOR)) { return; } PathUtils.validatePath(PATH_SEPARATOR + nodeName); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSerializer.java,deserialize,@Override public byte[]  (byte[] bytes){ return bytes; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSerializer.java,serialize,@Override public byte[]  (byte[] model){ return model; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFramework.java,builder,static <T>ModeledFrameworkBuilder<T>  (){ return new ModeledFrameworkBuilder<>(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFrameworkBuilder.java,ModeledFrameworkBuilder," (AsyncCuratorFramework client ModelSpec<T> modelSpec){ this.client=Objects.requireNonNull(client ""client cannot be null""); this.modelSpec=Objects.requireNonNull(modelSpec ""modelSpec cannot be null""); modeledOptions=Collections.singleton(ModeledOptions.ignoreMissingNodesForChildren); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFrameworkBuilder.java,build,public ModeledFramework<T>  (){ return ModeledFrameworkImpl.build(client modelSpec watchMode watcherFilter unhandledErrorListener resultFilter modeledOptions); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFrameworkBuilder.java,watched,public ModeledFrameworkBuilder<T>  (WatchMode watchMode UnaryOperator<WatchedEvent> watcherFilter){ this.watchMode=watchMode; this.watcherFilter=watcherFilter; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFrameworkBuilder.java,withClient,"public ModeledFrameworkBuilder<T>  (AsyncCuratorFramework client){ this.client=Objects.requireNonNull(client ""client cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFrameworkBuilder.java,withModelSpec,"public ModeledFrameworkBuilder<T>  (ModelSpec<T> modelSpec){ this.modelSpec=Objects.requireNonNull(modelSpec ""modelSpec cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFrameworkBuilder.java,withOptions,"public ModeledFrameworkBuilder<T>  (Set<ModeledOptions> modeledOptions){ this.modeledOptions=ImmutableSet.copyOf(Objects.requireNonNull(modeledOptions ""client cannot be null"")); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFrameworkBuilder.java,withResultFilter,public ModeledFrameworkBuilder<T>  (UnaryOperator<CuratorEvent> resultFilter){ this.resultFilter=resultFilter; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModeledFrameworkBuilder.java,withUnhandledErrorListener,public ModeledFrameworkBuilder<T>  (UnhandledErrorListener unhandledErrorListener){ this.unhandledErrorListener=unhandledErrorListener; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\NodeName.java,nameFrom,static String  (Object obj){ if (obj instanceof NodeName) { return ((NodeName)obj).nodeName(); } return String.valueOf(obj); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSpecBuilder.java,ModelSpecBuilder," (ZPath path ModelSerializer<T> serializer){ this.path=Objects.requireNonNull(path ""path cannot be null""); this.serializer=Objects.requireNonNull(serializer ""serializer cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSpecBuilder.java,build,public ModelSpec<T>  (){ return new ModelSpecImpl<>(path serializer createMode aclList createOptions deleteOptions ttl); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSpecBuilder.java,withAclList,public ModelSpecBuilder<T>  (List<ACL> aclList){ this.aclList=aclList; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSpecBuilder.java,withCreateMode,public ModelSpecBuilder<T>  (CreateMode createMode){ this.createMode=createMode; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSpecBuilder.java,withCreateOptions,public ModelSpecBuilder<T>  (Set<CreateOption> createOptions){ this.createOptions=(createOptions != null) ? ImmutableSet.copyOf(createOptions) : null; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSpecBuilder.java,withDeleteOptions,public ModelSpecBuilder<T>  (Set<DeleteOption> deleteOptions){ this.deleteOptions=(deleteOptions != null) ? ImmutableSet.copyOf(deleteOptions) : null; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSpecBuilder.java,withPath,"public ModelSpecBuilder<T>  (ZPath path){ this.path=Objects.requireNonNull(path ""path cannot be null""); return this; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ModelSpecBuilder.java,withTtl,public ModelSpecBuilder<T>  (long ttl){ this.ttl=ttl; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework2.java,from,static <M P1 P2>TypedModeledFramework2<M P1 P2>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec2<M P1 P2> typedModelSpec=TypedModelSpec2.from(modelSpecBuilder pathWithIds); return (client p1 p2) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework.java,from,static <M P1>TypedModeledFramework<M P1>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec<M P1> typedModelSpec=TypedModelSpec.from(modelSpecBuilder pathWithIds); return (client p1) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework10.java,from,static <M P1 P2 P3 P4 P5 P6 P7 P8 P9 P10>TypedModeledFramework10<M P1 P2 P3 P4 P5 P6 P7 P8 P9 P10>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec10<M P1 P2 P3 P4 P5 P6 P7 P8 P9 P10> typedModelSpec=TypedModelSpec10.from(modelSpecBuilder pathWithIds); return (client p1 p2 p3 p4 p5 p6 p7 p8 p9 p10) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2 p3 p4 p5 p6 p7 p8 p9 p10)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework3.java,from,static <M P1 P2 P3>TypedModeledFramework3<M P1 P2 P3>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec3<M P1 P2 P3> typedModelSpec=TypedModelSpec3.from(modelSpecBuilder pathWithIds); return (client p1 p2 p3) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2 p3)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework4.java,from,static <M P1 P2 P3 P4>TypedModeledFramework4<M P1 P2 P3 P4>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec4<M P1 P2 P3 P4> typedModelSpec=TypedModelSpec4.from(modelSpecBuilder pathWithIds); return (client p1 p2 p3 p4) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2 p3 p4)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework0.java,from,static <M>TypedModeledFramework0<M>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec0<M> typedModelSpec=TypedModelSpec0.from(modelSpecBuilder pathWithIds); return (client) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved()).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework5.java,from,static <M P1 P2 P3 P4 P5>TypedModeledFramework5<M P1 P2 P3 P4 P5>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec5<M P1 P2 P3 P4 P5> typedModelSpec=TypedModelSpec5.from(modelSpecBuilder pathWithIds); return (client p1 p2 p3 p4 p5) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2 p3 p4 p5)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework6.java,from,static <M P1 P2 P3 P4 P5 P6>TypedModeledFramework6<M P1 P2 P3 P4 P5 P6>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec6<M P1 P2 P3 P4 P5 P6> typedModelSpec=TypedModelSpec6.from(modelSpecBuilder pathWithIds); return (client p1 p2 p3 p4 p5 p6) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2 p3 p4 p5 p6)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework8.java,from,static <M P1 P2 P3 P4 P5 P6 P7 P8>TypedModeledFramework8<M P1 P2 P3 P4 P5 P6 P7 P8>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec8<M P1 P2 P3 P4 P5 P6 P7 P8> typedModelSpec=TypedModelSpec8.from(modelSpecBuilder pathWithIds); return (client p1 p2 p3 p4 p5 p6 p7 p8) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2 p3 p4 p5 p6 p7 p8)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework7.java,from,static <M P1 P2 P3 P4 P5 P6 P7>TypedModeledFramework7<M P1 P2 P3 P4 P5 P6 P7>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec7<M P1 P2 P3 P4 P5 P6 P7> typedModelSpec=TypedModelSpec7.from(modelSpecBuilder pathWithIds); return (client p1 p2 p3 p4 p5 p6 p7) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2 p3 p4 p5 p6 p7)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModeledFramework9.java,from,static <M P1 P2 P3 P4 P5 P6 P7 P8 P9>TypedModeledFramework9<M P1 P2 P3 P4 P5 P6 P7 P8 P9>  (ModeledFrameworkBuilder<M> frameworkBuilder ModelSpecBuilder<M> modelSpecBuilder String pathWithIds){ TypedModelSpec9<M P1 P2 P3 P4 P5 P6 P7 P8 P9> typedModelSpec=TypedModelSpec9.from(modelSpecBuilder pathWithIds); return (client p1 p2 p3 p4 p5 p6 p7 p8 p9) -> frameworkBuilder.withClient(client).withModelSpec(typedModelSpec.resolved(p1 p2 p3 p4 p5 p6 p7 p8 p9)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec10.java,from,static <M P1 P2 P3 P4 P5 P6 P7 P8 P9 P10>TypedModelSpec10<M P1 P2 P3 P4 P5 P6 P7 P8 P9 P10>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath10<P1 P2 P3 P4 P5 P6 P7 P8 P9 P10> zPath=TypedZPath10.from(pathWithIds); return (p1 p2 p3 p4 p5 p6 p7 p8 p9 p10) -> builder.withPath(zPath.resolved(p1 p2 p3 p4 p5 p6 p7 p8 p9 p10)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec.java,from,static <M P1>TypedModelSpec<M P1>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath<P1> zPath=TypedZPath.from(pathWithIds); return p1 -> builder.withPath(zPath.resolved(p1)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec2.java,from,static <M P1 P2>TypedModelSpec2<M P1 P2>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath2<P1 P2> zPath=TypedZPath2.from(pathWithIds); return (p1 p2) -> builder.withPath(zPath.resolved(p1 p2)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec0.java,from,static <M>TypedModelSpec0<M>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath0 zPath=TypedZPath0.from(pathWithIds); return () -> builder.withPath(zPath.resolved()).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec3.java,from,static <M P1 P2 P3>TypedModelSpec3<M P1 P2 P3>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath3<P1 P2 P3> zPath=TypedZPath3.from(pathWithIds); return (p1 p2 p3) -> builder.withPath(zPath.resolved(p1 p2 p3)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec4.java,from,static <M P1 P2 P3 P4>TypedModelSpec4<M P1 P2 P3 P4>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath4<P1 P2 P3 P4> zPath=TypedZPath4.from(pathWithIds); return (p1 p2 p3 p4) -> builder.withPath(zPath.resolved(p1 p2 p3 p4)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec6.java,from,static <M P1 P2 P3 P4 P5 P6>TypedModelSpec6<M P1 P2 P3 P4 P5 P6>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath6<P1 P2 P3 P4 P5 P6> zPath=TypedZPath6.from(pathWithIds); return (p1 p2 p3 p4 p5 p6) -> builder.withPath(zPath.resolved(p1 p2 p3 p4 p5 p6)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec5.java,from,static <M P1 P2 P3 P4 P5>TypedModelSpec5<M P1 P2 P3 P4 P5>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath5<P1 P2 P3 P4 P5> zPath=TypedZPath5.from(pathWithIds); return (p1 p2 p3 p4 p5) -> builder.withPath(zPath.resolved(p1 p2 p3 p4 p5)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec8.java,from,static <M P1 P2 P3 P4 P5 P6 P7 P8>TypedModelSpec8<M P1 P2 P3 P4 P5 P6 P7 P8>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath8<P1 P2 P3 P4 P5 P6 P7 P8> zPath=TypedZPath8.from(pathWithIds); return (p1 p2 p3 p4 p5 p6 p7 p8) -> builder.withPath(zPath.resolved(p1 p2 p3 p4 p5 p6 p7 p8)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec7.java,from,static <M P1 P2 P3 P4 P5 P6 P7>TypedModelSpec7<M P1 P2 P3 P4 P5 P6 P7>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath7<P1 P2 P3 P4 P5 P6 P7> zPath=TypedZPath7.from(pathWithIds); return (p1 p2 p3 p4 p5 p6 p7) -> builder.withPath(zPath.resolved(p1 p2 p3 p4 p5 p6 p7)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedModelSpec9.java,from,static <M P1 P2 P3 P4 P5 P6 P7 P8 P9>TypedModelSpec9<M P1 P2 P3 P4 P5 P6 P7 P8 P9>  (ModelSpecBuilder<M> builder String pathWithIds){ TypedZPath9<P1 P2 P3 P4 P5 P6 P7 P8 P9> zPath=TypedZPath9.from(pathWithIds); return (p1 p2 p3 p4 p5 p6 p7 p8 p9) -> builder.withPath(zPath.resolved(p1 p2 p3 p4 p5 p6 p7 p8 p9)).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath10.java,from,static <T1 T2 T3 T4 T5 T6 T7 T8 T9 T10>TypedZPath10<T1 T2 T3 T4 T5 T6 T7 T8 T9 T10>  (ZPath path){ return (p1 p2 p3 p4 p5 p6 p7 p8 p9 p10) -> path.resolved(p1 p2 p3 p4 p5 p6 p7 p8 p9 p10); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath.java,from,static <T>TypedZPath<T>  (ZPath path){ return path::resolved; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath0.java,from,static TypedZPath0  (ZPath path){ return path::resolved; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath2.java,from,static <T1 T2>TypedZPath2<T1 T2>  (ZPath path){ return (p1 p2) -> path.resolved(p1 p2); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath3.java,from,static <T1 T2 T3>TypedZPath3<T1 T2 T3>  (ZPath path){ return (p1 p2 p3) -> path.resolved(p1 p2 p3); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath4.java,from,static <T1 T2 T3 T4>TypedZPath4<T1 T2 T3 T4>  (ZPath path){ return (p1 p2 p3 p4) -> path.resolved(p1 p2 p3 p4); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath6.java,from,static <T1 T2 T3 T4 T5 T6>TypedZPath6<T1 T2 T3 T4 T5 T6>  (ZPath path){ return (p1 p2 p3 p4 p5 p6) -> path.resolved(p1 p2 p3 p4 p5 p6); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath7.java,from,static <T1 T2 T3 T4 T5 T6 T7>TypedZPath7<T1 T2 T3 T4 T5 T6 T7>  (ZPath path){ return (p1 p2 p3 p4 p5 p6 p7) -> path.resolved(p1 p2 p3 p4 p5 p6 p7); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath8.java,from,static <T1 T2 T3 T4 T5 T6 T7 T8>TypedZPath8<T1 T2 T3 T4 T5 T6 T7 T8>  (ZPath path){ return (p1 p2 p3 p4 p5 p6 p7 p8) -> path.resolved(p1 p2 p3 p4 p5 p6 p7 p8); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\versioned\Versioned.java,from,static <T>Versioned<T>  (T model int version){ return new Versioned<T>(){ @Override public int version(){ return version; } @Override public T model(){ return model; } } ; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\versioned\Versioned.java,model,@Override public T  (){ return model; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\versioned\Versioned.java,version,@Override public int  (){ return version; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\typed\TypedZPath9.java,from,static <T1 T2 T3 T4 T5 T6 T7 T8 T9>TypedZPath9<T1 T2 T3 T4 T5 T6 T7 T8 T9>  (ZPath path){ return (p1 p2 p3 p4 p5 p6 p7 p8 p9) -> path.resolved(p1 p2 p3 p4 p5 p6 p7 p8 p9); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ZNode.java,model,static <T>CompletionStage<T>  (AsyncStage<ZNode<T>> from){ return from.thenApply(ZNode::model); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\main\java\org\apache\curator\x\async\modeled\ZNode.java,models,static <T>CompletionStage<List<T>>  (AsyncStage<List<ZNode<T>>> from){ return from.thenApply(nodes -> nodes.stream().map(ZNode::model).collect(Collectors.toList())); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\CompletableBaseClassForTests.java,complete,"protected <T U>void  (CompletionStage<T> stage BiConsumer<? super T Throwable> handler){ try { stage.handle((v e) -> { handler.accept(v e); return null; } ).toCompletableFuture().get(timing.forWaiting().milliseconds() TimeUnit.MILLISECONDS); } catch ( InterruptedException e) { Thread.interrupted(); } catch ( ExecutionException e) { if (e.getCause() instanceof AssertionError) { throw (AssertionError)e.getCause(); } Assert.fail(""get() failed"" e); } catch ( TimeoutException e) { Assert.fail(""get() timed out""); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,getAclForPath,@Override public List<ACL>  (String path){ if (aclProviderCalled.getAndSet(true)) { throw new UnsupportedOperationException(); } else { return new ArrayList<>(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,getDefaultAcl,@Override public List<ACL>  (){ if (aclProviderCalled.getAndSet(true)) { throw new UnsupportedOperationException(); } else { return new ArrayList<>(); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testCuratorCallbackOnError,@Test public void  () throws Exception { Timing timing=new Timing(); final CountDownLatch latch=new CountDownLatch(1); try (CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).sessionTimeoutMs(timing.session(
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testErrorListener,@Test public void  () throws Exception { final AtomicBoolean aclProviderCalled=new AtomicBoolean(false); ACLProvider badAclProvider=new ACLProvider(){ @Override public List<ACL> getDefaultAcl(){ if (aclProviderCalled.getAndSet(true)) { throw new Unsupport
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testListenerConnectedAtStart,@Test public void  () throws Exception { server.stop(); Timing timing=new Timing(2); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryNTimes(0 0)); try { client.start(); Asyn
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testRetries,@Test public void  () throws Exception { final int SLEEP=1000; final int TIMES=5; Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryNTimes(TIMES SL
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFrameworkBackground.java,testShutdown,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFramework client=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).connectionTimeoutMs(timing.connection()).retryPolicy
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\models\ModelV1.java,ModelV1,public  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\models\ModelV1.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,checkForContainers,"private boolean  (){ if (ZKPaths.getContainerCreateMode() == CreateMode.PERSISTENT) { System.out.println(""Not using CreateMode.CONTAINER enabled version of ZooKeeper""); return false; } return true; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,setup,"@BeforeMethod @Override public void  () throws Exception { System.setProperty(""znode.container.checkIntervalMs"" ""1000""); super.setup(); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,teardown,"@AfterMethod @Override public void  () throws Exception { System.clearProperty(""znode.container.checkIntervalMs""); super.teardown(); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testBackgroundDelete,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { AsyncCuratorFramework async=AsyncCuratorFramework.wrap(client); CountDownLatch latch=n
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testBackgroundDeleteWithChildren,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.getCuratorListenable().addListener((client1 event) -> { if (event.getType() == 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testBackgroundGetDataWithWatch,@Test public void  () throws Exception { final byte[] data1={1 2 3}; final byte[] data2={4 5 6 7}; CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { AsyncCuratorFramework async=
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateACLMultipleAuths,"@Test public void  () throws Exception { List<AuthInfo> authInfos=new ArrayList<AuthInfo>(); authInfos.add(new AuthInfo(""digest"" ""me1:pass1"".getBytes())); authInfos.add(new AuthInfo(""digest"" ""me2:pass2"".getBytes())); CuratorFrameworkFactory.Builder builde"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateACLSingleAuth,"@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).authorization(""digest"" ""me1:pass1"".getBytes()).retryPolicy(new Ret"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateACLWithReset,@Test public void  () throws Exception { Timing timing=new Timing(); CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).sessionTimeoutMs(timing.session()).con
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateParentContainers,@Test public void  () throws Exception { if (!checkForContainers()) { return; } CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTim
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreateParents,@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); client.start(); try { As
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testCreatingParentsTheSame,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); AsyncCuratorFramework async=AsyncCuratorFramework.wrap(client); Assert.assertNull(clie
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testDeleteGuaranteedWithChildren,@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).build(); client.start(); try { As
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testExistsCreatingParents,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); AsyncCuratorFramework async=AsyncCuratorFramework.wrap(client); Assert.assertNull(asyn
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testGetSequentialChildren,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { Semaphore semaphore=new Semaphore(0); AsyncCuratorFramework async=AsyncCuratorFramewor
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testNamespaceWithWatcher,"@Test public void  () throws Exception { CuratorFrameworkFactory.Builder builder=CuratorFrameworkFactory.builder(); CuratorFramework client=builder.connectString(server.getConnectString()).namespace(""aisa"").retryPolicy(new RetryOneTime(1)).build(); client"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testQuietDelete,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); try { client.start(); AsyncCuratorFramework async=AsyncCuratorFramework.wrap(client); async.delete().withOpt
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\framework\imps\TestFramework.java,testSyncNew,"@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); try { client.create().forPath(""/head""); Assert.assertNotNull(client.checkExists().forPath(""/"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\models\ModelV2.java,ModelV2,public  (String name int age){ this.name=name; this.age=age; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\models\ModelV3.java,getAge,public int  (){ return age; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\models\ModelV2.java,getAge,public int  (){ return age; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\models\ModelV2.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\models\ModelV3.java,getFirstName,public String  (){ return firstName; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\models\ModelV3.java,getLastName,public String  (){ return lastName; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,TestNewerModel,"public  (String firstName String lastName String address int age BigInteger salary long newField){ this.firstName=Objects.requireNonNull(firstName ""firstName cannot be null""); this.lastName=Objects.requireNonNull(lastName ""lastName cannot be null""); this.address=Objects.requireNonNull(address ""address cannot be null""); this.age=Objects.requireNonNull(age ""age cannot be null""); this.salary=salary; this.newField=newField; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestModel.java,TestModel,"public  (String firstName String lastName String address int age BigInteger salary){ this.firstName=Objects.requireNonNull(firstName ""firstName cannot be null""); this.lastName=Objects.requireNonNull(lastName ""lastName cannot be null""); this.address=Objects.requireNonNull(address ""address cannot be null""); this.age=Objects.requireNonNull(age ""age cannot be null""); this.salary=salary; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestModel.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } TestModel testModel=(TestModel)o; if (age != testModel.age) { return false; } if (!firstName.equals(testModel.firstName)) 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } TestNewerModel that=(TestNewerModel)o; if (age != that.age) { return false; } if (newField != that.newField) { return fals
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestModel.java,getAddress,public String  (){ return address; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestModel.java,getAge,public int  (){ return age; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,equalsOld,public boolean  (TestModel model){ return firstName.equals(model.getFirstName()) && lastName.equals(model.getLastName()) && address.equals(model.getAddress())&& salary.equals(model.getSalary())&& age == model.getAge(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestModel.java,getFirstName,public String  (){ return firstName; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,getAddress,public String  (){ return address; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestModel.java,getLastName,public String  (){ return lastName; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,getAge,public int  (){ return age; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestModel.java,getSalary,public BigInteger  (){ return salary; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,getFirstName,public String  (){ return firstName; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,getLastName,public String  (){ return lastName; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,getNewField,public long  (){ return newField; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,getSalary,public BigInteger  (){ return salary; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestModel.java,hashCode,@Override public int  (){ int result=firstName.hashCode(); result=31 * result + lastName.hashCode(); result=31 * result + address.hashCode(); result=31 * result + age; result=31 * result + salary.hashCode(); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestNewerModel.java,hashCode,@Override public int  (){ int result=firstName.hashCode(); result=31 * result + lastName.hashCode(); result=31 * result + address.hashCode(); result=31 * result + age; result=31 * result + salary.hashCode(); result=31 * result + (int)(newField ^ (newField
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestSimpleModel.java,TestSimpleModel,"public  (String name int age){ this.name=Objects.requireNonNull(name ""name cannot be null""); this.age=Objects.requireNonNull(age ""age cannot be null""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestSimpleModel.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } TestSimpleModel that=(TestSimpleModel)o; if (age != that.age) { return false; } return name.equals(that.name); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestSimpleModel.java,getAge,public int  (){ return age; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestSimpleModel.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestSimpleModel.java,hashCode,@Override public int  (){ int result=name.hashCode(); result=31 * result + age; return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\models\TestSimpleModel.java,toString,"@Override public String  (){ return ""TestSimpleModel{"" + ""name='"" + name + '\''+ ""  age=""+ age+ '}'; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,filter,@Override protected List<Migration>  (MigrationSet set List<byte[]> operationHashesInOrder) throws MigrationException { CountDownLatch localLatch=filterLatch.getAndSet(null); if (localLatch != null) { filterIsSetLatch.countDown(); try { localLatch.await()
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,setup,@BeforeMethod @Override public void  () throws Exception { super.setup(); filterIsSetLatch=new CountDownLatch(1); CuratorFramework rawClient=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,teardown,@AfterMethod @Override public void  () throws Exception { CloseableUtils.closeQuietly(client.unwrap()); executor.shutdownNow(); super.teardown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testBasic,"@Test public void  (){ Migration m1=() -> Arrays.asList(v1opA v1opB); Migration m2=() -> Collections.singletonList(v2op); Migration m3=() -> Collections.singletonList(v3op); MigrationSet migrationSet=MigrationSet.build(""1"" Arrays.asList(m1 m2 m3)); comple"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testChecksumDataError,"@Test public void  (){ CuratorOp op1=client.transactionOp().create().forPath(""/test""); CuratorOp op2=client.transactionOp().create().forPath(""/test/bar"" ""first"".getBytes()); Migration migration=() -> Arrays.asList(op1 op2); MigrationSet migrationSet=Migra"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testChecksumPathError,"@Test public void  (){ CuratorOp op1=client.transactionOp().create().forPath(""/test2""); CuratorOp op2=client.transactionOp().create().forPath(""/test2/bar""); Migration migration=() -> Arrays.asList(op1 op2); MigrationSet migrationSet=MigrationSet.build(""1"""
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testConcurrency1,"@Test public void  () throws Exception { CuratorOp op1=client.transactionOp().create().forPath(""/test""); CuratorOp op2=client.transactionOp().create().forPath(""/test/bar"" ""first"".getBytes()); Migration migration=() -> Arrays.asList(op1 op2); MigrationSet "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testConcurrency2,"@Test public void  () throws Exception { CuratorOp op1=client.transactionOp().create().forPath(""/test""); CuratorOp op2=client.transactionOp().create().forPath(""/test/bar"" ""first"".getBytes()); Migration migration=() -> Arrays.asList(op1 op2); MigrationSet "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testDocExample,"@Test public void  () throws Exception { CuratorOp op1=client.transactionOp().create().forPath(""/parent""); CuratorOp op2=client.transactionOp().create().forPath(""/parent/one""); CuratorOp op3=client.transactionOp().create().forPath(""/parent/two""); CuratorO"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testPartialApplyForBadOps,"@Test public void  () throws Exception { CuratorOp op1=client.transactionOp().create().forPath(""/test"" ""something"".getBytes()); CuratorOp op2=client.transactionOp().create().forPath(""/a/b/c""); Migration m1=() -> Collections.singletonList(op1); Migration m"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testStaged,"@Test public void  (){ Migration m1=() -> Arrays.asList(v1opA v1opB); MigrationSet migrationSet=MigrationSet.build(""1"" Collections.singletonList(m1)); complete(manager.migrate(migrationSet)); ModeledFramework<ModelV1> v1Client=ModeledFramework.wrap(client"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\migrations\TestMigrationManager.java,testTransactionForBadOps,"@Test public void  () throws Exception { CuratorOp op1=client.transactionOp().create().forPath(""/test2"" ""something"".getBytes()); CuratorOp op2=client.transactionOp().create().forPath(""/a/b/c/d""); Migration migration=() -> Arrays.asList(op1 op2); Migration"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestCachedModeledFramework.java,testDownServer,"@Test public void  () throws IOException { Timing timing=new Timing(); TestModel model=new TestModel(""a"" ""b"" ""c"" 1 BigInteger.ONE); CachedModeledFramework<TestModel> client=ModeledFramework.wrap(async modelSpec).cached(); Semaphore semaphore=new Semaphore"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestCachedModeledFramework.java,testPostInitializedFilter,"@Test public void  (){ TestModel model1=new TestModel(""a"" ""b"" ""c"" 1 BigInteger.ONE); TestModel model2=new TestModel(""d"" ""e"" ""e"" 1 BigInteger.ONE); CachedModeledFramework<TestModel> client=ModeledFramework.wrap(async modelSpec).cached(); Semaphore semaphor"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFrameworkBase.java,setup,@BeforeMethod @Override public void  () throws Exception { super.setup(); rawClient=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new RetryOneTime(1)); rawClient.start(); async=AsyncCuratorFramework.wrap(
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFrameworkBase.java,teardown,@AfterMethod @Override public void  () throws Exception { CloseableUtils.closeQuietly(rawClient); super.teardown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestAsyncWrappers.java,testBasic,"@Test public void  (){ try (CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1))){ client.start(); InterProcessMutex lock=new InterProcessMutex(client ""/one/two""); complete(AsyncWrappers.lockAsync(lock) "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestAsyncWrappers.java,testContention,"@Test public void  () throws Exception { try (CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1))){ client.start(); InterProcessMutex lock1=new InterProcessMutex(client ""/one/two""); InterProcessMutex lo"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestZPath.java,testBasic,"@Test public void  (){ ZPath path=ZPath.root.child(""one"").child(""two""); Assert.assertFalse(path.isRoot()); Assert.assertEquals(path ZPath.root.child(""one"").child(""two"")); Assert.assertNotEquals(path ZPath.root.child(""onex"").child(""two"")); Assert.assertEqu"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestZPath.java,testCustomIds,"@Test public void  (){ Assert.assertEquals(ZPath.parseWithIds(""/a/{a}/bee/{bee}/c/{c}"").toString() ""/a/{a}/bee/{bee}/c/{c}""); Assert.assertEquals(ZPath.from(""a"" parameter() ""b"" parameter()).toString() ""/a/{id}/b/{id}""); Assert.assertEquals(ZPath.from(""a"" "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestZPath.java,testParsing,"@Test public void  (){ Assert.assertEquals(ZPath.parse(""/"") ZPath.root); Assert.assertEquals(ZPath.parse(""/one/two/three"") ZPath.root.child(""one"").child(""two"").child(""three"")); Assert.assertEquals(ZPath.parse(""/one/two/three"") ZPath.from(""one"" ""two"" ""thre"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestZPath.java,testPartialResolution,"@Test public void  (){ ZPath path=ZPath.parseWithIds(""/one/{1}/two/{2}""); Assert.assertFalse(path.parent().isResolved()); Assert.assertFalse(path.parent().parent().isResolved()); Assert.assertTrue(path.parent().parent().parent().isResolved()); Assert.asse"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestZPath.java,testResolvedPath,"@Test public void  (){ ZPath path=ZPath.from(""one"" parameter() ""two"" parameter()); Assert.assertEquals(path.resolved(""a"" ""b"") ZPath.from(""one"" ""a"" ""two"" ""b"")); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestZPath.java,testRoot,"@Test public void  (){ Assert.assertEquals(ZPath.root.nodeName() ZKPaths.PATH_SEPARATOR); Assert.assertEquals(ZPath.root ZPathImpl.root); Assert.assertTrue(ZPath.root.isRoot()); Assert.assertEquals(ZPath.root.child(""foo"").parent() ZPath.root); Assert.asse"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestZPath.java,testSchema,"@Test public void  (){ ZPath path=ZPath.from(""one"" parameter() ""two"" parameter()); Assert.assertEquals(path.toSchemaPathPattern().toString() ""/one/.*/two/.*""); path=ZPath.parse(""/one/two/three""); Assert.assertEquals(path.toSchemaPathPattern().toString() """
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestZPath.java,testUnresolvedPath,"@Test(expectedExceptions=IllegalStateException.class) public void  (){ ZPath path=ZPath.from(""one"" parameter() ""two""); path.fullPath(); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFramework.java,testAcl,"@Test public void  () throws NoSuchAlgorithmException { List<ACL> aclList=Collections.singletonList(new ACL(ZooDefs.Perms.WRITE new Id(""digest"" DigestAuthenticationProvider.generateDigest(""test:test"")))); ModelSpec<TestModel> aclModelSpec=ModelSpec.builde"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFramework.java,testBackwardCompatibility,"@Test public void  (){ TestNewerModel rawNewModel=new TestNewerModel(""John"" ""Galt"" ""1 Galt's Gulch"" 42 BigInteger.valueOf(1) 100); ModeledFramework<TestNewerModel> clientForNew=ModeledFramework.wrap(async newModelSpec); complete(clientForNew.set(rawNewMod"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFramework.java,testBadNode,"@Test public void  (){ complete(async.create().forPath(modelSpec.path().fullPath() ""fubar"".getBytes()) (v e) -> { } ); ModeledFramework<TestModel> client=ModeledFramework.builder(async modelSpec).watched().build(); complete(client.read() (model e) -> Asse"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFramework.java,testCrud,"@Test public void  (){ TestModel rawModel=new TestModel(""John"" ""Galt"" ""1 Galt's Gulch"" 42 BigInteger.valueOf(1)); TestModel rawModel2=new TestModel(""Wayne"" ""Rooney"" ""Old Trafford"" 10 BigInteger.valueOf(1)); ModeledFramework<TestModel> client=ModeledFramew"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFramework.java,testGetChildren,"@Test public void  (){ TestModel model=new TestModel(""John"" ""Galt"" ""1 Galt's Gulch"" 42 BigInteger.valueOf(1)); ModeledFramework<TestModel> client=ModeledFramework.builder(async modelSpec).build(); complete(client.child(""one"").set(model)); complete(client."
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFramework.java,testSchema,@Test public void  () throws Exception { Schema schema=modelSpec.schema(); try (CuratorFramework schemaClient=CuratorFrameworkFactory.builder().connectString(server.getConnectString()).retryPolicy(new RetryOneTime(1)).schemaSet(new SchemaSet(Collections.s
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFramework.java,testVersioned,"@Test public void  (){ ModeledFramework<TestModel> client=ModeledFramework.wrap(async modelSpec); TestModel model=new TestModel(""John"" ""Galt"" ""Galt's Gulch"" 21 BigInteger.valueOf(1010101)); complete(client.set(model)); complete(client.set(model)); Version"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\modeled\TestModeledFramework.java,testWatched,@Test public void  () throws InterruptedException { CountDownLatch latch=new CountDownLatch(1); ModeledFramework<TestModel> client=ModeledFramework.builder(async modelSpec).watched().build(); client.checkExists().event().whenComplete((event ex) -> latch.c
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\DownInstanceManager.java,DownInstanceManager, (DownInstancePolicy downInstancePolicy){ this.downInstancePolicy=downInstancePolicy; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\DownInstanceManager.java,add,void  (ServiceInstance<?> instance){ purge(); Status newStatus=new Status(); Status oldStatus=statuses.putIfAbsent(instance newStatus); Status useStatus=(oldStatus != null) ? oldStatus : newStatus; useStatus.errorCount.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\DownInstanceManager.java,apply,@Override public boolean  (ServiceInstance<T> instance){ purge(); Status status=statuses.get(instance); return (status == null) || (status.errorCount.get() < downInstancePolicy.getErrorThreshold()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\DownInstanceManager.java,purge,private void  (){ long localLastPurge=lastPurge.get(); long ticksSinceLastPurge=System.currentTimeMillis() - localLastPurge; if (ticksSinceLastPurge < (downInstancePolicy.getTimeoutMs() / 2)) { return; } if (!lastPurge.compareAndSet(localLastPurge System.currentTimeMillis())) { return; } Iterator<Entry<ServiceInstance<?> Status>> it=statuses.entrySet().iterator(); while (it.hasNext()) { Entry<ServiceInstance<?> Status> entry=it.next(); long elapsedMs=System.currentTimeMillis() - entry.getValue().startMs; if (elapsedMs >= downInstancePolicy.getTimeoutMs()) { it.remove(); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\FilteredInstanceProvider.java,FilteredInstanceProvider, (InstanceProvider<T> instanceProvider List<InstanceFilter<T>> filters){ this.instanceProvider=instanceProvider; predicates=Predicates.and(filters); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\FilteredInstanceProvider.java,getInstances,@Override public List<ServiceInstance<T>>  () throws Exception { Iterable<ServiceInstance<T>> filtered=Iterables.filter(instanceProvider.getInstances() predicates); return ImmutableList.copyOf(filtered); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,setup,@BeforeMethod @Override public void  () throws Exception { super.setup(); CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(timing.forSleepingABit().milliseconds())); client.start(); this.client=AsyncCura
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,teardown,@AfterMethod @Override public void  () throws Exception { CloseableUtils.closeQuietly(client.unwrap()); super.teardown(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,testCreateTransactionWithMode,"@Test public void  () throws Exception { complete(AsyncWrappers.asyncEnsureContainers(client ""/test"")); CuratorOp op1=client.transactionOp().create().withMode(PERSISTENT_SEQUENTIAL).forPath(""/test/node-""); CuratorOp op2=client.transactionOp().create().wit"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,testCrud,"@Test public void  (){ AsyncStage<String> createStage=client.create().forPath(""/test"" ""one"".getBytes()); complete(createStage (path e) -> Assert.assertEquals(path ""/test"")); AsyncStage<byte[]> getStage=client.getData().forPath(""/test""); complete(getStage "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,testException,"@Test public void  (){ CountDownLatch latch=new CountDownLatch(1); client.getData().forPath(""/woop"").exceptionally(e -> { Assert.assertTrue(e instanceof KeeperException); Assert.assertEquals(((KeeperException)e).code() KeeperException.Code.NONODE); latch."
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,testGetDataWithStat,"@Test public void  (){ complete(client.create().forPath(""/test"" ""hey"".getBytes())); Stat stat=new Stat(); complete(client.getData().storingStatIn(stat).forPath(""/test"")); Assert.assertEquals(stat.getDataLength() ""hey"".length()); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,testResultWrapper,"@Test public void  () throws Exception { CompletionStage<AsyncResult<String>> resultStage=AsyncResult.of(client.create().forPath(""/first"")); complete(resultStage (v e) -> { Assert.assertNull(e); Assert.assertEquals(v.getRawValue() ""/first""); Assert.assert"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,testWatching,"@Test public void  (){ CountDownLatch latch=new CountDownLatch(1); client.watched().checkExists().forPath(""/test"").event().whenComplete((event exception) -> { Assert.assertNull(exception); Assert.assertEquals(event.getType() Watcher.Event.EventType.NodeCr"
C:\Users\User\Desktop\Thesis\curator\curator-x-async\src\test\java\org\apache\curator\x\async\TestBasicOperations.java,testWatchingWithServerLoss,"@Test public void  () throws Exception { AsyncStage<Stat> stage=client.watched().checkExists().forPath(""/test""); stage.thenRun(() -> { try { server.stop(); } catch ( IOException e) { } } ); CountDownLatch latch=new CountDownLatch(1); complete(stage.event("
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\Latch.java,await,synchronized void  () throws InterruptedException { while (!laden) { wait(); } laden=false; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\Latch.java,set,synchronized void  (){ laden=true; notifyAll(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\JsonInstanceSerializer.java,JsonInstanceSerializer,@VisibleForTesting  (Class<T> payloadClass boolean compatibleSerializationMode boolean failOnUnknownProperties){ this.payloadClass=payloadClass; this.compatibleSerializationMode=compatibleSerializationMode; mapper=new ObjectMapper(); mapper.configure(Dese
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\JsonInstanceSerializer.java,deserialize,"@SuppressWarnings({""unchecked""}) @Override public ServiceInstance<T>  (byte[] bytes) throws Exception { ServiceInstance rawServiceInstance=mapper.readValue(bytes type); payloadClass.cast(rawServiceInstance.getPayload()); return (ServiceInstance<T>)rawServ"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\JsonInstanceSerializer.java,serialize,@Override public byte[]  (ServiceInstance<T> instance) throws Exception { if (compatibleSerializationMode) { OldServiceInstance<T> compatible=new OldServiceInstance<T>(instance.getName() instance.getId() instance.getAddress() instance.getPort() instance.g
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,OldServiceInstance," (){ this("""" """" null null null null 0 ServiceType.DYNAMIC null); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,equals,"@SuppressWarnings(""RedundantIfStatement"") @Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } OldServiceInstance that=(OldServiceInstance)o; if (registrationTimeUTC != that.r"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getAddress,public String  (){ return address; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getPayload,@JsonTypeInfo(use=Id.CLASS defaultImpl=Object.class) public T  (){ return payload; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getPort,public Integer  (){ return port; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getRegistrationTimeUTC,public long  (){ return registrationTimeUTC; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getServiceType,public ServiceType  (){ return serviceType; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getSslPort,public Integer  (){ return sslPort; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,getUriSpec,public UriSpec  (){ return uriSpec; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,hashCode,@Override public int  (){ int result=name != null ? name.hashCode() : 0; result=31 * result + (id != null ? id.hashCode() : 0); result=31 * result + (address != null ? address.hashCode() : 0); result=31 * result + (port != null ? port.hashCode() : 0); res
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\OldServiceInstance.java,toString,"@Override public String  (){ return ""ServiceInstance{"" + ""name='"" + name + '\''+ ""  id='""+ id+ '\''+ ""  address='""+ address+ '\''+ ""  port=""+ port+ ""  sslPort=""+ sslPort+ ""  payload=""+ payload+ ""  registrationTimeUTC=""+ registrationTimeUTC+ ""  serviceType"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheBuilderImpl.java,ServiceCacheBuilderImpl, (ServiceDiscoveryImpl<T> discovery){ this.discovery=discovery; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheBuilderImpl.java,build,@Override public ServiceCache<T>  (){ if (executorService != null) { return new ServiceCacheImpl<T>(discovery name executorService); } else { return new ServiceCacheImpl<T>(discovery name threadFactory); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheBuilderImpl.java,executorService,@Override public ServiceCacheBuilder<T>  (CloseableExecutorService executorService){ this.executorService=executorService; this.threadFactory=null; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheBuilderImpl.java,name,@Override public ServiceCacheBuilder<T>  (String name){ this.name=name; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheBuilderImpl.java,threadFactory,@Override public ServiceCacheBuilder<T>  (ThreadFactory threadFactory){ this.threadFactory=threadFactory; this.executorService=null; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderImpl.java,ServiceProviderImpl,public  (ServiceDiscoveryImpl<T> discovery String serviceName ProviderStrategy<T> providerStrategy ThreadFactory threadFactory List<InstanceFilter<T>> filters DownInstancePolicy downInstancePolicy){ this.discovery=discovery; this.providerStrategy=providerStrategy; downInstanceManager=new DownInstanceManager<T>(downInstancePolicy); cache=discovery.serviceCacheBuilder().name(serviceName).threadFactory(threadFactory).build(); ArrayList<InstanceFilter<T>> localFilters=Lists.newArrayList(filters); localFilters.add(downInstanceManager); localFilters.add(new InstanceFilter<T>(){ @Override public boolean apply( ServiceInstance<T> instance){ return instance.isEnabled(); } } ); instanceProvider=new FilteredInstanceProvider<T>(cache localFilters); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderImpl.java,apply,@Override public boolean  (ServiceInstance<T> instance){ return instance.isEnabled(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderImpl.java,close,@Override public void  () throws IOException { discovery.providerClosed(this); cache.close(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderImpl.java,getAllInstances,@Override public Collection<ServiceInstance<T>>  () throws Exception { return instanceProvider.getInstances(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderImpl.java,getInstance,@Override public ServiceInstance<T>  () throws Exception { return providerStrategy.getInstance(instanceProvider); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderImpl.java,noteError,@Override public void  (ServiceInstance<T> instance){ downInstanceManager.add(instance); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderImpl.java,start,@Override public void  () throws Exception { cache.start(); discovery.providerOpened(this); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,ServiceCacheImpl," (ServiceDiscoveryImpl<T> discovery String name CloseableExecutorService executorService){ Preconditions.checkNotNull(discovery ""discovery cannot be null""); Preconditions.checkNotNull(name ""name cannot be null""); Preconditions.checkNotNull(executorService ""executorService cannot be null""); this.discovery=discovery; cache=new PathChildrenCache(discovery.getClient() discovery.pathForName(name) true false executorService); cache.getListenable().addListener(this); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,addInstance,private void  (ChildData childData boolean onlyIfAbsent) throws Exception { String instanceId=instanceIdFromData(childData); ServiceInstance<T> serviceInstance=discovery.getSerializer().deserialize(childData.getData()); if (onlyIfAbsent) { instances.putIfAbsent(instanceId serviceInstance); } else { instances.put(instanceId serviceInstance); } cache.clearDataBytes(childData.getPath() childData.getStat().getVersion()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,addListener,@Override public void  (ServiceCacheListener listener Executor executor){ listenerContainer.addListener(listener executor); discovery.getClient().getConnectionStateListenable().addListener(listener executor); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,apply,@Override public Void  (ServiceCacheListener listener){ listener.cacheChanged(); return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,childEvent,@Override public void  (CuratorFramework client PathChildrenCacheEvent event) throws Exception { boolean notifyListeners=false; switch (event.getType()) { case CHILD_ADDED: case CHILD_UPDATED: { addInstance(event.getData() false); notifyListeners=true; br
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,close,"@Override public void  () throws IOException { Preconditions.checkState(state.compareAndSet(State.STARTED State.STOPPED) ""Already closed or has not been started""); listenerContainer.forEach(new Function<ServiceCacheListener Void>(){ @Override public Void "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,convertThreadFactory,"private static CloseableExecutorService  (ThreadFactory threadFactory){ Preconditions.checkNotNull(threadFactory ""threadFactory cannot be null""); return new CloseableExecutorService(Executors.newSingleThreadExecutor(threadFactory)); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,getInstances,@Override public List<ServiceInstance<T>>  (){ return Lists.newArrayList(instances.values()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,instanceIdFromData,private String  (ChildData childData){ return ZKPaths.getNodeFromPath(childData.getPath()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,removeListener,@Override public void  (ServiceCacheListener listener){ listenerContainer.removeListener(listener); discovery.getClient().getConnectionStateListenable().removeListener(listener); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceCacheImpl.java,start,"@Override public void  () throws Exception { Preconditions.checkState(state.compareAndSet(State.LATENT State.STARTED) ""Cannot be started more than once""); cache.start(true); for ( ChildData childData : cache.getCurrentData()) { addInstance(childData true)"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,Entry,private  (ServiceInstance<T> service){ this.service=service; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,ServiceDiscoveryImpl,"public  (CuratorFramework client String basePath InstanceSerializer<T> serializer ServiceInstance<T> thisInstance boolean watchInstances){ this.watchInstances=watchInstances; this.client=Preconditions.checkNotNull(client ""client cannot be null""); this.basePath=Preconditions.checkNotNull(basePath ""basePath cannot be null""); this.serializer=Preconditions.checkNotNull(serializer ""serializer cannot be null""); if (thisInstance != null) { Entry<T> entry=new Entry<T>(thisInstance); entry.cache=makeNodeCache(thisInstance); services.put(thisInstance.getId() entry); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,cacheClosed,void  (ServiceCache<T> cache){ caches.remove(cache); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,cacheOpened,void  (ServiceCache<T> cache){ caches.add(cache); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,close,@Override public void  () throws IOException { ExceptionAccumulator accumulator=new ExceptionAccumulator(); for ( ServiceProvider<T> provider : Lists.newArrayList(providers)) { CloseableUtils.closeQuietly(provider); } for ( Entry<T> entry : services.value
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,debugServicesQty,@VisibleForTesting int  (){ return services.size(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,getChildrenWatched,private List<String>  (String path Watcher watcher boolean recurse) throws Exception { List<String> instanceIds; try { instanceIds=client.getChildren().usingWatcher(watcher).forPath(path); } catch ( KeeperException.NoNodeException e) { if (recurse) { try { client.create().creatingParentContainersIfNeeded().forPath(path); } catch ( KeeperException.NodeExistsException ignore) { } instanceIds=getChildrenWatched(path watcher false); } else { throw e; } } return instanceIds; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,getClient,CuratorFramework  (){ return client; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,getRegisteredService,@VisibleForTesting ServiceInstance<T>  (String id){ Entry<T> entry=services.get(id); return (entry != null) ? entry.service : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,getSerializer,InstanceSerializer<T>  (){ return serializer; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,internalRegisterService,@VisibleForTesting protected void  (ServiceInstance<T> service) throws Exception { byte[] bytes=serializer.serialize(service); String path=pathForInstance(service.getName() service.getId()); final int MAX_TRIES=2; boolean isDone=false; for (int i=0; !isDo
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,internalUnregisterService,private void  (final Entry<T> entry) throws Exception { if (entry != null) { synchronized (entry) { if (entry.cache != null) { CloseableUtils.closeQuietly(entry.cache); entry.cache=null; } String path=pathForInstance(entry.service.getName() entry.service.getId()); try { client.delete().guaranteed().forPath(path); } catch ( KeeperException.NoNodeException ignore) { } } } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,makeNodeCache,"private NodeCache  (final ServiceInstance<T> instance){ if (!watchInstances) { return null; } final NodeCache nodeCache=new NodeCache(client pathForInstance(instance.getName() instance.getId())); try { nodeCache.start(true); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); return null; } catch ( Exception e) { log.error(""Could not start node cache for: "" + instance e); } NodeCacheListener listener=new NodeCacheListener(){ @Override public void nodeChanged() throws Exception { if (nodeCache.getCurrentData() != null) { ServiceInstance<T> newInstance=serializer.deserialize(nodeCache.getCurrentData().getData()); Entry<T> entry=services.get(newInstance.getId()); if (entry != null) { synchronized (entry) { entry.service=newInstance; } } } else { log.warn(""Instance data has been deleted for: "" + instance); } } } ; nodeCache.getListenable().addListener(listener); return nodeCache; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,nodeChanged,@Override public void  () throws Exception { if (nodeCache.getCurrentData() != null) { ServiceInstance<T> newInstance=serializer.deserialize(nodeCache.getCurrentData().getData()); Entry<T> entry=services.get(newInstance.getId()); if (entry != null) { sync
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,pathForInstance,@VisibleForTesting String  (String name String id){ return ZKPaths.makePath(pathForName(name) id); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,pathForName,String  (String name){ return ZKPaths.makePath(basePath name); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,providerClosed,void  (ServiceProvider<T> cache){ providers.remove(cache); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,providerOpened,void  (ServiceProvider<T> provider){ providers.add(provider); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,queryForInstance,@Override public ServiceInstance<T>  (String name String id) throws Exception { String path=pathForInstance(name id); try { byte[] bytes=client.getData().forPath(path); return serializer.deserialize(bytes); } catch ( KeeperException.NoNodeException ignore
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,queryForInstances,List<ServiceInstance<T>>  (String name Watcher watcher) throws Exception { ImmutableList.Builder<ServiceInstance<T>> builder=ImmutableList.builder(); String path=pathForName(name); List<String> instanceIds; if (watcher != null) { instanceIds=getChildrenWatched(path watcher true); } else { try { instanceIds=client.getChildren().forPath(path); } catch ( KeeperException.NoNodeException e) { instanceIds=Lists.newArrayList(); } } for ( String id : instanceIds) { ServiceInstance<T> instance=queryForInstance(name id); if (instance != null) { builder.add(instance); } } return builder.build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,queryForNames,@Override public Collection<String>  () throws Exception { List<String> names=client.getChildren().forPath(basePath); return ImmutableList.copyOf(names); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,reRegisterServices,private void  () throws Exception { for ( final Entry<T> entry : services.values()) { synchronized (entry) { internalRegisterService(entry.service); } } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,registerService,@Override public void  (ServiceInstance<T> service) throws Exception { Entry<T> newEntry=new Entry<T>(service); Entry<T> oldEntry=services.putIfAbsent(service.getId() newEntry); Entry<T> useEntry=(oldEntry != null) ? oldEntry : newEntry; synchronized (use
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,serviceCacheBuilder,"@Override public ServiceCacheBuilder<T>  (){ return new ServiceCacheBuilderImpl<T>(this).threadFactory(ThreadUtils.newThreadFactory(""ServiceCache"")); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,serviceProviderBuilder,"@Override public ServiceProviderBuilder<T>  (){ return new ServiceProviderBuilderImpl<T>(this).providerStrategy(new RoundRobinStrategy<T>()).threadFactory(ThreadUtils.newThreadFactory(""ServiceProvider"")); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,start,"@Override public void  () throws Exception { try { reRegisterServices(); } catch ( KeeperException e) { log.error(""Could not register instances - will try again later"" e); } client.getConnectionStateListenable().addListener(connectionStateListener); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,stateChanged,"@Override public void  (CuratorFramework client ConnectionState newState){ if ((newState == ConnectionState.RECONNECTED) || (newState == ConnectionState.CONNECTED)) { try { log.debug(""Re-registering due to reconnection""); reRegisterServices(); } catch ( I"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,unregisterService,@Override public void  (ServiceInstance<T> service) throws Exception { Entry<T> entry=services.remove(service.getId()); internalUnregisterService(entry); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceDiscoveryImpl.java,updateService,"@Override public void  (final ServiceInstance<T> service) throws Exception { Entry<T> entry=services.get(service.getId()); if (entry == null) { throw new Exception(""Service not registered: "" + service); } synchronized (entry) { entry.service=service; byte"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderBuilderImpl.java,ServiceProviderBuilderImpl, (ServiceDiscoveryImpl<T> discovery){ this.discovery=discovery; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderBuilderImpl.java,additionalFilter,@Override public ServiceProviderBuilder<T>  (InstanceFilter<T> filter){ filters.add(filter); return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderBuilderImpl.java,build,public ServiceProvider<T>  (){ return new ServiceProviderImpl<T>(discovery serviceName providerStrategy threadFactory filters downInstancePolicy); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderBuilderImpl.java,downInstancePolicy,@Override public ServiceProviderBuilder<T>  (DownInstancePolicy downInstancePolicy){ this.downInstancePolicy=downInstancePolicy; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderBuilderImpl.java,providerStrategy,@Override public ServiceProviderBuilder<T>  (ProviderStrategy<T> providerStrategy){ this.providerStrategy=providerStrategy; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderBuilderImpl.java,serviceName,@Override public ServiceProviderBuilder<T>  (String serviceName){ this.serviceName=serviceName; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\details\ServiceProviderBuilderImpl.java,threadFactory,@Override public ServiceProviderBuilder<T>  (ThreadFactory threadFactory){ this.threadFactory=threadFactory; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\DownInstancePolicy.java,DownInstancePolicy,public  (long timeout TimeUnit unit int errorThreshold){ this.timeoutMs=unit.toMillis(timeout); this.errorThreshold=errorThreshold; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\DownInstancePolicy.java,getErrorThreshold,public int  (){ return errorThreshold; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\DownInstancePolicy.java,getTimeoutMs,public long  (){ return timeoutMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,ServiceInstance," (){ this("""" """" null null null null 0 ServiceType.DYNAMIC null true); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,buildUriSpec,"public String  (Map<String Object> variables){ return (uriSpec != null) ? uriSpec.build(this variables) : """"; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,builder,public static <T>ServiceInstanceBuilder<T>  () throws Exception { String address=null; Collection<InetAddress> ips=ServiceInstanceBuilder.getAllLocalIPs(); if (ips.size() > 0) { address=ips.iterator().next().getHostAddress(); } String id=UUID.randomUUID().toString(); return new ServiceInstanceBuilder<T>().address(address).id(id).registrationTimeUTC(System.currentTimeMillis()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,equals,"@SuppressWarnings(""RedundantIfStatement"") @Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ServiceInstance that=(ServiceInstance)o; if (registrationTimeUTC != that.registr"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getAddress,public String  (){ return address; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getPayload,@JsonTypeInfo(use=Id.CLASS defaultImpl=Object.class) public T  (){ return payload; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getPort,public Integer  (){ return port; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getRegistrationTimeUTC,public long  (){ return registrationTimeUTC; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getServiceType,public ServiceType  (){ return serviceType; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getSslPort,public Integer  (){ return sslPort; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,getUriSpec,public UriSpec  (){ return uriSpec; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,hashCode,@Override public int  (){ int result=name != null ? name.hashCode() : 0; result=31 * result + (id != null ? id.hashCode() : 0); result=31 * result + (address != null ? address.hashCode() : 0); result=31 * result + (port != null ? port.hashCode() : 0); res
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,isEnabled,public boolean  (){ return enabled; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstance.java,toString,"@Override public String  (){ return ""ServiceInstance{"" + ""name='"" + name + '\''+ ""  id='""+ id+ '\''+ ""  address='""+ address+ '\''+ ""  port=""+ port+ ""  sslPort=""+ sslPort+ ""  payload=""+ payload+ ""  registrationTimeUTC=""+ registrationTimeUTC+ ""  serviceType"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceDiscoveryBuilder.java,ServiceDiscoveryBuilder, (Class<T> payloadClass){ this.payloadClass=payloadClass; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceDiscoveryBuilder.java,basePath,public ServiceDiscoveryBuilder<T>  (String basePath){ this.basePath=basePath; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceDiscoveryBuilder.java,build,public ServiceDiscovery<T>  (){ if (serializer == null) { serializer(new JsonInstanceSerializer<T>(payloadClass)); } return new ServiceDiscoveryImpl<T>(client basePath serializer thisInstance watchInstances); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceDiscoveryBuilder.java,builder,public static <T>ServiceDiscoveryBuilder<T>  (Class<T> payloadClass){ return new ServiceDiscoveryBuilder<T>(payloadClass); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceDiscoveryBuilder.java,client,public ServiceDiscoveryBuilder<T>  (CuratorFramework client){ this.client=client; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceDiscoveryBuilder.java,serializer,public ServiceDiscoveryBuilder<T>  (InstanceSerializer<T> serializer){ this.serializer=serializer; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceDiscoveryBuilder.java,thisInstance,public ServiceDiscoveryBuilder<T>  (ServiceInstance<T> thisInstance){ this.thisInstance=thisInstance; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceDiscoveryBuilder.java,watchInstances,public ServiceDiscoveryBuilder<T>  (boolean watchInstances){ this.watchInstances=watchInstances; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,address,public ServiceInstanceBuilder<T>  (String address){ this.address=address; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,build,public ServiceInstance<T>  (){ return new ServiceInstance<T>(name id address port sslPort payload registrationTimeUTC serviceType uriSpec enabled); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,enabled,public ServiceInstanceBuilder<T>  (boolean enabled){ this.enabled=enabled; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,getAllLocalIPs,public static Collection<InetAddress>  () throws SocketException { List<InetAddress> listAdr=Lists.newArrayList(); Enumeration<NetworkInterface> nifs=NetworkInterface.getNetworkInterfaces(); if (nifs == null) return listAdr; while (nifs.hasMoreElements()) { NetworkInterface nif=nifs.nextElement(); Enumeration<InetAddress> adrs=nif.getInetAddresses(); while (adrs.hasMoreElements()) { InetAddress adr=adrs.nextElement(); if (localIpFilter.get().use(nif adr)) { listAdr.add(adr); } } } return listAdr; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,getLocalIpFilter,public static LocalIpFilter  (){ return localIpFilter.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,id,public ServiceInstanceBuilder<T>  (String id){ this.id=id; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,name,public ServiceInstanceBuilder<T>  (String name){ this.name=name; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,payload,public ServiceInstanceBuilder<T>  (T payload){ this.payload=payload; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,port,public ServiceInstanceBuilder<T>  (int port){ this.port=port; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,registrationTimeUTC,public ServiceInstanceBuilder<T>  (long registrationTimeUTC){ this.registrationTimeUTC=registrationTimeUTC; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,serviceType,public ServiceInstanceBuilder<T>  (ServiceType serviceType){ this.serviceType=serviceType; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,setLocalIpFilter,public static void  (LocalIpFilter newLocalIpFilter){ localIpFilter.set(newLocalIpFilter); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,sslPort,public ServiceInstanceBuilder<T>  (int port){ this.sslPort=port; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,uriSpec,public ServiceInstanceBuilder<T>  (UriSpec uriSpec){ this.uriSpec=uriSpec; return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceInstanceBuilder.java,use,@Override public boolean  (NetworkInterface nif InetAddress adr) throws SocketException { return (adr != null) && !adr.isLoopbackAddress() && (nif.isPointToPoint() || !adr.isLinkLocalAddress()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\strategies\RandomStrategy.java,getInstance,@Override public ServiceInstance<T>  (InstanceProvider<T> instanceProvider) throws Exception { List<ServiceInstance<T>> instances=instanceProvider.getInstances(); if (instances.size() == 0) { return null; } int thisIndex=random.nextInt(instances.size()); 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\ServiceType.java,isDynamic,public boolean  (){ return this == DYNAMIC || this == DYNAMIC_SEQUENTIAL; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\strategies\RoundRobinStrategy.java,getInstance,@Override public ServiceInstance<T>  (InstanceProvider<T> instanceProvider) throws Exception { List<ServiceInstance<T>> instances=instanceProvider.getInstances(); if (instances.size() == 0) { return null; } int thisIndex=Math.abs(index.getAndIncrement());
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\strategies\StickyStrategy.java,StickyStrategy,public  (ProviderStrategy<T> masterStrategy){ this.masterStrategy=masterStrategy; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\strategies\StickyStrategy.java,getInstance,@Override public ServiceInstance<T>  (InstanceProvider<T> instanceProvider) throws Exception { final List<ServiceInstance<T>> instances=instanceProvider.getInstances(); { ServiceInstance<T> localOurInstance=ourInstance.get(); if (!instances.contains(local
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\strategies\StickyStrategy.java,getInstanceNumber,public int  (){ return instanceNumber.get(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\strategies\StickyStrategy.java,getInstances,@Override public List<ServiceInstance<T>>  () throws Exception { return instances; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestDownInstanceManager.java,testBasic,"@Test public void  () throws Exception { ServiceInstance<Void> instance1=ServiceInstance.<Void>builder().name(""hey"").id(""1"").build(); ServiceInstance<Void> instance2=ServiceInstance.<Void>builder().name(""hey"").id(""2"").build(); DownInstanceManager<Void> do"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestDownInstanceManager.java,testExpiration,"@Test public void  () throws Exception { ServiceInstance<Void> instance1=ServiceInstance.<Void>builder().name(""hey"").id(""1"").build(); ServiceInstance<Void> instance2=ServiceInstance.<Void>builder().name(""hey"").id(""2"").build(); DownInstanceManager<Void> do"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestDownInstanceManager.java,testThreshold,"@Test public void  () throws Exception { ServiceInstance<Void> instance1=ServiceInstance.<Void>builder().name(""hey"").id(""1"").build(); ServiceInstance<Void> instance2=ServiceInstance.<Void>builder().name(""hey"").id(""2"").build(); DownInstanceManager<Void> do"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,Part,"public  (){ value=""""; variable=false; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,UriSpec,"public  (String rawSpec){ boolean isInsideVariable=false; StringTokenizer tokenizer=new StringTokenizer(rawSpec ""{}"" true); while (tokenizer.hasMoreTokens()) { String token=tokenizer.nextToken(); if (token.equals(""{"")) { Preconditions.checkState(!isInsideVariable ""{ is not allowed inside of a variable specification""); isInsideVariable=true; } else if (token.equals(""}"")) { Preconditions.checkState(isInsideVariable ""} must be preceded by {""); isInsideVariable=false; } else { if (isInsideVariable) { token=token.trim(); } add(new Part(token isInsideVariable)); } } Preconditions.checkState(!isInsideVariable ""Final variable not closed - expected }""); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,add,public void  (Part part){ parts.add(part); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,build,"public String  (ServiceInstance<?> serviceInstance Map<String Object> variables){ Map<String Object> localVariables=Maps.newHashMap(); localVariables.put(FIELD_OPEN_BRACE ""{""); localVariables.put(FIELD_CLOSE_BRACE ""}""); localVariables.put(FIELD_SCHEME ""http""); if (serviceInstance != null) { localVariables.put(FIELD_NAME nullCheck(serviceInstance.getName())); localVariables.put(FIELD_ID nullCheck(serviceInstance.getId())); localVariables.put(FIELD_ADDRESS nullCheck(serviceInstance.getAddress())); localVariables.put(FIELD_PORT nullCheck(serviceInstance.getPort())); localVariables.put(FIELD_SSL_PORT nullCheck(serviceInstance.getSslPort())); localVariables.put(FIELD_REGISTRATION_TIME_UTC nullCheck(serviceInstance.getRegistrationTimeUTC())); localVariables.put(FIELD_SERVICE_TYPE (serviceInstance.getServiceType() != null) ? serviceInstance.getServiceType().name().toLowerCase() : """"); if (serviceInstance.getSslPort() != null) { localVariables.put(FIELD_SCHEME ""https""); } } localVariables.putAll(variables); StringBuilder str=new StringBuilder(); for ( Part p : parts) { if (p.isVariable()) { Object value=localVariables.get(p.getValue()); if (value == null) { log.debug(""Variable not found: "" + p.getValue()); } else { str.append(value); } } else { str.append(p.getValue()); } } return str.toString(); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,equals,"@SuppressWarnings(""RedundantIfStatement"") @Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } UriSpec spec=(UriSpec)o; if (!parts.equals(spec.parts)) { return false; } return"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,getParts,public List<Part>  (){ return ImmutableList.copyOf(parts); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,getValue,public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,hashCode,@Override public int  (){ return parts.hashCode(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,isVariable,public boolean  (){ return variable; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,iterator,@Override public Iterator<Part>  (){ return Iterators.unmodifiableIterator(parts.iterator()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,nullCheck,"private Object  (Object o){ return (o != null) ? o : """"; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\main\java\org\apache\curator\x\discovery\UriSpec.java,remove,public void  (Part part){ parts.remove(part); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,TestNewServiceInstance," (){ this("""" """" null null null null 0 ServiceType.DYNAMIC null true null null null null); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getAddress,public String  (){ return address; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getNew1,public String  (){ return new1; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getNew2,public Long  (){ return new2; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getNew3,public Date  (){ return new3; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getNew4,public URI  (){ return new4; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getPayload,@JsonTypeInfo(use=Id.CLASS defaultImpl=Object.class) public T  (){ return payload; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getPort,public Integer  (){ return port; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getRegistrationTimeUTC,public long  (){ return registrationTimeUTC; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getServiceType,public ServiceType  (){ return serviceType; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getSslPort,public Integer  (){ return sslPort; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,getUriSpec,public UriSpec  (){ return uriSpec; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestNewServiceInstance.java,isEnabled,public boolean  (){ return enabled; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscoveryBuilder.java,deserialize,@Override public ServiceInstance<Object>  (byte[] bytes){ return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscoveryBuilder.java,serialize,@Override public byte[]  (ServiceInstance<Object> instance){ return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscoveryBuilder.java,testDefaultSerializer,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); ServiceDiscoveryBuilder<Object> builder=ServiceDiscoveryBuilder.builder(Object.class).client(client); Servic
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscoveryBuilder.java,testSetSerializer,@Test public void  () throws Exception { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); ServiceDiscoveryBuilder<Object> builder=ServiceDiscoveryBuilder.builder(Object.class).client(client); builde
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestWatchedInstances.java,testWatchedInstances,@Test public void  () throws Exception { Timing timing=new Timing(); List<Closeable> closeables=Lists.newArrayList(); try { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); closeables.add(client); c
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestJsonInstanceSerializerCompatibility.java,testBackwardCompatibility,@Test public void  () throws Exception { JsonInstanceSerializer<TestJsonInstanceSerializer.Payload> serializer=new JsonInstanceSerializer<TestJsonInstanceSerializer.Payload>(TestJsonInstanceSerializer.Payload.class true true); ServiceInstance<TestJsonInst
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestJsonInstanceSerializerCompatibility.java,testCompatibilityMode,@Test public void  () throws Exception { JsonInstanceSerializer<TestJsonInstanceSerializer.Payload> serializer=new JsonInstanceSerializer<TestJsonInstanceSerializer.Payload>(TestJsonInstanceSerializer.Payload.class true true); ServiceInstance<TestJsonInst
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestJsonInstanceSerializerCompatibility.java,testForwardCompatibility,"@Test public void  () throws Exception { OldServiceInstance<TestJsonInstanceSerializer.Payload> oldInstance=new OldServiceInstance<TestJsonInstanceSerializer.Payload>(""name"" ""id"" ""address"" 10 20 new TestJsonInstanceSerializer.Payload(""test"") 0 ServiceType"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestJsonInstanceSerializerCompatibility.java,testFutureChanges,"@Test public void  () throws Exception { TestNewServiceInstance<String> newInstance=new TestNewServiceInstance<String>(""name"" ""id"" ""address"" 10 20 ""hey"" 0 ServiceType.DYNAMIC new UriSpec(""{a}/b/{c}"") false ""what"" 10101L new Date() new URI(""http://hey"")); "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceProvider.java,testBasic,@Test public void  () throws Exception { List<Closeable> closeables=Lists.newArrayList(); try { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); closeables.add(client); client.start(); ServiceInstan
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceProvider.java,testDisabledInstance,@Test public void  () throws Exception { List<Closeable> closeables=Lists.newArrayList(); try { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); closeables.add(client); client.start(); ServiceInstan
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,compare,@Override public int  (ServiceInstance<Void> o1 ServiceInstance<Void> o2){ return o1.getId().compareTo(o2.getId()); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,internalRegisterService,@Override protected void  (ServiceInstance<String> service) throws Exception { super.internalRegisterService(service); semaphore.release(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,serialize,"@Override public byte[]  (ServiceInstance<String> instance) throws Exception { if (first) { System.out.println(""Serializer first registration.""); first=false; } else { System.out.println(""Waiting for reconnect to finish.""); restartLatch.await(); } return "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,testBasic,@Test public void  () throws Exception { CuratorFramework client=null; ServiceDiscovery<String> discovery=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); ServiceInstance<String> instance
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,testCleaning,@Test public void  () throws Exception { CuratorFramework client=null; ServiceDiscovery<String> discovery=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); client.start(); ServiceInstance<String> instance
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,testCrashedInstance,@Test public void  () throws Exception { CuratorFramework client=null; ServiceDiscovery<String> discovery=null; try { Timing timing=new Timing(); client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new R
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,testCrashedServer,@Test public void  () throws Exception { CuratorFramework client=null; ServiceDiscovery<String> discovery=null; try { Timing timing=new Timing(); client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new R
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,testCrashedServerMultiInstances,@Test public void  () throws Exception { CuratorFramework client=null; ServiceDiscovery<String> discovery=null; try { Timing timing=new Timing(); client=CuratorFrameworkFactory.newClient(server.getConnectString() timing.session() timing.connection() new R
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,testMultipleInstances,"@Test public void  () throws Exception { final String SERVICE_ONE=""one""; final String SERVICE_TWO=""two""; CuratorFramework client=null; ServiceDiscovery<Void> discovery=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() new Retr"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,testNoServerOnStart,@Test public void  () throws Exception { Timing timing=new Timing(); server.stop(); CuratorFramework client=null; ServiceDiscovery<String> discovery=null; try { client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); clien
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\details\TestServiceDiscovery.java,testUnregisterService,"@Test public void  () throws Exception { final String name=""name""; final CountDownLatch restartLatch=new CountDownLatch(1); InstanceSerializer<String> slowSerializer=new JsonInstanceSerializer<String>(String.class){ private boolean first=true; @Override p"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\ServiceCacheLeakTester.java,doWork,"private static void  (CuratorFramework curatorFramework) throws Exception { ServiceInstance<Void> thisInstance=ServiceInstance.<Void>builder().name(""myservice"").build(); final ServiceDiscovery<Void> serviceDiscovery=ServiceDiscoveryBuilder.builder(Void.class).client(curatorFramework.usingNamespace(""dev"")).basePath(""/instances"").thisInstance(thisInstance).build(); serviceDiscovery.start(); for (int i=0; i < 100000; i++) { final ServiceProvider<Void> s=serviceProvider(serviceDiscovery ""myservice""); s.start(); try { s.getInstance().buildUriSpec(); } finally { s.close(); } } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\ServiceCacheLeakTester.java,main,"public static void  (String[] args) throws Exception { TestingServer testingServer=new TestingServer(); final CuratorFramework curatorFramework=CuratorFrameworkFactory.newClient(testingServer.getConnectString() new RetryOneTime(1)); try { curatorFramework.start(); doWork(curatorFramework); System.gc(); System.out.println(""Done - get dump""); Thread.currentThread().join(); } finally { CloseableUtils.closeQuietly(curatorFramework); CloseableUtils.closeQuietly(testingServer); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\ServiceCacheLeakTester.java,serviceProvider,private static ServiceProvider<Void>  (ServiceDiscovery<Void> serviceDiscovery String name) throws Exception { return serviceDiscovery.serviceProviderBuilder().serviceName(name).providerStrategy(new RandomStrategy<Void>()).build(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,Payload,public  (String val){ this.val=val; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,equals,@Override public boolean  (Object other){ if (other == null || !(other instanceof Payload)) return false; String otherVal=((Payload)other).getVal(); if (val == null) return val == otherVal; return val.equals(otherVal); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,getVal,public String  (){ return val; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,setVal,public void  (String val){ this.val=val; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,testBasic,"@Test public void  () throws Exception { JsonInstanceSerializer<String> serializer=new JsonInstanceSerializer<String>(String.class); ServiceInstance<String> instance=new ServiceInstance<String>(""name"" ""id"" ""address"" 10 20 ""payload"" 0 ServiceType.DYNAMIC n"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,testNoEnabledState,"@Test public void  () throws Exception { JsonInstanceSerializer<Void> serializer=new JsonInstanceSerializer<Void>(Void.class); byte[] bytes=""{}"".getBytes(""utf-8""); ServiceInstance<Void> instance=serializer.deserialize(bytes); Assert.assertTrue(instance.is"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,testNoPayload,"@Test public void  () throws Exception { JsonInstanceSerializer<Void> serializer=new JsonInstanceSerializer<Void>(Void.class); ServiceInstance<Void> instance=new ServiceInstance<Void>(""name"" ""id"" ""address"" 10 20 null 0 ServiceType.DYNAMIC new UriSpec(""{a}"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,testPayloadAsList,"@Test public void  () throws Exception { JsonInstanceSerializer<Object> serializer=new JsonInstanceSerializer<Object>(Object.class false); List<String> payload=new ArrayList<String>(); payload.add(""Test value 1""); payload.add(""Test value 2""); ServiceInsta"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,testPayloadAsMap,"@Test public void  () throws Exception { JsonInstanceSerializer<Object> serializer=new JsonInstanceSerializer<Object>(Object.class false); Map<String String> payload=new HashMap<String String>(); payload.put(""1"" ""Test value 1""); payload.put(""2"" ""Test valu"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,testPayloadClass,"@Test public void  () throws Exception { JsonInstanceSerializer<Payload> serializer=new JsonInstanceSerializer<Payload>(Payload.class); Payload payload=new Payload(); payload.setVal(""Test value""); ServiceInstance<Payload> instance=new ServiceInstance<Payl"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestJsonInstanceSerializer.java,testWrongPayloadType,@Test public void  () throws Exception { JsonInstanceSerializer<String> stringSerializer=new JsonInstanceSerializer<String>(String.class); JsonInstanceSerializer<Double> doubleSerializer=new JsonInstanceSerializer<Double>(Double.class); byte[] bytes=strin
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestStrategies.java,TestInstanceProvider,"private  (int qty int startingAt) throws Exception { instances=Lists.newArrayList(); for (int i=0; i < qty; ++i) { ServiceInstanceBuilder<Void> builder=ServiceInstance.builder(); instances.add(builder.id(Integer.toString(i + startingAt)).name(""foo"").build()); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestStrategies.java,getInstances,@Override public List<ServiceInstance<Void>>  () throws Exception { return instances; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestStrategies.java,testRandom,@Test public void  () throws Exception { final int QTY=10; final int ITERATIONS=1000; TestInstanceProvider instanceProvider=new TestInstanceProvider(QTY 0); ProviderStrategy<Void> strategy=new RandomStrategy<Void>(); long[] counts=new long[QTY]; for (int 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestStrategies.java,testRoundRobin,@Test public void  () throws Exception { final int QTY=10; TestInstanceProvider instanceProvider=new TestInstanceProvider(QTY); ProviderStrategy<Void> strategy=new RoundRobinStrategy<Void>(); for (int i=0; i < QTY; ++i) { ServiceInstance<Void> instance=st
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestStrategies.java,testSticky,@Test public void  () throws Exception { final int QTY=10; TestInstanceProvider instanceProvider=new TestInstanceProvider(QTY); StickyStrategy<Void> strategy=new StickyStrategy<Void>(new RandomStrategy<Void>()); ServiceInstance<Void> theInstance=strategy.
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestServiceCache.java,cacheChanged,@Override public void  (){ semaphore.release(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestServiceCache.java,testCache,@Test public void  () throws Exception { List<Closeable> closeables=Lists.newArrayList(); try { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); closeables.add(client); client.start(); ServiceDiscov
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestServiceCache.java,testExecutorServiceIsInvoked,@Test public void  () throws Exception { List<Closeable> closeables=Lists.newArrayList(); try { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); closeables.add(client); client.start(); ServiceDiscov
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestServiceCache.java,testInitialLoad,@Test public void  () throws Exception { List<Closeable> closeables=Lists.newArrayList(); try { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); closeables.add(client); client.start(); ServiceDiscov
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestServiceCache.java,testUpdate,@Test public void  () throws Exception { List<Closeable> closeables=Lists.newArrayList(); try { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); closeables.add(client); client.start(); ServiceInstan
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestServiceCache.java,testViaProvider,@Test public void  () throws Exception { Timing timing=new Timing(); List<Closeable> closeables=Lists.newArrayList(); try { CuratorFramework client=CuratorFrameworkFactory.newClient(server.getConnectString() new RetryOneTime(1)); closeables.add(client); c
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestUriSpec.java,checkPart,private void  (UriSpec.Part p String value boolean isVariable){ Assert.assertEquals(p.getValue() value); Assert.assertEquals(p.isVariable() isVariable); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestUriSpec.java,testBasic,"@Test public void  (){ UriSpec spec=new UriSpec(""{one}{two}three-four-five{six}seven{eight}""); Iterator<UriSpec.Part> iterator=spec.iterator(); checkPart(iterator.next() ""one"" true); checkPart(iterator.next() ""two"" true); checkPart(iterator.next() ""three-"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestUriSpec.java,testEscapes,"@Test public void  (){ UriSpec spec=new UriSpec(""{one}two-three-{[}four{]}-five{six}""); Iterator<UriSpec.Part> iterator=spec.iterator(); checkPart(iterator.next() ""one"" true); checkPart(iterator.next() ""two-three-"" false); checkPart(iterator.next() ""["" tr"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestUriSpec.java,testFromInstance,"@Test public void  (){ ServiceInstanceBuilder<Void> builder=new ServiceInstanceBuilder<Void>(); builder.address(""1.2.3.4""); builder.name(""foo""); builder.id(""bar""); builder.port(5); builder.sslPort(6); builder.registrationTimeUTC(789); builder.serviceType("
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestUriSpec.java,testScheme,"@Test public void  (){ UriSpec spec=new UriSpec(""{scheme}://foo.com""); ServiceInstanceBuilder<Void> builder=new ServiceInstanceBuilder<Void>(); builder.id(""x""); builder.name(""foo""); builder.port(5); ServiceInstance<Void> instance=builder.build(); Assert.a"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\GenericDiscoveryContext.java,GenericDiscoveryContext,public  (ServiceDiscovery<T> serviceDiscovery ProviderStrategy<T> providerStrategy int instanceRefreshMs TypeToken<T> payloadType){ this.serviceDiscovery=serviceDiscovery; this.providerStrategy=providerStrategy; this.instanceRefreshMs=instanceRefreshMs; this.payloadType=payloadType; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\GenericDiscoveryContext.java,getContext,@Override public DiscoveryContext<T>  (Class<?> type){ return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\GenericDiscoveryContext.java,getInstanceRefreshMs,@Override public int  (){ return instanceRefreshMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\GenericDiscoveryContext.java,getProviderStrategy,@Override public ProviderStrategy<T>  (){ return providerStrategy; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\GenericDiscoveryContext.java,getServiceDiscovery,@Override public ServiceDiscovery<T>  (){ return serviceDiscovery; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\GenericDiscoveryContext.java,marshallJson,@Override public void  (ObjectNode node String fieldName T payload) throws Exception { if (payload == null) { payload=(T)payloadType.getRawType().newInstance(); } node.putPOJO(fieldName payload); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\GenericDiscoveryContext.java,unMarshallJson,@Override public T  (JsonNode node) throws Exception { T payload; ObjectMapper mapper=new ObjectMapper(); payload=(T)mapper.readValue(node payloadType.getRawType()); return payload; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestLocalIpFilter.java,testFilterEverything,@Test public void  () throws SocketException { LocalIpFilter localIpFilter=ServiceInstanceBuilder.getLocalIpFilter(); try { ServiceInstanceBuilder.setLocalIpFilter(new LocalIpFilter(){ @Override public boolean use( NetworkInterface networkInterface  InetA
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery\src\test\java\org\apache\curator\x\discovery\TestLocalIpFilter.java,use,@Override public boolean  (NetworkInterface networkInterface InetAddress address) throws SocketException { return false; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\IntegerDiscoveryContext.java,IntegerDiscoveryContext,public  (ServiceDiscovery<Integer> serviceDiscovery ProviderStrategy<Integer> providerStrategy int instanceRefreshMs){ this.serviceDiscovery=serviceDiscovery; this.providerStrategy=providerStrategy; this.instanceRefreshMs=instanceRefreshMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\IntegerDiscoveryContext.java,getContext,@Override public DiscoveryContext<Integer>  (Class<?> type){ return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\IntegerDiscoveryContext.java,getInstanceRefreshMs,@Override public int  (){ return instanceRefreshMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\IntegerDiscoveryContext.java,getProviderStrategy,@Override public ProviderStrategy<Integer>  (){ return providerStrategy; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\IntegerDiscoveryContext.java,getServiceDiscovery,@Override public ServiceDiscovery<Integer>  (){ return serviceDiscovery; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\IntegerDiscoveryContext.java,marshallJson,@Override public void  (ObjectNode node String fieldName Integer payload) throws Exception { if (payload != null) { node.put(fieldName payload.toString()); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\IntegerDiscoveryContext.java,unMarshallJson,@Override public Integer  (JsonNode node) throws Exception { if (node != null) { return Integer.parseInt(node.asText()); } return null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\StringDiscoveryContext.java,StringDiscoveryContext,public  (ServiceDiscovery<String> serviceDiscovery ProviderStrategy<String> providerStrategy int instanceRefreshMs){ this.serviceDiscovery=serviceDiscovery; this.providerStrategy=providerStrategy; this.instanceRefreshMs=instanceRefreshMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\StringDiscoveryContext.java,getContext,@Override public DiscoveryContext<String>  (Class<?> type){ return this; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\StringDiscoveryContext.java,getInstanceRefreshMs,@Override public int  (){ return instanceRefreshMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\StringDiscoveryContext.java,getProviderStrategy,@Override public ProviderStrategy<String>  (){ return providerStrategy; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\StringDiscoveryContext.java,getServiceDiscovery,@Override public ServiceDiscovery<String>  (){ return serviceDiscovery; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\StringDiscoveryContext.java,marshallJson,@Override public void  (ObjectNode node String fieldName String payload) throws Exception { if (payload != null) { node.put(fieldName payload); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\StringDiscoveryContext.java,unMarshallJson,@Override public String  (JsonNode node) throws Exception { return (node != null) ? node.asText() : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\contexts\MapDiscoveryContext.java,MapDiscoveryContext,public  (ServiceDiscovery<Map<String String>> serviceDiscovery ProviderStrategy<Map<String String>> providerStrategy int instanceRefreshMs){ super(serviceDiscovery providerStrategy instanceRefreshMs new TypeToken<Map<String String>>(){ } ); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstancesMarshaller.java,JsonServiceInstancesMarshaller,public  (DiscoveryContext<T> context){ this.context=context; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,JsonServiceInstanceMarshaller,public  (DiscoveryContext<T> context){ this.context=context; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,getInteger,private static Integer  (JsonNode node String fieldName){ JsonNode intNode=node.get(fieldName); return (intNode != null) ? intNode.asInt() : null; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstancesMarshaller.java,getSize,@Override public long  (ServiceInstances<T> serviceInstances Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return -1; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,getSize,@Override public long  (ServiceInstance<T> serviceInstance Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return -1; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstancesMarshaller.java,isReadable,@Override public boolean  (Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return isWriteable(type genericType annotations mediaType); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,isReadable,@Override public boolean  (Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return isWriteable(type genericType annotations mediaType); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstancesMarshaller.java,isWriteable,@Override public boolean  (Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return ServiceInstances.class.isAssignableFrom(type) && mediaType.equals(MediaType.APPLICATION_JSON_TYPE); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,isWriteable,@Override public boolean  (Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return ServiceInstance.class.isAssignableFrom(type) && mediaType.equals(MediaType.APPLICATION_JSON_TYPE); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,putInteger,private static void  (ObjectNode node String fieldName Integer value){ if (value != null) { node.put(fieldName value); } } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,readFrom,@Override public ServiceInstance<T>  (Class<ServiceInstance<T>> type Type genericType Annotation[] annotations MediaType mediaType MultivaluedMap<String String> httpHeaders InputStream entityStream) throws IOException  WebApplicationException { try { Obje
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,readInstance,"static <T>ServiceInstance<T>  (JsonNode node DiscoveryContext<T> context) throws Exception { ServiceInstanceBuilder<T> builder=ServiceInstance.builder(); builder.name(node.get(""name"").asText()); builder.id(node.get(""id"").asText()); builder.address(node.get(""address"").asText()); builder.registrationTimeUTC(node.get(""registrationTimeUTC"").asLong()); builder.serviceType(ServiceType.valueOf(node.get(""serviceType"").asText())); builder.payload(context.unMarshallJson(node.get(""payload""))); Integer port=getInteger(node ""port""); Integer sslPort=getInteger(node ""sslPort""); if (port != null) { builder.port(port); } if (sslPort != null) { builder.sslPort(sslPort); } return builder.build(); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,writeInstance,"static <T>ObjectNode  (ObjectMapper mapper ServiceInstance<T> instance DiscoveryContext<T> context){ ObjectNode node=mapper.createObjectNode(); node.put(""name"" instance.getName()); node.put(""id"" instance.getId()); node.put(""address"" instance.getAddress()); putInteger(node ""port"" instance.getPort()); putInteger(node ""sslPort"" instance.getSslPort()); node.put(""registrationTimeUTC"" instance.getRegistrationTimeUTC()); node.put(""serviceType"" instance.getServiceType().name()); try { context.marshallJson(node ""payload"" instance.getPayload()); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); throw new WebApplicationException(e); } return node; } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstanceMarshaller.java,writeTo,@Override public void  (ServiceInstance<T> serviceInstance Class<?> type Type genericType Annotation[] annotations MediaType mediaType MultivaluedMap<String Object> httpHeaders OutputStream entityStream) throws IOException  WebApplicationException { Objec
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstancesMarshaller.java,readFrom,@Override public ServiceInstances<T>  (Class<ServiceInstances<T>> type Type genericType Annotation[] annotations MediaType mediaType MultivaluedMap<String String> httpHeaders InputStream entityStream) throws IOException  WebApplicationException { try { Li
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceInstancesMarshaller.java,writeTo,@Override public void  (ServiceInstances<T> serviceInstances Class<?> type Type genericType Annotation[] annotations MediaType mediaType MultivaluedMap<String Object> httpHeaders OutputStream entityStream) throws IOException  WebApplicationException { Obj
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\ServiceInstances.java,ServiceInstances,public  (Collection<? extends ServiceInstance<T>> c){ services=Lists.newArrayList(c); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\ServiceInstances.java,getServices,public List<ServiceInstance<T>>  (){ return ImmutableList.copyOf(services); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceNamesMarshaller.java,allow,private static boolean  (Class<?> type MediaType mediaType){ return ServiceNames.class.isAssignableFrom(type) && mediaType.equals(MediaType.APPLICATION_JSON_TYPE); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceNamesMarshaller.java,getSize,@Override public long  (ServiceNames serviceNames Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return -1; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceNamesMarshaller.java,isReadable,@Override public boolean  (Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return allow(type mediaType); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceNamesMarshaller.java,isWriteable,@Override public boolean  (Class<?> type Type genericType Annotation[] annotations MediaType mediaType){ return allow(type mediaType); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceNamesMarshaller.java,readFrom,@Override public ServiceNames  (Class<ServiceNames> type Type genericType Annotation[] annotations MediaType mediaType MultivaluedMap<String String> httpHeaders InputStream entityStream) throws IOException  WebApplicationException { List<String> names=Lis
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\JsonServiceNamesMarshaller.java,writeTo,@Override public void  (ServiceNames serviceNames Class<?> type Type genericType Annotation[] annotations MediaType mediaType MultivaluedMap<String Object> httpHeaders OutputStream entityStream) throws IOException  WebApplicationException { ObjectMapper m
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\InstanceCleanup.java,InstanceCleanup,public  (ServiceDiscovery<?> discovery int instanceRefreshMs){ this.discovery=(ServiceDiscovery<Object>)discovery; this.instanceRefreshMs=instanceRefreshMs; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\InstanceCleanup.java,checkService,"private void  (String name){ try { Collection<ServiceInstance<Object>> instances=discovery.queryForInstances(name); for ( ServiceInstance<Object> instance : instances) { if (instance.getServiceType() == ServiceType.STATIC) { if ((System.currentTimeMillis() - instance.getRegistrationTimeUTC()) > instanceRefreshMs) { discovery.unregisterService(instance); } } } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(String.format(""GC for service: %s"" name) e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\InstanceCleanup.java,close,"@Override public void  () throws IOException { Preconditions.checkArgument(!service.isShutdown() ""not started""); service.shutdownNow(); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\InstanceCleanup.java,doWork,"private void  (){ try { for ( String name : discovery.queryForNames()) { checkService(name); } } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(""GC for service names"" e); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\InstanceCleanup.java,run,@Override public void  (){ doWork(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\InstanceCleanup.java,start,"public void  (){ Preconditions.checkArgument(!service.isShutdown() ""already started""); service.scheduleWithFixedDelay(new Runnable(){ @Override public void run(){ doWork(); } }  instanceRefreshMs instanceRefreshMs TimeUnit.MILLISECONDS); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\ServiceNames.java,ServiceNames,public  (Collection<? extends String> c){ names=Lists.newArrayList(c); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\entity\ServiceNames.java,getNames,public List<String>  (){ return ImmutableList.copyOf(names); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\MapDiscoveryResource.java,MapDiscoveryResource,public  (@Context ContextResolver<DiscoveryContext<Map<String String>>> resolver){ super(resolver.getContext(DiscoveryContext.class)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,DiscoveryResource,public  (DiscoveryContext<T> context){ this.context=context; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,get,"@GET @Path(""v1/service/{name}/{id}"") @Produces(MediaType.APPLICATION_JSON) public Response  (@PathParam(""name"") String name @PathParam(""id"") String id){ return internalGet(name id false); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,getAll,"@GET @Path(""v1/service/{name}"") @Produces(MediaType.APPLICATION_JSON) public Response  (@PathParam(""name"") String name){ try { Collection<ServiceInstance<T>> instances=context.getServiceDiscovery().queryForInstances(name); return Response.ok(new ServiceIn"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,getAllNames,"@GET @Path(""v1/service"") @Produces(MediaType.APPLICATION_JSON) public Response  (){ try { List<String> instances=Lists.newArrayList(context.getServiceDiscovery().queryForNames()); Collections.sort(instances); return Response.ok(new ServiceNames(instances)"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,getAny,"@GET @Path(""v1/anyservice/{name}"") @Produces(MediaType.APPLICATION_JSON) public Response  (@PathParam(""name"") String name){ try { final List<ServiceInstance<T>> instances=Lists.newArrayList(context.getServiceDiscovery().queryForInstances(name)); ServiceIn"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,getDeprecated,"@Deprecated @GET @Path(""{name}/{id}"") @Produces(MediaType.APPLICATION_JSON) public Response  (@PathParam(""name"") String name @PathParam(""id"") String id){ return internalGet(name id true); } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,getInstances,@Override public List<ServiceInstance<T>>  () throws Exception { return instances; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,internalGet,"private Response  (String name String id boolean addDeprecationHeader){ try { ServiceInstance<T> instance=context.getServiceDiscovery().queryForInstance(name id); if (instance == null) { return Response.status(Response.Status.NOT_FOUND).build(); } Response.ResponseBuilder builder=Response.ok(instance); if (addDeprecationHeader) { builder=builder.header(""Warning"" ""This API has been deprecated. Please see the updated spec for the replacement API.""); } return builder.build(); } catch ( Exception e) { ThreadUtils.checkInterrupted(e); log.error(String.format(""Trying to get instance (%s) from service (%s)"" id name) e); return Response.serverError().build(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,putService,"@PUT @Path(""v1/service/{name}/{id}"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public Response  (ServiceInstance<T> instance @PathParam(""name"") String name @PathParam(""id"") String id){ if (!instance.getId().equals(id) || "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\main\java\org\apache\curator\x\discovery\server\rest\DiscoveryResource.java,removeService,"@DELETE @Path(""v1/service/{name}/{id}"") public Response  (@PathParam(""name"") String name @PathParam(""id"") String id){ try { ServiceInstance<T> instance=context.getServiceDiscovery().queryForInstance(name id); if (instance != null) { context.getServiceDisc"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetailsDiscoveryContext.java,ServiceDetailsDiscoveryContext,public  (ServiceDiscovery<ServiceDetails> serviceDiscovery ProviderStrategy<ServiceDetails> providerStrategy int instanceRefreshMs){ super(serviceDiscovery providerStrategy instanceRefreshMs ServiceDetails.class); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetails.java,ServiceDetails,public  (Map<String String> data){ this.data=data; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetails.java,equals,@Override public boolean  (Object obj){ if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; ServiceDetails other=(ServiceDetails)obj; if (data == null) { if (other.data != null) return false; } else
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetails.java,getData,public Map<String String>  (){ return data; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetails.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetails.java,hashCode,@Override public int  (){ final int prime=31; int result=1; result=prime * result + ((data == null) ? 0 : data.hashCode()); result=prime * result + ((description == null) ? 0 : description.hashCode()); return result; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetails.java,setData,public void  (Map<String String> data){ this.data=data; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetails.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\StringDiscoveryResource.java,StringDiscoveryResource,public  (@Context ContextResolver<DiscoveryContext<String>> resolver){ super(resolver.getContext(DiscoveryContext.class)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\ServiceDetailsDiscoveryResource.java,ServiceDetailsDiscoveryResource,public  (@Context ContextResolver<DiscoveryContext<ServiceDetails>> resolver){ super(resolver.getContext(DiscoveryContext.class)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\RestEasyApplication.java,getClasses,@Override public Set<Class<?>>  (){ Set<Class<?>> classes=Sets.newHashSet(); classes.add(StringDiscoveryResource.class); return classes; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\RestEasyApplication.java,getSingletons,@Override public Set<Object>  (){ Set<Object> singletons=Sets.newHashSet(); singletons.add(singletonsRef.get().contextSingleton); singletons.add(singletonsRef.get().serviceNamesMarshallerSingleton); singletons.add(singletonsRef.get().serviceInstanceMarsha
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestMapsWithJersey.java,getClasses,@Override public Set<Class<?>>  (){ Set<Class<?>> classes=Sets.newHashSet(); classes.add(MapDiscoveryResource.class); return classes; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestMapsWithJersey.java,getSingletons,@Override public Set<Object>  (){ Set<Object> singletons=Sets.newHashSet(); singletons.add(context); singletons.add(serviceNamesMarshaller); singletons.add(serviceInstanceMarshaller); singletons.add(serviceInstancesMarshaller); return singletons; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestMapsWithJersey.java,setup,@BeforeMethod public void  () throws Exception { context=new MapDiscoveryContext(new MockServiceDiscovery<Map<String String>>() new RandomStrategy<Map<String String>>() 1000); serviceNamesMarshaller=new JsonServiceNamesMarshaller(); serviceInstanceMarshal
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestMapsWithJersey.java,teardown,@AfterMethod public void  () throws Exception { server.stop(); server.join(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestMapsWithJersey.java,testRegisterService,"@Test public void  () throws Exception { Map<String String> payload=Maps.newHashMap(); payload.put(""one"" ""1""); payload.put(""two"" ""2""); payload.put(""three"" ""3""); ServiceInstance<Map<String String>> service=ServiceInstance.<Map<String String>>builder().name"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestStringsWithJersey.java,getClasses,@Override public Set<Class<?>>  (){ Set<Class<?>> classes=Sets.newHashSet(); classes.add(StringDiscoveryResource.class); return classes; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestStringsWithJersey.java,getSingletons,@Override public Set<Object>  (){ Set<Object> singletons=Sets.newHashSet(); singletons.add(context); singletons.add(serviceNamesMarshaller); singletons.add(serviceInstanceMarshaller); singletons.add(serviceInstancesMarshaller); return singletons; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestStringsWithJersey.java,setup,@BeforeMethod public void  () throws Exception { context=new StringDiscoveryContext(new MockServiceDiscovery<String>() new RandomStrategy<String>() 1000); serviceNamesMarshaller=new JsonServiceNamesMarshaller(); serviceInstanceMarshaller=new JsonServiceIn
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestStringsWithJersey.java,teardown,@AfterMethod public void  () throws Exception { server.stop(); server.join(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestStringsWithJersey.java,testEmptyServiceNames,@Test public void  (){ ClientConfig config=new DefaultClientConfig(){ @Override public Set<Object> getSingletons(){ Set<Object> singletons=Sets.newHashSet(); singletons.add(context); singletons.add(serviceNamesMarshaller); singletons.add(serviceInstanceMa
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestStringsWithJersey.java,testRegisterService,"@Test public void  () throws Exception { ServiceInstance<String> service=ServiceInstance.<String>builder().name(""test"").payload(""From Test"").serviceType(ServiceType.STATIC).build(); ClientConfig config=new DefaultClientConfig(){ @Override public Set<Objec"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestObjectPayloadWithJersey.java,getClasses,@Override public Set<Class<?>>  (){ Set<Class<?>> classes=Sets.newHashSet(); classes.add(ServiceDetailsDiscoveryResource.class); return classes; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestObjectPayloadWithJersey.java,getSingletons,@Override public Set<Object>  (){ Set<Object> singletons=Sets.newHashSet(); singletons.add(context); singletons.add(serviceNamesMarshaller); singletons.add(serviceInstanceMarshaller); singletons.add(serviceInstancesMarshaller); return singletons; } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestObjectPayloadWithJersey.java,setup,@BeforeMethod public void  () throws Exception { context=new ServiceDetailsDiscoveryContext(new MockServiceDiscovery<ServiceDetails>() new RandomStrategy<ServiceDetails>() 1000); serviceNamesMarshaller=new JsonServiceNamesMarshaller(); serviceInstanceMars
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestObjectPayloadWithJersey.java,teardown,@AfterMethod public void  () throws Exception { server.stop(); server.join(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_jersey\TestObjectPayloadWithJersey.java,testRegisterService,"@Test public void  () throws Exception { ServiceDetails payload=new ServiceDetails(); payload.setDescription(""Example description for test""); payload.getData().put(""one"" ""1""); payload.getData().put(""two"" ""2""); payload.getData().put(""three"" ""3""); ServiceIn"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,get,@Override public Collection<ServiceInstance<T>>  (){ return Lists.newArrayList(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,queryForInstance,@Override public ServiceInstance<T>  (String name String id) throws Exception { Collection<ServiceInstance<T>> instances=services.get(name); for ( ServiceInstance<T> instance : instances) { if (instance.getId().equals(id)) { return instance; } } return nu
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,queryForInstances,@Override public Collection<ServiceInstance<T>>  (String name) throws Exception { return services.get(name); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,queryForNames,@Override public Collection<String>  () throws Exception { return services.keys(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,registerService,@Override public void  (ServiceInstance<T> service) throws Exception { services.put(service.getName() service); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,serviceCacheBuilder,@Override public ServiceCacheBuilder<T>  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,serviceProviderBuilder,@Override public ServiceProviderBuilder<T>  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,unregisterService,@Override public void  (ServiceInstance<T> service) throws Exception { services.remove(service.getName() service); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\mocks\MockServiceDiscovery.java,updateService,@Override public void  (ServiceInstance<T> service) throws Exception { services.put(service.getName() service); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\TestStringsWithRestEasy.java,getJson,"private String  (String urlStr String body) throws IOException { URL url=new URL(urlStr); URLConnection urlConnection=url.openConnection(); urlConnection.addRequestProperty(""Accept"" ""application/json""); if (body != null) { ((HttpURLConnection)urlConnection).setRequestMethod(""PUT""); urlConnection.addRequestProperty(""Content-Type"" ""application/json""); urlConnection.addRequestProperty(""Content-Length"" Integer.toString(body.length())); urlConnection.setDoOutput(true); OutputStream out=urlConnection.getOutputStream(); ByteSource.wrap(body.getBytes()).copyTo(out); } BufferedReader in=new BufferedReader(new InputStreamReader(urlConnection.getInputStream())); try { return CharStreams.toString(in); } finally { in.close(); } } "
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\TestStringsWithRestEasy.java,setup,@BeforeMethod public void  () throws Exception { RestEasyApplication.singletonsRef.set(new RestEasySingletons()); ResteasyProviderFactory.setInstance(new ResteasyProviderFactory()); HttpServletDispatcher dispatcher=new HttpServletDispatcher(); port=Instan
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\TestStringsWithRestEasy.java,teardown,@AfterMethod public void  () throws Exception { server.stop(); server.join(); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\TestStringsWithRestEasy.java,testEmptyServiceNames,"@Test public void  () throws Exception { String json=getJson(""http://localhost:"" + port + ""/v1/service"" null); ServiceNames names=RestEasyApplication.singletonsRef.get().serviceNamesMarshallerSingleton.readFrom(ServiceNames.class null null MediaType.APPLI"
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\StringDiscoveryResource.java,StringDiscoveryResource,public  (@Context Providers providers){ super(getContextFromProvider(providers)); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\StringDiscoveryResource.java,getContextFromProvider,private static DiscoveryContext<String>  (Providers providers){ ContextResolver<DiscoveryContext> contextResolver=providers.getContextResolver(DiscoveryContext.class MediaType.WILDCARD_TYPE); return contextResolver.getContext(DiscoveryContext.class); } 
C:\Users\User\Desktop\Thesis\curator\curator-x-discovery-server\src\test\java\org\apache\curator\x\discovery\server\jetty_resteasy\TestStringsWithRestEasy.java,testRegisterService,"@Test public void  () throws Exception { RestEasySingletons restEasySingletons=RestEasyApplication.singletonsRef.get(); ServiceInstance<String> service=ServiceInstance.<String>builder().name(""test"").payload(""From Test"").serviceType(ServiceType.STATIC).bui"
