ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\AbstractCommand.java,availableCommands,@Override public Command[]  (){ return EMPTY_COMMAND_ARRAY; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\AbstractCommandList.java,perform,"@Override public CommandResult  (String[] arguments){ final StringBuilder message=new StringBuilder(""Available commands: \r\n""); for ( Command availableCommand : availableCommands()) { message.append(availableCommand.getCommandToken()); message.append(""\t"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\CacheKeyEncoder.java,getCommandDescription,"@Override public String  (){ return ""Encodes a cache key into a representation that the distributed datastore can address.""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\CacheKeyEncoder.java,getCommandToken,"@Override public String  (){ return ""encode-key""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\CacheKeyEncoder.java,perform,"@Override public CommandResult  (String[] arguments){ if (arguments.length != 1) { return new InvalidArguments(""The cache key encoder expects one  string argument.""); } try { final byte[] hashBytes=MD5MessageDigestFactory.getInstance().newMessageDigest()."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthGroupsRemover.java,getCommandDescription,"@Override public String  (){ return ""Removes a user's auth groups from the local datastore.""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthGroupsRemover.java,getCommandToken,"@Override public String  (){ return ""remove-groups""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthGroupsRemover.java,perform,"@Override public CommandResult  (String[] arguments){ if (arguments.length != ARG_SIZE) { return new InvalidArguments(""The groups remover expects three string arguments.""); } CommandResult result; try { final ReposeLocalCacheMBean reposeLocalCacheMBeanPro"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\DistributedDatastoreCommandList.java,availableCommands,@Override public Command[]  (){ return new Command[]{new CacheKeyEncoder()}; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\DistributedDatastoreCommandList.java,getCommandDescription,"@Override public String  (){ return ""Commands related to managing the distributed datastore component""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\distributed\DistributedDatastoreCommandList.java,getCommandToken,"@Override public String  (){ return ""dist-datastore""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\LocalDatastoreCommandList.java,availableCommands,@Override public Command[]  (){ return new Command[]{new AuthTokenAndRolesRemover() new AuthGroupsRemover() new RateLimitsRemover()}; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\LocalDatastoreCommandList.java,getCommandDescription,"@Override public String  (){ return ""Commands related to managing the local datastore""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\LocalDatastoreCommandList.java,getCommandToken,"@Override public String  (){ return ""local-datastore""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthTokenAndRolesRemover.java,getCommandDescription,"@Override public String  (){ return ""Removes a user's auth token and roles from the local datastore.""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthTokenAndRolesRemover.java,getCommandToken,"@Override public String  (){ return ""remove-token""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\AuthTokenAndRolesRemover.java,perform,"@Override public CommandResult  (String[] arguments){ if (arguments.length != ARGUMENTS_LENGTH) { return new InvalidArguments(""The token remover expects three string arguments.""); } CommandResult result; try { final ReposeLocalCacheMBean reposeLocalCacheM"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\RateLimitsRemover.java,getCommandDescription,"@Override public String  (){ return ""Removes a user's rate limits from the local datastore.""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\RateLimitsRemover.java,getCommandToken,"@Override public String  (){ return ""remove-limits""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\RateLimitsRemover.java,perform,"@Override public CommandResult  (String[] arguments){ if (arguments.length != 2) { return new InvalidArguments(""The limits remover expects two string arguments.""); } CommandResult result; try { final ReposeLocalCacheMBean reposeLocalCacheMBeanProxy=new Re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,ReposeJMXClient,"public  (String port) throws IOException  MalformedObjectNameException { final String jmxRmiUrl=""service:jmx:rmi:///jndi/rmi://:"" + port + ""/jmxrmi""; final JMXServiceURL url=new JMXServiceURL(jmxRmiUrl); final JMXConnector jmxc=JMXConnectorFactory.connect(url null); final MBeanServerConnection reposeConnection=jmxc.getMBeanServerConnection(); reposeLocalCacheMBeanProxy=JMX.newMBeanProxy(reposeConnection new ObjectName(REPOSE_LOCAL_CACHE_OBJECT_NAME) ReposeLocalCacheMBean.class true); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,removeAllCacheData,@Override public void  (){ reposeLocalCacheMBeanProxy.removeAllCacheData(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,removeGroups,@Override public boolean  (String tenantId String token){ return reposeLocalCacheMBeanProxy.removeGroups(tenantId token); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,removeLimits,@Override public boolean  (String encodedUserId){ return reposeLocalCacheMBeanProxy.removeLimits(encodedUserId); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\datastore\local\ReposeJMXClient.java,removeTokenAndRoles,@Override public boolean  (String tenantId String token){ return reposeLocalCacheMBeanProxy.removeTokenAndRoles(tenantId token); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\InvalidArguments.java,InvalidArguments,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\InvalidArguments.java,getStatusCode,@Override public int  (){ return StatusCodes.INVALID_ARGUMENTS; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\CommandFailure.java,CommandFailure,public  (int statusCode String message){ this.statusCode=statusCode; this.message=message; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\CommandFailure.java,getStatusCode,@Override public int  (){ return statusCode; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\CommandFailure.java,getStringResult,@Override public String  (){ return message; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\CommandDriver.java,CommandDriver,public  (Command command String[] args){ this.myCommand=command; this.args=Arrays.copyOf(args args.length); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\CommandDriver.java,go,public CommandResult  (){ return args.length > 0 ? nextCommand(args[0]) : myCommand.perform(args); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\CommandDriver.java,main,"@SuppressWarnings({""squid:S106"" ""PMD.SystemPrintln"" ""squid:S1147""}) public static void  (String[] args){ final CommandResult result=new CommandDriver(new RootCommandLine() args).go(); if (StringUtils.isNotBlank(result.getStringResult())) { System.out.prin"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\CommandDriver.java,nextCommand,public CommandResult  (String nextArgument){ if (StringUtils.isBlank(nextArgument)) { throw new IllegalArgumentException(); } for ( Command availableCommand : myCommand.availableCommands()) { if (availableCommand.getCommandToken().equalsIgnoreCase(nextArgument)) { return new CommandDriver(availableCommand Arrays.copyOfRange(args 1 args.length)).go(); } } return myCommand.perform(args); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\MessageResult.java,MessageResult,public  (String message){ this.message=message; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\MessageResult.java,getStatusCode,@Override public int  (){ return StatusCodes.OK; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\command\results\MessageResult.java,getStringResult,@Override public String  (){ return message; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\RootCommandLine.java,availableCommands,@Override public Command[]  (){ return new Command[]{new DistributedDatastoreCommandList() new LocalDatastoreCommandList()}; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\RootCommandLine.java,getCommandDescription,"@Override public String  (){ throw new UnsupportedOperationException(""Root command has no description.""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\main\java\org\openrepose\cli\RootCommandLine.java,getCommandToken,"@Override public String  (){ throw new UnsupportedOperationException(""Root command has no token.""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\RootCommandLineTest.java,shouldReturnCommandArray,@Test public void  (){ assertNotNull(commands); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\RootCommandLineTest.java,shouldThrowExceptionWhenGettingCommandDescription,@Test(expected=UnsupportedOperationException.class) public void  (){ rootCommandLine.getCommandDescription(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\RootCommandLineTest.java,shouldThrowExceptionWhenGettingCommandToken,@Test(expected=UnsupportedOperationException.class) public void  (){ rootCommandLine.getCommandToken(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\command\results\CommandFailureTest.java,testMessage,"@Test public void  (){ CommandFailure testFailure=new CommandFailure(0 ""testMessage""); assertThat(testFailure.getStringResult() equalTo(""testMessage"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\cli-utils\src\test\java\org\openrepose\cli\command\results\CommandFailureTest.java,testStatus,"@Test public void  (){ CommandFailure testFailure=new CommandFailure(0 ""testMessage""); assertThat(testFailure.getStatusCode() equalTo(0)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\ConfigurationResourceException.java,ConfigurationResourceException,public  (String string Throwable thrwbl){ super(string thrwbl); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\manager\LockedConfigurationUpdater.java,LockedConfigurationUpdater,public  (KeyedStackLock updateLock Object updateKey){ this.updateLock=updateLock; this.updateKey=updateKey; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\manager\LockedConfigurationUpdater.java,configurationUpdated,@Override public final void  (T configurationObject){ updateLock.lock(updateKey); try { onConfigurationUpdated(configurationObject); } finally { updateLock.unlock(updateKey); } isInitialized=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\manager\LockedConfigurationUpdater.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\artifacts\web-application\src\main\java\org\openrepose\core\ReposeInitializer.java,onStartup,@Override public void  (ServletContext servletContext) throws ServletException { AnnotationConfigWebApplicationContext rootContext=new AnnotationConfigWebApplicationContext(); String configRoot=System.getProperty(CONFIG_ROOT); String clusterId=System.getP
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\generic\GenericResourceConfigurationParser.java,GenericResourceConfigurationParser,public  (){ super(ConfigurationResource.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\generic\GenericResourceConfigurationParser.java,read,@Override public ConfigurationResource  (ConfigurationResource cr){ return cr; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\common\AbstractConfigurationObjectParser.java,AbstractConfigurationObjectParser,public  (Class<T> configurationClass){ this.configurationClass=configurationClass; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\common\AbstractConfigurationObjectParser.java,configurationClass,@Override public final Class<T>  (){ return configurationClass; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParser.java,InputStreamConfigurationParser,public  (){ super(InputStream.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParser.java,read,"@Override public InputStream  (ConfigurationResource cr){ try { return cr.newInputStream(); } catch ( IOException ex) { throw new ResourceResolutionException(""Unable to read configuration file: "" + cr.name() ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerResourceContext.java,UnmarshallerResourceContext,public  (ConfigurationResource cfgResource){ this.cfgResource=cfgResource; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerResourceContext.java,perform,"@SuppressWarnings(""PMD.PreserveStackTrace"") @Override public Object  (UnmarshallerValidator resource){ try { return resource.validateUnmarshal(cfgResource.newInputStream()); } catch ( JAXBException jaxbe) { LOG.trace(""failed to unmarshall"" jaxbe); throw n"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerPoolableObjectFactory.java,UnmarshallerPoolableObjectFactory,public  (JAXBContext context URL xsdStreamSource){ this.context=context; this.xsdStreamSource=xsdStreamSource; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerPoolableObjectFactory.java,makeObject,"@Override public UnmarshallerValidator  (){ try { UnmarshallerValidator uv=new UnmarshallerValidator(context); if (xsdStreamSource != null) { SchemaFactory factory=SchemaFactory.newInstance(""http://www.w3.org/XML/XMLSchema/v1.1""); factory.setFeature(""http"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,TemplatingJaxbConfigurationParser,public  (Class<T> configurationClass URL xsdStreamSource ClassLoader loader) throws JAXBException { super(configurationClass xsdStreamSource loader); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,exists,@Override public boolean  () throws IOException { return cr.exists(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,name,@Override public String  (){ return cr.name(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,newInputStream,@Override public InputStream  () throws IOException { return reifyConf(cr.newInputStream()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,read,@Override public T  (ConfigurationResource cr){ return super.read(new ConfigurationResource(){ @Override public boolean updated() throws IOException { return cr.updated(); } @Override public boolean exists() throws IOException { return cr.exists(); } @Ove
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,reifyConf,private InputStream  (InputStream rawConf) throws IOException { JtwigModel model=JtwigModel.newModel(Collections.unmodifiableMap(System.getenv())); String template=IOUtils.toString(rawConf StandardCharsets.UTF_8); String result=JtwigTemplate.inlineTemplate(template ENV_CONF).render(model); return new ByteArrayInputStream(result.getBytes(StandardCharsets.UTF_8)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParser.java,updated,@Override public boolean  () throws IOException { return cr.updated(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParser.java,JaxbConfigurationParser,public  (Class<T> configurationClass URL xsdStreamSource ClassLoader loader) throws JAXBException { this(configurationClass JAXBContext.newInstance(configurationClass.getPackage().getName() loader) xsdStreamSource); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParser.java,read,@Override public T  (ConfigurationResource cr){ Object rtn=null; UnmarshallerValidator pooledObject; try { pooledObject=objectPool.borrowObject(); try { final Object unmarshalledObject=pooledObject.validateUnmarshal(cr.newInputStream()); if (unmarshalledO
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParser.java,PropertiesFileConfigurationParser,public  (){ super(Properties.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParser.java,read,"@Override public Properties  (ConfigurationResource cr){ Properties properties=new Properties(); try { properties.load(cr.newInputStream()); } catch ( IOException ex) { throw new ResourceResolutionException(""Unable to read configuration file: "" + cr.name("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,ByteArrayConfigurationResource,public  (String name byte[] sourceArray){ this.sourceArray=ArrayUtilities.nullSafeCopy(sourceArray); this.name=name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,exists,@Override public boolean  () throws IOException { return true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,name,@Override public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,newInputStream,@Override public InputStream  () throws IOException { return new ByteArrayInputStream(sourceArray); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResource.java,updated,@Override public boolean  () throws IOException { return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerValidator.java,UnmarshallerValidator,public  (JAXBContext context) throws JAXBException  ParserConfigurationException { DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance(); dbf.setNamespaceAware(true); db=dbf.newDocumentBuilder(); unmarshaller=context.createUnmarshaller(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerValidator.java,setSchema,public void  (Schema schema){ this.schema=schema; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerValidator.java,validate,"public DOMSource  (Document doc) throws IOException  SAXException { if (schema != null) { schema.newValidator().validate(new DOMSource(doc)); } else { LOG.debug(""Validate method called  but not given any schema""); } return new DOMSource(doc); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerValidator.java,validateUnmarshal,public Object  (InputStream inputstream) throws JAXBException  IOException  SAXException { Document doc; try { doc=db.parse(inputstream); } finally { db.reset(); } DOMSource source=validate(doc); return unmarshaller.unmarshal(source); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolver.java,DirectoryResourceResolver,public  (String configurationRoot){ this.configurationRoot=preppendFileURISpec(configurationRoot); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolver.java,getConfigurationRoot,public String  (){ return configurationRoot; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolver.java,preppendFileURISpec,"final String  (String urn){ return !urn.startsWith(""file://"") ? ""file://"" + urn : urn; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolver.java,resolve,"@Override public ConfigurationResource  (String resourceName){ final String spec=resourceName.contains(""://"") ? resourceName : StringUtils.join(configurationRoot File.separator resourceName); try { return new BufferedURLConfigurationResource(new URL(spec)"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\FileDirectoryResourceResolver.java,FileDirectoryResourceResolver,public  (String configRoot){ this.configRoot=configRoot; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\FileDirectoryResourceResolver.java,getConfigRoot,public String  (){ return this.configRoot; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\FileDirectoryResourceResolver.java,isResolvable,"private URL  (String resourceName){ try { return new URL(resourceName); } catch ( MalformedURLException murle) { LOG.trace(""Unable to build URL for resource  it is a configuration file"" murle); } return null; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\FileDirectoryResourceResolver.java,resolve,@Override public ConfigurationResource  (String resourceName){ File spec=null; URL configURL=isResolvable(resourceName); try { if (configURL == null) { spec=new File(configRoot resourceName); configURL=spec.toURI().toURL(); } return new BufferedURLConfigu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,BufferedURLConfigurationResource,public  (URL resourceUrl){ this.resourceUrl=resourceUrl; internalByteArray=new byte[DEFAULT_BYTE_ARRAY_SIZE]; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,exists,@Override public boolean  () throws IOException { return resourceUrl.openConnection().getContentLength() > 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,name,@Override public String  (){ return resourceUrl.toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,newDigesterOutputStream,"private MessageDigesterOutputStream  (String digestSpec){ try { return new MessageDigesterOutputStream(MessageDigest.getInstance(digestSpec)); } catch ( NoSuchAlgorithmException nsae) { throw new ConfigurationResourceException(""unrecognized digest specification"" nsae); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,newInputStream,"@Override public synchronized InputStream  () throws IOException { if (byteBuffer == null && !updated()) { throw new IOException(""Failed to perform initial read""); } return new ByteBufferInputStream(byteBuffer.copy()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,read,"private byte[]  (ByteBuffer buffer) throws IOException { final OutputStream bufferOut=new ByteBufferOutputStream(buffer); final MessageDigesterOutputStream mdos=newDigesterOutputStream(""MD5""); final OutputStreamSplitter splitter=new OutputStreamSplitter(bufferOut mdos); InputStream urlInput=null; try { urlInput=resourceUrl.openStream(); int read; while ((read=urlInput.read(internalByteArray)) > -1) { splitter.write(internalByteArray 0 read); } } finally { splitter.close(); if (urlInput != null) { urlInput.close(); } } return mdos.getDigest(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\main\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResource.java,updated,@Override public synchronized boolean  () throws IOException { final ByteBuffer freshBuffer=new CyclicByteBuffer(); final byte[] newDigest=read(freshBuffer); if (digest == null || !new ByteArrayComparator(digest newDigest).arraysAreEqual()) { byteBuffer=f
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,SampleConfigObject, (List<String> configProperties){ this.configProperties=configProperties; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,TestConfigUpdater, (KeyedStackLock updateLock Object updateKey String property int sleepTime Thread nextThread boolean joinThread){ super(updateLock updateKey); this.property=property; this.sleepTime=sleepTime; this.nextThread=nextThread; this.joinThread=joinThread; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,doJoinThread,"private static void  (Thread t){ try { t.join(); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); throw new RuntimeException(""Ugh  I can't join the thread!"" e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,onConfigurationUpdated,@Override protected void  (SampleConfigObject configurationObject){ Optional<Thread> thread=Optional.ofNullable(nextThread); thread.ifPresent(Thread::start); try { Thread.sleep(sleepTime); } catch ( InterruptedException e) { Thread.currentThread().interru
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,setup,@Before public void  (){ updateLock=new KeyedStackLock(); updateKey1=new Object(); updateKey2=new Object(); configProperties=new ArrayList<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,shouldLockWhenUsingUniqueKeys,"@Test public void  () throws InterruptedException { final SampleConfigObject config=new SampleConfigObject(configProperties); final TestConfigUpdater updater2=new TestConfigUpdater(updateLock updateKey2 ""prop2"" 0 null false); Thread t2=new Thread(() -> up"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,shouldNotLockWhenUsingSharedKeys,"@Test public void  () throws InterruptedException { final SampleConfigObject config=new SampleConfigObject(configProperties); final TestConfigUpdater updater2=new TestConfigUpdater(updateLock updateKey1 ""prop2"" 0 null true); Thread t2=new Thread(() -> upd"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\manager\LockedConfigurationUpdaterTest.java,update,void  (String property){ configProperties.add(property); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParserTest.java,setUp,@Before public void  () throws IOException { instance=new InputStreamConfigurationParser(); cr=mock(ConfigurationResource.class); stream=mock(InputStream.class); when(cr.newInputStream()).thenReturn(stream); badCr=mock(ConfigurationResource.class); when(b
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParserTest.java,shouldGetInputStream,"@Test public void  () throws IOException { InputStream actual=instance.read(cr); verify(cr times(1)).newInputStream(); assertThat(""Should get input stream"" actual sameInstance(stream)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParserTest.java,shouldThrowResourceResolutionException,@Test(expected=ResourceResolutionException.class) public void  (){ instance.read(badCr); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\inputstream\InputStreamConfigurationParserTest.java,testRead,@Test public void  (){ InputStream result=instance.read(cr); assertNotNull(result); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\generic\GenericResourceConfigurationParserTest.java,testRead,@Test public void  (){ ConfigurationResource cr=mock(ConfigurationResource.class); GenericResourceConfigurationParser instance=new GenericResourceConfigurationParser(); ConfigurationResource expResult=null; ConfigurationResource result=instance.read(cr); 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParserTest.java,createConfig,"private static String  (String helloMsg){ return ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""\n"" + ""<element>\n""+ "" <hello>"" + helloMsg + ""</hello>\n""+ "" <goodbye>See ya.</goodbye>\n""+ ""</element>\n""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParserTest.java,shouldReadConfigurationResource,@Test public void  () throws JAXBException  IOException { final JAXBContext jaxbContext=JAXBContext.newInstance(Element.class); ConfigurationParser<Element> parser=new JaxbConfigurationParser<>(Element.class jaxbContext null); ConfigurationResource cfgRes
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\JaxbConfigurationParserTest.java,testRead,@Test(expected=ClassCastException.class) public void  () throws JAXBException  IOException { final JAXBContext jaxbContext=JAXBContext.newInstance(Element.class); ConfigurationParser<String> parser=new JaxbConfigurationParser<>(String.class jaxbContext nu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\test\ObjectFactory.java,createUnmarshallerTest,"@XmlElementDecl(namespace=""http://docs.openrepose.org/repose/unmarshaller-test/v0.0"" name=""unmarshaller-test"") public JAXBElement<UnmarshallerValidatorTestImpl>  (UnmarshallerValidatorTestImpl value){ return new JAXBElement<>(_UnmarshallerTest_QNAME Unmar"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,createConfig,"private static String  (String helloMsg){ return ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?>\n"" + ""\n"" + ""<element>\n""+ "" <hello>"" + helloMsg + ""</hello>\n""+ "" <goodbye>See ya.</goodbye>\n""+ ""</element>\n""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,createHelloMsg,"private static String  (String name){ return String.format(""Hello %s!"" name); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,shouldRemoveTemplateCommentInConfigurationResource,@Test public void  () throws JAXBException  IOException { final JAXBContext jaxbContext=JAXBContext.newInstance(Element.class); ConfigurationParser<Element> parser=new TemplatingJaxbConfigurationParser<>(Element.class jaxbContext null); ConfigurationResou
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,shouldTemplateEnvironmentVariableInConfigurationResource,"@Test public void  () throws JAXBException  IOException { assumeTrue(""The "" + TEST_USER_ENV_VAR + "" environment variable must be set to""+ TEST_USER_NAME+ "" for this test"" TEST_USER_NAME.equals(System.getenv(TEST_USER_ENV_VAR))); final JAXBContext jaxbCont"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\TemplatingJaxbConfigurationParserTest.java,shouldThrowExceptionWhenMissingEnvironmentVariable,"@Test(expected=ClassCastException.class) public void  () throws JAXBException  IOException { assumeTrue(""The NOT_A_VAR environment variable must NOT be set for this test"" System.getenv(""NOT_A_VAR"") == null); final JAXBContext jaxbContext=JAXBContext.newIn"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerResourceContextTest.java,shouldPerformUnmarshall,@Test public void  () throws IOException  JAXBException  ParserConfigurationException { ConfigurationResource cfgResource=mock(ConfigurationResource.class); ByteArrayInputStream cfgStream=new ByteArrayInputStream(CFG_DATA.getBytes()); when(cfgResource.new
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\jaxb\UnmarshallerResourceContextTest.java,testPerform,@Test(expected=ResourceContextException.class) public void  () throws IOException  JAXBException  NoSuchAlgorithmException  ParserConfigurationException { ConfigurationResource cfgResource=mock(ConfigurationResource.class); when(cfgResource.newInputStream
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\BufferedURLConfigurationResourceTest.java,shouldReturnName,"@Test public void  () throws MalformedURLException { String urlString=""file:/META-INF/test/test.properties""; URL url=new URL(urlString); ConfigurationResource configResource=new BufferedURLConfigurationResource(url); assertEquals(urlString configResource."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,setup,"@Before public void  (){ byte[] bytes={1 2 3}; String name=""my_byte_array""; byteArrayConfigurationResource=new ByteArrayConfigurationResource(name bytes); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,shouldReturnFalseForUpdated,@Test public void  () throws IOException { assertFalse(byteArrayConfigurationResource.updated()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,shouldReturnName,"@Test public void  (){ String name=""my_byte_array""; assertEquals(name byteArrayConfigurationResource.name()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,shouldReturnNewInputStream,@Test public void  () throws IOException { InputStream inputStream=byteArrayConfigurationResource.newInputStream(); assertNotNull(inputStream); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\ByteArrayConfigurationResourceTest.java,shouldReturnTrueForExists,@Test public void  () throws IOException { assertTrue(byteArrayConfigurationResource.exists()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolverTest.java,shouldNotDoublePrependFileUriSpec,"@Test public void  (){ final DirectoryResourceResolver resolver=new DirectoryResourceResolver(""file:///etc/powerapi""); assertEquals(""Should append file uri spec to configuration root"" ""file:///etc/powerapi"" resolver.getConfigurationRoot()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolverTest.java,shouldPrependFileUriSpecToConfigurationRoots,"@Test public void  (){ final DirectoryResourceResolver resolver=new DirectoryResourceResolver(""/etc/powerapi""); assertEquals(""Should append file uri spec to configuration root"" ""file:///etc/powerapi"" resolver.getConfigurationRoot()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\resource\impl\DirectoryResourceResolverTest.java,shouldResolveWithAnyValidURIScheme,"@Test public void  (){ ConfigurationResourceResolver configResolver=new DirectoryResourceResolver(""/whatevah""); ConfigurationResource configResource=configResolver.resolve(""whatevah""); assertNotNull(configResource); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\arrays\ByteArrayComparator.java,ByteArrayComparator,public  (byte[] first byte[] second){ this.first=ArrayUtilities.nullSafeCopy(first); this.second=ArrayUtilities.nullSafeCopy(second); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\arrays\ByteArrayComparator.java,arraysAreEqual,public boolean  (){ boolean same=first.length == second.length; if (same) { for (int i=0; i < first.length && same; i++) { same=first[i] == second[i]; } } return same; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterable.java,EnumerationIterable,public  (Enumeration<T> enumeration){ this.enumerationIterator=new EnumerationIterator<>(enumeration); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterable.java,iterator,@Override public Iterator<T>  (){ return enumerationIterator; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterator.java,EnumerationIterator,public  (Enumeration<T> enumeration){ this.enumeration=enumeration; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterator.java,hasNext,@Override public boolean  (){ return enumeration.hasMoreElements(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterator.java,next,@Override public T  (){ if (!enumeration.hasMoreElements()) { throw new NoSuchElementException(); } return enumeration.nextElement(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\collections\EnumerationIterator.java,remove,"@Override public void  (){ throw new UnsupportedOperationException(""Enumerations do not support element removal.""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\ArrayUtilities.java,nullSafeCopy,public static byte[]  (byte[] array){ return array != null ? Arrays.copyOf(array array.length) : null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParserTest.java,setUp,"@Before public void  () throws IOException { ByteArrayOutputStream out=new ByteArrayOutputStream(); instance=new PropertiesFileConfigurationParser(); props=new Properties(); props.setProperty(""key"" ""value""); props.setProperty(""key2"" ""some other value""); p"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParserTest.java,shouldReturnValidPropertiesFile,"@Test public void  (){ Properties actual=instance.read(cr); assertEquals(""Should get properties file"" props actual); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-configuration\src\test\java\org\openrepose\commons\config\parser\properties\PropertiesFileConfigurationParserTest.java,testRead,@Test(expected=ResourceResolutionException.class) public void  (){ instance.read(badCr); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,bytesToUUID,public static UUID  (byte[] uuidBytes){ final byte[] buffer=new byte[UUID_BUFFER_SIZE]; System.arraycopy(uuidBytes 0 buffer 0 BYTE_BIT_LENGTH); final long msb=qwordToLong(buffer); System.arraycopy(uuidBytes BYTE_BIT_LENGTH buffer 0 BYTE_BIT_LENGTH); final long lsb=qwordToLong(buffer); return new UUID(msb lsb); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,decode,@Override public byte[]  (String hash){ final UUID uuid=UUID.fromString(hash); final byte[] buffer=new byte[UUID_BYTE_SIZE]; System.arraycopy(longToQword(uuid.getMostSignificantBits()) 0 buffer 0 BYTE_BIT_LENGTH); System.arraycopy(longToQword(uuid.getLeas
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,encode,@Override public String  (byte[] hash){ final byte[] buffer=new byte[UUID_BUFFER_SIZE]; System.arraycopy(hash 0 buffer 0 BYTE_BIT_LENGTH); final long msb=qwordToLong(buffer); System.arraycopy(hash BYTE_BIT_LENGTH buffer 0 BYTE_BIT_LENGTH); final long lsb=
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,getInstance,public static EncodingProvider  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,longToQword,private static byte[]  (long l){ final byte[] qWord=new byte[QWORD_BYTE_LENGTH]; for (int p=0  shift=0; p < QWORD_BYTE_LENGTH; p++  shift+=BYTE_BIT_LENGTH) { qWord[p]=(byte)((l >> shift) & MASK); } return qWord; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\encoding\UUIDEncodingProvider.java,qwordToLong,private static long  (byte[] qWord){ long l=0; for (int p=0  shift=0; p < QWORD_BYTE_LENGTH; p++  shift+=BYTE_BIT_LENGTH) { l+=(long)(qWord[p] & MASK) << shift; } return l; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,HeaderName,private  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } HeaderName that=(HeaderName)o; if (name != null) { if (!name.equalsIgnoreCase(that.name)) { return false; } } else { if (t
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,hashCode,@Override public int  (){ return name != null ? name.toLowerCase().hashCode() : 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,toString,"@Override public String  (){ return ""HeaderName{"" + ""name='"" + name + '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderName.java,wrap,public static HeaderName  (String name){ return new HeaderName(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueParser.java,HeaderValueParser,public  (String rawValue){ this.rawHeaderValue=rawValue; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueParser.java,concat,"private String  (String[] values int start String delimiter){ StringBuilder sb=new StringBuilder(""""); int index=start; while (index < values.length) { if (sb.length() > 0) { sb.append(delimiter); } sb.append(values[index++].trim()); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueParser.java,parse,"@SuppressWarnings(""squid:RedundantThrowsDeclarationCheck"") public HeaderValue  () throws MalformedHeaderValueException { final Map<String String> parameters=new HashMap<>(); final String[] parameterSplit=rawHeaderValue.split("";""); final StringBuilder valu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueParser.java,parseParameter,"@SuppressWarnings(""squid:RedundantThrowsDeclarationCheck"") private void  (Map<String String> parameters String unparsedParameter) throws MalformedHeaderValueException { final String[] keyValueSplit=unparsedParameter.split(""=""); switch (keyValueSplit.lengt"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,HeaderValueImpl,public  (String value Map<String String> parameters){ this.parsedQualityFactor=getQualityFactor(parameters); this.parameters=new HashMap(parameters); this.value=value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,compareHeaderValues,private int  (String first String second){ int comparasionValue=-1; if (first != null) { if (second == null) { comparasionValue=1; } else { comparasionValue=first.compareTo(second); } } else if (second == null) { comparasionValue=0; } return comparasionValue; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,compareTo,"@Override @SuppressWarnings(""squid:S1244"") public int  (HeaderValue that){ int comparasionValue=1; if (that != null) { if (this.getQualityFactor() != that.getQualityFactor()) { comparasionValue=this.getQualityFactor() > that.getQualityFactor() ? 1 : -1; }"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,equals,@Override public boolean  (Object obj){ if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } final HeaderValueImpl other=(HeaderValueImpl)obj; return compareTo(other) == 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,equalsTo,public boolean  (HeaderValue headerValue){ Map<String String> compareParams=new HashMap(parameters); compareParams.remove(QUALITY_FACTOR_PARAM_NAME); Map<String String> compareParams2=new HashMap(headerValue.getParameters()); compareParams2.remove(QUALITY_FACTOR_PARAM_NAME); if (StringUtils.equalsIgnoreCase(headerValue.getValue() value) && compareParams.equals(compareParams2)) { return true; } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,getParameters,@Override public Map<String String>  (){ return Collections.unmodifiableMap(parameters); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,getQualityFactor,@Override public double  (){ return parsedQualityFactor; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,getValue,@Override public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,hasQualityFactor,public boolean  (){ return parameters.containsKey(QUALITY_FACTOR_PARAM_NAME); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,hashCode,@Override public int  (){ int hash=HASH_BASE; hash=HASH_PRIME * hash + (this.parameters != null ? this.parameters.hashCode() : 0); hash=HASH_PRIME * hash + (this.value != null ? this.value.hashCode() : 0); return hash; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,qualityFactorToParameterMap,"@SuppressWarnings(""squid:S1244"") private static Map<String String>  (double qualityFactor){ final Map<String String> parameters=new HashMap<>(); if (qualityFactor != DEFAULT_QUALITY) { parameters.put(QUALITY_FACTOR_PARAM_NAME String.valueOf(qualityFactor)"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\HeaderValueImpl.java,toString,"@Override public String  (){ if (value == null) { return """"; } final StringBuilder builder=new StringBuilder(value); if (!parameters.isEmpty()) { builder.append("";""); final Iterator<Entry<String String>> parameterIterator=parameters.entrySet().iterator();"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\MalformedHeaderValueException.java,MalformedHeaderValueException,public  (String string){ super(string); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\HttpDate.java,HttpDate,public  (final Date utcTime){ this.utcTime=(Date)utcTime.clone(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\HttpDate.java,toRFC1123,"public String  (){ final SimpleDateFormat formatter=new SimpleDateFormat(""E  dd MMM yyyy HH:mm:ss z""); formatter.setTimeZone(GMT_TIMEZONE); return formatter.format(utcTime); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\SplittableHeaderUtil.java,SplittableHeaderUtil,public  (String[]... constant){ setDefaultSplittable(); for ( String[] cts : constant) { Collections.addAll(splittableHeaders cts); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\SplittableHeaderUtil.java,isSplittable,public boolean  (String st){ return splittableHeaders.contains(st.toLowerCase()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\header\SplittableHeaderUtil.java,setDefaultSplittable,private void  (){ splittableHeaders=new TreeSet<>(CASE_INSENSITIVE_COMPARE); splittableHeaders.addAll(Arrays.asList(DEFAULT_SPLIT)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaType.java,MediaType,public  (String value MimeType mediaType Map<String String> parameters){ super(value parameters); this.mimeType=mediaType; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaType.java,equals,@Override public boolean  (Object obj){ if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } final MediaType other=(MediaType)obj; if (this.mimeType != other.mimeType) { return false; } return super.equals(obj); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaType.java,getMimeType,public MimeType  (){ return mimeType; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaType.java,hashCode,@Override public int  (){ int hash=HASH_CODE_NUM2 * HASH_CODE_NUM1 + (this.mimeType != null ? this.mimeType.hashCode() : 0); return hash + super.hashCode(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ExtendedHttpHeader.java,values,public static String[]  (){ return new String[]{X_TTL}; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaRangeProcessor.java,MediaRangeProcessor,public  (List<? extends HeaderValue> values){ this.values=values; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MediaRangeProcessor.java,process,"public MediaType  (HeaderValue headerValue){ String mediaTypeWithParametersStripped=headerValue.getValue().split("";"")[0]; MimeType mediaType=MimeType.getMatchingMimeType(mediaTypeWithParametersStripped); if (MimeType.UNKNOWN.equals(mediaType)) { mediaType=MimeType.guessMediaTypeFromString(mediaTypeWithParametersStripped); } return new MediaType(mediaTypeWithParametersStripped mediaType headerValue.getParameters()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,MimeType," (String topLevelTypeName String subTypeName){ this.topLevelTypeName=topLevelTypeName; this.subTypeName=subTypeName; this.name=topLevelTypeName + ""/"" + subTypeName; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,getMatchingMimeType,public static MimeType  (String mimeType){ if (StringUtils.isNotBlank(mimeType)) { for ( MimeType ct : values()) { if (ct.getName().equalsIgnoreCase(mimeType)) { return ct; } } } return UNKNOWN; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,getSubTypeName,public String  (){ return subTypeName; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,getTopLevelTypeName,public String  (){ return topLevelTypeName; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,guessMediaTypeFromString,public static MimeType  (String mimeType){ if (StringUtils.isNotBlank(mimeType)) { for ( MimeType ct : values()) { if (mimeType.contains(ct.getTopLevelTypeName()) && mimeType.contains(ct.getSubTypeName())) { return ct; } } } return UNKNOWN; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\media\MimeType.java,toString,@Override public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\OpenStackServiceHeader.java,values,public static String[]  (){ return new String[]{EXTENDED_AUTHORIZATION IDENTITY_STATUS USER_NAME USER_ID TENANT_NAME TENANT_ID ROLES AUTHENTICATED_BY IMPERSONATOR_ID IMPERSONATOR_NAME IMPERSONATOR_ROLES DEFAULT_REGION X_EXPIRATION CONTACT_ID}; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,QueryParameterCollection,public  (String query){ parameterTracker=new LinkedHashMap<>(); if (!StringUtils.isBlank(query)) { parseQueryParameters(query); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,addNewParameter,private void  (String name String value){ final QueryParameter uriParameter=new QueryParameter(name); uriParameter.addValue(value); parameterTracker.put(name uriParameter); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,addParameter,private void  (String name String value){ final QueryParameter uriParameter=parameterTracker.get(name); if (uriParameter == null) { addNewParameter(name value); } else { uriParameter.addValue(value); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,getParameters,public List<QueryParameter>  (){ return new ArrayList<>(parameterTracker.values()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,parseQueryParameters,"private void  (String query){ final String[] queryParameters=QUERY_PAIR_PATTERN.split(query); for ( String kvPair : queryParameters) { final String[] keyValuePair=QUERY_KEY_VALUE_PATTERN.split(kvPair 2); if (keyValuePair.length == 2) { addParameter(keyValuePair[0] keyValuePair[1]); } else { addParameter(keyValuePair[0] """"); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameterCollection.java,toString,"@Override public String  (){ StringBuilder queryParams=new StringBuilder(); for ( QueryParameter parameter : parameterTracker.values()) { for ( String value : parameter.getValues()) { if (!queryParams.toString().isEmpty()) { queryParams.append(""&""); } que"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,QueryParameter,public  (String name){ this.name=name; this.values=new LinkedList<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,addValue,public void  (String value){ values.add(value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,compareTo,@Override public int  (QueryParameter o){ return getName().compareTo(o.getName()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,equals,@Override public boolean  (Object o){ if (!(o instanceof QueryParameter)) { return false; } return compareTo((QueryParameter)o) == 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,getValues,public List<String>  (){ return values; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryParameter.java,hashCode,@Override public int  (){ return HASH + (this.name != null ? this.name.hashCode() : 0); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\PowerApiHeader.java,values,public static String[]  (){ return new String[]{NEXT_ROUTE USER GROUPS DOMAIN X_CATALOG}; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizer.java,QueryStringNormalizer,public  (ParameterFilterFactory parameterFilterFactory boolean alphabetize){ this.parameterFilterFactory=parameterFilterFactory; this.alphabetize=alphabetize; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizer.java,normalize,@Override public String  (String source){ final QueryParameterCollection parsedQueryParameters=new QueryParameterCollection(source); final List<QueryParameter> queryParameters=parsedQueryParameters.getParameters(); if (alphabetize) { Collections.sort(quer
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizer.java,writeParameter,"public void  (StringBuilder queryStringBuilder QueryParameter queryParameter){ final ParameterFilter parameterFilter=parameterFilterFactory.newInstance(); for ( final String value : queryParameter.getValues()) { if (parameterFilter.shouldAccept(queryParameter.getName())) { if (!queryStringBuilder.toString().isEmpty() && !queryStringBuilder.toString().endsWith(""&"")) { queryStringBuilder.append(QueryParameterCollection.QUERY_PAIR_DELIMITER); } queryStringBuilder.append(queryParameter.getName()); queryStringBuilder.append(QueryParameterCollection.QUERY_KEY_VALUE_DELIMITER); queryStringBuilder.append(value); } else { break; } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizer.java,writeParameters,private String  (List<QueryParameter> queryParameters){ final StringBuilder queryStringBuilder=new StringBuilder(); for ( QueryParameter nextParameter : queryParameters) { writeParameter(queryStringBuilder nextParameter); } return queryStringBuilder.toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\InputStreamUtilities.java,streamToString,"public static String  (InputStream stream) throws IOException { String stringValue=""""; if (stream != null) { final StringBuilder stringBuilder=new StringBuilder(); final BufferedReader in=new BufferedReader(new InputStreamReader(stream StandardCharsets.UTF_8)); String nextLine; while ((nextLine=in.readLine()) != null) { stringBuilder.append(nextLine); } stringValue=stringBuilder.toString(); } return stringValue; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClientResponse.java,ServiceClientResponse,public  (int code Header[] headers InputStream data){ this.statusCode=code; this.headers=headers; this.data=data; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClientResponse.java,getData,public InputStream  (){ return data; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClientResponse.java,getHeaders,public Header[]  (){ return headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClientResponse.java,getStatus,public int  (){ return statusCode; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,ServiceClient,public  (String connectionPoolId HttpClientService httpClientService){ this.connectionPoolId=connectionPoolId; this.httpClientService=httpClientService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,execute,"@SuppressWarnings(""squid:S2093"") private ServiceClientResponse  (HttpRequestBase base String... queryParameters){ try { HttpClient client=getClientWithBasicAuth(); for (int index=0; index < queryParameters.length; index=index + 2) { client.getParams().set"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,get,"public ServiceClientResponse  (String uri Map<String String> headers String... queryParameters){ URI uriBuilt; HttpGet httpget=new HttpGet(uri); if (queryParameters != null) { if (queryParameters.length % 2 != 0) { throw new IllegalArgumentException(""Query parameters must be in pairs.""); } try { URIBuilder builder=new URIBuilder(uri); for (int index=0; index < queryParameters.length; index=index + 2) { builder.setParameter(queryParameters[index] queryParameters[index + 1]); } uriBuilt=builder.build(); httpget=new HttpGet(uriBuilt); } catch ( URISyntaxException e) { LOG.error(""Error building request URI"" e); return new ServiceClientResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR null); } } setHeaders(httpget headers); return execute(httpget); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,getClientWithBasicAuth,private HttpClient  (){ HttpClientContainer clientResponse=null; try { clientResponse=httpClientService.getClient(connectionPoolId); return clientResponse.getHttpClient(); } finally { if (clientResponse != null) { httpClientService.releaseClient(clientResponse); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,post,"public ServiceClientResponse  (String uri Map<String String> headers String body MediaType contentMediaType){ HttpPost post=new HttpPost(uri); Map<String String> requestHeaders=new HashMap<>(); requestHeaders.putAll(headers); String localContentType=contentMediaType.getType() + ""/"" + contentMediaType.getSubtype(); requestHeaders.put(HttpHeaders.CONTENT_TYPE localContentType); if (!requestHeaders.containsKey(HttpHeaders.ACCEPT)) { requestHeaders.put(HttpHeaders.ACCEPT MediaType.APPLICATION_XML); } setHeaders(post requestHeaders); if (body != null && !body.isEmpty()) { post.setEntity(new InputStreamEntity(new ByteArrayInputStream(body.getBytes()) body.length())); } return execute(post); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\http\ServiceClient.java,setHeaders,private void  (HttpRequestBase base Map<String String> headers){ final Set<Map.Entry<String String>> entries=headers.entrySet(); for ( Map.Entry<String String> entry : entries) { base.addHeader(entry.getKey() entry.getValue()); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,CyclicByteBuffer,public  (ByteArrayProvider byteArrayProvider CyclicByteBuffer byteBuffer){ this.byteArrayProvider=byteArrayProvider; final int readableLength=byteBuffer.available(); final int allocationSize=readableLength > 0 && readableLength > DEFAULT_BUFFER_SIZE ? readableLength : DEFAULT_BUFFER_SIZE; initialSize=allocationSize; if (byteBuffer.buffer != null) { buffer=byteArrayProvider.allocate(allocationSize); if (byteBuffer.nextReadableIndex + readableLength > byteBuffer.buffer.length) { final int trimmedLength=byteBuffer.buffer.length - byteBuffer.nextReadableIndex; System.arraycopy(byteBuffer.buffer byteBuffer.nextReadableIndex buffer 0 trimmedLength); System.arraycopy(byteBuffer.buffer 0 buffer trimmedLength readableLength - trimmedLength); } else { System.arraycopy(byteBuffer.buffer byteBuffer.nextReadableIndex buffer 0 readableLength); } } this.nextReadableIndex=0; this.nextWritableIndex=(readableLength < allocationSize) ? readableLength : 0; this.hasElements=byteBuffer.available() > 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,allocate,public void  (){ if (buffer == null) { buffer=byteArrayProvider.allocate(initialSize); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,available,@Override public int  (){ if (buffer == null) { return 0; } if (nextWritableIndex == nextReadableIndex && hasElements) { return buffer.length; } return nextWritableIndex < nextReadableIndex ? nextWritableIndex + (buffer.length - nextReadableIndex) : nextW
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,clear,@Override public void  (){ nextReadableIndex=0; nextWritableIndex=0; hasElements=false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,copy,@Override public ByteBuffer  (){ return new CyclicByteBuffer(byteArrayProvider this); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,get,@Override public int  (byte[] b) throws IOException { return get(b 0 b.length); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,grow,private void  (int minLength){ allocate(); final int newSize=buffer.length + buffer.length * (minLength / buffer.length + 1); final byte[] newBuffer=byteArrayProvider.allocate(newSize); final int read=get(newBuffer 0 newSize); buffer=newBuffer; nextWritableIndex=read; nextReadableIndex=0; hasElements=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,put,@Override public int  (byte[] b) throws IOException { return put(b 0 b.length); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,remaining,@Override public int  (){ if (buffer == null) { return initialSize; } if (nextWritableIndex == nextReadableIndex && hasElements) { return 0; } return nextWritableIndex < nextReadableIndex ? nextReadableIndex - nextWritableIndex : buffer.length - nextWrita
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\CyclicByteBuffer.java,skip,@Override public int  (int len){ allocate(); int bytesSkipped=len; if (len > available()) { bytesSkipped=available(); nextReadableIndex=0; nextWritableIndex=0; } else { nextReadableIndex=nextReadableIndex + len < buffer.length ? nextReadableIndex + len : 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferCapacityException.java,BufferCapacityException,public  (String string){ super(string); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,SynchronizedByteBuffer,public  (ByteBuffer internalBuffer){ this.internalBuffer=internalBuffer; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,available,@Override public synchronized int  (){ return internalBuffer.available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,clear,@Override public synchronized void  (){ internalBuffer.clear(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,copy,@Override public synchronized ByteBuffer  (){ return internalBuffer.copy(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,get,@Override public synchronized byte  () throws IOException { return internalBuffer.get(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,put,@Override public synchronized void  (byte b) throws IOException { internalBuffer.put(b); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,remaining,@Override public synchronized int  (){ return internalBuffer.remaining(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBuffer.java,skip,@Override public synchronized int  (int bytes){ return internalBuffer.skip(bytes); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferOutputStream.java,ByteBufferOutputStream,public  (ByteBuffer sharedBuffer){ this.sharedBuffer=sharedBuffer; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferOutputStream.java,flushStream,@Override public void  () throws IOException { sharedBuffer.skip(sharedBuffer.available()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferOutputStream.java,writeByte,@Override public void  (int b) throws IOException { sharedBuffer.put((byte)b); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,ByteBufferInputStream,public  (ByteBuffer sharedBuffer){ this.sharedBuffer=sharedBuffer; closed=false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,available,@Override public int  () throws IOException { checkForClosedStream(); return sharedBuffer.available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,checkForClosedStream,"private void  () throws IOException { if (closed) { throw new IOException(""InputStream has been closed. Futher operations are prohibited""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,close,@Override public void  () throws IOException { checkForClosedStream(); closed=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,markSupported,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,normalizeBufferReadLength,private int  (int readLength){ return readLength == 0 ? -1 : readLength; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,read,@Override public int  (byte[] b int off int len) throws IOException { checkForClosedStream(); return normalizeBufferReadLength(sharedBuffer.get(b off len)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferInputStream.java,skip,@Override public long  (long n) throws IOException { checkForClosedStream(); long skipped; long skippedTotal=0; long c=n; if (c > 0) { do { int toSkip=c > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)c; skipped=sharedBuffer.skip(toSkip); skippedTotal+=ski
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,ByteBufferServletOutputStream,public  (ByteBuffer sharedBuffer){ this.sharedBuffer=sharedBuffer; closed=false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,close,@Override public void  () throws IOException { checkForClosedStream(); closed=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,flush,@Override public void  () throws IOException { checkForClosedStream(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,isClosed,public boolean  (){ return closed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStream.java,write,@Override public void  (byte[] b int off int len) throws IOException { checkForClosedStream(); sharedBuffer.put(b off len); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,BufferedServletInputStream,public  (InputStream inputStream){ this.inputStream=new BufferedInputStream(inputStream); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,available,@Override public int  () throws IOException { return inputStream.available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,close,@Override public void  () throws IOException { inputStream.close(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,mark,@Override public void  (int readlimit){ inputStream.mark(readlimit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,markSupported,@Override public boolean  (){ return inputStream.markSupported(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,read,@Override public int  () throws IOException { return inputStream.read(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\BufferedServletInputStream.java,reset,@Override public void  () throws IOException { inputStream.reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,InputStreamMerger,private  (InputStream... streams){ this.streams=streams; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,available,@Override public int  () throws IOException { if (haveCurrentStream()) { return getCurrentStream().available(); } return 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,close,@Override public void  () throws IOException { for ( InputStream stream : streams) { if (stream != null) { stream.close(); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,getCurrentStream,private InputStream  (){ return streams[index]; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,haveCurrentStream,private boolean  (){ while (index < streams.length && streams[index] == null) { index++; } return index < streams.length; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,markSupported,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,merge,public static InputStream  (InputStream... streams){ return new InputStreamMerger(streams); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,read,@Override public int  (byte[] b int off int len) throws IOException { int totalRead=0; int remaining=len; while (remaining > 0 && haveCurrentStream()) { int result=getCurrentStream().read(b totalRead + off remaining); if (result > 0) { totalRead+=result; 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,reset,"@Override public void  () throws IOException { throw new IOException(""Reset not supported""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,skip,@Override public long  (long count) throws IOException { long skipped; long totalSkipped=0; long remaining=count; while (haveCurrentStream() && remaining > 0) { skipped=getCurrentStream().skip(remaining); remaining-=skipped; totalSkipped+=skipped; if (ski
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\InputStreamMerger.java,wrap,public static InputStream  (String string){ return new ByteArrayInputStream(string.getBytes(StandardCharsets.UTF_8)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ClassLoaderAwareObjectInputStream.java,ClassLoaderAwareObjectInputStream,public  (InputStream in ClassLoader classLoader) throws IOException { super(in); this.classLoader=classLoader; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ClassLoaderAwareObjectInputStream.java,resolveClass,"@Override protected Class<?>  (ObjectStreamClass desc) throws IOException  ClassNotFoundException { try { return classLoader.loadClass(desc.getName()); } catch ( ClassNotFoundException ignored) { LOG.trace(""Couldn't load class {}."" desc.getName() ignored)"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ObjectSerializer.java,ObjectSerializer,public  (ClassLoader classLoader){ this.classLoader=classLoader; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ObjectSerializer.java,readObject,public Serializable  (InputStream is) throws IOException  ClassNotFoundException { final ObjectInputStream ois=new ClassLoaderAwareObjectInputStream(is classLoader); final Serializable readObject=(Serializable)ois.readObject(); ois.close(); return readObject; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\ObjectSerializer.java,writeObject,public byte[]  (Serializable o) throws IOException { final ByteArrayOutputStream baos=new ByteArrayOutputStream(); final ObjectOutputStream oos=new ObjectOutputStream(baos); oos.writeObject(o); return baos.toByteArray(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OneTimeUseOutputStream.java,checkForClosedStream,"private void  () throws IOException { if (closed) { throw new IOException(""InputStream has been closed. Further operations are prohibited""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OneTimeUseOutputStream.java,close,@Override public final void  () throws IOException { checkForClosedStream(); closeStream(); closed=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,MessageDigesterOutputStream,public  (MessageDigest digest){ this.digest=digest; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,closeStream,@Override public void  () throws IOException { digestBytes=digest.digest(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,flushStream,@Override public void  () throws IOException { digest.reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,getDigest,public byte[]  (){ return digestBytes.clone(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\MessageDigesterOutputStream.java,writeByte,@Override public void  (int b) throws IOException { digest.update((byte)b); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OutputStreamSplitter.java,OutputStreamSplitter,public  (OutputStream... jis){ streamsToSplitTo=Arrays.asList(jis); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OutputStreamSplitter.java,close,@Override public void  () throws IOException { for ( OutputStream os : streamsToSplitTo) { os.close(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OutputStreamSplitter.java,flush,@Override public void  () throws IOException { for ( OutputStream os : streamsToSplitTo) { os.flush(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\OutputStreamSplitter.java,write,@Override public void  (byte[] bytes int i int i1) throws IOException { for ( OutputStream os : streamsToSplitTo) { os.write(bytes i i1); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\RawInputStreamReader.java,copyTo,public long  (InputStream is OutputStream os int bufferSize) throws IOException { final byte[] internalBuffer=new byte[bufferSize]; long total=0; int read; while ((read=is.read(internalBuffer)) != -1) { os.write(internalBuffer 0 read); total+=read; } return total; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\RawInputStreamReader.java,instance,public static RawInputStreamReader  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\RawInputStreamReader.java,readFully,"public byte[]  (InputStream is long byteLimit) throws IOException { final ByteArrayOutputStream baos=new ByteArrayOutputStream(); final byte[] internalBuffer=new byte[DEFAULT_INTERNAL_BUFFER_SIZE]; int read; long limit=byteLimit; while ((read=is.read(internalBuffer)) != -1) { limit-=read; if (limit < 0) { throw new BufferCapacityException(""Read limit reached. Max buffer size: "" + limit + "" bytes""); } baos.write(internalBuffer 0 read); } return baos.toByteArray(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,LimitedReadInputStream,public  (long readLimit InputStream delegateStream){ this.delegateStream=delegateStream; this.readLimit=readLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,mark,@Override public void  (int readlimit){ delegateStream.mark(readlimit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,markSupported,@Override public boolean  (){ return delegateStream.markSupported(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,read,"@Override public int  () throws IOException { if (++bytesRead > readLimit) { throw new ReadLimitReachedException(""Read limit of "" + readLimit + "" for input stream has been reached""); } return delegateStream.read(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStream.java,reset,@Override public void  () throws IOException { delegateStream.reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\HeapspaceByteArrayProvider.java,allocate,"@Override public byte[]  (int capacity){ if (capacity <= 0) { throw new IllegalArgumentException(""Byte array capacity must be greater than zero - got "" + capacity); } return new byte[capacity]; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\buffer\HeapspaceByteArrayProvider.java,getInstance,public static ByteArrayProvider  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\DateConversionFormat.java,getPattern,public static String  (String name){ if (ISO_8601.equalsIgnoreCase(name)) { return ISO_8601_PATTERN; } return RFC_1123_PATTERN; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraint.java,StatusCodeConstraint,"public  (String codes){ this.isInclusivePass=!codes.startsWith(""!""); statusCodes=new HashSet<>(); for ( String st : STATUS_CODE_RX.split(removeNegation(codes))) { statusCodes.add(Integer.parseInt(st)); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraint.java,addStatusCode,public void  (Integer statusCode){ statusCodes.add(statusCode); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraint.java,pass,private boolean  (boolean passedByDefault int responseStatusCode){ boolean passed=!passedByDefault; for ( int targetStatusCode : statusCodes) { if (responseStatusCode == targetStatusCode) { passed=!passed; break; } } return passed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraint.java,removeNegation,"private String  (String codes){ return codes.startsWith(""!"") ? codes.substring(1) : codes; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\DateTimeFormatConverter.java,convert,@Override public String  (String value String inputFormat String outputFormat){ if (!StringUtils.isBlank(value) && !StringUtils.isBlank(outputFormat)) { try { String inputPattern=DateConversionFormat.getPattern(inputFormat); String outputPattern=DateConve
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,ServletInputStreamWrapper,public  (InputStream is){ this.is=is; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,available,@Override public int  () throws IOException { return is.available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,close,@Override public void  () throws IOException { is.close(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,mark,@Override public void  (int readlimit){ is.mark(readlimit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,markSupported,@Override public boolean  (){ return is.markSupported(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,read,@Override public int  (byte[] b int off int len) throws IOException { return is.read(b off len); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,reset,@Override public void  () throws IOException { is.reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapper.java,skip,@Override public long  (long n) throws IOException { return is.skip(n); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\TypeConversionFormatFactory.java,TypeConversionFormatFactory," (Class<? extends FormatConverter> converter){ try { ConverterMap.addConverter(name() converter.newInstance()); } catch ( InstantiationException|IllegalAccessException ex) { LoggerFactory.getLogger(TypeConversionFormatFactory.class).error(""Unable to instantiate converter: "" + converter.getName() ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\TypeConversionFormatFactory.java,addConverter,public static void  (String name FormatConverter converter){ CONVERSION_MAP.put(name converter); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\converters\TypeConversionFormatFactory.java,getConverter,public static FormatConverter  (String name){ if (StringUtils.isBlank(name)) { return null; } return CONVERSION_MAP.get(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,HeaderHandler,public  (String headerName List<String> arguments){ this.headerName=headerName; this.arguments=arguments; checkArguments(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,checkArguments,private void  (){ if (!arguments.isEmpty()) { this.converter=TypeConversionFormatFactory.getConverter(arguments.get(0)); } if (arguments.size() > 1) { this.outputFormat=arguments.get(1); } if (arguments.size() > 2) { this.inputFormat=arguments.get(2); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,convert,protected String  (String value){ if (converter != null) { return converter.convert(value inputFormat outputFormat); } return value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,getArguments,public List<String>  (){ return arguments; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,getHeaderName,public String  (){ return headerName; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\HeaderHandler.java,getValues,protected String  (Collection<String> values){ return getValues(Collections.enumeration(values)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\LogArgumentFormatter.java,format,@Override public String  (HttpServletRequest request HttpServletResponse response){ boolean pass=true; if (statusCodeConstraint != null) { pass=statusCodeConstraint.pass(response); } return pass && getLogic() != null ? getLogic().handle(request response) 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\LogArgumentFormatter.java,getLogic,public FormatterLogic  (){ return logic; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\LogArgumentFormatter.java,setLogic,public void  (FormatterLogic logic){ this.logic=logic; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\LogArgumentFormatter.java,setStatusCodeConstraint,public void  (StatusCodeConstraint statusCodeConstraint){ this.statusCodeConstraint=statusCodeConstraint; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\LocalAddressHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return request.getLocalAddr(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\CanonicalPortHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return String.valueOf(request.getLocalPort()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\io\stream\ReadLimitReachedException.java,ReadLimitReachedException,public  (String string){ super(string); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RemoteHostHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return request.getRemoteHost(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\QueryStringHandler.java,handle,"@Override public String  (HttpServletRequest request HttpServletResponse response){ return request.getQueryString() == null ? """" : request.getQueryString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RemoteUserHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return request.getHeader(PowerApiHeader.USER); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RemoteAddressHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return request.getRemoteAddr(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestHeaderHandler.java,RequestHeaderHandler,public  (String headerName List<String> arguments){ super(headerName arguments); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestHeaderHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return getValues(request.getHeaders(getHeaderName())); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestLineHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return new StringBuilder(request.getMethod()).append(SPACE).append(request.getRequestURI()).append(SPACE).append(request.getProtocol()).toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestMethodHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return request.getMethod(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\RequestProtocolHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return request.getProtocol(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseHeaderHandler.java,ResponseHeaderHandler,public  (String headerName List<String> arguments){ super(headerName arguments); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseHeaderHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return getValues(response.getHeaders(getHeaderName())); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseTimeHandler.java,ResponseTimeHandler,public  (double multiplier){ this.multiplier=multiplier; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseTimeHandler.java,handle,"@Override public String  (HttpServletRequest request HttpServletResponse response){ Object startTime=request.getAttribute(START_TIME_ATTRIBUTE); String responseTime=""""; if (startTime != null) { responseTime=decimalFormat.format((System.currentTimeMillis()"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseBytesHandler.java,handle,"@Override public String  (HttpServletRequest request HttpServletResponse response){ String contentLength=""-1""; String contentLengthHeader=response.getHeader(HttpHeaders.CONTENT_LENGTH); if (StringUtils.isNotBlank(contentLengthHeader)) { try { contentLengt"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseMessageHandler.java,ResponseMessageHandler,public  (HttpLogFormatterState state){ this.state=state; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseMessageHandler.java,handle,"@Override public String  (HttpServletRequest request HttpServletResponse response){ String message=null; if (response instanceof HttpServletResponseWrapper) { message=((HttpServletResponseWrapper)response).getReason(); } if (message == null) { message="""";"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\StatusCodeHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return String.valueOf(response.getStatus()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\StringHandler.java,StringHandler,public  (String staticStringContent){ this.staticStringContent=staticStringContent; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\StringHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return staticStringContent; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\TraceGuidHandler.java,TraceGuidHandler,public  (){ super(CommonHttpHeader.TRACE_GUID Collections.<String>emptyList()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\TraceGuidHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return TracingHeaderHelper.getTraceGuid(getValues(request.getHeaders(getHeaderName()))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\TimeReceivedHandler.java,TimeReceivedHandler,"@SuppressWarnings(""squid:S1848"") public  (final String dateFormat){ this.dateFormat=StringUtils.isEmpty(dateFormat) ? DEFAULT_DATE_FORMAT : dateFormat; new SimpleDateFormat(dateFormat); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\TimeReceivedHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return new SimpleDateFormat(dateFormat).format(Calendar.getInstance().getTime()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\UrlRequestedHandler.java,handle,@Override public String  (HttpServletRequest request HttpServletResponse response){ return request.getRequestURL().toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,HttpLogFormatter,public  (String formatTemplate HttpLogFormatterState httpLogFormatterState){ this.formatTemplate=handleTabsAndNewlines(formatTemplate); this.httpLogFormatterState=httpLogFormatterState; handlerList=new LinkedList<>(); build(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,build,private void  (){ final Matcher m=LogConstants.PATTERN.matcher(formatTemplate); int previousTokenEnd=0; while (m.find()) { handleStringContent(previousTokenEnd m.start() handlerList); handlerList.add(handleArgument(new LogArgumentGroupExtractor(m))); previousTokenEnd=m.end(); } handleStringContent(previousTokenEnd formatTemplate.length() handlerList); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,format,public String  (String message HttpServletRequest request HttpServletResponse response){ final StringBuilder builder=new StringBuilder(message); for ( FormatArgumentHandler formatter : handlerList) { builder.append(formatter.format(request response)); } return builder.toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,getHandlerList,List<FormatArgumentHandler>  (){ return new LinkedList<>(handlerList); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,handleArgument,private LogArgumentFormatter  (LogArgumentGroupExtractor extractor){ final LogArgumentFormatter argFormatter=new LogArgumentFormatter(); if (!isBlank(extractor.getStatusCodes())) { argFormatter.setStatusCodeConstraint(new StatusCodeConstraint(extractor.getStatusCodes())); } setLogic(extractor argFormatter); return argFormatter; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,handleStringContent,private void  (int previousTokenEnd int currentTokenStart List<FormatArgumentHandler> argHandlerList){ final String betweenElements=formatTemplate.substring(previousTokenEnd currentTokenStart); if (!isEmpty(betweenElements)) { argHandlerList.add(handleArgument(LogArgumentGroupExtractor.stringEntity(betweenElements))); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,handleTabsAndNewlines,"private String  (String formatTemplate){ Matcher tabsMatcher=TABS.matcher(formatTemplate); Matcher newlinesMatcher=NEWLINES.matcher(tabsMatcher.replaceAll(""\t"")); return newlinesMatcher.replaceAll(""\n""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatter.java,setLogic,"@SuppressWarnings(""PMD.NcssMethodCount"") public void  (final LogArgumentGroupExtractor extractor final LogArgumentFormatter formatter){ final String extractorEntity=extractor.getEntity(); if (extractorEntity == null) { throw new IllegalArgumentException("""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\format\stock\ResponseBytesClfHandler.java,handle,"@Override public String  (HttpServletRequest request HttpServletResponse response){ String contentLength=""-1""; String contentLengthHeader=response.getHeader(HttpHeaders.CONTENT_LENGTH); if (StringUtils.isNotBlank(contentLengthHeader)) { try { int parsedCo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,LogArgumentGroupExtractor,public  (Matcher m){ lifeCycleModifier=getGroupValue(m LIFECYCLE_GROUP_INDEX); statusCodes=getGroupValue(m STATUS_CODE_INDEX); variable=getGroupValue(m VARIABLE_INDEX); variableArgumentSeparator=getGroupValue(m VAR_ARG_SEPARATOR_INDEX); arguments=parseArguments(getGroupValue(m ARGUMENTS_INDEX)); entity=getGroupValue(m ENTITY_INDEX); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,equals,"@SuppressWarnings(""squid:S1067"") @Override public boolean  (Object o){ boolean result=false; if (o instanceof LogArgumentGroupExtractor) { LogArgumentGroupExtractor other=(LogArgumentGroupExtractor)o; result=StringUtils.equals(other.entity entity) && Stri"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,getArguments,public List<String>  (){ return arguments; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,getEntity,public String  (){ return entity; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,getFormat,"public String  (){ return variable + variableArgumentSeparator + StringUtils.join(arguments "" ""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,getGroupValue,"private String  (Matcher m int index){ String value=m.group(index); return value != null ? value : """"; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,getLifeCycleModifier,public String  (){ return lifeCycleModifier; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,getStatusCodes,public String  (){ return statusCodes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,getVariable,public String  (){ return variable; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,hashCode,"@Override public int  (){ int hash=HASH_BASE; hash=HASH_PRIME * hash + StringUtils.defaultIfEmpty(lifeCycleModifier """").hashCode(); hash=HASH_PRIME * hash + StringUtils.defaultIfEmpty(statusCodes """").hashCode(); hash=HASH_PRIME * hash + StringUtils.defaul"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,instance,"public static LogArgumentGroupExtractor  (String lifeCycleModifier String statusCodes String variable String arguments String entity){ return new LogArgumentGroupExtractor(lifeCycleModifier statusCodes variable """" arguments entity); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,parseArguments,"private List<String>  (String arguments){ List<String> result=new ArrayList<>(); if (arguments != null) { Collections.addAll(result arguments.split(""[  ]"")); } return result; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractor.java,stringEntity,"public static LogArgumentGroupExtractor  (String variable){ return new LogArgumentGroupExtractor("""" """" variable """" """" LogFormatArgument.STRING); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\ExceptionLogger.java,ExceptionLogger,public  (Logger loggerRef){ this.loggerRef=loggerRef; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\logging\ExceptionLogger.java,newException,public <T extends Exception>T  (String message Throwable cause Class<T> exceptionClass){ Throwable newExceptionInstance; if (cause == null) { newExceptionInstance=ReflectionTools.construct(exceptionClass message); } else { newExceptionInstance=ReflectionTools.construct(exceptionClass message cause); } loggerRef.error(message cause); return (T)newExceptionInstance; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,NetUtilitiesException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,bestGuessHostname,"public static String  (){ String result; if (System.getProperty(""os.name"").startsWith(""Windows"")) { LOG.debug(""Looking up a windows COMPUTERNAME environment var for the JMX name""); result=System.getenv(""COMPUTERNAME""); } else { LOG.debug(""Looking up a linux HOSTNAME environment var for the JMX name""); String envHostname=System.getenv(""HOSTNAME""); if (envHostname != null) { result=envHostname; } else { LOG.debug(""Unable to find a Linux HOSTNAME environment var  trying another tool""); try { result=InetAddress.getLocalHost().getHostName(); } catch ( UnknownHostException e) { LOG.warn(""Unable to resolve local hostname for JMX"" e); result=DEFAULT_DOMAIN_PREFIX; } } } return result; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,getLocalAddress,"public static String  (){ try { final InetAddress addr=InetAddress.getLocalHost(); return addr.getHostAddress(); } catch ( UnknownHostException e) { throw new NetUtilitiesException(""Failed to get container address"" e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,getLocalHostName,"public static String  (){ try { final InetAddress addr=InetAddress.getLocalHost(); return addr.getHostName(); } catch ( UnknownHostException e) { throw new NetUtilitiesException(""Failed to get hostname. Something weird is going on."" e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\NetUtilities.java,isLocalHost,"public static boolean  (String hostname){ boolean result=false; try { final InetAddress hostAddress=NETWORK_NAME_RESOLVER.lookupName(hostname); result=NETWORK_INTERFACE_PROVIDER.hasInterfaceFor(hostAddress); } catch ( UnknownHostException uhe) { LOG.error(""Unable to look up network host name. Reason: "" + uhe.getMessage() uhe); } catch ( SocketException socketException) { LOG.error(socketException.getMessage() socketException); } return result; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,IpAddressRange,public  (String network int mask) throws UnknownHostException { this.network=InetAddress.getByName(network).getAddress(); this.mask=mask; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,addressInRange,public boolean  (byte[] address) throws UnknownHostException { return match(getIp() address getMask()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,getIp,public byte[]  (){ return (byte[])network.clone(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,getMask,public int  (){ return mask; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\IpAddressRange.java,match,private boolean  (byte byte1 byte byte2 int bits){ int shift=BYTE_SIZE - bits; int first=(byte1 >> shift) << shift; int second=(byte2 >> shift) << shift; return (first ^ second) == 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkInterfaceProvider.java,getInstance,public static NetworkInterfaceProvider  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkInterfaceProvider.java,getInterfaceFor,@Override public NetworkInterface  (InetAddress address) throws SocketException { for ( NetworkInterface iface : getNetworkInterfaces()) { for ( InetAddress ifaceAddress : new EnumerationIterable<>(iface.getInetAddresses())) { if (ifaceAddress.equals(addr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkInterfaceProvider.java,getNetworkInterfaces,@Override public Iterable<NetworkInterface>  () throws SocketException { return new EnumerationIterable<>(NetworkInterface.getNetworkInterfaces()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkInterfaceProvider.java,hasInterfaceFor,@Override public boolean  (InetAddress address) throws SocketException { return getInterfaceFor(address) != null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkNameResolver.java,getInstance,public static StaticNetworkNameResolver  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\net\StaticNetworkNameResolver.java,lookupName,@Override public InetAddress  (String host) throws UnknownHostException { return InetAddress.getByName(host); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\ResourceAccessException.java,ResourceAccessException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,GenericBlockingResourcePool,public  (ConstructionStrategy<R> constructor int minPoolSize int maxPoolSize){ this.constructor=constructor; checkoutCounter=0; pool=new LinkedList<>(); poolLock=new ReentrantLock(true); poolHasResources=poolLock.newCondition(); resizeMinimum(minPoolSize); resizeMaximum(maxPoolSize); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,checkin,private void  (R resource){ try { poolLock.lock(); if (pool.size() + checkoutCounter < maxPoolSize) { pool.add(resource); poolHasResources.signal(); } checkoutCounter--; } finally { poolLock.unlock(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,checkout,"@SuppressWarnings(""squid:S2142"") private R  (){ try { poolLock.lock(); R resource; if (pool.isEmpty() && checkoutCounter != maxPoolSize) { resource=constructor.construct(); } else { while (pool.isEmpty()) { poolHasResources.await(); } resource=pool.poll()"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,resizeMaximum,private void  (int newSize){ try { poolLock.lock(); maxPoolSize=newSize; while (pool.size() + checkoutCounter > maxPoolSize && !pool.isEmpty()) { pool.poll(); } } finally { poolLock.unlock(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,resizeMinimum,private void  (final int newMinPoolSize){ try { poolLock.lock(); while (checkoutCounter + pool.size() < newMinPoolSize) { pool.add(constructor.construct()); } } finally { poolLock.unlock(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,setMaximumPoolSize,@Override public void  (int newSize){ resizeMaximum(newSize); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,setMinimumPoolSize,@Override public void  (int newSize){ resizeMinimum(newSize); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,size,@Override public int  (){ try { poolLock.lock(); return checkoutCounter + pool.size(); } finally { poolLock.unlock(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\GenericBlockingResourcePool.java,use,@Override public void  (SimpleResourceContext<R> newContext){ final R resource=checkout(); try { newContext.perform(resource); } finally { checkin(resource); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\ResourceConstructionException.java,ResourceConstructionException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\pooling\ResourceContextException.java,ResourceContextException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\ProxyRequestException.java,ProxyRequestException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\TargetHostInfo.java,TargetHostInfo,"public  (String targetHost){ URI targetUri=null; try { targetUri=new URI(targetHost); } catch ( URISyntaxException e) { LOG.error(""Invalid target host url: "" + targetHost e); } proxiedHostUri=targetUri; proxiedHostUrl=asUri(proxiedHostUri); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\TargetHostInfo.java,asUri,"private URL  (URI host){ if (host == null || host.getScheme() == null || host.getHost() == null) { return null; } try { return new URL(host.getScheme() host.getHost() host.getPort() """"); } catch ( MalformedURLException ex) { LOG.error(""Invalid host url: "" + host ex); } return null; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\TargetHostInfo.java,getProxiedHostUri,public URI  (){ return proxiedHostUri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\proxy\TargetHostInfo.java,getProxiedHostUrl,public URL  (){ return proxiedHostUrl; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,ExtractorResult,public  (String result K key){ this.result=result; this.key=key; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,getKey,public K  (){ return key; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,getResult,public String  (){ return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,hasKey,public boolean  (){ return key != null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\ExtractorResult.java,hasResult,public boolean  (){ return result != null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionTools.java,construct,"public static <T>T  (Class<T> clazz Object... parameters){ try { return getConstructor(clazz toClassArray(parameters)).newInstance(parameters); } catch ( Exception instanciationException) { throw new ReflectionException(""Failed to create new instance of class: "" + clazz.getCanonicalName() + "". Pump cause for more details."" instanciationException); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionTools.java,getConstructor,"@SuppressWarnings(""squid:S2095"") public static <T>Constructor<T>  (Class<T> clazz Class<?>[] parameters) throws NoSuchMethodException { return Arrays.stream((Constructor<T>[])clazz.getConstructors()).filter(constructor -> parametersMatch(constructor.getPa"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionTools.java,parametersMatch,private static boolean  (Class<?>[] someParams Class<?>[] otherParams){ if (otherParams.length != someParams.length) { return false; } for (int i=0; i < someParams.length; i++) { Class<?> someClass=someParams[i]; Class<?> otherClass=otherParams[i]; if (otherClass != null && !someClass.isAssignableFrom(otherClass)) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionTools.java,toClassArray,public static Class<?>[]  (Object... objects){ final Class<?>[] classArray=new Class<?>[objects.length]; for (int i=0; i < objects.length; i++) { classArray[i]=objects[i] != null ? objects[i].getClass() : null; } return classArray; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\reflection\ReflectionException.java,ReflectionException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,RegexSelector,public  (){ compiledPatterns=new LinkedList<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,addPattern,public void  (String pattern K key){ compiledPatterns.add(new SelectorPattern<>(Pattern.compile(pattern) key)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,clear,public void  (){ compiledPatterns.clear(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,getLastMatch,public Pattern  (){ return lastMatch; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\RegexSelector.java,select,public SelectorResult<K>  (String selectOn){ for ( SelectorPattern<K> selector : compiledPatterns) { if (selector.matcher(selectOn).matches()) { lastMatch=selector.getPattern(); return new SelectorResult<>(selector.getKey()); } } return SelectorResult.emptyResult(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorPattern.java,SelectorPattern,public  (Pattern pattern K key){ this.pattern=pattern; this.key=key; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorPattern.java,getKey,public K  (){ return key; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorPattern.java,getPattern,public Pattern  (){ return pattern; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorPattern.java,matcher,public Matcher  (String target){ return pattern.matcher(target); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorResult.java,SelectorResult,public  (K key){ this.key=key; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorResult.java,emptyResult,public static SelectorResult  (){ return EMPTY_INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorResult.java,getKey,public K  (){ return key; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\SelectorResult.java,hasKey,public boolean  (){ return key != null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\RegexList.java,RegexList,public  (){ this.regexMatchers=new LinkedList<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\RegexList.java,add,public void  (String newRegexTarget){ regexMatchers.add(Pattern.compile(newRegexTarget)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\RegexList.java,find,public Matcher  (String target){ for ( Pattern targetPattern : regexMatchers) { final Matcher matcherRef=targetPattern.matcher(target); if (matcherRef.find()) { return matcherRef; } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\RegexList.java,matches,public Matcher  (String target){ for ( Pattern targetPattern : regexMatchers) { final Matcher matcherRef=targetPattern.matcher(target); if (matcherRef.matches()) { return matcherRef; } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\context\exceptions\ContextAdapterResolutionException.java,ContextAdapterResolutionException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\QualityFormatException.java,QualityFormatException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\HttpServletRequestUtil.java,getProtocolVersion,"public static String  (final HttpServletRequest request){ String rtn=""""; final String requestProtocol=request.getProtocol(); if (StringUtils.isNotBlank(requestProtocol)) { rtn=requestProtocol.contains(""1.0"") ? ""1.0"" : ""1.1""; } return rtn; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,RequestHeaderContainer,public  (HttpServletRequest request){ this.request=request; this.headerNames=extractHeaderNames(); this.headerValues=extractHeaderValues(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,containsHeader,@Override public boolean  (String name){ List<HeaderValue> values=getHeaderValues(name); return values != null && !values.isEmpty(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,extractHeaderNames,private List<HeaderName>  (){ List<HeaderName> result=new LinkedList<>(); if (request != null) { Enumeration<String> names=request.getHeaderNames(); if (names != null) { while (names.hasMoreElements()) { result.add(HeaderName.wrap(names.nextElement())); } } } return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,extractHeaderValues,private Map<HeaderName List<HeaderValue>>  (){ Map<HeaderName List<HeaderValue>> valueMap=new HashMap<>(); if (request != null) { for ( HeaderName wrappedName : getHeaderNames()) { valueMap.put(wrappedName extractValues(wrappedName)); } } return valueMap; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,extractValues,private List<HeaderValue>  (HeaderName name){ List<HeaderValue> values=new ArrayList<>(); Enumeration<String> vals=request.getHeaders(name.getName()); while (vals.hasMoreElements()) { values.add(new HeaderValueImpl(vals.nextElement())); } return values; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,getContainerType,@Override public HeaderContainerType  (){ return HeaderContainerType.REQUEST; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,getHeaderNames,"@SuppressWarnings(""PMD.ConstructorCallsOverridableMethod"") @Override public List<HeaderName>  (){ return headerNames; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RequestHeaderContainer.java,getHeaderValues,@Override public List<HeaderValue>  (String name){ return headerValues.get(HeaderName.wrap(name)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\KeyedRegexExtractor.java,KeyedRegexExtractor,public  (){ compiledPatterns=new LinkedList<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\KeyedRegexExtractor.java,addPattern,public void  (String regexString K key){ compiledPatterns.add(new SelectorPattern<>(Pattern.compile(regexString) key)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\KeyedRegexExtractor.java,clear,public void  (){ compiledPatterns.clear(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\regex\KeyedRegexExtractor.java,extract,public ExtractorResult<K>  (String target){ for ( SelectorPattern<K> selector : compiledPatterns) { final Matcher matcher=selector.matcher(target); if (matcher.find() && matcher.groupCount() > 0) { return new ExtractorResult<>(matcher.group(1) selector.getKey()); } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,ResponseHeaderContainer,public  (HttpServletResponse response){ this.response=response; this.headerNames=extractHeaderNames(); this.headerValues=extractHeaderValues(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,containsHeader,@Override public boolean  (String name){ List<HeaderValue> values=getHeaderValues(name); return values != null && !values.isEmpty(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,extractHeaderNames,private List<HeaderName>  (){ List<HeaderName> result=new LinkedList<>(); if (response != null) { Collection<String> names=response.getHeaderNames(); for ( String name : names) { result.add(HeaderName.wrap(name)); } } return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,extractHeaderValues,private Map<HeaderName List<HeaderValue>>  (){ Map<HeaderName List<HeaderValue>> valueMap=new HashMap<>(); if (response != null) { for ( HeaderName headerNameKey : headerNames) { String name=headerNameKey.getName(); List<HeaderValue> values=new ArrayList<>(); values.add(new HeaderValueImpl(response.getHeader(name))); valueMap.put(headerNameKey values); } } return valueMap; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,getContainerType,@Override public HeaderContainerType  (){ return HeaderContainerType.RESPONSE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,getHeaderNames,"@SuppressWarnings(""PMD.ConstructorCallsOverridableMethod"") @Override public List<HeaderName>  (){ return headerNames; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\ResponseHeaderContainer.java,getHeaderValues,@Override public List<HeaderValue>  (String name){ return headerValues.get(HeaderName.wrap(name)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\SetUtilities.java,nullSafeEquals,public static <T>boolean  (Set<T> one Set<T> two){ return one == null ? two == null : (two != null && one.equals(two)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,RouteDestination,"public  (String destinationId String uri double quality){ if (destinationId == null) { throw new IllegalArgumentException(""destinationId cannot be null""); } this.destinationId=destinationId; this.uri=uri != null ? uri : """"; this.quality=quality; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,compareTo,"@Override public int  (Object o){ if (!(o instanceof RouteDestination)) { throw new IllegalArgumentException(""Cannot compare to non RouteDestination instance""); } RouteDestination r=(RouteDestination)o; int result=Double.compare(quality r.quality); if (re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,equals,@Override public boolean  (Object o){ if (!(o instanceof RouteDestination)) { return false; } return compareTo(o) == 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,getContextRemoved,public String  (){ return contextRemoved; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,getDestinationId,public String  (){ return destinationId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,getQuality,public double  (){ return quality; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,getUri,public String  (){ return uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,hashCode,@Override public int  (){ int hash=BASE_HASH; hash=PRIME * hash + (this.destinationId != null ? this.destinationId.hashCode() : 0); hash=PRIME * hash + (this.uri != null ? this.uri.hashCode() : 0); hash=PRIME * hash + (int)Double.doubleToLongBits(this.qua
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\servlet\http\RouteDestination.java,setContextRemoved,public void  (String contextRemoved){ this.contextRemoved=contextRemoved; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\SystemUtils.java,getPid,"public static String  (){ return ManagementFactory.getRuntimeMXBean().getName().split(""@"")[0]; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\DestroyableThreadWrapper.java,DestroyableThreadWrapper,"public  (Thread threadReference Destroyable threadLogic){ if (threadReference == null || threadLogic == null) { throw new IllegalArgumentException(""References for creating a destroyable thread reference must not be null."" + ""Thread Reference: "" + threadReference + "" - Thread Logic: ""+ threadLogic); } this.threadReference=threadReference; this.threadLogic=threadLogic; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\DestroyableThreadWrapper.java,destroy,"@Override @SuppressWarnings(""squid:S2142"") public synchronized void  (){ threadLogic.destroy(); if (threadReference.getState() != Thread.State.NEW) { threadReference.interrupt(); while (threadReference.getState() != Thread.State.TERMINATED) { try { wait(W"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\DestroyableThreadWrapper.java,newThread,public static <T extends Destroyable & Runnable>DestroyableThreadWrapper  (T threadLogic){ return new DestroyableThreadWrapper(new Thread(threadLogic) threadLogic); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\DestroyableThreadWrapper.java,start,"public void  (){ if (threadReference.getState() != Thread.State.NEW) { throw new IllegalStateException(""Thread already started. Thread object: "" + threadReference); } threadReference.start(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,KeyedStackLock,public  (){ waitDepth=0; locked=false; currentKey=null; threadsHoldingLock=new HashSet<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,clearLockStatus,private void  (){ currentKey=null; locked=false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,isLocked,public boolean  (){ return locked; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,lock,"public void  (Object key){ try { lockInterruptibly(key); } catch ( InterruptedException ie) { String keyString=key != null ? key.toString() : ""UNDEFINED""; LOG.warn(""failed lock attempt using key: "" + keyString ie); Thread.currentThread().interrupt(); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,lockInterruptibly,public synchronized void  (Object key) throws InterruptedException { final LockRequest qlr=new LockRequest(Thread.currentThread() key); if (waitDepth > 0 || (locked && !currentKey.equals(key))) { do { waitDepth++; wait(); waitDepth--; } while (locked && currentKey != qlr.getLockKey()); } registerThread(qlr); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,registerThread,"private void  (LockRequest qlr){ LOG.debug(""Registering thread: "" + qlr.getThreadReference().toString()); if (!threadsHoldingLock.add(qlr.getThreadReference())) { LOG.warn(""failed thread registration [lockKey: "" + qlr.getLockKey() + ""]""); } if (!locked) { locked=true; currentKey=qlr.getLockKey(); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,tryLock,public synchronized boolean  (Object key){ if (!locked || currentKey.equals(key)) { registerThread(new LockRequest(Thread.currentThread() key)); return true; } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\KeyedStackLock.java,unlock,"public synchronized void  (Object key){ if (!locked) { throw new IllegalStateException(""Keyed lock is not currently locked""); } if (!currentKey.equals(key)) { throw new IllegalArgumentException(""Key does not match the key used to hold the lock""); } final Thread currentThreadReference=Thread.currentThread(); if (!threadsHoldingLock.remove(currentThreadReference)) { throw new IllegalMonitorStateException(""Thread reference: "" + currentThreadReference.getName() + "" does not have a keyed lock on this lock""); } if (threadsHoldingLock.isEmpty()) { clearLockStatus(); } if (waitDepth > 0) { notify(); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransform.java,AbstractJaxbTransform,public  (JAXBContext ctx){ jaxbContext=ctx; marshallerPool=new SoftReferenceObjectPool<>(new BasePoolableObjectFactory<Marshaller>(){ @Override public Marshaller makeObject(){ try { return jaxbContext.createMarshaller(); } catch ( JAXBException jaxbe) { throw new ResourceConstructionException(jaxbe.getMessage() jaxbe); } } } ); unmarshallerPool=new SoftReferenceObjectPool<>(new BasePoolableObjectFactory<Unmarshaller>(){ @Override public Unmarshaller makeObject(){ try { return jaxbContext.createUnmarshaller(); } catch ( JAXBException jaxbe) { throw new ResourceConstructionException(jaxbe.getMessage() jaxbe); } } } ); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransform.java,getMarshallerPool,protected ObjectPool<Marshaller>  (){ return marshallerPool; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransform.java,getUnmarshallerPool,protected ObjectPool<Unmarshaller>  (){ return unmarshallerPool; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransform.java,makeObject,@Override public Unmarshaller  (){ try { return jaxbContext.createUnmarshaller(); } catch ( JAXBException jaxbe) { throw new ResourceConstructionException(jaxbe.getMessage() jaxbe); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\LockRequest.java,LockRequest,public  (Thread threadReference Object threadKey){ this.threadReference=threadReference; this.lockKey=threadKey; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\LockRequest.java,getLockKey,public Object  (){ return lockKey; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\LockRequest.java,getThreadReference,public Thread  (){ return threadReference; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\JaxbEntityToXml.java,JaxbEntityToXml,public  (JAXBContext ctx){ super(ctx); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\JaxbEntityToXml.java,transform,@Override public String  (final JAXBElement source){ String rtn=null; Marshaller pooledObject; final ObjectPool<Marshaller> objectPool=getMarshallerPool(); try { pooledObject=objectPool.borrowObject(); try (StringWriter w=new StringWriter()){ pooledObject
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,appendPath,"public static String  (String baseUrl String... paths){ String path=concatUris(paths); if (StringUtils.isBlank(path)) { return baseUrl; } StringBuilder url; if (baseUrl.endsWith(""/"")) { url=new StringBuilder(baseUrl.substring(0 baseUrl.length() - 1)); } else { url=new StringBuilder(baseUrl); } return url.append(path).toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,concatUris,"public static String  (String... uris){ StringBuilder builder=new StringBuilder(); for ( String uri : uris) { if (StringUtils.isNotBlank(uri)) { if (!uri.startsWith(""/"") && !uri.isEmpty()) { builder.append(""/""); } builder.append(uri); } } return builder.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,encodeUri,"public static String  (String uri){ String encodedUri=""""; try { encodedUri=URLEncoder.encode(uri ""UTF8""); } catch ( UnsupportedEncodingException ignored) { LOG.trace(""failed to encode uri: "" + uri ignored); } return encodedUri; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,formatUri,"public static String  (String uri){ if (StringUtils.startsWith(uri ""\\"")) { return uri; } if (StringUtils.isBlank(uri) || StringUtils.equalsIgnoreCase(""/"" uri)) { return ""/""; } final StringBuilder externalName=new StringBuilder(uri); if (externalName.charAt(0) != '/') { externalName.insert(0 ""/""); } int doubleSlash=externalName.indexOf(""//""); while (doubleSlash > -1) { externalName.replace(doubleSlash doubleSlash + 2 ""/""); doubleSlash=externalName.indexOf(""//""); } if (externalName.charAt(externalName.length() - 1) == '/' && externalName.length() != 1) { externalName.deleteCharAt(externalName.length() - 1); } return externalName.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,formatUriNoLead,public static String  (String uri){ StringBuilder externalName=new StringBuilder(formatUri(uri)); if (externalName.charAt(0) == '/') { externalName.deleteCharAt(0); } return externalName.toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\StringUriUtilities.java,indexOfUriFragment,public static int  (String uri String uriFragment){ final int index=uri.indexOf(uriFragment); if (uri.length() > uriFragment.length() + index) { return uri.charAt(index + uriFragment.length()) == '/' ? index : -1; } return index; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\StreamToJaxbTransform.java,StreamToJaxbTransform,public  (JAXBContext jc){ super(jc); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\StreamToJaxbTransform.java,transform,@Override public JAXBElement<T>  (final InputStream source){ JAXBElement<T> rtn=null; Unmarshaller pooledObject; final ObjectPool<Unmarshaller> objectPool=getUnmarshallerPool(); try { pooledObject=objectPool.borrowObject(); try { rtn=(JAXBElement<T>)poole
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\JaxbToStreamTransform.java,JaxbToStreamTransform,public  (JAXBContext ctx){ super(ctx); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\jaxb\JaxbToStreamTransform.java,transform,@Override public void  (final JAXBElement source final T target){ Marshaller pooledObject; final ObjectPool<Marshaller> objectPool=getMarshallerPool(); try { pooledObject=objectPool.borrowObject(); try { pooledObject.marshal(source target); } catch ( JAXB
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\Poller.java,Poller,public  (Runnable task long interval){ this.interval=interval; this.task=task; shouldContinue=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\Poller.java,destroy,@Override public synchronized void  (){ shouldContinue=false; notify(); taskThread.interrupt(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\thread\Poller.java,run,"@Override @SuppressWarnings(""squid:S2142"") public void  (){ taskThread=Thread.currentThread(); while (shouldContinue && !taskThread.isInterrupted()) { try { task.run(); synchronized (this) { wait(interval); } } catch ( InterruptedException ie) { LOG.warn("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransform.java,AbstractXslTransform,"public  (Templates transformTemplates){ this.transformationTemplates=transformTemplates; xsltResourcePool=new SoftReferenceObjectPool<>(new BasePoolableObjectFactory<Transformer>(){ @Override public Transformer makeObject(){ try { return transformationTemplates.newTransformer(); } catch ( TransformerConfigurationException configurationException) { throw new XsltTransformationException(""Failed to generate XSLT transformer. Reason: "" + configurationException.getMessage() configurationException); } } } ); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransform.java,getXslTransformerPool,protected ObjectPool<Transformer>  (){ return xsltResourcePool; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransform.java,makeObject,"@Override public Transformer  (){ try { return transformationTemplates.newTransformer(); } catch ( TransformerConfigurationException configurationException) { throw new XsltTransformationException(""Failed to generate XSLT transformer. Reason: "" + configur"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\JaxbXsltToStringTransform.java,JaxbXsltToStringTransform,public  (Templates transformTemplates JAXBContext jaxbContext){ this.construction=new XsltTransformConstruction(); this.transformationTemplates=transformTemplates; this.jaxbContext=jaxbContext; xsltResourcePool=construction.generateXsltResourcePool(transformationTemplates); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\JaxbXsltToStringTransform.java,transform,@Override public String  (final JAXBElement source){ String rtn=null; Transformer pooledObject; try { pooledObject=xsltResourcePool.borrowObject(); try (StringWriter stringWriter=new StringWriter()){ final StreamResult resultWriter=new StreamResult(string
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\StreamToXsltTransform.java,StreamToXsltTransform,public  (Templates transformationTemplates){ super(transformationTemplates); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\StreamToXsltTransform.java,transform,@Override public void  (final InputStream source final OutputStream target){ Transformer pooledObject; final ObjectPool<Transformer> objectPool=getXslTransformerPool(); try { pooledObject=objectPool.borrowObject(); try { pooledObject.transform(new StreamS
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltToStreamTransform.java,XsltToStreamTransform,public  (Templates transformTemplates JAXBContext jaxbContext){ this.jaxbContext=jaxbContext; final XsltTransformConstruction construction=new XsltTransformConstruction(); xsltResourcePool=construction.generateXsltResourcePool(transformTemplates); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltToStreamTransform.java,transform,@Override public void  (final JAXBElement source final T target){ Transformer pooledObject; try { pooledObject=xsltResourcePool.borrowObject(); try { pooledObject.transform(new JAXBSource(jaxbContext source) new StreamResult(target)); } catch ( Exception 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltTransformationException.java,XsltTransformationException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltTransformConstruction.java,generateXsltResourcePool,"public ObjectPool<Transformer>  (final Templates transformationTemplates){ return new SoftReferenceObjectPool<>(new BasePoolableObjectFactory<Transformer>(){ @Override public Transformer makeObject(){ try { return transformationTemplates.newTransformer(); } catch ( TransformerConfigurationException configurationException) { throw new XsltTransformationException(""Failed to generate XSLT transformer. Reason: "" + configurationException.getMessage() configurationException); } } } ); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\transform\xslt\XsltTransformConstruction.java,makeObject,"@Override public Transformer  (){ try { return transformationTemplates.newTransformer(); } catch ( TransformerConfigurationException configurationException) { throw new XsltTransformationException(""Failed to generate XSLT transformer. Reason: "" + configur"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogTemplatesWrapper.java,LogTemplatesWrapper,public  (Templates templates){ this.templates=templates; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogTemplatesWrapper.java,getOutputProperties,@Override public Properties  (){ return templates.getOutputProperties(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogTemplatesWrapper.java,newTransformer,@Override public Transformer  () throws TransformerConfigurationException { Transformer tr=templates.newTransformer(); tr.setErrorListener(new LogErrorListener()); return tr; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogErrorListener.java,error,@Override public void  (TransformerException te){ throw EXCEPTION_LOG.newException(STOCK_ERROR_MSG + te.getMessageAndLocation() te RuntimeException.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogErrorListener.java,fatalError,@Override public void  (TransformerException te){ throw EXCEPTION_LOG.newException(STOCK_ERROR_MSG + te.getMessageAndLocation() te RuntimeException.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\main\java\org\openrepose\commons\utils\xslt\LogErrorListener.java,warning,@Override public void  (TransformerException te){ LOG.warn(te.getMessageAndLocation()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\arrays\ByteArrayComparatorTest.java,shouldIdentifyIdenticalArrays,"@Test public void  (){ final byte[] first=new byte[]{0x1 0x2 0x3}  second=new byte[]{0x1 0x2 0x3}; assertTrue(""Arrays that are identical should return true for asserting that they are equal"" new ByteArrayComparator(first second).arraysAreEqual()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\arrays\ByteArrayComparatorTest.java,shouldReturnFalseForArraysWithDifferingContents,"@Test public void  (){ final byte[] first=new byte[]{0x1 0x2 0x3}  second=new byte[]{0x1 0x2 0x5}; assertFalse(""Arrays that have different contents should return false for asserting that they are equal"" new ByteArrayComparator(first second).arraysAreEqual"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\arrays\ByteArrayComparatorTest.java,shouldReturnFalseForArraysWithDifferingSizes,"@Test public void  (){ final byte[] first=new byte[]{0x1 0x2 0x3}  second=new byte[]{0x1 0x2}; assertFalse(""Arrays that have different sizes should return false for asserting that they are equal"" new ByteArrayComparator(first second).arraysAreEqual()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\encoding\UUIDEncodingProviderTest.java,shouldConvertWellFormedUUIDStrings,@Test public void  (){ final byte[] expectedBytes=new byte[16]; for (int i=0; i < expectedBytes.length; i++) { expectedBytes[i]=1; } final UUID uuid=UUID.fromString(UUIDEncodingProvider.getInstance().encode(expectedBytes)); final byte[] actualBytes=UUIDEn
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\encoding\UUIDEncodingProviderTest.java,shouldEncodeMD5HashValues,"@Test public void  () throws Exception { final String expectedUuidValue=""cecda330-5a61-26cd-1a71-d5fe34a8e302""; final byte[] hashBytes=MessageDigest.getInstance(""MD5"").digest(""object-key"".getBytes()); assertEquals(""UUID generated must match expected value"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ArrayUtilitiesTest.java,testNullSafeCopyNonNull,"@Test public void  (){ String[] array={""element1"" ""element2""}; assertThat(ArrayUtilities.nullSafeCopy(array) equalTo(array)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ArrayUtilitiesTest.java,testNullSafeCopyNonNullByte,"@Test public void  (){ byte[] array=""array"".getBytes(); assertThat(ArrayUtilities.nullSafeCopy(array) equalTo(array)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ArrayUtilitiesTest.java,testNullSafeCopyNull,@Test public void  (){ assertThat(ArrayUtilities.nullSafeCopy((Object[])null) equalTo(null)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ArrayUtilitiesTest.java,testNullSafeCopyNullByte,@Test public void  (){ assertThat(ArrayUtilities.nullSafeCopy((byte[])null) equalTo(null)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\HttpDateTest.java,shouldOutputCorrectFormat,"@Test public void  (){ final String expected=""Sun  06 Nov 1994 08:49:37 GMT""; final Calendar then=Calendar.getInstance(); then.setTimeZone(TimeZone.getTimeZone(""GMT"")); then.set(1994 10 6 8 49 37); assertEquals(""Date format did not match expected"" expecte"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\CommonHttpHeaderTest.java,shouldEqualIgnoringCase,"@Test public void  (){ assertThat(CommonHttpHeader.X_FORWARDED_FOR is(equalToIgnoringCase(""x-forwarded-for""))); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\ExtendedHttpHeaderTest.java,shouldEqualIgnoringCase,"@Test public void  (){ assertThat(ExtendedHttpHeader.X_TTL is(equalToIgnoringCase(""x-ttl""))); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\media\MediaTypeTest.java,shouldReturnFalseIfComparingADifferentType,"@Test public void  (){ MimeType mediaType=MimeType.getMatchingMimeType(""application/vnd.rackspace.services.a-v1.0+xml""); MediaType oneMediaRange=new MediaType(""application/vnd.rackspace.services.a-v1.0+xml"" mediaType -1); assertFalse(oneMediaRange.equals("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\media\MediaTypeTest.java,shouldReturnTrueIfComparingEqualTypes,"@Test public void  (){ MimeType mediaType=MimeType.getMatchingMimeType(""application/vnd.rackspace.services.a-v1.0+xml""); MediaType oneMediaRange=new MediaType(""application/vnd.rackspace.services.a-v1.0+xml"" mediaType -1); MediaType twoMediaRange=new Media"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\ArrayWhiteListParameterFilterFactory.java,ArrayWhiteListParameterFilterFactory,public  (String[] whiteList){ this.whiteList=Arrays.copyOf(whiteList whiteList.length); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\ArrayWhiteListParameterFilterFactory.java,newInstance,@Override public ParameterFilter  (){ return new ArrayWhiteListParameterFilter(whiteList); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldCompareStringValuesWhenQualityFactorsAreEqual,"@Test public void  (){ final HeaderValue first=new HeaderValueImpl(""equal"" 0.8)  second=new HeaderValueImpl(""equal"" 0.8)  third=new HeaderValueImpl(""eqlam"" 0.8); assertEquals(""Comparing header values must match equal values"" 0 first.compareTo(second)); as"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldHandleNullHeaderValueString,"@Test public void  (){ final HeaderValue first=new HeaderValueImpl("""" 0.8)  second=new HeaderValueImpl(null 0.8); assertEquals(""Null header value strings must compare against valid header value strings as lesser than valid values"" 1 first.compareTo(second"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldHandleNullHeaderValues,"@Test public void  (){ final HeaderValue first=new HeaderValueImpl("""" 0.8); assertEquals(""Null header values must compare against valid values as lesser than valid values"" 1 first.compareTo(null)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldIdentifyWhenHeaderValueHasNoQualityFactor,"@Test public void  (){ final HeaderValueImpl headerValue=new HeaderValueImpl(""value"" Collections.<String String>emptyMap()); assertFalse(""Header value correctly identify whether or not it has an assigned quality factor"" headerValue.hasQualityFactor()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldOutPutEmptyWithNullValue,"@Test public void  (){ final HeaderValueImpl headerValue=new HeaderValueImpl(null Collections.<String String>emptyMap()); assertEquals(""Header value should be blank when passed null."" """" headerValue.toString()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldOutputValueParameters,"@Test public void  (){ final List<Pattern> patterns=new ArrayList<>(); for ( int i : Arrays.asList(1 2 3)) { patterns.add(Pattern.compile("".*;?(param"" + i + ""=""+ i+ "");?.*"")); } final Map<String String> parameters=new HashMap<>(); parameters.put(""param1"" "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldOutputValueQualityFactor,"@Test public void  (){ final HeaderValueImpl headerValue=new HeaderValueImpl(""value"" 0.5); assertEquals(""Header value must match expected output"" ""value;q=0.5"" headerValue.toString()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldOutputValueWithNoParameters,"@Test public void  (){ final HeaderValueImpl headerValue=new HeaderValueImpl(""value"" Collections.<String String>emptyMap()); assertEquals(""Header value should only contain value when no parameters are present."" ""value"" headerValue.toString()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldReturnEqualsWhenTwoHeadersAreTheSameEvenWithDifferingQualities,"@Test public void  (){ final Map<String String> parameters=new HashMap<>(); parameters.put(""param1"" ""1""); parameters.put(""param2"" ""2""); parameters.put(""param3"" ""3""); final HeaderValueImpl headerValue=new HeaderValueImpl(""value"" parameters); parameters.put"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldReturnNegativeOneWhenNoQualityFactorCanBeDetermined,"@Test public void  (){ final HeaderValueImpl headerValue=new HeaderValueImpl(""value"" Collections.<String String>emptyMap()); assertThat(""Header value must match expected output"" headerValue.getQualityFactor() equalTo(1.0)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldReturnThrowNumberFormatExceptionForUnparsableQualityFactors,"@Test(expected=MalformedHeaderValueException.class) public void  (){ final Map<String String> parameters=new HashMap<>(); parameters.put(""q"" ""nan""); final HeaderValueImpl headerValue=new HeaderValueImpl(""value"" parameters); assertThat(""Header value must m"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\header\HeaderValueImplTest.java,shouldUseQualityFactor,"@Test public void  (){ final HeaderValue first=new HeaderValueImpl("""" 0.8)  second=new HeaderValueImpl("""" 0.2); assertEquals(""Matching quality factors and values must return 0"" 0 first.compareTo(first)); assertEquals(""Higher quality factors must return 1"""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\media\MimeTypeTest.java,shouldReturnGuessedMediaType,"@Test public void  (){ String mediaTypeString=""text/xml""; MimeType returnedMediaType=MimeType.guessMediaTypeFromString(mediaTypeString); assertEquals(returnedMediaType.getName() mediaTypeString); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\media\MimeTypeTest.java,shouldReturnUnknownMediaType,"@Test public void  (){ String mediaTypeString=""application/what'sUpDoc""; MimeType returnedMediaType=MimeType.getMatchingMimeType(mediaTypeString); assertEquals(MimeType.UNKNOWN returnedMediaType); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\ArrayWhiteListParameterFilter.java,ArrayWhiteListParameterFilter,public  (String[] whiteList){ this.whiteList=Arrays.copyOf(whiteList whiteList.length); ; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\ArrayWhiteListParameterFilter.java,shouldAccept,@Override public boolean  (String name){ for ( String whitelistName : whiteList) { if (name.equals(whitelistName)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,setUp,@Before public void  (){ b=mock(ByteBuffer.class); buffer=new SynchronizedByteBuffer(b); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallAvailable,@Test public void  (){ int expected=42; when(b.available()).thenReturn(expected); int avail=buffer.available(); verify(b).available(); assertEquals(expected avail); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallClear,@Test public void  (){ buffer.clear(); verify(b).clear(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallCopy,@Test public void  (){ ByteBuffer expected=mock(ByteBuffer.class); when(b.copy()).thenReturn(expected); ByteBuffer actual=buffer.copy(); verify(b).copy(); assertThat(actual equalTo(expected)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallGet,@Test public void  () throws IOException { byte expected=7; when(b.get()).thenReturn(expected); byte actual=buffer.get(); verify(b).get(); assertEquals(expected actual); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallGetBytes,@Test public void  () throws IOException { byte[] someArray=new byte[10]; buffer.get(someArray); byte[] expected=someArray; verify(b).get(eq(expected)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallGetBytesWithOffset,@Test public void  () throws IOException { byte[] someArray=new byte[10]; int off=5; int len=1; buffer.get(someArray off len); byte[] expected=someArray; verify(b).get(eq(expected) eq(off) eq(len)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallPutByte,@Test public void  () throws IOException { byte byteVal=1; buffer.put(byteVal); verify(b).put(eq(byteVal)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallPutByteArray,@Test public void  () throws IOException { byte[] byteVal={1 2}; buffer.put(byteVal); verify(b).put(eq(byteVal)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallPutByteArrayWithOffset,@Test public void  () throws IOException { byte[] byteVal={1 2}; int off=3; int len=7; buffer.put(byteVal off len); verify(b).put(eq(byteVal) eq(off) eq(len)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallRemaining,@Test public void  (){ int expected=17; when(b.remaining()).thenReturn(expected); int actual=buffer.remaining(); verify(b).remaining(); assertEquals(expected actual); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\SynchronizedByteBufferTest.java,shouldCallSkip,@Test public void  (){ int expected=5; when(b.skip(anyInt())).thenReturn(expected); int len=10; int actual=buffer.skip(len); verify(b).skip(eq(len)); assertEquals(expected actual); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\BufferCapacityExceptionTest.java,shouldPreserveThrowable,"@Test public void  (){ Throwable cause=new Exception(""I am some trouble maker""); BufferCapacityException exception=new BufferCapacityException(""Message"" cause); assertEquals(cause exception.getCause()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,fill,private static byte[]  (byte[] array){ for (int i=0; i < array.length; i++) { array[i]=(byte)(i % Byte.MAX_VALUE); } return array; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldAllocateSufficientBuffer,"@Test public void  () throws IOException { byte[] dataWritten=fill(new byte[DEFAULT_SIZE + 10]); sourceBuffer.put(dataWritten); ByteBuffer dest=sourceBuffer.copy(); byte[] dataRead=new byte[dataWritten.length]; dest.get(dataRead); assertArrayEquals(""Data "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldClearEmptyBuffer,"@Test public void  (){ int expected=sourceBuffer.remaining(); sourceBuffer.clear(); int actual=sourceBuffer.remaining(); assertEquals(""Remaining should be unchanged after clearing empty buffer"" expected actual); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldClearPartiallyFullBuffer,"@Test public void  () throws IOException { int expected=sourceBuffer.remaining(); sourceBuffer.put(fill(new byte[20])); sourceBuffer.clear(); int actual=sourceBuffer.remaining(); assertThat(""Remaining should be entire buffer after clearing"" actual greater"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldCopyBuffer,"@Test public void  () throws Exception { ByteBuffer dest=sourceBuffer.copy(); assertNotNull(dest); assertEquals(""Dest and source available should be the same"" sourceBuffer.available() dest.available()); assertEquals(""Dest and source remaining should be th"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldCopyWrappedBuffers,@Test public void  () throws IOException { byte[] dataWritten=fill(new byte[DEFAULT_SIZE]); sourceBuffer.put(new byte[10]); sourceBuffer.get(new byte[10]); sourceBuffer.put(dataWritten); ByteBuffer dest=sourceBuffer.copy(); byte[] dataRead=new byte[dataWr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldGrowBuffer,"@Test public void  () throws IOException { final int expectedAvailable=2048; buffer.put(new byte[6]); buffer.get(new byte[6]); assertEquals(""Buffer size should should have 2048 available after growing"" expectedAvailable buffer.remaining()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldGrowBufferAndPreserveByteOrder,@Test public void  () throws IOException { final byte[] expectedHeader=new byte[8]; for (int i=0; i < expectedHeader.length; i++) { expectedHeader[i]=(byte)i; } buffer.put(expectedHeader); buffer.put(new byte[4096]); final byte[] retrievedHeader=new byte[
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldGrowBufferWhenExactlyFull,"@Test public void  () throws IOException { final int expectedAvailable=2048; buffer.put((byte)0x01); buffer.put((byte)0x02); buffer.put((byte)0x03); buffer.put((byte)0x04); buffer.put((byte)0x05); buffer.get(new byte[5]); assertEquals(""Buffer size should "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldHandleLargeArrays,@Test public void  () throws IOException { buffer=new CyclicByteBuffer(); final byte[] randomBytes=new byte[64]; new Random(System.nanoTime()).nextBytes(randomBytes); buffer.put(randomBytes); final byte[] expected=new byte[32]; System.arraycopy(randomByte
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldHaveDefaultBufferSizeAvailable,"@Test public void  (){ buffer.allocate(); assertEquals(""Should have default buffer size"" DEFAULT_SIZE buffer.remaining()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldHonorOffsets,@Test public void  () throws IOException { buffer=new CyclicByteBuffer(); final byte[] randomBytes=new byte[64]; new Random(System.nanoTime()).nextBytes(randomBytes); buffer.put(randomBytes); final byte[] expected=new byte[32]; System.arraycopy(randomByte
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldPreserveData,"@Test public void  () throws IOException { byte[] dataWritten=fill(new byte[10]); sourceBuffer.put(dataWritten); ByteBuffer dest=sourceBuffer.copy(); byte[] dataRead=new byte[dataWritten.length]; dest.get(dataRead); assertArrayEquals(""Data read from clone"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldPutIntoBuffer,"@Test public void  () throws IOException { final byte expected=0x1; buffer.put(expected); assertEquals(""Byte in buffer should be same as the byte put into the buffer"" expected buffer.get()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldReadFromFullBuffer,"@Test public void  () throws IOException { int expected=2048; sourceBuffer.put(fill(new byte[2048])); assertEquals(""Available should be entire buffer"" expected sourceBuffer.available()); byte[] buffer=new byte[2048]; sourceBuffer.get(buffer); assertEquals"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldReadUntilSuppliedByteArrayIsFull,"@Test public void  () throws IOException { final int expected=32; buffer.put(new byte[64]); assertEquals(""Byte buffer should fill given array and return the amount read"" expected buffer.get(new byte[32])); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldReturnNegativeOneForSingleByteReadsWithEmptyBuffer,"@Test public void  () throws IOException { assertEquals(""Buffer should return negative one on empty single byte read"" -1 buffer.get()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldReturnReadWithEmptyBuffer,"@Test public void  () throws IOException { assertEquals(""Buffer should return zero when a read is made against an empty buffer"" 0 buffer.get(new byte[16])); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldSkipBytes,"@Test public void  () throws IOException { buffer.put((byte)1); buffer.put(new byte[256]); buffer.put((byte)100); assertEquals(""Header byte before skipping must mach expected"" 1 buffer.get()); buffer.skip(256); assertEquals(""Trailing byte after skipping m"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldSkipToEndOfData,"@Test public void  () throws IOException { byte[] data=fill(new byte[10]); buffer.put(data); int expected=data.length; int actual=buffer.skip(DEFAULT_SIZE); assertEquals(""Should skip to end of buffer"" expected actual); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldWrapPuts,"@Test public void  () throws IOException { buffer=new CyclicByteBuffer(HeapspaceByteArrayProvider.getInstance() 10 0 0 false false); byte[] data=fill(new byte[7]); buffer.put(data); buffer.get(data); assertEquals(""Should have 10 remaining"" 10 buffer.remai"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldWrapPutsAndPreserveOrder,"@Test public void  () throws IOException { byte[] data1Written=new byte[10]; buffer.put(fill(data1Written)); assertEquals(""Should reduce remaining"" DEFAULT_SIZE - data1Written.length buffer.remaining()); byte[] data1Read=new byte[10]; buffer.get(data1Read"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,shouldWrapSkip,"@Test public void  () throws IOException { buffer=new CyclicByteBuffer(HeapspaceByteArrayProvider.getInstance() 10 0 0 false false); byte[] data=new byte[]{1 2 3 4 5 6 7}; buffer.put(data); buffer.get(data); assertEquals(""Should have 10 remaining"" 10 buff"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\buffer\CyclicByteBufferTest.java,standUp,@Before public void  (){ sourceBuffer=new CyclicByteBuffer(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,before,"@Before public void  (){ final ParameterFilterFactory parameterFilterFactory=new ArrayWhiteListParameterFilterFactory(new String[]{""a"" ""b"" ""c"" ""d""}); queryStringNormalizer=new QueryStringNormalizer(parameterFilterFactory true); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,shouldAlphabetizeParameters,"@Test public void  (){ final String query=""c=124&a=111&d=4&b=8271""; final String actual=queryStringNormalizer.normalize(query); final String[] queryParamPairs=actual.split(""&""); assertEquals(""URI normalizer must organize query parameters in alphabetical o"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,shouldFilterBadParameters,"@Test public void  (){ final String query=""cache-busting=2395819035&a=1""; final String actual=queryStringNormalizer.normalize(query); assertThat(""URI normalizer must filter bad query parameters."" actual not(containsString(""cache-busting""))); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,shouldNormalizeContiguousCollections,"@Test public void  (){ final String query=""b=4&c=111&a=1&a=2&a=3&d=441""; final String actual=queryStringNormalizer.normalize(query); final String[] queryParamPairs=actual.split(""&""); assertEquals(""URI normalizer must organize query parameters in alphabeti"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\http\normal\QueryStringNormalizerTest.java,shouldNormalizeSplitCollections,"@Test public void  (){ final String query=""a=1&b=4&c=111&a=3&d=441&a=2""; final String actual=queryStringNormalizer.normalize(query); final String[] queryParamPairs=actual.split(""&""); assertEquals(""URI normalizer must organize query parameters in alphabeti"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,answer,@Override public Object  (InvocationOnMock invocation) throws Throwable { int count=0; Object[] args=invocation.getArguments(); for ( Object arg : args) { if (arg instanceof byte[]) { byte[] bytes=(byte[])arg; for (int i=0; i < bytes.length; i++) { bytes[
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,anyByteArray,public static byte[]  (){ return argThat(new IsByteArray()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,checkArrayValues,private void  (byte[] array){ for (int i=0; i < array.length; i++) { assertEquals((byte)i array[i]); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,matches,@Override public boolean  (Object argument){ boolean result=(argument instanceof byte[]); return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,setUp,@Before public void  () throws IOException { buffer=mock(ByteBuffer.class); when(buffer.available()).thenReturn(10); when(buffer.get()).thenReturn((byte)1); when(buffer.get(anyByteArray())).thenAnswer(new ByteReadAnswer()); when(buffer.get(anyByteArray() 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldCallSkipUntilTotalBytesSkipped,@Test public void  () throws IOException { int expected=100; stream.skip(expected); verify(buffer times(10)).skip(anyInt()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldExitIfZeroSkipped,@Test public void  () throws IOException { int expected=0; assertEquals(expected stream.skip(MAGIC_SKIP)); verify(buffer times(1)).skip(anyInt()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldFillByteArray,@Test public void  () throws IOException { byte[] array=new byte[5]; assertEquals(array.length stream.read(array)); checkArrayValues(array); verify(buffer).get(anyByteArray()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldIgnoreNegativeSkip,@Test public void  () throws IOException { int expected=0; assertEquals(expected stream.skip(-10)); verify(buffer times(0)).skip(anyInt()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldIgnoreZeroSkip,@Test public void  () throws IOException { int expected=0; assertEquals(expected stream.skip(0)); verify(buffer times(0)).skip(anyInt()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldNotSkipMoreThanMaxIntBytesAtOnce,"@Test public void  () throws IOException { long expected=3 * new Long(Integer.MAX_VALUE) + 1; long actual=stream.skip(expected); assertEquals(""Should skip requested number of bytes"" expected actual); verify(buffer times(4)).skip(anyInt()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldNotSupportMark,"@Test public void  (){ assertFalse(""Should not support marking"" stream.markSupported()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldPassOffsetAndLength,@Test public void  () throws IOException { byte[] array=new byte[5]; assertEquals(array.length stream.read(array 2 5)); checkArrayValues(array); verify(buffer).get(anyByteArray() eq(2) eq(5)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldPassSkipValueToBuffer,@Test public void  () throws IOException { int expected=10; stream.skip(expected); verify(buffer).skip(expected); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldReturnAvailableIfSourceHasDataAvailable,"@Test public void  () throws IOException { int expected=10; assertEquals(""Should have data available"" expected stream.available()); verify(buffer).available(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldReturnOneByteWhenReading,@Test public void  () throws IOException { byte expected=1; assertEquals(expected stream.read()); verify(buffer).get(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldStopReadingOnNoBytesRemaining,@Test public void  () throws Exception { final byte[] bytes=new byte[]{1 2 3}; ByteBuffer localBuffer=new CyclicByteBuffer(); localBuffer.put(bytes); stream=new ByteBufferInputStream(localBuffer.copy()); for (int c=0; c < 4; c++) { if (c == 3) { assertEqu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldThrowExceptionWhenCheckingAvailable,@Test(expected=IOException.class) public void  () throws IOException { stream.available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldThrowExceptionWhenClosing,@Test(expected=IOException.class) public void  () throws IOException { stream.close(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldThrowExceptionWhenReading,@Test(expected=IOException.class) public void  () throws IOException { stream.read(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldThrowExceptionWhenReadingByteBuffer,@Test(expected=IOException.class) public void  () throws IOException { byte[] bytes=new byte[0]; stream.read(bytes); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldThrowExceptionWhenReadingByteBufferWithOffset,@Test(expected=IOException.class) public void  () throws IOException { byte[] bytes=new byte[0]; stream.read(bytes 0 10); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,shouldThrowExceptionWhenSkipping,@Test(expected=IOException.class) public void  () throws IOException { stream.skip(0); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,testRead_3args,"@Test public void  () throws Exception { System.out.println(""read""); byte[] b=null; int off=0; int len=0; ByteBufferInputStream instance=null; int expResult=0; int result=instance.read(b off len); assertEquals(expResult result); fail(""The test case is a p"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,testRead_byteArr,"@Test public void  () throws Exception { System.out.println(""read""); byte[] b=null; ByteBufferInputStream instance=null; int expResult=0; int result=instance.read(b); assertEquals(expResult result); fail(""The test case is a prototype.""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferInputStreamTest.java,testSkip,"@Test public void  () throws Exception { System.out.println(""skip""); long n=0L; ByteBufferInputStream instance=null; long expResult=0L; long result=instance.skip(n); assertEquals(expResult result); fail(""The test case is a prototype.""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,setUp,@Before public void  (){ buffer=mock(ByteBuffer.class); when(buffer.available()).thenReturn(BUFFER_SIZE); stream=new ByteBufferOutputStream(buffer); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,shouldCallFlushStream,@Test public void  () throws IOException { stream.flush(); verify(buffer).skip(anyInt()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,shouldCallWriteByte,@Test public void  () throws IOException { int b=1; stream.write(b); verify(buffer).put(eq((byte)b)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,shouldFlushStream,@Test public void  () throws IOException { stream.flushStream(); verify(buffer times(1)).skip(BUFFER_SIZE); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,shouldThrowExceptionIfStreamIsClosed,@Test(expected=IOException.class) public void  () throws IOException { stream.close(); stream.flush(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferOutputStreamTest.java,shouldWriteByte,@Test public void  () throws IOException { int b=1; stream.writeByte(b); verify(buffer).put(eq((byte)b)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStreamTest.java,setUp,@Before public void  (){ buffer=mock(ByteBuffer.class); stream=new ByteBufferServletOutputStream(buffer); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStreamTest.java,shouldWriteByte,@Test public void  () throws IOException { int b=1; stream.write(b); verify(buffer).put(eq((byte)b)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStreamTest.java,shouldWriteBytes,@Test public void  () throws IOException { byte[] bytes=new byte[10]; stream.write(bytes); verify(buffer).put(eq(bytes)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ByteBufferServletOutputStreamTest.java,shouldWriteBytesWithOffsetAndLength,@Test public void  () throws IOException { byte[] bytes=new byte[10]; int offset=1; int length=10; stream.write(bytes offset length); verify(buffer).put(eq(bytes) eq(offset) eq(length)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,setUp,@Before public void  (){ digest=mock(MessageDigest.class); when(digest.digest()).thenReturn(digestBytes); stream=new MessageDigesterOutputStream(digest); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,shouldGetDigestBytes,@Test public void  () throws IOException { stream.closeStream(); byte[] actual=stream.getDigest(); assertArrayEquals(digestBytes actual); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,shouldGetDigestWhenClosingStream,@Test public void  () throws IOException { stream.closeStream(); verify(digest).digest(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,shouldResetDigestWhenFlushingStream,@Test public void  () throws IOException { stream.flushStream(); verify(digest).reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\MessageDigesterOutputStreamTest.java,shouldWriteBytes,@Test public void  () throws IOException { int b=1; stream.write(b); verify(digest).update(eq((byte)b)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,setUp,@Before public void  (){ stream1=InputStreamMerger.wrap(STREAM_DATA1); stream2=InputStreamMerger.wrap(STREAM_DATA2); stream3=InputStreamMerger.wrap(STREAM_DATA3); combinedStream=(InputStreamMerger)InputStreamMerger.merge(stream1 stream2 stream3); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,setup,@Before public void  (){ stream=InputStreamMerger.merge(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldCloseAllStreams,@Test public void  () throws IOException { merged.close(); verify(stream1).close(); verify(stream2).close(); verify(stream3).close(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldHandleEmptyStreams,"@Test public void  () throws IOException { InputStream emptyStream1=InputStreamMerger.wrap(""""); InputStream emptyStream2=InputStreamMerger.wrap(""""); InputStream emptyStream3=InputStreamMerger.wrap(""""); InputStream emptyStream=InputStreamMerger.merge(empty"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldHandleNullStreams1,@Test public void  () throws IOException { InputStream stream=InputStreamMerger.merge(null stream2 stream3); String expected=STREAM_DATA2 + STREAM_DATA3; BufferedReader reader=new BufferedReader(new InputStreamReader(stream)); String result=reader.readLin
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldHandleNullStreams2,@Test public void  () throws IOException { InputStream stream=InputStreamMerger.merge(stream1 null stream3); String expected=STREAM_DATA1 + STREAM_DATA3; BufferedReader reader=new BufferedReader(new InputStreamReader(stream)); String result=reader.readLin
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldHandleNullStreams3,@Test public void  () throws IOException { InputStream stream=InputStreamMerger.merge(stream1 stream2 null); String expected=STREAM_DATA1 + STREAM_DATA2; BufferedReader reader=new BufferedReader(new InputStreamReader(stream)); String result=reader.readLin
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldHandleNullStreams4,@Test public void  () throws IOException { InputStream stream=InputStreamMerger.merge((InputStream)null); int expected=-1; assertEquals(expected stream.read()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldHandleNullStreams5,@Test public void  () throws IOException { InputStream stream=InputStreamMerger.merge(); int expected=-1; assertEquals(expected stream.read()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldHandleSkippingBeyondEndOfData,@Test public void  () throws IOException { long expected=(STREAM_DATA1 + STREAM_DATA2 + STREAM_DATA3).length(); long toSkip=expected + 10; long actual=combinedStream.skip(toSkip); assertEquals(expected actual); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldIgnoreMarkRequests,@Test public void  (){ stream.mark(1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldMergeMultipleInputStreams,@Test public void  () throws IOException { BufferedReader reader=new BufferedReader(new InputStreamReader(combinedStream)); String result=reader.readLine(); assertEquals(STREAM_DATA1 + STREAM_DATA2 + STREAM_DATA3 result); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldNotSupportMarking,@Test public void  (){ assertFalse(stream.markSupported()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldNotSupportReset,@Test(expected=IOException.class) public void  () throws IOException { combinedStream.reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldReadEntireStream,@Test public void  () throws IOException { long expected=(STREAM_DATA1 + STREAM_DATA2 + STREAM_DATA3).length(); int value=combinedStream.read(); int actualReadCount=0; while (value >= 0) { actualReadCount++; value=combinedStream.read(); } assertEquals(exp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldReadIntoByteArray,@Test public void  () throws IOException { byte[] bytes=new byte[(STREAM_DATA1 + STREAM_DATA2).length()]; String expected=STREAM_DATA1 + STREAM_DATA2; int readLength=combinedStream.read(bytes); assertEquals(bytes.length readLength); String actual=new Stri
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldReturnAvailableOfCurrentStream,@Test public void  () throws IOException { int available=combinedStream.available(); assertEquals(STREAM_DATA1.length() available); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldSkipMultipleStreamsOfData,@Test public void  () throws IOException { long toSkip=(STREAM_DATA1 + STREAM_DATA2).length(); long skipped=combinedStream.skip(toSkip); assertEquals(toSkip skipped); BufferedReader reader=new BufferedReader(new InputStreamReader(combinedStream)); String 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldSkipNullStreams,@Test public void  () throws IOException { mergedWithNull.close(); verify(stream1).close(); verify(stream2).close(); verify(stream3).close(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldSkipWithinFirstStream,@Test public void  () throws IOException { long expected=STREAM_DATA1.length() - 1; long actual=combinedStream.skip(expected); assertEquals(expected actual); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\InputStreamMergerTest.java,shouldWrapAStringAsAStream,@Test public void  () throws IOException { BufferedReader reader=new BufferedReader(new InputStreamReader(stream1)); String result=reader.readLine(); assertEquals(STREAM_DATA1 result); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,MySerializableObject, (String field1 String field2){ this.field1=field1; this.field2=field2; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,equals,@Override public boolean  (Object other){ boolean result=false; if (other != null && other instanceof MySerializableObject) { MySerializableObject o=(MySerializableObject)other; result=(field1 == null && o.field1 == null || field1.equals(o.field1)) && (fi
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,setUp,"@Before public void  (){ serializer=new ObjectSerializer(this.getClass().getClassLoader()); target=new MySerializableObject(""x123"" ""y123""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,shouldReadSerializeObject,@Test public void  () throws IOException  ClassNotFoundException { byte[] serialized=serializer.writeObject(target); assertNotNull(serialized); Serializable actual=serializer.readObject(serialized); assertNotNull(actual); assertEquals(target actual); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\ObjectSerializerTest.java,shouldSerializeObject,@Test public void  () throws IOException { byte[] serialized=serializer.writeObject(target); assertNotNull(serialized); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\SimpleBufferInputStreamTest.java,shouldReadTillBufferIsEmpty,"@Test public void  () throws Exception { final ByteBuffer sbb=new CyclicByteBuffer(); sbb.put(""expected"".getBytes()); final InputStream is=new ByteBufferInputStream(sbb); final byte[] bytes=new byte[1024]; int b  i; for (i=0; (b=is.read()) != -1; i++) { b"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\SimpleBufferInputStreamTest.java,shouldReadTillBufferIsEmptyUsingByteArrayRead,"@Test public void  () throws Exception { final ByteBuffer sbb=new CyclicByteBuffer(); sbb.put(""expected"".getBytes()); final InputStream is=new ByteBufferInputStream(sbb); final byte[] bytes=new byte[1024]; int read=is.read(bytes); assertEquals(""expected"" "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,setUp,@Before public void  (){ stream1=mock(OutputStream.class); stream2=mock(OutputStream.class); stream3=mock(OutputStream.class); splitter=new OutputStreamSplitter(stream1 stream2 stream3); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,shouldCloseAllStreams,@Test public void  () throws IOException { splitter.close(); verify(stream1).close(); verify(stream2).close(); verify(stream3).close(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,shouldFlushAllStreams,@Test public void  () throws IOException { splitter.flush(); verify(stream1).flush(); verify(stream2).flush(); verify(stream3).flush(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,shouldWriteBytesToAllStreams,@Test public void  () throws IOException { byte[] value={1 2 3 4 5}; splitter.write(value); verify(stream1).write(eq(value)); verify(stream2).write(eq(value)); verify(stream3).write(eq(value)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,shouldWriteBytesToAllStreams2,@Test public void  () throws IOException { byte[] value={1 2 3 4 5}; int i=3; int i1=7; splitter.write(value i i1); verify(stream1).write(eq(value) eq(i) eq(i1)); verify(stream2).write(eq(value) eq(i) eq(i1)); verify(stream3).write(eq(value) eq(i) eq(i1))
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\OutputStreamSplitterTest.java,shouldWriteToAllStreams,@Test public void  () throws IOException { int value=1; splitter.write(value); verify(stream1).write(eq(value)); verify(stream2).write(eq(value)); verify(stream3).write(eq(value)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStreamTest.java,shouldAllowReading,"@Test public void  () throws Exception { final LimitedReadInputStream stream=new LimitedReadInputStream(10 mockedInputStream); assertEquals(""LimitedReadInputStream must delegate reads to the wrapped InputStream"" 1 stream.read()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStreamTest.java,shouldHaltReadingWhenLimitIsBreached,@Test(expected=ReadLimitReachedException.class) public void  () throws Exception { final LimitedReadInputStream stream=new LimitedReadInputStream(0 mockedInputStream); stream.read(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\LimitedReadInputStreamTest.java,standUp,@Before public void  () throws Exception { mockedInputStream=mock(InputStream.class); when(mockedInputStream.read()).thenReturn(1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,setup,@Before public void  (){ statusCodeConstraint=new StatusCodeConstraint(INCLUSIVE_PASS); statusCodeConstraint.addStatusCode(EXISTENT_STATUS_CODE); response=mock(HttpServletResponse.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,shouldReturnFalseWhenCodeExists,@Test public void  (){ when(response.getStatus()).thenReturn(EXISTENT_STATUS_CODE); assertFalse(statusCodeConstraint.pass(response)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,shouldReturnFalseWhenNotCodeExists,@Test public void  (){ when(response.getStatus()).thenReturn(NON_EXISTENT_STATUS_CODE); assertFalse(statusCodeConstraint.pass(response)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,shouldReturnTrueWhenCodeExists,@Test public void  (){ when(response.getStatus()).thenReturn(EXISTENT_STATUS_CODE); assertTrue(statusCodeConstraint.pass(response)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\constraint\StatusCodeConstraintTest.java,shouldReturnTrueWhenNotCodeExists,@Test public void  (){ when(response.getStatus()).thenReturn(NON_EXISTENT_STATUS_CODE); assertTrue(statusCodeConstraint.pass(response)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,setUp,@Before public void  (){ stream=mock(InputStream.class); wrapper=new ServletInputStreamWrapper(stream); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldDelegateForAvailablity,@Test public void  () throws Exception { wrapper.available(); verify(stream).available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldDelegateForClose,@Test public void  () throws Exception { wrapper.close(); verify(stream).close(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldDelegateMark,@Test public void  () throws IOException { wrapper.mark(10); verify(stream).mark(10); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldDelegateMarkSupported,@Test public void  () throws IOException { wrapper.markSupported(); verify(stream).markSupported(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldDelegateReset,@Test public void  () throws IOException { wrapper.reset(); verify(stream).reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldDelegateSkip,@Test public void  () throws IOException { wrapper.skip(10L); verify(stream).skip(10L); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldReadBytesFromInputStream,@Test public void  () throws IOException { byte[] bArr=new byte[10]; wrapper.read(bArr); verify(stream).read(bArr); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldReadConstrainedBytesFromInputStream,@Test public void  () throws IOException { byte[] bArr=new byte[10]; wrapper.read(bArr 2 2); verify(stream).read(bArr 2 2); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\stream\ServletInputStreamWrapperTest.java,shouldReadFromInputStream,@Test public void  () throws IOException { wrapper.read(); verify(stream).read(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldBeEqual1,"@Test public void  (){ final LogArgumentGroupExtractor e1=LogArgumentGroupExtractor.instance("""" ""!100 200 300"" ""SOMEVAR"" """" ""i""); final LogArgumentGroupExtractor e2=LogArgumentGroupExtractor.instance("""" ""!100 200 300"" ""SOMEVAR"" """" ""i""); assertEquals(e1 e2"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldExtractEscapedPercent,"@Test public void  (){ final String template=""%%""; final LogArgumentGroupExtractor expected=LogArgumentGroupExtractor.instance("""" """" """" """" ""%""); final Matcher m=PATTERN.matcher(template); m.find(); LogArgumentGroupExtractor extractor=new LogArgumentGroupE"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldExtractFormats,"@Test public void  (){ final String template=""%>!100 200 300{SOMEVAR format1 format2}i""; final LogArgumentGroupExtractor expected=LogArgumentGroupExtractor.instance("">"" ""!100 200 300"" ""SOMEVAR"" ""format1 format2"" ""i""); final Matcher m=PATTERN.matcher(templ"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldExtractFormats2,"@Test public void  (){ final String template=""%>!100 200 300{SOMEVAR format1 format2}i""; final LogArgumentGroupExtractor expected=LogArgumentGroupExtractor.instance("">"" ""!100 200 300"" ""SOMEVAR"" ""format1 format2"" ""i""); final Matcher m=PATTERN.matcher(templ"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldExtractLifeCycleModifiers,"@Test public void  (){ final String template=""%>!100 200 300{SOMEVAR}i""; final LogArgumentGroupExtractor expected=LogArgumentGroupExtractor.instance("">"" ""!100 200 300"" ""SOMEVAR"" """" ""i""); final Matcher m=PATTERN.matcher(template); m.find(); LogArgumentGrou"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldExtractNegatedStatusCodes,"@Test public void  (){ final String template=""%!100 200 300{SOMEVAR}i""; final LogArgumentGroupExtractor expected=LogArgumentGroupExtractor.instance("""" ""!100 200 300"" ""SOMEVAR"" """" ""i""); final Matcher m=PATTERN.matcher(template); m.find(); LogArgumentGroupE"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldExtractStatusCodes,"@Test public void  (){ final String template=""%100 200 300{SOMEVAR}i""; final LogArgumentGroupExtractor expected=LogArgumentGroupExtractor.instance("""" ""100 200 300"" ""SOMEVAR"" """" ""i""); final Matcher m=PATTERN.matcher(template); m.find(); LogArgumentGroupExt"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldExtractVariables,"@Test public void  (){ final String template=""%{SOMEVAR}i""; final LogArgumentGroupExtractor expected=LogArgumentGroupExtractor.instance("""" """" ""SOMEVAR"" """" ""i""); final Matcher m=PATTERN.matcher(template); m.find(); LogArgumentGroupExtractor extractor=new L"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldHaveSameHashCode1,"@Test public void  (){ final LogArgumentGroupExtractor e1=LogArgumentGroupExtractor.instance("""" ""!100 200 300"" ""SOMEVAR"" """" ""i""); final LogArgumentGroupExtractor e2=LogArgumentGroupExtractor.instance(null ""!100 200 300"" ""SOMEVAR"" """" ""i""); assertEquals(e1."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldHaveSameHashCode2,"@Test public void  (){ final LogArgumentGroupExtractor e1=LogArgumentGroupExtractor.instance(""1"" """" ""SOMEVAR"" """" ""i""); final LogArgumentGroupExtractor e2=LogArgumentGroupExtractor.instance(""1"" null ""SOMEVAR"" """" ""i""); assertEquals(e1.hashCode() e2.hashCode"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldHaveSameHashCode3,"@Test public void  (){ final LogArgumentGroupExtractor e1=LogArgumentGroupExtractor.instance("""" ""!100 200 300"" """" """" ""i""); final LogArgumentGroupExtractor e2=LogArgumentGroupExtractor.instance(null ""!100 200 300"" null """" ""i""); assertEquals(e1.hashCode() e"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldHaveSameHashCode4,"@Test public void  (){ final LogArgumentGroupExtractor e1=LogArgumentGroupExtractor.instance("""" ""!100 200 300"" ""SOMEVAR"" """" """"); final LogArgumentGroupExtractor e2=LogArgumentGroupExtractor.instance(null ""!100 200 300"" ""SOMEVAR"" """" null); assertEquals(e1."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldNotBeEqual1,"@Test public void  (){ final LogArgumentGroupExtractor e1=LogArgumentGroupExtractor.instance("""" ""!100 200 300"" ""SOMEVAR"" """" ""i""); assertFalse(e1.equals(new Object())); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogArgumentGroupExtractorTest.java,shouldNotBeEqualWhenComparingNullToEmpty1,"@Test public void  (){ final LogArgumentGroupExtractor e1=LogArgumentGroupExtractor.instance("""" ""!100 200 300"" ""SOMEVAR"" """" ""i""); final LogArgumentGroupExtractor e2=LogArgumentGroupExtractor.instance(null ""!100 200 300"" ""SOMEVAR"" """" ""i""); assertFalse(e1.e"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,setUp,@Before public void  (){ reader=RawInputStreamReader.instance(); inStream=new ByteArrayInputStream(data.getBytes()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,shouldCopyInputStreamToOutputStream,@Test public void  () throws IOException { ByteArrayOutputStream baos=new ByteArrayOutputStream(); reader.copyTo(inStream baos); assertEquals(data new String(baos.toByteArray())); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,shouldReadBuffer,@Test public void  () throws IOException { byte[] actual=reader.readFully(inStream); assertEquals(data new String(actual)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,shouldReadBufferWithLimit,@Test public void  () throws IOException { byte[] actual=reader.readFully(inStream data.length()); assertEquals(data new String(actual)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,shouldReturnNumberOfBytesCopied,@Test public void  () throws IOException { ByteArrayOutputStream baos=new ByteArrayOutputStream(); long actual=reader.copyTo(inStream baos); assertEquals(data.length() actual); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\io\RawInputStreamReaderTest.java,shouldThrowBufferCapacityException,@Test(expected=BufferCapacityException.class) public void  () throws IOException { byte[] actual=reader.readFully(inStream 1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\LogFormatArgumentTest.java,shouldEqualIgnoringCase,"@Test public void  (){ assertThat(LogFormatArgument.PERCENT is(equalToIgnoringCase(""%""))); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,setup,@Before public void  (){ loggerRef=mock(Logger.class); cause=new IllegalStateException(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,shouldLeaveCauseNull,@Test public void  (){ RuntimeException actual=exceptionLogger.newException(TEST_MESSAGE RuntimeException.class); assertNull(actual.getCause()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,shouldLogError,@Test public void  (){ new ExceptionLogger(loggerRef).newException(TEST_MESSAGE cause RuntimeException.class); verify(loggerRef).error(TEST_MESSAGE cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,shouldSetCause,@Test public void  (){ RuntimeException actual=new ExceptionLogger(loggerRef).newException(TEST_MESSAGE cause RuntimeException.class); assertEquals(cause actual.getCause()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\ExceptionLoggerTest.java,shouldUseMessage,@Test public void  (){ RuntimeException actual=exceptionLogger.newException(TEST_MESSAGE RuntimeException.class); assertEquals(TEST_MESSAGE actual.getMessage()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,setUp,@Before public void  () throws UnknownHostException { range1=new IpAddressRange(cidr1); range2=new IpAddressRange(address); range3=new IpAddressRange(cidrIpV6); range4=new IpAddressRange(address 48); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,shouldFindAddressesInRange,"@Test public void  () throws UnknownHostException { assertTrue(range1.addressInRange(""198.51.100.254"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,shouldHandleExactAddresses,"@Test public void  () throws UnknownHostException { assertTrue(range2.addressInRange(address)); assertFalse(range2.addressInRange(""192.168.1.2"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,shouldHandleInvalidMask,"@Test public void  () throws UnknownHostException { assertTrue(range4.addressInRange(address)); assertFalse(range4.addressInRange(""192.168.1.2"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,shouldHandleIpV6,"@Test public void  () throws UnknownHostException { assertTrue(range3.addressInRange(""2001:db8::1"")); assertFalse(range3.addressInRange(""2001:db9::1"")); assertFalse(range3.addressInRange(""127.0.0.1"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,shouldNotFindAddressesThatAreNotInRange,"@Test public void  () throws UnknownHostException { assertFalse(range1.addressInRange(""198.51.104.1"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\net\IpAddressRangeTest.java,shouldThrowExceptionForInvalidAddress,"@Test(expected=UnknownHostException.class) public void  () throws UnknownHostException { range1.addressInRange(""Invalid""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\format\converters\DateConversionFormatTest.java,shouldGetCorrectPattern,@Test public void  (){ String format=DateConversionFormat.getPattern(DateConversionFormat.ISO_8601); assertNotNull(format); assertEquals(DateConversionFormat.ISO_8601_PATTERN format); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\format\converters\DateConversionFormatTest.java,shouldGetDefaultPattern,"@Test public void  (){ String format=DateConversionFormat.getPattern(""Doesn't Exist""); assertNotNull(format); assertEquals(DateConversionFormat.RFC_1123_PATTERN format); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,BadHandler,"@Test(expected=IllegalArgumentException.class) public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" ""BadArgument""); httpLogFormatter.setLogic(extractor formatter); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,CanonicalPortHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.CANONICAL_PORT); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(CanonicalPortHand"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,EscapeTheMessageForDefault,"@Test public void  (){ assertEquals(""\b\n\t\f\r\\\""'/&<>"" new HttpLogFormatter(""%M"").format(request response)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,EscapeTheMessageForJson,"@Test public void  (){ assertEquals(""\\b\\n\\t\\f\\r\\\\\\\""'\\/&<>"" new HttpLogFormatter(""%M"" HttpLogFormatterState.JSON).format(request response)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,EscapeTheMessageForPlain,"@Test public void  (){ assertEquals(""\b\n\t\f\r\\\""'/&<>"" new HttpLogFormatter(""%M"" HttpLogFormatterState.PLAIN).format(request response)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,EscapeTheMessageForXml,"@Test public void  (){ assertEquals(""\n\t\r\\&quot;&apos;/&amp;&lt;&gt;"" new HttpLogFormatter(""%M"" HttpLogFormatterState.XML).format(request response)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,LocalAddressHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.LOCAL_ADDRESS); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(LocalAddressHandle"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,NullHandler,"@Test(expected=IllegalArgumentException.class) public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" null); httpLogFormatter.setLogic(extractor formatter); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,PercentHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.PERCENT); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(StringHandler.class)); }"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,QueryStringHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.QUERY_STRING); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(QueryStringHandler."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,RemoteAddressHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.REMOTE_ADDRESS); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(RemoteAddressHand"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,RemoteHostHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.REMOTE_HOST); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(RemoteHostHandler.cl"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,RemoteUserHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.REMOTE_USER); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(RemoteUserHandler.cl"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,RequestGuidHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.TRACE_GUID); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(TraceGuidHandler.clas"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,RequestHeaderHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.REQUEST_HEADER); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(RequestHeaderHand"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,RequestLineHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.REQUEST_LINE); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(RequestLineHandler."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,RequestMethodHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.REQUEST_METHOD); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(RequestMethodHand"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,RequestProtocolHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.REQUEST_PROTOCOL); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(RequestProtocol"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,ResponseBytesClfHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.RESPONSE_CLF_BYTES); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(ResponseBytes"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,ResponseBytesHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.RESPONSE_BYTES); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(ResponseBytesHand"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,ResponseHeaderHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.RESPONSE_HEADER); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(ResponseHeaderHa"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,ResponseMessageHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.RESPONSE_REASON); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(ResponseMessageH"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,ResponseTimeHandlerMicroseconds,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.RESPONSE_TIME_MICROSECONDS); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(Respo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,ResponseTimeHandlerSeconds,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.RESPONSE_TIME_SECONDS); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(ResponseTi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,StatusCodeHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.STATUS_CODE); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(StatusCodeHandler.cl"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,StringHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.STRING); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(StringHandler.class)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,TimeReceivedHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.TIME_RECEIVED); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(TimeReceivedHandle"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,UrlRequestedHandler,"@Test public void  (){ final LogArgumentGroupExtractor extractor=LogArgumentGroupExtractor.instance("""" """" """" """" LogFormatArgument.URL_REQUESTED); httpLogFormatter.setLogic(extractor formatter); assertThat(formatter.getLogic() instanceOf(UrlRequestedHandle"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,WhenEscapingTheMessage,public  () throws IOException { when(mockResponse.getOutputStream()).thenReturn(new ServletOutputStream(){ @Override public void write( int b) throws IOException { } } ); response=new HttpServletResponseWrapper(mockResponse ResponseMode.PASSTHROUGH ResponseMode.READONLY); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,setup,@Before public void  () throws IOException { response.sendError(0 escapeThis); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldCorrectlyConstructRequestLine,"@Test public void  (){ when(request.getProtocol()).thenReturn(""HTTP/1.1""); when(request.getRequestURI()).thenReturn(""/index.html""); when(request.getMethod()).thenReturn(""GET""); final HttpLogFormatter formatter=new HttpLogFormatter(""%r""); final String expe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldCorrectlyDetectEscapeSequences,"@Test public void  (){ final HttpLogFormatter formatter=new HttpLogFormatter(""%h %% %u %U""); assertThat(""Should have parsed seven handlers."" formatter.getHandlerList().size() equalTo(7)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldCorrectlyParseEmptySpace,"@Test public void  (){ final HttpLogFormatter formatter=new HttpLogFormatter(""%h%%%u%U""); assertThat(""Should have parsed four handlers."" formatter.getHandlerList().size() equalTo(4)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldNotHaveSetLogicByDefault,@Test public void  (){ assertNull(formatter.getLogic()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldParseCustomTimeFormat,"@Test public void  (){ final String customDateFormatRegex=""\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}""; final HttpLogFormatter httpLogFormatter=new HttpLogFormatter(""%{yyyy-MM-dd HH:mm:ss}t""); assertEquals(1 httpLogFormatter.getHandlerList().size()); asser"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldParseExclusiveStatusCodeRestrictions,"@Test public void  (){ final HttpLogFormatter formatter=new HttpLogFormatter(""%!401 403U""); final String expected=""http://some.place.net/u/r/l""; assertEquals(expected formatter.format(request response)); when(response.getStatus()).thenReturn(401); assertE"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldParseInclusiveStatusCodeRestrictions,"@Test public void  (){ final HttpLogFormatter formatter=new HttpLogFormatter(""%200 201U""); final String expected=""http://some.place.net/u/r/l""; when(response.getStatus()).thenReturn(200); assertEquals(expected formatter.format(request response)); when(res"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldParseSimpleTimeFormat,"@Test public void  (){ final String defaultDateFormatRegex=""\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}""; final HttpLogFormatter formatter=new HttpLogFormatter(""%t""); assertEquals(1 formatter.getHandlerList().size()); assertThat(formatter.format(request res"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldPreserveStringFormatting,"@Test public void  (){ final HttpLogFormatter formatter=new HttpLogFormatter(""%%log output%% %U""); final String expected=""%log output% http://some.place.net/u/r/l""; assertEquals(expected formatter.format(request response)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\logging\apache\HttpLogFormatterTest.java,shouldReplaceTokenWithRequestGuid,"@Test public void  (){ final HttpLogFormatter formatter=new HttpLogFormatter(""%"" + LogFormatArgument.TRACE_GUID); final String expected=""test-guid""; Vector<String> reqGuidValues=new Vector<>(); reqGuidValues.add(""test-guid""); when(request.getHeaders(Commo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,perform,@Override public void  (Target resource) throws ResourceContextException { activeResourceCount++; try { while (run) { Thread.sleep(10); } } catch ( InterruptedException ignored) { } finally { activeResourceCount--; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,run,@Override public void  (){ activeThreadCount++; try { resourcePool.use(context); } finally { activeThreadCount--; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,shouldAllowReturnsFromContext,@Test public void  (){ assertTrue(resourcePool.use(new ResourceContext<Target Boolean>(){ @Override public Boolean perform( Target resource){ return true; } } )); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,shouldGenerateNewResources,@Test public void  (){ resourcePool=new GenericBlockingResourcePool<>(Target::new 0 5); resourcePool.use(new SimpleResourceContext<Target>(){ @Override public void perform( Target resource){ assertNotNull(resource); } } ); assertThat(resourcePool.size() e
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,shouldHandleThreadPressure,@Test public void  () throws Exception { int numTestThreads=8; run=true; activeThreadCount=0; activeResourceCount=0; final SimpleResourceContext<Target> context=new SimpleResourceContext<Target>(){ @Override public void perform( Target resource) throws Re
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,shouldPrimePoolWithMinimumSize,@Test public void  (){ resourcePool.setMinimumPoolSize(2); assertThat(resourcePool.size() equalTo(2)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,shouldReducePoolWithMaximumSize,@Test public void  (){ resourcePool.setMinimumPoolSize(4); resourcePool.setMinimumPoolSize(1); resourcePool.setMaximumPoolSize(3); assertThat(resourcePool.size() equalTo(3)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\pooling\GenericResourcePoolTest.java,standUp,@Before public void  (){ resourcePool=new GenericBlockingResourcePool<>(Target::new minPoolSize maxPoolSize); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ReflectionToolsTest.java,shouldConstructWithoutParameters,@Test public void  () throws Exception { assertNotNull(ReflectionTools.construct(String.class)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ReflectionToolsTest.java,shouldCorrectlyMatchParamterLists,"@Test public void  (){ assertEquals(""A Magical String"" ReflectionTools.construct(String.class ""A Magical String"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\ReflectionToolsTest.java,shouldCorrectlyMatchParamterListsWithNull,@Test public void  (){ Exception ex=ReflectionTools.construct(Exception.class null null); assertNotNull(ex); assertNull(ex.getMessage()); assertNull(ex.getCause()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\proxy\TargetHostInfoTest.java,getProxiedHostUri_returnsExpectedUri,"@Test public void  () throws Exception { TargetHostInfo targetHostInfo=new TargetHostInfo(targetHost); assertEquals(""Returned URI was not the expected URI"" new URI(targetHost) targetHostInfo.getProxiedHostUri()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\proxy\TargetHostInfoTest.java,getProxiedHostUri_returnsNullOnInvalidUri,"@Test public void  () throws Exception { TargetHostInfo targetHostInfo=new TargetHostInfo(invalidTargetHost); assertNull(""Returned URI was null as expected"" targetHostInfo.getProxiedHostUri()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\proxy\TargetHostInfoTest.java,getProxiedHostUrl_returnsExpectedUrl,"@Test public void  () throws Exception { TargetHostInfo targetHostInfo=new TargetHostInfo(targetHost); assertEquals(""Returned URL was not the expected URL"" new URL(""http"" ""otherhost.com"" -1 """") targetHostInfo.getProxiedHostUrl()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\proxy\TargetHostInfoTest.java,getProxiedHostUrl_returnsNullOnInvalidUrl,"@Test public void  () throws Exception { TargetHostInfo targetHostInfo=new TargetHostInfo(invalidTargetHost); assertNull(""Returned URL was null as expected"" targetHostInfo.getProxiedHostUrl()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,SimpleClass,public  (String x Integer y){ this.x=x; this.y=y; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,setup,@Before public void  (){ simpleClassConstructor=null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldConstructWithoutParameters,@Test public void  () throws Exception { assertNotNull(ReflectionTools.construct(String.class)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldCorrectlyMatchParamterLists,"@Test public void  (){ Assert.assertEquals(""A Magical String"" ReflectionTools.construct(String.class ""A Magical String"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldCorrectlyMatchParamterListsWithNull,"@Test public void  (){ Exception ex=ReflectionTools.construct(Exception.class null null); assertNotNull(""should not be null"" ex); assertNull(""should not have message"" ex.getMessage()); assertNull(""should not have cause"" ex.getCause()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldNotFailOnNullReferences,@Test public void  (){ Class[] actual; Object obj=null; actual=ReflectionTools.toClassArray(obj); assertNull(actual[0]); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldReturnArrayOfAssociatedClasses,"@Test public void  (){ Integer i=42; String s=""string""; Double d=101.5; Class[] actual; actual=ReflectionTools.toClassArray(i s d null); assertEquals(""integer"" Integer.class actual[0]); assertEquals(""string"" String.class actual[1]); assertEquals(""double"" "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldReturnConstructorsWithMatchingSignature,"@Test public void  () throws NoSuchMethodException { Class<?>[] typeArray={String.class Integer.class}; simpleClassConstructor=ReflectionTools.getConstructor(SimpleClass.class typeArray); assertThat(simpleClassConstructor.toString() containsString(""Simple"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldSupportEmptyConstructors,"@Test public void  (){ Assert.assertEquals("""" ReflectionTools.construct(String.class)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldSupportEmptyParams,"@Test public void  () throws NoSuchMethodException { Class<?>[] typeArray=new Class<?>[0]; simpleClassConstructor=ReflectionTools.getConstructor(SimpleClass.class typeArray); assertThat(simpleClassConstructor.toString() containsString(""SimpleClass()"")); }"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,shouldThrowExceptionIfConstructorIsNotFound,@Test(expected=NoSuchMethodException.class) public void  () throws NoSuchMethodException { Class<?>[] typeArray={Integer.class String.class}; ReflectionTools.getConstructor(SimpleClass.class typeArray); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\reflection\ReflectionToolsTest.java,toString,"@Override public String  (){ return ""["" + x + ""]: ""+ y; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\KeyedRegexExtractorTest.java,shouldCaptureUserWithNegativeId,"@Test public void  (){ final KeyedRegexExtractor<Object> extractor=new KeyedRegexExtractor<>(); final Object expectedKey=new Object(); final String pattern="".*/servers/([-|\\w]+)/?.*""; extractor.addPattern(pattern expectedKey); ExtractorResult result=extr"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\KeyedRegexExtractorTest.java,shouldReturnFirstCaptureGroup,"@Test public void  (){ final KeyedRegexExtractor<Object> extractor=new KeyedRegexExtractor<>(); final Object expectedKey=new Object(); final String pattern=""a([^z]+)z""; extractor.addPattern(pattern expectedKey); ExtractorResult result=extractor.extract(""a"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\KeyedRegexExtractorTest.java,shouldUseNullKeys,"@Test public void  (){ final KeyedRegexExtractor<Object> extractor=new KeyedRegexExtractor<>(); final String pattern=""a([^z]+)z""; extractor.addPattern(pattern); ExtractorResult result=extractor.extract(""abcdz""); assertEquals(""Extractor should always retur"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\RegexSelectorTest.java,beforeAll,"@Before public final void  (){ selector=new RegexSelector<>(); selector.addPattern(""\\d\\d\\d[+-]"" ""notExpected""); selector.addPattern(""[+-]\\d\\d\\d"" ""expected""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\RegexSelectorTest.java,shouldClearStoredSelectors,"@Test public void  (){ final SelectorResult<String> foundResult=selector.select(""-124""); assertTrue(""Selector must have a key."" foundResult.hasKey()); assertEquals(""Selector should select expected key."" ""expected"" foundResult.getKey()); selector.clear(); "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\RegexSelectorTest.java,shouldReturnEmptyResultWithNoMatch,"@Test public void  (){ final SelectorResult<String> emptyResult=selector.select(""expected""); assertFalse(""Selector must not have a key."" emptyResult.hasKey()); assertNull(""Selector should select expected key."" emptyResult.getKey()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\regex\RegexSelectorTest.java,shouldSelectOnRegexMatch,"@Test public void  (){ final SelectorResult<String> foundResult=selector.select(""-124""); assertTrue(""Selector must have a key."" foundResult.hasKey()); assertEquals(""Selector should select expected key."" ""expected"" foundResult.getKey()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,setUp,"@Before public void  (){ routeDst1=new RouteDestination(""dst1"" ""/service/dst1"" new Float(1.0)); routeDst2=new RouteDestination(""dst2"" ""/service/dst2"" new Float(-1.0)); routeDst3=new RouteDestination(""dst3"" ""/service/dst3"" new Float(1.0)); routeDst4=new Ro"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,shouldCompareDestinationsWithUri,@Test public void  (){ int compared=routeDst1.compareTo(routeDst4); assertThat(compared lessThan(0)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,shouldHaveDifferentHashPerDestination,@Test public void  (){ Integer h1=routeDst1.hashCode(); Integer h2=routeDst2.hashCode(); assertThat(h1 not(equalTo(h2))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,shouldReturnDestinationWithFirstDestinationId,@Test public void  (){ Integer compared=routeDst1.compareTo(routeDst3); assertThat(compared lessThan(0)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\servlet\http\RouteDestinationTest.java,shouldReturnDestinationWithHighestQuality,@Test public void  (){ int compared=routeDst1.compareTo(routeDst2); assertEquals(compared 1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,shouldFind,@Test public void  (){ assertNotNull(regexList.find(MATCH_AGAINST)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,shouldMatch,@Test public void  (){ assertNotNull(regexList.matches(MATCH_AGAINST)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,shouldNotMatch,@Test public void  (){ assertNull(regexList.matches(MATCH_AGAINST)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,shouldReturnNullForFind,@Test public void  (){ assertNull(new RegexList().find(MATCH_AGAINST)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,shouldReturnNullForMatches,@Test public void  (){ assertNull(new RegexList().matches(MATCH_AGAINST)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\RegexListTest.java,standUp,@Before public void  (){ regexList=new RegexList(); regexList.add(MATCH_REGEX); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,shouldReturnFalseIfFirstSetIsNull,"@Test public void  (){ Set<String> one=null; Set<String> two=new HashSet(); two.add(""abc""); assertFalse(SetUtilities.nullSafeEquals(one two)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,shouldReturnFalseIfNonNullSetsAreDifferent,"@Test public void  (){ Set<String> one=new HashSet(); one.add(""abc""); Set<String> two=new HashSet(); two.add(""def""); assertFalse(SetUtilities.nullSafeEquals(one two)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,shouldReturnFalseIfNonNullSetsAreSameButDifferentCase,"@Test public void  (){ Set<String> one=new HashSet(); one.add(""abc""); Set<String> two=new HashSet(); two.add(""AbC""); assertFalse(SetUtilities.nullSafeEquals(one two)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,shouldReturnFalseIfSecondSetIsNull,"@Test public void  (){ Set<String> one=new HashSet(); one.add(""abc""); Set<String> two=null; assertFalse(SetUtilities.nullSafeEquals(one two)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,shouldReturnTrueIfBothSetsAreNull,@Test public void  (){ Set<String> one=null; Set<String> two=null; assertTrue(SetUtilities.nullSafeEquals(one two)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\SetUtilitiesTest.java,shouldReturnTrueIfNonNullSetsAreSame,"@Test public void  (){ Set<String> one=new HashSet(); one.add(""abc""); Set<String> two=new HashSet(); two.add(""abc""); assertTrue(SetUtilities.nullSafeEquals(one two)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldAddLeadingSlash,"@Test public void  (){ String uri1=""one/two""; String uri2=""three/four""; String expected=""/"" + uri1 + ""/""+ uri2; String actual=StringUriUtilities.concatUris(uri1 uri2); assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldAddRootReference,"@Test public void  (){ assertEquals(""Should add a root reference to a URI"" ""/a/resource"" StringUriUtilities.formatUri(""a/resource"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldChangeWhenEncodingEncodableCharacters,"@Test public void  (){ String uri1=""key$test""; String uri2=StringUriUtilities.encodeUri(uri1); assertEquals(uri2 ""key%24test""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldHandleOneString,"@Test public void  (){ String uri1=""one/two/""; String expected=""/one/two/""; String actual=StringUriUtilities.concatUris(uri1); assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldHandleSingle,"@Test public void  (){ String uri1=""/""; String uri2=""/""; String expected=""//""; String actual=StringUriUtilities.concatUris(uri1 uri2); assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldIdentifyAppendedFragments,"@Test public void  (){ assertEquals(24 StringUriUtilities.indexOfUriFragment(""/requested/uri/versioned/v1"" ""/v1"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldIdentifyEmbeddedFragments,"@Test public void  (){ assertEquals(10 StringUriUtilities.indexOfUriFragment(""/versioned/v1/requested/uri"" ""/v1"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldIdentifyPrependedFragments,"@Test public void  (){ assertEquals(0 StringUriUtilities.indexOfUriFragment(""/v1/requested/uri"" ""/v1"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldIdentifyRootFragments,"@Test public void  (){ assertEquals(0 StringUriUtilities.indexOfUriFragment(""/v1"" ""/v1"")); assertEquals(0 StringUriUtilities.indexOfUriFragment(""/v1/"" ""/v1"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldNotChangeWhenEncodingNonEncodableCharacters,"@Test public void  (){ String uri1=""qwerasdfjklvcxhjkfe-3djfkdfs""; String uri2=StringUriUtilities.encodeUri(uri1); assertEquals(uri2 uri1); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldNotIdentifyPartiallyMatchingEmbeddedFragments,"@Test public void  (){ assertEquals(-1 StringUriUtilities.indexOfUriFragment(""/versioned/v12/requested/uri"" ""/v1"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldNotRemoveExtraSlash,"@Test public void  (){ String uri1=""one/two/""; String uri2=""/three/four/""; String expected=""/one/two//three/four/""; String actual=StringUriUtilities.concatUris(uri1 uri2); assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldRemoveTrailingSlash,"@Test public void  (){ assertEquals(""Should remove trailing slashes from a URI"" ""/a/resource"" StringUriUtilities.formatUri(""/a/resource/"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldRemovingExtraLeadingSlashes,"@Test public void  (){ assertEquals(""Should remove multiple leading slasshes from a URI"" ""/a/resource"" StringUriUtilities.formatUri(""//////////a/resource///"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldReturnRootContextURI,"@Test public void  (){ assertEquals(""Should not return an empty string when passed a root context URI"" ""/"" StringUriUtilities.formatUri(""/"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldReturnRootContextURI2,"@Test public void  (){ assertEquals(""Should not return an empty string when passed a root context URI"" ""/"" StringUriUtilities.formatUri(""/////////"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldReturnRootContextURI3,"@Test public void  (){ assertEquals(""Should not return an empty string when passed a root context URI"" ""/"" StringUriUtilities.formatUri("""")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\StringUriUtilitiesTest.java,shouldSkipEmptyStrings,"@Test public void  (){ String uri1=""one/two/""; String uri2=""/three/four/""; String expected=""/one/two//three/four/""; String actual=StringUriUtilities.concatUris("""" "" "" uri1 "" "" """" uri2 """"); assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,assertThreads,public static void  (String msg KeyedStackLockTestThread... threads) throws InterruptedException { for ( KeyedStackLockTestThread t : threads) { if (!t.started()) { t.exec(); } } int iterations=0; while (!threadsFinished(threads) && ++iterations < 50) { Thread.sleep(10); } for ( KeyedStackLockTestThread t : threads) { assertTrue(msg t.passed()); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldFailIfNotLocked,@Test(expected=IllegalStateException.class) public void  () throws Exception { lock.unlock(KEY_A); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldFailIfTryingToUnlockUsingWrongKey,"@Test(expected=IllegalArgumentException.class) public void  () throws Exception { assertTrue(""is now locked"" lock.tryLock(KEY_A)); lock.unlock(KEY_B); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldFailWithDifferentKey,"@Test public void  () throws Exception { assertFalse(""is not locked yet"" lock.isLocked()); assertThreads(""Should lock when unlocked"" new TurnKeyLockingThread(lock KEY_A)); assertTrue(""should now be locked"" lock.isLocked()); assertFalse(""Parent thread shou"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldPassIfSameThreadAttemptsToLockWithSameKey,@Test public void  () throws Exception { assertTrue(lock.tryLock(KEY_A)); assertTrue(lock.tryLock(KEY_A)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldPassWithSameKey,"@Test public void  () throws Exception { assertThreads(""Should pass multiple threads using the same key"" new TurnKeyLockingThread(lock KEY_A) new TurnKeyLockingThread(lock KEY_A)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldProcessQueuedLockRequestsUsingDifferentKeys,"@Test public void  () throws Exception { final TurnKeyLockingThread threadA=new TurnKeyLockingThread(lock KEY_A); final TurnKeyLockingBlockingThread threadB=new TurnKeyLockingBlockingThread(lock KEY_B); assertThreads(""Should lock with thread"" threadA); as"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldQueueMultipleLockRequestsUsingDifferentKeys,@Test public void  () throws Exception { assertTrue(lock.tryLock(KEY_A)); assertFalse(lock.tryLock(KEY_B)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldUnlockIfSameKey,"@Test public void  () throws Exception { lock.tryLock(KEY_A); assertTrue(""before"" lock.isLocked()); lock.unlock(KEY_A); assertFalse(""after"" lock.isLocked()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,shouldUnlockOneOfManyIfSameKey,"@Test public void  () throws Exception { assertTrue(""KEY_A"" lock.tryLock(KEY_A)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,standUp,@Before public void  (){ lock=new KeyedStackLock(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\KeyedStackLockTest.java,threadsFinished,public static boolean  (KeyedStackLockTestThread... threads){ for ( KeyedStackLockTestThread t : threads) { if (!t.finished()) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingBlockingThread.java,TurnKeyLockingBlockingThread,public  (KeyedStackLock lockReference Object key){ super(lockReference key); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingBlockingThread.java,toggleLockState,@Override protected void  (){ if (lock) { lockReference.lock(key); passed=true; } else { lockReference.unlock(key); } lock=!lock; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,TurnKeyLockingThread,public  (KeyedStackLock lockReference Object key){ this.lockReference=lockReference; this.key=key; finished=false; passed=false; run=false; shouldStop=false; lock=true; super.start(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,exec,@Override public synchronized void  (){ run=true; notify(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,finished,@Override public boolean  (){ return finished; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,kill,@Override public void  (){ shouldStop=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,passed,@Override public boolean  (){ return passed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,run,@Override public void  (){ while (!shouldStop) { synchronized (this) { if (!run) { try { wait(); } catch ( InterruptedException ie) { return; } } else { finished=false; toggleLockState(); finished=true; run=false; } } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,started,@Override public boolean  (){ return run; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\thread\TurnKeyLockingThread.java,toggleLockState,protected void  (){ if (lock) { passed=lockReference.tryLock(key); } else { lockReference.unlock(key); } lock=!lock; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorFilter.java,ApiValidatorFilter,@Inject public  (ConfigurationService configurationService Optional<MetricsService> metricsService @Value(ReposeSpringProperties.CORE.CONFIG_ROOT) String configurationRoot){ this.configurationService=configurationService; this.metricsService=metricsServic
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorFilter.java,destroy,@Override public void  (){ configurationService.unsubscribeFrom(configFileName handlerFactory); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorFilter.java,doFilter,"@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { ApiValidatorHandler handler=handlerFactory.buildHandler(); if (handler == null) { LOG.error(""API Validator filter has not yet"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorFilter.java,init,"@Override public void  (FilterConfig filterConfig) throws ServletException { LOG.trace(""API Validator filter initializing...""); configFileName=new FilterConfigHelper(filterConfig).getFilterConfig(DEFAULT_CONFIG); LOG.info(""Initializing API Validator filte"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,SampleXslTransform,public  (Templates _transformationTemplates){ super(_transformationTemplates); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,setup,@Before public void  (){ templates=mock(Templates.class); xslTransform=new SampleXslTransform(templates); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,shouldReturnNonNullForTransformerPool,@Test public void  (){ ObjectPool<Transformer> transformerPool; transformerPool=xslTransform.getXslTransformerPool(); assertNotNull(transformerPool); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,shouldReturnPoolWithDefaultMinSizeOfOne,@Test public void  () throws Exception { when(templates.newTransformer()).thenReturn(mock(Transformer.class)); Integer expected  actual; ObjectPool<Transformer> transformerPool; expected=1; transformerPool=xslTransform.getXslTransformerPool(); final Trans
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\AbstractXslTransformTest.java,shouldThrowExceptionIfXslTransformerCanNotBeGenerated,@Test(expected=XsltTransformationException.class) public void  () throws Exception { when(templates.newTransformer()).thenThrow(new TransformerConfigurationException()); new SampleXslTransform(templates).getXslTransformerPool().borrowObject(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,SampleJaxbTransform,public  (JAXBContext ctx){ super(ctx); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,setup,@Before public void  (){ jaxbContext=mock(JAXBContext.class); jaxbTransform=new SampleJaxbTransform(jaxbContext); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,shouldReturnNonNullForMarshallerPool,@Test public void  (){ assertNotNull(jaxbTransform.getMarshallerPool()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,shouldReturnNonNullForUnmarshallerPool,@Test public void  (){ assertNotNull(jaxbTransform.getUnmarshallerPool()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,shouldThrowExceptionIfCanNotCreateMarshallerPool,"@Test(expected=ResourceConstructionException.class) public void  () throws Exception { when(jaxbContext.createMarshaller()).thenThrow(new JAXBException(""test"")); jaxbTransform.getMarshallerPool().borrowObject(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\jaxb\AbstractJaxbTransformTest.java,shouldThrowExceptionIfCanNotCreateUnmarshallerPool,"@Test(expected=ResourceConstructionException.class) public void  () throws Exception { when(jaxbContext.createUnmarshaller()).thenThrow(new JAXBException(""test"")); jaxbTransform.getUnmarshallerPool().borrowObject(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\XsltTransformConstructionTest.java,setUp,@Before public void  () throws Exception { xsltTransformConstruction=new XsltTransformConstruction(); transformer=mock(Transformer.class); templates=mock(Templates.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\commons\commons-utilities\src\test\java\org\openrepose\commons\utils\transform\xslt\XsltTransformConstructionTest.java,shouldReturnTypePool,@Test public void  () throws Exception { when(templates.newTransformer()).thenReturn(transformer); assertThat(xsltTransformConstruction.generateXsltResourcePool(templates) is(instanceOf(ObjectPool.class))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,ApiValidatorHandlerFactory,public  (ConfigurationService configurationService String configurationRoot String config Optional<MetricsService> metricsService){ this.configurationService=configurationService; this.configRoot=configurationRoot; this.config=config; this.metricsService=metricsService; this.wadlListener=new ApiValidatorWadlListener(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,addWadlListener,"private void  (String wadl){ if (wadl == null) { return; } LOG.info(""Watching WADL: "" + wadl); configurationService.subscribeTo(""api-validator"" wadl wadlListener new GenericResourceConfigurationParser()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,buildHandler,public ApiValidatorHandler  (){ synchronized (configLock) { initialize(); if (!initialized) { return null; } return new ApiValidatorHandler(defaultValidator validators multiRoleMatch delegatingMode metricsService); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,configurationUpdated,"@Override public void  (ConfigurationResource config){ LOG.info(""WADL file changed: "" + config.name()); synchronized (wadlLock) { if (validators == null) { return; } boolean validatorForWADLFound=false; boolean allReloadedWADL=true; for ( ValidatorInfo in"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,getNormalizedPath,"private String  (String uri){ String path=uri; try { path=new URL(uri).toString(); } catch ( MalformedURLException ex) { LOG.warn(""Invalid URL: "" + uri ex); } return path; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,getWadlListener,ApiValidatorWadlListener  (){ return wadlListener; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,getWadlPath,String  (String uri){ return new File(configRoot uri).toURI().toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,initialize,"private void  (){ synchronized (wadlLock) { if (initialized || validatorConfiguration == null) { return; } ValidatorConfigurator validatorConfigurator=new ValidatorConfigurator(validatorConfiguration configRoot config); multiRoleMatch=validatorConfiguration.isMultiRoleMatch(); defaultValidator=validatorConfigurator.getDefaultValidator(); validators=validatorConfigurator.getValidators(); delegatingMode=validatorConfiguration.getDelegating() != null; for ( ValidatorInfo validator : validators) { LOG.debug(""Adding listener for {} : {}"" validator.getName() validator.getUri()); addWadlListener(validator.getUri()); } initialized=true; } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,setValidators,void  (List<ValidatorInfo> validators){ this.validators=validators; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerFactory.java,unsubscribeAllWadlListeners,"private void  (){ synchronized (wadlLock) { initialized=false; if (validators == null) { return; } for ( ValidatorInfo info : validators) { if (StringUtils.isNotBlank(info.getUri())) { configurationService.unsubscribeFrom(info.getUri() wadlListener); } if (info.getValidator() != null) { LOG.debug(""DESTROYING VALIDATOR: {}"" info.getName()); info.getValidator().destroy(); } } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,ApiValidatorHandler,public  (ValidatorInfo defaultValidator List<ValidatorInfo> validators boolean multiRoleMatch boolean delegatingMode Optional<MetricsService> metricsService){ this.validators=new ArrayList<>(validators.size()); this.matchedRoles=new HashSet<>(); this.validators.addAll(validators); this.multiRoleMatch=multiRoleMatch; this.defaultValidator=defaultValidator; this.delegatingMode=delegatingMode; this.metricsService=metricsService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,appendDefaultValidator,private boolean  (List<ValidatorInfo> validatorList){ if (defaultValidator != null) { if (!multiRoleMatch) { validatorList.add(defaultValidator); } else if (!validatorList.contains(defaultValidator)) { validatorList.add(0 defaultValidator); } return true; } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,doFilter,"public void  (HttpServletRequest request HttpServletResponse response FilterChain chain){ HttpServletRequestWrapper wrappedRequest=new HttpServletRequestWrapper(request); List<String> roles=wrappedRequest.getPreferredSplittableHeaders(OpenStackServiceHeader.ROLES); if (roles.isEmpty()) { roles=Collections.singletonList(""""); } Result lastValidatorResult=null; boolean isValid=false; try { matchedRoles.clear(); List<ValidatorInfo> matchedValidators=getValidatorsForRoles(roles); if (!matchedValidators.isEmpty()) { for ( ValidatorInfo validatorInfo : matchedValidators) { Validator validator=validatorInfo.getValidator(); if (validator == null) { LOG.warn(""Validator not available for request: {}"" validatorInfo.getUri()); response.setStatus(HttpServletResponse.SC_BAD_GATEWAY); } else { lastValidatorResult=validator.validate(wrappedRequest response chain); isValid=lastValidatorResult != null && lastValidatorResult.valid(); if (isValid) { break; } } } if (!isValid) { metricsService.ifPresent(ms -> { AggregateMeterFactory meterFactory=ms.createSummingMeterFactory(INVALID_REQUEST_METRIC_PREFIX); matchedRoles.forEach(role -> meterFactory.createMeter(role).mark()); } ); if (multiRoleMatch) { sendMultiMatchErrorResponse(lastValidatorResult response); } } } else { response.sendError(HttpServletResponse.SC_FORBIDDEN); } } catch ( ValidatorException|WADLException|IOException e) { LOG.error(""Error processing validation"" e); response.setStatus(HttpServletResponse.SC_BAD_GATEWAY); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,getErrorResult,private ErrorResult  (Result lastResult){ if (lastResult instanceof ErrorResult) { return (ErrorResult)lastResult; } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,getValidatorsForRoles,protected List<ValidatorInfo>  (List<String> listRoles){ Set<ValidatorInfo> validatorSet=new LinkedHashSet<>(); Set<String> roles=new HashSet<>(listRoles); for ( ValidatorInfo validator : validators) { for ( String validatorRoles : validator.getRoles()) { if (roles.contains(validatorRoles)) { validatorSet.add(validator); matchedRoles.add(validatorRoles); } } } List<ValidatorInfo> validatorList=new ArrayList<>(validatorSet); if (appendDefaultValidator(validatorList)) { matchedRoles.addAll(roles); } return !multiRoleMatch && !validatorList.isEmpty() ? validatorList.subList(0 1) : validatorList; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ApiValidatorHandler.java,sendMultiMatchErrorResponse,"private void  (Result result HttpServletResponse response){ try { ErrorResult error=getErrorResult(result); if (error != null && !delegatingMode) { response.setStatus(error.code()); response.sendError(error.code() error.message()); } } catch ( ValidatorException|WADLException|IOException e) { LOG.error(""Some error"" e); response.setStatus(HttpServletResponse.SC_BAD_GATEWAY); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,ValidatorInfo,public  (List<String> roles Node wadl String systemId Config config String name){ this.roles=roles; this.config=config; this.wadl=wadl; this.systemId=systemId; this.uri=null; this.name=(StringUtils.isEmpty(name) && !roles.isEmpty()) ? getNameFromRoles(roles) : name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,clearValidator,public void  (){ synchronized (validatorLock) { if (validator != null) { validator.destroy(); validator=null; } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,getNameFromRoles,String  (List<String> roles){ StringBuilder rtn=new StringBuilder(); for ( String role : roles) { rtn.append(role.replace('/' '-').replace(' ' '-').replace('=' '-').replace(':' '-').replace('*' '-').replace('?' '-').replace(' ' '-').replace('\u00A0' '-')).append('_'); } return rtn.substring(0 rtn.length() - 1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,getRoles,public List<String>  (){ return roles; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,getSource,"private Source  (){ if (wadl != null) { return new DOMSource(wadl systemId); } if (uri != null) { return new SAXSource(new InputSource(uri)); } throw new IllegalArgumentException(""WADL Source Not Specified""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,getUri,public String  (){ return uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,getValidator,public Validator  (){ initValidator(); return validator; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,initValidator,"public boolean  (){ LOG.debug(""CALL TO ValidatorInfo#initValidator. Validator is {}. From thread {}"" validator Thread.currentThread().getName()); synchronized (validatorLock) { if (validator != null) { return true; } try { LOG.debug(""Calling the validator creation method for {}"" name); validator=Validator.apply(name + System.currentTimeMillis() getSource() config); return true; } catch ( ValidatorException|WADLException e) { LOG.warn(""Error loading validator for WADL: "" + uri e); return false; } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,reinitValidator,"public boolean  (){ synchronized (validatorLock) { if (validator != null) { LOG.debug(""in reInitValidator Destroying: {}"" validator); validator.destroy(); validator=null; } } return initValidator(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorInfo.java,setValidator,void  (Validator validator){ this.validator=validator; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,getHandlers,private DispatchResultHandler  (){ List<ResultHandler> handlers=new ArrayList<>(); handlers.add(new ServletResultHandler()); return new DispatchResultHandler(scala.collection.JavaConversions.asScalaBuffer(handlers).toList()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,setup,"@Before public void  (){ this.config=new Config(); config.setResultHandler(getHandlers()); config.setUseSaxonEEValidation(false); config.setCheckWellFormed(true); config.setCheckXSDGrammar(true); config.setCheckElements(true); roles.add(""someRole""); roles"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,shouldCreateValidatorOnce,"@Test public void  (){ Validator validator=instance.getValidator(); assertNotNull(validator); Validator validator1=instance.getValidator(); assertNotNull(validator1); assertThat(""Should return exact same validator on each call to getValidator"" validator1 "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,shouldGenerateValidatorNameWhenPassedNull,@Test public void  (){ assertEquals(instance.getName() instance.getNameFromRoles(instance.getRoles())); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,shouldGenerateValidatorNameWhenProvided,@Test public void  (){ assertEquals(instance2.getName() name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ValidatorInfoTest.java,shouldNotHaveForbiddenCharsInValidatorName,"@Test public void  (){ roles.add(""role/with/slashes""); roles.add(""role with commas""); roles.add(""role=with=equals""); roles.add(""role:with:colons""); roles.add(""role*with*asterisks""); roles.add(""role?with?question?marks""); roles.add(""role with spaces""); rol"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,setup,"@Before public void  (){ chain=mock(FilterChain.class); request=new MockHttpServletRequest(); response=new MockHttpServletResponse(); defaultValidator=mock(Validator.class); defaultValidatorInfo=new ValidatorInfo(Arrays.asList(""defaultrole"") ""defaultwadl"""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,shouldAddDefaultValidatorAsLeastPriorityWhenMultiMatch,"@Test public void  (){ List<String> roles=Collections.singletonList(""role1""); List<ValidatorInfo> validators=new ArrayList<>(); validators.add(role1ValidatorInfo); validators.add(role2ValidatorInfo); instance=new ApiValidatorHandler(defaultValidatorInfo v"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,shouldCallDefaultValidatorWhenNoRoleMatch,@Test public void  (){ instance.doFilter(request response chain); verify(defaultValidator).validate(any(HttpServletRequestWrapper.class) eq(response) eq(chain)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,shouldCallValidatorForRole,"@Test public void  (){ request.addHeader(OpenStackServiceHeader.ROLES ""junk;q=0.8 role1;q=0.9 bbq;q=0.9 stuff;q=0.7""); instance.doFilter(request response chain); verify(role1Validator).validate(any(HttpServletRequestWrapper.class) eq(response) eq(chain));"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,shouldHandleExceptionsInValidators,"@Test public void  (){ request.addHeader(OpenStackServiceHeader.ROLES ""blowupValidator""); instance.doFilter(request response chain); verify(blowupValidator).validate(any(HttpServletRequestWrapper.class) eq(response) eq(chain)); assertEquals(HttpServletRes"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,shouldHandleNullValidators,"@Test public void  (){ request.addHeader(OpenStackServiceHeader.ROLES ""nullValidator""); instance.doFilter(request response chain); verify(nullValidatorInfo).getValidator(); assertEquals(HttpServletResponse.SC_BAD_GATEWAY response.getStatus()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\test\java\org\openrepose\filters\apivalidator\ApiValidatorHandlerTest.java,shouldRetainValidatorOrderWhenMultiMatchAndHasDefaultRole,"@Test public void  (){ List<String> roles=Arrays.asList(""role1"" ""role2"" ""defaultrole""); List<ValidatorInfo> validators=new ArrayList<>(); validators.add(role1ValidatorInfo); validators.add(defaultValidatorInfo); validators.add(role2ValidatorInfo); instanc"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\echo-filter\src\main\java\org\openrepose\filters\echo\EchoFilter.java,doFilter,@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { final HttpServletRequest httpRequest=(HttpServletRequest)request; final HttpServletResponse httpResponse=(HttpServletResponse
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,ValidatorConfigurator,public  (ValidatorConfiguration valConfig String configRoot String wadlUri){ processConfiguration(valConfig configRoot wadlUri); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,createConfiguration,private Config  (ValidatorItem validatorItem boolean isDelegating double delegationQuality boolean multiRoleMatch String configRoot String componentName){ Config config=new Config(); config.setXSDEngine(validatorItem.getXsdEngine().value()); config.setXSLEngine(validatorItem.getXslEngine().value()); config.setResultHandler(getHandlers(validatorItem isDelegating delegationQuality multiRoleMatch configRoot componentName)); config.setCheckWellFormed(validatorItem.isCheckWellFormed()); config.setCheckXSDGrammar(validatorItem.isCheckXsdGrammar() || validatorItem.isCheckGrammars()); config.setCheckJSONGrammar(validatorItem.isCheckGrammars()); config.setCheckElements(validatorItem.isCheckElements()); config.setXPathVersion(validatorItem.getXpathVersion()); config.setCheckPlainParams(validatorItem.isCheckPlainParams()); config.setDoXSDGrammarTransform(validatorItem.isDoXsdGrammarTransform()); config.setEnablePreProcessExtension(validatorItem.isEnablePreProcessExtension()); config.setRemoveDups(validatorItem.isRemoveDups()); config.setValidateChecker(validatorItem.isValidateChecker()); config.setJoinXPathChecks(validatorItem.isJoinXpathChecks()); config.setCheckHeaders(validatorItem.isCheckHeaders()); config.setEnableIgnoreXSDExtension(validatorItem.isEnableIgnoreXsdExtension()); config.setEnableRaxRolesExtension(validatorItem.isEnableRaxRoles()); config.setMaskRaxRoles403(validatorItem.isMaskRaxRoles403()); config.setSetParamDefaults(true); config.setEnableAuthenticatedByExtension(true); return config; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,getDefaultValidator,public ValidatorInfo  (){ return defaultValidator; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,getHandlers,"private DispatchResultHandler  (ValidatorItem validatorItem boolean isDelegating double delegationQuality boolean multiRoleMatch String configRoot String componentName){ List<ResultHandler> handlers=new ArrayList<>(); if (isDelegating) { handlers.add(new MethodLabelHandler()); handlers.add(new DelegationHandler(delegationQuality componentName)); } else if (!multiRoleMatch) { handlers.add(new ServletResultHandler()); } if (validatorItem.isEnableApiCoverage()) { handlers.add(new InstrumentedHandler()); handlers.add(new ApiCoverageHandler()); } if (StringUtils.isNotBlank(validatorItem.getDotOutput())) { final String dotPath=StringUriUtilities.formatUri(getPath(validatorItem.getDotOutput() configRoot)); File out=new File(dotPath); try { if (out.exists() && out.canWrite() || !out.exists() && out.createNewFile()) { handlers.add(new SaveDotHandler(out !validatorItem.isEnableApiCoverage() true)); } else { LOG.warn(""Cannot write to DOT file: "" + dotPath); } } catch ( IOException ex) { LOG.warn(""Cannot write to DOT file: "" + dotPath ex); } } return new DispatchResultHandler(scala.collection.JavaConversions.asScalaBuffer(handlers).toList()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,getPath,private String  (String path String configRoot){ File file=new File(path); if (!file.isAbsolute()) { file=new File(configRoot path); } return file.getAbsolutePath(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,getValidators,public List<ValidatorInfo>  (){ return validators; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,getWadlPath,private String  (String uri String configRoot){ if (Paths.get(uri).isAbsolute()) { return new File(uri).toString(); } else { return new File(configRoot uri).toURI().toString(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,logDeprecationWarnings,"private void  (ValidatorConfiguration validatorConfiguration){ if (validatorConfiguration.isMultiRoleMatch()) { LOG.warn(""Support for multi-role-match has been deprecated in Repose 8 and will be removed in Repose 9.""); } if (validatorConfiguration.getValidator().size() > 1) { LOG.warn(""Support for multiple validators has been deprecated in Repose 8 and will be removed in Repose 9.""); } for ( ValidatorItem validatorItem : validatorConfiguration.getValidator()) { if (validatorItem.getAny() != null) { LOG.warn(""Support for embedded WADLs has been deprecated in Repose 8 and will be removed in Repose 9.""); break; } } for ( ValidatorItem validatorItem : validatorConfiguration.getValidator()) { if (validatorItem.getRole() != null && !validatorItem.getRole().isEmpty()) { LOG.warn(""Support for specifying roles in the validator config has been deprecated in Repose 8 and will be removed in Repose 9. Please use rax:roles in the WADL instead.""); break; } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\api-validator-filter\src\main\java\org\openrepose\filters\apivalidator\ValidatorConfigurator.java,processConfiguration,"public void  (ValidatorConfiguration validatorConfiguration String configRoot String wadlUri){ logDeprecationWarnings(validatorConfiguration); defaultValidator=null; List<? extends ValidatorItem> validatorItems=validatorConfiguration.getValidator(); validators=new ArrayList<>(validatorItems.size()); DelegatingType delegatingType=validatorConfiguration.getDelegating(); boolean isDelegating=delegatingType != null; double delegationQuality=isDelegating ? delegatingType.getQuality() : 0.0; String componentName=isDelegating ? delegatingType.getComponentName() : ""api-validator""; for ( ValidatorItem validatorItem : validatorItems) { Config configuration=createConfiguration(validatorItem isDelegating delegationQuality validatorConfiguration.isMultiRoleMatch() configRoot componentName); configuration.setPreserveRequestBody(validatorConfiguration.isMultiRoleMatch()); ValidatorInfo validator=validatorItem.getAny() != null ? new ValidatorInfo(validatorItem.getRole() validatorItem.getAny() getWadlPath(wadlUri configRoot) configuration validatorItem.getValidatorName()) : new ValidatorInfo(validatorItem.getRole() getWadlPath(validatorItem.getWadl() configRoot) configuration validatorItem.getValidatorName()); validators.add(validator); if (validatorItem.isDefault() && defaultValidator == null) { defaultValidator=validator; } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\flush-output-filter\src\test\java\org\openrepose\filters\flush\FlushOutputFilterTest.java,shouldCallFlushBuffer,@Test public void  () throws IOException  ServletException { ServletResponse response=mock(ServletResponse.class); (new FlushOutputFilter()).doFilter(mock(ServletRequest.class) response mock(FilterChain.class)); verify(response).flushBuffer(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\exception-filter\src\main\java\org\openrepose\experimental\filters\exception\ExceptionFilter.java,doFilter,"@Override @SuppressWarnings(""squid:S00112"") public void  (ServletRequest servletRequest ServletResponse servletResponse FilterChain filterChain) throws IOException  ServletException { LOG.warn(""in the doFilter method of ExceptionFilter. About to throw som"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\exception-filter\src\main\java\org\openrepose\experimental\filters\exception\ExceptionFilter.java,init,"@Override public void  (FilterConfig filterConfig) throws ServletException { LOG.warn(""start "" + this.getClass()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,CIDRUtils,"public  (String cidr) throws UnknownHostException { this.cidr=cidr; if (this.cidr.contains(""/"")) { int index=this.cidr.indexOf('/'); String addressPart=this.cidr.substring(0 index); String networkPart=this.cidr.substring(index + 1); inetAddress=InetAddress.getByName(addressPart); prefixLength=Integer.parseInt(networkPart); calculate(); } else { throw new IllegalArgumentException(""not an valid CIDR format!""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,calculate,private void  () throws UnknownHostException { ByteBuffer maskBuffer; int targetSize; if (inetAddress.getAddress().length == 4) { maskBuffer=ByteBuffer.allocate(4).putInt(-1); targetSize=4; } else { maskBuffer=ByteBuffer.allocate(16).putLong(-1L).putLong(-1L); targetSize=16; } BigInteger mask=(new BigInteger(1 maskBuffer.array())).not().shiftRight(prefixLength); ByteBuffer buffer=ByteBuffer.wrap(inetAddress.getAddress()); BigInteger ipVal=new BigInteger(1 buffer.array()); BigInteger startIp=ipVal.and(mask); BigInteger endIp=startIp.add(mask.not()); byte[] startIpArr=toBytes(startIp.toByteArray() targetSize); byte[] endIpArr=toBytes(endIp.toByteArray() targetSize); this.startAddress=InetAddress.getByAddress(startIpArr); this.endAddress=InetAddress.getByAddress(endIpArr); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,getBroadcastAddress,public String  (){ return this.endAddress.getHostAddress(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,getNetworkAddress,public String  (){ return this.startAddress.getHostAddress(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,isInRange,public boolean  (String ipAddress) throws UnknownHostException { InetAddress address=InetAddress.getByName(ipAddress); BigInteger start=new BigInteger(1 this.startAddress.getAddress()); BigInteger end=new BigInteger(1 this.endAddress.getAddress()); BigInteger target=new BigInteger(1 address.getAddress()); int st=start.compareTo(target); int te=target.compareTo(end); return (st < 1) && (te < 1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\ip-user-filter\src\main\java\edazdarevic\commons\net\CIDRUtils.java,toBytes,private byte[]  (byte[] array int targetSize){ int counter=0; List<Byte> newArr=new ArrayList<>(); while (counter < targetSize && (array.length - 1 - counter >= 0)) { newArr.add(0 array[array.length - 1 - counter]); counter++; } int size=newArr.size(); for (int i=0; i < (targetSize - size); i++) { newArr.add(0 (byte)0); } byte[] ret=new byte[newArr.size()]; for (int i=0; i < newArr.size(); i++) { ret[i]=newArr.get(i); } return ret; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\flush-output-filter\src\main\java\org\openrepose\filters\flush\FlushOutputFilter.java,doFilter,@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { chain.doFilter(request response); response.flushBuffer(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\exception\RateLimitingSerializationException.java,RateLimitingSerializationException,public  (String message Throwable t){ super(message t); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\log\LimitLogger.java,LimitLogger,public  (String user HttpServletRequest request){ this.user=user; this.request=request; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\log\LimitLogger.java,getSanitizedUserIdentification,public String  (){ String userIdentification=user; final String xAuthToken=request.getHeader(CommonHttpHeader.AUTH_TOKEN); if (StringUtils.equalsIgnoreCase(xAuthToken userIdentification)) { final String xForwardedFor=request.getHeader(CommonHttpHeader.X_FORWARDED_FOR); userIdentification=xForwardedFor != null ? xForwardedFor : request.getRemoteHost(); } return userIdentification; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\log\LimitLogger.java,log,"public void  (String configured String used){ LOG.info(""Rate limiting user "" + getSanitizedUserIdentification() + "" at limit amount ""+ used+ "".""); LOG.info(""User rate limited for request "" + request.getMethod() + "" ""+ request.getRequestURL()+ "".""); LOG.info(""Configured rate limit is: "" + configured); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,RateLimitingFilter,@Inject public  (DatastoreService datastoreService ConfigurationService configurationService EventService eventService){ this.datastoreService=datastoreService; this.configurationService=configurationService; this.eventService=eventService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,buildHandler,private RateLimitingHandler  (){ RateLimitingConfig currentConfig=config.get(); return new RateLimitingHandler(new RateLimitingServiceHelper(currentConfig.rateLimitingService new ActiveLimitsWriter() new CombinedLimitsWriter()) eventService currentConfig.includeAbsoluteLimits currentConfig.describeLimitsUriRegex currentConfig.isOverLimit429ResponseCode currentConfig.datastoreWarnLimit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,configurationUpdated,@Override public void  (RateLimitingConfiguration configurationObject) throws UpdateFailedException { RateLimitingConfig newConfig=new RateLimitingConfig(); newConfig.rateLimitingService=RateLimitingServiceFactory.createRateLimitingService(new ManagedRate
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,destroy,"@Override public void  (){ LOG.trace(""Rate Limiting filter destroying...""); configurationService.unsubscribeFrom(configFilename this); LOG.trace(""Rate Limiting filter destroyed.""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,doFilter,"@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { if (!initialized) { LOG.error(""Filter has not yet initialized... Please check your configuration files and your artifacts dir"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,getDatastore,"private Datastore  (DatastoreType datastoreType){ String requestedDatastore=datastoreType.value(); if (StringUtils.isNotBlank(requestedDatastore)) { LOG.info(""Requesting datastore {}"" datastoreType); if (requestedDatastore.equals(DEFAULT_DATASTORE_NAME)) { LOG.info(""Using requested datastore {}"" requestedDatastore); return datastoreService.getDefaultDatastore(); } Datastore datastore=datastoreService.getDatastore(requestedDatastore); if (datastore != null) { LOG.info(""Using requested datastore {}"" requestedDatastore); return datastore; } else { LOG.warn(""Requested datastore not found""); } } Datastore targetDatastore=datastoreService.getDistributedDatastore(); if (targetDatastore != null) { LOG.info(""Using distributed datastore {}"" targetDatastore.getName()); } else { LOG.warn(""There were no distributed datastore managers available. Clustering for rate-limiting will be disabled.""); targetDatastore=datastoreService.getDefaultDatastore(); } return targetDatastore; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,init,"@Override public void  (FilterConfig filterConfig) throws ServletException { LOG.trace(""Rate Limiting filter initializing...""); configFilename=new FilterConfigHelper(filterConfig).getFilterConfig(DEFAULT_CONFIG); LOG.info(""Initializing Rate Limiting filte"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingFilter.java,isInitialized,@Override public boolean  (){ return initialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,RateLimitingHandler,public  (RateLimitingServiceHelper rateLimitingServiceHelper EventService eventService boolean includeAbsoluteLimits Optional<Pattern> describeLimitsUriPattern boolean overLimit429ResponseCode int datastoreWarnLimit){ this.includeAbsoluteLimits=includeAbsoluteLimits; this.describeLimitsUriPattern=describeLimitsUriPattern; this.rateLimitingServiceHelper=rateLimitingServiceHelper; this.overLimit429ResponseCode=overLimit429ResponseCode; this.datastoreWarnLimit=datastoreWarnLimit; this.eventService=eventService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,UpstreamException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,describeLimitsForRequest,private FilterAction  (HttpServletRequestWrapper request HttpServletResponseWrapper response){ if (includeAbsoluteLimits) { request.replaceHeader(HttpHeaders.ACCEPT MediaType.APPLICATION_XML_VALUE); return FilterAction.PROCESS_RESPONSE; } else { return noUpstreamResponse(request response); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,getPreferredMediaType,private Optional<MediaType>  (List<String> acceptValues){ Optional<MediaType> preferredMediaType=Optional.of(DEFAULT_MEDIA_TYPE); if (!acceptValues.isEmpty()) { List<MediaType> parsedAcceptMediaTypes=acceptValues.stream().map(RateLimitingHandler::parseMediaType).filter(Optional::isPresent).map(Optional::get).sorted(MediaType.SPECIFICITY_COMPARATOR).collect(Collectors.toList()); preferredMediaType=SUPPORTED_MEDIA_TYPES.stream().map(supportedMediaType -> parsedAcceptMediaTypes.stream().filter(supportedMediaType::isCompatibleWith).findFirst().filter(acceptMediaType -> acceptMediaType.getQualityValue() != 0.0).map(acceptMediaType -> (Map.Entry<MediaType MediaType>)new AbstractMap.SimpleEntry(supportedMediaType acceptMediaType))).filter(Optional::isPresent).map(Optional::get).sorted(Map.Entry.comparingByValue(MediaType.QUALITY_VALUE_COMPARATOR)).map(Map.Entry::getKey).findFirst(); } return preferredMediaType; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,handleRequest,"public FilterAction  (HttpServletRequestWrapper request HttpServletResponseWrapper response){ FilterAction filterAction; if (requestHasExpectedHeaders(request)) { if (!recordLimitedRequest(request response)) { filterAction=FilterAction.RETURN; } else if (describeLimitsUriPattern.isPresent() && describeLimitsUriPattern.get().matcher(request.getRequestURI()).matches()) { Optional<MediaType> preferredMediaType=getPreferredMediaType(request.getSplittableHeaders(HttpHeaders.ACCEPT)); if (!preferredMediaType.isPresent()) { response.setStatus(SC_NOT_ACCEPTABLE); filterAction=FilterAction.RETURN; } else { originalPreferredAccept=preferredMediaType.get(); filterAction=describeLimitsForRequest(request response); } } else { filterAction=FilterAction.PASS; } } else { LOG.warn(""Expected header: {} was not supplied in the request. Rate limiting requires this header to operate."" PowerApiHeader.USER); response.setStatus(SC_UNAUTHORIZED); filterAction=FilterAction.RETURN; } return filterAction; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,handleResponse,"public void  (HttpServletRequestWrapper request HttpServletResponseWrapper response){ try { if (response.getContentType() != null) { InputStream absoluteInputStream; if (response.getContentType().equalsIgnoreCase(MediaType.APPLICATION_JSON_VALUE)) { String newXml=UpstreamJsonToXml.convert(response.getOutputStreamAsInputStream()); absoluteInputStream=new ByteArrayInputStream(newXml.getBytes(StandardCharsets.UTF_8)); } else if (response.getContentType().equalsIgnoreCase(MediaType.APPLICATION_XML_VALUE)) { absoluteInputStream=response.getOutputStreamAsInputStream(); } else { LOG.error(""Upstream limits responded with a content type we cannot understand: {}"" response.getContentType()); throw new UpstreamException(""Upstream limits responded with a content type we cannot understand: "" + response.getContentType()); } ByteArrayOutputStream outputStream=new ByteArrayOutputStream(); final MediaType mediaType=rateLimitingServiceHelper.queryCombinedLimits(request originalPreferredAccept absoluteInputStream outputStream); response.setOutput(new ByteArrayInputStream(outputStream.toByteArray())); response.setContentType(mediaType.toString()); } else { LOG.warn(""NO DATA RECEIVED FROM UPSTREAM limits  only sending regular rate limits!""); noUpstreamResponse(request response); } } catch ( UpstreamException ue) { LOG.error(""Failure when querying limits. Reason: "" + ue.getMessage() ue); response.setStatus(SC_BAD_GATEWAY); } catch ( Exception e) { LOG.error(""Failure when querying limits. Reason: "" + e.getMessage() e); response.setStatus(SC_INTERNAL_SERVER_ERROR); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,noUpstreamResponse,"private FilterAction  (HttpServletRequestWrapper request HttpServletResponseWrapper response){ try { ByteArrayOutputStream outputStream=new ByteArrayOutputStream(); final MediaType mediaType=rateLimitingServiceHelper.queryActiveLimits(request originalPreferredAccept outputStream); response.setOutput(new ByteArrayInputStream(outputStream.toByteArray())); response.setContentType(mediaType.toString()); response.setStatus(SC_OK); } catch ( Exception e) { LOG.error(""Failure when querying limits. Reason: "" + e.getMessage() e); response.setStatus(SC_INTERNAL_SERVER_ERROR); } return FilterAction.RETURN; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,parseMediaType,"private static Optional<MediaType>  (String type){ Optional<MediaType> parsedType=Optional.empty(); try { parsedType=Optional.of(MediaType.parseMediaType(type)); } catch ( IllegalArgumentException iae) { LOG.warn(""Media type could not be parsed: {}"" type iae); } return parsedType; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,recordLimitedRequest,"private boolean  (HttpServletRequest request HttpServletResponseWrapper response){ boolean success=false; try { rateLimitingServiceHelper.trackLimits(request datastoreWarnLimit); success=true; } catch ( OverLimitException e) { LOG.trace(""Over Limit"" e); new LimitLogger(e.getUser() request).log(e.getConfiguredLimit() Integer.toString(e.getCurrentLimitAmount())); final HttpDate nextAvailableTime=new HttpDate(e.getNextAvailableTime()); if (e.getUser().equals(RateLimitingServiceImpl.GLOBAL_LIMIT_USER)) { response.setStatus(SC_SERVICE_UNAVAILABLE); } else if (overLimit429ResponseCode) { response.setStatus(ExtendedStatusCodes.SC_TOO_MANY_REQUESTS); } else { response.setStatus(SC_REQUEST_ENTITY_TOO_LARGE); } response.addHeader(HttpHeaders.RETRY_AFTER nextAvailableTime.toRFC1123()); eventService.newEvent(RateLimitFilterEvent.OVER_LIMIT new OverLimitData(e datastoreWarnLimit request response.getStatus())); } catch ( CacheException e) { LOG.error(""Failure when tracking limits."" e); response.setStatus(SC_BAD_GATEWAY); } catch ( DatastoreOperationException doe) { LOG.error(""Unable to communicate with dist-datastore."" doe); response.setStatus(SC_SERVICE_UNAVAILABLE); } return success; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingHandler.java,requestHasExpectedHeaders,private boolean  (HttpServletRequest request){ return request.getHeader(PowerApiHeader.USER) != null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,RateLimitingServiceHelper,public  (RateLimitingService service ActiveLimitsWriter activeLimitsWriter CombinedLimitsWriter combinedLimitsWriter){ this.service=service; this.activeLimitsWriter=activeLimitsWriter; this.combinedLimitsWriter=combinedLimitsWriter; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,decodeURI,private String  (String uri){ return URI.create(uri).getPath(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,getPreferredGroups,public List<String>  (HttpServletRequest request){ final HttpServletRequestWrapper mutableRequest=new HttpServletRequestWrapper(request); return mutableRequest.getPreferredSplittableHeaders(PowerApiHeader.GROUPS); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,getPreferredUser,public String  (HttpServletRequest request){ final HttpServletRequestWrapper mutableRequest=new HttpServletRequestWrapper(request); final List<String> preferredUsers=mutableRequest.getPreferredSplittableHeaders(PowerApiHeader.USER); String preferredUser=null; if (!preferredUsers.isEmpty()) { preferredUser=preferredUsers.get(0); } return preferredUser; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,queryActiveLimits,public MediaType  (HttpServletRequest request MediaType preferredMediaType OutputStream outputStream){ RateLimitList rateLimits=service.queryLimits(getPreferredUser(request) getPreferredGroups(request)); return activeLimitsWriter.write(rateLimits preferredMediaType outputStream); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,queryCombinedLimits,public MediaType  (HttpServletRequest request MediaType preferredMediaType InputStream absoluteLimits OutputStream outputStream){ RateLimitList rateLimits=service.queryLimits(getPreferredUser(request) getPreferredGroups(request)); return combinedLimitsWriter.write(rateLimits preferredMediaType absoluteLimits outputStream); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\RateLimitingServiceHelper.java,trackLimits,public void  (HttpServletRequest request int datastoreWarnLimit) throws OverLimitException { service.trackLimits(getPreferredUser(request) getPreferredGroups(request) decodeURI(request.getRequestURI()) HttpServletRequestWrapper.parseQueryString(request.getQueryString()) request.getMethod() datastoreWarnLimit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\CombinedLimitsTransformer.java,CombinedLimitsTransformer,public  (Templates templates JAXBContext jaxbContext ObjectFactory factory){ super(templates); this.jaxbContext=jaxbContext; this.factory=factory; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\CombinedLimitsTransformer.java,transform,@Override public void  (final LimitsTransformPair source final OutputStream target){ Transformer pooledObject; final ObjectPool<Transformer> objectPool=getXslTransformerPool(); try { pooledObject=objectPool.borrowObject(); try { final InputStreamUriParame
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\CombinedLimitsTransformerException.java,CombinedLimitsTransformerException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameter.java,InputStreamUriParameter,"public  (InputStream inputStreamReference){ this.inputStreamReference=inputStreamReference; this.hrefSpec=""reference:jio:"" + inputStreamReference.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameter.java,getHref,public String  (){ return hrefSpec; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameter.java,resolve,"@Override public Source  (String href String base) throws TransformerException { if (hrefSpec.equals(href)) { return new StreamSource(inputStreamReference); } throw new CombinedLimitsTransformerException(""Failed to resolve href: "" + href); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\LimitsTransformPair.java,LimitsTransformPair,public  (InputStream is RateLimitList rll){ this.is=is; this.rll=rll; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\LimitsTransformPair.java,getInputStream,public InputStream  (){ return is; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\combine\LimitsTransformPair.java,getRateLimitList,public RateLimitList  (){ return rll; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\write\ActiveLimitsWriter.java,write,"public MediaType  (RateLimitList activeRateLimits MediaType mediaType OutputStream outputStream){ try { final Limits limits=new Limits(); limits.setRates(activeRateLimits); final ByteArrayOutputStream bos=new ByteArrayOutputStream(); RESPONSE_TRANSFORMER.entityAsXml(limits bos); final LimitsResponseMimeTypeWriter responseWriter=new LimitsResponseMimeTypeWriter(RESPONSE_TRANSFORMER); return responseWriter.writeLimitsResponse(bos.toByteArray() mediaType outputStream); } catch ( Exception ex) { LOG.error(""Failed to serialize limits upon user request. Reason: "" + ex.getMessage() ex); throw new RateLimitingSerializationException(""Failed to serialize limits upon user request. Reason: "" + ex.getMessage() ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\TransformHelper.java,buildJaxbContext,"public static JAXBContext  (Class... objectFactories){ try { return JAXBContext.newInstance(objectFactories); } catch ( Exception e) { throw EXCEPTION_LOG.newException(""Unable to build Rate Limiter. Reason: "" + e.getMessage() e PowerApiContextException.class); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\TransformHelper.java,getTemplatesFromInputStream,"public static Templates  (InputStream iStream){ try { return TransformHelper.parseXslt(new StreamSource(iStream)); } catch ( TransformerConfigurationException tce) { throw EXCEPTION_LOG.newException(""Failed to generate new transform templates"" tce RuntimeException.class); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\TransformHelper.java,parseXslt,private static Templates  (Source s) throws TransformerConfigurationException { synchronized (XSLT_TRANSFORMER_FACTORY) { return new LogTemplatesWrapper(XSLT_TRANSFORMER_FACTORY.newTemplates(s)); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,LimitsEntityStreamTransformer,public  (JAXBContext context){ jsonTransform=new StreamToXsltTransform(TransformHelper.getTemplatesFromInputStream(LimitsEntityStreamTransformer.class.getResourceAsStream(JSON_XSL_LOCATION))); combiner=new CombinedLimitsTransformer(TransformHelper.getTemplatesFromInputStream(LimitsEntityStreamTransformer.class.getResourceAsStream(COMBINER_XSL_LOCATION)) context LIMITS_OBJECT_FACTORY); entiyTransform=new JaxbToStreamTransform(context); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,buildJaxbContext,private static JAXBContext  (){ return TransformHelper.buildJaxbContext(LIMITS_OBJECT_FACTORY.getClass()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,combine,public void  (LimitsTransformPair pair OutputStream out){ combiner.transform(pair out); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,entityAsXml,public void  (Limits l OutputStream output){ entiyTransform.transform(LIMITS_OBJECT_FACTORY.createLimits(l) output); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformer.java,streamAsJson,public void  (InputStream in OutputStream out){ jsonTransform.transform(in out); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\write\CombinedLimitsWriter.java,write,"public MediaType  (RateLimitList activeRateLimits MediaType mediaType InputStream absoluteLimits OutputStream outputStream){ try { final LimitsTransformPair transformPair=new LimitsTransformPair(absoluteLimits activeRateLimits); final ByteArrayOutputStream bos=new ByteArrayOutputStream(); RESPONSE_TRANSFORMER.combine(transformPair bos); final LimitsResponseMimeTypeWriter responseWriter=new LimitsResponseMimeTypeWriter(RESPONSE_TRANSFORMER); return responseWriter.writeLimitsResponse(bos.toByteArray() mediaType outputStream); } catch ( Exception ex) { LOG.error(""Failed to serialize limits upon user request. Reason: "" + ex.getMessage() ex); throw new RateLimitingSerializationException(""Failed to serialize limits upon user request. Reason: "" + ex.getMessage() ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriter.java,LimitsResponseMimeTypeWriter,public  (LimitsEntityStreamTransformer responseTransformer){ this.responseTransformer=responseTransformer; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\main\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriter.java,writeLimitsResponse,public MediaType  (byte[] readableContents MediaType mediaType OutputStream outputStream) throws IOException { if (MediaType.APPLICATION_XML_VALUE.equalsIgnoreCase(mediaType.toString())) { outputStream.write(readableContents); return MediaType.APPLICATION_XML; } else { responseTransformer.streamAsJson(new ByteArrayInputStream(readableContents) outputStream); return MediaType.APPLICATION_JSON; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\LimitLoggerTest.java,shouldReturnRequestRemoteHost,"@Test public void  (){ final LimitLogger logger=new LimitLogger(""some_username"" mockedRequest); when(mockedRequest.getHeader(CommonHttpHeader.AUTH_TOKEN)).thenReturn(""some_username""); when(mockedRequest.getHeader(CommonHttpHeader.X_FORWARDED_FOR)).thenRet"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\LimitLoggerTest.java,shouldReturnUsername,"@Test public void  (){ final LimitLogger logger=new LimitLogger(""some_username"" mockedRequest); when(mockedRequest.getHeader(CommonHttpHeader.AUTH_TOKEN)).thenReturn(null); final String userId=logger.getSanitizedUserIdentification(); assertEquals(userId """
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\LimitLoggerTest.java,shouldReturnXForwardedFor,"@Test public void  (){ final LimitLogger logger=new LimitLogger(""some_username"" mockedRequest); when(mockedRequest.getHeader(CommonHttpHeader.AUTH_TOKEN)).thenReturn(""some_username""); when(mockedRequest.getHeader(CommonHttpHeader.X_FORWARDED_FOR)).thenRet"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,createHandler,public static RateLimitingHandler  (RateLimitingConfiguration configurationObject EventService eventService DistributedDatastore datastore){ RateLimitCache rateLimitCache=new ManagedRateLimitCache(datastore); RateLimitingService rateLimitingService=RateLimitingServiceFactory.createRateLimitingService(rateLimitCache configurationObject); Optional<Pattern> describeLimitsUriRegex=configurationObject.getRequestEndpoint() != null ? Optional.of(Pattern.compile(configurationObject.getRequestEndpoint().getUriRegex())) : Optional.empty(); boolean includeAbsoluteLimits=configurationObject.getRequestEndpoint() != null && configurationObject.getRequestEndpoint().isIncludeAbsoluteLimits(); return new RateLimitingHandler(new RateLimitingServiceHelper(rateLimitingService new ActiveLimitsWriter() new CombinedLimitsWriter()) eventService includeAbsoluteLimits describeLimitsUriRegex configurationObject.isOverLimit429ResponseCode() configurationObject.getDatastoreWarnLimit().intValue()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,defaultRateLimitingConfiguration,"public static RateLimitingConfiguration  (){ final RateLimitingConfiguration newCfg=new RateLimitingConfiguration(); final RequestEndpoint endpoint=new RequestEndpoint(); endpoint.setIncludeAbsoluteLimits(Boolean.TRUE); endpoint.setUriRegex(""/v1.0/limits/?""); newCfg.setRequestEndpoint(endpoint); newCfg.getLimitGroup().add(newConfiguredLimitGroup(DEFAULT_USER_ROLE DEFAULT_URI DEFAULT_URI_REGEX DEFAULT_LIMIT_GROUP_ID)); newCfg.getLimitGroup().add(newMultiMethodConfiguredLimitGroup(DEFAULT_USER_ROLE MULTI_METHOD_URI MULTI_METHOD_URI_REGEX MULTI_METHOD_LIMIT_GROUP_ID)); return newCfg; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,newConfiguredLimitGroup,"public static ConfiguredLimitGroup  (String userRole String rateLimitUri String uriRegex String limitGroupId){ final int VALUE=3; final ConfiguredLimitGroup limitGroup=new ConfiguredLimitGroup(); limitGroup.setDefault(Boolean.TRUE); limitGroup.setId(limitGroupId); limitGroup.getGroups().add(userRole); limitGroup.getLimit().add(newConfiguredRateLimit(""one"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.GET); } }  rateLimitUri uriRegex VALUE)); limitGroup.getLimit().add(newConfiguredRateLimit(""two"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.PUT); } }  rateLimitUri uriRegex VALUE)); limitGroup.getLimit().add(newConfiguredRateLimit(""three"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.POST); } }  rateLimitUri uriRegex VALUE)); limitGroup.getLimit().add(newConfiguredRateLimit(""four"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.DELETE); } }  rateLimitUri uriRegex VALUE)); return limitGroup; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,newConfiguredRateLimit,public static ConfiguredRatelimit  (String id TimeUnit unit List<HttpMethod> methods String rateLimitUri String uriRegex int value){ final ConfiguredRatelimit rateLimit=new ConfiguredRatelimit(); rateLimit.setId(id); rateLimit.setUnit(unit); rateLimit.setUri(rateLimitUri); rateLimit.setUriRegex(uriRegex); rateLimit.setValue(value); for ( HttpMethod method : methods) { rateLimit.getHttpMethods().add(method); } return rateLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,newMultiMethodConfiguredLimitGroup,"public static ConfiguredLimitGroup  (String userRole String rateLimitUri String uriRegex String limitGroupId){ final int VALUE=3; final ConfiguredLimitGroup limitGroup=new ConfiguredLimitGroup(); limitGroup.setDefault(Boolean.FALSE); limitGroup.setId(limitGroupId); limitGroup.getGroups().add(userRole); limitGroup.getLimit().add(newConfiguredRateLimit(""one"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.GET); add(HttpMethod.PUT); add(HttpMethod.POST); add(HttpMethod.DELETE); } }  rateLimitUri uriRegex VALUE)); return limitGroup; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingTestSupport.java,newRegexCache,public static Map<String Map<String Pattern>>  (List<ConfiguredLimitGroup> clgList){ final Map<String Map<String Pattern>> regexCache=new HashMap<>(); for ( ConfiguredLimitGroup clg : clgList) { final Map<String Pattern> limitGroupRegexCache=new HashMap<>(); for ( ConfiguredRatelimit crl : clg.getLimit()) { limitGroupRegexCache.put(crl.getUri() Pattern.compile(crl.getUriRegex())); } regexCache.put(clg.getId() limitGroupRegexCache); } return regexCache; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,createRateLimitList,"private RateLimitList  (){ final Map<String CachedRateLimit> cacheMap; final ConfiguredLimitGroup configuredLimitGroup; LinkedList<HttpMethod> methods=new LinkedList<HttpMethod>(); methods.add(HttpMethod.GET); methods.add(HttpMethod.PUT); methods.add(HttpMethod.POST); methods.add(HttpMethod.DELETE); cacheMap=new HashMap<>(); configuredLimitGroup=new ConfiguredLimitGroup(); configuredLimitGroup.setDefault(Boolean.TRUE); configuredLimitGroup.setId(""configured-limit-group""); configuredLimitGroup.getGroups().add(""user""); cacheMap.put(SIMPLE_ID new CachedRateLimit(newLimitConfig(SIMPLE_ID SIMPLE_URI SIMPLE_URI_REGEX methods) 1)); configuredLimitGroup.getLimit().add(newLimitConfig(SIMPLE_ID SIMPLE_URI SIMPLE_URI_REGEX methods)); cacheMap.put(COMPLEX_ID new CachedRateLimit(newLimitConfig(COMPLEX_ID COMPLEX_URI COMPLEX_URI_REGEX methods) 1)); configuredLimitGroup.getLimit().add(newLimitConfig(COMPLEX_ID COMPLEX_URI COMPLEX_URI_REGEX methods)); return new RateLimitListBuilder(cacheMap configuredLimitGroup).toRateLimitList(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,getDocument,private Document  (String actual) throws ParserConfigurationException  SAXException  IOException { DocumentBuilder builder=builderFactory.newDocumentBuilder(); return builder.parse(new ByteArrayInputStream(actual.getBytes())); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,getxPath,private XPath  (){ XPathFactory xPathfactory=XPathFactory.newInstance(); return xPathfactory.newXPath(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,newLimitConfig,private ConfiguredRatelimit  (String limitId String uri String uriRegex LinkedList<HttpMethod> methods){ final ConfiguredRatelimit configuredRateLimit=new ConfiguredRatelimit(); configuredRateLimit.setId(limitId); configuredRateLimit.setUnit(TimeUnit.HOUR); configuredRateLimit.setUri(uri); configuredRateLimit.setUriRegex(uriRegex); configuredRateLimit.setValue(20); for ( HttpMethod m : methods) { configuredRateLimit.getHttpMethods().add(m); } return configuredRateLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,shouldCombineInputStreamWithJaxbElement,"@Test public void  () throws Exception { final InputStream is=CombineLimitsTransformTest.class.getResourceAsStream(""/META-INF/schema/examples/absolute-limits.xml""); RateLimitList rll=createRateLimitList(); final LimitsTransformPair tPair=new LimitsTransfo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\CombineLimitsTransformTest.java,standUp,@Before public void  () throws Exception { combiner=new CombinedLimitsTransformer(TransformHelper.getTemplatesFromInputStream(LimitsEntityStreamTransformer.class.getResourceAsStream(COMBINER_XSL_LOCATION)) JAXBContext.newInstance(LIMITS_OBJECT_FACTORY.get
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,beforeAny,@Before public void  () throws Exception { datastore=mock(DistributedDatastore.class); eventService=mock(EventService.class); final DatastoreService service=mock(DatastoreService.class); when(service.getDistributedDatastore()).thenReturn(datastore); mocke
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,newHandler,public RateLimitingHandler  (){ return RateLimitingTestSupport.createHandler(defaultRateLimitingConfiguration() eventService datastore); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,setup,"@Before public void  (){ defaultConfig.setId(""one""); defaultConfig.setUri("".*""); defaultConfig.setUriRegex("".*""); defaultConfig.getHttpMethods().add(HttpMethod.GET); defaultConfig.setValue(10); defaultConfig.setUnit(org.openrepose.core.services.ratelimit."
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldChangeAcceptTypeToXmlWhenJsonAbsoluteLimitsIsRequested,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/limits""); mockedRequest.addHeader(""Accept"" MediaType.APPLICATION_XML_VALUE); HttpServletRequestWrapper wrappedRequest=new HttpServletRequestWrapper(mockedRequest); newHandler().handleRequest(wrappe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldPassValidRequests,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/12345/resource""); mockedRequest.addHeader(""Accept"" MediaType.APPLICATION_JSON_VALUE); HashMap<String CachedRateLimit> limitMap=new HashMap<>(); CachedRateLimit cachedRateLimit=new CachedRateLimit(d"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldProcessResponseWhenAbsoluteLimitsIntegrationIsEnabled,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/limits""); mockedRequest.addHeader(""Accept"" MediaType.APPLICATION_JSON_VALUE); FilterAction filterAction=newHandler().handleRequest(new HttpServletRequestWrapper(mockedRequest) null); assertEquals("""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldRaiseEventWhenRateLimitBreaches,"@Test public void  () throws OverLimitException { RateLimitingServiceHelper helper=mock(RateLimitingServiceHelper.class); mockedRequest.addHeader(""Accept"" MediaType.APPLICATION_XML_VALUE); RateLimitingHandler handler=new RateLimitingHandler(helper eventSe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldRejectDescribeLimitsCallAcceptingAZeroQualitySupportedTypeWith406,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/limits""); mockedRequest.addHeader(""Accept"" ""application/xml;q=0.0""); FilterAction filterAction=newHandler().handleRequest(new HttpServletRequestWrapper(mockedRequest) mockedResponse); assertEquals("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldRejectDescribeLimitsCallAcceptingUnsupportedTypeWith406,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/limits""); mockedRequest.addHeader(""Accept"" ""leqz""); FilterAction filterAction=newHandler().handleRequest(new HttpServletRequestWrapper(mockedRequest) mockedResponse); assertEquals(""On rejected acce"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldReturnJsonDescribeLimitsCallWhenHighestQualitySupportedType,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/limits""); mockedRequest.addHeader(""Accept"" ""application/xml;q=0.5  application/json;q=0.8  text/xml""); RateLimitingConfiguration rateLimitingConfiguration=defaultRateLimitingConfiguration(); rateLi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldReturnJsonDescribeLimitsCallWhenMostSpecificSupportedType,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/limits""); mockedRequest.addHeader(""Accept"" ""application/*  application/json""); RateLimitingConfiguration rateLimitingConfiguration=defaultRateLimitingConfiguration(); rateLimitingConfiguration.getR"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldReturnJsonDescribeLimitsCallWithNoAcceptTypeNoUpstream,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/limits""); HttpServletRequestWrapper wrappedRequest=new HttpServletRequestWrapper(mockedRequest); RateLimitingConfiguration rateLimitingConfiguration=defaultRateLimitingConfiguration(); rateLimiting"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldReturnUnauthorizedWhenUserInformationIsMissing,"@Test public void  (){ FilterAction filterAction=newHandler().handleRequest(new HttpServletRequestWrapper(mockedRequest) mockedResponse); assertEquals(""Handler must return on rate limiting failure"" FilterAction.RETURN filterAction); verify(mockedResponse)"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\RateLimitingHandlerTest.java,shouldReturnXmlDescribeLimitsCallWhenJsonIsMostSpecificSupportedButNotHighestQualityType,"@Test public void  (){ mockedRequest.setRequestURI(""/v1.0/limits""); mockedRequest.addHeader(""Accept"" ""application/*;q=0.8  application/json;q=0.5""); RateLimitingConfiguration rateLimitingConfiguration=defaultRateLimitingConfiguration(); rateLimitingConfig"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriterTest.java,WhenWriting,public  () throws IOException { transformer=mock(LimitsEntityStreamTransformer.class); out=mock(OutputStream.class); final InputStream in=mock(InputStream.class); this.writer=new LimitsResponseMimeTypeWriter(transformer); doNothing().when(transformer).streamAsJson(in out); doNothing().when(out).write(readableContents); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriterTest.java,shouldChooseJsonPath,@Test public void  () throws IOException { writer.writeLimitsResponse(readableContents MediaType.APPLICATION_JSON out); verify(transformer times(1)).streamAsJson(any(InputStream.class) any(OutputStream.class)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\write\LimitsResponseMimeTypeWriterTest.java,shouldChooseXmlPath,@Test public void  () throws IOException { writer.writeLimitsResponse(readableContents MediaType.APPLICATION_XML out); verify(out times(1)).write(readableContents); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameterTest.java,setup,"@Before public void  (){ inputStreamReference=mock(InputStream.class); when(inputStreamReference.toString()).thenReturn(""streamRef""); inputStreamUriParameter=new InputStreamUriParameter(inputStreamReference); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameterTest.java,shouldReturnNewStreamSourceIfIsMatchingHref,"@Test public void  () throws TransformerException { String validHref=""reference:jio:streamRef""; assertNotNull(inputStreamUriParameter.resolve(validHref null)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\combine\InputStreamUriParameterTest.java,shouldThrowExceptionIfIsNotMatchingHref,"@Test(expected=CombinedLimitsTransformerException.class) public void  () throws TransformerException { String validHref=""reference:jio:invalidStreamRef""; assertNotNull(inputStreamUriParameter.resolve(validHref null)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\tightly-coupled-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\TightlyCoupledFilter.java,doFilter,"@Override @SuppressWarnings(""squid:S00112"") public void  (ServletRequest servletRequest ServletResponse servletResponse FilterChain filterChain) throws IOException  ServletException { HttpServletResponseWrapper mutableResponse=new HttpServletResponseWrapp"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\tightly-coupled-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\TightlyCoupledFilter.java,init,"@Override public void  (FilterConfig filterConfig) throws ServletException { LOG.debug(""Start "" + this.getClass().getName()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,FilterServletOutputStream,public  (ByteArrayOutputStream streamP){ stream=streamP; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,ResponseWrapper,public  (HttpServletResponse resp){ super(resp); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,doFilter,"@SuppressWarnings(""squid:S00112"") @Override public void  (ServletRequest servletRequest ServletResponse servletResponse FilterChain filterChain) throws IOException  ServletException { ResponseWrapper respWrap=new ResponseWrapper((HttpServletResponse)servl"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,getContent,"public String  (){ try { stream.flush(); stream.close(); } catch ( IOException e) { LOG.trace(""Caught Exception while flushing and closing stream."" e); } return stream.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,getOutputStream,@Override public ServletOutputStream  () throws IOException { return soStream; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,getWriter,@Override public PrintWriter  (){ return writer; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,init,"@Override public void  (FilterConfig filterConfig) throws ServletException { LOG.info(""Start {}"" this.getClass().getName()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\servlet-contract-filter\src\main\java\org\openrepose\experimental\filters\servletcontract\ResponseCaptureFilter.java,write,@Override public void  (byte[] b int off int len) throws IOException { stream.write(b off len); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\rate-limiting-filter\src\test\java\org\openrepose\filters\ratelimiting\util\LimitsEntityStreamTransformerTest.java,shouldStreamOpenStackFormat,"@Test public void  (){ final String JSON_LIMITS=""{\""limits\"" : {\""rate\"" : [{\""uri\"" : \""/v1.0/*\"" \""regex\"" : \""^/1.0/.*\"" "" + ""\""limit\"" : [{\""verb\"" : \""GET\"" \""value\"" : 600000 \""remaining\"" : 426852 \""unit\"" : \""HOUR\"" "" + ""\""next-available\"" : \""201"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxException.java,HttpxException,public  (Throwable cause){ super(cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshallerUtility.java,getContext,"private static JAXBContext  (){ try { return JAXBContext.newInstance(HTTPX_PACKAGE HttpxMarshallerUtility.class.getClassLoader()); } catch ( JAXBException ex) { throw new HttpxException(""Error creating JAXBContext for HTTPX"" ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshallerUtility.java,getSchemaSource,"private static Schema  (){ SchemaFactory factory=SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI XERCES_FACTORY_NAME HttpxMarshallerUtility.class.getClassLoader()); InputStream inputStream=HttpxMarshaller.class.getResourceAsStream(HTTPX_SCHEMA); URL inputURL=HttpxMarshaller.class.getResource(HTTPX_SCHEMA); Source schemaSource=new StreamSource(inputStream inputURL.toExternalForm()); try { return factory.newSchema(schemaSource); } catch ( SAXException ex) { throw new HttpxException(""Unable to load HTTPX schema"" ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshallerUtility.java,makeObject,"@Override public Unmarshaller  (){ try { Unmarshaller unmarshaller=JAXB_CONTEXT.createUnmarshaller(); unmarshaller.setSchema(SCHEMA); return unmarshaller; } catch ( JAXBException ex) { throw new HttpxException(""Unable to create HTTPX unmarshaller"" ex); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,HttpxProducer,public  (HttpServletRequest request HttpServletResponse response){ this.request=request; this.response=response; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,getHeaderList,private HeaderList  (HeaderContainer container){ HeaderList result=OBJECT_FACTORY.createHeaderList(); List<QualityNameValuePair> headerList=result.getHeader(); for ( HeaderName name : container.getHeaderNames()) { List<HeaderValue> values=container.getHeaderValues(name.getName()); for ( HeaderValue value : values) { QualityNameValuePair header=new QualityNameValuePair(); header.setName(name.getName()); header.setValue(value.getValue()); header.setQuality(value.getQualityFactor()); headerList.add(header); } } return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,getHeaders,public Headers  (){ if (headers == null) { headers=OBJECT_FACTORY.createHeaders(); headers.setRequest(getHeaderList(new RequestHeaderContainer(request))); headers.setResponse(getHeaderList(new ResponseHeaderContainer(response))); } return headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,getRequestInformation,"@SuppressWarnings(""squid:S2254"") public RequestInformation  (){ if (requestInformation == null) { requestInformation=OBJECT_FACTORY.createRequestInformation(); requestInformation.setUri(request.getRequestURI()); requestInformation.setUrl(request.getReques"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxProducer.java,getRequestParameters,public QueryParameters  (){ if (queryParameters == null) { queryParameters=OBJECT_FACTORY.createQueryParameters(); if (request != null) { List<NameValuePair> parameters=queryParameters.getParameter(); Set<Entry<String String[]>> params=request.getParameterMap().entrySet(); for ( Entry<String String[]> entry : params) { for ( String value : entry.getValue()) { NameValuePair param=new NameValuePair(); param.setName(entry.getKey()); param.setValue(value); parameters.add(param); } } } } return queryParameters; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,HttpxMarshaller,public  (){ objectFactory=new ObjectFactory(); parserFactory=SAXParserFactory.newInstance(); parserFactory.setNamespaceAware(true); parserFactory.setXIncludeAware(false); parserFactory.setValidating(true); parserFactory.setSchema(HttpxMarshallerUtility.SCHEMA); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,marshall,"private void  (Object o OutputStream out){ Marshaller pooledObject=null; ObjectPool<Marshaller> marshallerPool=HttpxMarshallerUtility.MARSHALLER_POOL; try { try { pooledObject=marshallerPool.borrowObject(); pooledObject.marshal(o out); } catch ( Exception ex) { marshallerPool.invalidateObject(pooledObject); pooledObject=null; throw new HttpxException(""Error marshalling HTTPX object"" ex); } finally { if (pooledObject != null) { marshallerPool.returnObject(pooledObject); } } } catch ( Exception e) { throw new HttpxException(""Error marshalling HTTPX object"" e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,unmarshall,"public <T>T  (InputStream xml){ T rtnObject=null; Unmarshaller pooledObject=null; ObjectPool<Unmarshaller> unmarshallerPool=HttpxMarshallerUtility.UNMARSHALLER_POOL; try { try { pooledObject=unmarshallerPool.borrowObject(); XMLReader xmlReader=parserFactory.newSAXParser().getXMLReader(); SAXSource source=new SAXSource(xmlReader new InputSource(xml)); Object result=pooledObject.unmarshal(source); if (result instanceof JAXBElement) { JAXBElement element=(JAXBElement)result; rtnObject=(T)element.getValue(); } else { rtnObject=(T)result; } } catch ( Exception ex) { unmarshallerPool.invalidateObject(pooledObject); pooledObject=null; throw new HttpxException(""Error unmarshalling xml input"" ex); } finally { if (pooledObject != null) { unmarshallerPool.returnObject(pooledObject); } } } catch ( Exception e) { LOG.error(""Error unmarshalling xml input"" e); throw new HttpxException(""Error unmarshalling xml input"" e); } return rtnObject; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,unmarshallHeaders,public Headers  (InputStream xml){ return unmarshall(xml); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,unmarshallQueryParameters,public QueryParameters  (InputStream xml){ return unmarshall(xml); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\HttpxMarshaller.java,unmarshallRequestInformation,public RequestInformation  (InputStream xml){ return unmarshall(xml); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\marshaller\MarshallerFactory.java,newInstance,public static Marshaller  (){ return new MessageEnvelopeMarshaller(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\ObjectFactoryUser.java,getObjectFactory,public ObjectFactory  (){ return objectFactory; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\ObjectFactoryUser.java,setObjectFactory,public void  (ObjectFactory objectFactory){ this.objectFactory=objectFactory; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\marshaller\MarshallerException.java,MarshallerException,public  (String message Throwable throwable){ super(message throwable); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\cdata\UnknownContentStreamProcessor.java,process,@Override public InputStream  (InputStream sourceStream){ return InputStreamMerger.merge(InputStreamMerger.wrap(UNKNOWN_PREFIX) sourceStream InputStreamMerger.wrap(UNKNOWN_SUFFIX)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\marshaller\MessageEnvelopeMarshaller.java,marshall,"@Override public InputStream  (MessageEnvelope messageEnvelope){ ByteArrayOutputStream outputStream=new ByteArrayOutputStream(); try { JAXBContext jaxbContext=JAXBContext.newInstance(""org.openrepose.core.httpx"" this.getClass().getClassLoader()); javax.xml"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\common\PreProcessorException.java,PreProcessorException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\EndElement.java,EndElement,"@SuppressWarnings(""squid:S1172"") public  (String element String name){ super(element); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\EndElement.java,outputElement,@Override public void  (ContentHandler handler) throws SAXException { handler.endElement(JSONX_URI getLocalName() getQname()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,BaseElement,public  (String element AttributesImpl attrs){ this.element=element; this.attrs=attrs; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,getAttributes,public AttributesImpl  (){ return attrs; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,getElement,public String  (){ return element; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,getLocalName,public String  (){ return getLocalName(element); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElement.java,getQname,public String  (){ return getQname(element); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactory.java,ElementFactory, (String tokenName String elementName){ this.tokenName=tokenName; this.elementName=elementName; this.elementClass=null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactory.java,getElement,"public static Element  (String tokenName String name){ Element result=null; for ( ElementFactory element : values()) { if (element.tokenName.equals(tokenName)) { if (element.elementClass != null) { try { result=(Element)element.elementClass.getConstructors()[0].newInstance(element.elementName name); } catch ( Exception ex) { result=null; LOG.trace(""Caught Unknown Exception"" ex); } } break; } } return result; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactory.java,getScalarElement,"public static <T>Element  (String tokenName String name T value){ Element result=null; for ( ElementFactory element : values()) { if (element.tokenName.equals(tokenName)) { if (element.elementClass != null) { try { result=(Element)element.elementClass.getConstructors()[0].newInstance(element.elementName name value); } catch ( Exception ex) { result=null; LOG.trace(""Caught Unknown Exception"" ex); } } else { result=new ScalarElement<>(element.elementName name value); } break; } } return result; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\StartElement.java,StartElement,"public  (String element String name){ super(element); if (name != null) { getAttributes().addAttribute("""" ""name"" ""name"" ""xsd:string"" name); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\StartElement.java,outputElement,@Override public void  (ContentHandler handler) throws SAXException { handler.startElement(JSONX_URI getLocalName() getQname() getAttributes()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ScalarElement.java,ScalarElement,"public  (String element String name T value){ super(element); this.value=value; if (name != null) { getAttributes().addAttribute("""" ""name"" ""name"" ""xsd:string"" name); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\ScalarElement.java,outputElement,@Override public void  (ContentHandler handler) throws SAXException { handler.startElement(JSONX_URI getLocalName() getQname() getAttributes()); if (value != null) { char[] charValue=value.toString().toCharArray(); handler.characters(charValue 0 charValue
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\TranslationPreProcessor.java,TranslationPreProcessor,public  (InputStream input MediaType contentType boolean jsonPreprocessing){ this.input=input; this.jsonPreprocessing=jsonPreprocessing; this.contentType=contentType; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\TranslationPreProcessor.java,getBodyStream,public InputStream  () throws IOException { final InputStream result; switch (BodyContentMediaType.getMediaType(contentType.getMimeType().getName())) { case XML: result=input; break; case JSON: result=jsonPreprocessing ? getJsonProcessor().process(input) : input; break; default : result=getUnknownContentProcessor().process(input); break; } return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\TranslationPreProcessor.java,getJsonProcessor,protected InputStreamProcessor  (){ return new JsonxStreamProcessor(new JsonFactory() HANDLER_FACTORY); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\TranslationPreProcessor.java,getUnknownContentProcessor,protected InputStreamProcessor  (){ return new UnknownContentStreamProcessor(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,JsonStreamProcessor,public  (TransformerHandler handler InputStream jsonIn OutputStream out) throws IOException { this.handler=handler; this.jp=jsonFactory.createJsonParser(jsonIn); this.out=out; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,JsonxStreamProcessor,public  (JsonFactory jsonFactory SAXTransformerFactory handlerFactory Properties properties){ this.jsonFactory=jsonFactory; this.handlerFactory=handlerFactory; format=properties; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,destroy,@Override public void  (){ exitThread=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,endDocument,"private void  () throws SAXException { try { handler.endPrefixMapping(XSD_PREFIX); } catch ( Exception ex) { LOG.warn(""Unable to end prefix mapping: "" + XSD_PREFIX ex); } try { handler.endPrefixMapping(JSON_PREFIX); } catch ( Exception ex) { LOG.warn(""Unable to end prefix mapping: "" + JSON_PREFIX ex); } handler.endDocument(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,outputItem,private void  (JsonParser jp ContentHandler handler) throws IOException  SAXException { JsonToken token=jp.getCurrentToken(); String fieldName=jp.getCurrentName(); if (token.isScalarValue()) { if (token.isNumeric()) { ElementFactory.getScalarElement(token.name() fieldName jp.getNumberValue()).outputElement(handler); } else { ElementFactory.getScalarElement(token.name() fieldName jp.getText()).outputElement(handler); } } else { Element element=ElementFactory.getElement(token.name() fieldName); if (element != null) { element.outputElement(handler); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,process,@Override public InputStream  (InputStream sourceStream){ try { final TransformerHandler transformerHandler=handlerFactory.newTransformerHandler(); final PipedInputStream resultStream=new PipedInputStream(); final PipedOutputStream out=new PipedOutputStre
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,run,"@Override public void  (){ try { startDocument(); try { while (jp.nextToken() != null && !exitThread) { outputItem(jp handler); } } finally { endDocument(); } } catch ( Exception ex) { LOG.error(""Error processing JSON input stream. Reason: "" + ex.getMessa"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\JsonxStreamProcessor.java,startDocument,private void  () throws SAXException { handler.startDocument(); handler.startPrefixMapping(JSON_PREFIX JSON_URI); handler.startPrefixMapping(XSD_PREFIX XSD_URI); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\NullElement.java,NullElement,public  (String element String name String value){ super(element name value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\util\BodyContentMediaType.java,BodyContentMediaType, (String regex){ pattern=Pattern.compile(regex); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\util\BodyContentMediaType.java,getMediaType,public static BodyContentMediaType  (String contentType){ if (contentType != null) { for ( BodyContentMediaType mediaType : values()) { if (mediaType.getPattern().matcher(contentType).matches()) { return mediaType; } } } return UNKNOWN; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\util\BodyContentMediaType.java,getPattern,Pattern  (){ return pattern; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\httpx\processor\json\elements\NullElement.java,outputElement,@Override public void  (ContentHandler handler) throws SAXException { handler.startElement(JSONX_URI getLocalName() getQname() getAttributes()); handler.endElement(JSONX_URI getLocalName() getQname()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolver.java,ClassPathUriResolver,public  (URIResolver parent){ super(parent); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolver.java,resolve,@Override public Source  (String href String base) throws TransformerException { if (href != null && href.startsWith(CLASSPATH_PREFIX)) { String path=href.substring(CLASSPATH_PREFIX.length()); InputStream resource=getClass().getResourceAsStream(path); if 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,HttpxUriInputParameterResolver,public  (URIResolver parent){ super(parent); marshaller=new HttpxMarshaller(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,getHeaders,private Headers  (){ return headers != null ? headers : getProducer().getHeaders(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,getProducer,private HttpxProducer  (){ if (producer == null) { producer=new HttpxProducer(request response); } return producer; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,getRequestInformation,private RequestInformation  (){ return info != null ? info : getProducer().getRequestInformation(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,getRequestParameters,private QueryParameters  (){ return params != null ? params : getProducer().getRequestParameters(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,reset,public void  (){ request=null; response=null; producer=null; headers=null; params=null; info=null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,resolve,@Override public Source  (String href String base) throws TransformerException { if (href != null) { if (href.startsWith(HEADERS_PREFIX)) { return new StreamSource(marshaller.marshall(getHeaders())); } else if (href.startsWith(REQUEST_INFO_PREFIX)) { retu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,setHeaders,public void  (Headers headers){ this.headers=headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,setParams,public void  (QueryParameters params){ this.params=params; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,setRequest,public void  (HttpServletRequest request){ this.request=request; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,setRequestInformation,public void  (RequestInformation info){ this.info=info; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\HttpxUriInputParameterResolver.java,setResponse,public void  (HttpServletResponse response){ this.response=response; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,OutputStreamUriParameterResolver,public  (OutputURIResolver parent){ this.parent=parent; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,ResourceNotFoundException, (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,addStream,public String  (OutputStream outputStreamReference String name){ String key=getHref(name); streams.put(key outputStreamReference); return key; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,clearStreams,public void  (){ streams.clear(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,close,@Override public void  (Result result) throws TransformerException { try { ((StreamResult)result).getOutputStream().close(); } catch ( IOException ex) { throw new TransformerException(ex); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,getHref,"public String  (String name){ try { return PREFIX + UriUtils.encodePathSegment(name ""utf-8""); } catch ( UnsupportedEncodingException ex) { LOG.trace(""unable to encode path segment to utf-8"" ex); return PREFIX + name; } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,newInstance,@Override public OutputURIResolver  (){ return new OutputStreamUriParameterResolver(this); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolver.java,resolve,@Override public Result  (String href String base) throws TransformerException { OutputStream stream=streams.get(href); if (stream != null) { StreamResult result=new StreamResult(stream); try { result.setSystemId(new URI(href).toString()); } catch ( URISy
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolver.java,SourceUriResolver,public  (URIResolver parent){ this.parent=parent; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolver.java,getParent,public URIResolver  (){ return parent; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolver.java,resolve,@Override public Source  (String href String base) throws TransformerException { if (parent != null) { return parent.resolve(href base); } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,InputStreamUriParameterResolver,public  (URIResolver parent){ super(parent); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,addResolver,public void  (URIResolver resolver){ resolvers.add(resolver); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,addStream,public String  (InputStream inputStreamReference String name){ String key=getHref(name); streams.put(key inputStreamReference); return key; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,clearStreams,public void  (){ streams.clear(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,getHref,public String  (String name){ return PREFIX + name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,removeStream,public void  (String name){ streams.remove(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolver.java,resolve,"@Override public Source  (String href String base) throws TransformerException { InputStream stream=streams.get(href); if (stream != null) { try { return new StreamSource(stream new URI(href).toString()); } catch ( URISyntaxException ex) { LOG.trace(""Unab"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolverChain.java,SourceUriResolverChain,public  (URIResolver parent){ super(parent); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolverChain.java,addResolver,public void  (URIResolver resolver){ resolvers.add(resolver); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolverChain.java,getResolverOfType,public <T extends URIResolver>T  (Class<T> type){ for ( URIResolver resolver : resolvers) { if (type.isAssignableFrom(resolver.getClass())) { return (T)resolver; } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\resolvers\SourceUriResolverChain.java,resolve,@Override public Source  (String href String base) throws TransformerException { for ( URIResolver resolver : resolvers) { Source source=resolver.resolve(href base); if (source != null) { return source; } } return super.resolve(href base); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\ReposeEntityResolver.java,ReposeEntityResolver, (EntityResolver parent boolean allowEntities){ this.parent=parent; this.allowEntities=allowEntities; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,TranslationFilter,@Inject public  (ConfigurationService configurationService @Value(ReposeSpringProperties.CORE.CONFIG_ROOT) String configurationRoot){ this.configurationService=configurationService; this.configurationRoot=configurationRoot; transformerFactory=(SAXTransfor
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,addStyleSheetsToWatchList,private void  (final TranslationBase translation){ if (translation.getStyleSheets() != null) { for ( StyleSheet sheet : translation.getStyleSheets().getStyle()) { if (sheet.getHref() != null) { xslListener.addToWatchList(sheet.getHref()); } } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\ReposeEntityResolver.java,resolveEntity,"@Override public InputSource  (String publicId String systemId) throws SAXException  IOException { LOG.warn((allowEntities ? ""Resolving"" : ""Removing"") + "" Entity[publicId='"" + (publicId != null ? publicId : """")+ ""'  systemId='""+ (systemId != null ? system"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,buildChainPool,private ObjectPool<XmlFilterChain>  (final TranslationBase translation){ return new SoftReferenceObjectPool<>(new XmlFilterChainFactory(xsltChainBuilder translation configurationRoot config)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,buildProcessorPools,public void  (){ synchronized (lock) { requestProcessorPools.clear(); responseProcessorPools.clear(); if (configuration.getResponseTranslations() != null) { for ( final ResponseTranslation translation : configuration.getResponseTranslations().getResponseTranslation()) { addStyleSheetsToWatchList(translation); } } if (configuration.getRequestTranslations() != null) { for ( final RequestTranslation translation : configuration.getRequestTranslations().getRequestTranslation()) { addStyleSheetsToWatchList(translation); } } if (configuration.getResponseTranslations() != null) { for ( final ResponseTranslation translation : configuration.getResponseTranslations().getResponseTranslation()) { List<XsltParameter> params=buildXslParamList(translation); ObjectPool<XmlFilterChain> pool=buildChainPool(translation); responseProcessorPools.add(new XmlChainPool(translation.getContentType() translation.getAccept() null translation.getCodeRegex() translation.getTranslatedContentType() params pool)); } } if (configuration.getRequestTranslations() != null) { for ( final RequestTranslation translation : configuration.getRequestTranslations().getRequestTranslation()) { List<XsltParameter> params=buildXslParamList(translation); ObjectPool<XmlFilterChain> pool=buildChainPool(translation); requestProcessorPools.add(new XmlChainPool(translation.getContentType() translation.getAccept() translation.getHttpMethods() null translation.getTranslatedContentType() params pool)); } } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,buildXslParamList,private List<XsltParameter>  (TranslationBase translation){ final List<XsltParameter> params=new ArrayList<>(); if (translation.getStyleSheets() != null) { for ( StyleSheet sheet : translation.getStyleSheets().getStyle()) { for ( StyleParam param : sheet.getParam()) { params.add(new XsltParameter<>(sheet.getId() param.getName() param.getValue())); } } } return params; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,configurationUpdated,@Override public void  (TranslationConfig newConfig){ synchronized (lock) { configuration=newConfig; if (configuration.getXslEngine() == XSLEngine.SAXON_EE) { updateTransformerPool(SAXON_EE_FACTORY_NAME); EnterpriseTransformerFactory etf=(EnterpriseTransf
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,destroy,@Override public void  (){ configurationService.unsubscribeFrom(config this); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,doFilter,"@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { if (!isInitialized) { LOG.error(""Filter has not yet initialized... Please check your configuration files and your artifacts d"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,getHandlerChainPool,private List<XmlChainPool>  (String method MediaType contentType List<MediaType> accept String status List<XmlChainPool> pools){ List<XmlChainPool> chains=new ArrayList<>(); for ( MediaType value : accept) { for ( XmlChainPool pool : pools) { if (pool.accepts(method contentType value status)) { chains.add(pool); if (!configuration.isMultiMatch()) { break; } } } } return chains; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,getInputParameters,"private List<XsltParameter>  (final HttpServletRequestWrapper request final HttpServletResponseWrapper response final TranslationResult lastResult){ List<XsltParameter> inputs=new ArrayList<>(); final String requestId=(String)request.getAttribute(""requestId""); inputs.add(new XsltParameter<>(""request"" request)); inputs.add(new XsltParameter<>(""response"" response)); inputs.add(new XsltParameter<>(""requestId"" requestId)); if (lastResult != null) { if (lastResult.getRequestInfo() != null) { inputs.add(new XsltParameter<>(""requestInfo"" lastResult.getRequestInfo())); } if (lastResult.getHeaders() != null) { inputs.add(new XsltParameter<>(""headers"" lastResult.getHeaders())); } if (lastResult.getQueryParameters() != null) { inputs.add(new XsltParameter<>(""queryParams"" lastResult.getQueryParameters())); } } inputs.add(new XsltParameter<>(INPUT_HEADERS_URI ""repose:input:headers:"" + requestId)); inputs.add(new XsltParameter<>(INPUT_QUERY_URI ""repose:input:query:"" + requestId)); inputs.add(new XsltParameter<>(INPUT_REQUEST_URI ""repose:input:request:"" + requestId)); inputs.add(new XsltParameter<>(""output-headers-uri"" ""repose:output:headers.xml"")); inputs.add(new XsltParameter<>(""output-query-uri"" ""repose:output:query.xml"")); inputs.add(new XsltParameter<>(""output-request-uri"" ""repose:output:request.xml"")); return inputs; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,handleRequest,"public HandleRequestResult  (HttpServletRequestWrapper request HttpServletResponseWrapper response){ FilterAction filterAction=RETURN; HttpServletRequestWrapper rtnRequest=request; MediaType contentType=HttpServletWrappersHelper.getContentType(rtnRequest); List<MediaType> acceptValues=HttpServletWrappersHelper.getAcceptValues(rtnRequest); List<XmlChainPool> pools=getHandlerChainPool(rtnRequest.getMethod() contentType acceptValues """" new ArrayList<>(requestProcessorPools)); if (pools.isEmpty()) { filterAction=PROCESS_RESPONSE; } else { try { TranslationResult result=null; for ( XmlChainPool pool : pools) { final ServletInputStream in=rtnRequest.getInputStream(); final ByteBuffer internalBuffer=new CyclicByteBuffer(DEFAULT_BUFFER_SIZE true); result=pool.executePool(new TranslationPreProcessor(in contentType true).getBodyStream() new ByteBufferServletOutputStream(internalBuffer) getInputParameters(rtnRequest response result)); if (result.isSuccess()) { rtnRequest=new HttpServletRequestWrapper(rtnRequest new ByteBufferInputStream(internalBuffer)); result.applyResults(rtnRequest response); if (StringUtils.isNotBlank(pool.getResultContentType())) { rtnRequest.replaceHeader(CONTENT_TYPE pool.getResultContentType()); contentType=HttpServletWrappersHelper.getContentType(pool.getResultContentType()); } response.setStatus(SC_OK); filterAction=PROCESS_RESPONSE; } else { response.setStatus(SC_BAD_REQUEST); break; } } } catch ( IOException ex) { LOG.error(""Error executing request transformer chain"" ex); response.setStatus(SC_INTERNAL_SERVER_ERROR); } } return new HandleRequestResult(filterAction rtnRequest response); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,handleResponse,"public void  (HttpServletRequestWrapper request HttpServletResponseWrapper response){ MediaType contentType=HttpServletWrappersHelper.getContentType(response); List<MediaType> acceptValues=HttpServletWrappersHelper.getAcceptValues(request); List<XmlChainPool> pools=getHandlerChainPool("""" contentType acceptValues String.valueOf(response.getStatus()) new ArrayList<>(responseProcessorPools)); if (!pools.isEmpty()) { try { ByteArrayOutputStream baos=new ByteArrayOutputStream(); TranslationResult result=null; for ( XmlChainPool pool : pools) { final InputStream in=response.getOutputStreamAsInputStream(); if (in != null && in.available() > 0) { result=pool.executePool(new TranslationPreProcessor(in contentType true).getBodyStream() baos getInputParameters(request response result)); if (result.isSuccess()) { result.applyResults(request response); if (StringUtils.isNotBlank(pool.getResultContentType())) { contentType=HttpServletWrappersHelper.getContentType(pool.getResultContentType()); response.replaceHeader(CONTENT_TYPE contentType.getValue()); } response.setOutput(new ByteArrayInputStream(baos.toByteArray())); } else { response.setStatus(SC_INTERNAL_SERVER_ERROR); break; } } } } catch ( IOException ex) { LOG.error(""Error executing response transformer chain"" ex); response.setStatus(SC_INTERNAL_SERVER_ERROR); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,init,"@Override public void  (FilterConfig filterConfig) throws ServletException { config=new FilterConfigHelper(filterConfig).getFilterConfig(DEFAULT_CONFIG); LOG.info(""Initializing filter using config "" + config); requestProcessorPools=new ArrayList<>(); resp"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\TranslationFilter.java,updateTransformerPool,private void  (String transFactoryClass){ if (!transformerFactory.getClass().getCanonicalName().equals(transFactoryClass)) { transformerFactory=(SAXTransformerFactory)TransformerFactory.newInstance(transFactoryClass this.getClass().getClassLoader()); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,StyleSheetInfo,public  (String id Node xsl String systemId){ this.id=id; this.uri=null; this.xsl=xsl; this.systemId=systemId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,getSystemId,public String  (){ return systemId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,getUri,public String  (){ return uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\StyleSheetInfo.java,getXsl,public Node  (){ return xsl; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,TranslationResult, (boolean success List<XsltParameter<? extends OutputStream>> outputs){ this.success=success; this.outputs=outputs; this.marshaller=new HttpxMarshaller(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,applyHeaders,"@SuppressWarnings(""squid:S1244"") private void  (final HttpServletRequestWrapper request final HttpServletResponseWrapper response){ Headers headers=getHeaders(); if (headers == null) { return; } if (headers.getRequest() != null) { for ( String header : re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,applyQueryParams,"private void  (final HttpServletRequestWrapper request){ QueryParameters params=getQueryParameters(); if (params == null) { return; } if (params.getParameter() != null) { StringBuilder sb=new StringBuilder(); for ( NameValuePair param : params.getParameter()) { if (sb.length() > 0) { sb.append(""&""); } sb.append(param.getName()).append(""="").append(param.getValue() != null ? param.getValue() : """"); } request.setQueryString(sb.toString()); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,applyRequestInfo,"private void  (final HttpServletRequestWrapper request){ RequestInformation requestInfo=getRequestInfo(); if (requestInfo == null) { return; } if (StringUtils.isNotBlank(requestInfo.getUri())) { request.setRequestURI(requestInfo.getUri()); } if (StringUtils.isNotBlank(requestInfo.getUrl())) { try { URL url=new URL(requestInfo.getUrl()); if (StringUtils.isNotBlank(url.getProtocol())) { request.setScheme(url.getProtocol()); } if (StringUtils.isNotBlank(url.getHost())) { request.setServerName(url.getHost()); } if (url.getPort() > 0) { request.setServerPort(url.getPort()); } if (StringUtils.isNotBlank(url.getPath())) { request.setRequestURI(url.getPath()); } if (StringUtils.isNotBlank(url.getQuery())) { request.setQueryString(url.getQuery()); } } catch ( MalformedURLException e) { LOG.info(""Failed to parse the translated URL: {}"" requestInfo.getUrl()); LOG.trace("""" e); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,applyResults,public void  (final HttpServletRequestWrapper request final HttpServletResponseWrapper response){ applyHeaders(request response); applyQueryParams(request); applyRequestInfo(request); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,getHeaders,"public Headers  (){ ByteArrayOutputStream headersOutput=getHeadersStream(); if (headersOutput == null) { return null; } byte[] out=headersOutput.toByteArray(); ByteArrayInputStream input=new ByteArrayInputStream(out); if (input.available() == 0) { return null; } if (LOG.isDebugEnabled()) { LOG.debug(""New headers: "" + new String(out StandardCharsets.UTF_8)); } return marshaller.unmarshallHeaders(input); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,getHeadersStream,public <T extends OutputStream>T  (){ return getStream(HEADERS_OUTPUT); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,getParams,public <T extends OutputStream>T  (){ return getStream(QUERY_OUTPUT); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,getQueryParameters,public QueryParameters  (){ ByteArrayOutputStream paramsOutput=getParams(); if (paramsOutput == null) { return null; } ByteArrayInputStream input=new ByteArrayInputStream(paramsOutput.toByteArray()); if (input.available() == 0) { return null; } return marshaller.unmarshallQueryParameters(input); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,getRequestInfo,"public RequestInformation  (){ ByteArrayOutputStream requestOutput=getRequestInfoStream(); if (requestOutput == null) { return null; } byte[] requestBytes=requestOutput.toByteArray(); ByteArrayInputStream input=new ByteArrayInputStream(requestBytes); if (input.available() == 0) { return null; } if (LOG.isDebugEnabled()) { LOG.debug(""New request info: "" + new String(requestBytes StandardCharsets.UTF_8)); } return marshaller.unmarshallRequestInformation(input); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,getRequestInfoStream,public <T extends OutputStream>T  (){ return getStream(REQUEST_OUTPUT); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,getStream,private <T extends OutputStream>T  (String name){ if (outputs == null) { return null; } for ( XsltParameter<? extends OutputStream> output : outputs) { if (name.equalsIgnoreCase(output.getName())) { return (T)output.getValue(); } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\TranslationResult.java,isSuccess,public boolean  (){ return success; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,XmlChainPool,"public  (String contentType String accept List<HttpMethod> httpMethods String statusRegex String resultContentType List<XsltParameter> params ObjectPool<XmlFilterChain> pool){ this.contentType=contentType; this.acceptAllContentTypes=StringUtils.equalsIgnoreCase(this.contentType MimeType.WILDCARD.getName()); this.accept=accept; this.acceptAll=StringUtils.equalsIgnoreCase(this.accept MimeType.WILDCARD.getName()); this.resultContentType=resultContentType; this.objectPool=pool; this.httpMethods=httpMethods != null ? httpMethods : new ArrayList<>(); this.statusRegex=StringUtils.isNotBlank(statusRegex) ? Pattern.compile(statusRegex) : null; this.params=params; if (this.httpMethods.isEmpty()) { this.allMethods=true; } else { for ( HttpMethod method : this.httpMethods) { this.allMethods|=""ALL"".equalsIgnoreCase(method.name()); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,accepts,public boolean  (String method MediaType contentType MediaType accept String statusCode){ boolean matchesAccept=acceptAll || StringUtils.equalsIgnoreCase(this.accept accept.getValue()); boolean matchesContentType=acceptAllContentTypes || StringUtils.equalsIgnoreCase(this.contentType contentType.getValue()); boolean matchesStatusCode=statusRegex != null && StringUtils.isNotBlank(statusCode) ? statusRegex.matcher(statusCode).matches() : true; boolean matchesMethod=StringUtils.isNotBlank(method) ? allMethods || matchesMethod(method) : true; return matchesAccept && matchesContentType && matchesStatusCode&& matchesMethod; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,executePool,"public TranslationResult  (final InputStream in final OutputStream out final List<XsltParameter> inputs){ TranslationResult rtn=new TranslationResult(false); XmlFilterChain pooledObject; try { pooledObject=objectPool.borrowObject(); try { inputs.addAll(params); List<XsltParameter<? extends OutputStream>> outputs=getOutputParameters(); pooledObject.executeChain(in out inputs outputs); rtn=new TranslationResult(true outputs); } catch ( XsltException e) { objectPool.invalidateObject(pooledObject); pooledObject=null; LOG.warn(""Error processing transforms"" e.getMessage() e); } catch ( Exception e) { objectPool.invalidateObject(pooledObject); pooledObject=null; LOG.error(""Failed to utilize the XmlFilterChain. Reason: {}"" e.getLocalizedMessage()); LOG.trace("""" e); } finally { if (pooledObject != null) { objectPool.returnObject(pooledObject); } } } catch ( Exception e) { LOG.error(""Failed to obtain an XmlFilterChain. Reason: {}"" e.getLocalizedMessage()); LOG.trace("""" e); } return rtn; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,getOutputParameters,private List<XsltParameter<? extends OutputStream>>  (){ List<XsltParameter<? extends OutputStream>> outputs=new ArrayList<>(); outputs.add(new XsltParameter<OutputStream>(TranslationResult.HEADERS_OUTPUT new ByteArrayOutputStream())); outputs.add(new XsltParameter<OutputStream>(TranslationResult.QUERY_OUTPUT new ByteArrayOutputStream())); outputs.add(new XsltParameter<OutputStream>(TranslationResult.REQUEST_OUTPUT new ByteArrayOutputStream())); return outputs; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,getResultContentType,public String  (){ return resultContentType; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlChainPool.java,matchesMethod,private boolean  (String requestMethod){ boolean result=false; for ( HttpMethod method : httpMethods) { result|=method.name().equalsIgnoreCase(requestMethod); } return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,XmlFilterChainBuilder,"public  (SAXTransformerFactory factory boolean allowEntities boolean allowDeclarations){ this.factory=factory; this.allowEntities=allowEntities; this.allowDtdDeclarations=allowDeclarations; try { factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING true); factory.setFeature(FeatureKeys.ALLOW_EXTERNAL_FUNCTIONS Boolean.TRUE); } catch ( TransformerConfigurationException ex) { LOG.error(""Error"" ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,build,"@SuppressWarnings(""squid:RedundantThrowsDeclarationCheck"") public XmlFilterChain  (StyleSheetInfo... stylesheets) throws XsltException { try { List<XmlFilterReference> filters=new ArrayList<>(); XMLReader lastReader=getSaxReader(); if (stylesheets.length "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,doBuild,"private XMLFilter  (StyleSheetInfo resource Source source){ try { return factory.newXMLFilter(source); } catch ( TransformerConfigurationException ex) { LOG.error(""Error creating XML Filter for "" + resource.getUri() ex); throw new XsltException(ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,getClassPathResource,"protected StreamSource  (String path){ String resource=path.substring(CLASSPATH_PREFIX.length()); InputStream input=getClass().getResourceAsStream(resource); URL inputURL=getClass().getResource(resource); if (input != null) { return new StreamSource(input inputURL.toExternalForm()); } throw new XsltException(""Unable to load stylesheet "" + path); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,getSaxReader,"protected XMLReader  () throws ParserConfigurationException  SAXException { SAXParserFactory spf=SAXParserFactory.newInstance(); spf.setXIncludeAware(false); spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING true); spf.setValidating(true); spf.setNamespaceAware(true); spf.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"" !allowDtdDeclarations); SAXParser parser=spf.newSAXParser(); XMLReader reader=parser.getXMLReader(); reader.setEntityResolver(new ReposeEntityResolver(reader.getEntityResolver() allowEntities)); LOG.info(""SAXParserFactory class: "" + spf.getClass().getCanonicalName()); LOG.info(""SAXParser class: "" + parser.getClass().getCanonicalName()); LOG.info(""XMLReader class: "" + reader.getClass().getCanonicalName()); return reader; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,getStylesheetSource,"protected Source  (StyleSheetInfo stylesheet){ if (stylesheet.getXsl() != null) { return nodeToStreamSource(stylesheet.getXsl() stylesheet.getSystemId()); } else if (stylesheet.getUri() != null) { if (stylesheet.getUri().startsWith(CLASSPATH_PREFIX)) { return getClassPathResource(stylesheet.getUri()); } else { try { URL stylesheetURL=new URL(stylesheet.getUri()); return new StreamSource(stylesheetURL.openStream() stylesheetURL.toExternalForm()); } catch ( IOException ex) { throw new XsltException(""Unable to load stylesheet: "" + stylesheet.getUri() ex); } } } throw new IllegalArgumentException(""No stylesheet specified for "" + stylesheet.getId()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainBuilder.java,nodeToStreamSource,private StreamSource  (Node node String systemId){ try { DOMSource domSource=new DOMSource(node systemId); StringWriter stringWriter=new StringWriter(); StreamResult result=new StreamResult(stringWriter); Transformer transformer=xalancTransformerFactory.newTransformer(); transformer.transform(domSource result); StringReader reader=new StringReader(stringWriter.toString()); return new StreamSource(reader); } catch ( TransformerException ex) { throw new XsltException(ex); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,XmlFilterChainExecutor,"public  (XmlFilterChain chain){ this.chain=chain; format.put(OutputKeys.OMIT_XML_DECLARATION ""yes""); format.put(OutputKeys.ENCODING ""UTF-8""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,executeChain,"@SuppressWarnings(""squid:RedundantThrowsDeclarationCheck"") public void  (InputStream in OutputStream output List<XsltParameter> inputs List<XsltParameter<? extends OutputStream>> outputs) throws XsltException { List<String> uris=findInputUris(inputs); try"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,findInputUris,private List<String>  (List<XsltParameter> inputs){ List<String> uris=new ArrayList<>(); for ( XsltParameter parameter : inputs) { if (isInputUriName(parameter.getName())) { uris.add((String)parameter.getValue()); } } return uris; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,getOutputUriResolver,protected OutputStreamUriParameterResolver  (Transformer transformer){ if (transformer instanceof Controller) { Controller controller=(Controller)transformer; OutputURIResolver resolver=controller.getOutputURIResolver(); if (!(resolver instanceof OutputStreamUriParameterResolver)) { resolver=new OutputStreamUriParameterResolver(controller.getOutputURIResolver()); controller.setOutputURIResolver(resolver); } return (OutputStreamUriParameterResolver)resolver; } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,getResolverChain,protected SourceUriResolverChain  (Transformer transformer){ URIResolver resolver=transformer.getURIResolver(); SourceUriResolverChain resolverChain; if (!(resolver instanceof SourceUriResolverChain)) { resolverChain=new SourceUriResolverChain(resolver); resolverChain.addResolver(new InputStreamUriParameterResolver()); resolverChain.addResolver(new HttpxUriInputParameterResolver()); resolverChain.addResolver(new ClassPathUriResolver()); transformer.setURIResolver(resolverChain); } else { resolverChain=(SourceUriResolverChain)resolver; } return resolverChain; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,getSAXSource,protected SAXSource  (InputSource source){ if (chain.getFilters().isEmpty()) { return new SAXSource(source); } XMLReader lastFilter=chain.getFilters().get(chain.getFilters().size() - 1).getReader(); return new SAXSource(lastFilter source); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,isInputUriName,private boolean  (String name){ return TranslationFilter.INPUT_HEADERS_URI.equals(name) || TranslationFilter.INPUT_QUERY_URI.equals(name) || TranslationFilter.INPUT_REQUEST_URI.equals(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,removeInputUrisFromPool,"private void  (DocumentPool documentPool List<String> uris){ for ( String uri : uris) { DocumentInfo documentInfo=documentPool.find(uri); if (documentInfo != null) { LOG.trace(""Removing document {}"" uri); documentPool.discard(documentInfo); } else { LOG.trace(""Tried to remove document {} but wasn't present."" uri); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,setAlternateOutputs,"private void  (Transformer transformer List<XsltParameter<? extends OutputStream>> outputs){ OutputStreamUriParameterResolver resolver=getOutputUriResolver(transformer); if (resolver != null) { resolver.clearStreams(); if (outputs != null && !outputs.isEmpty()) { for ( XsltParameter<? extends OutputStream> output : outputs) { String paramName=resolver.addStream(output.getValue() output.getName()); transformer.setParameter(""headersOutputUri"" paramName); } } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainExecutor.java,setInputParameters,"protected void  (String id Transformer transformer List<XsltParameter> inputs){ SourceUriResolverChain resolverChain=getResolverChain(transformer); InputStreamUriParameterResolver resolver=resolverChain.getResolverOfType(InputStreamUriParameterResolver.class); resolver.clearStreams(); if (inputs != null && !inputs.isEmpty()) { HttpxUriInputParameterResolver headersResolver=resolverChain.getResolverOfType(HttpxUriInputParameterResolver.class); headersResolver.reset(); for ( XsltParameter input : inputs) { if (""*"".equals(input.getStyleId()) || id != null && id.equals(input.getStyleId())) { String param=null; if (input.getValue() instanceof InputStream) { param=resolver.addStream((InputStream)input.getValue()); } else if (input.getValue() instanceof HttpServletRequest) { headersResolver.setRequest((HttpServletRequest)input.getValue()); } else if (input.getValue() instanceof HttpServletResponse) { headersResolver.setResponse((HttpServletResponse)input.getValue()); } else if (input.getValue() instanceof Headers) { headersResolver.setHeaders((Headers)input.getValue()); } else if (input.getValue() instanceof QueryParameters) { headersResolver.setParams((QueryParameters)input.getValue()); } else if (input.getValue() instanceof RequestInformation) { headersResolver.setRequestInformation((RequestInformation)input.getValue()); } else { param=input.getValue() != null ? input.getValue().toString() : null; } if (param != null) { transformer.setParameter(input.getName() param); } } } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltException.java,XsltException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChain.java,XmlFilterChain,public  (SAXTransformerFactory factory List<XmlFilterReference> filters){ this.factory=factory; this.filters=filters; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChain.java,executeChain,"@SuppressWarnings(""squid:RedundantThrowsDeclarationCheck"") public void  (InputStream in OutputStream output List<XsltParameter> inputs List<XsltParameter<? extends OutputStream>> outputs) throws XsltException { if (in == null || output == null) { return; "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChain.java,getFactory,public SAXTransformerFactory  (){ return factory; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChain.java,getFilters,public List<XmlFilterReference>  (){ return filters; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltParameter.java,XsltParameter,public  (String style String name T value){ this.styleId=style; this.name=name; this.value=value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltParameter.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltParameter.java,getStyleId,public String  (){ return styleId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\XsltParameter.java,getValue,public T  (){ return value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterReference.java,XmlFilterReference,"public  (String id XMLReader reader){ LOG.info(""Translation style sheet "" + id + "" using XmlFilter of type: ""+ reader.getClass().getCanonicalName()); this.id=id; this.reader=reader; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterReference.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterReference.java,getReader,public XMLReader  (){ return reader; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainFactory.java,XmlFilterChainFactory,public  (final XmlFilterChainBuilder xsltChainBuilder final TranslationBase translation final String configRoot final String config){ this.builder=xsltChainBuilder; this.translation=translation; this.configRoot=configRoot; this.config=config; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainFactory.java,getAbsoluteXslPath,"private String  (String xslPath){ return !xslPath.contains(""://"") ? StringUtils.join(""file://"" configRoot ""/"" xslPath) : xslPath; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainFactory.java,makeObject,@Override public XmlFilterChain  (){ List<StyleSheetInfo> stylesheets=new ArrayList<>(); if (translation.getStyleSheets() != null) { for ( StyleSheet sheet : translation.getStyleSheets().getStyle()) { if (sheet.getXsl() != null && sheet.getXsl().getAny() 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,XslUpdateListener,public  (TranslationFilter translationFilter ConfigurationService configurationService String configRoot){ this.translationFilter=translationFilter; this.configurationService=configurationService; this.watchList=new HashSet<>(); this.configRoot=configRoot; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,addToWatchList,public void  (String path){ watchList.add(getAbsolutePath(path)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,configurationUpdated,"@Override public void  (ConfigurationResource config){ LOG.info(""XSL file changed: "" + config.name()); translationFilter.buildProcessorPools(); isInitialized=true; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,getAbsolutePath,"private String  (String xslPath){ return !xslPath.contains(""://"") ? StringUtils.join(""file://"" configRoot ""/"" xslPath) : xslPath; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,listen,"public void  (){ for ( String xsl : watchList) { LOG.info(""Watching XSL: "" + xsl); configurationService.subscribeTo(""translation"" xsl this new GenericResourceConfigurationParser() false); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\main\java\org\openrepose\filters\translation\XslUpdateListener.java,unsubscribe,public void  (){ for ( String xsl : watchList) { configurationService.unsubscribeFrom(xsl this); } watchList.clear(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactoryTest.java,testGetElement,"@Test public void  (){ String tokenName=""START_OBJECT""; String name=""fid""; Element result=ElementFactory.getElement(tokenName name); assertNotNull(result); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\ElementFactoryTest.java,testGetScalarElement,"@Test public void  (){ String tokenName=""VALUE_STRING""; String name=""fid""; Object value=""value""; Element expResult=new ScalarElement<>(""VALUE_STRING"" ""fid"" ""value""); Element result=ElementFactory.getScalarElement(tokenName name value); assertNotNull(resul"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,setUpClass,"@BeforeClass public static void  (){ AttributesImpl atts=new AttributesImpl(); atts.addAttribute("""" ""date"" ""date"" ""java.lang.String"" ""25-dec-05""); instance=new BaseElement(""id:TestID"" atts); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,tearDownClass,@AfterClass public static void  (){ instance=null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,testGetAttributes,"@Test public void  (){ AttributesImpl expResult=new AttributesImpl(); expResult.addAttribute("""" ""date"" ""date"" ""java.lang.String"" ""25-dec-05""); AttributesImpl result=instance.getAttributes(); assertEquals(expResult.getQName(1) result.getQName(1)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,testGetElement,"@Test public void  (){ String expResult=""id:TestID""; String result=instance.getElement(); assertEquals(expResult result); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,testGetLocalName_0args,"@Test public void  (){ String expResult=""TestID""; String result=instance.getLocalName(); assertEquals(expResult result); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,testGetLocalName_String,"@Test public void  (){ String name=""id:TestID""; String expResult=""TestID""; String result=BaseElement.getLocalName(name); assertEquals(expResult result); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,testGetQname_0args,"@Test public void  (){ String expResult=""json:TestID""; String result=instance.getQname(); assertEquals(expResult result); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\BaseElementTest.java,testGetQname_String,"@Test public void  (){ String name=""id:TestID""; String expResult=""json:TestID""; String result=BaseElement.getQname(name); assertEquals(expResult result); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\NullElementTest.java,testOutputElement,"@Test public void  () throws Exception { ContentHandler handler=mock(ContentHandler.class); NullElement instance=new NullElement(BaseElement.JSONX_URI ""fid"" ""value""); instance.outputElement(handler); assertEquals(""fid"" instance.getAttributes().getValue(0)"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\common\PreProcessorExceptionTest.java,shouldProcessCustomMessage,"@Test public void  (){ String expectedExceptionMessage=""Oops! Something unexpected happened.""; PreProcessorException preProcessorException=new PreProcessorException(expectedExceptionMessage); assertEquals(expectedExceptionMessage preProcessorException.get"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\ScalarElementTest.java,testOutputElement,"@Test public void  () throws Exception { ContentHandler handler=mock(ContentHandler.class); ScalarElement instance=new ScalarElement(BaseElement.JSONX_URI ""fid"" ""value""); instance.outputElement(handler); assertEquals(""fid"" instance.getAttributes().getValu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,setUp,@Before public void  (){ parent=mock(URIResolver.class); resolver=new ClassPathUriResolver(parent); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,shouldCallParentResolverForNonClassPathResources,"@Test public void  () throws TransformerException { String href=""/style.xsl""; String base=""base""; Source resource=resolver.resolve(href base); verify(parent).resolve(eq(href) eq(base)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,shouldFindResource,"@Test public void  () throws TransformerException { Source resource=resolver.resolve(ClassPathUriResolver.CLASSPATH_PREFIX + ""/style.xsl"" """"); assertThat(""Resource path should not be empty"" resource.getSystemId() not(isEmptyString())); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,shouldHandleNullHref,"@Test public void  () throws TransformerException { Source resource=resolver.resolve(null """"); assertNull(""Should handle null href"" resource); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\ClassPathUriResolverTest.java,shouldReturnNullWhenResourceNotFound,"@Test public void  () throws TransformerException { Source resource=resolver.resolve(ClassPathUriResolver.CLASSPATH_PREFIX + ""/blah.xsl"" """"); assertNull(""Should return null for non-existent resource"" resource); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,setUp,@Before public void  (){ parent=mock(InputStreamUriParameterResolver.class); resolver=new InputStreamUriParameterResolver(parent); input=mock(InputStream.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,shouldAddStream,"@Test public void  () throws TransformerException { String name=""data""; String href=resolver.getHref(name); String actualHref=resolver.addStream(input name); assertEquals(""HREFs should be equal"" href actualHref); StreamSource source=(StreamSource)resolver"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,shouldCallAdditionalResolver,"@Test public void  () throws TransformerException { String href=""otherdata""; String base=""base""; URIResolver additional=mock(URIResolver.class); resolver.addResolver(additional); resolver.resolve(href base); verify(parent).resolve(href base); verify(addit"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,shouldCallParentResolver,"@Test public void  () throws TransformerException { String href=""otherdata""; String base=""base""; resolver.resolve(href base); verify(parent).resolve(href base); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,shouldRemoveStream,"@Test public void  () throws TransformerException { String href=resolver.getHref(input); String actualHref=resolver.addStream(input); StreamSource source=(StreamSource)resolver.resolve(href ""base""); assertThat(""Source stream path should not be empty"" sour"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,shouldRemoveStreamByName,"@Test public void  () throws TransformerException { String name=""data""; String href=resolver.getHref(name); String actualHref=resolver.addStream(input name); assertEquals(""HREFs should be equal"" href actualHref); StreamSource source=(StreamSource)resolver"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\InputStreamUriParameterResolverTest.java,shouldReturnSourceOfAdditionalResolver,"@Test public void  () throws TransformerException { String href=""otherdata""; String base=""base""; URIResolver additional=mock(URIResolver.class); Source source=mock(Source.class); when(additional.resolve(anyString() anyString())).thenReturn(source); resolv"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\StartElementTest.java,testOutputElement,"@Test public void  () throws Exception { ContentHandler handler=mock(ContentHandler.class); StartElement instance=new StartElement(BaseElement.JSONX_URI ""fid""); instance.outputElement(handler); assertEquals(""fid"" instance.getAttributes().getValue(0)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\httpx\processor\json\elements\EndElementTest.java,testOutputElement,"@Test public void  () throws Exception { ContentHandler handler=mock(ContentHandler.class); EndElement instance=new EndElement(BaseElement.JSONX_URI ""nid""); instance.outputElement(handler); assertEquals(BaseElement.JSONX_URI instance.getElement()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolverTest.java,setUp,@Before public void  () throws TransformerException { parent=mock(OutputURIResolver.class); output=mock(OutputStream.class); resolver=new OutputStreamUriParameterResolver(parent); result=mock(Result.class); when(parent.resolve(anyString() anyString())).th
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolverTest.java,shouldAddStream,"@Test public void  () throws TransformerException { String name=""out""; resolver.addStream(output name); String href=resolver.getHref(name); assertNotNull(""Should return the href for our output stream"" href); StreamResult result=(StreamResult)resolver.reso"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolverTest.java,shouldCallParentResolver,"@Test public void  () throws TransformerException { String name=""someUri""; String href=name; String base=""somebase""; Result result=resolver.resolve(href base); verify(parent).resolve(href base); assertNotNull(result); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\resolvers\OutputStreamUriParameterResolverTest.java,shouldThrowExceptionWhenCannotResolve,"@Test(expected=RuntimeException.class) public void  () throws TransformerException { final String doesntExist=""reference:jio:doesn'tExist""; resolver.resolve(doesntExist ""somebase""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterHandlersTest.java,setup,"@Before public void  () throws Exception { ConfigurationService configurationService=mock(ConfigurationService.class); String configurationRoot=""""; filter=new TranslationFilter(configurationService configurationRoot); MockFilterConfig mockFilterConfig=new"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterHandlersTest.java,shouldCreateProcessorPoolsOnConfigUpdate,@Test public void  () throws Exception { TranslationConfig config=new TranslationConfig(); RequestTranslations requestTranslations=new RequestTranslations(); ResponseTranslations responseTranslations=new ResponseTranslations(); RequestTranslation trans1=n
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsAllTest.java,setup,"@Before public void  () throws Exception { ConfigurationService configurationService=mock(ConfigurationService.class); String configurationRoot=""""; filter=new TranslationFilter(configurationService configurationRoot); MockFilterConfig mockFilterConfig=new"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsAllTest.java,setupSpec,"@BeforeClass public static void  () throws Exception { contentRemoveMe=IOUtils.toByteArray(TranslationFilterMethodsMatchTest.class.getResourceAsStream(""/remove-me-element.xml"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsAllTest.java,shouldTranslateRequestBodyForAnyMethodPost,"@Test public void  () throws IOException  SAXException { mockRequest=new MockHttpServletRequest(HttpMethod.POST.value() ""/129.0.0.1/servers/""); mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); mockRequest.setContentType(APPLICATION_XML_VALUE); mockReq"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsAllTest.java,shouldTranslateRequestBodyForAnyMethodPut,"@Test public void  () throws IOException  SAXException { mockRequest=new MockHttpServletRequest(HttpMethod.PUT.value() ""/129.0.0.1/servers/""); mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); mockRequest.setContentType(APPLICATION_XML_VALUE); mockRequ"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsMatchTest.java,setup,"@Before public void  () throws Exception { ConfigurationService configurationService=mock(ConfigurationService.class); String configurationRoot=""""; filter=new TranslationFilter(configurationService configurationRoot); MockFilterConfig mockFilterConfig=new"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsMatchTest.java,setupSpec,"@BeforeClass public static void  () throws Exception { contentRemoveMe=IOUtils.toByteArray(TranslationFilterMethodsMatchTest.class.getResourceAsStream(""/remove-me-element.xml"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsMatchTest.java,shouldNotTranslateRequestBodyForNonMatchingMethod,"@Test public void  () throws IOException  SAXException { mockRequest=new MockHttpServletRequest(HttpMethod.PUT.value() ""/129.0.0.1/servers/""); mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); mockRequest.setContentType(APPLICATION_XML_VALUE); mockRequ"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterMethodsMatchTest.java,shouldTranslateRequestBodyForMatchingMethod,"@Test public void  () throws IOException  SAXException { mockRequest=new MockHttpServletRequest(HttpMethod.POST.value() ""/129.0.0.1/servers/""); mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); mockRequest.setContentType(APPLICATION_XML_VALUE); mockReq"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,setUp,"@Before public void  (){ List<HttpMethod> httpMethods=new ArrayList<HttpMethod>(); httpMethods.add(HttpMethod.POST); responsePoolForXml=new XmlChainPool(""application/xml"" ""application/xml"" null ""4[\\d]{2}"" ""blah"" null null); requestPoolForXml=new XmlChain"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,shouldAcceptRequestCriteria,"@Test public void  (){ assertTrue(""Should accept our response values"" requestPoolForXml.accepts(""POST"" xml xml """")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,shouldAcceptResponseCriteria,"@Test public void  (){ assertTrue(""Should accept our response values"" responsePoolForXml.accepts("""" xml xml ""400"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,shouldRejectRequestCriteriaWhenAcceptTypeIsWrong,"@Test public void  (){ assertFalse(""Should reject invalid accept"" requestPoolForXml.accepts("""" xml json """")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,shouldRejectRequestCriteriaWhenContentTypeIsWrong,"@Test public void  (){ assertFalse(""Should reject invalid content type"" requestPoolForXml.accepts("""" json xml """")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,shouldRejectRequestCriteriaWhenMethodWrong,"@Test public void  (){ assertFalse(""Should reject invalid method"" requestPoolForXml.accepts(""GET"" xml xml """")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,shouldRejectResponseCriteriaWhenAcceptTypeIsWrong,"@Test public void  (){ assertFalse(""Should reject invalid accept"" responsePoolForXml.accepts("""" xml json ""400"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,shouldRejectResponseCriteriaWhenContentTypeIsWrong,"@Test public void  (){ assertFalse(""Should reject invalid content type"" responsePoolForXml.accepts("""" json xml ""400"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XmlFilterChainPoolTest.java,shouldRejectResponseCriteriaWhenResponseCodeWrong,"@Test public void  (){ assertFalse(""Should reject invalid response code"" responsePoolForXml.accepts("""" xml xml ""200"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,setup,"@Before public void  () throws Exception { ConfigurationService configurationService=mock(ConfigurationService.class); String configurationRoot=""""; filter=new TranslationFilter(configurationService configurationRoot); MockFilterConfig mockFilterConfig=new"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,setupSpec,"@BeforeClass public static void  () throws Exception { contentEmpty=IOUtils.toByteArray(TranslationFilterTest.class.getResourceAsStream(""/empty.xml"")); contentRemoveMe=IOUtils.toByteArray(TranslationFilterTest.class.getResourceAsStream(""/remove-me-element"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,shouldNotModifyResponseStatusIf,@Test public void  () throws Exception { mockResponse.setStatus(-1); httpServletRequestWrapper=new HttpServletRequestWrapper(mockRequest); httpServletResponseWrapper=new HttpServletResponseWrapper(mockResponse ResponseMode.MUTABLE ResponseMode.MUTABLE); f
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,shouldNotTranslateRequestBodyForUnconfiguredAccept,"@Test public void  () throws IOException  SAXException { mockRequest.setContent(contentRemoveMe); mockRequest.addHeader(ACCEPT ""application/other""); mockResponse.setContentType(""application/other""); httpServletRequestWrapper=new HttpServletRequestWrapper("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,shouldNotTranslateResponseBodyForUnconfiguredAccept,@Test public void  () throws IOException  SAXException { mockRequest.addHeader(ACCEPT APPLICATION_JSON_VALUE); mockRequest.setContentType(APPLICATION_XML_VALUE); httpServletRequestWrapper=new HttpServletRequestWrapper(mockRequest); httpServletResponseWrap
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,shouldTranslateEmptyRequestBody,@Test public void  () throws IOException  SAXException { mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); mockRequest.setContent(contentEmpty); httpServletRequestWrapper=new HttpServletRequestWrapper(mockRequest); httpServletResponseWrapper=new HttpSe
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,shouldTranslateEmptyResponseBody,@Test public void  () throws IOException  SAXException { mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); httpServletRequestWrapper=new HttpServletRequestWrapper(mockRequest); httpServletResponseWrapper=new HttpServletResponseWrapper(mockResponse Resp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,shouldTranslateNonEmptyRequestBody,@Test public void  () throws IOException  SAXException { mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); mockRequest.setContent(contentRemoveMe); httpServletRequestWrapper=new HttpServletRequestWrapper(mockRequest); httpServletResponseWrapper=new Htt
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,shouldTranslateNonEmptyResponseBody,@Test public void  () throws IOException  SAXException { mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); httpServletRequestWrapper=new HttpServletRequestWrapper(mockRequest); httpServletResponseWrapper=new HttpServletResponseWrapper(mockResponse Resp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\TranslationFilterTest.java,shouldTranslateNullResponseBody,@Test public void  () throws IOException  SAXException { mockRequest.addHeader(ACCEPT APPLICATION_XML_VALUE); httpServletRequestWrapper=new HttpServletRequestWrapper(mockRequest); httpServletResponseWrapper=new HttpServletResponseWrapper(mockResponse Resp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,before,"@BeforeClass public static void  (){ System.setProperty(""javax.xml.transform.TransformerFactory"" TranslationFilter.SAXON_HE_FACTORY_NAME); factory=(SAXTransformerFactory)TransformerFactory.newInstance(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,setUp,"@Before public void  (){ builder=new XmlFilterChainBuilder(factory false true); output=new ByteArrayOutputStream(); body=getClass().getResourceAsStream(""/empty.xml""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,shouldHandleEmptySetOfStyles,"@Test public void  (){ XmlFilterChain chain=builder.build(); assertNotNull(""Should build an empty filter chain"" chain); assertEquals(""Should have 1 filter"" 1 chain.getFilters().size()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,shouldHandleStyleSheetList,"@Test public void  (){ XmlFilterChain chain=builder.build(new StyleSheetInfo("""" ""classpath:///style.xsl"")); assertNotNull(""Should build a filter chain"" chain); assertEquals(""Should have 1 filter"" 1 chain.getFilters().size()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\translation-filter\src\test\java\org\openrepose\filters\translation\xslt\xmlfilterchain\XsltFilterChainBuilderTest.java,shouldUseInputOutputStreams,"@Test public void  (){ List<XsltParameter> inputs=new ArrayList<>(); XmlFilterChain chain=builder.build(new StyleSheetInfo("""" ""classpath:///style.xsl"")); chain.executeChain(body output inputs null); String outResult=output.toString(); assertThat(""Should h"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedHostNotFoundException.java,VersionedHostNotFoundException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,ConfigurationData,public  (Map<String Destination> configuredHosts Map<String ServiceVersionMapping> serviceMappings){ this.configuredHosts=configuredHosts; this.serviceMappings=serviceMappings; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,findOriginServiceByUri,public VersionedOriginService  (HttpServletRequestWrapper request) throws VersionedHostNotFoundException { for ( Map.Entry<String ServiceVersionMapping> entry : serviceMappings.entrySet()) { final VersionedRequest versionedRequest=new VersionedRequest(request entry.getValue()); if (versionedRequest.requestBelongsToVersionMapping()) { return new VersionedOriginService(entry.getValue() getHostForVersionMapping(entry.getValue())); } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,getConfiguredHosts,public Map<String Destination>  (){ return configuredHosts; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,getHostForVersionMapping,"public Destination  (ServiceVersionMapping mapping) throws VersionedHostNotFoundException { final Destination host=configuredHosts.get(mapping.getPpDestId()); if (host == null) { throw new VersionedHostNotFoundException(""Endpoint: "" + mapping.getPpDestId() + "" is not specified in the system model""); } return host; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,getMatchingMediaType,public org.openrepose.filters.versioning.config.MediaType  (ServiceVersionMapping serviceVersionMapping MediaType preferedMediaType){ final MediaTypeList configuredMediaTypes=serviceVersionMapping.getMediaTypes(); if (configuredMediaTypes == null) { return null; } for ( org.openrepose.filters.versioning.config.MediaType configuredMediaType : configuredMediaTypes.getMediaType()) { HeaderValue mediaType=new HeaderValueParser(configuredMediaType.getType()).parse(); if (preferedMediaType.equalsTo(mediaType)) { return configuredMediaType; } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,getOriginServiceForRequest,public VersionedOriginService  (HttpServletRequestWrapper request) throws VersionedHostNotFoundException { VersionedOriginService targetOriginService=findOriginServiceByUri(request); if (targetOriginService == null) { final MediaType range=RequestMediaRangeInterrogator.interrogate(request.getRequestURI() request.getPreferredSplittableHeadersWithParameters(HttpHeaders.ACCEPT)).get(0); final VersionedMapType currentServiceVersion=getServiceVersionForMediaRange(range); if (currentServiceVersion != null) { final Destination destination=getHostForVersionMapping(currentServiceVersion.getServiceVersionMapping()); request.replaceHeader(HttpHeaders.ACCEPT currentServiceVersion.getMediaType().getBase()); targetOriginService=new VersionedOriginService(currentServiceVersion.getServiceVersionMapping() destination); } } return targetOriginService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,getServiceMappings,public Collection<ServiceVersionMapping>  (){ return serviceMappings.values(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,getServiceVersionForMediaRange,public VersionedMapType  (MediaType preferedMediaRange){ org.openrepose.filters.versioning.config.MediaType mediaType; for ( Map.Entry<String ServiceVersionMapping> serviceMapping : serviceMappings.entrySet()) { mediaType=getMatchingMediaType(serviceMapping.getValue() preferedMediaRange); if (mediaType != null) { return new VersionedMapType(serviceMapping.getValue() mediaType); } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,isRequestForVersions,"public boolean  (HttpServletRequest uniformResourceInfo){ return ""/"".equals(StringUriUtilities.formatUri(uniformResourceInfo.getRequestURI())); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\ConfigurationData.java,versionChoicesAsList,public VersionChoiceList  (HttpServletRequestWrapper request){ final VersionChoiceList versionChoices=new VersionChoiceList(); for ( ServiceVersionMapping mapping : getServiceMappings()) { final VersionedRequest versionedRequest=new VersionedRequest(request mapping); final VersionChoice choice=new VersionChoiceFactory(mapping).create(); final Link selfReference=new Link(); selfReference.setRel(Relation.SELF); selfReference.setHref(versionedRequest.asExternalURL()); choice.getLink().add(selfReference); versionChoices.getVersion().add(choice); } return versionChoices; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedOriginService.java,VersionedOriginService,public  (ServiceVersionMapping mapping Destination originServiceHost){ this.mapping=mapping; this.originServiceHost=originServiceHost; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedMapType.java,getMediaType,public MediaType  (){ return mediaType; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedOriginService.java,getMapping,public ServiceVersionMapping  (){ return mapping; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedMapType.java,getServiceVersionMapping,public ServiceVersionMapping  (){ return serviceVersionMapping; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedOriginService.java,getOriginServiceHost,public Destination  (){ return originServiceHost; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,RequestUrlTokenizer,private  (String serviceRootHref String versionId String resource){ this.serviceRootHref=serviceRootHref; this.versionId=versionId; this.resource=resource; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,getResource,public String  (){ return resource; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,getServiceRootHref,public String  (){ return serviceRootHref; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,getVersionId,public String  (){ return versionId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,hasVersionInfo,public static boolean  (String versionToken Set<String> versionIds){ boolean found=false; for ( String versionId : versionIds) { if (versionId.equals(versionToken)) { found=true; break; } } return found; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestUrlTokenizer.java,tokenize,"public static RequestUrlTokenizer  (String requestUrl Set<String> versionIds){ if (versionIds == null) { throw new IllegalArgumentException(""versionIds must be provided!""); } String serviceRootHref=""""; String versionId=""""; String resource=""""; Matcher matcher; matcher=SERVICE_ROOT_HREF_PATTERN.matcher(requestUrl); if (matcher.find()) { serviceRootHref=matcher.group(0); } boolean hasVersionInfo=false; matcher=VERSION_ID_PATTERN.matcher(requestUrl); if (matcher.find() && hasVersionInfo(matcher.group(1) versionIds)) { versionId=matcher.group(1); hasVersionInfo=true; } matcher=hasVersionInfo ? RESOURCE_PATTERN.matcher(requestUrl) : RESOURCE_WITHOUT_VERSION_PATTERN.matcher(requestUrl); if (matcher.find() && !""/"".equals(matcher.group(1))) { resource=matcher.group(1); } return new RequestUrlTokenizer(serviceRootHref versionId resource); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,VersionedRequest,public  (HttpServletRequestWrapper request ServiceVersionMapping mapping){ this.request=request; this.mapping=mapping; this.clientAddressedHost=request.getHeader(HttpHeaders.HOST); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,asExternalURL,public String  (){ return request.getRequestURL().toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,asInternalURI,public String  (){ return removeVersionPrefix(request mapping.getId()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,asInternalURL,"public String  (){ return StringUtils.join(request.getScheme() + ""://"" clientAddressedHost asInternalURI()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,getMapping,public ServiceVersionMapping  (){ return mapping; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,getRequest,public HttpServletRequestWrapper  (){ return request; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,isRequestForRoot,"public boolean  (){ return ""/"".equals(StringUriUtilities.formatUri(request.getRequestURI())); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,removeVersionPrefix,"private String  (HttpServletRequest request String version){ if (request.getRequestURI().charAt(0) != '/') { throw new IllegalArgumentException(""Request URI must be a URI with a root reference - i.e. the URI must start with '/'""); } final String uri=StringUriUtilities.formatUri(request.getRequestURI()); final String formattedVersion=StringUriUtilities.formatUri(version); if (formattedVersion.length() == 1) { return uri; } final String containedVersion=formattedVersion + ""/""; final int start=uri.indexOf(containedVersion); if (start >= 0) { return uri.replaceFirst(containedVersion ""/""); } else if (uri.endsWith(formattedVersion)) { return uri.replace(formattedVersion ""/""); } return uri; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,requestBelongsToVersionMapping,public boolean  (){ final String requestedUri=StringUriUtilities.formatUri(request.getRequestURI()); final String versionUri=StringUriUtilities.formatUri(mapping.getId()); return indexOfUriFragment(requestedUri versionUri) == 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\domain\VersionedRequest.java,requestMatchesVersionMapping,public boolean  (){ final String requestedUri=StringUriUtilities.formatUri(request.getRequestURI()); return requestedUri.equals(StringUriUtilities.formatUri(mapping.getId())); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\ContentTransformer.java,ContentTransformer,"public  (JsonFormat jsonFormat){ try { final JAXBContext context=JAXBContext.newInstance(org.openrepose.filters.versioning.schema.ObjectFactory.class org.openrepose.filters.versioning.config.ObjectFactory.class); String jsonXslt=XSLT_DIR + ((JsonFormat.COMPUTE == jsonFormat) ? JSON_XSLT_COMPUTE : JSON_XSLT_IDENTITY); final Templates jsonXsltTemplates=ContentTransformer.parseXslt(new StreamSource(getClass().getResourceAsStream(jsonXslt))); xmlStreamTransform=new JaxbToStreamTransform<>(context); jsonStreamTransform=new XsltToStreamTransform<>(jsonXsltTemplates context); } catch ( Exception ex) { throw new PowerApiContextException(""Failed to build transformation processors for response marshalling. Reason: "" + ex.getMessage() ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\ContentTransformer.java,parseXslt,private static Templates  (Source s) throws TransformerConfigurationException { synchronized (XSLT_TRANSFORMER_FACTORY) { return new LogTemplatesWrapper(XSLT_TRANSFORMER_FACTORY.newTemplates(s)); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\ContentTransformer.java,transform,public void  (JAXBElement element MediaType mediaRange OutputStream outputStream){ switch (mediaRange.getMimeType()) { case APPLICATION_XML: xmlStreamTransform.transform(element outputStream); break; case APPLICATION_JSON: case UNKNOWN: default : jsonStreamTransform.transform(element outputStream); break; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\VariantParser.java,getMediaTypeFromVariant,"public static MimeType  (String variant){ final Matcher matcher=VARIANT_REGEX.matcher(variant); MimeType mediaType=null; if (matcher.matches()) { if (variant.toLowerCase().contains(""xml"")) { mediaType=MimeType.APPLICATION_XML; } else if (variant.toLowerCase().contains(""json"")) { mediaType=MimeType.APPLICATION_JSON; } } return mediaType; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\VersionChoiceFactory.java,VersionChoiceFactory,public  (ServiceVersionMapping serviceVersionMapping){ this.serviceVersionMapping=serviceVersionMapping; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\VersionChoiceFactory.java,convertMediaTypes,private MediaTypeList  (){ MediaTypeList mediaTypeList=null; if (serviceVersionMapping.getMediaTypes() != null) { mediaTypeList=new MediaTypeList(); for ( MediaType configuredMediaType : serviceVersionMapping.getMediaTypes().getMediaType()) { org.openrepose.filters.versioning.schema.MediaType responseMediaType=new org.openrepose.filters.versioning.schema.MediaType(); responseMediaType.setBase(configuredMediaType.getBase()); responseMediaType.setType(configuredMediaType.getType()); mediaTypeList.getMediaType().add(responseMediaType); } } return mediaTypeList; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\VersionChoiceFactory.java,create,public VersionChoice  (){ VersionChoice versionChoice=new VersionChoice(); versionChoice.setId(serviceVersionMapping.getId()); versionChoice.setStatus(serviceVersionMapping.getStatus() == null ? null : VersionStatus.fromValue(serviceVersionMapping.getStatus().value())); versionChoice.setMediaTypes(convertMediaTypes()); return versionChoice; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\main\java\org\openrepose\filters\versioning\util\RequestMediaRangeInterrogator.java,interrogate,public static List<MediaType>  (String requestUri List<String> acceptHeaderValues){ final List<MediaType> ranges=new LinkedList<>(); final MimeType mediaType=VariantParser.getMediaTypeFromVariant(requestUri); if (mediaType == null) { List<HeaderValue> convertedValues=acceptHeaderValues.stream().map(headerValue -> new HeaderValueParser(headerValue).parse()).collect(Collectors.toList()); ranges.addAll(new MediaRangeProcessor(convertedValues).process()); } else { ranges.add(new MediaType(mediaType.getName() mediaType 1)); } if (ranges.isEmpty()) { ranges.add(new MediaType(MimeType.UNSPECIFIED.getName() MimeType.UNSPECIFIED -1)); } return ranges; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\testhelpers\ConfigurationDataCreator.java,createConfiguredHosts,"public static Map<String Destination>  (int numOfHosts){ Map<String Destination> hosts=new HashMap<String Destination>(); for (int i=0; i < numOfHosts; i++) { DestinationEndpoint host=new DestinationEndpoint(); host.setId(""service-v1."" + i); hosts.put(""service-v1."" + i host); } return hosts; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\testhelpers\ConfigurationDataCreator.java,createConfiguredMappings,"public static Map<String ServiceVersionMapping>  (int numOfMappings){ Map<String ServiceVersionMapping> mappings=new HashMap<String ServiceVersionMapping>(); String id; ServiceVersionMapping mapping; for (int i=0; i < numOfMappings; i++) { id=""v1."" + i; mapping=new ServiceVersionMapping(); mapping.setId(id); mapping.setPpDestId(""service-v1."" + i); mapping.setStatus(VersionStatus.CURRENT); MediaType mediaType; MediaTypeList mediaTypes=new MediaTypeList(); mediaType=new MediaType(); mediaType.setBase(""application/xml""); mediaType.setType(""application/vnd.vendor.service-v1."" + i + ""+xml""); mediaTypes.getMediaType().add(mediaType); mediaType=new MediaType(); mediaType.setBase(""application/json""); mediaType.setType(""application/vnd.vendor.service-v1."" + i + ""+json""); mediaTypes.getMediaType().add(mediaType); mapping.setMediaTypes(mediaTypes); mappings.put(id mapping); } return mappings; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\testhelpers\ConfigurationDataCreator.java,createConfiguredMappingsWithAcceptParameters,"public static Map<String ServiceVersionMapping>  (int numOfMappings){ Map<String ServiceVersionMapping> mappings=new HashMap<String ServiceVersionMapping>(); String id; ServiceVersionMapping mapping; for (int i=0; i < numOfMappings; i++) { id=""v1."" + i; mapping=new ServiceVersionMapping(); mapping.setId(id); mapping.setPpDestId(""service-v1."" + i); mapping.setStatus(VersionStatus.CURRENT); MediaType mediaType; MediaTypeList mediaTypes=new MediaTypeList(); mediaType=new MediaType(); mediaType.setBase(""application/xml""); mediaType.setType(""application/vnd.vendor.service; x=v1."" + i + ""; y=xml""); mediaTypes.getMediaType().add(mediaType); mediaType=new MediaType(); mediaType.setBase(""application/json""); mediaType.setType(""application/vnd.vendor.service; x=v1."" + i + ""; y=json""); mediaTypes.getMediaType().add(mediaType); mapping.setMediaTypes(mediaTypes); mappings.put(id mapping); } return mappings; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\testhelpers\ConfigurationDataCreator.java,createVersionIds,public static Set<String>  (int numOfMappings){ Map<String ServiceVersionMapping> mappings=createConfiguredMappings(numOfMappings); return mappings.keySet(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldBuildAccurateURLs,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/a/requested/resource""); when(request.getScheme()).thenReturn(""http""); when(request.getHeader(HttpHeaders.HOST)"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldHandleExternalRequestsWithContextRoot,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/v1.0/a/requested/resource""); when(request.getRequestURL()).thenReturn(new StringBuffer(""http://localhost/v1.0/"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldHandleFuzzedRequests,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/v1.0a/requested/resource""); final String expected=""/v1.0a/requested/resource""; assertEquals(""Formatting intern"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldHandleNonVersionedRequests,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/a/requested/resource""); final String expected=""/a/requested/resource""; assertEquals(""Formatting internal URI m"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldHandleVersionedRequests,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/v1.0/a/requested/resource""); final String expected=""/a/requested/resource""; assertEquals(""Formatting internal "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldHandleVersionedRequestsWithContextRoot,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/context/v1.0/a/requested/resource""); final String expected=""/context/a/requested/resource""; assertEquals(""Form"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldIdentifyOwningVersions,"@Test public void  (){ final HttpServletRequestWrapper versionOne=mock(HttpServletRequestWrapper.class); final HttpServletRequestWrapper versionTwo=mock(HttpServletRequestWrapper.class); when(versionOne.getRequestURI()).thenReturn(""/v1.0/some/resource""); "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldIdentifyVersion,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/v1.0/resource""); final VersionedRequest versionedRequest=new VersionedRequest(request mapping); assertTrue(ver"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldIdentifyVersionWithTrailingSlash,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/v1.0/resource/""); final VersionedRequest versionedRequest=new VersionedRequest(request mapping); assertTrue(ve"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldMatch,@Test public void  (){ final HttpServletRequestWrapper versionOne=mock(HttpServletRequestWrapper.class); final HttpServletRequestWrapper versionOneWithResource=mock(HttpServletRequestWrapper.class); final HttpServletRequestWrapper versionTwo=mock(HttpServ
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldNotAcceptUriWithoutRoot,"@Test(expected=IllegalArgumentException.class) public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""a/requested/resource""); new VersionedRequest(request mapping).asIntern"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldNotMatchPartialVersionMatches,"@Test public void  (){ final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/v1.01/resource/""); final VersionedRequest versionedRequest=new VersionedRequest(request mapping); assertFalse("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,shouldNotRewriteVersionedUri,"@Test public void  (){ final String expected=""/_v1.0/a/requested/resource""; final HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(expected); final VersionedRequest versionedRequest=new Vers"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\VersionedRequestTest.java,standUp,"@Before public void  (){ mediaRangeList=new LinkedList<>(); mediaRangeList.add(new MediaType("""" MimeType.UNKNOWN -1)); mapping=new ServiceVersionMapping(); mapping.setId(""v1.0""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,setUp,"@Before public void  (){ ReposeCluster domain=new ReposeCluster(); domain.setFilters(mock(FilterList.class)); Node localHost=new Node(); localHost.setHostname(""localhost""); localHost.setHttpPort(8080); localHost.setHttpsPort(0); localHost.setId(""localhost"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,shouldReturnConfiguredHosts,@Test public void  (){ assertEquals(configuredHosts configurationData.getConfiguredHosts()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,shouldReturnHostForServiceMapping,@Test public void  () throws VersionedHostNotFoundException { assertEquals(localEndpoint configurationData.getHostForVersionMapping(version1)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,shouldReturnIfRequestIsForVersions,"@Test public void  (){ HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/""); assertTrue(""Should return true that this request is for the service root"" configurationData.isRequestForVersions"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,shouldReturnNullIfNoMatchForMediaRangeIsFound,"@Test public void  () throws VersionedHostNotFoundException { HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/service/rs""); assertNull(""Should find proper host given a matched uri to a ve"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,shouldReturnVersionChoicesAsList,"@Test public void  (){ HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/v1""); when(request.getRequestURL()).thenReturn(new StringBuffer(""http://localhost:8080/v1"")); when(request.getPrefer"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,shouldReturnVersionedOriginServiceFromAcceptHeader,"@Test public void  () throws VersionedHostNotFoundException { HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/service/rs""); when(request.getPreferredSplittableHeadersWithParameters(HttpHe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\domain\ConfigurationDataTest.java,shouldReturnVersionedOriginServiceFromURI,"@Test public void  () throws VersionedHostNotFoundException { HttpServletRequestWrapper request=mock(HttpServletRequestWrapper.class); when(request.getRequestURI()).thenReturn(""/v1/service/rs""); VersionedOriginService destination=configurationData.getOrig"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,setup,@Before public void  (){ versionIds=createVersionIds(2); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,shouldExposeResourceInfo,"@Test public void  (){ assertEquals(""/resource/info"" tokenizer.getResource()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,shouldExposeServiceRootHref,"@Test public void  (){ assertEquals(""http://rackspacecloud.com/"" tokenizer.getServiceRootHref()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,shouldExposeVersionId,"@Test public void  (){ assertEquals(""v1.1"" tokenizer.getVersionId()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,shouldReturnFalseIfIsNotInVersionIdSet,"@Test public void  (){ assertFalse(RequestUrlTokenizer.hasVersionInfo(""version-1"" versionIds)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestUrlTokenizerTest.java,shouldReturnTrueIfIsInVersionIdSet,"@Test public void  (){ assertTrue(RequestUrlTokenizer.hasVersionInfo(""v1.0"" versionIds)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,getFileAsString,private static String  (String fileName){ try { return FileUtils.readFileToString(new File(ContentTransformerTest.class.getResource(fileName).toURI())); } catch ( IOException e) { throw new UncheckedIOException(e); } catch ( URISyntaxException e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,setup,"@BeforeClass @SuppressWarnings(""unchecked"") public static void  () throws JAXBException { xmlTransformer=new StreamToJaxbTransform(JAXBContext.newInstance(org.openrepose.filters.versioning.schema.ObjectFactory.class org.openrepose.filters.versioning.confi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldMarshalChoicesXml,"@Test @SuppressWarnings(""unchecked"") public void  (){ final JAXBElement jaxbElement=xmlTransformer.transform(ContentTransformerTest.class.getResourceAsStream(XML_CHOICES)); assertTrue(jaxbElement.getDeclaredType().isAssignableFrom(VersionChoiceList.class)"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldMarshalVersionXml,"@Test @SuppressWarnings(""unchecked"") public void  (){ final JAXBElement jaxbElement=xmlTransformer.transform(ContentTransformerTest.class.getResourceAsStream(XML_VERSION)); assertTrue(jaxbElement.getDeclaredType().isAssignableFrom(VersionChoice.class)); }"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldMarshalVersionsXml,"@Test @SuppressWarnings(""unchecked"") public void  (){ final JAXBElement jaxbElement=xmlTransformer.transform(ContentTransformerTest.class.getResourceAsStream(XML_VERSIONS)); assertTrue(jaxbElement.getDeclaredType().isAssignableFrom(VersionChoiceList.class"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldTransformChoicesToJson,"@Test public void  () throws Exception { String expected=getFileAsString(JSON_CHOICES); String actual=transformXmlToFormat(getFileAsString(""/META-INF/schema/examples/xml/choices.xml"") new MediaType(MimeType.APPLICATION_JSON -1) new ContentTransformer(Json"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldTransformVersionIdentityToJson,"@Test public void  () throws Exception { String expected=getFileAsString(JSON_VERSION_IDENTITY); String actual=transformXmlToFormat(versionXmlFileReader new MediaType(MimeType.APPLICATION_JSON -1) new ContentTransformer(JsonFormat.IDENTITY)); assertThat("""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldTransformVersionToJson,"@Test public void  () throws Exception { String expected=getFileAsString(JSON_VERSION); String actual=transformXmlToFormat(versionXmlFileReader new MediaType(MimeType.APPLICATION_JSON -1) new ContentTransformer(JsonFormat.COMPUTE)); assertThat(""No expecte"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldTransformVersionToXml,@Test public void  () throws Exception { String expected=versionXmlFileReader; String actual=transformXmlToFormat(versionXmlFileReader new MediaType(MimeType.APPLICATION_XML -1) new ContentTransformer(JsonFormat.COMPUTE)); assertThat(actual isSimilarTo(ex
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldTransformVersionsIdentityToJson,@Test public void  () throws Exception { String expected=getFileAsString(JSON_VERSIONS_IDENTITY); String actual=transformXmlToFormat(versionsXmlFileReader new MediaType(MimeType.APPLICATION_JSON -1) new ContentTransformer(JsonFormat.IDENTITY)); assertThat
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldTransformVersionsToJson,"@Test public void  () throws Exception { String expected=getFileAsString(JSON_VERSIONS); String actual=transformXmlToFormat(versionsXmlFileReader new MediaType(MimeType.APPLICATION_JSON -1) new ContentTransformer(JsonFormat.COMPUTE)); assertThat(""No expec"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,shouldTransformVersionsToXml,@Test public void  () throws Exception { String expected=versionsXmlFileReader; String actual=transformXmlToFormat(versionsXmlFileReader new MediaType(MimeType.APPLICATION_XML -1) new ContentTransformer(JsonFormat.COMPUTE)); assertThat(actual isSimilarTo(
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\ContentTransformerTest.java,transformXmlToFormat,private String  (String source MediaType mediaType ContentTransformer contentTransformer){ JAXBElement jaxbElement=xmlTransformer.transform(IOUtils.toInputStream(source)); ByteArrayOutputStream transformStream=new ByteArrayOutputStream(); contentTransformer.transform(jaxbElement mediaType transformStream); return transformStream.toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestMediaRangeInterrogatorTest.java,shouldReturnMediaTypeFromAcceptHeader,"@Test public void  (){ List<MediaType> mediaRange=RequestMediaRangeInterrogator.interrogate(""http://servers.api.openstack.org/images"" Collections.singletonList(""application/xml"")); assertEquals(MimeType.APPLICATION_XML mediaRange.get(0).getMimeType()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\RequestMediaRangeInterrogatorTest.java,shouldReturnMediaTypeFromVariant,"@Test public void  (){ List<MediaType> mediaRange=RequestMediaRangeInterrogator.interrogate(""http://cloudservers/images.json"" Collections.singletonList("""")); assertEquals(MimeType.APPLICATION_JSON mediaRange.get(0).getMimeType()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldIgnoreQueryParameters,@Test public void  (){ assertEquals(MimeType.APPLICATION_XML VariantParser.getMediaTypeFromVariant(URI_WITH_PARAMS)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldMatchLastVariant,@Test public void  (){ assertEquals(MimeType.APPLICATION_XML VariantParser.getMediaTypeFromVariant(URI_WITH_MULTIPLE_MEDIA_TYPE)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldMatchMediaTypeURI,@Test public void  (){ assertThat(MEDIA_TYPE_URI matchesPattern(VariantParser.VARIANT_REGEX)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldMatchStandardURI,@Test public void  (){ assertThat(STANDARD_URI matchesPattern(VariantParser.VARIANT_REGEX)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldMatchVersionedMediaTypeURI,@Test public void  (){ assertThat(VERSIONED_MEDIA_TYPE_URI matchesPattern(VariantParser.VARIANT_REGEX)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldMatchVersionedURI,@Test public void  (){ assertThat(VERSIONED_URI matchesPattern(VariantParser.VARIANT_REGEX)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldNotMatchBadURI,"@Test public void  (){ assertThat(""tzs:/baduri|hehe"" not(matchesPattern(VariantParser.VARIANT_REGEX))); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldReturnMediaType,@Test public void  (){ MimeType mediaType=VariantParser.getMediaTypeFromVariant(URI_WITH_JSON_MEDIA_TYPE); assertEquals(MimeType.APPLICATION_JSON mediaType); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldReturnNullForVariantWithoutExtension,"public void  (){ assertNull(""Variants without extensions should return null"" VariantParser.getMediaTypeFromVariant("""")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\filters\versioning-filter\src\test\java\org\openrepose\filters\versioning\util\VariantParserTest.java,shouldReturnNullWhenNoVariantContentTypeIsSpecified,@Test public void  (){ assertNull(VariantParser.getMediaTypeFromVariant(STANDARD_URI)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-api\src\main\java\org\openrepose\core\services\serviceclient\akka\AkkaServiceClientException.java,AkkaServiceClientException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\ActorRequest.java,getActiveSpan,public Span  (){ return activeSpan; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\ActorRequest.java,getLoggingContextMap,public Map<String String>  (){ return loggingContextMap; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientFactoryImpl.java,AkkaServiceClientFactoryImpl,@Inject public  (HttpClientService httpClientService ConfigurationService configurationService){ this.httpClientService=httpClientService; this.configurationService=configurationService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientFactoryImpl.java,newAkkaServiceClient,@Override public AkkaServiceClient  (String connectionPoolId){ return new AkkaServiceClientImpl(connectionPoolId httpClientService configurationService); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,AuthGetRequest,public  (String hashKey String uri Map<String String> headers){ this.uri=uri; this.headers=headers; this.hashKey=hashKey; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,consistentHashKey,@Override public String  (){ return hashKey(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,getHeaders,public Map<String String>  (){ return headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,getUri,public String  (){ return uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthGetRequest.java,hashKey,public String  (){ return hashKey; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,AkkaServiceClientImpl,"public  (String connectionPoolId HttpClientService httpClientService ConfigurationService configurationService){ this.connectionPoolId=connectionPoolId; this.serviceClient=new ServiceClient(connectionPoolId httpClientService); this.configurationService=configurationService; Config customConf=ConfigFactory.load(); Config baseConf=ConfigFactory.defaultReference(); Config conf=customConf.withFallback(baseConf); actorSystem=ActorSystem.create(""AuthClientActors"" conf); configurationService.subscribeTo(HTTP_CONN_POOL_CONFIG_NAME this HttpConnectionPoolConfig.class); quickFutureCache=CacheBuilder.newBuilder().expireAfterWrite(FUTURE_CACHE_TTL FUTURE_CACHE_UNIT).build(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,configurationUpdated,@Override public void  (HttpConnectionPoolConfig configurationObject) throws UpdateFailedException { PoolType defaultPool=configurationObject.getPool().get(0); boolean isPoolConfigured=false; for ( PoolType pool : configurationObject.getPool()) { if (pool
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,destroy,@Override public void  (){ configurationService.unsubscribeFrom(HTTP_CONN_POOL_CONFIG_NAME this); actorSystem.shutdown(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,get,@Override public ServiceClientResponse  (String hashKey String uri Map<String String> headers boolean checkCache) throws AkkaServiceClientException { AuthGetRequest authGetRequest=new AuthGetRequest(hashKey uri headers); try { Timeout timeout=new Timeout(
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,getFuture,"private Future  (ConsistentHashable hashableRequest Timeout timeout boolean checkCache) throws ExecutionException { Object hashKey=hashableRequest.consistentHashKey(); LOG.trace(""Getting future for: {}"" hashKey); if (checkCache) { return quickFutureCache.get(hashKey () -> makeRequest(hashableRequest timeout)); } else { return makeRequest(hashableRequest timeout); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,isInitialized,@Override public boolean  (){ return initialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,makeRequest,"private Future  (ConsistentHashable hashableRequest Timeout timeout){ LOG.trace(""Call for: {}"" hashableRequest.consistentHashKey()); return ask(tokenActorRef hashableRequest timeout); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AkkaServiceClientImpl.java,post,@Override public ServiceClientResponse  (String hashKey String uri Map<String String> headers String payload MediaType contentMediaType boolean checkCache) throws AkkaServiceClientException { AuthPostRequest authPostRequest=new AuthPostRequest(hashKey uri
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,AuthPostRequest,public  (String hashKey String uri Map<String String> headers String payload MediaType contentMediaType){ this.uri=uri; this.headers=headers; this.payload=payload; this.hashKey=hashKey; this.contentMediaType=contentMediaType; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,consistentHashKey,@Override public String  (){ return hashKey; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,getContentMediaType,public MediaType  (){ return contentMediaType; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,getHeaders,public Map<String String>  (){ return headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,getPayload,public String  (){ return payload; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthPostRequest.java,getUri,public String  (){ return uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthTokenFutureActor.java,AuthTokenFutureActor,public  (ServiceClient serviceClient){ this.serviceClient=serviceClient; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\AuthTokenFutureActor.java,onReceive,@Override public void  (Object message){ Scope scope=NoopScopeManager.NoopScope.INSTANCE; if (message instanceof ActorRequest) { final ActorRequest request=(ActorRequest)message; for ( String key : request.getLoggingContextMap().keySet()) { MDC.put(key re
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\ReusableServiceClientResponse.java,ReusableServiceClientResponse,"public  (int code Header[] headers InputStream data){ super(code headers data); try { dataArray=IOUtils.toByteArray(data); } catch ( IOException e) { LOG.error(""Not able read inputstream to byte array: "" + e.getMessage() e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\akka-http-client-service\akka-http-client-service-impl\src\main\java\org\openrepose\core\services\serviceclient\akka\impl\ReusableServiceClientResponse.java,getData,@Override public InputStream  (){ return new ByteArrayInputStream(dataArray); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\FeedReadRequest.java,FeedReadRequest,public  (URI uri){ setURI(uri); headers=new TreeMap<>(String.CASE_INSENSITIVE_ORDER); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\FeedReadRequest.java,getHeaders,public Map<String List<String>>  (){ return this.headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\FeedReadRequest.java,getURI,public URI  (){ return this.uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\FeedReadRequest.java,setURI,public void  (URI uri){ this.uri=uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\atom-feed-service\atom-feed-service-api\src\main\java\org\openrepose\nodeservice\atomfeed\AuthenticationRequestException.java,AuthenticationRequestException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreAccessControl.java,DatastoreAccessControl,public  (List<InetAddress> allowedHosts boolean allowAll){ this.allowedHosts=allowedHosts; this.allowAll=allowAll; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreAccessControl.java,getAllowedHosts,public List<InetAddress>  (){ return allowedHosts; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreAccessControl.java,shouldAllowAll,public boolean  (){ return allowAll; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreOperationException.java,DatastoreOperationException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreServiceException.java,DatastoreServiceException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\DatastoreUnavailableException.java,DatastoreUnavailableException,public  (String string){ super(string); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\ClusterConfiguration.java,ClusterConfiguration,public  (RequestProxyService proxyService EncodingProvider encodingProvider ClusterView clusterView){ this.proxyService=proxyService; this.encodingProvider=encodingProvider; this.clusterView=clusterView; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\ClusterConfiguration.java,getClusterView,public ClusterView  (){ return clusterView; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\ClusterConfiguration.java,getEncodingProvider,public EncodingProvider  (){ return encodingProvider; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\ClusterConfiguration.java,getProxyService,public RequestProxyService  (){ return proxyService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\distributed\RemoteBehavior.java,valueOfOrNull,public static RemoteBehavior  (String enumName){ final String uppercaseEnumName=enumName.toUpperCase(); for ( RemoteBehavior behavior : values()) { if (behavior.name().equals(uppercaseEnumName)) { return behavior; } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\hash\MD5MessageDigestFactory.java,algorithmName,@Override public String  (){ return DIGEST_NAME; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\hash\MD5MessageDigestFactory.java,getInstance,public static MessageDigestFactory  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\hash\AbstractMessageDigestFactory.java,newMessageDigest,@Override public MessageDigest  () throws NoSuchAlgorithmException { return MessageDigest.getInstance(algorithmName()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java,Patch,public  (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java,StringValue,public  (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java,applyPatch,@Override public StringValue  (Patch patch){ String originalValue=value; value=value + patch.newFromPatch().getValue(); return new StringValue(originalValue + patch.newFromPatch().getValue()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java,getValue,public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-api\src\main\java\org\openrepose\core\services\datastore\types\StringValue.java,newFromPatch,@Override public StringValue  (){ return new StringValue(value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,ClusterMember,public  (int requiredValidationPasses InetSocketAddress memberAddress int droppedMemberRestTime){ this.memberAddress=memberAddress; this.droppedMemberRestTime=droppedMemberRestTime; this.requiredValidationPasses=requiredValidationPasses; online=true; validationPass=0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,getMemberAddress,public InetSocketAddress  (){ return memberAddress; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,isOffline,public boolean  (){ return !online; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,isOnline,public boolean  (){ return online; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,logMemberRetry,private void  (long nowInMilliseconds){ if (validationPass++ < requiredValidationPasses) { restPeriod=(long)droppedMemberRestTime / validationPass; droppedTime=nowInMilliseconds; } else { validationPass=0; droppedTime=0; online=true; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,nowInMilliseconds,private static long  (){ return System.currentTimeMillis(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,setOffline,public void  (){ droppedTime=nowInMilliseconds(); restPeriod=droppedMemberRestTime; validationPass=0; online=false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ClusterMember.java,shouldRetry,public boolean  (){ final long nowInMilliseconds=nowInMilliseconds(); final boolean retry=nowInMilliseconds - droppedTime > restPeriod; if (retry) { logMemberRetry(nowInMilliseconds); } return retry; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,DatastoreServiceImpl,@Inject public  (Optional<MetricsService> metricsService){ localDatastoreManager=new EHCacheDatastoreManager(metricsService); distributedManagers=new HashMap<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,createDatastore,@Override public DistributedDatastore  (String datastoreName ClusterConfiguration configuration){ return createDistributedDatastore(datastoreName configuration null false); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,createDistributedDatastore,@Override public DistributedDatastore  (String datastoreName ClusterConfiguration configuration String connPoolId boolean useHttps){ DatastoreManager manager=new HashRingDatastoreManager(configuration localDatastoreManager.getDatastore() connPoolId useHtt
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,createRemoteDatastore,@Override public DistributedDatastore  (String datastoreName RequestProxyService proxyService EncodingProvider encodingProvider InetSocketAddress target String connPoolId boolean useHttps){ DatastoreManager manager=new RemoteDatastoreManager(proxyService 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,destroy,"@PreDestroy public void  (){ LOG.info(""Destroying datastore service context""); shutdown(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,destroyDatastore,@Override public void  (String datastoreName){ final DatastoreManager managerToUnregister=distributedManagers.get(datastoreName); if (managerToUnregister != null) { distributedManagers.remove(datastoreName); try { managerToUnregister.destroy(); } catch ( 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,getDatastore,@Override public Datastore  (String datastoreName){ if (distributedManagers.containsKey(datastoreName)) { return distributedManagers.get(datastoreName).getDatastore(); } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,getDefaultDatastore,@Override public Datastore  (){ return localDatastoreManager.getDatastore(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,getDistributedDatastore,@Override public DistributedDatastore  (){ if (!distributedManagers.isEmpty()) { return (DistributedDatastore)distributedManagers.values().iterator().next().getDatastore(); } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\DatastoreServiceImpl.java,shutdown,@Override public void  (){ for ( String datastoreName : distributedManagers.keySet()) { destroyDatastore(datastoreName); } localDatastoreManager.destroy(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,CacheRequest,public  (String cacheKey int ttlInSeconds byte[] payload RemoteBehavior requestedRemoteBehavior){ this.cacheKey=cacheKey; this.ttlInSeconds=ttlInSeconds; this.payload=ArrayUtilities.nullSafeCopy(payload); this.requestedRemoteBehavior=requestedRemoteBehavior; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,getCacheKey,public String  (){ return cacheKey; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,getPayload,public byte[]  (){ return payload.clone(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,getRequestedRemoteBehavior,public RemoteBehavior  (){ return requestedRemoteBehavior; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,getTtlInSeconds,public int  (){ return ttlInSeconds; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,hasPayload,public boolean  (){ return payload != null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,isCacheRequestValid,public static boolean  (HttpServletRequest request){ return request.getRequestURI().startsWith(CACHE_URI_PATH); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,marshallCacheRequest,"@SuppressWarnings(""squid:RedundantThrowsDeclarationCheck"") public static CacheRequest  (HttpServletRequest request) throws MalformedCacheRequestException { final String cacheKey=getCacheKey(request); return new CacheRequest(cacheKey -1 null getRequestedRe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,marshallCacheRequestWithPayload,"@SuppressWarnings(""squid:RedundantThrowsDeclarationCheck"") public static CacheRequest  (HttpServletRequest request) throws MalformedCacheRequestException { final String cacheKey=getCacheKey(request); try { final String ttlHeader=request.getHeader(Extended"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\CacheRequest.java,urlFor,"public static String  (InetSocketAddress remoteEndpoint boolean useHttps){ return ""http"" + (useHttps ? ""s"" : """") + ""://""+ remoteEndpoint.getAddress().getHostAddress()+ "":""+ remoteEndpoint.getPort()+ CACHE_URI_PATH; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastoreManager.java,HashRingDatastoreManager,"public  (ClusterConfiguration configuration Datastore localDatastore String connPoolId boolean useHttps){ datastore=new HashRingDatastore(new RemoteCommandExecutor(configuration.getProxyService()) configuration.getClusterView() """" localDatastore MD5MessageDigestFactory.getInstance() configuration.getEncodingProvider() connPoolId useHttps); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastoreManager.java,getDatastore,@Override public Datastore  (){ return datastore; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastoreManager.java,isDistributed,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,AbstractRemoteCommand,public  (String cacheObjectKey InetSocketAddress remoteEndpoint String connPoolId boolean useHttps){ this.cacheObjectKey=cacheObjectKey; this.remoteEndpoint=remoteEndpoint; this.connPoolId=connPoolId; this.useHttps=useHttps; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,getBaseUrl,public String  (){ return CacheRequest.urlFor(remoteEndpoint useHttps); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,getBody,protected byte[]  (){ return new byte[0]; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,getCacheObjectKey,protected String  (){ return cacheObjectKey; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,getConnectionPoolId,public String  (){ return connPoolId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,getHeaders,protected Map<String String>  (RemoteBehavior remoteBehavior){ Map<String String> headers=new HashMap<>(); headers.put(DatastoreHeader.REMOTE_BEHAVIOR remoteBehavior.name()); return headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,getRemoteEndpoint,protected InetSocketAddress  (){ return remoteEndpoint; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\AbstractRemoteCommand.java,getUrl,public String  (){ return CacheRequest.urlFor(getRemoteEndpoint() getCacheObjectKey() useHttps); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,HashRingDatastore,"public  (RemoteCommandExecutor remoteCommandExecutor ClusterView clusterView String datastorePrefix Datastore localDatastore MessageDigestFactory hashProvider EncodingProvider encodingProvider String connPoolId boolean useHttps){ this.name=DATASTORE_NAME; this.encodingProvider=encodingProvider; this.hashProvider=hashProvider; this.datasetPrefix=datastorePrefix; this.connPoolId=connPoolId; this.useHttps=useHttps; this.clusterView=clusterView; this.localDatastore=localDatastore; this.remoteCommandExecutor=remoteCommandExecutor; if (localDatastore == null) { LOG.warn(""Local datastore is null""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,get,@Override public Serializable  (String hashedKey byte[] id RemoteBehavior remoteBehavior){ return (Serializable)performAction(hashedKey id new DatastoreAction(){ @Override public Object performRemote( String name  InetSocketAddress target  RemoteBehavior 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,getHash,"private byte[]  (String key){ final byte[] stringBytes=(datasetPrefix + key).getBytes(StandardCharsets.UTF_8); try { return hashProvider.newMessageDigest().digest(stringBytes); } catch ( NoSuchAlgorithmException algorithmException) { throw new DatastoreOperationException(""Failed to hash key. Reason: "" + algorithmException.getMessage() algorithmException); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,getName,@Override public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,getTarget,"public InetSocketAddress  (byte[] hashBytes){ final InetSocketAddress[] ringMembers=clusterView.members(); if (ringMembers.length <= 0) { if (!clusterMemberWarning) { LOG.info(""No members to route to in datastore cluster... unable to route this datastore request.""); clusterMemberWarning=true; } return null; } clusterMemberWarning=false; final int memberAddress=new BigInteger(hashBytes).mod(BigInteger.valueOf(ringMembers.length)).abs().intValue(); return ringMembers[memberAddress]; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,isRemoteTarget,"private boolean  (InetSocketAddress target){ if (target == null) { return false; } try { if (localDatastore == null) { return !clusterView.isLocal(target); } synchronized (lock) { Boolean isLocal=(Boolean)localDatastore.get(target.toString()); if (isLocal == null) { isLocal=clusterView.isLocal(target); localDatastore.put(target.toString() isLocal DEFAULT_TTL TimeUnit.MINUTES); } return !isLocal; } } catch ( SocketException se) { throw new DatastoreOperationException(""Unable to identify local cluster target datastore"" se); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,patch,@Override public Serializable  (String hashedKey byte[] id final SerializablePatch patch final int ttl final TimeUnit timeUnit RemoteBehavior remoteBehavior){ return (Serializable)performAction(hashedKey id new DatastoreAction(){ @Override public Object p
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,performAction,"private Object  (String name byte[] id DatastoreAction action RemoteBehavior initialBehavior){ if (initialBehavior != RemoteBehavior.DISALLOW_FORWARDING) { return performRemote(name id action initialBehavior); } else { LOG.debug(""Forwarding for "" + action.toString() + "" datastore action has been disabled by request.""); } return action.performLocal(name); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,performLocal,@Override public Object  (String name){ return localDatastore.patch(name patch ttl timeUnit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,performRemote,@Override public Object  (String name InetSocketAddress target RemoteBehavior remoteBehavior){ return remoteCommandExecutor.execute(new org.openrepose.core.services.datastore.impl.distributed.remote.command.Patch(timeUnit patch ttl name target connPoolId 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,put,@Override public void  (String hashedKey byte[] id final Serializable value final int ttl final TimeUnit timeUnit RemoteBehavior remoteBehavior){ performAction(hashedKey id new DatastoreAction(){ @Override public Object performRemote( String name  InetSoc
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,remove,@Override public boolean  (String hashedKey byte[] id RemoteBehavior remoteBehavior){ return (Boolean)performAction(hashedKey id new DatastoreAction(){ @Override public Object performRemote( String name  InetSocketAddress target  RemoteBehavior remoteBeha
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,removeAll,@Override public void  (){ localDatastore.removeAll(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\HashRingDatastore.java,toString,"@Override public String  (){ return ""patch""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Delete.java,Delete,public  (String cacheObjectKey InetSocketAddress remoteEndpoint String connPoolId boolean useHttps){ super(cacheObjectKey remoteEndpoint connPoolId useHttps); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Delete.java,execute,@Override public ServiceClientResponse  (RequestProxyService proxyService RemoteBehavior remoteBehavior){ return proxyService.delete(getBaseUrl() getCacheObjectKey() getHeaders(remoteBehavior) getConnectionPoolId()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Delete.java,handleResponse,@Override public Object  (ServiceClientResponse response) throws IOException { return Boolean.valueOf(response.getStatus() == HttpServletResponse.SC_ACCEPTED); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\MalformedCacheRequestException.java,MalformedCacheRequestException,public  (String error Throwable cause){ super(error cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Get.java,Get,public  (String cacheObjectKey InetSocketAddress remoteEndpoint String connPoolId boolean useHttps){ super(cacheObjectKey remoteEndpoint connPoolId useHttps); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Get.java,execute,@Override public ServiceClientResponse  (RequestProxyService proxyService RemoteBehavior remoteBehavior){ return proxyService.get(getBaseUrl() getCacheObjectKey() getHeaders(remoteBehavior) getConnectionPoolId()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Get.java,handleResponse,@Override public Object  (ServiceClientResponse response) throws IOException { final int statusCode=response.getStatus(); if (statusCode == HttpServletResponse.SC_OK) { final InputStream internalStreamReference=response.getData(); try { return objectSeria
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,Put,"@SuppressWarnings(""PMD.ArrayIsStoredDirectly"") public  (TimeUnit timeUnit Serializable value int ttl String cacheObjectKey InetSocketAddress remoteEndpoint String connPoolId boolean useHttps){ super(cacheObjectKey remoteEndpoint connPoolId useHttps); this"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,execute,@Override public ServiceClientResponse  (RequestProxyService proxyService RemoteBehavior remoteBehavior){ return proxyService.put(getBaseUrl() getCacheObjectKey() getHeaders(remoteBehavior) getBody() getConnectionPoolId()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,getBody,"@Override protected byte[]  (){ try { return objectSerializer.writeObject(value); } catch ( IOException ioe) { throw new DatastoreOperationException(""Failed to serialize value to be put"" ioe); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,getHeaders,@Override protected Map<String String>  (RemoteBehavior remoteBehavior){ Map<String String> headers=super.getHeaders(remoteBehavior); headers.put(ExtendedHttpHeader.X_TTL String.valueOf(TimeUnit.SECONDS.convert(ttl timeUnit))); return headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Put.java,handleResponse,"@Override public Object  (ServiceClientResponse response) throws IOException { if (response.getStatus() != HttpServletResponse.SC_ACCEPTED) { throw new DatastoreOperationException(""Remote request failed with: "" + response.getStatus()); } return Boolean.TR"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,Patch,"@SuppressWarnings(""PMD.ArrayIsStoredDirectly"") public  (TimeUnit timeUnit SerializablePatch patch int ttl String cacheObjectKey InetSocketAddress remoteEndpoint String connPoolId boolean useHttps){ super(cacheObjectKey remoteEndpoint connPoolId useHttps);"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,execute,@Override public ServiceClientResponse  (RequestProxyService proxyService RemoteBehavior remoteBehavior){ return proxyService.patch(getBaseUrl() getCacheObjectKey() getHeaders(remoteBehavior) getBody() getConnectionPoolId()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,getBody,@Override protected byte[]  (){ return value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,getHeaders,@Override protected Map<String String>  (RemoteBehavior remoteBehavior){ Map<String String> headers=super.getHeaders(remoteBehavior); headers.put(ExtendedHttpHeader.X_TTL String.valueOf(TimeUnit.SECONDS.convert(ttl timeUnit))); return headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\Patch.java,handleResponse,@Override public Object  (ServiceClientResponse response) throws IOException { if (response.getStatus() == HttpServletResponse.SC_OK) { final InputStream internalStreamReference=response.getData(); try { return objectSerializer.readObject(RawInputStreamRe
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,ThreadSafeClusterView,public  (NetworkInterfaceProvider networkInterfaceProvider List<ClusterMember> clusterMembers List<Integer> listenPorts){ this.networkInterfaceProvider=networkInterfaceProvider; this.clusterMembers=clusterMembers; this.listenPorts=listenPorts; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,copy,@Override public ThreadSafeClusterView  (){ return new ThreadSafeClusterView(clusterMembers listenPorts); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,hasDamagedMembers,@Override public synchronized boolean  (){ for ( ClusterMember member : clusterMembers) { if (!member.isOnline()) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,isLocal,@Override public boolean  (InetSocketAddress addr) throws SocketException { boolean havePort=false; for ( Integer port : listenPorts) { if (addr.getPort() == port) { havePort=true; break; } } if (havePort && networkInterfaceProvider.hasInterfaceFor(addr.g
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,memberDamaged,"@Override public synchronized void  (InetSocketAddress address String reason){ for ( ClusterMember member : clusterMembers) { if (member.getMemberAddress().equals(address)) { LOG.warn(""Cluster member \"""" + member.getMemberAddress().toString() + ""\"" has be"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,members,@Override public synchronized InetSocketAddress[]  (){ final LinkedList<InetSocketAddress> activeClusterMembers=new LinkedList<>(); for ( ClusterMember member : clusterMembers) { final boolean memberIsOnline=member.isOnline(); if (memberIsOnline || member
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,normalizeClusterMembers,private static void  (List<ClusterMember> members){ Collections.sort(members CLUSTER_MEMBER_COMPARATOR); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,singlePortClusterView,public static ThreadSafeClusterView  (int port){ List<Integer> portList=new ArrayList<>(); portList.add(port); return new ThreadSafeClusterView(portList); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\ThreadSafeClusterView.java,updateMembers,@Override public void  (List<InetSocketAddress> view){ updateMembers(view.toArray(new InetSocketAddress[view.size()])); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutor.java,RemoteCommandExecutor,public  (RequestProxyService proxyService){ this.proxyService=proxyService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutor.java,execute,"public Object  (final RemoteCommand command RemoteBehavior behavior){ try { ServiceClientResponse execute=command.execute(proxyService behavior); return command.handleResponse(execute); } catch ( ProxyRequestException ex) { throw new RemoteConnectionException(""Error communicating with remote node"" ex); } catch ( IOException ex) { throw new DatastoreOperationException(""Error handling response"" ex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteConnectionException.java,RemoteConnectionException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,EHCacheDatastore,public  (Ehcache ehCacheInstance){ this.ehCacheInstance=ehCacheInstance; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,get,@Override public Serializable  (String key){ Element element=ehCacheInstance.get(key); if (element != null) { return element.getValue(); } else { return null; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,getName,@Override public String  (){ return NAME; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,patch,@Override public Serializable  (String key Patch patch int ttl TimeUnit timeUnit){ Serializable potentialNewValue=(Serializable)patch.newFromPatch(); Element element=new Element(key potentialNewValue); Element currentElement=ehCacheInstance.putIfAbsent(el
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,put,@Override public void  (String key Serializable value int ttl TimeUnit timeUnit){ Element putMe=new Element(key value); putMe.setTimeToLive((int)TimeUnit.SECONDS.convert(ttl timeUnit)); ehCacheInstance.put(putMe); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,remove,@Override public boolean  (String key){ return ehCacheInstance.remove(key); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastore.java,removeAll,@Override public void  (){ ehCacheInstance.removeAll(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,RemoteDatastore,"public  (RemoteCommandExecutor remoteCommandExecutor String datastorePrefix Datastore localDatastore MessageDigestFactory hashProvider EncodingProvider encodingProvider InetSocketAddress target String connPoolId boolean useHttps){ this.name=DATASTORE_NAME; this.encodingProvider=encodingProvider; this.hashProvider=hashProvider; this.datasetPrefix=datastorePrefix; this.target=target; this.connPoolId=connPoolId; this.useHttps=useHttps; this.localDatastore=localDatastore; this.remoteCommandExecutor=remoteCommandExecutor; if (localDatastore == null) { LOG.warn(""Local datastore is null""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,get,@Override public Serializable  (String hashedKey byte[] id RemoteBehavior remoteBehavior){ return (Serializable)performRemote(hashedKey new DatastoreAction(){ @Override public Object performRemote( String name  InetSocketAddress target  RemoteBehavior rem
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,getHash,"private byte[]  (String key){ final byte[] stringBytes=(datasetPrefix + key).getBytes(StandardCharsets.UTF_8); try { return hashProvider.newMessageDigest().digest(stringBytes); } catch ( NoSuchAlgorithmException algorithmException) { throw new DatastoreOperationException(""Failed to hash key. Reason: "" + algorithmException.getMessage() algorithmException); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,getName,@Override public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,patch,@Override public Serializable  (String hashedKey byte[] id final SerializablePatch patch final int ttl final TimeUnit timeUnit RemoteBehavior remoteBehavior){ return (Serializable)performRemote(hashedKey new DatastoreAction(){ @Override public Object perf
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,performLocal,@Override public Object  (String name){ return localDatastore.patch(name patch ttl timeUnit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,performRemote,@Override public Object  (String name InetSocketAddress target RemoteBehavior remoteBehavior){ return remoteCommandExecutor.execute(new org.openrepose.core.services.datastore.impl.distributed.remote.command.Patch(timeUnit patch ttl name target connPoolId 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,put,@Override public void  (String hashedKey byte[] id final Serializable value final int ttl final TimeUnit timeUnit RemoteBehavior remoteBehavior){ performRemote(hashedKey new DatastoreAction(){ @Override public Object performRemote( String name  InetSocket
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,remove,@Override public boolean  (String hashedKey byte[] id RemoteBehavior remoteBehavior){ return (Boolean)performRemote(hashedKey new DatastoreAction(){ @Override public Object performRemote( String name  InetSocketAddress target  RemoteBehavior remoteBehavio
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,removeAll,@Override public void  (){ localDatastore.removeAll(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastore.java,toString,"@Override public String  (){ return ""patch""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastoreManager.java,RemoteDatastoreManager,"public  (RequestProxyService proxyService EncodingProvider encodingProvider Datastore localDatastore InetSocketAddress target String connPoolId boolean useHttps){ datastore=new RemoteDatastore(new RemoteCommandExecutor(proxyService) """" localDatastore MD5MessageDigestFactory.getInstance() encodingProvider target connPoolId useHttps); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastoreManager.java,getDatastore,@Override public Datastore  (){ return datastore; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\remote\RemoteDatastoreManager.java,isDistributed,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreManager.java,EHCacheDatastoreManager,"public  (Optional<MetricsService> metricsService){ Configuration defaultConfiguration=new Configuration(); defaultConfiguration.setName(CACHE_MANAGER_NAME); defaultConfiguration.setDefaultCacheConfiguration(new CacheConfiguration().diskPersistent(false)); defaultConfiguration.setUpdateCheck(false); this.cacheManagerInstance=CacheManager.newInstance(defaultConfiguration); String cacheName=CACHE_NAME_PREFIX + "":"" + cacheManagerInstance.getName()+ UUID.randomUUID().toString(); final Ehcache cacheOrig=new Cache(cacheName 20000 false false 5 2); cacheManagerInstance.addCache(cacheOrig); this.cache=cacheOrig; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreManager.java,destroy,"@Override public void  (){ try { if (cacheManagerInstance != null) { cacheManagerInstance.removalAll(); cacheManagerInstance.shutdown(); } } catch ( Exception e) { LOG.warn(""Error occurred when shutting down datastore: "" + e.getMessage() e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreManager.java,getDatastore,@Override public Datastore  (){ return new EHCacheDatastore(cache); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreManager.java,isDistributed,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminator.java,getAccessList,"public static DatastoreAccessControl  (DistributedDatastoreConfiguration config List<InetAddress> clusterMembers){ List<InetAddress> hostAccessList=new LinkedList<>(); boolean allowAll=config.getAllowedHosts().isAllowAll(); hostAccessList.addAll(clusterMembers); if (!allowAll) { hostAccessList.addAll(getConfiguredAllowedHosts(config)); } if (allowAll) { LOG.info(""The distributed datastore component is configured in allow-all mode meaning that any host can access  store and delete cached objects.""); } else { LOG.info(""The distributed datastore component has access controls configured meaning that only the configured hosts and cluster members "" + ""can access  store and delete cached objects.""); } LOG.debug(""Allowed Hosts: "" + hostAccessList.toString()); return new DatastoreAccessControl(hostAccessList allowAll); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminator.java,getClusterMembers,"public static List<InetAddress>  (SystemModel config String clusterId){ ReposeCluster cluster=ClusterMemberDeterminator.getCurrentCluster(config.getReposeCluster() clusterId); final List<InetAddress> reposeClusterMembers=new LinkedList<>(); for ( Node node : cluster.getNodes().getNode()) { try { final InetAddress hostAddress=InetAddress.getByName(node.getHostname()); reposeClusterMembers.add(hostAddress); } catch ( UnknownHostException e) { LOG.warn(""Unable to resolve host: "" + node.getHostname() + ""for Node ""+ node.getId()+ "" in Repose Cluster ""+ clusterId e); } } return reposeClusterMembers; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminator.java,getConfiguredAllowedHosts,"private static List<InetAddress>  (DistributedDatastoreConfiguration curDistributedDatastoreConfiguration){ final List<InetAddress> configuredAllowedHosts=new LinkedList<>(); for ( HostAccessControl host : curDistributedDatastoreConfiguration.getAllowedHosts().getAllow()) { try { final InetAddress hostAddress=InetAddress.getByName(host.getHost()); configuredAllowedHosts.add(hostAddress); } catch ( UnknownHostException e) { LOG.warn(""Unable to resolve host: "" + host.getHost() e); } } return configuredAllowedHosts; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminator.java,getClusterMembers,public static List<InetSocketAddress>  (SystemModel config DistributedDatastoreConfiguration ddConfig String clusterId){ final List<InetSocketAddress> cacheSiblings=new LinkedList<>(); ReposeCluster cluster=getCurrentCluster(config.getReposeCluster() clusterId); try { if (cluster != null) { for ( Node node : cluster.getNodes().getNode()) { final InetAddress hostAddress=InetAddress.getByName(node.getHostname()); final int port=getNodeDDPort(ddConfig cluster.getId() node.getId()); final InetSocketAddress hostSocketAddress=new InetSocketAddress(hostAddress port); cacheSiblings.add(hostSocketAddress); } } } catch ( UnknownHostException ex) { LOG.error(ex.getMessage() ex); } return cacheSiblings; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminator.java,getCurrentCluster,public static ReposeCluster  (List<ReposeCluster> clusters String clusterId){ for ( ReposeCluster cluster : clusters) { if (StringUtils.equals(clusterId cluster.getId())) { return cluster; } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminator.java,getDefaultDDPort,"public static int  (DistributedDatastoreConfiguration config String clusterId){ int port=-1; for ( Port curPort : config.getPortConfig().getPort()) { if (curPort.getCluster().equalsIgnoreCase(clusterId) && ""-1"".equals(curPort.getNode())) { port=curPort.getPort(); } } return port; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminator.java,getNodeDDPort,"public static int  (DistributedDatastoreConfiguration config String clusterId String nodeId){ LOG.debug(""Finding DistDatastore Port for cluster: {} node: {}"" clusterId nodeId); int port=getDefaultDDPort(config clusterId); for ( Port curPort : config.getPortConfig().getPort()) { if (curPort.getCluster().equalsIgnoreCase(clusterId) && curPort.getNode().equalsIgnoreCase(nodeId)) { port=curPort.getPort(); break; } } return port; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,DistributedDatastoreServlet,public  (DatastoreService datastore ClusterConfiguration clusterConfiguration DatastoreAccessControl acl DistributedDatastoreConfiguration ddConfig Tracer tracer String reposeVersion UriRedactionService uriRedactionService){ this.datastoreService=datastore; this.clusterConfiguration=clusterConfiguration; this.hostAcl=new AtomicReference<>(acl); this.ddConfig=ddConfig; this.tracer=tracer; this.reposeVersion=reposeVersion; this.uriRedactionService=uriRedactionService; localDatastore=datastore.getDefaultDatastore(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,destroy,"@Override public void  (){ super.destroy(); LOG.info(""Unregistering Datastore: {}"" DISTRIBUTED_HASH_RING); datastoreService.destroyDatastore(DISTRIBUTED_HASH_RING); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,doDelete,"@SuppressWarnings(""squid:S1989"") @Override protected void  (HttpServletRequest req HttpServletResponse resp) throws IOException { try { final CacheRequest cacheDelete=CacheRequest.marshallCacheRequest(req); localDatastore.remove(cacheDelete.getCacheKey())"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,doGet,"@SuppressWarnings(""squid:S1989"") @Override protected void  (HttpServletRequest req HttpServletResponse resp) throws IOException { try { CacheRequest cacheGet=CacheRequest.marshallCacheRequest(req); final Serializable value=localDatastore.get(cacheGet.getC"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,doPatch,"@SuppressWarnings(""squid:S1989"") private void  (HttpServletRequest req HttpServletResponse resp) throws IOException { try { final CacheRequest cachePatch=CacheRequest.marshallCacheRequestWithPayload(req); Serializable value=localDatastore.patch(cachePatch"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,doPut,"@SuppressWarnings(""squid:S1989"") @Override protected void  (HttpServletRequest req HttpServletResponse resp) throws IOException { try { final CacheRequest cachePut=CacheRequest.marshallCacheRequestWithPayload(req); localDatastore.put(cachePut.getCacheKey("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,doTrace,"@SuppressWarnings(""squid:S1989"") @Override protected void  (HttpServletRequest req HttpServletResponse resp) throws ServletException  IOException { resp.sendError(SC_METHOD_NOT_ALLOWED); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,getClusterView,public ClusterView  (){ return clusterConfiguration.getClusterView(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,handleMalformedCacheRequestException,"private void  (MalformedCacheRequestException mcre HttpServletResponse response) throws IOException { LOG.error(""Handling Malformed Cache Request"" mcre); switch (mcre.getMessage()) { case OBJECT_TOO_LARGE: response.getWriter().write(mcre.getMessage()); response.setStatus(SC_REQUEST_ENTITY_TOO_LARGE); break; case CACHE_KEY_INVALID: case TTL_HEADER_NOT_POSITIVE: case UNEXPECTED_REMOTE_BEHAVIOR: response.getWriter().write(mcre.getMessage()); response.setStatus(SC_BAD_REQUEST); break; default : response.sendError(SC_INTERNAL_SERVER_ERROR); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,init,"@Override public void  (ServletConfig config) throws ServletException { super.init(config); LOG.info(""Registering datastore: {}"" DISTRIBUTED_HASH_RING); boolean useHttps=ddConfig.getKeystoreFilename() != null; datastoreService.createDistributedDatastore(D"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,isAllowed,"private boolean  (HttpServletRequest request){ boolean allowed=hostAcl.get().shouldAllowAll(); if (!allowed) { try { final InetAddress remoteClient=InetAddress.getByName(request.getRemoteHost()); for ( InetAddress allowedAddress : hostAcl.get().getAllowedHosts()) { if (remoteClient.equals(allowedAddress)) { allowed=true; break; } } } catch ( UnknownHostException uhe) { LOG.error(""Unknown host exception caught while trying to resolve host: "" + request.getRemoteHost() + "" Reason: ""+ uhe.getMessage() uhe); } } return allowed; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,isRequestValid,private boolean  (HttpServletRequest req HttpServletResponse resp){ boolean valid=false; if (!isAllowed(req)) { resp.setStatus(SC_UNAUTHORIZED); } else if (!CacheRequest.isCacheRequestValid(req)) { resp.setStatus(SC_NOT_FOUND); } else { valid=true; } return valid; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,service,@Override protected void  (HttpServletRequest req HttpServletResponse resp) throws ServletException  IOException { final Scope scope=startSpan(req tracer LOG Tags.SPAN_KIND_SERVER reposeVersion uriRedactionService); try { if (isRequestValid(req resp)) { S
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\servlet\DistributedDatastoreServlet.java,updateAcl,public void  (DatastoreAccessControl acl){ this.hostAcl.set(acl); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,DistributedDatastoreLauncherService,@Inject public  (@Value(ReposeSpringProperties.NODE.CLUSTER_ID) String clusterId @Value(ReposeSpringProperties.NODE.NODE_ID) String nodeId @Value(ReposeSpringProperties.CORE.CONFIG_ROOT) String configRoot @Value(ReposeSpringProperties.CORE.REPOSE_VERSION)
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,configurationHeartbeat,"private void  (){ synchronized (heartbeatLock) { if (currentDDConfig.get() != null && currentSystemModel.get() != null && isRunning) { DistributedDatastoreConfiguration ddConfig=currentDDConfig.get(); SystemModel systemModel=currentSystemModel.get(); int ddPort=ClusterMemberDeterminator.getNodeDDPort(ddConfig clusterId nodeId); if (ddPort == -1) { LOG.error(""Unable to determine Distributed Datastore port for {} : {}"" clusterId nodeId); healthCheckServiceProxy.reportIssue(DD_CONFIG_ISSUE ""Dist-Datastore Configuration Issue: ddPort not defined"" Severity.BROKEN); return; } if (ddPort <= 0 || ddPort > 65535) { LOG.error(""Distributed Datastore port out of range: {}"" ddPort); healthCheckServiceProxy.reportIssue(DD_CONFIG_ISSUE ""Dist-Datastore Configuration Issue: ddPort out of range"" Severity.BROKEN); return; } if (!ddServer.isPresent()) { ClusterConfiguration configuration=new ClusterConfiguration(requestProxyService UUIDEncodingProvider.getInstance() ThreadSafeClusterView.singlePortClusterView(ddPort)); ddServlet=new DistributedDatastoreServlet(datastoreService configuration new DatastoreAccessControl(Collections.emptyList() false) ddConfig tracer reposeVersion uriRedactionService); DistributedDatastoreServer server=new DistributedDatastoreServer(clusterId nodeId ddServlet ddConfig); this.ddServer=Optional.of(server); try { LOG.info(""Starting Distributed Datastore listener on port {} "" ddPort); server.runServer(ddPort configRoot); healthCheckServiceProxy.resolveIssue(DD_CONFIG_ISSUE); } catch ( Exception e) { LOG.error(""Unable to start Distributed Datastore Server instance on {}"" ddPort e); healthCheckServiceProxy.reportIssue(DD_CONFIG_ISSUE ""Dist-Datastore Configuration Issue: Unable to start Distributed Datastore: "" + e.getMessage() Severity.BROKEN); } } if (ddServer.isPresent()) { try { int existingPort=ddServer.get().getPort(); LOG.info(""Updating existing Distributed Datastore Server instance on {} to {}"" existingPort ddPort); ddServer.get().runServer(ddPort configRoot); healthCheckServiceProxy.resolveIssue(DD_CONFIG_ISSUE); } catch ( Exception e) { LOG.error(""Unable to start Distributed Datastore Server instance on {}"" ddPort e); healthCheckServiceProxy.reportIssue(DD_CONFIG_ISSUE ""Dist-Datastore Configuration Issue: Unable to start Distributed Datastore: "" + e.getMessage() Severity.BROKEN); } ddServlet.getClusterView().updateMembers(ClusterMemberDeterminator.getClusterMembers(systemModel ddConfig clusterId)); ddServlet.updateAcl(AccessListDeterminator.getAccessList(ddConfig AccessListDeterminator.getClusterMembers(systemModel clusterId))); } } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,configurationUpdated,@Override public void  (SystemModel configurationObject){ SystemModelInterrogator smi=new SystemModelInterrogator(clusterId nodeId); Optional<ReposeCluster> clusterOption=smi.getLocalCluster(configurationObject); if (clusterOption.isPresent()) { boolean l
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,destroy,"@PreDestroy public void  (){ healthCheckServiceProxy.deregister(); configurationService.unsubscribeFrom(""system-model.cfg.xml"" systemModelListener); stopDistributedDatastore(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,initialize,"@PostConstruct public void  (){ URL systemModelXSD=getClass().getResource(""/META-INF/schema/system-model/system-model.xsd""); configurationService.subscribeTo(""system-model.cfg.xml"" systemModelXSD systemModelListener SystemModel.class); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,isInitialized,@Override public boolean  (){ return isRunning; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,startDistributedDatastore,"@SuppressWarnings(""squid:S3398"") private void  (){ isRunning=true; ddConfigListener=new DistributedDatastoreConfigurationListener(); URL xsdURL=getClass().getResource(""/META-INF/schema/dist-datastore/dist-datastore.xsd""); this.configurationService.subscri"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreLauncherService.java,stopDistributedDatastore,"private void  (){ isRunning=false; configurationService.unsubscribeFrom(""dist-datastore.cfg.xml"" ddConfigListener); synchronized (heartbeatLock) { if (ddServer.isPresent()) { DistributedDatastoreServer server=ddServer.get(); LOG.info(""Stopping Distributed Datastore listener at port {} "" server.getPort()); try { server.stop(); } catch ( Exception e) { LOG.error(""Unable to stop Distributed Datastore listener at port {}"" server.getPort() e); } ddServer=Optional.empty(); } } healthCheckServiceProxy.resolveIssue(DD_CONFIG_ISSUE); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,RemoteDatastoreLauncherService,@Inject public  (@Value(ReposeSpringProperties.NODE.CLUSTER_ID) String clusterId @Value(ReposeSpringProperties.NODE.NODE_ID) String nodeId DatastoreService datastoreService ConfigurationService configurationService HealthCheckService healthCheckService Re
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,configurationUpdated,@Override public void  (RemoteDatastoreConfiguration configurationObject){ RemoteDatastoreConfiguration currentRemoteDatastoreConfiguration=currentConfiguration.get(); Optional<RemoteClusterConfiguration> oldClusterConfigOpt=Optional.ofNullable(currentRem
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,destroy,@PreDestroy public void  (){ healthCheckServiceProxy.deregister(); configurationService.unsubscribeFrom(SYSTEM_CONFIG_NAME systemModelListener); destroyRemoteDatastore(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,destroyRemoteDatastore,private void  (){ isRunning=false; datastoreService.destroyDatastore(REMOTE_DATASTORE_NAME); configurationService.unsubscribeFrom(DEFAULT_CONFIG_NAME configurationListener); healthCheckServiceProxy.resolveIssue(REMOTE_DATASTORE_SERVICE_CONFIG_ISSUE); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,init,@PostConstruct public void  (){ URL systemModelXSD=getClass().getResource(SYSTEM_CONFIG_SCHEMA); configurationService.subscribeTo(SYSTEM_CONFIG_NAME systemModelXSD systemModelListener SystemModel.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,initRemoteDatastore,"private void  (){ healthCheckServiceProxy.reportIssue(REMOTE_DATASTORE_SERVICE_CONFIG_ISSUE ""Remote Datastore Service Configuration Error"" Severity.BROKEN); URL xsdURL=getClass().getResource(DEFAULT_CONFIG_SCHEMA); configurationService.subscribeTo(DEFAULT_CONFIG_NAME xsdURL configurationListener RemoteDatastoreConfiguration.class); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\remote\RemoteDatastoreLauncherService.java,isInitialized,@Override public boolean  (){ return initialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreServer.java,DistributedDatastoreServer,public  (String clusterId String nodeId DistributedDatastoreServlet ddServlet DistributedDatastoreConfiguration ddConfig){ this.clusterId=clusterId; this.nodeId=nodeId; this.ddServlet=ddServlet; this.ddConfig=ddConfig; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreServer.java,getPort,public int  (){ return port; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreServer.java,runServer,"public void  (int port String configRoot) throws Exception { if (this.port != port) { if (server != null) { server.stop(); } server=new Server(); ServerConnector conn; if (ddConfig.getKeystoreFilename() != null) { SslContextFactory cf=new SslContextFactory(); cf.setKeyStorePath(FileUtilities.guardedAbsoluteFile(configRoot ddConfig.getKeystoreFilename()).getAbsolutePath()); cf.setKeyStorePassword(ddConfig.getKeystorePassword()); cf.setKeyManagerPassword(ddConfig.getKeyPassword()); cf.setNeedClientAuth(true); if (ddConfig.getTruststoreFilename() != null) { cf.setTrustStorePath(FileUtilities.guardedAbsoluteFile(configRoot ddConfig.getTruststoreFilename()).getAbsolutePath()); cf.setTrustStorePassword(ddConfig.getTruststorePassword()); } conn=new ServerConnector(server cf); } else { conn=new ServerConnector(server); } conn.getConnectionFactory(HttpConnectionFactory.class).getHttpConfiguration().setSendServerVersion(false); conn.setPort(port); this.port=port; server.addConnector(conn); ServletContextHandler rootContext=new ServletContextHandler(server ""/""); ServletHolder holder=new ServletHolder(ddServlet); holder.setName(""DistDatastoreServlet-"" + clusterId + ""-""+ nodeId); rootContext.addServlet(holder ""/*""); server.setHandler(rootContext); server.setStopAtShutdown(true); server.start(); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\main\java\org\openrepose\nodeservice\distributed\jetty\DistributedDatastoreServer.java,stop,public void  () throws Exception { if (server != null && server.isStarted()) { server.stop(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,TestingHashRingDatastore,public  (ClusterView clusterView String datastorePrefix Datastore localDatastore MessageDigestFactory hashProvider EncodingProvider encodingProvider){ super(null clusterView datastorePrefix localDatastore hashProvider encodingProvider null false); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,getHttpPortList,private List<Integer>  (int port){ List<Integer> ports=new ArrayList<>(); ports.add(port); return ports; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,shouldSelectCorrectTarget,"@Test public void  () throws Exception { datastore=new TestingHashRingDatastore(clusterVew """" mockedDatastore MD5MessageDigestFactory.getInstance() UUIDEncodingProvider.getInstance()); final byte[] id=new byte[]{1}; for (byte i=0; i < 127; i++) { id[0]=i;"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,shouldUseLocalTarget,"@Test public void  () throws Exception { datastore=new TestingHashRingDatastore(singleNodeClusterView """" mockedDatastore MD5MessageDigestFactory.getInstance() UUIDEncodingProvider.getInstance()); final byte[] id=new byte[]{1}; assertEquals(""If cluster is "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\AbstractHashRingDatastoreTest.java,standUp,@Before public void  () throws Exception { addresses=new InetAddress[]{InetAddress.getByAddress(new byte[]{10 1 1 11}) InetAddress.getByAddress(new byte[]{10 1 1 12}) InetAddress.getByAddress(new byte[]{10 1 1 13}) InetAddress.getByAddress(new byte[]{10 1
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,mockRequestWithMethod,"public HttpServletRequest  (String cacheKey String method String remoteHost){ final HttpServletRequest mockedRequest=mock(HttpServletRequest.class); when(mockedRequest.getRequestURI()).thenReturn(CacheRequest.CACHE_URI_PATH + cacheKey); when(mockedRequest.getMethod()).thenReturn(method); when(mockedRequest.getLocalAddr()).thenReturn(""localhost""); when(mockedRequest.getLocalPort()).thenReturn(2101); when(mockedRequest.getRemoteHost()).thenReturn(remoteHost); when(mockedRequest.getHeader(DatastoreHeader.REMOTE_BEHAVIOR)).thenReturn(""ALLOW_FORWARDING""); return mockedRequest; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldBuildHttpRequestWithKey,"@Test public void  () throws UnknownHostException { final InetSocketAddress addr=new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000); final String urlFor=CacheRequest.urlFor(addr RESOURCE false); assertEquals(""Cache request must ge"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldBuildHttpRequestWithoutKey,"@Test public void  () throws UnknownHostException { final InetSocketAddress addr=new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000); final String urlFor=CacheRequest.urlFor(addr false); assertEquals(""Cache request must generate va"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldBuildHttpsRequestWithKey,"@Test public void  () throws UnknownHostException { final InetSocketAddress addr=new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000); final String urlFor=CacheRequest.urlFor(addr RESOURCE true); assertEquals(""Cache request must gen"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldBuildHttpsRequestWithoutKey,"@Test public void  () throws UnknownHostException { final InetSocketAddress addr=new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000); final String urlFor=CacheRequest.urlFor(addr true); assertEquals(""Cache request must generate val"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldIgnoreCaseForRemoteBehaviorDirective,"@Test public void  (){ final HttpServletRequest request=mockRequestWithMethod(""GET"" ""localhost""); when(request.getHeader(DatastoreHeader.REMOTE_BEHAVIOR)).thenReturn(""diSallOw_forwaRding""); final CacheRequest cacheRequest=CacheRequest.marshallCacheRequest"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldMarshallGetRequests,"@Test public void  () throws UnknownHostException { final InetSocketAddress addr=new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000); final String urlFor=CacheRequest.urlFor(addr RESOURCE false); assertEquals(""Cache request must ge"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldMarshallRequest,"@Test public void  () throws IOException { final HttpServletRequest request=mockRequestWithMethod(""PUT"" ""localhost""); when(request.getHeader(ExtendedHttpHeader.X_TTL)).thenReturn(""5""); when(request.getInputStream()).thenReturn(new ServletInputStreamWrappe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldNotMatchIfRequestPathDoesntStartWithCacheURI,"@Test public void  (){ when(mockRequest.getRequestURI()).thenReturn(""/stuff/"" + CacheRequest.CACHE_URI_PATH + ""/foobar""); assertFalse(CacheRequest.isCacheRequestValid(mockRequest)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldPassIfRequestPathStartsWithCacheURI,"@Test public void  (){ when(mockRequest.getRequestURI()).thenReturn(CacheRequest.CACHE_URI_PATH + ""/foobar""); assertTrue(CacheRequest.isCacheRequestValid(mockRequest)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldRejectBadCacheKeyUri,"@Test(expected=MalformedCacheRequestException.class) public void  (){ final HttpServletRequest request=mockRequestWithMethod(""fail"" ""GET"" ""localhost""); CacheRequest.marshallCacheRequest(request); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldRejectBadRemoteBehaviorDirectives,"@Test(expected=MalformedCacheRequestException.class) public void  (){ final HttpServletRequest request=mockRequestWithMethod(""GET"" ""localhost""); when(request.getHeader(DatastoreHeader.REMOTE_BEHAVIOR)).thenReturn(""FAIL""); CacheRequest.marshallCacheRequest"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldRejectBadTTL,"@Test(expected=MalformedCacheRequestException.class) public void  () throws IOException { final HttpServletRequest request=mockRequestWithMethod(""PUT"" ""localhost""); when(request.getHeader(ExtendedHttpHeader.X_TTL)).thenReturn(""nan""); CacheRequest.marshall"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldRejectBlankCacheKeyUri,"@Test(expected=MalformedCacheRequestException.class) public void  (){ final HttpServletRequest request=mockRequestWithMethod("""" ""GET"" ""localhost""); CacheRequest.marshallCacheRequest(request); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldRejectCacheObjectsThatAreTooLarge,"@Test(expected=MalformedCacheRequestException.class) public void  () throws IOException { final HttpServletRequest request=mockRequestWithMethod(""PUT"" ""localhost""); when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInput"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldRejectNegativeTTL,"@Test(expected=MalformedCacheRequestException.class) public void  () throws IOException { final HttpServletRequest request=mockRequestWithMethod(""PUT"" ""localhost""); when(request.getHeader(ExtendedHttpHeader.X_TTL)).thenReturn(""-1""); CacheRequest.marshallC"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldUseDefaultRemoteBehaviorDirectiveWhenOneIsNotSetInTheRequest,"@Test public void  (){ final HttpServletRequest request=mockRequestWithMethod(""GET"" ""localhost""); when(request.getHeader(DatastoreHeader.REMOTE_BEHAVIOR)).thenReturn(null); final CacheRequest cacheRequest=CacheRequest.marshallCacheRequest(request); assert"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\CacheRequestTest.java,shouldUseDefaultTTLWhenNotSpecified,"@Test public void  () throws IOException { final HttpServletRequest request=mockRequestWithMethod(""PUT"" ""localhost""); when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(new byte[]{1}))); final CacheRequest cac"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,shouldAllowRetryAfterMemberCooldown,"@Test public void  (){ final InetSocketAddress address=mock(InetSocketAddress.class); final ClusterMember clusterMember=new ClusterMember(address 1); clusterMember.setOffline(); sleep(5); assertTrue(""A cluster member that's been offline for the duration o"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,shouldMarkMemberOffline,"@Test public void  (){ final InetSocketAddress address=mock(InetSocketAddress.class); final ClusterMember clusterMember=new ClusterMember(address 10); assertFalse(""A cluster member must start in an online state"" clusterMember.isOffline()); assertTrue(""A c"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,shouldNotAllowRetryBeforeMemberCooldown,"@Test public void  (){ final InetSocketAddress address=mock(InetSocketAddress.class); final ClusterMember clusterMember=new ClusterMember(address 1000); clusterMember.setOffline(); assertFalse(""A cluster member that has not been offline for the duration o"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,shouldOnlineMemberAfterMemberCompletesAllValidationPasses,"@Test public void  (){ final InetSocketAddress address=mock(InetSocketAddress.class); final ClusterMember clusterMember=new ClusterMember(1 address 1); clusterMember.setOffline(); sleep(5); assertTrue(""A cluster member that's been offline for the duration"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,shouldResetValidationPasses,"@Test public void  (){ final InetSocketAddress address=mock(InetSocketAddress.class); final ClusterMember clusterMember=new ClusterMember(1 address 1); clusterMember.setOffline(); sleep(5); assertTrue(""A cluster member that's been offline for the duration"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ClusterMemberTest.java,sleep,"public static void  (int miliseconds){ try { Thread.sleep(miliseconds); } catch ( InterruptedException ie) { fail(""Thread was interrupted - unable to complete test.""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\DeleteTest.java,shouldReturnFalseOnFailure,"@Test public void  () throws Exception { final Delete deleteCommand=new Delete(""object-key"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null false); final ServiceClientResponse response=mock(ServiceClientResponse.class); wh"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\DeleteTest.java,shouldReturnTrueOnSuccess,"@Test public void  () throws Exception { final Delete deleteCommand=new Delete(""object-key"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null false); final ServiceClientResponse response=mock(ServiceClientResponse.class); wh"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\DeleteTest.java,shouldTargetCorrectDeletionUrl,"@Test public void  () throws UnknownHostException { final Delete deleteCommand=new Delete(""object-key"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null false); assertEquals(""Delete command must target expected URL"" ""http://"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\GetTest.java,shouldReturnTrueOnSuccess,"@Test public void  () throws Exception { final Get getCommand=new Get(""object-key"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null false); final ServiceClientResponse response=mock(ServiceClientResponse.class); final Strin"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\GetTest.java,shouldTargetCorrectDeletionUrl,"@Test public void  () throws UnknownHostException { final Get getCommand=new Get(""object-key"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null false); Assert.assertEquals(""Get command must target expected URL"" ""http://127.0"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\GetTest.java,shouldThrowExeptionOnUnauthorized,"@Test(expected=DatastoreOperationException.class) public void  () throws Exception { final Get getCommand=new Get(""object-key"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null false); final ServiceClientResponse response=mo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PatchTest.java,getUrl_shouldTargetCorrectPatchUrl,"@Test public void  () throws UnknownHostException { final int ttl=30; final String key=""someKey""; final Patch patchCommand=new Patch(TimeUnit.MINUTES new TestPatch() ttl key new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PatchTest.java,newFromPatch,"@Override public String  (){ throw new UnsupportedOperationException(""org.openrepose.services.datastore.impl.distributed.remote.command.PatchTest.TestPatch.newFromPatch hasn't been written yet""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PatchTest.java,processResponse_shouldReturnPatchedValueOnSuccess,"@Test public void  () throws Exception { final int ttl=30; final Patch patchCommand=new Patch(TimeUnit.MINUTES new TestPatch() ttl ""somekey"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null false); final ServiceClientRespon"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PatchTest.java,processResponse_shouldThrowExeptionOnUnauthorized,"@Test(expected=DatastoreOperationException.class) public void  () throws Exception { final int ttl=30; final Patch patchCommand=new Patch(TimeUnit.MINUTES new TestPatch() ttl ""somekey"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PutTest.java,shouldReturnTrueOnSuccess,"@Test public void  () throws Exception { final String putData=""Put data""; final int ttl=30; final Put putCommand=new Put(TimeUnit.MINUTES putData ttl ""somekey"" new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 0 0 1}) 1000) null false); final "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PutTest.java,shouldTargetCorrectPutUrl,"@Test public void  () throws UnknownHostException { final String putData=""Put data""; final int ttl=30; final String key=""someKey""; final Put putCommand=new Put(TimeUnit.MINUTES putData ttl key new InetSocketAddress(InetAddress.getByAddress(new byte[]{127 "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\command\PutTest.java,shouldThrowExeptionOnUnauthorized,"@Test(expected=DatastoreOperationException.class) public void  () throws Exception { final String putData=""Put data""; final int ttl=30; final Put putCommand=new Put(TimeUnit.MINUTES putData ttl ""somekey"" new InetSocketAddress(InetAddress.getByAddress(new "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,TestableRemoteCommand,private  (boolean throwsIOException){ this.throwsIOException=throwsIOException; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,execute,@Override public ServiceClientResponse  (RequestProxyService proxyService RemoteBehavior remoteBehavior){ return mock(ServiceClientResponse.class); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,handleResponse,"@Override public Object  (ServiceClientResponse httpResponse) throws IOException { if (exception != null) { throw exception; } if (throwsIOException) { throw new IOException(""foo"" new IllegalArgumentException()); } return Boolean.TRUE; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,setup,@Before public void  () throws Exception { mockRequestProxyService=mock(RequestProxyService.class); executor=new RemoteCommandExecutor(mockRequestProxyService); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,shouldCatchProxyRequestExceptions,"@Test(expected=RemoteConnectionException.class) public void  (){ executor.execute(new TestableRemoteCommand(new ProxyRequestException(""foo"" new IllegalArgumentException())) RemoteBehavior.ALLOW_FORWARDING); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,shouldPerformRemoteCommand,"@Test public void  (){ final Object result=executor.execute(new TestableRemoteCommand() RemoteBehavior.ALLOW_FORWARDING); assertEquals(""Executor must return the remote command's response"" Boolean.TRUE result); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\RemoteCommandExecutorTest.java,shouldThrowDatastoreOperationExceptionsForIOExceptions,@Test(expected=DatastoreOperationException.class) public void  (){ executor.execute(new TestableRemoteCommand(true) RemoteBehavior.ALLOW_FORWARDING); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,setUp,@Before public void  () throws Exception { servicePorts=mock(List.class); i=1; inetSocketAddress=new InetSocketAddress(i); clusterMember=new ClusterMember(inetSocketAddress i); clusterMembers=new LinkedList<>(); clusterMembers.add(clusterMember); networkI
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,shouldCreateThreadSafeClusterViewWithListOfClusterMembersAndServicePorts,@Test public void  (){ threadSafeClusterView=new ThreadSafeClusterView(clusterMembers servicePorts); assertNotNull(threadSafeClusterView); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,shouldCreateThreadSafeClusterViewWithNetworkInterfaceProviderAndListOfClusterMembersAndServicePorts,@Test public void  (){ threadSafeClusterView=new ThreadSafeClusterView(networkInterfaceProvider clusterMembers servicePorts); assertNotNull(threadSafeClusterView); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,shouldCreateThreadSafeClusterViewWithServicePorts,@Test public void  (){ threadSafeClusterView=new ThreadSafeClusterView(servicePorts); assertNotNull(threadSafeClusterView); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,shouldReportDamagedMembers,@Test public void  (){ threadSafeClusterView=new ThreadSafeClusterView(networkInterfaceProvider clusterMembers servicePorts); assertFalse(threadSafeClusterView.hasDamagedMembers()); clusterMember.setOffline(); clusterMembers.clear(); clusterMembers.add(cl
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,shouldReturnMembers,@Test public void  (){ assertThat(threadSafeClusterView.members() is(instanceOf(InetSocketAddress[].class))); assertEquals(threadSafeClusterView.members()[0] clusterMember.getMemberAddress()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\ThreadSafeClusterViewTest.java,shouldReturnThreadSafeClusterViewWhenCopied,@Test public void  (){ assertThat(threadSafeClusterView.copy() is(instanceOf(ThreadSafeClusterView.class))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,getName_returnsExpectedName,@Test public void  () throws Exception { assertThat(hashRingDatastore.getName() equalTo(HashRingDatastore.DATASTORE_NAME)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,shouldCatchDOExceptionFromIsRemoteTarget,"@Test public void  () throws Exception { when(clusterView.members()).thenReturn(new InetSocketAddress[]{inetSocketAddress} new InetSocketAddress[]{}); when(localDatastore.get(any(String.class))).thenThrow(new DatastoreOperationException("""")).thenReturn(Bo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,shouldCatchDOExceptionFromPerformRemote,@Test public void  () throws Exception { when(clusterView.members()).thenReturn(new InetSocketAddress[]{inetSocketAddress} new InetSocketAddress[]{}); when(localDatastore.get(any(String.class))).thenReturn(Boolean.FALSE); when(remoteCommandExecutor.execut
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,shouldCatchRCExceptionFromPerformRemote,@Test public void  () throws Exception { when(clusterView.members()).thenReturn(new InetSocketAddress[]{inetSocketAddress} new InetSocketAddress[]{}); when(localDatastore.get(any(String.class))).thenReturn(Boolean.FALSE); when(remoteCommandExecutor.execut
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,shouldPatchExistingElement,"@Test public void  () throws Exception { String key=""key-one""; byte[] id=new byte[]{1 2 3}; String value=""1  2  3""; String newValue=""  4  5""; StringValue.Patch secondPatch=new StringValue.Patch(newValue); when(clusterView.members()).thenReturn(new InetSoc"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,shouldPatchNewElement,"@Test public void  () throws Exception { String key=""key-one""; byte[] id=new byte[]{1 2 3}; String value=""1  2  3""; when(clusterView.members()).thenReturn(new InetSocketAddress[]{inetSocketAddress} new InetSocketAddress[]{}); when(clusterView.isLocal(any("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\distributed\remote\HashRingDatastoreTest.java,standUp,@Before public void  () throws Exception { inetSocketAddress=new InetSocketAddress(InetAddress.getByAddress(new byte[]{10 1 1 11}) 2200); localDatastore=mock(Datastore.class); clusterView=mock(ClusterView.class); datastoreAction=mock(DatastoreAction.class
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminatorTest.java,setUp,"@Before public void  (){ filters=new ArrayList<Filter>(); filterList=new FilterList(); filterList.getFilter().addAll(filters); node1=new Node(); node1.setHttpPort(8888); node1.setHostname(""127.0.0.1""); node1.setId(""node1""); nodeList=new NodeList(); nodeLi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminatorTest.java,shouldGetAccessList,"@Test public void  (){ List<InetAddress> clusterMembers=AccessListDeterminator.getClusterMembers(sysConfig ""reposeCluster""); DatastoreAccessControl allowedHosts=AccessListDeterminator.getAccessList(ddConfig clusterMembers); assertFalse(""Should not allow a"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\AccessListDeterminatorTest.java,shouldGetClusterMembers,"@Test public void  (){ List<InetAddress> clusterMembers=AccessListDeterminator.getClusterMembers(sysConfig ""reposeCluster""); assertThat(""Should have two cluster members"" clusterMembers.size() equalTo(2)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,getName_getName,"@Test public void  () throws Exception { assertThat(datastore.getName() equalTo(""local/default"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,get_getsNullElement,"@Test public void  (){ final String key=""doesn't exist""; Serializable element=datastore.get(key); assertNull(element); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,patch_shouldRaiseTtl_ifHigher,"@Test public void  () throws Exception { Ehcache cache=mock(Ehcache.class); Element returnedElement=new Element(""key"" new StringValue("""")); when(cache.putIfAbsent(any(Element.class))).thenReturn(returnedElement); EHCacheDatastore datastore=new EHCacheData"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,patch_shouldReturnUpdatedValue,"@Test public void  () throws Exception { String key=""my element""; String value=""1  2  3""; String newValue=""  4""; datastore.patch(key new StringValue.Patch(value) 5 DAYS); StringValue element=(StringValue)datastore.patch(key new StringValue.Patch(newValue)"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,patch_shouldSetTtl,"@Test public void  () throws Exception { Ehcache cache=mock(Ehcache.class); EHCacheDatastore datastore=new EHCacheDatastore(cache); ArgumentCaptor<Element> captor=ArgumentCaptor.forClass(Element.class); datastore.patch(""key"" new StringValue.Patch(""some va"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,patch_ttlShouldBeReset,"@Test public void  () throws Exception { Ehcache cache=mock(Ehcache.class); Element returnedElement=new Element(""key"" new StringValue("""")); when(cache.putIfAbsent(any(Element.class))).thenReturn(returnedElement); EHCacheDatastore datastore=new EHCacheData"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,put_getsExistingElement,"@Test public void  (){ final String key=""my element""; String value=""1  2  3""; datastore.put(key value); Serializable element=datastore.get(key); assertNotNull(element); assertThat((String)element equalTo(value)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,put_removesExistingElementPastTTL,"@Test public void  () throws Exception { final String key=""my other element""; String value=""1  2  3""; int ttl=1; datastore.put(key value ttl SECONDS); Serializable element=datastore.get(key); assertNotNull(element); assertThat((String)element equalTo(valu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,removeAll_removesAllEntries,"@Test public void  () throws Exception { String key1=""a key""; String key2=""a different key""; String value=""some value""; datastore.put(key1 value); datastore.put(key2 value); Serializable element=datastore.get(key1); assertNotNull(element); element=datasto"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,remove_removesExistingElement,"@Test public void  (){ final String key=""my other element""; String value=""1  2  3""; datastore.put(key value); datastore.remove(key); Serializable element=datastore.get(key); assertNull(element); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,setUp,@Before public void  (){ cache=new Cache(UUID.randomUUID().toString() 20000 false false 5 2); cacheManager.addCache(cache); datastore=new EHCacheDatastore(cache); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,setUpClass,"@BeforeClass public static void  (){ Configuration defaultConfiguration=new Configuration(); defaultConfiguration.setName(""TestCacheManager""); defaultConfiguration.setDefaultCacheConfiguration(new CacheConfiguration().diskPersistent(false)); defaultConfig"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,shouldPatchExistingElement,"@Test public void  (){ String key=""my element""; String value=""1  2  3""; String newValue=""  4""; datastore.patch(key new StringValue.Patch(value)); datastore.patch(key new StringValue.Patch(newValue)); StringValue element=(StringValue)datastore.get(key); as"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,shouldPatchExistingElementWithTTL,"@Test public void  (){ String key=""my element""; String value=""1  2  3""; String newValue=""  4""; datastore.patch(key new StringValue.Patch(value) 5 DAYS); datastore.patch(key new StringValue.Patch(newValue) 5 DAYS); StringValue element=(StringValue)datastor"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,shouldPatchNewElement,"@Test public void  (){ String key=""my element""; String value=""1  2  3""; datastore.patch(key new StringValue.Patch(value)); StringValue element=(StringValue)datastore.get(key); assertNotNull(element); assertEquals(value element.getValue()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,shouldPatchNewElementWithTTL,"@Test public void  (){ String key=""my element""; String value=""1  2  3""; datastore.patch(key new StringValue.Patch(value) 5 DAYS); StringValue element=(StringValue)datastore.get(key); assertNotNull(element); assertEquals(value element.getValue()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\core\services\datastore\impl\ehcache\EHCacheDatastoreTest.java,tearDownClass,@AfterClass public static void  (){ cacheManager.removalAll(); cacheManager.shutdown(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,setUp,"@Before public void  (){ filters=new ArrayList<Filter>(); filterList=new FilterList(); filterList.getFilter().addAll(filters); node1=new Node(); node1.setHttpPort(8888); node1.setHostname(""127.0.0.1""); node1.setId(""node1""); nodeList=new NodeList(); nodeLi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,whenDeterminingCurrentCluster,"@Test public void  (){ ReposeCluster getCluster=ClusterMemberDeterminator.getCurrentCluster(sysConfig.getReposeCluster() ""reposeCluster""); assertThat(""should retrieve cluster"" getCluster.getId() equalTo(""reposeCluster"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,whenRetrievingClusterMembers,"@Test public void  (){ List<InetSocketAddress> clusterView=ClusterMemberDeterminator.getClusterMembers(sysConfig ddConfig ""reposeCluster""); assertThat(""Cluster has 2 repose nodes"" clusterView.size() equalTo(2)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,whenRetrievingDDPort,"@Test public void  (){ int ddPort=ClusterMemberDeterminator.getNodeDDPort(ddConfig ""reposeCluster"" ""node1""); int ddPort2=ClusterMemberDeterminator.getNodeDDPort(ddConfig ""reposeCluster"" ""node2""); assertThat(""Should determine proper dd port 1"" ddPort equal"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\datastore-service\datastore-service-impl\src\test\java\org\openrepose\nodeservice\distributed\cluster\utils\ClusterMemberDeterminatorTest.java,whenRetrievingNonExistantCluster,"@Test public void  (){ ReposeCluster getCluster=ClusterMemberDeterminator.getCurrentCluster(sysConfig.getReposeCluster() ""nonExistantCluster""); assertNull(""No cluster retrieved"" getCluster); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-api\src\main\java\org\openrepose\core\services\healthcheck\HealthCheckReport.java,HealthCheckReport,public  (String message Severity level){ this.message=message; this.level=level; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-api\src\main\java\org\openrepose\core\services\healthcheck\HealthCheckReport.java,getLevel,public Severity  (){ return level; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-api\src\main\java\org\openrepose\core\services\healthcheck\HealthCheckReport.java,getMessage,public String  (){ return message; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,deregister,@Override public void  (){ HealthCheckServiceImpl.this.reports.remove(this); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,getDiagnosis,@Override public HealthCheckReport  (String issueName){ return HealthCheckServiceImpl.this.reports.get(this).get(issueName); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,getReportIds,@Override public Set<String>  (){ return HealthCheckServiceImpl.this.reports.get(this).keySet(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,getReports,@Override public Map<String HealthCheckReport>  (){ return HealthCheckServiceImpl.this.reports.get(this); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,isHealthy,@Override public boolean  (){ for ( Map.Entry<HealthCheckServiceProxy Map<String HealthCheckReport>> stringMapEntry : reports.entrySet()) { for ( Map.Entry<String HealthCheckReport> entry : stringMapEntry.getValue().entrySet()) { if (entry.getValue().getL
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,register,@Override public HealthCheckServiceProxy  (){ HealthCheckServiceProxy proxy=new HealthCheckServiceProxyImpl(); reports.put(proxy new HashMap<>()); return proxy; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,reportIssue,"@Override public void  (String issueName String message Severity severity){ LOG.info(""HealthCheckService.reportIssue: "" + issueName + "" reported by ""+ System.identityHashCode(this)); HealthCheckServiceImpl.this.reports.get(this).put(issueName new HealthCh"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\health-check-service\health-check-service-impl\src\main\java\org\openrepose\core\services\healthcheck\impl\HealthCheckServiceImpl.java,resolveIssue,"@Override public void  (String issueName){ Iterator<String> itr=reports.get(this).keySet().iterator(); while (itr.hasNext()) { String cur=itr.next(); if (cur.equals(issueName)) { LOG.info(""HealthCheckService.resolveIssue: "" + issueName + "" resolved by ""+ "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissionManager.java,ClientDecommissionManager,public  (HttpClientUserManager userManager){ this.decommissioner=new ClientDecommissioner(userManager); this.decommThread=new Thread(decommissioner); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissionManager.java,decommissionClient,public void  (HttpClient client){ decommissioner.addClientToBeDecommissioned(client); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissionManager.java,startThread,"public void  (){ LOG.debug(""Starting HttpClient Decommissioner Thread""); decommThread.start(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissionManager.java,stopThread,"public void  (){ LOG.info(""Shutting down HttpClient Service Decommissioner""); decommissioner.stop(); decommThread.interrupt(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissioner.java,ClientDecommissioner,public  (HttpClientUserManager userManager){ clientList=new ArrayList<>(); listLock=new Object(); done=false; this.userManager=userManager; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissioner.java,addClientToBeDecommissioned,public void  (HttpClient client){ synchronized (listLock) { PoolingClientConnectionManager connMan=(PoolingClientConnectionManager)client.getConnectionManager(); connMan.closeExpiredConnections(); connMan.setMaxTotal(1); connMan.setDefaultMaxPerRoute(1); clientList.add(client); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissioner.java,run,"@Override @SuppressWarnings(""squid:S2142"") public void  (){ while (!this.done) { synchronized (listLock) { LOG.trace(""Iterating through decommissioned clients...""); List<HttpClient> clientsToRemove=new ArrayList<>(); for ( HttpClient client : clientList) "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ClientDecommissioner.java,stop,public void  (){ this.done=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ConnectionKeepAliveWithTimeoutStrategy.java,ConnectionKeepAliveWithTimeoutStrategy,public  (int timeout){ this.timeout=timeout; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ConnectionKeepAliveWithTimeoutStrategy.java,getKeepAliveDuration,@Override public long  (HttpResponse response HttpContext context){ long duration=super.getKeepAliveDuration(response context); if (duration > 0) { return duration; } return timeout == 0 ? -1 : timeout; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientContainerImpl.java,HttpClientContainerImpl,public  (HttpClient httpClient String clientInstanceId String userId){ this.httpClient=httpClient; this.clientInstanceId=clientInstanceId; this.userId=userId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientContainerImpl.java,getClientInstanceId,@Override public String  (){ return clientInstanceId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientContainerImpl.java,getHttpClient,@Override public HttpClient  (){ return httpClient; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientContainerImpl.java,getUserId,@Override public String  (){ return userId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientUserManager.java,addUser,"String  (String clientInstanceId){ if (clientInstanceId == null || clientInstanceId.isEmpty()) { throw new IllegalArgumentException(""No client ID provided!""); } String userId=UUID.randomUUID().toString(); final List<String> users; if (registeredClientUsers.containsKey(clientInstanceId)) { users=registeredClientUsers.get(clientInstanceId); } else { users=Collections.synchronizedList(new ArrayList<String>()); } users.add(userId); registeredClientUsers.put(clientInstanceId users); return userId; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientUserManager.java,hasUsers,public boolean  (String clientInstanceId){ if (!registeredClientUsers.containsKey(clientInstanceId) || registeredClientUsers.get(clientInstanceId).isEmpty()) { return false; } return true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpClientUserManager.java,removeUser,"void  (String clientInstanceId String userId){ if (clientInstanceId == null || clientInstanceId.isEmpty() || userId == null || userId.isEmpty()) { throw new IllegalArgumentException(""No client and/or user ID provided!""); } if (registeredClientUsers.containsKey(clientInstanceId)) { registeredClientUsers.get(clientInstanceId).remove(userId); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolProvider.java,createHeaders,private static Collection<Header>  (List<HeaderType> configHeaders){ Collection<Header> headers=new ArrayList<>(); for ( HeaderType configHeader : configHeaders) { headers.add(new BasicHeader(configHeader.getName() configHeader.getValue())); } return headers; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolProvider.java,genClient,"public static HttpClient  (String configRoot PoolType poolConf Tracer tracer String reposeVersion UriRedactionService uriRedactionService){ PoolingClientConnectionManager cm=new PoolingClientConnectionManager(); cm.setDefaultMaxPerRoute(poolConf.getHttpConnManagerMaxPerRoute()); cm.setMaxTotal(poolConf.getHttpConnManagerMaxTotal()); HttpParams params=new BasicHttpParams(); params.setParameter(ClientPNames.COOKIE_POLICY CookiePolicy.IGNORE_COOKIES); params.setBooleanParameter(ClientPNames.HANDLE_REDIRECTS false); params.setIntParameter(CoreConnectionPNames.SO_TIMEOUT poolConf.getHttpSocketTimeout()); params.setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT poolConf.getHttpConnectionTimeout()); params.setParameter(CoreConnectionPNames.TCP_NODELAY poolConf.isHttpTcpNodelay()); params.setParameter(CoreConnectionPNames.MAX_HEADER_COUNT poolConf.getHttpConnectionMaxHeaderCount()); params.setParameter(CoreConnectionPNames.MAX_LINE_LENGTH poolConf.getHttpConnectionMaxLineLength()); params.setParameter(CoreConnectionPNames.SOCKET_BUFFER_SIZE poolConf.getHttpSocketBufferSize()); params.setParameter(CHUNKED_ENCODING_PARAM poolConf.getChunkedEncoding()); if (poolConf.getHeaders() != null) { params.setParameter(ClientPNames.DEFAULT_HEADERS createHeaders(poolConf.getHeaders().getHeader())); } final String uuid=UUID.randomUUID().toString(); params.setParameter(CLIENT_INSTANCE_ID uuid); DefaultHttpClient client=new DefaultHttpClient(cm params); client.addRequestInterceptor(new ReposeTracingRequestInterceptor(tracer reposeVersion uriRedactionService)); client.addResponseInterceptor(new TracingResponseInterceptor()); SSLContext sslContext=ProxyUtilities.getTrustingSslContext(); if (poolConf.getKeystoreFilename() != null) { sslContext=generateSslContextForKeystore(configRoot poolConf); } SSLSocketFactory ssf=new SSLSocketFactory(sslContext SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); SchemeRegistry registry=cm.getSchemeRegistry(); Scheme scheme=new Scheme(""https"" DEFAULT_HTTPS_PORT ssf); registry.register(scheme); client.setKeepAliveStrategy(new ConnectionKeepAliveWithTimeoutStrategy(poolConf.getKeepaliveTimeout())); LOG.info(""HTTP connection pool {} with instance id {} has been created"" poolConf.getId() uuid); return client; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolProvider.java,generateSslContextForKeystore,"private static SSLContext  (String configRoot PoolType poolConf){ SSLContext sslContext; try { SSLContextBuilder sslContextBuilder=SSLContexts.custom(); File keystoreFile=new File(poolConf.getKeystoreFilename()); if (!keystoreFile.isAbsolute()) { keystoreFile=new File(configRoot poolConf.getKeystoreFilename()); } char[] keystorePassword=poolConf.getKeystorePassword() == null ? null : poolConf.getKeystorePassword().toCharArray(); char[] keyPassword=poolConf.getKeyPassword() == null ? null : poolConf.getKeyPassword().toCharArray(); sslContextBuilder=sslContextBuilder.loadKeyMaterial(keystoreFile keystorePassword keyPassword); if (poolConf.getTruststoreFilename() == null) { sslContextBuilder=sslContextBuilder.loadTrustMaterial(keystoreFile keystorePassword); } else { File truststoreFile=new File(poolConf.getTruststoreFilename()); if (!truststoreFile.isAbsolute()) { truststoreFile=new File(configRoot poolConf.getTruststoreFilename()); } char[] truststorePassword=poolConf.getTruststorePassword() == null ? null : poolConf.getTruststorePassword().toCharArray(); sslContextBuilder=sslContextBuilder.loadTrustMaterial(truststoreFile truststorePassword); } sslContext=sslContextBuilder.build(); } catch ( GeneralSecurityException|IOException e) { LOG.warn(""Failed to properly configure the SSL client for {} due to: {}"" poolConf.getId() e.getLocalizedMessage()); LOG.trace("""" e); LOG.info(""Failing over to basic Trusting SSL context.""); sslContext=ProxyUtilities.getTrustingSslContext(); } return sslContext; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,HttpConnectionPoolServiceImpl,@Inject public  (ConfigurationService configurationService HealthCheckService healthCheckService Tracer tracer @Value(ReposeSpringProperties.CORE.CONFIG_ROOT) String configRoot @Value(ReposeSpringProperties.CORE.REPOSE_VERSION) String reposeVersion UriRed
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,clientGenerator,private HttpClient  (String configRoot PoolType poolType){ return HttpConnectionPoolProvider.genClient(configRoot poolType tracer reposeVersion uriRedactionService); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,configurationUpdated,@Override public void  (HttpConnectionPoolConfig poolConfig){ configure(poolConfig); healthCheckServiceProxy.resolveIssue(HTTP_CONNECTION_POOL_SERVICE_REPORT); initialized=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,configure,public void  (HttpConnectionPoolConfig config){ HashMap<String HttpClient> newPoolMap=new HashMap<>(); for ( PoolType poolType : config.getPool()) { if (poolType.isDefault()) { defaultClientId=poolType.getId(); } newPoolMap.put(poolType.getId() clientGenerator(configRoot poolType)); } if (!poolMap.isEmpty()) { decommissionManager.decommissionClient(poolMap); } poolMap=newPoolMap; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,destroy,@PreDestroy public void  (){ configurationService.unsubscribeFrom(DEFAULT_CONFIG_NAME configurationListener); shutdown(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,getAvailableClients,@Override public Set<String>  (){ verifyInitialized(); return poolMap.keySet(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,getClient,"@Override public HttpClientContainer  (String clientId){ verifyInitialized(); final HttpClient requestedClient; if (clientId == null) { requestedClient=poolMap.get(defaultClientId); } else if (!isAvailable(clientId)) { LOG.warn(""Pool "" + clientId + "" not "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,getDefaultClient,@Override public HttpClientContainer  (){ return getClient(null); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,init,"@PostConstruct public void  (){ LOG.debug(""Initializing HttpConnectionPoolService""); decommissionManager.startThread(); healthCheckServiceProxy.reportIssue(HTTP_CONNECTION_POOL_SERVICE_REPORT ""Http Client Service Configuration Error"" Severity.BROKEN); URL"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,isAvailable,@Override public boolean  (String clientId){ verifyInitialized(); return poolMap.containsKey(clientId); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,isInitialized,@Override public boolean  (){ return initialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,releaseClient,@Override public void  (HttpClientContainer httpClientContainer){ verifyInitialized(); String clientInstanceId=httpClientContainer.getClientInstanceId(); String userId=httpClientContainer.getUserId(); httpClientUserManager.removeUser(clientInstanceId user
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,shutdown,"@Override public void  (){ LOG.info(""Shutting down HTTP connection pools""); for ( HttpClient client : poolMap.values()) { client.getConnectionManager().shutdown(); } decommissionManager.stopThread(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\HttpConnectionPoolServiceImpl.java,verifyInitialized,"private void  (){ if (!initialized) { throw new IllegalStateException(""The HttpConnectionPoolService has not yet been initialized""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ProxyUtilities.java,getAcceptedIssuers,@Override public X509Certificate[]  (){ return new X509Certificate[0]; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\http-client-service\http-client-service-impl\src\main\java\org\openrepose\core\services\httpclient\impl\ProxyUtilities.java,getTrustingSslContext,"public static SSLContext  (){ TrustManager[] trustAllCerts=new TrustManager[]{new AllTrustingManager()}; try { SSLContext sc=SSLContext.getInstance(""SSL""); sc.init(null trustAllCerts new SecureRandom()); return sc; } catch ( Exception e) { LOG.error(""Problem creating SSL context: "" e); } return null; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCache.java,ManagedRateLimitCache,public  (Datastore datastore){ this.datastore=datastore; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCache.java,getUserRateLimitMap,private Map<String CachedRateLimit>  (String user){ final Serializable element=datastore.get(user); return (element == null) ? new HashMap<>() : ((UserRateLimit)element).getLimitMap(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCache.java,getUserRateLimits,@Override public Map<String CachedRateLimit>  (String user){ final Map<String CachedRateLimit> accountRateLimitMap=getUserRateLimitMap(user); return Collections.unmodifiableMap(accountRateLimitMap); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCache.java,updateLimit,@Override public NextAvailableResponse  (String user List<Pair<String ConfiguredRatelimit>> matchingLimits TimeUnit largestUnit int datastoreWarnLimit) throws IOException { UserRateLimit patchResult=(UserRateLimit)datastore.patch(user new UserRateLimit.Pa
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,NextAvailableResponse,public  (Pair<ConfiguredRatelimit CachedRateLimit> limitPair){ this.limitPair=limitPair; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,getCurrentLimitAmount,public int  (){ return limitPair.getValue().amount(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,getLimitPair,public Pair<ConfiguredRatelimit CachedRateLimit>  (){ return limitPair; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,getResetTime,public Date  (){ return new Date(limitPair.getValue().getNextExpirationTime()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,hasRequestsRemaining,public boolean  (){ return (limitPair == null) || (limitPair.getValue().maxAmount() - limitPair.getValue().amount() >= 0); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponse.java,toString,"@Override public String  (){ return ""NextAvailableResponse{"" + ""hasRequests="" + hasRequestsRemaining() + ""  resetTime=""+ getResetTime().getTime()+ ""  currentLimitAmount=""+ getCurrentLimitAmount()+ '}'; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\util\ObjectSerializer.java,instance,public static ObjectSerializer  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\util\ObjectSerializer.java,writeObject,public byte[]  (Serializable o) throws IOException { final ByteArrayOutputStream baos=new ByteArrayOutputStream(); final ObjectOutputStream oos=new ObjectOutputStream(baos); oos.writeObject(o); return baos.toByteArray(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\util\TimeUnitConverter.java,fromSchemaTypeToConcurrent,"public static TimeUnit  (org.openrepose.core.services.ratelimit.config.TimeUnit unit){ switch (unit) { case SECOND: return TimeUnit.SECONDS; case MINUTE: return TimeUnit.MINUTES; case HOUR: return TimeUnit.HOURS; case DAY: return TimeUnit.DAYS; default : throw new IllegalArgumentException(""Time unit: "" + unit.toString() + "" is not supported""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,Patch,public  (List<Pair<String ConfiguredRatelimit>> patchMap){ this.limitMap=new ArrayList<>(patchMap); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,UserRateLimit,private  (Map<String CachedRateLimit> limitMap Pair<ConfiguredRatelimit CachedRateLimit> lowestLimit){ this.limitMap=new ConcurrentHashMap<>(limitMap); this.leastRemainingLimit=lowestLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,adjustLimit,private CachedRateLimit  (Pair<String ConfiguredRatelimit> limitEntry){ CachedRateLimit returnRateLimit; while (true) { CachedRateLimit newRateLimit=new CachedRateLimit(limitEntry.getValue() 1); CachedRateLimit oldRateLimit=limitMap.putIfAbsent(limitEntry.getKey() newRateLimit); if (oldRateLimit == null) { return newRateLimit; } if ((System.currentTimeMillis() - oldRateLimit.timestamp()) > oldRateLimit.unit()) { returnRateLimit=newRateLimit; } else { returnRateLimit=new CachedRateLimit(limitEntry.getValue() oldRateLimit.amount() + 1 oldRateLimit.timestamp()); } if (limitMap.replace(limitEntry.getKey() oldRateLimit returnRateLimit)) { return returnRateLimit; } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,applyPatch,@Override public UserRateLimit  (Patch patch){ HashMap<String CachedRateLimit> returnLimits=new HashMap<>(); Pair<ConfiguredRatelimit CachedRateLimit> lowestLimit=null; for ( Pair<String ConfiguredRatelimit> limitEntry : patch.getLimitMap()) { CachedRateL
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,getLimitMap,public List<Pair<String ConfiguredRatelimit>>  (){ return limitMap; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,getLowestLimit,public Pair<ConfiguredRatelimit CachedRateLimit>  (){ return leastRemainingLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\UserRateLimit.java,newFromPatch,@Override public UserRateLimit  (){ UserRateLimit newUserLimit=new UserRateLimit(); return newUserLimit.applyPatch(this); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,RateLimitingConfigHelper,public  (RateLimitingConfiguration rateLimitingConfiguration){ this.globalLimitGroup=processGlobalLimits(rateLimitingConfiguration.getGlobalLimitGroup()); this.configuredLimitGroups=processConfiguration(rateLimitingConfiguration); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,deepCopyLimitGroup,private ConfiguredLimitGroup  (ConfiguredLimitGroup originalGroup){ final ConfiguredLimitGroup newGroup=new ConfiguredLimitGroup(); newGroup.setDefault(originalGroup.isDefault()); newGroup.setId(originalGroup.getId()); final List<String> newRoleList=new ArrayList<>(originalGroup.getGroups()); Collections.copy(newRoleList originalGroup.getGroups()); newGroup.getGroups().addAll(newRoleList); final List<ConfiguredRatelimit> newLimits=new ArrayList<>(originalGroup.getLimit()); Collections.copy(newLimits originalGroup.getLimit()); newGroup.getLimit().addAll(newLimits); return newGroup; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,getConfiguredGroupByRole,public ConfiguredLimitGroup  (List<String> groups){ ConfiguredLimitGroup defaultLimitGroup=new ConfiguredLimitGroup(); for ( ConfiguredLimitGroup configuredLimitGroup : configuredLimitGroups) { if (configuredLimitGroup.isDefault()) { defaultLimitGroup=configuredLimitGroup; } for ( String group : groups) { if (configuredLimitGroup.getGroups().contains(group)) { return configuredLimitGroup; } } } return defaultLimitGroup; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,getGlobalLimitGroup,public GlobalLimitGroup  (){ return globalLimitGroup; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,processConfiguration,"private List<ConfiguredLimitGroup>  (RateLimitingConfiguration configurationObject){ boolean defaultSet=false; final List<ConfiguredLimitGroup> newLimitGroups=new ArrayList<>(); for ( ConfiguredLimitGroup limitGroup : configurationObject.getLimitGroup()) { if (limitGroup.isDefault()) { if (defaultSet) { limitGroup.setDefault(false); LOG.warn(""Rate-limiting Configuration has more than one default group set. Limit Group '"" + limitGroup.getId() + ""' will not be set as a default limit group. Please update your configuration file.""); } else { defaultSet=true; } } final ConfiguredLimitGroup newLimitGroup=deepCopyLimitGroup(limitGroup); newLimitGroup.getLimit().clear(); for ( ConfiguredRatelimit configuredRatelimit : limitGroup.getLimit()) { final ConfiguredRatelimit newLimit=new ConfiguredRateLimitWrapper(configuredRatelimit); newLimitGroup.getLimit().add(newLimit); } newLimitGroups.add(newLimitGroup); } if (!defaultSet && configurationObject.getGlobalLimitGroup() == null) { LOG.warn(""None of the specified rate limit groups have the default parameter set  and a global limit group has not been defined."" + "" Running without a default or global rate limiting group is dangerous! Please update your config.""); } return newLimitGroups; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\RateLimitingConfigHelper.java,processGlobalLimits,private GlobalLimitGroup  (GlobalLimitGroup oldGlobalLimitGroup){ GlobalLimitGroup newGlobalLimitGroup=new GlobalLimitGroup(); if (oldGlobalLimitGroup != null) { for ( ConfiguredRatelimit configuredRatelimit : oldGlobalLimitGroup.getLimit()) { ConfiguredRatelimit newLimit=new ConfiguredRateLimitWrapper(configuredRatelimit); newGlobalLimitGroup.getLimit().add(newLimit); } } return newGlobalLimitGroup; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,ConfiguredRateLimitWrapper,public  (ConfiguredRatelimit configuredRateLimit){ this.configuredRateLimit=configuredRateLimit; this.regexPattern=Pattern.compile(configuredRateLimit.getUriRegex()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ConfiguredRateLimitWrapper that=(ConfiguredRateLimitWrapper)o; if (configuredRateLimit != null ? !configuredRateLimit.equa
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,getHttpMethods,@Override public List<HttpMethod>  (){ return configuredRateLimit.getHttpMethods(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,getId,@Override public String  (){ return configuredRateLimit.getId(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,getQueryParamNames,@Override public List<String>  (){ return configuredRateLimit.getQueryParamNames(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,getRegexPattern,public Pattern  (){ return regexPattern; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,getUnit,@Override public TimeUnit  (){ return configuredRateLimit.getUnit(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,getUri,@Override public String  (){ return configuredRateLimit.getUri(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,getUriRegex,@Override public String  (){ return configuredRateLimit.getUriRegex(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,getValue,@Override public int  (){ return configuredRateLimit.getValue(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,hashCode,@Override public int  (){ int result=configuredRateLimit != null ? configuredRateLimit.hashCode() : ZERO; result=PRIME * result + (regexPattern != null ? regexPattern.hashCode() : ZERO); return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,setId,@Override public void  (String value){ configuredRateLimit.setId(value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,setUnit,@Override public void  (TimeUnit value){ configuredRateLimit.setUnit(value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,setUri,@Override public void  (String value){ configuredRateLimit.setUri(value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,setUriRegex,@Override public void  (String value){ configuredRateLimit.setUriRegex(value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,setValue,@Override public void  (int value){ configuredRateLimit.setValue(value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\config\ConfiguredRateLimitWrapper.java,toString,@Override public String  (){ return configuredRateLimit.toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,OverLimitException,public  (String msg String user Date nextAvailableTime int currentLimitAmount String configuredLimit){ super(msg); this.user=user; this.nextAvailableTime=(Date)nextAvailableTime.clone(); this.currentLimitAmount=currentLimitAmount; this.configuredLimit=configuredLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,getConfiguredLimit,public String  (){ return configuredLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,getCurrentLimitAmount,public int  (){ return currentLimitAmount; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,getNextAvailableTime,public Date  (){ return (Date)nextAvailableTime.clone(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\OverLimitException.java,getUser,public String  (){ return user; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\exception\CacheException.java,CacheException,public  (String message Throwable t){ super(message t); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\LimitKey.java,getLimitKey,"public static String  (String limitGroup String limitId Matcher uriMatcher boolean useCaptureGroups){ final int groupCount=uriMatcher.groupCount(); final StringBuilder cacheIdBuffer=new StringBuilder(); cacheIdBuffer.append(String.valueOf(limitGroup.hashCode())); cacheIdBuffer.append("":"").append(String.valueOf(limitId.hashCode())); if (useCaptureGroups) { for (int i=1; i <= groupCount; ++i) { cacheIdBuffer.append("":"").append(String.valueOf(uriMatcher.group(i).hashCode())); } } return cacheIdBuffer.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,OverLimitData,public  (OverLimitException exception int dataStoreWarnLimit HttpServletRequest request int responseCode){ this.user=exception.getUser(); this.nextAvailableTime=exception.getNextAvailableTime(); this.currentLimitAmount=exception.getCurrentLimitAmount(); this.configuredLimit=exception.getConfiguredLimit(); this.groups=request.getHeader(PowerApiHeader.GROUPS); this.request=request; this.responseCode=responseCode; this.dataStoreWarnLimit=dataStoreWarnLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,getConfiguredLimit,public String  (){ return configuredLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,getCurrentLimitAmount,public int  (){ return currentLimitAmount; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,getDataStoreWarnLimit,public int  (){ return dataStoreWarnLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,getGroups,public String  (){ return groups; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,getNextAvailableTime,public Date  (){ return nextAvailableTime; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,getRequest,public HttpServletRequest  (){ return request; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,getResponseCode,public int  (){ return responseCode; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\OverLimitData.java,getUser,public String  (){ return user; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimiter.java,RateLimiter,public  (RateLimitCache cache){ this.cache=cache; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimiter.java,handleRateLimit,"public void  (String user List<Pair<String ConfiguredRatelimit>> matchingLimits TimeUnit largestUnit int datastoreWarnLimit) throws OverLimitException { try { NextAvailableResponse nextAvailable=cache.updateLimit(user matchingLimits largestUnit datastoreWarnLimit); if (nextAvailable != null && !nextAvailable.hasRequestsRemaining()) { throw new OverLimitException(""User rate limited!"" user nextAvailable.getResetTime() nextAvailable.getCurrentLimitAmount() nextAvailable.getLimitPair().getLeft().toString()); } } catch ( IOException ioe) { LOG.error(""IOException caught during cache commit for rate limit user: "" + user + "" Reason: ""+ ioe.getMessage() ioe); throw new CacheException(""IOException caught during cache commit for rate limit."" ioe); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,RateLimitingServiceImpl,"public  (RateLimitCache cache RateLimitingConfiguration rateLimitingConfiguration){ if (rateLimitingConfiguration == null) { throw new IllegalArgumentException(""Rate limiting configuration must not be null.""); } this.cache=cache; this.rateLimiter=new RateLimiter(cache); this.helper=new RateLimitingConfigHelper(rateLimitingConfiguration); this.globalLimitGroup=helper.getGlobalLimitGroup(); useCaptureGroups=rateLimitingConfiguration.isUseCaptureGroups(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,decodeQueryString,"private String  (String queryString){ String processedQueryString=queryString; try { processedQueryString=URLDecoder.decode(processedQueryString ""UTF-8""); } catch ( UnsupportedEncodingException uee) { LOG.error(""RateLimitingService.decodeQueryString - Unsupported Encoding"" uee); } return processedQueryString; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,httpMethodMatches,private boolean  (List<HttpMethod> configMethods String requestMethod){ return configMethods.isEmpty() || configMethods.contains(HttpMethod.ALL) || configMethods.contains(HttpMethod.valueOf(requestMethod.toUpperCase())); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,queryLimits,"@Override public RateLimitList  (String user List<String> groups){ if (StringUtils.isBlank(user)) { throw new IllegalArgumentException(""User required when querying rate limits.""); } final Map<String CachedRateLimit> cachedLimits=cache.getUserRateLimits(us"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,queryParameterNameMatches,private boolean  (List<String> configuredQueryParams Map<String String[]> requestParameterMap){ for ( String configuredParamKey : configuredQueryParams) { boolean matchFound=false; for ( String requestParamKey : requestParameterMap.keySet()) { if (decodeQueryString(configuredParamKey).equalsIgnoreCase(decodeQueryString(requestParamKey))) { matchFound=true; break; } } if (!matchFound) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceImpl.java,trackLimits,"@Override public void  (String user List<String> groups String uri Map<String String[]> parameterMap String httpMethod int datastoreWarnLimit) throws OverLimitException { if (StringUtils.isBlank(user)) { throw new IllegalArgumentException(""User required w"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitingServiceFactory.java,createRateLimitingService,public static RateLimitingService  (RateLimitCache cache RateLimitingConfiguration rateLimitingConfiguration){ return new RateLimitingServiceImpl(cache rateLimitingConfiguration); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,CachedRateLimit,public  (ConfiguredRatelimit cfg int count long timestamp){ this.maxCount=cfg.getValue(); this.unit=TimeUnitConverter.fromSchemaTypeToConcurrent(cfg.getUnit()).toMillis(1); this.configId=cfg.getId(); this.count=count; this.timestamp=timestamp; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,amount,public int  (){ vacuum(); return count; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,getConfigId,public String  (){ return configId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,getNextExpirationTime,public long  (){ vacuum(); return timestamp + unit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,getSoonestRequestTime,public long  (){ vacuum(); if (count < maxCount) { return System.currentTimeMillis(); } else { return timestamp + unit; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,logHit,public void  (){ vacuum(); ++count; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,maxAmount,public int  (){ return maxCount; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,timestamp,public long  (){ vacuum(); return timestamp; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,unit,public long  (){ return unit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimit.java,vacuum,private void  (){ final long now=System.currentTimeMillis(); if (now > timestamp + unit) { count=0; timestamp=now; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,RateLimitListBuilder,public  (Map<String CachedRateLimit> cachedRateLimits List<ConfiguredLimitGroup> configuredLimitGroups){ this.cachedRateLimits=cachedRateLimits; this.configuredLimitGroups=configuredLimitGroups; liveRateLimitMap=new HashMap<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,asList,private static List<ConfiguredLimitGroup>  (ConfiguredLimitGroup group){ final List<ConfiguredLimitGroup> list=new LinkedList<>(); list.add(group); return list; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,getCachedRateLimitFromSet,private CachedRateLimit  (ConfiguredRatelimit configuredRatelimit Collection<CachedRateLimit> limitSet){ for ( CachedRateLimit cachedRateLimit : limitSet) { if (cachedRateLimit.getConfigId().equals(configuredRatelimit.getId())) { return cachedRateLimit; } } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,processLiveRateLimits,private void  (ConfiguredRatelimit configuredRateLimit Calendar cal CachedRateLimit cachedLimit){ List<HttpMethod> httpMethods=configuredRateLimit.getHttpMethods(); if (httpMethods.isEmpty()) { httpMethods=Collections.singletonList(HttpMethod.ALL); } for ( HttpMethod method : httpMethods) { final RateLimit limit=new RateLimit(); limit.setValue(configuredRateLimit.getValue()); limit.setUnit(configuredRateLimit.getUnit()); limit.setVerb(method); long earliestExpirationDate=System.currentTimeMillis(); int remainingRequests=configuredRateLimit.getValue(); if (cachedLimit != null) { earliestExpirationDate=cachedLimit.getNextExpirationTime(); remainingRequests=cachedLimit.maxAmount() - cachedLimit.amount(); } cal.setTimeInMillis(earliestExpirationDate); limit.setRemaining(remainingRequests); limit.setNextAvailable(DATATYPE_FACTORY.newXMLGregorianCalendar((GregorianCalendar)cal)); final String configId=configuredRateLimit.getId(); ResourceRateLimits rateLimits=liveRateLimitMap.get(configId); if (rateLimits == null) { rateLimits=new ResourceRateLimits(); rateLimits.setRegex(configuredRateLimit.getUriRegex()); rateLimits.setUri(configuredRateLimit.getUri()); liveRateLimitMap.put(configId rateLimits); } rateLimits.getLimit().add(limit); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\RateLimitListBuilder.java,toRateLimitList,"public RateLimitList  (){ if (DATATYPE_FACTORY == null) { throw new IllegalStateException(""DatatypeFactory for producing limits responses is not set. This is a runtime error.""); } final RateLimitList rateLimitList=new RateLimitList(); final Calendar cal=GregorianCalendar.getInstance(); cal.setTimeZone(TimeZone.getTimeZone(""GMT"")); for ( ConfiguredLimitGroup configuredLimitGroup : configuredLimitGroups) { for ( ConfiguredRatelimit configuredRateLimit : configuredLimitGroup.getLimit()) { final CachedRateLimit cachedLimit=getCachedRateLimitFromSet(configuredRateLimit cachedRateLimits.values()); processLiveRateLimits(configuredRateLimit cal cachedLimit); } } for ( ResourceRateLimits resourceScopedLimits : liveRateLimitMap.values()) { rateLimitList.getRate().add(resourceScopedLimits); } return rateLimitList; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\utils\StringUtilities.java,isBlank,public static boolean  (String st){ return isEmpty(st) || IS_BLANK_PATTERN.matcher(st).matches(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\main\java\org\openrepose\core\services\ratelimit\utils\StringUtilities.java,isEmpty,public static boolean  (String st){ return st == null || st.length() == 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,amount_get,@Test public void  (){ final CachedRateLimit limit=new CachedRateLimit(cfg); assertThat(limit.amount() equalTo(0)); limit.logHit(); assertThat(limit.amount() equalTo(1)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,getConfigLimitKey_shouldCreateCorrectCLKey,@Test public void  (){ final CachedRateLimit limit=new CachedRateLimit(cfg); assertThat(limit.getConfigId() equalTo(cfg.getId())); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,maxAmount_get,@Test public void  (){ final CachedRateLimit limit=new CachedRateLimit(cfg); assertThat(limit.maxAmount() equalTo(6)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,setup,"@Before public void  (){ final LinkedList<HttpMethod> methods=new LinkedList<HttpMethod>(); methods.add(HttpMethod.GET); methods.add(HttpMethod.POST); cfg=mock(ConfiguredRatelimit.class); when(cfg.getId()).thenReturn(""12345-ABCDE""); when(cfg.getUriRegex()"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,shouldGiveAccurateExpirationDates,@Test public void  (){ final CachedRateLimit limit=new CachedRateLimit(cfg); limit.logHit(); limit.logHit(); long currentTime=System.currentTimeMillis(); final long soonestRequest=limit.getSoonestRequestTime(); final long nextExpiration=limit.getNextExpir
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,shouldLogHits,@Test public void  (){ final CachedRateLimit limit=new CachedRateLimit(cfg); limit.logHit(); limit.logHit(); limit.logHit(); assertThat(limit.amount() equalTo(3)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,shouldMaintainHitsThatHaveNotExpired,@Test public void  (){ when(cfg.getValue()).thenReturn(3); when(cfg.getUnit()).thenReturn(TimeUnit.SECOND); final CachedRateLimit limit=new CachedRateLimit(cfg); limit.logHit(); try { Thread.sleep(2000); } catch ( InterruptedException ie) { } limit.logHit
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,shouldVacuumExpiredHits,@Test public void  (){ when(cfg.getValue()).thenReturn(3); when(cfg.getUnit()).thenReturn(TimeUnit.SECOND); final CachedRateLimit limit=new CachedRateLimit(cfg); limit.logHit(); try { Thread.sleep(2000); } catch ( InterruptedException ie) { } assertThat(l
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,timestamp_get,@Test public void  (){ long before=System.currentTimeMillis(); final CachedRateLimit limit=new CachedRateLimit(cfg); long after=System.currentTimeMillis(); assertThat(limit.timestamp() greaterThanOrEqualTo(before)); assertThat(limit.timestamp() lessThanOr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\CachedRateLimitTest.java,unit_get,@Test public void  (){ final CachedRateLimit limit=new CachedRateLimit(cfg); assertThat(limit.unit() equalTo(java.util.concurrent.TimeUnit.MINUTES.toMillis(1))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,describeTo,"@Override public void  (Description description){ description.appendText(""Response with success: "" + hasRequests + "" reset time greater than: ""+ resetTime+ ""and less than: ""+ (resetTime + 120000)+ "" current limit amount: ""+ currentLimitAmount); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,getUserRateLimits_shouldReturnCachedKeySets,"@Test public void  () throws Exception { HashMap<String CachedRateLimit> limitMap=new HashMap<>(); limitMap.put(""12345"" new CachedRateLimit(defaultConfig)); when(datastore.get(ACCOUNT)).thenReturn(new UserRateLimit(limitMap)); assertThat(""Should return a "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,getUserRateLimits_shouldReturnEmptySetsWhenNoLimitKeysExist,"@Test public void  (){ assertThat(""Should have an empty map when no limits have been registered for an account"" rateLimitCache.getUserRateLimits(""key"").entrySet() empty()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,hasValues,"private Matcher<NextAvailableResponse>  (final boolean hasRequests final long resetTime final int currentLimitAmount){ return new TypeSafeMatcher<NextAvailableResponse>(){ @Override protected boolean matchesSafely( NextAvailableResponse item){ return (item.hasRequestsRemaining() == hasRequests) && (item.getResetTime().getTime() > resetTime) && (item.getResetTime().getTime() < (resetTime + 120000))&& (item.getCurrentLimitAmount() == currentLimitAmount); } @Override public void describeTo( Description description){ description.appendText(""Response with success: "" + hasRequests + "" reset time greater than: ""+ resetTime+ ""and less than: ""+ (resetTime + 120000)+ "" current limit amount: ""+ currentLimitAmount); } } ; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,matchesSafely,@Override protected boolean  (NextAvailableResponse item){ return (item.hasRequestsRemaining() == hasRequests) && (item.getResetTime().getTime() > resetTime) && (item.getResetTime().getTime() < (resetTime + 120000))&& (item.getCurrentLimitAmount() == curr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,setUp,"@Before public void  () throws Exception { datastore=mock(Datastore.class); rateLimitCache=new ManagedRateLimitCache(datastore); defaultConfig.setUri("".*""); defaultConfig.setUriRegex("".*""); defaultConfig.setValue(2); defaultConfig.setUnit(org.openrepose.c"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,updateLimit_shouldSendPatchToDatastore,"@Test public void  () throws Exception { HashMap<String CachedRateLimit> limitMap=new HashMap<>(); limitMap.put(""testKey"" new CachedRateLimit(defaultConfig)); when(datastore.patch(any(String.class) any(UserRateLimit.Patch.class) anyInt() any(TimeUnit.clas"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\ManagedRateLimitCacheTest.java,updateLimit_usesReturnedValues_toPopulateResultObject,"@Test public void  () throws Exception { long now=System.currentTimeMillis(); CachedRateLimit cachedRateLimit=new CachedRateLimit(defaultConfig); cachedRateLimit.logHit(); HashMap<String CachedRateLimit> limitMap=new HashMap<>(); limitMap.put(""testKey"" ca"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,setUp,@Before public void  () throws Exception { ConfiguredRatelimit configLimit=mock(ConfiguredRatelimit.class); CachedRateLimit cachedLimit=mock(CachedRateLimit.class); expirationTime=new Date(System.currentTimeMillis() + TimeUnit.DAYS.toMillis(1)).getTime();
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,testGetCurrentLimitAmount,@Test public void  () throws Exception { assertThat(nextAvailableResponse.getCurrentLimitAmount() equalTo(5)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,testGetLimitPair,@Test public void  () throws Exception { assertThat(nextAvailableResponse.getLimitPair() equalTo(limitPair)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,testGetResetTime,@Test public void  () throws Exception { assertThat(nextAvailableResponse.getResetTime().getTime() equalTo(expirationTime)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\cache\NextAvailableResponseTest.java,testHasRequestsRemaining,@Test public void  () throws Exception { assertTrue(nextAvailableResponse.hasRequestsRemaining()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,setUp,@Before public void  (){ instance=new OverLimitException(message user date limit configuredLimit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,shouldReturnCloneOfDate,@Test public void  (){ instance.getNextAvailableTime().setTime(100); assertEquals(date instance.getNextAvailableTime()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,shouldStoreMessage,@Test public void  (){ assertEquals(message instance.getMessage()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,shouldStoreNextDate,@Test public void  (){ assertEquals(date instance.getNextAvailableTime()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\exception\OverLimitExceptionTest.java,shouldStoreUser,@Test public void  (){ assertEquals(user instance.getUser()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,defaultRateLimitingConfiguration,"public static RateLimitingConfiguration  (){ final RateLimitingConfiguration newCfg=new RateLimitingConfiguration(); final RequestEndpoint endpoint=new RequestEndpoint(); endpoint.setIncludeAbsoluteLimits(Boolean.TRUE); endpoint.setUriRegex(""/v1.0/limits/?""); newCfg.setRequestEndpoint(endpoint); newCfg.getLimitGroup().add(newConfiguredLimitGroup(DEFAULT_USER_ROLE DEFAULT_URI DEFAULT_URI_REGEX DEFAULT_LIMIT_GROUP_ID)); newCfg.getLimitGroup().add(newMultiMethodConfiguredLimitGroup(DEFAULT_USER_ROLE MULTI_METHOD_URI MULTI_METHOD_URI_REGEX MULTI_METHOD_LIMIT_GROUP_ID)); newCfg.setGlobalLimitGroup(newGlobalLimitGroup()); return newCfg; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,newConfiguredLimitGroup,"public static ConfiguredLimitGroup  (String userRole String rateLimitUri String uriRegex String limitGroupId){ final int VALUE=3; final ConfiguredLimitGroup limitGroup=new ConfiguredLimitGroup(); limitGroup.setDefault(Boolean.TRUE); limitGroup.setId(limitGroupId); limitGroup.getGroups().add(userRole); limitGroup.getLimit().add(newConfiguredRateLimit(""one"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.GET); } }  rateLimitUri uriRegex VALUE)); limitGroup.getLimit().add(newConfiguredRateLimit(""two"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.PUT); } }  rateLimitUri uriRegex VALUE)); limitGroup.getLimit().add(newConfiguredRateLimit(""three"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.POST); } }  rateLimitUri uriRegex VALUE)); limitGroup.getLimit().add(newConfiguredRateLimit(""four"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.DELETE); } }  rateLimitUri uriRegex VALUE)); return limitGroup; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,newConfiguredRateLimit,public static ConfiguredRatelimit  (String id TimeUnit unit List<HttpMethod> methods String rateLimitUri String uriRegex int value){ final ConfiguredRatelimit rateLimit=new ConfiguredRatelimit(); rateLimit.setId(id); rateLimit.setUnit(unit); rateLimit.setUri(rateLimitUri); rateLimit.setUriRegex(uriRegex); rateLimit.setValue(value); for ( HttpMethod method : methods) { rateLimit.getHttpMethods().add(method); } return rateLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,newGlobalLimitGroup,"public static GlobalLimitGroup  (){ final GlobalLimitGroup globalLimitGroup=new GlobalLimitGroup(); globalLimitGroup.getLimit().add(new ConfiguredRateLimitWrapper(newConfiguredRateLimit(""catch-all"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.ALL); } }  ""*"" "".*"" 1))); return globalLimitGroup; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,newMultiMethodConfiguredLimitGroup,"public static ConfiguredLimitGroup  (String userRole String rateLimitUri String uriRegex String limitGroupId){ final int VALUE=3; final ConfiguredLimitGroup limitGroup=new ConfiguredLimitGroup(); limitGroup.setDefault(Boolean.TRUE); limitGroup.setId(limitGroupId); limitGroup.getGroups().add(userRole); limitGroup.getLimit().add(newConfiguredRateLimit(""five"" TimeUnit.MINUTE new ArrayList<HttpMethod>(){ { add(HttpMethod.GET); add(HttpMethod.PUT); add(HttpMethod.POST); add(HttpMethod.DELETE); } }  rateLimitUri uriRegex VALUE)); return limitGroup; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingTestSupport.java,newRegexCache,public static Map<String Map<String Pattern>>  (List<ConfiguredLimitGroup> clgList){ final Map<String Map<String Pattern>> regexCache=new HashMap<>(); for ( ConfiguredLimitGroup clg : clgList) { final Map<String Pattern> limitGroupRegexCache=new HashMap<>(); for ( ConfiguredRatelimit crl : clg.getLimit()) { limitGroupRegexCache.put(crl.getUri() Pattern.compile(crl.getUriRegex())); } regexCache.put(clg.getId() limitGroupRegexCache); } return regexCache; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimiterTest.java,setup,"@Before public void  (){ uriMatcher.matches(); key=LimitKey.getLimitKey(""unique-group"" configuredRateLimit.getId() uriMatcher true); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimiterTest.java,shouldThrowCacheException,@Test(expected=CacheException.class) public void  () throws OverLimitException  IOException { final RateLimiter rateLimiter=new RateLimiter(mockedCache); when(mockedCache.updateLimit(any(String.class) any(List.class) any(TimeUnit.class) anyInt())).thenThr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimiterTest.java,shouldThrowOverLimitException,@Test(expected=OverLimitException.class) public void  () throws IOException  OverLimitException { final RateLimiter rateLimiter=new RateLimiter(mockedCache); when(mockedCache.updateLimit(any(String.class) any(List.class) any(TimeUnit.class) anyInt())).the
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimiterTest.java,shouldUpdateLimitWithoutExceptions,@Test public void  () throws IOException  OverLimitException { final RateLimiter rateLimiter=new RateLimiter(mockedCache); when(mockedCache.updateLimit(any(String.class) any(List.class) any(TimeUnit.class) anyInt())).thenReturn(new NextAvailableResponse(P
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitListBuilderTest.java,shouldConstructLiveLimits,@Test public void  (){ final RateLimitList rll=new RateLimitListBuilder(cacheMap configuredLimitGroup).toRateLimitList(); final Limits limits=new Limits(); limits.setRates(rll); assertEquals(4 rll.getRate().size()); for ( ResourceRateLimits resourceRateLi
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitListBuilderTest.java,standUp,@Before public void  (){ LinkedList<HttpMethod> methods=new LinkedList<HttpMethod>(); methods.add(HttpMethod.GET); methods.add(HttpMethod.PUT); methods.add(HttpMethod.POST); methods.add(HttpMethod.DELETE); cacheMap=new HashMap<>(); configuredLimitGroup=ne
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingConfigHelperTest.java,getGlobalLimitGroup,@Test public void  (){ assertThat(helper.getGlobalLimitGroup().getLimit().size() equalTo(1)); assertThat(helper.getGlobalLimitGroup().getLimit().get(0) instanceOf(ConfiguredRateLimitWrapper.class)); assertThat(helper.getGlobalLimitGroup().getLimit().get(0
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingConfigHelperTest.java,setupSpec,@Before public void  (){ this.config=RateLimitingTestSupport.defaultRateLimitingConfiguration(); this.helper=new RateLimitingConfigHelper(config); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitingConfigHelperTest.java,shouldGetGroupByRole,"@Test public void  (){ List<String> roles=new ArrayList<>(); roles.add(""group""); roles.add(""anotha""); ConfiguredLimitGroup group=helper.getConfiguredGroupByRole(roles); assertEquals(group.getId() config.getLimitGroup().get(0).getId()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\components\services\rate-limiting-service\src\test\java\org\openrepose\core\services\ratelimit\RateLimitServiceTestContext.java,newLimitConfig,protected ConfiguredRatelimit  (String limitId String uri String uriRegex List<HttpMethod> methods List<String> queryNames){ final ConfiguredRatelimit configuredRateLimit=new ConfiguredRatelimit(); configuredRateLimit.setId(limitId); configuredRateLimit.setUnit(TimeUnit.HOUR); configuredRateLimit.setUri(uri); configuredRateLimit.setUriRegex(uriRegex); configuredRateLimit.setValue(20); for ( String qn : queryNames) { configuredRateLimit.getQueryParamNames().add(qn); } for ( HttpMethod m : methods) { configuredRateLimit.getHttpMethods().add(m); } return configuredRateLimit; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,Port,public  (String protocol int number){ this.protocol=protocol; this.number=number; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,equals,@Override public boolean  (Object other){ if (!(other instanceof Port)) { return false; } Port p=(Port)other; if (protocol != null) { return number == p.getNumber() && protocol.equalsIgnoreCase(p.getProtocol()); } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,getNumber,public int  (){ return number; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,getProtocol,public String  (){ return protocol; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\domain\Port.java,hashCode,@Override public int  (){ int hash=BASE_HASH; hash=PRIME * hash + (this.protocol != null ? this.protocol.hashCode() : 0); hash=PRIME * hash + this.number; return hash; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\commons\utils\classloader\EarDescriptor.java,EarDescriptor,public  (String applicationName Map<String FilterType> registeredFilters){ this.applicationName=applicationName; this.registeredFilters=registeredFilters; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\commons\utils\classloader\EarDescriptor.java,getApplicationName,public String  (){ return applicationName; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\commons\utils\classloader\EarDescriptor.java,getRegisteredFilters,public Map<String FilterType>  (){ return Collections.unmodifiableMap(registeredFilters); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\logic\DispatchPathBuilder.java,DispatchPathBuilder,public  (String request String context){ this.requestPath=request; this.context=context; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\logic\DispatchPathBuilder.java,build,public String  (){ String dispatchPath=requestPath; if (dispatchPath.startsWith(context)) { dispatchPath=dispatchPath.substring(context.length()); } return dispatchPath; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocation.java,DestinationLocation,public  (URL url URI uri){ this.url=url; this.uri=uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocation.java,getUri,public URI  (){ return uri; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocation.java,getUrl,public URL  (){ return url; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,DestinationLocationBuilder,public  (RoutingService routingService Node localhost){ this.routingService=routingService; this.localhost=localhost; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,build,"public DestinationLocation  (Destination destination String uri HttpServletRequest request) throws MalformedURLException  URISyntaxException { if (destination == null) { throw new IllegalArgumentException(""destination cannot be null""); } if (destination instanceof DestinationEndpoint) { return buildEndpointLocation(destination uri request); } else if (destination instanceof DestinationCluster) { return buildDomainLocation(destination uri request); } else { throw new IllegalArgumentException(""Unknown destination type: "" + destination.getClass().getName()); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,buildDomainLocation,"private DestinationLocation  (Destination destination String uri HttpServletRequest request) throws MalformedURLException  URISyntaxException { if (!(destination instanceof DestinationCluster)) { throw new IllegalArgumentException(""Destination must be of type DestinationCluster""); } DestinationCluster domain=(DestinationCluster)destination; Node node=routingService.getRoutableNode(domain.getCluster().getId()); if (node == null) { LOG.warn(""No routable node for domain: "" + domain.getId()); return null; } int port=HTTPS_PROTOCOL.equalsIgnoreCase(domain.getProtocol()) ? node.getHttpsPort() : node.getHttpPort(); return new DestinationLocation(new URL(domain.getProtocol() node.getHostname() port domain.getRootPath() + uri) new URI(domain.getProtocol() null node.getHostname() port domain.getRootPath() + uri request.getQueryString() null)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,buildEndpointLocation,private DestinationLocation  (Destination destination String uri HttpServletRequest request) throws MalformedURLException  URISyntaxException { List<Port> localPorts=localPortList(); return new DestinationLocation(new EndpointUrlBuilder(localhost localPorts destination uri request).build() new EndpointUriBuilder(localPorts destination uri request).build()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\DestinationLocationBuilder.java,localPortList,"private List<Port>  (){ LinkedList<Port> list=new LinkedList<>(); if (localhost.getHttpPort() > 0) { list.add(new Port(""http"" localhost.getHttpPort())); } if (localhost.getHttpsPort() > 0) { list.add(new Port(""https"" localhost.getHttpsPort())); } return list; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUriBuilder.java,EndpointUriBuilder, (List<Port> localPorts Destination destination String uri HttpServletRequest request){ this.uri=uri; this.localPorts=localPorts; this.request=request; endpoint=(DestinationEndpoint)destination; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUriBuilder.java,build,public URI  () throws URISyntaxException { String scheme=determineScheme(); String hostname=determineHostname(scheme); String rootPath=endpoint.getRootPath(); String path=StringUriUtilities.concatUris(rootPath uri); int port=scheme == null || hostname == null ? -1 : endpoint.getPort(); return new URI(hostname != null ? scheme : null null hostname port path request.getQueryString() null); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUriBuilder.java,determineHostname,"private String  (String scheme){ if (StringUtils.isBlank(scheme)) { return null; } Port port=new Port(scheme endpoint.getPort()); if (localPorts.contains(port) && (endpoint.getHostname() == null || ""localhost"".equalsIgnoreCase(endpoint.getHostname()))) { return null; } return endpoint.getHostname(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUriBuilder.java,determineScheme,private String  (){ String scheme=endpoint.getProtocol(); if (StringUtils.isBlank(scheme) || endpoint.getPort() <= 0) { return null; } return scheme; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,EndpointUrlBuilder, (Node localhost List<Port> localPorts Destination destination String uri HttpServletRequest request){ this.localhost=localhost; this.uri=uri; this.localPorts=localPorts; this.request=request; endpoint=(DestinationEndpoint)destination; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,build,public URL  () throws MalformedURLException { Port port=determineUrlPort(); String hostname=determineHostname(); String rootPath=endpoint.getRootPath(); String path=StringUriUtilities.concatUris(rootPath uri); return new URL(port.getProtocol() hostname port.getNumber() path); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,determineHostname,private String  (){ String hostname=endpoint.getHostname(); if (StringUtils.isBlank(hostname)) { hostname=localhost.getHostname(); } return hostname; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,determineUrlPort,"private Port  () throws MalformedURLException { if (!StringUtils.isBlank(endpoint.getProtocol())) { int port=endpoint.getPort() <= 0 ? localPortForProtocol(endpoint.getProtocol()) : endpoint.getPort(); return new Port(endpoint.getProtocol() port); } Port port=new Port(request.getScheme() request.getLocalPort()); if (localPorts.contains(port)) { return port; } throw new MalformedURLException(""Cannot determine destination port.""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\filter\routing\EndpointUrlBuilder.java,localPortForProtocol,private int  (String protocol){ for ( Port port : localPorts) { if (port.getProtocol().equalsIgnoreCase(protocol)) { return port.getNumber(); } } return 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\common\AbstractRequestProcessor.java,excludeHeader,protected boolean  (String header){ return EXCLUDE_HEADERS_SET.contains(header.toLowerCase()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\HttpException.java,HttpException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,DelegatingServletContext,public  (ServletContext context){ this.context=context; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,addFilter,@Override public FilterRegistration.Dynamic  (String filterName Class<? extends Filter> filterClass){ return context.addFilter(filterName filterClass); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,addListener,@Override public void  (Class<? extends EventListener> listenerClass){ context.addListener(listenerClass); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,addServlet,@Override public ServletRegistration.Dynamic  (String servletName Class<? extends Servlet> servletClass){ return context.addServlet(servletName servletClass); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,createFilter,@Override public <T extends Filter>T  (Class<T> clazz) throws ServletException { return context.createFilter(clazz); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,createListener,@Override public <T extends EventListener>T  (Class<T> clazz) throws ServletException { return context.createListener(clazz); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,createServlet,@Override public <T extends Servlet>T  (Class<T> clazz) throws ServletException { return context.createServlet(clazz); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,declareRoles,@Override public void  (String... roleNames){ context.declareRoles(roleNames); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getAttribute,@Override public Object  (String name){ return context.getAttribute(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getAttributeNames,@Override public Enumeration<String>  (){ return context.getAttributeNames(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getClassLoader,@Override public ClassLoader  (){ return context.getClassLoader(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getContext,@Override public ServletContext  (String uripath){ return context.getContext(uripath); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getContextPath,@Override public String  (){ return context.getContextPath(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getDefaultSessionTrackingModes,@Override public Set<SessionTrackingMode>  (){ return context.getDefaultSessionTrackingModes(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getEffectiveMajorVersion,@Override public int  (){ return context.getEffectiveMajorVersion(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getEffectiveMinorVersion,@Override public int  (){ return context.getEffectiveMinorVersion(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getEffectiveSessionTrackingModes,@Override public Set<SessionTrackingMode>  (){ return context.getEffectiveSessionTrackingModes(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getFilterRegistration,@Override public FilterRegistration  (String filterName){ return context.getFilterRegistration(filterName); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getFilterRegistrations,@Override public Map<String ? extends FilterRegistration>  (){ return context.getFilterRegistrations(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getInitParameter,@Override public String  (String name){ return context.getInitParameter(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getInitParameterNames,@Override public Enumeration<String>  (){ return context.getInitParameterNames(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getJspConfigDescriptor,@Override public JspConfigDescriptor  (){ return context.getJspConfigDescriptor(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getMajorVersion,@Override public int  (){ return context.getMajorVersion(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getMimeType,@Override public String  (String file){ return context.getMimeType(file); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getMinorVersion,@Override public int  (){ return context.getMinorVersion(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getNamedDispatcher,@Override public RequestDispatcher  (String name){ return context.getNamedDispatcher(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getRealPath,@Override public String  (String path){ return context.getRealPath(path); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getRequestDispatcher,@Override public RequestDispatcher  (String path){ return context.getRequestDispatcher(path); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getResource,@Override public URL  (String path) throws MalformedURLException { return context.getResource(path); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getResourceAsStream,@Override public InputStream  (String path){ return context.getResourceAsStream(path); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getResourcePaths,@Override public Set<String>  (String path){ return context.getResourcePaths(path); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getServerInfo,@Override public String  (){ return context.getServerInfo(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getServlet,@Override public Servlet  (String name) throws ServletException { return context.getServlet(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getServletContextName,@Override public String  (){ return context.getServletContextName(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getServletNames,@Override public Enumeration<String>  (){ return context.getServletNames(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getServletRegistration,@Override public ServletRegistration  (String servletName){ return context.getServletRegistration(servletName); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getServletRegistrations,@Override public Map<String ? extends ServletRegistration>  (){ return context.getServletRegistrations(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getServlets,@Override public Enumeration<Servlet>  (){ return context.getServlets(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getSessionCookieConfig,@Override public SessionCookieConfig  (){ return context.getSessionCookieConfig(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,getVirtualServerName,@Override public String  (){ return context.getVirtualServerName(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,log,@Override public void  (String message Throwable throwable){ context.log(message throwable); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,removeAttribute,@Override public void  (String name){ context.removeAttribute(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,setAttribute,@Override public void  (String name Object object){ context.setAttribute(name object); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,setInitParameter,@Override public boolean  (String name String value){ return context.setInitParameter(name value); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\DelegatingServletContext.java,setSessionTrackingModes,@Override public void  (Set<SessionTrackingMode> sessionTrackingModes){ context.setSessionTrackingModes(sessionTrackingModes); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\HttpRequestDispatcher.java,HttpRequestDispatcher,public  (RequestProxyService proxyService String targetHost){ this.targetHost=targetHost; this.proxyService=proxyService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\HttpRequestDispatcher.java,forward,"@Override public void  (ServletRequest request ServletResponse response) throws ServletException  IOException { if (proxyService == null) { LOG.warn(""Request Proxy Service is not set... ignoring request""); return; } int status=proxyService.proxyRequest(ta"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\HttpRequestDispatcher.java,include,"@Override public void  (ServletRequest request ServletResponse response) throws ServletException  IOException { throw new UnsupportedOperationException(""REPOSE does not support include.""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,ServletContextWrapper,"public  (ServletContext context String contextName RequestProxyService requestProxyService){ super(context); this.targetContext=contextName; this.proxyService=requestProxyService; URI uri=null; String targetHostPort=null; try { uri=new URI(targetContext); targetHostPort=uri.getHost() + "":"" + uri.getPort(); } catch ( URISyntaxException ex) { LOG.error(""Invalid target context: "" + targetContext ex); } this.target=targetHostPort; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,cleanPath,"private String  (String uri){ return uri == null ? """" : uri.split(""\\?"")[0]; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,getContext,"@Override public ServletContext  (String uripath){ LOG.debug(""Getting a context for {}"" uripath); final String uri=cleanPath(uripath); if (uri.matches(""^https?://.*"")) { return new ServletContextWrapper(this uri proxyService); } else { ServletContext newC"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,getDispatcher,"private RequestDispatcher  (){ RequestDispatcher dispatcher=null; LOG.debug(""Getting request matcher for {}"" target); if (target != null) { return new HttpRequestDispatcher(proxyService targetContext); } return dispatcher; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\proxy\ServletContextWrapper.java,getRequestDispatcher,"@Override public RequestDispatcher  (String path){ RequestDispatcher dispatcher; if (targetContext.matches(""^https?://.*"")) { dispatcher=getDispatcher(); if (dispatcher == null) { dispatcher=new HttpRequestDispatcher(proxyService targetContext); } } else "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationResourceWatcher.java,ConfigurationResourceWatcher,public  (EventService eventManager){ this.eventManager=eventManager; watchMap=new ConcurrentHashMap<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationResourceWatcher.java,run,"@Override public void  (){ for ( ConfigurationResource resource : watchMap.values()) { try { if (resource.updated()) { eventManager.newEvent(ConfigurationEvent.UPDATE resource); LOG.info(""Updated "" + resource.name()); } } catch ( Exception e) { LOG.trace("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationResourceWatcher.java,stopWatching,public void  (String resourceName){ watchMap.remove(resourceName); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationResourceWatcher.java,watch,public void  (ConfigurationResource resource){ watchMap.put(resource.name() resource); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceException.java,ConfigurationServiceException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,ParserListenerPair,public  (UpdateListener listener ConfigurationParser parser String filterName){ this.listener=new WeakReference<>(listener); this.parser=parser; classLoader=Thread.currentThread().getContextClassLoader(); this.filterName=filterName; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,getClassLoader,public ClassLoader  (){ return classLoader; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,getFilterName,public String  (){ return filterName; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,getListener,public UpdateListener  (){ return listener.get(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ParserListenerPair.java,getParser,public ConfigurationParser  (){ return parser; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,ReposeLocalCache,@Inject public  (DatastoreService datastoreService){ this.datastoreService=datastoreService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,ConfigurationUpdateManagerImpl,@Inject public  (EventService eventManager ThreadingService threadingService){ this.eventManager=eventManager; this.threadingService=threadingService; listenerMap=new ConcurrentHashMap<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,getCacheKey,"private String  (String tenantId String token){ String key; if (StringUtils.isNotBlank(tenantId)) { key=tenantId + "":"" + token; } else { key=token; } return key; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,configUpdate,"private void  (UpdateListener upd Object cfg) throws UpdateFailedException { upd.configurationUpdated(cfg); LOG.debug(""Configuration Updated: "" + cfg.toString()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,destroy,@PreDestroy @Override public void  (){ resourceWatcherThread.destroy(); listenerMap.clear(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,getEncodedUserCacheKey,private String  (String user) throws NoSuchAlgorithmException { final byte[] hashBytes=MD5MessageDigestFactory.getInstance().newMessageDigest().digest(user.getBytes(StandardCharsets.UTF_8)); return UUIDEncodingProvider.getInstance().encode(hashBytes); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,removeAllCacheData,@Override @ManagedOperation public void  (){ datastoreService.getDefaultDatastore().removeAll(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,initialize,"@PostConstruct public void  (){ resourceWatcher=new ConfigurationResourceWatcher(eventManager); final Poller pollerLogic=new Poller(resourceWatcher 15000); resourceWatcherThread=new DestroyableThreadWrapper(threadingService.newThread(pollerLogic ""Configur"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,onEvent,"@Override public void  (Event<ConfigurationEvent ConfigurationResource> e){ final String payloadName=e.payload().name(); Map<Integer ParserListenerPair> listeners=listenerMap.get(payloadName); LOG.info(""Configuration event triggered for: "" + payloadName);"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,registerListener,@Override public <T>void  (UpdateListener<T> listener ConfigurationResource resource ConfigurationParser<T> parser String filterName){ synchronized (listenerLock) { ConcurrentHashMap<Integer ParserListenerPair> resourceListeners=listenerMap.get(resource.n
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,ConfigurationServiceImpl,@Inject public  (ConfigurationUpdateManager configurationUpdateManager @Value(ReposeSpringProperties.CORE.CONFIG_ROOT) String configRoot){ this.updateManager=configurationUpdateManager; this.configRoot=configRoot; parserPoolCache=new ConcurrentHashMap<>()
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,ParserPoolKey,public  (Class clazz URL xsdUrl){ this.clazz=clazz; this.xsdUrl=xsdUrl; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationUpdateManagerImpl.java,unregisterListener,@Override public <T>void  (UpdateListener<T> listener ConfigurationResource resource){ synchronized (listenerLock) { ConcurrentHashMap<Integer ParserListenerPair> resourceListeners=listenerMap.get(resource.name()); if (resourceListeners != null) { resourc
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,destroy,@Override public void  (){ parserPoolCache.clear(); updateManager.destroy(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } ParserPoolKey that=(ParserPoolKey)o; if (clazz != null ? !clazz.equals(that.clazz) : that.clazz != null) { return false; }
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,getPooledJaxbConfigurationParser,"private <T>ConfigurationParser<T>  (Class<T> configurationClass URL xsdStreamSource){ ParserPoolKey pk=new ParserPoolKey(configurationClass xsdStreamSource); final WeakReference<ConfigurationParser> parserReference=parserPoolCache.get(pk); ConfigurationParser<T> parser=parserReference != null ? parserReference.get() : null; LOG.debug(""Parser found from the reference is {}"" parser); ClassLoader loader=configurationClass.getClassLoader(); if (parser == null) { LOG.debug(""Creating new jaxbConfigurationParser for the given configuration class: {}"" configurationClass); try { parser=new TemplatingJaxbConfigurationParser<>(configurationClass xsdStreamSource loader); } catch ( JAXBException e) { throw new ConfigurationServiceException(""Failed to create a JAXB context for a configuration parser!"" e); } parserPoolCache.put(pk new WeakReference<>(parser)); } return parser; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,getResourceResolver,@Override public ConfigurationResourceResolver  (){ return this.resourceResolver; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,hashCode,@Override public int  (){ int result=clazz != null ? clazz.hashCode() : 0; result=31 * result + (xsdUrl != null ? xsdUrl.hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,init,"@PostConstruct public void  (){ LOG.debug(""Loading configuration files from directory: {}"" configRoot); if (StringUtils.isBlank(configRoot)) { throw new PowerApiContextException(""Power API requires a configuration directory in a spring property named "" + "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,setResourceResolver,public void  (ConfigurationResourceResolver resourceResolver){ this.resourceResolver=resourceResolver; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,subscribeTo,@Override public <T>void  (String filterName String configurationName UpdateListener<T> listener ConfigurationParser<T> customParser boolean sendNotificationNow){ final ConfigurationResource resource=resourceResolver.resolve(configurationName); try { if (
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\config\impl\ConfigurationServiceImpl.java,unsubscribeFrom,@Override public void  (String configurationName UpdateListener listener){ updateManager.unregisterListener(listener resourceResolver.resolve(configurationName)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,removeGroups,"@Override @ManagedOperation public boolean  (String tenantId String token){ boolean removed=datastoreService.getDefaultDatastore().remove(AUTH_GROUP_CACHE_PREFIX + ""."" + getCacheKey(tenantId token)); LOG.info(""Removed groups from cache: "" + removed + (Str"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,removeLimits,@Override @ManagedOperation public boolean  (String userId){ boolean removed=removeWithUnencodedUser(userId); if (!removed) { removed=removeWithEncodedUser(userId); } return removed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,removeTokenAndRoles,"@Override @ManagedOperation public boolean  (String tenantId String token){ boolean removed=datastoreService.getDefaultDatastore().remove(AUTH_TOKEN_CACHE_PREFIX + ""."" + getCacheKey(tenantId token)); LOG.info(""Removed token from cache: "" + removed + (Stri"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,removeWithEncodedUser,"private boolean  (String userId){ boolean removed=false; try { removed=datastoreService.getDefaultDatastore().remove(getEncodedUserCacheKey(userId)); LOG.info(""Removed rate limits from cache: "" + removed + (StringUtils.isNotBlank(userId) ? "" ("" + userId + "")"" : """")); } catch ( NoSuchAlgorithmException e) { LOG.error(""Your instance of the Java Runtime Environment does not support the MD5 hash algorithm."" e); } return removed; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCache.java,removeWithUnencodedUser,private boolean  (String userId){ return datastoreService.getDefaultDatastore().remove(userId); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,ArtifactDirectoryWatcher,public  (EventService eventManagerReference){ this.eventManagerReference=eventManagerReference; this.checkIntervalInMilliseconds=DEFAULT_DIRECTORY_CHECK_INTERVAL; artifactModificationTimes=new HashMap<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,checkArtifacts,"public synchronized boolean  (){ final Set<String> removedArtifacts=new HashSet<>(artifactModificationTimes.keySet()); if (artifactDirectory == null) { throw new DeploymentDirectoryNotFoundException(""The Power API configured deployment directory is null. Please check the Power API configuration file.""); } List<ArtifactDirectoryItem> items=new ArrayList<>(); for ( String artifactPath : artifactDirectory.list(EarFilenameFilter.getInstance())) { final File artifactFile=new File(artifactDirectory artifactPath); final long lastModifiedTime=artifactFile.lastModified(); if (artifactModificationTimes.containsKey(artifactPath)) { final long lastRecordedModifiedTime=artifactModificationTimes.get(artifactPath); removedArtifacts.remove(artifactPath); if (lastRecordedModifiedTime != lastModifiedTime) { artifactModificationTimes.put(artifactPath lastModifiedTime); items.add(new ArtifactDirectoryItem(ApplicationArtifactEvent.UPDATED artifactFile.getAbsolutePath())); } } else { items.add(new ArtifactDirectoryItem(ApplicationArtifactEvent.NEW artifactFile.getAbsolutePath())); } artifactModificationTimes.put(artifactPath lastModifiedTime); } for ( String artifactPath : removedArtifacts) { final File artifactFile=new File(artifactDirectory artifactPath); artifactModificationTimes.remove(artifactPath); items.add(new ArtifactDirectoryItem(ApplicationArtifactEvent.DELETED artifactFile.getAbsolutePath())); } if (!items.isEmpty()) { eventManagerReference.newEvent(ApplicationArtifactEvent.ARTIFACTS_MODIFIED items); } return !items.isEmpty(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,destroy,@Override public void  (){ shouldContinue=false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,run,"@Override public synchronized void  (){ shouldContinue=true; while (shouldContinue) { checkArtifacts(); try { wait(checkIntervalInMilliseconds); } catch ( InterruptedException ie) { LOG.info(""Artifact directory watcher received an interrupt."" ie); destroy"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,updateArtifactDirectoryLocation,public synchronized void  (File newArtifactDirectory){ artifactDirectory=newArtifactDirectory; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryWatcher.java,updateCheckInterval,public synchronized void  (int checkInterval){ checkIntervalInMilliseconds=checkInterval; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,ArtifactManager,@Inject public  (EventService eventService ConfigurationService configurationService ThreadingService threadingService){ this.eventService=eventService; this.configurationService=configurationService; this.threadingService=threadingService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,allArtifactsLoaded,@Override public boolean  (){ return !containerConfigurationListener.getDirWatcher().checkArtifacts(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,delete,"private void  (File file){ if (file.isDirectory()) { for ( File c : file.listFiles()) { delete(c); } } if (!file.delete()) { LOG.warn(""Failure to delete file "" + file.getName() + "" on repose shutdown.""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,destroy,"@Override @PreDestroy public void  (){ LOG.debug(""Artifact manager going down!""); classLoaderContextMap.clear(); try { eventService.squelch(this ApplicationArtifactEvent.class); if (containerConfigurationListener.isAutoClean()) { File deployDir=new File(c"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,getLoadedApplications,@Override public Collection<EarClassLoaderContext>  (){ return Collections.unmodifiableCollection(classLoaderContextMap.values()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,hasFilter,@Override public boolean  (String filterName){ for ( EarClassLoaderContext ctx : classLoaderContextMap.values()) { if (ctx.getEarDescriptor().getRegisteredFilters().keySet().contains(filterName)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,init,"@PostConstruct public void  (){ this.containerConfigurationListener=new ContainerConfigurationListener(eventService); watcherThread=new DestroyableThreadWrapper(threadingService.newThread(containerConfigurationListener.getDirWatcher() ""Artifact Watcher Th"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,loadArtifact,"private EarClassLoaderContext  (String archivePath){ final File archive=new File(archivePath); EarClassLoaderContext context=null; try { File unpackRoot=new File(containerConfigurationListener.getDeploymentDirectory() unpackPrefix); unpackRoot.mkdirs(); containerConfigurationListener.validateDeploymentDirectory(); EarClassProvider provider=new EarClassProvider(archive unpackRoot); ClassLoader earClassLoader=provider.getClassLoader(); EarDescriptor descriptor=provider.getEarDescriptor(); context=new ReallySimpleEarClassLoaderContext(descriptor earClassLoader); artifactApplicationNames.put(archive.getAbsolutePath() context.getEarDescriptor().getApplicationName()); } catch ( EarProcessingException e) { LOG.error(""Failure in loading artifact  \""{}\""."" archive.getAbsolutePath() e); } return context; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,onEvent,@Override public void  (Event<ApplicationArtifactEvent List<ArtifactDirectoryItem>> e){ final List<ArtifactDirectoryItem> artifacts=e.payload(); List<EarClassLoaderContext> contexts=new ArrayList<>(); for ( ArtifactDirectoryItem item : artifacts) { EarCla
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactManager.java,onlyOnce,@Override public void  (Event<PowerFilterEvent Long> e){ watcherThread.start(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\DeploymentDirectoryNotFoundException.java,DeploymentDirectoryNotFoundException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,ContainerConfigurationListener,public  (EventService eventService){ dirWatcher=new ArtifactDirectoryWatcher(eventService); dirWatcher.updateArtifactDirectoryLocation(deploymentDirectory); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,configurationUpdated,@Override public synchronized void  (ContainerConfiguration configurationObject){ if (configurationObject.getDeploymentConfig() != null) { final ArtifactDirectory ad=configurationObject.getDeploymentConfig().getArtifactDirectory(); final DeploymentDirecto
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,getDeploymentDirectory,public File  (){ return deploymentDirectory; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,getDirWatcher,public synchronized ArtifactDirectoryWatcher  (){ return dirWatcher; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,isAutoClean,public synchronized boolean  (){ return autoClean; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ContainerConfigurationListener.java,validateDeploymentDirectory,"public synchronized void  (){ if (deploymentDirectory == null) { throw new IllegalStateException(""The Power API configured deployment directory is null. Please check the Power API configuration file.""); } else if (!deploymentDirectory.exists()) { throw new IllegalStateException(""The deployment directory "" + deploymentDirectory.getPath() + "" does not exist. Please ""+ ""create the Power API deployment directory.""); } else if (!deploymentDirectory.canWrite()) { throw new IllegalStateException(""Power API does not have permission to write to the deployment directory "" + deploymentDirectory.getPath() + "". Please ensure the directory is configured with permissions 760 ""+ ""and has the correct owner and group.""); } else if (!deploymentDirectory.canExecute()) { throw new IllegalStateException(""Power API does not have permission to execute against the deployment directory "" + deploymentDirectory.getPath() + "". Please ensure the directory is configured with permissions 760 ""+ ""and has the correct owner and group.""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryItem.java,ArtifactDirectoryItem,public  (ApplicationArtifactEvent event String path){ this.path=path; this.event=event; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryItem.java,getEvent,public ApplicationArtifactEvent  (){ return event; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\ArtifactDirectoryItem.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\EarFilenameFilter.java,accept,"@Override public boolean  (File dir String name){ return name.length() > EAR_EXTENSION_LENGTH && "".ear"".equalsIgnoreCase(name.substring(name.length() - EAR_EXTENSION_LENGTH)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\deploy\EarFilenameFilter.java,getInstance,public static FilenameFilter  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\ComparableClassWrapper.java,ComparableClassWrapper,public  (Class<? extends T> wrappedClass){ this.wrappedClass=wrappedClass; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\ComparableClassWrapper.java,compareTo,@Override public int  (ComparableClassWrapper<T> o){ return wrappedClass.getCanonicalName().compareTo(o.wrappedClass.getCanonicalName()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\ComparableClassWrapper.java,equals,@Override public boolean  (Object o){ if (!(o instanceof ComparableClassWrapper)) { return false; } return compareTo((ComparableClassWrapper<T>)o) == 0; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\ComparableClassWrapper.java,hashCode,@Override public int  (){ return HASH + (this.wrappedClass != null ? this.wrappedClass.hashCode() : 0); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,EventListenerDescriptor,public  (EventListener<T ?> listener Collection<T> targetedEvents){ this.subscriptions=new HashSet<>(targetedEvents); this.listener=listener; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,answersTo,public boolean  (T typeToLookFor){ for ( T eventType : subscriptions) { if (eventType == typeToLookFor) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,getListener,public EventListener<T ?>  (){ return listener; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,listenFor,public void  (Collection<T> types){ subscriptions.addAll(types); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventListenerDescriptor.java,silence,public boolean  (Collection<T> types){ final List<T> typesToRemove=new LinkedList<>(types); final Iterator<T> targetedEventIterator=subscriptions.iterator(); while (targetedEventIterator.hasNext()) { final T event=targetedEventIterator.next(); if (typesToRemove.remove(event)) { targetedEventIterator.remove(); } } return subscriptions.isEmpty(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\impl\SimpleEvent.java,SimpleEvent,public  (T type P payload EventService em){ this.type=type; this.payload=payload; this.em=em; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\impl\SimpleEvent.java,eventManager,@Override public EventService  (){ return em; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\impl\SimpleEvent.java,payload,@Override public P  (){ return payload; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\impl\SimpleEvent.java,type,@Override public T  (){ return type; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,EventServiceImpl,public  (){ listenerMap=new TreeMap<>(); eventQueue=new LinkedList<>(); eventQueueLock=new ReentrantLock(); queueNotEmpty=eventQueueLock.newCondition(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,getOrCreateListenerSet,private <T extends Enum>Set<EventListenerDescriptor>  (Class<T> e){ final ComparableClassWrapper<Enum> classWrapper=new ComparableClassWrapper<>(e); Set<EventListenerDescriptor> listenerSet=listenerMap.get(classWrapper); if (listenerSet == null) { listenerSet=new HashSet<>(); listenerMap.put(classWrapper listenerSet); } return listenerSet; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,listen,"@Override public <T extends Enum>void  (EventListener<T ?> el T... events){ if (events == null || events.length == 0) { throw new IllegalArgumentException(""Must subscribe to at least one event type""); } for ( T event : events) { if (event != null) { regsi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,newEvent,@Override public void  (Enum e Object payload){ eventQueueLock.lock(); try { eventQueue.add(new SimpleEvent(e payload this)); if (eventQueue.size() == 1) { queueNotEmpty.signalAll(); } } finally { eventQueueLock.unlock(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,nextDispatcher,@Override public synchronized EventDispatcher  () throws InterruptedException { final Event e=nextEvent(); return new EventDispatcherImpl(e Collections.unmodifiableSet(getOrCreateListenerSet(e.type().getClass()))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,nextEvent,"private Event  () throws InterruptedException { eventQueueLock.lock(); try { while (eventQueue.isEmpty()) { queueNotEmpty.await(); } return eventQueue.poll(); } catch ( InterruptedException ie) { LOG.trace(""Power Proxy Event Manager Interrupted"" ie); Thread.currentThread().interrupt(); throw ie; } finally { eventQueueLock.unlock(); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,regsiterListener,private <T extends Enum>void  (EventListener<T ?> el Class<T> enumClass Collection<T> events){ boolean found=false; final Set<EventListenerDescriptor> descriptorSet=getOrCreateListenerSet(enumClass); for ( EventListenerDescriptor<T> descriptor : descriptorSet) { if (descriptor.getListener() == el) { descriptor.listenFor(events); found=true; break; } } if (!found) { descriptorSet.add(new EventListenerDescriptor<>(el events)); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventServiceImpl.java,squelch,"@Override @SuppressWarnings(""squid:S134"") public <T extends Enum>void  (EventListener<T ?> el T... events){ if (events == null || events.length == 0) { throw new IllegalArgumentException(""Must unsubscribe from at least one event type""); } final Set<EventL"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventDispatcherImpl.java,EventDispatcherImpl,public  (Event e Set<EventListenerDescriptor> listeners){ this.listeners=listeners; this.e=e; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventDispatcherImpl.java,dispatch,@Override public void  (){ for ( EventListenerDescriptor eventListenerWrapper : listeners) { if (eventListenerWrapper.answersTo(e.type())) { eventListenerWrapper.getListener().onEvent(e); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\EventDispatcherImpl.java,getEvent,@Override public Event  (){ return e; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\PowerProxyEventKernel.java,PowerProxyEventKernel,@Inject public  (EventService eventManager ThreadingServiceImpl threadingService){ this.eventManager=eventManager; this.threadingService=threadingService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\PowerProxyEventKernel.java,destroy,@Override @PreDestroy public void  (){ shouldContinue=false; eventKernelThread.destroy(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\PowerProxyEventKernel.java,init,"@PostConstruct public void  (){ eventKernelThread=new DestroyableThreadWrapper(threadingService.newThread(this ""Event Kernel Thread"") this); eventKernelThread.start(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\PowerProxyEventKernel.java,run,"@Override @SuppressWarnings(""squid:S2583"") public void  (){ shouldContinue=true; try { while (shouldContinue) { final EventDispatcher dispatcher=eventManager.nextDispatcher(); if (LOG.isDebugEnabled()) { final Enum eventType=dispatcher.getEvent().type(); "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\listener\SingleFireEventListener.java,SingleFireEventListener,public  (Class<T> eventClass){ this.eventClass=eventClass; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\event\listener\SingleFireEventListener.java,onEvent,@Override public synchronized void  (Event<T P> e){ if (!fired) { onlyOnce(e); fired=true; } e.eventManager().squelch(this eventClass); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,ConfigurationInformationCompositeDataBuilder,public  (FilterInformation filter){ this.filter=filter; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,getDescription,"@Override public String  (){ return ""Information about filter "" + filter.getName() + "".""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,getItemDescriptions,"@Override public String[]  (){ return new String[]{""The filter id in the filter chain."" ""The filter name."" ""The URI Reg Ex for this filter."" ""The configuration file specified for this filter instance."" ""Boolean indication of configuration loaded correctly"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,getItemName,@Override public String  (){ return filter.getName(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,getItemNames,"@Override public String[]  (){ return new String[]{""id"" ""name"" ""regex"" ""configuration"" ""successfully initialized"" ""successfully loaded configurations"" ""loading failed configurations""}; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,getItemTypes,@Override public OpenType[]  (){ return new OpenType[]{SimpleType.STRING SimpleType.STRING SimpleType.STRING SimpleType.STRING SimpleType.BOOLEAN SimpleType.STRING SimpleType.STRING}; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformationCompositeDataBuilder.java,getItems,@Override public Object[]  (){ final List<Object> items=new ArrayList<>(); items.add(filter.getId()); items.add(filter.getName()); items.add(filter.getRegex()); items.add(filter.getConfiguration()); items.add(filter.getIsConfiguarationLoaded()); StringBui
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,ConfigurationInformation,@Inject public  (ConfigurationService configurationService){ this.configurationService=configurationService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,configurationUpdated,@Override public void  (SystemModel systemModel){ initialized=false; Map<String List<String>> allNodes=SystemModelInterrogator.allClusterNodes(systemModel); for ( Map.Entry<String List<String>> entry : allNodes.entrySet()) { for ( String nodeId : entry.ge
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,destroy,"@PreDestroy public void  (){ configurationService.unsubscribeFrom(""system-model.cfg.xml"" systemModelListener); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,getPerNodeFilterInformation,"@Override @ManagedOperation(description=""Gets all the per-node-filter information that this host's system model knows about"") public Map<String List<CompositeData>>  () throws OpenDataException { HashMap<String List<CompositeData>> data=new HashMap<>(); f"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,init,"@PostConstruct public void  (){ LOG.info(""Created ConfigurationInformation MBean""); systemModelListener=new SystemModelListener(); configurationService.subscribeTo(""system-model.cfg.xml"" systemModelListener SystemModel.class); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,isInitialized,@Override public boolean  (){ return initialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,isNodeReady,"@Override @ManagedAttribute(description=""tells you if this node is ready"") public boolean  (String clusterId String nodeId){ Boolean result=nodeStatus.get(key(clusterId nodeId)); if (result == null) { return false; } else { return result; } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,key,"private String  (String clusterId String nodeId){ return clusterId + ""-"" + nodeId; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\ConfigurationInformation.java,updateNodeStatus,public void  (String clusterId String nodeId boolean ready){ nodeStatus.put(key(clusterId nodeId) ready); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,FilterInformation,public  (String id String name String regex String configuration Boolean isConfiguarationLoaded){ this.id=id; this.name=name; this.regex=regex; this.configuration=configuration; this.isConfiguarationLoaded=isConfiguarationLoaded; successConfigurationLoadinginformation=new HashMap<String String[]>(); failedConfigurationLoadingInformation=new HashMap<String String[]>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,getConfiguration,public String  (){ return configuration; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,getFailedConfigurationLoadingInformation,public Map<String String[]>  (){ return failedConfigurationLoadingInformation; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,getIsConfiguarationLoaded,public Boolean  (){ return isConfiguarationLoaded; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,getRegex,public String  (){ return regex; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,getSuccessConfigurationLoadinginformation,public Map<String String[]>  (){ return successConfigurationLoadinginformation; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,setConfiguarationLoaded,public void  (boolean isConfiguarationLoaded){ this.isConfiguarationLoaded=isConfiguarationLoaded; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,setFailedConfigurationLoadingInformation,public void  (Map failedConfigurationLoadingInformation){ this.failedConfigurationLoadingInformation=failedConfigurationLoadingInformation; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\jmx\FilterInformation.java,setSuccessConfigurationLoadinginformation,public void  (Map successConfigurationLoadinginformation){ this.successConfigurationLoadinginformation=successConfigurationLoadinginformation; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,LoggingServiceImpl,@Inject public  (ConfigurationService configurationService){ this.configurationService=configurationService; this.configurationListener=new ContainerConfigurationListener(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,configurationUpdated,@Override public void  (ContainerConfiguration configurationObject){ if (configurationObject.getDeploymentConfig() != null) { updateLoggingConfiguration(configurationObject.getDeploymentConfig().getLoggingConfiguration().getHref()); } isInitialized=true; 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,destroy,"@PreDestroy public void  (){ configurationService.unsubscribeFrom(""container.cfg.xml"" configurationListener); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,init,"@PostConstruct @SuppressWarnings(""squid:S106"") public void  (){ URL containerXsdURL=getClass().getResource(""/META-INF/schema/container/container-configuration.xsd""); configurationService.subscribeTo(""container.cfg.xml"" containerXsdURL configurationListene"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\logging\LoggingServiceImpl.java,updateLoggingConfiguration,"@Override public void  (String configFileName){ if (configFileName == null) { LOG.debug(""Requested to reload a NULL configuration.""); } else if (configFileName.equals(currentConfigFileName)) { LOG.debug(""Requested to reload the same configuration: {}"" con"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,DestinationInfoLogic,private  (DestinationInfoLogic destinationInfoLogic){ dataStore=new DestinationInfoStore(destinationInfoLogic.dataStore); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,accumulateResponseTime,@Override public void  (long responseTime){ dataStore.setAccumulatedResponseTime(dataStore.getAccumulatedResponseTime() + responseTime); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,copy,@Override public DestinationInfo  (){ return new DestinationInfoLogic(this); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,elapsedTimeInSeconds,public double  (){ return (System.currentTimeMillis() - dataStore.getStartTime()) / DOUBLE_THOUSAND; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o instanceof DestinationInfoLogic) { DestinationInfoLogic other=(DestinationInfoLogic)o; return Objects.equal(this.dataStore other.dataStore); } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getAccumulatedResponseTime,public long  (){ return dataStore.getAccumulatedResponseTime(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getAverageResponseTime,@Override public double  (){ double averageResponseTime=(double)dataStore.getTotalResponses() / dataStore.getAccumulatedResponseTime(); if (Double.isNaN(averageResponseTime)) { return DOUBLE_ZERO; } else { return averageResponseTime; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getDestinationId,@Override public String  (){ return dataStore.getDestinationId(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getStatusCodeCounts,public Map<Integer StatusCodeResponseStore>  (){ return dataStore.getStatusCodeCounts(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getThroughput,@Override public double  (){ double throughput=(double)dataStore.getTotalResponses() / elapsedTimeInSeconds(); if (Double.isNaN(throughput)) { return DOUBLE_ZERO; } else { return throughput; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getTotalRequests,@Override public long  (){ return dataStore.getTotalRequests(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getTotalResponseTime,@Override public long  (int statusCode){ StatusCodeResponseStore count=dataStore.getStatusCodeCounts().get(statusCode); if (count != null) { return count.getAccumulatedResponseTime(); } else { return LONG_ZERO; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getTotalResponses,public long  (){ return dataStore.getTotalResponses(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,getTotalStatusCode,@Override public long  (int statusCode){ StatusCodeResponseStore count=dataStore.getStatusCodeCounts().get(statusCode); if (count != null) { return count.getTotalCount(); } else { return LONG_ZERO; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,hashCode,@Override public int  (){ return Objects.hashCode(dataStore); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,incrementRequestCount,@Override public void  (){ dataStore.setTotalRequests(dataStore.getTotalRequests() + INT_ONE); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,incrementResponseCount,@Override public void  (){ dataStore.setTotalResponses(dataStore.getTotalResponses() + INT_ONE); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoLogic.java,incrementStatusCodeCount,@Override public void  (int statusCode long time){ StatusCodeResponseStore value=dataStore.getStatusCodeCounts().get(statusCode); if (value != null) { dataStore.getStatusCodeCounts().put(statusCode value.update(1 time)); } else { dataStore.getStatusCodeCo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,DestinationInfoStore,private  (String destinationId long startTime long totalRequests long totalResponses Map<Integer StatusCodeResponseStore> statusCodeCounts long accumulatedResponseTime){ this.destinationId=destinationId; this.startTime=startTime; this.totalRequests=totalRequests; this.totalResponses=totalResponses; this.statusCodeCounts=deepCopyStatusCodeCounts(statusCodeCounts); this.accumulatedResponseTime=accumulatedResponseTime; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,deepCopyStatusCodeCounts,private static Map<Integer StatusCodeResponseStore>  (Map<Integer StatusCodeResponseStore> statusCodeCounts){ Map<Integer StatusCodeResponseStore> copy=new HashMap<>(); for ( Map.Entry<Integer StatusCodeResponseStore> entry : statusCodeCounts.entrySet()) { copy.put(entry.getKey() new StatusCodeResponseStore(entry.getValue())); } return copy; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,equals,"@SuppressWarnings(""squid:S1067"") @Override public boolean  (Object o){ if (o == this) { return true; } if (o instanceof DestinationInfoStore) { DestinationInfoStore other=(DestinationInfoStore)o; return Objects.equal(this.destinationId other.destinationId"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,getAccumulatedResponseTime,public long  (){ return accumulatedResponseTime; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,getDestinationId,public String  (){ return destinationId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,getStartTime,public long  (){ return startTime; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,getStatusCodeCounts,protected Map<Integer StatusCodeResponseStore>  (){ return statusCodeCounts; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,getTotalRequests,public long  (){ return totalRequests; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,getTotalResponses,public long  (){ return totalResponses; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,hashCode,@Override public int  (){ return Objects.hashCode(destinationId accumulatedResponseTime startTime totalRequests totalResponses statusCodeCounts); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,setAccumulatedResponseTime,protected void  (long accumulatedResponseTime){ this.accumulatedResponseTime=accumulatedResponseTime; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,setTotalRequests,protected void  (long totalRequests){ this.totalRequests=totalRequests; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\destinations\impl\DestinationInfoStore.java,setTotalResponses,protected void  (long totalResponses){ this.totalResponses=totalResponses; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,ReportingServiceImpl,@Inject public  (ConfigurationService configurationService){ this.configurationService=configurationService; this.containerConfigurationListener=new ContainerConfigurationListener(); this.systemModelListener=new SystemModelListener(); timer=new Timer(TIME
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,configurationUpdated,@Override public void  (SystemModel systemModel){ final List<String> endpointIds=new ArrayList<>(); for ( ReposeCluster reposeCluster : systemModel.getReposeCluster()) { final DestinationList destinationList=reposeCluster.getDestinations(); for ( Destinat
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,destroy,"@PreDestroy public void  (){ shutdown(); configurationService.unsubscribeFrom(""system-model.cfg.xml"" systemModelListener); configurationService.unsubscribeFrom(""container.cfg.xml"" containerConfigurationListener); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,getDestinationInfo,@Override public synchronized DestinationInfo  (String destinationId){ return destinations.get(destinationId).copy(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,getDestinations,@Override public synchronized List<DestinationInfo>  (){ final List<DestinationInfo> newDestinations=new ArrayList<>(); for ( Map.Entry<String DestinationInfo> entry : destinations.entrySet()) { newDestinations.add(entry.getValue().copy()); } return newDe
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,getLastReset,@Override public synchronized Date  (){ return (Date)lastReset.clone(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,getReposeInfo,@Override public synchronized ReposeInfo  (){ return reposeInfo.copy(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,incrementReposeRequestCount,@Override public synchronized void  (){ reposeInfo.incrementRequestCount(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,incrementReposeResponseCount,@Override public synchronized void  (){ reposeInfo.incrementResponseCount(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,incrementReposeStatusCodeCount,@Override public synchronized void  (int statusCode long time){ reposeInfo.incrementStatusCodeCount(statusCode time); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,incrementRequestCount,@Override public synchronized void  (String destinationId){ if (destinations.get(destinationId) != null) { destinations.get(destinationId).incrementRequestCount(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,init,"@PostConstruct public void  (){ URL xsdURL=getClass().getResource(""/META-INF/schema/system-model/system-model.xsd""); URL containerXsdURL=getClass().getResource(""/META-INF/schema/container/container-configuration.xsd""); configurationService.subscribeTo(""sy"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,manageTimer,private void  (int seconds){ reportingTimerTask.cancel(); timer.purge(); reportingTimerTask=new ReportingTimerTask(); long delayInMilliseconds=TimeUnit.SECONDS.toMillis(seconds); lastReset=new Date(System.currentTimeMillis()); timer.scheduleAtFixedRate(reportingTimerTask delayInMilliseconds delayInMilliseconds); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,processReposeRequestSize,@Override public synchronized void  (long requestSize){ reposeInfo.processRequestSize(requestSize); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,processReposeResponseSize,@Override public synchronized void  (long responseSize){ reposeInfo.processResponseSize(responseSize); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,recordServiceResponse,@Override public synchronized void  (String destinationId int statusCode long responseTime){ incrementReposeResponseCount(); if (destinations.get(destinationId) != null) { DestinationInfo destination=destinations.get(destinationId); destination.incrementR
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,reset,"@SuppressWarnings(""squid:S3398"") private synchronized void  (){ final Map<String DestinationInfo> newDestinations=new HashMap<>(); for ( Map.Entry<String DestinationInfo> entry : destinations.entrySet()) { final String destinationId=entry.getValue().getDe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,run,@Override public void  (){ reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,shutdown,@Override public void  (){ timer.cancel(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\impl\ReportingServiceImpl.java,updateConfiguration,@Override public synchronized void  (List<String> destinationIds int seconds){ destinations.clear(); for ( String id : destinationIds) { final DestinationInfo destinationInfo=new DestinationInfoLogic(id); destinations.put(id destinationInfo); } reposeInfo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\CompositeDataBuilder.java,getCompositeType,private CompositeType  () throws OpenDataException { return new CompositeType(getItemName() getDescription() getItemNames() getItemDescriptions() getItemTypes()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,DestinationCompositeDataBuilder,public  (DestinationInfo destinationInfo){ this.destinationInfo=destinationInfo; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,getDescription,"@Override public String  (){ return ""Information about destination id "" + destinationInfo.getDestinationId() + "".""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,getItemDescriptions,"@Override public String[]  (){ return new String[]{""The repose system-model id of the destination."" ""The total number of requests sent to this destination."" ""The total number of 400 response codes received from this destination."" ""The total number of 500 "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,getItemName,@Override public String  (){ return destinationInfo.getDestinationId(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,getItemNames,"@Override public String[]  (){ return new String[]{""destinationId"" ""totalRequests"" ""total400s"" ""total500s"" ""responseTimeInMillis"" ""throughputInSeconds""}; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,getItemTypes,@Override public OpenType[]  (){ return new OpenType[]{SimpleType.STRING SimpleType.LONG SimpleType.LONG SimpleType.LONG SimpleType.DOUBLE SimpleType.DOUBLE}; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\DestinationCompositeDataBuilder.java,getItems,@Override public Object[]  (){ final List<Object> itemsB=new ArrayList<>(); itemsB.add(destinationInfo.getDestinationId()); itemsB.add(destinationInfo.getTotalRequests()); itemsB.add(destinationInfo.getTotalStatusCode(STATUS_CODE_400)); itemsB.add(destina
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,ReposeReport,@Inject public  (ReportingService reportingService){ this.reportingService=reportingService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,getDestinationInfo,"@Override @ManagedOperation public List<CompositeData>  () throws OpenDataException { List<CompositeData> compositeDataList=new ArrayList<>(); LOG.debug(""JMX: Retrieving destination information.""); for ( DestinationInfo destination : reportingService.getD"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,getLastReset,@Override @ManagedOperation public Date  (){ return reportingService.getLastReset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,getTotal400sReposeToClient,"@Override @ManagedOperation public String  (){ LOG.debug(""JMX: Retrieving total number of 400s from Repose to Client.""); return Long.toString(reportingService.getReposeInfo().getTotalStatusCode(STATUS_CODE_400)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\jmx\ReposeReport.java,getTotal500sReposeToClient,"@Override @ManagedOperation public String  (){ LOG.debug(""JMX: Retrieving total number of 500s from Repose to Client.""); return Long.toString(reportingService.getReposeInfo().getTotalStatusCode(STATUS_CODE_500)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsJmxObjectNameFactory.java,createName,"@Override public ObjectName  (String type String domain String name){ try { return getName(domain name); } catch ( MalformedObjectNameException mone) { LOGGER.warn(""Unable to register {} {}"" domain name mone); throw new RuntimeException(mone); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsJmxObjectNameFactory.java,getInstance,public static MetricsJmxObjectNameFactory  (){ if (instance == null) { instance=new MetricsJmxObjectNameFactory(); } return instance; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MultiMeter.java,MultiMeter,public  (Meter... auxiliaryMeters){ this.auxiliaryMeters=auxiliaryMeters; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MultiMeter.java,mark,@Override public void  (long n){ super.mark(n); markNAll(n auxiliaryMeters); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MultiMeter.java,markAll,public static void  (Meter... meters){ for ( Meter meter : meters) { meter.mark(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MultiMeter.java,markNAll,public static void  (long n Meter... meters){ for ( Meter meter : meters) { meter.mark(n); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,SummingMeterFactory,private  (MetricRegistry metricRegistry String namePrefix SummingMeterSupplier ancestralMeterSupplier){ this.namePrefix=namePrefix; this.metricRegistry=metricRegistry; this.acrossAllMeter=metricRegistry.meter(name(namePrefix ACROSS_ALL) ancestralMeterSupplier); this.summingMeterSupplier=new SummingMeterSupplier(acrossAllMeter); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,SummingMeterSupplier,public  (Meter... auxiliaryMeters){ this.auxiliaryMeters=auxiliaryMeters; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,createChildFactory,@Override public SummingMeterFactory  (String name){ return new SummingMeterFactory(metricRegistry name(namePrefix name) summingMeterSupplier); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,createMeter,@Override public Meter  (String name){ return metricRegistry.meter(name(namePrefix name) summingMeterSupplier); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,getAggregateMeter,@Override public Meter  (){ return acrossAllMeter; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactory.java,newMetric,@Override public Meter  (){ return new MultiMeter(auxiliaryMeters); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,ReposeInfoLogic,private  (ReposeInfoLogic reposeInfoLogic){ dataStore=new ReposeInfoStore(reposeInfoLogic.dataStore); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,copy,@Override public ReposeInfo  (){ return new ReposeInfoLogic(this); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getAccumulatedRequestSize,public long  (){ return dataStore.getAccumulatedRequestSize(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getAccumulatedResponseSize,public long  (){ return dataStore.getAccumulatedResponseSize(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getAverageRequestSize,@Override public double  (){ double averageRequestSize=(double)dataStore.getAccumulatedResponseSize() / (double)dataStore.getTotalRequests(); if (Double.isNaN(averageRequestSize)) { return DOUBLE_ZERO; } else { return averageRequestSize; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getAverageResponseSize,@Override public double  (){ double averageResponseSize=(double)dataStore.getAccumulatedResponseSize() / (double)dataStore.getTotalResponses(); if (Double.isNaN(averageResponseSize)) { return DOUBLE_ZERO; } else { return averageResponseSize; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getMaximumRequestSize,@Override public long  (){ return dataStore.getMaxRequestSize(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getMaximumResponseSize,@Override public long  (){ return dataStore.getMaxResponseSize(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getMinimumRequestSize,@Override public long  (){ return dataStore.getMinRequestSize(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getMinimumResponseSize,@Override public long  (){ return dataStore.getMinResponseSize(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getStatusCodeCounts,public Map<Integer StatusCodeResponseStore>  (){ return dataStore.getStatusCodeCounts(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getTotalRequests,public long  (){ return dataStore.getTotalRequests(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getTotalResponses,public long  (){ return dataStore.getTotalResponses(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,getTotalStatusCode,@Override public long  (int statusCode){ Long count=LONG_ZERO; for ( Integer code : dataStore.getStatusCodeCounts().keySet()) { if (code % statusCode < RESPONSE_CODE_SEPERATOR) { count+=dataStore.getStatusCodeCounts().get(code).getTotalCount(); } } return
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,incrementRequestCount,@Override public void  (){ dataStore.setTotalRequests(dataStore.getTotalRequests() + INT_ONE); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,incrementResponseCount,@Override public void  (){ dataStore.setTotalResponses(dataStore.getTotalResponses() + INT_ONE); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,incrementStatusCodeCount,@Override public void  (int statusCode long time){ StatusCodeResponseStore value=dataStore.getStatusCodeCounts().get(statusCode); if (value != null) { dataStore.getStatusCodeCounts().put(statusCode value.update(1 time)); } else { dataStore.getStatusCodeCo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,processRequestSize,@Override public void  (long requestSize){ dataStore.processRequestSize(requestSize); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogic.java,processResponseSize,@Override public void  (long responseSize){ dataStore.processResponseSize(responseSize); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,ReposeInfoStore,protected  (ReposeInfoStore reposeInfoStore){ this.statusCodeCounts=deepCopyStatusCodeCounts(reposeInfoStore.statusCodeCounts); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,deepCopyStatusCodeCounts,private Map<Integer StatusCodeResponseStore>  (Map<Integer StatusCodeResponseStore> statusCodeCounts){ Map<Integer StatusCodeResponseStore> copy=new HashMap<>(); for ( Map.Entry<Integer StatusCodeResponseStore> entry : statusCodeCounts.entrySet()) { copy.put(entry.getKey() new StatusCodeResponseStore(entry.getValue())); } return copy; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getAccumulatedRequestSize,public long  (){ return accumulatedRequestSize; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getAccumulatedResponseSize,public long  (){ return accumulatedResponseSize; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getMaxRequestSize,public long  (){ return maxRequestSize; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getMaxResponseSize,public long  (){ return maxResponseSize; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getMinRequestSize,public long  (){ return minRequestSize; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getMinResponseSize,public long  (){ return minResponseSize; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getStatusCodeCounts,public Map<Integer StatusCodeResponseStore>  (){ return statusCodeCounts; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getTotalRequests,public long  (){ return totalRequests; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,getTotalResponses,public long  (){ return totalResponses; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,processRequestSize,protected void  (long requestSize){ this.accumulatedRequestSize+=requestSize; if (requestSize < minRequestSize || minRequestSize == 0) { minRequestSize=requestSize; } if (requestSize > maxRequestSize) { maxRequestSize=requestSize; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,processResponseSize,protected void  (long responseSize){ this.accumulatedResponseSize+=responseSize; if (responseSize < minResponseSize || minResponseSize == 0) { minResponseSize=responseSize; } if (responseSize > maxResponseSize) { maxResponseSize=responseSize; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,setTotalRequests,protected void  (long totalRequests){ this.totalRequests=totalRequests; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\repose\ReposeInfoStore.java,setTotalResponses,protected void  (long totalResponses){ this.totalResponses=totalResponses; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,StatusCodeResponseStore,public  (long totalCount long accumulatedResponseTime){ this.totalCount=totalCount; this.accumulatedResponseTime=accumulatedResponseTime; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,equals,@Override public boolean  (Object o){ if (!(o instanceof StatusCodeResponseStore)) { return false; } StatusCodeResponseStore other=(StatusCodeResponseStore)o; return other.accumulatedResponseTime == accumulatedResponseTime && other.totalCount == totalCoun
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,getAccumulatedResponseTime,public Long  (){ return accumulatedResponseTime; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,getTotalCount,public Long  (){ return totalCount; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,hashCode,@Override public int  (){ int hash=HASH; hash=HASH * hash + (int)(this.totalCount ^ (this.totalCount >>> SHIFT)); hash=HASH * hash + (int)(this.accumulatedResponseTime ^ (this.accumulatedResponseTime >>> SHIFT)); return hash; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\StatusCodeResponseStore.java,update,public StatusCodeResponseStore  (long count long time){ this.totalCount+=count; this.accumulatedResponseTime+=time; return this; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\HrefFileReader.java,read,"public String  (String href String hrefId){ final File f=validateHref(href hrefId); String stringMessage=""""; if (f != null) { try { stringMessage=FileUtils.readFileToString(f Charset.defaultCharset()); } catch ( IOException ioe) { LOG.error(StringUtils.join(""Failed to read file: "" f.getAbsolutePath() "" - Reason: "" ioe.getMessage()) ioe); } } return stringMessage; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\HrefFileReader.java,validateHref,"public File  (String href String hrefId){ final Matcher m=URI_PATTERN.matcher(href); File f=null; if (m.find() && href.startsWith(""file://"")) { try { f=new File(new URI(href)); } catch ( URISyntaxException urise) { LOG.error(""Bad URI syntax in message href for status code: "" + hrefId urise); } } return f; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableStatusCodes.java,ImmutableStatusCodes,private  (List<StatusCodeMatcher> statusCodes){ statusCodeMatcherList.clear(); statusCodeMatcherList.addAll(statusCodes); statusCodeRegexes.clear(); for ( StatusCodeMatcher code : statusCodeMatcherList) { statusCodeRegexes.put(code.getId() Pattern.compile(code.getCodeRegex())); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableStatusCodes.java,build,public static ImmutableStatusCodes  (List<StatusCodeMatcher> statusCodeMatchers){ return new ImmutableStatusCodes(statusCodeMatchers); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableStatusCodes.java,getMatchingStatusCode,public StatusCodeMatcher  (String statusCode){ StatusCodeMatcher matchedCode=null; for ( StatusCodeMatcher code : statusCodeMatcherList) { if (statusCodeRegexes.get(code.getId()).matcher(statusCode).matches()) { matchedCode=code; break; } } return matchedCode; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableFormatTemplates.java,ImmutableFormatTemplates,"private  (List<StatusCodeMatcher> statusCodes){ formatTemplates.clear(); for ( StatusCodeMatcher statusCode : statusCodes) { for ( Message message : statusCode.getMessage()) { final String statusCodeId=statusCode.getId(); final String href=message.getHref(); final String stringTemplate=!StringUtils.isBlank(href) ? new HrefFileReader().read(href statusCodeId) : message.getValue(); final String mediaType=message.getMediaType(); final String contentType=message.getContentType().toUpperCase(); final HttpLogFormatterState state=contentType.contains(""JSON"") ? HttpLogFormatterState.JSON : contentType.contains(""XML"") ? HttpLogFormatterState.XML : HttpLogFormatterState.PLAIN; formatTemplates.put(statusCodeId + mediaType new HttpLogFormatter(stringTemplate state)); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableFormatTemplates.java,build,public static ImmutableFormatTemplates  (List<StatusCodeMatcher> statusCodes){ return new ImmutableFormatTemplates(statusCodes); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ImmutableFormatTemplates.java,getMatchingLogFormatter,public HttpLogFormatter  (String statusCodeId String mediaType){ return formatTemplates.get(statusCodeId + mediaType); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\MessageFilter.java,filterByMediaType,public static Message  (List<Message> messages List<MediaType> mediaTypes){ Message wildcard=null; if (messages != null && mediaTypes != null) { for ( MediaType mediaType : mediaTypes) { for ( Message message : messages) { final String messageMediaType=message.getMediaType(); if (StringUtils.equalsIgnoreCase(messageMediaType mediaType.getValue())) { return message; } if (wildcard == null && StringUtils.equalsIgnoreCase(messageMediaType MimeType.WILDCARD.getName())) { wildcard=message; } } } } return wildcard; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,MetricsServiceImpl,@Inject public  (ConfigurationService configurationService HealthCheckService healthCheckService){ this.configurationService=configurationService; this.healthCheckServiceProxy=healthCheckService.register(); this.metricRegistry=new MetricRegistry(); this.j
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,addGraphiteServer,private void  (String host int port long period String prefix) throws IOException { Graphite graphite=new Graphite(host port); GraphiteReporter reporter=GraphiteReporter.forRegistry(metricRegistry).prefixedWith(MetricRegistry.name(prefix NetUtilities.bestGuessHostname())).build(graphite); reporter.start(period TimeUnit.SECONDS); synchronized (listGraphite) { listGraphite.add(reporter); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,configurationUpdated,@Override public void  (MetricsConfiguration metricsC){ shutdownGraphite(); jmxReporter.stop(); if (metricsC.getGraphite() != null) { for ( GraphiteServer gs : metricsC.getGraphite().getServer()) { try { addGraphiteServer(gs.getHost() gs.getPort().intValu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,createSummingMeterFactory,@Override public AggregateMeterFactory  (String namePrefix){ return new SummingMeterFactory(metricRegistry namePrefix); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,destroy,@PreDestroy @Override public void  (){ configurationService.unsubscribeFrom(DEFAULT_CONFIG_NAME metricsCfgListener); jmxReporter.stop(); shutdownGraphite(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,getRegistry,@Override public MetricRegistry  (){ return metricRegistry; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,init,"@PostConstruct public void  (){ healthCheckServiceProxy.reportIssue(METRICS_SERVICE_CONFIG_REPORT ""Metrics Service Configuration Error"" Severity.BROKEN); URL xsdURL=getClass().getResource(""/META-INF/schema/metrics/metrics.xsd""); configurationService.subsc"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,isEnabled,public boolean  (){ return enabled; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,isInitialized,@Override public boolean  (){ return initialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,setEnabled,public void  (boolean b){ this.enabled=b; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImpl.java,shutdownGraphite,private void  (){ synchronized (listGraphite) { for ( GraphiteReporter graphite : listGraphite) { graphite.stop(); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\Clusters.java,Clusters,public  (SystemModel config){ domains=new HashMap<>(); for ( Cluster domain : config.getReposeCluster()) { domains.put(domain.getId() new ClusterWrapper(domain)); } for ( Cluster domain : config.getServiceCluster()) { domains.put(domain.getId() new ClusterWrapper(domain)); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\Clusters.java,getDomain,public ClusterWrapper  (String id){ return domains.get(id); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,ResponseMessageServiceImpl,@Inject public  (ConfigurationService configurationService){ this.configurationService=configurationService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,configSetToIfEmpty,private boolean  (StatusCodeMatcher matchedCode){ return StringUtils.equalsIgnoreCase(matchedCode.getOverwrite().value() OverwriteType.IF_EMPTY.value()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,configurationUpdated,@Override public void  (ResponseMessagingConfiguration configurationObject){ setInitialized(); updateConfiguration(configurationObject.getStatusCode()); isInitialized=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,getHttpLogFormatter,private HttpLogFormatter  (StatusCodeMatcher matchedCode String preferredMediaType){ HttpLogFormatter httpLogFormatter=null; if (matchedCode != null && preferredMediaType != null) { configurationLock.lock(readKey); try { httpLogFormatter=immutableFormatTemplates.getMatchingLogFormatter(matchedCode.getId() preferredMediaType); } finally { configurationLock.unlock(readKey); } } return httpLogFormatter; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,getMatchingStatusCode,private StatusCodeMatcher  (String responseCode){ StatusCodeMatcher matchedCode=null; configurationLock.lock(readKey); try { if (immutableStatusCodes != null) { matchedCode=immutableStatusCodes.getMatchingStatusCode(responseCode); } } finally { configurationLock.unlock(readKey); } return matchedCode; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,handle,"@Override public void  (HttpServletRequest request HttpServletResponseWrapper response) throws IOException { if (!isInitialized()) { response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE ""Error creating Response Messaging service.""); return; } fin"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,hasBody,"private boolean  (HttpServletResponseWrapper response){ boolean hasBody=false; try { hasBody=response.getOutputStreamAsInputStream().available() > 0; } catch ( IOException e) { LOG.warn(""Unable to retrieve response body input stream"" e); } return hasBody; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,init,"@PostConstruct public void  (){ try { URL xsdURL=getClass().getResource(""/META-INF/schema/response-messaging/response-messaging.xsd""); configurationService.subscribeTo(""response-messaging.cfg.xml"" xsdURL configListener ResponseMessagingConfiguration.class"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,overwriteResponseBody,private void  (HttpServletResponseWrapper response final String formattedOutput String contentType) throws IOException { response.resetError(); response.resetBuffer(); response.setHeader(HttpHeaders.CONTENT_TYPE contentType); response.setContentLength(formattedOutput.length()); response.getWriter().write(formattedOutput); response.getWriter().flush(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,setInitialized,@Override public void  (){ this.initialized=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\rms\ResponseMessageServiceImpl.java,updateConfiguration,@Override public void  (List<StatusCodeMatcher> statusCodeMatchers){ configurationLock.lock(updateKey); try { immutableStatusCodes=ImmutableStatusCodes.build(statusCodeMatchers); immutableFormatTemplates=ImmutableFormatTemplates.build(statusCodeMatchers);
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,RoundRobinRoutingService,@Inject public  (ConfigurationService configurationService){ configListener=new PowerApiConfigListener(); this.configurationService=configurationService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,afterPropertiesSet,"@PostConstruct public void  (){ URL xsdURL=getClass().getResource(""/META-INF/schema/system-model/system-model.xsd""); configurationService.subscribeTo(""system-model.cfg.xml"" xsdURL configListener SystemModel.class); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,configurationUpdated,@Override public void  (SystemModel configurationObject){ config=configurationObject; domains=new Clusters(config); isInitialized=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,destroy,"@PreDestroy public void  (){ configurationService.unsubscribeFrom(""system-model.cfg.xml"" configListener); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,getRoutableNode,"@Override public Node  (String domainId){ ClusterWrapper domain=domains.getDomain(domainId); if (domain != null) { return domain.getNextNode(); } LOG.debug(""no route-able node found  returning null""); return null; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\RoundRobinRoutingService.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\ClusterWrapper.java,ClusterWrapper,"public  (Cluster domain){ if (domain == null) { throw new IllegalArgumentException(""Domain cannot be null""); } this.nodes=domain.getNodes() != null ? domain.getNodes().getNode() : new ArrayList<>(); this.nodeCount=nodes.size(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\ClusterWrapper.java,getNextNode,public Node  (){ synchronized (nodes) { if (currentIndex == Integer.MAX_VALUE) { currentIndex=0; } return getNode(currentIndex++); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\routing\robin\ClusterWrapper.java,getNode,public Node  (int index){ return nodeCount > 0 && index >= 0 ? nodes.get(index % nodeCount) : null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\ReposeBanner.java,print,"public static void  (Logger log){ try { final InputStream bannerInputStream=ReposeBanner.class.getResourceAsStream(""/repose.banner""); Scanner s=new Scanner(bannerInputStream).useDelimiter(""\\A""); if (s.hasNext()) { log.info(""\n"" + s.next()); } else { log.warn(""Unable to find the beautiful narwhal banner. This is a bad thing.""); } } catch ( Exception e) { LOG.warn(""NON-FATAL - Unable to log the beautiful narwhal banner. Sad day."" e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\threading\impl\ThreadingServiceImpl.java,ThreadingServiceImpl,public  (){ liveThreadReferences=new HashSet<>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\services\threading\impl\ThreadingServiceImpl.java,newThread,@Override public Thread  (Runnable r String name){ final Thread t=new Thread(r name); liveThreadReferences.add(new WeakReference<>(t)); return t; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,getContextForFilter,"public static AbstractApplicationContext  (ApplicationContext parentContext ClassLoader loader String className String contextName) throws ClassNotFoundException { AnnotationConfigApplicationContext filterContext=new AnnotationConfigApplicationContext(); filterContext.setClassLoader(loader); filterContext.setParent(parentContext); filterContext.setDisplayName(contextName); LOG.debug(""Creating Filter Context using parent context: {}"" parentContext.getDisplayName()); Class tehFilter=loader.loadClass(className); String packageToScan=tehFilter.getPackage().getName(); LOG.debug(""Filter Context scan package: {}"" packageToScan); PropertySourcesPlaceholderConfigurer propConfig=new PropertySourcesPlaceholderConfigurer(); propConfig.setEnvironment(filterContext.getEnvironment()); filterContext.addBeanFactoryPostProcessor(propConfig); filterContext.scan(packageToScan); filterContext.refresh(); if (LOG.isTraceEnabled()) { for ( String s : filterContext.getBeanDefinitionNames()) { LOG.trace(""FilterContext bean: {}"" s); } } return filterContext; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,getCoreContext,"public ApplicationContext  (){ if (!configured) { LOG.error(""Core Context requested before configured!""); } return coreContext; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,getInstance,public static CoreSpringProvider  (){ return instance; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,getNodeContext,"public AbstractApplicationContext  (String clusterId String nodeId){ AnnotationConfigApplicationContext nodeContext=new AnnotationConfigApplicationContext(); nodeContext.setParent(getCoreContext()); nodeContext.setDisplayName(clusterId + ""-"" + nodeId+ ""-context""); Properties props=new Properties(); props.put(ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.NODE.NODE_ID) nodeId); props.put(ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.NODE.CLUSTER_ID) clusterId); PropertiesPropertySource mps=new PropertiesPropertySource(clusterId + ""-"" + nodeId+ ""-""+ ""props"" props); nodeContext.getEnvironment().getPropertySources().addFirst(mps); if (LOG.isTraceEnabled()) { for ( PropertySource source : nodeContext.getEnvironment().getPropertySources()) { EnumerablePropertySource eps=(EnumerablePropertySource)source; LOG.trace(""NODEContext - Property names for {}: {}"" eps.getName() eps.getPropertyNames()); } } PropertySourcesPlaceholderConfigurer propConfig=new PropertySourcesPlaceholderConfigurer(); propConfig.setEnvironment(nodeContext.getEnvironment()); nodeContext.addBeanFactoryPostProcessor(propConfig); String nodeServicePackage=conf.getString(""nodeSpringContextPath""); LOG.debug(""Creating node service context for {}-{}"" clusterId nodeId); LOG.debug(""Node service annotation scanning package {}"" nodeServicePackage); nodeContext.scan(nodeServicePackage); nodeContext.refresh(); return nodeContext; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\ReposeJmxNamingStrategy.java,ReposeJmxNamingStrategy,"public  (AnnotationJmxAttributeSource attributeSource){ super(attributeSource); this.attributeSource=attributeSource; this.jmxDomain=NetUtilities.bestGuessHostname(); LOG.info(""Configuring Spring JMX naming strategy with domain {}"" jmxDomain); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\ReposeJmxNamingStrategy.java,getObjectName,@Override public ObjectName  (Object managedBean String beanKey) throws MalformedObjectNameException { Class<?> managedClass=AopUtils.getTargetClass(managedBean); ManagedResource mr=this.attributeSource.getManagedResource(managedClass); if (mr != null && 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\core\spring\CoreSpringProvider.java,initializeCoreContext,"public void  (String configRoot boolean insecure){ if (!configured) { String reposeVersion=conf.getString(""reposeVersion""); String coreScanPackage=conf.getString(""coreSpringContextPath""); LOG.debug(""Creating Core spring provider!""); LOG.debug(""Core service annotation scanning package {}"" coreScanPackage); LOG.debug(""Config Root: {}"" configRoot); LOG.debug("" Insecurity: {}"" insecure); LOG.info(""Starting up Repose Core Spring Context (logging may be redirected as the logging service comes up)""); coreContext=new AnnotationConfigApplicationContext(); coreContext.setDisplayName(""ReposeCoreContext""); Properties props=new Properties(); props.put(ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.CORE.CONFIG_ROOT) configRoot); props.put(ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.CORE.INSECURE) insecure); props.put(ReposeSpringProperties.stripSpringValueStupidity(ReposeSpringProperties.CORE.REPOSE_VERSION) reposeVersion); PropertiesPropertySource mps=new PropertiesPropertySource(""core-properties"" props); coreContext.getEnvironment().getPropertySources().addFirst(mps); PropertySourcesPlaceholderConfigurer propConfig=new PropertySourcesPlaceholderConfigurer(); propConfig.setEnvironment(coreContext.getEnvironment()); coreContext.addBeanFactoryPostProcessor(propConfig); if (LOG.isTraceEnabled()) { for ( PropertySource source : coreContext.getEnvironment().getPropertySources()) { EnumerablePropertySource eps=(EnumerablePropertySource)source; LOG.trace(""COREContext - Property names for {}: {}"" eps.getName() eps.getPropertyNames()); } } coreContext.scan(coreScanPackage); if (conf.hasPath(""extendedSpringContextPath"")) { final String extendedServicePackage=conf.getString(""extendedSpringContextPath""); coreContext.scan(extendedServicePackage); LOG.info(""Scanning additional service path = {}"" extendedServicePackage); } GenericBeanDefinition mBeanServer=new GenericBeanDefinition(); mBeanServer.setBeanClass(MBeanServerFactoryBean.class); MutablePropertyValues mBeanServerProps=new MutablePropertyValues(); mBeanServerProps.add(""locateExistingServerIfPossible"" true); mBeanServer.setPropertyValues(mBeanServerProps); coreContext.registerBeanDefinition(""reposeMBeanServer"" mBeanServer); GenericBeanDefinition jmxAttributeSource=new GenericBeanDefinition(); jmxAttributeSource.setBeanClass(AnnotationJmxAttributeSource.class); coreContext.registerBeanDefinition(""jmxAttributeSource"" jmxAttributeSource); GenericBeanDefinition jmxNamingStrategy=new GenericBeanDefinition(); jmxNamingStrategy.setBeanClass(ReposeJmxNamingStrategy.class); jmxNamingStrategy.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_CONSTRUCTOR); GenericBeanDefinition mBeanExporter=new GenericBeanDefinition(); mBeanExporter.setBeanClass(AnnotationMBeanExporter.class); MutablePropertyValues mBeanExporterProps=new MutablePropertyValues(); mBeanExporterProps.add(""autodetect"" true); mBeanExporterProps.add(""server"" mBeanServer); mBeanExporterProps.add(""namingStrategy"" jmxNamingStrategy); mBeanExporter.setPropertyValues(mBeanExporterProps); coreContext.registerBeanDefinition(""exporter"" mBeanExporter); coreContext.refresh(); ReposeBanner.print(LOG); coreContext.registerShutdownHook(); configured=true; } else { LOG.error(""Additional call to initialize Core Context ignored!""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,EntityEnclosingDelete,public  (URI uri){ super.setURI(uri); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,EntityEnclosingMethodWrapper,public  (HttpEntityEnclosingRequestBase method){ this.method=method; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,HttpComponentFactory, (String method Class<? extends HttpRequestBase> httpClass Class<? extends HttpComponentProcessableRequest> wrapperClass){ this.method=method; this.httpClass=httpClass; this.wrapperClass=wrapperClass; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,HttpMethodBaseWrapper,public  (HttpRequestBase method){ this.method=method; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,getInstance,private static HttpComponentProcessableRequest  (HttpComponentFactory methodFactory URI uri){ HttpComponentProcessableRequest request=null; if (methodFactory != null) { try { Constructor<? extends HttpRequestBase> httpConstructor=methodFactory.httpClass.getConstructor(URI.class); HttpRequestBase httpMethod=httpConstructor.newInstance(uri); Constructor<? extends HttpComponentProcessableRequest> constructor=(Constructor<? extends HttpComponentProcessableRequest>)methodFactory.wrapperClass.getConstructors()[0]; request=constructor.newInstance(httpMethod); } catch ( InvocationTargetException|NoSuchMethodException|IllegalAccessException|InstantiationException ex) { LOG.error(CONSTRUCTION_ERROR ex); } } return request; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,getMethod,"@Override public String  (){ return ""DELETE""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentFactory.java,process,@Override public HttpRequestBase  (HttpComponentRequestProcessor processor) throws IOException { return processor.process(method); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,HttpComponentInputStream,"public  (HttpEntity entity) throws IOException { if (entity == null) { throw new IllegalArgumentException(""Entity cannot be null""); } this.entity=entity; source=entity.getContent(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,available,@Override public int  () throws IOException { if (source == null) { return 0; } return source.available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,close,@Override public void  () throws IOException { if (entity != null) { EntityUtils.consume(entity); } if (source != null) { source.close(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,mark,@Override public synchronized void  (int i){ if (source != null) { source.mark(i); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,markSupported,@Override public boolean  (){ if (source != null) { return source.markSupported(); } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,read,@Override public int  (byte[] bytes int i int i1) throws IOException { if (source == null) { return -1; } return source.read(bytes i i1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,reset,@Override public synchronized void  () throws IOException { if (source != null) { source.reset(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStream.java,skip,@Override public long  (long l) throws IOException { if (source == null) { return -1; } return source.skip(l); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,HttpComponentRequestProcessor,public  (HttpServletRequest request URI host boolean rewriteHostHeader String chunkedEncoding){ this.sourceRequest=request; this.targetHost=host; this.rewriteHostHeader=rewriteHostHeader; this.chunkedEncoding=chunkedEncoding; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,getEntityLength,"private int  () throws IOException { int entityLength=-1; switch (chunkedEncoding.toLowerCase()) { case ""true"": case ""1"": break; case ""auto"": if (StringUtils.equalsIgnoreCase(sourceRequest.getHeader(""transfer-encoding"") ""chunked"")) { break; } case ""false"": case ""0"": entityLength=getSizeOfRequestBody(); break; default : LOG.warn(""Invalid chunked encoding value -- using chunked encoding""); break; } return entityLength; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,getSizeOfRequestBody,private int  () throws IOException { final ByteArrayOutputStream sourceEntity=new ByteArrayOutputStream(); RawInputStreamReader.instance().copyTo(sourceRequest.getInputStream() sourceEntity); final ServletInputStream readableEntity=new BufferedServletInputStream(new ByteArrayInputStream(sourceEntity.toByteArray())); sourceRequest=new HttpServletRequestWrapper(sourceRequest readableEntity); return sourceEntity.size(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,getUri,public URI  (String target) throws URISyntaxException { URIBuilder builder=new URIBuilder(target); setQueryString(builder); return builder.build(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,process,public synchronized HttpRequestBase  (HttpEntityEnclosingRequestBase method) throws IOException { final int contentLength=getEntityLength(); setHeaders(method); method.setEntity(new InputStreamEntity(sourceRequest.getInputStream() contentLength)); return method; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,processHeaderValue,"private String  (String headerName String headerValue){ String result=headerValue; if (rewriteHostHeader && headerName.equalsIgnoreCase(HttpHeaders.HOST)) { result=targetHost.getHost() + "":"" + targetHost.getPort(); } return result; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,setHeaders,private void  (HttpRequestBase method){ final Enumeration<String> headerNames=sourceRequest.getHeaderNames(); while (headerNames.hasMoreElements()) { final String headerName=headerNames.nextElement(); if (excludeHeader(headerName)) { continue; } final Enumeration<String> headerValues=sourceRequest.getHeaders(headerName); while (headerValues.hasMoreElements()) { String headerValue=headerValues.nextElement(); method.addHeader(headerName processHeaderValue(headerName headerValue)); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessor.java,setQueryString,private void  (URIBuilder builder) throws URISyntaxException { String queryString=sourceRequest.getQueryString(); if (StringUtils.isNotBlank(queryString)) { builder.setQuery(queryString); if (builder.getQueryParams().isEmpty()) { builder.removeQuery(); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,HttpComponentResponseProcessor,public  (HttpResponse httpResponse HttpServletResponse response int responseCode){ this.response=response; this.responseCode=responseCode; this.httpResponse=httpResponse; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,process,public void  () throws IOException { response.setStatus(responseCode); if (responseCode == HttpServletResponse.SC_NOT_MODIFIED) { response.setIntHeader(CONTENT_LENGTH 0); } else { setResponseHeaders(); setResponseBody(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,sendTranslatedRedirect,public void  (int statusCode) throws HttpException  IOException { setResponseHeaders(); response.setStatus(statusCode); setResponseBody(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,setResponseBody,private void  () throws IOException { HttpEntity entity=httpResponse.getEntity(); if (entity != null) { final OutputStream clientOut=response.getOutputStream(); entity.writeTo(clientOut); clientOut.flush(); EntityUtils.consume(entity); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessor.java,setResponseHeaders,private void  () throws IOException { for ( Header header : httpResponse.getAllHeaders()) { String name=header.getName(); if (!EXCLUDE_HEADERS_SET.contains(name.toLowerCase())) { response.addHeader(name header.getValue()); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,RequestProxyServiceImpl,@Inject public  (ConfigurationService configurationService HealthCheckService healthCheckService HttpClientService httpClientService @Value(ReposeSpringProperties.NODE.CLUSTER_ID) String clusterId @Value(ReposeSpringProperties.NODE.NODE_ID) String nodeId)
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,configurationUpdated,@Override public void  (SystemModel config){ SystemModelInterrogator systemModelInterrogator=new SystemModelInterrogator(clusterId nodeId); Optional<ReposeCluster> localCluster=systemModelInterrogator.getLocalCluster(config); if (localCluster.isPresent())
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,delete,@Override public ServiceClientResponse  (String baseUri String extraUri Map<String String> headers String connPoolId){ HttpDelete delete=new HttpDelete(StringUriUtilities.appendPath(baseUri extraUri)); setHeaders(delete headers); return execute(delete con
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,destroy,"@PreDestroy public void  (){ healthCheckServiceProxy.deregister(); configurationService.unsubscribeFrom(""system-model.cfg.xml"" systemModelListener); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,execute,"@SuppressWarnings(""squid:S2093"") private ServiceClientResponse  (HttpRequestBase base String connPoolId){ HttpClientContainer httpClientContainer=getClient(connPoolId); try { HttpResponse httpResponse=httpClientContainer.getHttpClient().execute(base); Htt"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,executeProxyRequest,"private int  (HttpClient httpClient HttpRequestBase httpMethodProxyRequest HttpServletResponse response) throws IOException  HttpException { try { HttpResponse httpResponse=httpClient.execute(httpMethodProxyRequest); int responseCode=httpResponse.getStatusLine().getStatusCode(); HttpComponentResponseProcessor responseProcessor=new HttpComponentResponseProcessor(httpResponse response responseCode); if (responseCode >= HttpServletResponse.SC_MULTIPLE_CHOICES && responseCode < HttpServletResponse.SC_NOT_MODIFIED) { responseProcessor.sendTranslatedRedirect(responseCode); } else { responseProcessor.process(); } return responseCode; } catch ( ClientProtocolException ex) { if (Throwables.getRootCause(ex) instanceof ReadLimitReachedException) { LOG.error(""Error reading request content"" ex); response.sendError(HttpServletResponse.SC_REQUEST_ENTITY_TOO_LARGE ""Error reading request content""); } else { LOG.error(""Error processing outgoing request"" ex); return -1; } } return 1; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,get,@Override public ServiceClientResponse  (String baseUri String extraUri Map<String String> headers String connPoolId){ return get(StringUriUtilities.appendPath(baseUri extraUri) headers connPoolId); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,getClient,private HttpClientContainer  (String clientId){ return httpClientService.getClient(clientId); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,getProxiedHost,"private HttpHost  (String targetHost) throws HttpException { try { return URIUtils.extractHost(new URI(targetHost)); } catch ( URISyntaxException ex) { LOG.error(""Invalid target host url: "" + targetHost ex); } throw new HttpException(""Invalid target host""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,init,"@PostConstruct public void  (){ configurationService.subscribeTo(""system-model.cfg.xml"" systemModelListener SystemModel.class); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,patch,@Override public ServiceClientResponse  (String baseUri String path Map<String String> headers byte[] body String connPoolId){ HttpPatch patch=new HttpPatch(StringUriUtilities.appendPath(baseUri path)); setHeaders(patch headers); if (body != null && body.
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,proxyRequest,@Override public int  (String targetHost HttpServletRequest request HttpServletResponse response String connPoolId) throws IOException { HttpClientContainer httpClientContainer=getClient(connPoolId); try { final String chunkedEncoding=(String)httpClientCo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,put,@Override public ServiceClientResponse  (String baseUri String path Map<String String> headers byte[] body String connPoolId){ return put(StringUriUtilities.appendPath(baseUri path) headers body connPoolId); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,setHeaders,private void  (HttpRequestBase base Map<String String> headers){ final Set<Map.Entry<String String>> entries=headers.entrySet(); for ( Map.Entry<String String> entry : entries) { base.addHeader(entry.getKey() entry.getValue()); } String traceGUID=MDC.get(TracingKey.TRACING_KEY); if (!StringUtils.isEmpty(traceGUID)) { Header viaHeader=base.getFirstHeader(CommonHttpHeader.VIA); base.addHeader(CommonHttpHeader.TRACE_GUID TracingHeaderHelper.createTracingHeader(traceGUID viaHeader != null ? viaHeader.getValue() : null)); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\httpcomponent\RequestProxyServiceImpl.java,setRewriteHostHeader,@Override public void  (boolean value){ this.rewriteHostHeader=value; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,RequestHeaderServiceImpl,@Inject public  (ConfigurationService configurationService ContainerConfigurationService containerConfigurationService HealthCheckService healthCheckService @Value(ReposeSpringProperties.NODE.CLUSTER_ID) String clusterId @Value(ReposeSpringProperties.NODE
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,configurationUpdated,@Override public void  (SystemModel systemModel){ final SystemModelInterrogator interrogator=new SystemModelInterrogator(clusterId nodeId); Optional<Node> ln=interrogator.getLocalNode(systemModel); if (ln.isPresent()) { hostname=ln.get().getHostname(); is
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,destroy,"@PreDestroy public void  (){ healthCheckServiceProxy.deregister(); configurationService.unsubscribeFrom(""system-model.cfg.xml"" systemModelListener); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,init,"@PostConstruct public void  (){ URL systemModelXsdURL=getClass().getResource(""/META-INF/schema/system-model/system-model.xsd""); configurationService.subscribeTo(""system-model.cfg.xml"" systemModelXsdURL systemModelListener SystemModel.class); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,setVia,@Override public void  (HttpServletRequestWrapper request){ final StringBuilder builder=new StringBuilder(); builder.append(HttpServletRequestUtil.getProtocolVersion(request)); final Optional<String> requestVia=containerConfigurationService.getRequestVia(
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\request\RequestHeaderServiceImpl.java,setXForwardedFor,@Override public void  (HttpServletRequestWrapper request){ request.addHeader(CommonHttpHeader.X_FORWARDED_FOR request.getRemoteAddr()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,extractHostPath,"private static URL  (HttpServletRequest request) throws MalformedURLException { final StringBuilder myHostName=new StringBuilder(request.getScheme()).append(""://"").append(request.getServerName()); myHostName.append("":"").append(request.getServerPort()); myHostName.append(request.getContextPath()); return new URL(myHostName.toString()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,fixPathPrefix,private static String  (String locationPath String requestedPrefix String addedPrefix){ String prefixToRemove=getAbsolutePath(addedPrefix); String prefixToAdd=getAbsolutePath(requestedPrefix); String result=locationPath; if (locationPath.startsWith(prefixToRemove)) { result=prefixToAdd + getAbsolutePath(locationPath.substring(prefixToRemove.length())); } return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,getAbsolutePath,"private static String  (String inPath){ if (StringUtils.isBlank(inPath)) { return """"; } return !inPath.startsWith(""/"") ? ""/"" + inPath : inPath; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,getDefaultPort,private static int  (String scheme){ if (HTTPS.equalsIgnoreCase(scheme)) { return DEFAULT_HTTPS_PORT; } if (HTTP.equalsIgnoreCase(scheme)) { return DEFAULT_HTTP_PORT; } return -1; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,getLocationUrl,private static URL  (HttpServletResponse servletResponse) throws MalformedURLException { String locationHeader=servletResponse.getHeader(HttpHeaders.LOCATION); if (StringUtils.isNotBlank(locationHeader)) { return new URL(locationHeader); } return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,getPort,private static int  (URL url){ if (url.getPort() == -1) { return getDefaultPort(url.getProtocol()); } return url.getPort(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,setLocationHeader,public static void  (HttpServletRequest originalRequest HttpServletResponse servletResponse String destinationUri String requestedContext String rootPath) throws MalformedURLException { final URL locationUrl=getLocationUrl(servletResponse); if (locationUrl == null) { return; } final URL requestedHostUrl=extractHostPath(originalRequest); final URL proxiedHostUrl=new TargetHostInfo(destinationUri).getProxiedHostUrl(); final String translatedLocationUrl=translateLocationUrl(locationUrl proxiedHostUrl requestedHostUrl requestedContext rootPath); if (translatedLocationUrl != null) { servletResponse.setHeader(HttpHeaders.LOCATION translatedLocationUrl); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,shouldRewriteLocation,private static boolean  (URL locationUrl URL proxiedHostUrl URL requestedHost){ if (proxiedHostUrl == null || locationUrl.getHost().equals(proxiedHostUrl.getHost()) && getPort(locationUrl) == getPort(proxiedHostUrl)) { return true; } if (locationUrl.getHost().equals(requestedHost.getHost()) && getPort(locationUrl) == getPort(requestedHost)) { return true; } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\LocationHeaderBuilder.java,translateLocationUrl,"private static String  (URL locationUrl URL proxiedHostUrl URL requestedHost String requestedContext String proxiedRootPath){ StringBuilder buffer=new StringBuilder(); if (locationUrl == null) { return null; } if (StringUtils.isEmpty(locationUrl.getHost())) { return requestedContext; } if (shouldRewriteLocation(locationUrl proxiedHostUrl requestedHost)) { buffer.append(requestedHost.getProtocol()).append(""://"").append(requestedHost.getHost()); if (requestedHost.getPort() != DEFAULT_HTTP_PORT) { buffer.append("":"").append(requestedHost.getPort()); } buffer.append(fixPathPrefix(locationUrl.getFile() requestedContext proxiedRootPath)); } return buffer.length() == 0 ? locationUrl.toExternalForm() : buffer.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\EmptyServlet.java,service,"@Override protected void  (HttpServletRequest req HttpServletResponse resp) throws ServletException  IOException { LOG.debug(""Hit the empty servlet at the end of the chain""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\ResponseHeaderServiceImpl.java,ResponseHeaderServiceImpl,@Inject public  (ContainerConfigurationService containerConfigurationService @Value(ReposeSpringProperties.CORE.REPOSE_VERSION) String reposeVersion){ this.containerConfigurationService=containerConfigurationService; this.reposeVersion=reposeVersion; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\ResponseHeaderServiceImpl.java,cleanPath,"private String  (String uri){ return uri == null ? """" : uri.split(""\\?"")[0]; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\ResponseHeaderServiceImpl.java,fixLocationHeader,@Override public void  (HttpServletRequest originalRequest HttpServletResponse response RouteDestination destination String destinationLocationUri String proxiedRootContext){ String destinationUri=cleanPath(destinationLocationUri); if (!destinationUri.mat
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\nodeservice\response\ResponseHeaderServiceImpl.java,setVia,@Override public void  (HttpServletRequest request HttpServletResponse response){ final Optional<String> responseVia=containerConfigurationService.getResponseVia(); final boolean includeViaReposeVersion=containerConfigurationService.includeViaReposeVersio
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,FilterConfigWrapper,"public  (ServletContext servletContext FilterType filterType String config){ if (filterType == null) { throw new IllegalArgumentException(""filter type cannot be null""); } this.servletContext=servletContext; this.filterType=filterType; this.config=config; initParams=new HashMap<>(); initParams.put(""filter-config"" config); for ( ParamValueType param : filterType.getInitParam()) { initParams.put(param.getParamName().getValue() param.getParamValue().getValue()); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,getFilterConfig,public String  (){ return config; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,getFilterName,@Override public String  (){ return filterType.getFilterName().getValue(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,getInitParameter,@Override public String  (String name){ return initParams.get(name); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,getInitParameterNames,@Override public Enumeration<String>  (){ return Collections.enumeration(initParams.keySet()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterConfigWrapper.java,getServletContext,@Override public ServletContext  (){ return servletContext; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,FilterContext,"public  (Filter filter AbstractApplicationContext filterAppContext org.openrepose.core.systemmodel.config.Filter filterConfig){ this.filter=filter; this.filterAppContext=filterAppContext; this.filterConfig=filterConfig; if (filterConfig != null && filterConfig.getUriRegex() != null) { filterConfig.getName(); this.name=filterConfig.getName(); this.uriRegex=filterConfig.getUriRegex(); this.uriPattern=Pattern.compile(uriRegex); } else { this.name=""n/a""; this.uriRegex="".*""; this.uriPattern=Pattern.compile(this.uriRegex); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,destroy,@Override public void  (){ if (filter != null) { filter.destroy(); } if (filterAppContext != null) { filterAppContext.close(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,getFilter,public Filter  (){ return filter; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,getFilterAppContext,public AbstractApplicationContext  (){ return filterAppContext; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,getFilterConfig,public org.openrepose.core.systemmodel.config.Filter  (){ return filterConfig; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,getUriPattern,public Pattern  (){ return uriPattern; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,getUriRegex,public String  (){ return uriRegex; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContext.java,isFilterAvailable,public boolean  (){ return filter != null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\FilterInitializationException.java,FilterInitializationException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContextFactory.java,FilterContextFactory,@Inject public  (ApplicationContext applicationContext ClassLoaderManagerService classLoaderManagerService){ this.applicationContext=applicationContext; this.classLoaderManagerService=classLoaderManagerService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContextFactory.java,buildFilterContexts,"public List<FilterContext>  (ServletContext servletContext List<Filter> filtersToCreate) throws FilterInitializationException { final List<FilterContext> filterContexts=new LinkedList<>(); for ( org.openrepose.core.systemmodel.config.Filter papiFilter : filtersToCreate) { if (classLoaderManagerService.hasFilter(papiFilter.getName())) { final FilterContext context=loadFilterContext(papiFilter classLoaderManagerService.getLoadedApplications() servletContext); filterContexts.add(context); } else { LOG.error(""Unable to satisfy requested filter chain - none of the loaded artifacts supply a filter named "" + papiFilter.getName()); throw new FilterInitializationException(""Unable to satisfy requested filter chain - none of the loaded artifacts supply a filter named "" + papiFilter.getName()); } } return filterContexts; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContextFactory.java,getUniqueContextName,"private String  (Filter filterInfo){ StringBuilder sb=new StringBuilder(); if (filterInfo.getId() != null) { sb.append(filterInfo.getId()).append(""-""); } sb.append(filterInfo.getName()).append(""-""); sb.append(UUID.randomUUID().toString()); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\filtercontext\FilterContextFactory.java,loadFilterContext,"@SuppressWarnings(""squid:S2259"") private FilterContext  (Filter filter Collection<EarClassLoaderContext> loadedApplications ServletContext servletContext) throws FilterInitializationException { FilterType filterType=null; ClassLoader filterClassLoader=nul"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\InvalidMethodException.java,InvalidMethodException,public  (String message Throwable exception){ super(message exception); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\intrafilterlogging\RequestLog.java,RequestLog,"public  (HttpServletRequest httpServletRequest Filter filter) throws IOException { preamble=""Intrafilter Request Log""; timestamp=new DateTime().toString(); currentFilter=StringUtils.isEmpty(filter.getId()) ? filter.getName() : filter.getId() + ""-"" + filter.getName(); httpMethod=httpServletRequest.getMethod(); requestURI=httpServletRequest.getRequestURI(); headers=convertRequestHeadersToMap(httpServletRequest); try { ServletInputStream inputStream=httpServletRequest.getInputStream(); if (inputStream.markSupported()) { inputStream.mark(Integer.MAX_VALUE); requestBody=IOUtils.toString(inputStream); inputStream.reset(); } else { LOG.warn(""Unable to populate request body - {} does not support mark/reset."" inputStream); } } catch ( IOException e) { LOG.warn(""Unable to populate request body."" e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\intrafilterlogging\RequestLog.java,convertRequestHeadersToMap,"private Map<String String>  (HttpServletRequest httpServletRequest){ Map<String String> headerMap=new LinkedHashMap<>(); List<String> headerNames=Collections.list(httpServletRequest.getHeaderNames()); for ( String headerName : headerNames) { StringJoiner stringJoiner=new StringJoiner("" ""); Collections.list(httpServletRequest.getHeaders(headerName)).forEach(stringJoiner::add); headerMap.put(headerName stringJoiner.toString()); } return headerMap; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\intrafilterlogging\ResponseLog.java,ResponseLog,"public  (HttpServletResponseWrapper wrappedServletResponse Filter filter) throws IOException { preamble=""Intrafilter Response Log""; timestamp=new DateTime().toString(); currentFilter=StringUtils.isEmpty(filter.getId()) ? filter.getName() : filter.getId() + ""-"" + filter.getName(); httpResponseCode=Integer.toString(wrappedServletResponse.getStatus()); headers=convertResponseHeadersToMap(wrappedServletResponse); responseBody=IOUtils.toString(wrappedServletResponse.getOutputStreamAsInputStream()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\intrafilterlogging\ResponseLog.java,convertResponseHeadersToMap,"private Map<String String>  (HttpServletResponseWrapper wrappedServletResponse){ HashMap<String String> headerMap=new LinkedHashMap<>(); Collection<String> headerNames=wrappedServletResponse.getHeaderNames(); for ( String headerName : headerNames) { StringJoiner stringJoiner=new StringJoiner("" ""); wrappedServletResponse.getHeaders(headerName).forEach(stringJoiner::add); headerMap.put(headerName stringJoiner.toString()); } return headerMap; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,PowerFilterChain,public  (List<FilterContext> filterChainCopy FilterChain containerFilterChain PowerFilterRouter router Optional<MetricsService> metricsService Optional<String> bypassUrl) throws PowerFilterChainException { this.filterChainCopy=new LinkedList<>(filterChainCopy); this.containerFilterChain=containerFilterChain; this.router=router; this.metricsService=metricsService; this.bypassUrl=bypassUrl; splittabelHeaderUtil=new SplittableHeaderUtil(PowerApiHeader.values() OpenStackServiceHeader.values() ExtendedHttpHeader.values()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,convertPojoToJsonString,private String  (Object object) throws IOException { ObjectMapper objectMapper=new ObjectMapper(); objectMapper.setVisibility(PropertyAccessor.FIELD JsonAutoDetect.Visibility.ANY); return objectMapper.writeValueAsString(object); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,doFilter,@Override public void  (ServletRequest servletRequest ServletResponse servletResponse) throws IOException  ServletException { HttpServletRequest httpRequest=(HttpServletRequest)servletRequest; HttpServletResponse httpResponse=(HttpServletResponse)servletR
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,doReposeFilter,"private void  (HttpServletRequest httpRequest HttpServletResponse httpResponse FilterContext filterContext) throws IOException  ServletException { HttpServletRequest maybeWrappedServletRequest=httpRequest; HttpServletResponse maybeWrappedServletResponse=httpResponse; try { boolean isIntraFilterLoggingEnabled=INTRAFILTER_LOG.isTraceEnabled(); if (isIntraFilterLoggingEnabled) { ServletInputStream inputStream=maybeWrappedServletRequest.getInputStream(); if (!inputStream.markSupported()) { ByteArrayOutputStream sourceEntity=new ByteArrayOutputStream(); RawInputStreamReader.instance().copyTo(inputStream sourceEntity); inputStream=new BufferedServletInputStream(new ByteArrayInputStream(sourceEntity.toByteArray())); } maybeWrappedServletRequest=new HttpServletRequestWrapper(maybeWrappedServletRequest inputStream); maybeWrappedServletResponse=new HttpServletResponseWrapper(maybeWrappedServletResponse ResponseMode.PASSTHROUGH ResponseMode.READONLY); INTRAFILTER_LOG.trace(intrafilterRequestLog((HttpServletRequestWrapper)maybeWrappedServletRequest filterContext)); } filterContext.getFilter().doFilter(maybeWrappedServletRequest maybeWrappedServletResponse this); if (isIntraFilterLoggingEnabled) { INTRAFILTER_LOG.trace(intrafilterResponseLog((HttpServletResponseWrapper)maybeWrappedServletResponse filterContext maybeWrappedServletRequest.getHeader(INTRAFILTER_UUID))); } } catch ( Exception ex) { String filterName=filterContext.getFilter().getClass().getSimpleName(); LOG.error(""Failure in filter: "" + filterName + "" - Reason: ""+ ex.getMessage() ex); maybeWrappedServletResponse.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,doRouting,"private void  (HttpServletRequest httpRequest ServletResponse servletResponse){ final HttpServletResponseWrapper wrappedResponse=new HttpServletResponseWrapper((HttpServletResponse)servletResponse MUTABLE PASSTHROUGH); try { if (isResponseOk(wrappedResponse)) { containerFilterChain.doFilter(httpRequest wrappedResponse); } if (isResponseOk(wrappedResponse)) { router.route(new HttpServletRequestWrapper(httpRequest) wrappedResponse); } splitResponseHeaders(wrappedResponse); } catch ( Exception ex) { LOG.error(""Failure in filter within container filter chain. Reason: "" + ex.getMessage() ex); wrappedResponse.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); } finally { wrappedResponse.commitToResponse(); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,getFilterChainForRequest,"private List<FilterContext>  (String uri){ List<FilterContext> filters=new LinkedList<>(); if (bypassUrl.map(url -> Pattern.compile(url).matcher(uri).matches()).orElse(false)) { LOG.debug(""URI: {} matched bypass criteria using empty filter chain"" uri); } else { for ( FilterContext filter : filterChainCopy) { if (filter.getUriPattern() == null || filter.getUriPattern().matcher(uri).matches()) { filters.add(filter); } } } return filters; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,intrafilterRequestLog,private String  (HttpServletRequestWrapper wrappedServletRequest FilterContext filterContext) throws IOException { if (StringUtils.isEmpty(wrappedServletRequest.getHeader(INTRAFILTER_UUID))) { wrappedServletRequest.addHeader(INTRAFILTER_UUID UUID.randomUUID().toString()); } RequestLog requestLog=new RequestLog(wrappedServletRequest filterContext.getFilterConfig()); return convertPojoToJsonString(requestLog); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,intrafilterResponseLog,private String  (HttpServletResponseWrapper wrappedServletResponse FilterContext filterContext String uuid) throws IOException { if (StringUtils.isEmpty(wrappedServletResponse.getHeader(INTRAFILTER_UUID))) { wrappedServletResponse.addHeader(INTRAFILTER_UUID uuid); } ResponseLog responseLog=new ResponseLog(wrappedServletResponse filterContext.getFilterConfig()); return convertPojoToJsonString(responseLog); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,isCurrentFilterChainAvailable,"private boolean  (){ boolean result=true; for ( FilterContext filter : currentFilters) { if (!filter.isFilterAvailable()) { LOG.warn(""Filter is not available for processing requests: "" + filter.getName()); } result&=filter.isFilterAvailable(); } return result; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,isResponseOk,private boolean  (HttpServletResponse response){ return response.getStatus() < HttpServletResponse.SC_INTERNAL_SERVER_ERROR; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,setStartTimeForHttpLogger,private void  (long startTime HttpServletRequest httpRequest){ long start=startTime; if (startTime == 0) { start=System.currentTimeMillis(); } httpRequest.setAttribute(START_TIME_ATTRIBUTE start); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,splitRequestHeaderValues,"private List<String>  (Enumeration<String> headerValues){ List<String> splitHeaders=new ArrayList<>(); while (headerValues.hasMoreElements()) { String headerValue=headerValues.nextElement(); String[] splitValues=headerValue.split("" ""); Collections.addAll(splitHeaders splitValues); } return splitHeaders; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,splitRequestHeaders,private void  (HttpServletRequestWrapper request){ Collections.list(request.getHeaderNames()).stream().filter(splittabelHeaderUtil::isSplittable).forEach(headerName -> { Enumeration<String> headerValues=request.getHeaders(headerName); request.removeHeader(headerName); splitRequestHeaderValues(headerValues).forEach(headerValue -> request.addHeader(headerName headerValue)); } ); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,splitResponseHeaderValues,"private Collection<String>  (Collection<String> headerValues){ List<String> finalValues=new ArrayList<>(); for ( String passedValue : headerValues) { String[] splitValues=passedValue.split("" ""); Collections.addAll(finalValues splitValues); } return finalValues; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,splitResponseHeaders,private void  (HttpServletResponseWrapper httpServletResponseWrapper){ httpServletResponseWrapper.getHeaderNames().stream().filter(splittabelHeaderUtil::isSplittable).forEach(headerName -> { Collection<String> splitValues=splitResponseHeaderValues(httpServletResponseWrapper.getHeaders(headerName)); httpServletResponseWrapper.removeHeader(headerName); splitValues.stream().filter(StringUtils::isNotEmpty).forEach(splitValue -> httpServletResponseWrapper.addHeader(headerName splitValue)); } ); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,startFilterChain,"public void  (HttpServletRequestWrapper wrappedRequest HttpServletResponseWrapper wrappedResponse) throws IOException  ServletException { boolean addTraceHeader=traceRequest(wrappedRequest); boolean useTrace=addTraceHeader || metricsService.isPresent(); tracer=new RequestTracer(useTrace addTraceHeader); currentFilters=getFilterChainForRequest(wrappedRequest.getRequestURI()); filterChainAvailable=isCurrentFilterChainAvailable(); wrappedRequest.setAttribute(""filterChainAvailableForRequest"" filterChainAvailable); wrappedRequest.setAttribute(""http://openrepose.org/requestUrl"" wrappedRequest.getRequestURL().toString()); splitRequestHeaders(wrappedRequest); doFilter(wrappedRequest wrappedResponse); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,traceRequest,"private boolean  (HttpServletRequest request){ return request.getHeader(""X-Trace-Request"") != null; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChain.java,updateTimer,"private void  (String name long durationMillis){ metricsService.ifPresent(ms -> ms.getRegistry().timer(MetricRegistry.name(""org.openrepose.core.FilterProcessingTime.Delay"" name)).update(durationMillis TimeUnit.MILLISECONDS)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,PowerFilter,@Inject public  (@Value(ReposeSpringProperties.NODE.CLUSTER_ID) String clusterId @Value(ReposeSpringProperties.NODE.NODE_ID) String nodeId @Value(ReposeSpringProperties.CORE.REPOSE_VERSION) String reposeVersion Tracer tracer PowerFilterRouterFactory power
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,configurationHeartbeat,"private void  (){ if (currentSystemModel.get() != null && artifactManager.allArtifactsLoaded()) { synchronized (configurationLock) { SystemModelInterrogator interrogator=new SystemModelInterrogator(clusterId nodeId); SystemModel systemModel=currentSystemModel.get(); Optional<Node> localNode=interrogator.getLocalNode(systemModel); Optional<ReposeCluster> localCluster=interrogator.getLocalCluster(systemModel); Optional<Destination> defaultDestination=interrogator.getDefaultDestination(systemModel); if (localNode.isPresent() && localCluster.isPresent() && defaultDestination.isPresent()) { ReposeCluster serviceDomain=localCluster.get(); Destination defaultDst=defaultDestination.get(); healthCheckServiceProxy.resolveIssue(SYSTEM_MODEL_CONFIG_HEALTH_REPORT); try { FilterList listOfFilters=localCluster.get().getFilters(); List<FilterContext> newFilterChain; if (listOfFilters != null) { newFilterChain=filterContextFactory.buildFilterContexts(getServletContext() listOfFilters.getFilter()); } else { newFilterChain=Collections.emptyList(); } List<FilterContext> oldFilterChain=currentFilterChain.getAndSet(newFilterChain); powerFilterRouter.set(powerFilterRouterFactory.getPowerFilterRouter(serviceDomain localNode.get() getServletContext() defaultDst.getId())); if (oldFilterChain != null) { for ( FilterContext ctx : oldFilterChain) { ctx.destroy(); } } if (LOG.isDebugEnabled()) { List<String> filterChainInfo=new LinkedList<>(); for ( FilterContext ctx : newFilterChain) { filterChainInfo.add(ctx.getName() + ""-"" + ctx.getFilter().getClass().getName()); } LOG.debug(""{}:{} -- Repose filter chain: {}"" clusterId nodeId filterChainInfo); } LOG.info(""{}:{} -- Repose ready"" clusterId nodeId); configurationInformation.updateNodeStatus(clusterId nodeId true); } catch ( FilterInitializationException fie) { LOG.error(""{}:{} -- Unable to create new filter chain."" clusterId nodeId fie); configurationInformation.updateNodeStatus(clusterId nodeId false); } catch ( PowerFilterChainException e) { LOG.error(""{}:{} -- Unable to initialize filter chain builder."" clusterId nodeId e); configurationInformation.updateNodeStatus(clusterId nodeId false); } } else { LOG.error(""{}:{} -- Unhealthy system-model config (cannot identify local node  or no default destination) - please check your system-model.cfg.xml"" clusterId nodeId); healthCheckServiceProxy.reportIssue(SYSTEM_MODEL_CONFIG_HEALTH_REPORT ""Unable to identify the "" + ""local host in the system model  or no default destination - please check your system-model.cfg.xml"" Severity.BROKEN); } } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,configurationUpdated,"@Override public void  (SystemModel configurationObject){ LOG.debug(""{}:{} New system model configuration provided"" clusterId nodeId); SystemModel previousSystemModel=currentSystemModel.getAndSet(configurationObject); if (previousSystemModel == null) { LO"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,destroy,"@Override public void  (){ healthCheckServiceProxy.deregister(); LOG.info(""{}:{} -- Destroying PowerFilter bean"" clusterId nodeId); eventService.squelch(applicationDeploymentListener ApplicationDeploymentEvent.APPLICATION_COLLECTION_MODIFIED); configurati"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,doFilter,"@Override @SuppressWarnings(""squid:S1848"") public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { final long startTime=System.currentTimeMillis(); final Optional<Long> contentBodyReadLimit=c"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,getRequestFilterChain,"private PowerFilterChain  (HttpServletResponse httpResponse FilterChain chain) throws ServletException  IOException { PowerFilterChain requestFilterChain=null; try { boolean healthy=healthCheckService.isHealthy(); List<FilterContext> filterChain=currentFilterChain.get(); PowerFilterRouter router=powerFilterRouter.get(); if (!healthy || filterChain == null || router == null) { LOG.warn(""{}:{} -- Repose is not ready!"" clusterId nodeId); LOG.debug(""{}:{} -- Health status: {}"" clusterId nodeId healthy); LOG.debug(""{}:{} -- Current filter chain: {}"" clusterId nodeId filterChain); LOG.debug(""{}:{} -- Power Filter Router: {}"" clusterId nodeId router); httpResponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE ""Currently unable to serve requests""); configurationInformation.updateNodeStatus(clusterId nodeId false); } else { requestFilterChain=new PowerFilterChain(filterChain chain router metricsService Optional.ofNullable(currentSystemModel.get().getReposeCluster().stream().filter(cluster -> cluster.getId().equals(clusterId)).findFirst().get().getFilters()).map(FilterList::getBypassUriRegex)); } } catch ( PowerFilterChainException ex) { LOG.warn(""{}:{} -- Error creating filter chain"" clusterId nodeId ex); httpResponse.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE ""Error creating filter chain""); configurationInformation.updateNodeStatus(clusterId nodeId false); } return requestFilterChain; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,initFilterBean,"@Override public void  (){ LOG.info(""{}:{} -- Initializing PowerFilter bean"" clusterId nodeId); ServletContextWrapper wrappedServletContext=new ServletContextWrapper(getServletContext() requestProxyService); setServletContext(wrappedServletContext); event"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,isInitialized,@Override public boolean  (){ return isInitialized; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,markResponseCodeHelper,"public static void  (MetricsService metricsService int responseCode Logger log String component){ int code=responseCode / 100; String meterId=null; if (1 < code && code < 6) { meterId=String.format(""%dXX"" code); } if (meterId != null) { metricsService.getRegistry().meter(MetricRegistry.name(""org.openrepose.core.ResponseCode"" component meterId)).mark(); } else { log.error((component != null ? component + "": "" : """") + ""Encountered invalid response code: "" + responseCode); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilter.java,onEvent,"@Override public void  (Event<ApplicationDeploymentEvent List<String>> e){ LOG.info(""{}:{} -- Application collection has been modified. Application that changed: {}"" clusterId nodeId e.payload()); Set<String> uniqueArtifacts=new HashSet<>(); try { for ( S"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterFactory.java,PowerFilterRouterFactory,@Inject public  (@Value(ReposeSpringProperties.NODE.NODE_ID) String nodeId @Value(ReposeSpringProperties.NODE.CLUSTER_ID) String clusterId ReportingService reportingService RequestHeaderService requestHeaderService ResponseHeaderService responseHeaderServ
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterFactory.java,addDestinations,private void  (List<? extends Destination> destList Map<String Destination> targetList){ for ( Destination dest : destList) { targetList.put(dest.getId() dest); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\RequestTracer.java,RequestTracer,public  (boolean trace boolean addHeader){ this.trace=trace; this.addHeader=addHeader; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\RequestTracer.java,traceEnter,public long  (){ if (!trace) { return 0; } startTime=System.currentTimeMillis(); return startTime; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\RequestTracer.java,traceExit,"public long  (HttpServletResponse response String filterName){ if (!trace) { return 0; } long totalRequestTime=System.currentTimeMillis() - startTime; if (addHeader) { response.addHeader(""X-"" + filterName + ""-Time"" totalRequestTime + ""ms""); } return totalRequestTime; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterFactory.java,getPowerFilterRouter,"public PowerFilterRouter  (ReposeCluster domain Node localhost ServletContext servletContext String defaultDestination) throws PowerFilterChainException { LOG.info(""{}:{} -- Reticulating Splines - Building Power Filter Router"" clusterId nodeId); if (LOG.isDebugEnabled()) { String cluster=domain.getId(); List<String> clusterNodes=new LinkedList<>(); for ( Node n : domain.getNodes().getNode()) { clusterNodes.add(n.getId() + ""-"" + n.getHostname()); } LOG.debug(""{}:{} - Cluster nodes from cluster {} for this router: {}"" clusterId nodeId cluster clusterNodes); List<String> destinations=new LinkedList<>(); for ( DestinationEndpoint endpoint : domain.getDestinations().getEndpoint()) { destinations.add(endpoint.getId() + ""-"" + endpoint.getHostname()+ "":""+ endpoint.getPort()); } LOG.debug(""{}:{} - Cluster destinations from cluster {} for this router: {}"" clusterId nodeId cluster destinations); } if (localhost == null || domain == null) { throw new PowerFilterChainException(""Domain and localhost cannot be null""); } DestinationLocationBuilder locationBuilder=new DestinationLocationBuilder(routingService localhost); Map<String Destination> destinations=new HashMap<>(); if (domain.getDestinations() != null) { addDestinations(domain.getDestinations().getEndpoint() destinations); addDestinations(domain.getDestinations().getTarget() destinations); } return new PowerFilterRouterImpl(locationBuilder destinations domain defaultDestination servletContext requestHeaderService responseHeaderService reportingService metricsService); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterChainException.java,PowerFilterChainException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterImpl.java,PowerFilterRouterImpl,public  (DestinationLocationBuilder locationBuilder Map<String Destination> destinations ReposeCluster domain String defaultDestination ServletContext servletContext RequestHeaderService requestHeaderService ResponseHeaderService responseHeaderService ReportingService reportingService Optional<MetricsService> metricsService){ this.locationBuilder=locationBuilder; this.destinations=destinations; this.domain=domain; this.defaultDestination=defaultDestination; this.servletContext=servletContext; this.requestHeaderService=requestHeaderService; this.responseHeaderService=responseHeaderService; this.metricsService=metricsService; this.reportingService=reportingService; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterImpl.java,getEndpoint,"private String  (Destination dest DestinationLocation location){ StringBuilder sb=new StringBuilder(); sb.append(location.getUri().getHost()).append("":"").append(location.getUri().getPort()); if (dest instanceof DestinationEndpoint) { sb.append(dest.getRootPath()); } else if (dest instanceof DestinationCluster) { sb.append(dest.getRootPath()); } else { throw new IllegalArgumentException(""Unknown destination type: "" + dest.getClass().getName()); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterImpl.java,markRequestTimeoutHelper,"private void  (int responseCode String endpoint){ metricsService.filter(__ -> responseCode == HTTP_CLIENT_TIMEOUT).ifPresent(ms -> ms.getRegistry().meter(MetricRegistry.name(""org.openrepose.core.RequestTimeout.TimeoutToOrigin"" endpoint)).mark()); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\main\java\org\openrepose\powerfilter\PowerFilterRouterImpl.java,route,"@Override @SuppressWarnings(""unchecked"") public void  (HttpServletRequestWrapper servletRequest HttpServletResponse servletResponse) throws IOException  ServletException  URISyntaxException { DestinationLocation location=null; List<RouteDestination> reqDe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FilterInitializationExceptionTest.java,shouldProcessCustomMessage,"@Test public void  (){ String expectedExceptionMessage=""Oops! Something unexpected happened.""; FilterInitializationException filterInitializationException=new FilterInitializationException(expectedExceptionMessage new Throwable(""unexpected"")); assertEqual"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\PowerFilterEventTest.java,shouldBeUsable,@Test public void  (){ PowerFilterEvent filterEvent=PowerFilterEvent.POWER_FILTER_CONFIGURED; assertEquals(PowerFilterEvent.POWER_FILTER_CONFIGURED filterEvent); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterListClass.java,FakeFilterListClass,public  (){ super.filter=new ArrayList<Filter>(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterListClass.java,addFilter,public void  (Filter filter){ super.filter.add(filter); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,getClassName,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,getInitParameter,@Override public String  (String name){ return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,getInitParameters,@Override public Map<String String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,getName,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,getServletNameMappings,@Override public Collection<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,getUrlPatternMappings,@Override public Collection<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,setInitParameter,@Override public boolean  (String name String value){ return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\FakeFilterRegistration.java,setInitParameters,@Override public Set<String>  (Map<String String> initParameters){ return null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,shouldNotReturnTimeSinceEnterCallAndShouldNotAddHeaderToResponse,@Test public void  () throws Exception { boolean trace=false; boolean addHeader=true; long time; RequestTracer rt; response=mock(HttpServletResponse.class); rt=new RequestTracer(trace addHeader); rt.traceEnter(); Thread.sleep(1000L); time=rt.traceExit(res
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,shouldNotReturnTimeSinceInitialization,"@Test public void  () throws Exception { boolean trace=false; boolean addHeader=true; long time; RequestTracer rt; rt=new RequestTracer(trace addHeader); Thread.sleep(1000L); time=rt.traceEnter(); assertThat(""The returned time should be 0"" time equalTo(0L"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,shouldReturnTimeSinceEnterCallAndAddHeaderToResponse,@Test public void  () throws Exception { boolean trace=true; boolean addHeader=true; long time; RequestTracer rt; response=mock(HttpServletResponse.class); rt=new RequestTracer(trace addHeader); rt.traceEnter(); Thread.sleep(1000L); time=rt.traceExit(resp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,shouldReturnTimeSinceEnterCallAndShouldNotAddHeaderToResponse,@Test public void  () throws Exception { boolean trace=true; boolean addHeader=false; long time; RequestTracer rt; response=mock(HttpServletResponse.class); rt=new RequestTracer(trace addHeader); rt.traceEnter(); Thread.sleep(1000L); time=rt.traceExit(res
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerTest.java,shouldReturnTimeSinceInitialization,"@Test public void  () throws Exception { boolean trace=true; boolean addHeader=true; long time; RequestTracer rt; rt=new RequestTracer(trace addHeader); Thread.sleep(1000L); time=rt.traceEnter(); assertThat(""The returned time should not be 0"" time not(equ"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerPerfTest.java,checkPerformanceUnderLoad,"@Test public void  (){ boolean trace=true; boolean addHeader=true; long totalMillis=0; final RequestTracer rt=new RequestTracer(trace addHeader); for (int i=0; i < 100; ++i) { rt.traceEnter(); rt.traceExit(response ""myFilter""); } for (int i=0; i < NUM_HIT"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerPerfTest.java,checkPerformanceUnderLoadMultiThreaded,@Test public void  (){ boolean trace=true; boolean addHeader=true; long totalTime=0; final RequestTracer rt=new RequestTracer(trace addHeader); final Thread[] threads=new Thread[NUM_THREADS]; final long[] times=new long[NUM_THREADS]; for (int i=0; i < 100
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\filter\RequestTracerPerfTest.java,run,"public void  (){ long totalMillis=0; for (int i=0; i < NUM_HITS; ++i) { long startTime=System.currentTimeMillis(); rt.traceEnter(); rt.traceExit(response ""myFilter""); long endTime=System.currentTimeMillis(); totalMillis+=endTime - startTime; } times[index]=totalMillis; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,setUp,"@Before public void  (){ tenantId=""tenantId""; token=""token""; userId=""userId""; reposeLocalCacheMock=mock(ReposeLocalCache.class); reset(metricsService); reset(metricRegistry); reset(timer); reset(timerContext); when(metricsService.getRegistry()).thenReturn"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,shouldRemoveCacheData,"@Test public void  (){ reposeLocalCacheReal=new ReposeLocalCache(datastoreService); final String key=""my element""; String value=""1  2  3""; datastore=datastoreService.getDefaultDatastore(); datastore.put(key value); assertNotNull(datastoreService.getDefaul"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,shouldReturnBooleanWhenRemovingGroups,@Test public void  (){ assertThat(reposeLocalCacheMock.removeGroups(tenantId token) is(instanceOf(Boolean.class))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,shouldReturnBooleanWhenRemovingLimits,@Test public void  (){ assertThat(reposeLocalCacheMock.removeLimits(userId) is(instanceOf(Boolean.class))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\datastore\distributed\impl\ehcache\ReposeLocalCacheTest.java,shouldReturnBooleanWhenRemovingTokensAndRoles,@Test public void  (){ assertThat(reposeLocalCacheMock.removeTokenAndRoles(tenantId token) is(instanceOf(Boolean.class))); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,setup,@Before public void  (){ destinationInfoLogic=new DestinationInfoLogic(destinationId); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldAccumulateResponseTime,@Test public void  (){ destinationInfoLogic.accumulateResponseTime(1000L); assertEquals(1000L destinationInfoLogic.getAccumulatedResponseTime()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldCopy,@Test public void  (){ destinationInfoLogic.getStatusCodeCounts().put(200 new StatusCodeResponseStore(7L 0)); DestinationInfo copy=destinationInfoLogic.copy(); destinationInfoLogic.incrementStatusCodeCount(200 10); assertNotSame(copy.getTotalStatusCode(20
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldEqualUnmodifiedCopy,@Test public void  (){ destinationInfoLogic.incrementRequestCount(); destinationInfoLogic.getStatusCodeCounts().put(400 new StatusCodeResponseStore(5L 0)); DestinationInfo copy=destinationInfoLogic.copy(); assertThat(copy equalTo(destinationInfoLogic)); }
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldGetAverageResponseTime,@Test public void  (){ long totalResponses=1000L; long responseTime=2L; double expectedAverageResponseTime=totalResponses / responseTime; for (int i=0; i < totalResponses; i++) { destinationInfoLogic.incrementResponseCount(); } destinationInfoLogic.accumu
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldGetId,@Test public void  (){ assertEquals(destinationId destinationInfoLogic.getDestinationId()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldGetThroughput,@Test public void  () throws InterruptedException { long totalResponses=1000L; long sleepTime=1000L; double maxVarianceInMs=10.0; double maxThroughputVariance=maxVarianceInMs / 1000.0 * sleepTime; for (int i=0; i < totalResponses; i++) { destinationInfoLo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldIncrementRequestCount,@Test public void  (){ destinationInfoLogic.incrementRequestCount(); assertEquals(1 destinationInfoLogic.getTotalRequests()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldIncrementResponseCount,@Test public void  (){ destinationInfoLogic.incrementResponseCount(); assertEquals(1 destinationInfoLogic.getTotalResponses()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldIncrementStatusCodeCount,@Test public void  (){ destinationInfoLogic.incrementStatusCodeCount(400 10); destinationInfoLogic.incrementStatusCodeCount(400 20); assertEquals(2 destinationInfoLogic.getTotalStatusCode(400)); assertEquals(30 destinationInfoLogic.getTotalResponseTime(40
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldProduceDifferentHashcodes,@Test public void  (){ destinationInfoLogic.incrementRequestCount(); destinationInfoLogic.getStatusCodeCounts().put(400 new StatusCodeResponseStore(5L 0)); DestinationInfo copy=destinationInfoLogic.copy(); destinationInfoLogic.getStatusCodeCounts().put(50
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldReturnZeroIfNoElapsedTime,@Test public void  (){ assertEquals(0 destinationInfoLogic.getThroughput() 0.1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldReturnZeroIfNoResponseTime,@Test public void  (){ assertEquals(0 destinationInfoLogic.getAverageResponseTime() 0.1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\destinations\DestinationInfoLogicTest.java,shouldReturnZeroIfStatusCodeNotTracked,@Test public void  (){ assertEquals(0 destinationInfoLogic.getTotalStatusCode(500)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\deploy\EarFilenameFilterTest.java,setUp,@Before public void  (){ earFilenameFilter=(EarFilenameFilter)EarFilenameFilter.getInstance(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\deploy\EarFilenameFilterTest.java,shouldReturnFalseForEmptyEarName,"@Test public void  (){ assertFalse(earFilenameFilter.accept(dir """")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\deploy\EarFilenameFilterTest.java,shouldReturnFalseForInvalidEarName,"@Test public void  (){ assertFalse(earFilenameFilter.accept(dir ""filter-bunder"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\deploy\EarFilenameFilterTest.java,shouldReturnTrueForValidEarName,"@Test public void  (){ assertTrue(earFilenameFilter.accept(dir ""filter-bundle.ear"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImplTest.java,createSummingMeterFactoryShouldBePassedTheServiceMetricRegistry,"@Test public void  () throws Exception { String namePrefix=MetricRegistry.name(""test"" ""name"" ""prefix""); String name=""foo""; MetricRegistry metricRegistry=metricsService.getRegistry(); AggregateMeterFactory summingMeterFactory=metricsService.createSummingMe"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImplTest.java,setUp,@Before public void  (){ metricsService=new MetricsServiceImpl(mock(ConfigurationService.class) mock(HealthCheckService.class)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImplTest.java,testGetRegistry,@Test public void  (){ MetricRegistry registry=metricsService.getRegistry(); assertNotNull(registry); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceImplTest.java,testServiceEnabledDisabled,@Test public void  () throws MalformedObjectNameException  AttributeNotFoundException  MBeanException  ReflectionException  InstanceNotFoundException { metricsService.setEnabled(false); assertFalse(metricsService.isEnabled()); metricsService.setEnabled(tr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\jmx\ReposeReportTest.java,setUp,"@Before public void  (){ destinationIds.add(""id_1""); destinationIds.add(""id_2""); destinationIds.add(""id_7""); reportingService=new ReportingServiceImpl(mock(ConfigurationService.class)); reportingService.updateConfiguration(destinationIds REFRESH_SECONDS);"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\jmx\ReposeReportTest.java,whenRetrieving400sFromReport,"@Test public void  (){ Long refresh=new Long(""4333""); reportingService.incrementReposeStatusCodeCount(400 refresh); reportingService.incrementReposeStatusCodeCount(401 refresh); reportingService.incrementReposeStatusCodeCount(403 refresh); reportingServic"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\jmx\ReposeReportTest.java,whenRetrieving500sFromReport,"@Test public void  (){ Long refresh=new Long(""4333""); reportingService.incrementReposeStatusCodeCount(500 refresh); reportingService.incrementReposeStatusCodeCount(503 refresh); reportingService.incrementReposeStatusCodeCount(501 refresh); assertEquals(""3"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\jmx\ReposeReportTest.java,whenRetrievingDestinationInfo,"@Test public void  () throws OpenDataException { Long refresh=new Long(""4333""); reportingService.recordServiceResponse(""id_1"" 400 refresh); reportingService.recordServiceResponse(""id_1"" 401 refresh); reportingService.recordServiceResponse(""id_1"" 403 refre"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceContextTest.java,setUp,@Before public void  (){ configurationService=mock(ConfigurationService.class); healthCheckService=mock(HealthCheckService.class); healthCheckServiceProxy=mock(HealthCheckServiceProxy.class); when(healthCheckService.register()).thenReturn(healthCheckServi
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceContextTest.java,verifyIssueReported,@Test public void  () throws IOException { ConfigurationResourceResolver resourceResolver=mock(ConfigurationResourceResolver.class); ConfigurationResource configurationResource=mock(ConfigurationResource.class); when(configurationService.getResourceResolv
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MetricsServiceContextTest.java,verifyRegisteredToHealthCheckService,@Test public void  (){ verify(healthCheckService times(1)).register(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MultiMeterTest.java,markAllShouldMarkAllInputMetersOnCall,@Test public void  () throws Exception { Meter meterOne=mock(Meter.class); Meter meterTwo=mock(Meter.class); Meter meterThree=mock(Meter.class); MultiMeter.markAll(meterOne meterTwo meterThree); verify(meterOne).mark(); verify(meterTwo).mark(); verify(met
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MultiMeterTest.java,markNAllShouldMarkAllInputMetersNTimesOnCall,@Test public void  () throws Exception { long n=10; Meter meterOne=mock(Meter.class); Meter meterTwo=mock(Meter.class); Meter meterThree=mock(Meter.class); MultiMeter.markNAll(n meterOne meterTwo meterThree); verify(meterOne).mark(n); verify(meterTwo).mar
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MultiMeterTest.java,markNShouldMarkAllMetersNTimes,@Test public void  () throws Exception { long n=10; Meter meterOne=mock(Meter.class); Meter meterTwo=mock(Meter.class); MultiMeter multiMeter=new MultiMeter(meterOne meterTwo); multiMeter.mark(n); verify(meterOne).mark(n); verify(meterTwo).mark(n); assert
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\MultiMeterTest.java,markShouldMarkAllMetersOnce,@Test public void  () throws Exception { Meter meterOne=mock(Meter.class); Meter meterTwo=mock(Meter.class); MultiMeter multiMeter=new MultiMeter(meterOne meterTwo); multiMeter.mark(); verify(meterOne).mark(1L); verify(meterTwo).mark(1L); assertThat(multi
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\ReportingServiceImplTest.java,setup,"@Before public void  (){ destinationIds.add(""id_1""); destinationIds.add(""id_2""); destinationIds.add(""id_7""); reportingService=new ReportingServiceImpl(mock(ConfigurationService.class)); reportingService.updateConfiguration(destinationIds REFRESH_SECONDS);"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\ReportingServiceImplTest.java,shouldRecordServiceResponse,"@Test public void  (){ Long responseTime=new Long(""200""); reportingService.recordServiceResponse(""id_1"" 202 responseTime); DestinationInfo dstInfo=reportingService.getDestinationInfo(""id_1""); assertEquals(1 dstInfo.getTotalStatusCode(202)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\ReportingServiceImplTest.java,shouldResetValuesEvery2Seconds,"@Test public void  () throws InterruptedException { for (int i=0; i < 5; i++) { reportingService.incrementRequestCount(""id_7""); } assertEquals(5 reportingService.getDestinationInfo(""id_7"").getTotalRequests()); Thread.sleep(3 * 1000); assertEquals(0 report"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\ReportingServiceImplTest.java,shouldReturnDestinationList,@Test public void  (){ List<DestinationInfo> dst=reportingService.getDestinations(); assertEquals(3 dst.size()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\HrefFileReaderTest.java,shouldReturnNullIfHrefIsNotAFile,"@Test public void  (){ assertNull(hrefFileReader.validateHref(""http://something"" ""file_id"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,setup,@Before public void  (){ reposeInfoLogic=new ReposeInfoLogic(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldAccumulateRequestSize,@Test public void  (){ reposeInfoLogic.processRequestSize(105l); assertEquals(105l reposeInfoLogic.getAccumulatedRequestSize()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldAccumulateResponseSize,@Test public void  (){ reposeInfoLogic.processResponseSize(107l); assertEquals(107l reposeInfoLogic.getAccumulatedResponseSize()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldCopy,@Test public void  (){ reposeInfoLogic.incrementStatusCodeCount(200 10); ReposeInfo copy=reposeInfoLogic.copy(); reposeInfoLogic.incrementStatusCodeCount(200 20); assertNotSame(copy.getTotalStatusCode(200) reposeInfoLogic.getTotalStatusCode(200)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldGetAverageRequestSize,@Test public void  (){ long totalRequests=1000l; long requestSize=2l; double expectedAverageRequestSize=requestSize / totalRequests; for (int i=0; i < 1000; i++) { reposeInfoLogic.incrementRequestCount(); } reposeInfoLogic.processRequestSize(requestSize);
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldGetAverageResponseSize,@Test public void  (){ long totalResponses=1000l; long responseSize=2l; double expectedAverageResponseSize=responseSize / totalResponses; for (int i=0; i < 1000; i++) { reposeInfoLogic.incrementResponseCount(); } reposeInfoLogic.processResponseSize(respon
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldIncrementRequests,@Test public void  (){ reposeInfoLogic.incrementRequestCount(); assertEquals(1 reposeInfoLogic.getTotalRequests()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldIncrementResponses,@Test public void  (){ reposeInfoLogic.incrementResponseCount(); assertEquals(1 reposeInfoLogic.getTotalResponses()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldIncrementStatusCode,@Test public void  (){ reposeInfoLogic.incrementStatusCodeCount(400 10); assertEquals(1 reposeInfoLogic.getTotalStatusCode(400)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldReturnZeroIfNoRequests,@Test public void  (){ assertEquals(0 reposeInfoLogic.getAverageRequestSize() 0.1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldReturnZeroIfNoResponses,@Test public void  (){ assertEquals(0 reposeInfoLogic.getAverageResponseSize() 0.1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldUpdateRequestMinMax,@Test public void  (){ reposeInfoLogic.processRequestSize(85l); assertEquals(85l reposeInfoLogic.getMinimumRequestSize()); assertEquals(85l reposeInfoLogic.getMaximumRequestSize()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\repose\ReposeInfoLogicTest.java,shouldUpdateResponseMinMax,@Test public void  (){ reposeInfoLogic.processResponseSize(55l); assertEquals(55l reposeInfoLogic.getMinimumResponseSize()); assertEquals(55l reposeInfoLogic.getMaximumResponseSize()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,constructionShouldRegisterAcrossAllMeter,@Test public void  () throws Exception { verify(metricRegistry).meter(name(NAME_PREFIX ACROSS_ALL)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,createAggregateMeterShouldRegisterAndReturnAnAggregatedMeter,"@Test public void  () throws Exception { String meterName=""foo""; Meter meter=summingMeterFactory.createMeter(meterName); verify(metricRegistry).meter(eq(name(NAME_PREFIX meterName)) argThat(instanceOf(SummingMeterSupplier.class))); assertThat(meter is(thi"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,createChildFactoryShouldReturnASummingMeterFactoryThatProducesHierarchicallyCumulativeMeters,"@Test public void  () throws Exception { MetricRegistry registry=new MetricRegistry(); AggregateMeterFactory parentFactory=new SummingMeterFactory(registry ""parent""); AggregateMeterFactory childFactory=parentFactory.createChildFactory(""child""); AggregateM"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,getAcrossAllMeterShouldReturnTheAcrossAllMeter,@Test public void  () throws Exception { Meter meter=summingMeterFactory.getAggregateMeter(); assertThat(meter is(acrossAllMeter)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\reporting\metrics\SummingMeterFactoryImplTest.java,setup,@Before public void  (){ acrossAllMeter=mock(Meter.class); meter=mock(Meter.class); metricRegistry=mock(MetricRegistry.class); when(metricRegistry.meter(Matchers.endsWith(ACROSS_ALL))).thenReturn(acrossAllMeter); when(metricRegistry.meter(anyString() any(
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,shouldBlockWhenNoEventsAreAvailable,@Test public void  () throws InterruptedException { final TestEvent sentEvent=TestEvent.EVENT_OCCURRED; final AtomicReference<Enum> receivedEvent=new AtomicReference<>(); final AtomicReference<Exception> listenerException=new AtomicReference<>(); final Th
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,shouldNotFailWhenRemovingNonExistentListener,@Test public void  (){ manager.squelch(null TestEvent.ONE); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,shouldRegisterListeners,"@Test public void  () throws Exception { final String expected=""expected""; manager.listen(e -> { assertEquals(""Event payload must match expected value"" expected e.payload()); eventFiredTracker=true; }  TestEvent.ONE); manager.newEvent(TestEvent.ONE expect"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,shouldSquelchEventsForListeners,"@Test public void  () throws Exception { final EventListener<TestEvent String> myListener=e -> eventFiredTracker=true; manager.listen(myListener TestEvent.class); manager.newEvent(TestEvent.ONE """"); manager.nextDispatcher().dispatch(); assertTrue(""Event m"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,shouldSquelchIndividualEventsOnListener,"@Test public void  () throws Exception { final String expectedOne=""expectedOne""  expectedTwo=""expectedTwo""; final EventListener<TestEvent String> listener=e -> { switch (e.type()) { case ONE: if (eventFiredTracker) { fail(""Must not call squelched events"")"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,shouldUpdateListener,"@Test public void  () throws Exception { final String expected=""expected""; final EventListener<TestEvent String> listener=e -> { if (e.type() == TestEvent.ONE) { assertTrue(""Event must be fired"" eventFiredTracker); } if (e.type() == TestEvent.TWO) { asser"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\servlet\boot\event\EventServiceImplTest.java,standUp,@Before public void  (){ manager=new EventServiceImpl(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,EscapeTheMessageForJson,"@Test public void  () throws Exception { when(mockedRequest.getHeaders(""Accept"")).thenReturn(Collections.enumeration(Collections.singletonList(MEDIA_TYPE_APPLICATION_JSON))); responseMessageServiceImpl.handle(mockedRequest response); assertEquals(""\\b\\n\"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,EscapeTheMessageForPlain,"@Test public void  () throws Exception { when(mockedRequest.getHeaders(""Accept"")).thenReturn(Collections.enumeration(Collections.singletonList(MEDIA_TYPE_TEXT_PLAIN))); responseMessageServiceImpl.handle(mockedRequest response); assertEquals(ESCAPE_THIS.tr"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,EscapeTheMessageForXml,"@Test public void  () throws Exception { when(mockedRequest.getHeaders(""Accept"")).thenReturn(Collections.enumeration(Collections.singletonList(MEDIA_TYPE_APPLICATION_XML))); responseMessageServiceImpl.handle(mockedRequest response); assertEquals(""\n\t\r\\"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,createMatcher,"private StatusCodeMatcher  (OverwriteType overwriteType){ StatusCodeMatcher matcher=new StatusCodeMatcher(); matcher.setId(""413""); matcher.setCodeRegex(""413""); matcher.setOverwrite(overwriteType); Message message=new Message(); message.setMediaType(""*/*""); message.setValue(MESSAGE); matcher.getMessage().add(message); return matcher; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,createMessage,"private static Message  (String mediaType){ Message message=new Message(); message.setMediaType(mediaType); message.setContentType(mediaType); message.setValue(""%M""); return message; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,setup,@Before public void  (){ StatusCodeMatcher matcher=new StatusCodeMatcher(); matcher.setId(I_AM_A_TEAPOT_VALUE_STRING); matcher.setCodeRegex(I_AM_A_TEAPOT_VALUE_STRING); matcher.setOverwrite(OverwriteType.IF_EMPTY); matcher.getMessage().add(createMessage(M
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,shouldPreserveIfEmptyAndBody,"@Test public void  () throws IOException { final ByteBuffer internalBuffer=new CyclicByteBuffer(); internalBuffer.put(""hello there"".getBytes()); final ServletOutputStream outputStream=new ByteBufferServletOutputStream(internalBuffer); final ByteBufferInpu"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\services\rms\ResponseMessageServiceImplTest.java,shouldWriteIfEmptyAndNoBody,@Test public void  () throws IOException { final ByteBuffer internalBuffer=new CyclicByteBuffer(); final ServletOutputStream outputStream=new ByteBufferServletOutputStream(internalBuffer); final PrintWriter printWriter=new PrintWriter(new OutputStreamWrit
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStreamTest.java,setUp,@Before public void  () throws IOException { entity=mock(HttpEntity.class); stream=mock(InputStream.class); when(entity.getContent()).thenReturn(stream); input=new HttpComponentInputStream(entity); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStreamTest.java,should,"@Test public void  () throws IOException { final int expected=-1; assertEquals(""Should return -1 when reading a null input stream"" expected input.read()); assertEquals(""Should return -1 when reading a null input stream"" expected input.read(new byte[10]));"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentInputStreamTest.java,shouldCallUnderlyingStream,@Test public void  () throws IOException { input.read(); verify(stream).read(); byte[] bytes=new byte[10]; input.read(bytes); verify(stream).read(bytes); input.read(bytes 0 5); verify(stream).read(bytes 0 5); input.markSupported(); verify(stream).markSupp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\spring\ReposeJmxNamingStrategyTest.java,getObjectName_shouldReturnTheAnnotatedObjectName,@Test public void  () throws Exception { org.springframework.jmx.export.metadata.ManagedResource managedResource=mock(org.springframework.jmx.export.metadata.ManagedResource.class); when(managedResource.getObjectName()).thenReturn(MANAGED_RESOURCE_OBJECT_
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\spring\ReposeJmxNamingStrategyTest.java,getObjectName_shouldReturnTheBeanKeyObjectName,@Test public void  () throws Exception { Object beanObject=new Object(); ObjectName objectName=reposeJmxNamingStrategy.getObjectName(beanObject MANAGED_RESOURCE_BEAN_KEY); assertEquals(MANAGED_RESOURCE_BEAN_KEY objectName.getCanonicalName()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\spring\ReposeJmxNamingStrategyTest.java,getObjectName_shouldReturnTheFQCNObjectName,@Test public void  () throws Exception { Object beanObject=new Object(); ObjectName expectedObjectName=JmxObjectNameFactory.getName(NetUtilities.bestGuessHostname() beanObject.getClass().getCanonicalName()); ObjectName objectName=reposeJmxNamingStrategy.g
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\core\spring\ReposeJmxNamingStrategyTest.java,setUp,@Before public void  () throws Exception { annotationJmxAttributeSource=mock(AnnotationJmxAttributeSource.class); reposeJmxNamingStrategy=new ReposeJmxNamingStrategy(annotationJmxAttributeSource); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,mockHeaders,"private static List<Header>  (Map<String String> headerValues){ final List<Header> headers=new ArrayList<>(); for ( String header : headerValues.keySet()) { String values=headerValues.get(header); for ( String value : values.split("" "")) { Header header1=mock(Header.class); when(header1.getName()).thenReturn(header); when(header1.getValue()).thenReturn(value); headers.add(header1); } } return headers; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,setUp,"@Before public void  () throws IOException { headerValues=new HashMap<>(); headerValues.put(""Header1"" ""Value1""); headerValues.put(""Header2"" ""Value21 Value22""); headerValues.put(""Header3"" ""Value3;q=3""); headers=HttpComponentResponseProcessorTest.mockHeader"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,shouldNotWriteExcluded,"@Test public void  () throws IOException { headerValues.put(""Connection"" ""Should be excluded.""); headerValues.put(""Transfer-Encoding"" ""Should be excluded.""); headerValues.put(""Server"" ""Should be excluded.""); headers=HttpComponentResponseProcessorTest.mock"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,shouldSetHeaders,@Test public void  () throws IOException { processor.process(); verify(servletResponse).setStatus(eq(200)); for ( Header header : headers) { verify(servletResponse).addHeader(header.getName() header.getValue()); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,shouldSetStatus,@Test public void  () throws IOException { processor.process(); verify(servletResponse).setStatus(eq(200)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentResponseProcessorTest.java,shouldWriteResponse,@Test public void  () throws IOException { processor.process(); verify(servletResponse).setStatus(eq(200)); for ( Header header : headers) { verify(servletResponse).addHeader(header.getName() header.getValue()); } verify(servletResponse).getOutputStream()
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,cleanupClass,@AfterClass public static void  (){ System.clearProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY); ctx.reconfigure(); StatusLogger.getLogger().reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,contains,"private Matcher<List<LogEvent>>  (final String msg){ return new TypeSafeMatcher<List<LogEvent>>(){ @Override protected boolean matchesSafely( final List<LogEvent> events){ boolean rtn=false; LogEvent event; for (Iterator<LogEvent> iterator=events.iterator(); !rtn && iterator.hasNext(); ) { event=iterator.next(); rtn=event.getMessage().getFormattedMessage().contains(msg); } return rtn; } @Override public void describeTo( Description description){ description.appendText(""The List of Log Events contained a Formatted Message of: \"""" + msg + ""\""""); } } ; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,describeTo,"@Override public void  (Description description){ description.appendText(""The List of Log Events contained a Formatted Message of: \"""" + msg + ""\""""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,getValidSystemModel,"private static SystemModel  (){ Node node=new Node(); DestinationEndpoint dest=new DestinationEndpoint(); ReposeCluster cluster=new ReposeCluster(); SystemModel sysModel=new SystemModel(); node.setId(""node1""); node.setHostname(""localhost""); node.setHttpPort(8080); dest.setHostname(""localhost""); dest.setPort(9090); dest.setDefault(true); dest.setId(""dest1""); dest.setProtocol(""http""); cluster.setId(""cluster1""); cluster.setNodes(new NodeList()); cluster.getNodes().getNode().add(node); cluster.setDestinations(new DestinationList()); cluster.getDestinations().getEndpoint().add(dest); sysModel.getReposeCluster().add(cluster); return sysModel; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,matchesSafely,@Override protected boolean  (final List<LogEvent> events){ boolean rtn=false; LogEvent event; for (Iterator<LogEvent> iterator=events.iterator(); !rtn && iterator.hasNext(); ) { event=iterator.next(); rtn=event.getMessage().getFormattedMessage().contains
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,setUp,"@Before public void  () throws Exception { app=((ListAppender)(ctx.getConfiguration().getAppender(""List0""))).clear(); healthCheckService=mock(HealthCheckService.class); healthCheckServiceProxy=mock(HealthCheckServiceProxy.class); configurationService=mock"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,setupSpec,@BeforeClass public static void  (){ System.setProperty(ConfigurationFactory.CONFIGURATION_FILE_PROPERTY CONFIG); ctx=(LoggerContext)LogManager.getContext(false); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,systemModelListener_configurationUpdated_localhostFound,"@Test public void  () throws Exception { RequestHeaderServiceImpl requestHeaderService=new RequestHeaderServiceImpl(configurationService containerConfigurationService healthCheckService ""cluster1"" ""node1"" ""1.0""); UpdateListener<SystemModel> listenerObject"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\request\RequestHeaderServiceContextTest.java,systemModelListener_configurationUpdated_localhostNotFound,"@Test public void  () throws Exception { RequestHeaderServiceImpl requestHeaderServiceContext=new RequestHeaderServiceImpl(configurationService containerConfigurationService healthCheckService ""clusterId"" ""nodeId"" ""1.0""); UpdateListener<SystemModel> liste"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,setUp,"@Before public void  () throws URISyntaxException  IOException { request=mock(HttpServletRequest.class); uri=new URI(""http://www.openrepose.org""); host=new HttpHost(""somename""); method=mock(HttpEntityEnclosingRequestBase.class); methodParams=mock(HttpPara"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetActualContentLengthIfChunkedIs0,"@Test public void  () throws Exception { String body=""test""; when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(body.getBytes()))); ArgumentCaptor<InputStreamEntity> requestEntityCaptor=ArgumentCaptor.forClass"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetActualContentLengthIfChunkedIsAutoAndOriginalRequestWasNotChunked,"@Test public void  () throws Exception { String body=""test""; when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(body.getBytes()))); ArgumentCaptor<InputStreamEntity> requestEntityCaptor=ArgumentCaptor.forClass"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetActualContentLengthIfChunkedIsFalse,"@Test public void  () throws Exception { String body=""test""; when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(body.getBytes()))); ArgumentCaptor<InputStreamEntity> requestEntityCaptor=ArgumentCaptor.forClass"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetHeaders,@Test public void  () throws IOException { when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(new byte[]{}))); processor.process(method); verify(request).getHeaderNames(); for ( String header : headers) { veri
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetInputStream,@Test public void  () throws IOException { when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(new byte[]{}))); processor.process(method); verify(method).setEntity(any(InputStreamEntity.class)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetParams,"@Test public void  () throws Exception { when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(new byte[]{}))); URI uri=processor.getUri(""http://foo.com""); assertThat(uri.getRawQuery() allOf(containsString(""param"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetUnknownContentLengthIfChunkedIs1,@Test public void  () throws Exception { when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(new byte[]{}))); ArgumentCaptor<InputStreamEntity> requestEntityCaptor=ArgumentCaptor.forClass(InputStreamEntity.clas
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetUnknownContentLengthIfChunkedIsAutoAndOriginalRequestWasChunked,"@Test public void  () throws Exception { when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(new byte[]{}))); when(request.getHeader(eq(""transfer-encoding""))).thenReturn(""chunked""); ArgumentCaptor<InputStreamEn"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetUnknownContentLengthIfChunkedIsInvalid,@Test public void  () throws Exception { when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(new byte[]{}))); ArgumentCaptor<InputStreamEntity> requestEntityCaptor=ArgumentCaptor.forClass(InputStreamEntity.clas
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\httpcomponent\HttpComponentRequestProcessorTest.java,shouldSetUnknownContentLengthIfChunkedIsTrue,@Test public void  () throws Exception { when(request.getInputStream()).thenReturn(new ServletInputStreamWrapper(new ByteArrayInputStream(new byte[]{}))); ArgumentCaptor<InputStreamEntity> requestEntityCaptor=ArgumentCaptor.forClass(InputStreamEntity.clas
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,setUp,"@Before public void  (){ originalRequest=mock(HttpServletRequest.class); response=mock(HttpServletResponse.class); when(originalRequest.getScheme()).thenReturn(""http""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,shouldKeepQueryPart,"@Test public void  () throws MalformedURLException { when(originalRequest.getServerName()).thenReturn(""myhost.com""); when(originalRequest.getServerPort()).thenReturn(80); when(originalRequest.getContextPath()).thenReturn(""""); final String destUri=""http://"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,shouldRemoveRootPath,"@Test public void  () throws MalformedURLException { when(originalRequest.getServerName()).thenReturn(""myhost.com""); when(originalRequest.getServerPort()).thenReturn(8080); when(originalRequest.getContextPath()).thenReturn(""""); final String destUri=""http:"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,shouldRemoveRootPath2,"@Test public void  () throws MalformedURLException { when(originalRequest.getServerName()).thenReturn(""myhost.com""); when(originalRequest.getServerPort()).thenReturn(8080); when(originalRequest.getContextPath()).thenReturn(""""); final String destUri=""http:"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,shouldRemoveRootPathAndAddVersion,"@Test public void  () throws MalformedURLException { when(originalRequest.getServerName()).thenReturn(""myhost.com""); when(originalRequest.getServerPort()).thenReturn(8080); when(originalRequest.getContextPath()).thenReturn(""""); final String destUri=""http:"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,shouldRemoveRootPathWithoutPort80,"@Test public void  () throws MalformedURLException { when(originalRequest.getServerName()).thenReturn(""myhost.com""); when(originalRequest.getServerPort()).thenReturn(80); when(originalRequest.getContextPath()).thenReturn(""""); final String destUri=""http://"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\nodeservice\response\LocationHeaderBuilderTest.java,shouldRemoveRootPathWithoutPort80_2,"@Test public void  () throws MalformedURLException { when(originalRequest.getServerName()).thenReturn(""myhost.com""); when(originalRequest.getServerPort()).thenReturn(80); when(originalRequest.getContextPath()).thenReturn(""""); final String destUri=""http://"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\commons\config\manager\UpdateFailedException.java,UpdateFailedException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core\src\test\java\org\openrepose\SchemaReadTest.java,shouldReadFromByteBuffers,"@Test public void  () throws Exception { final ByteBuffer buffer=new CyclicByteBuffer(); final ByteBufferOutputStream bos=new ByteBufferOutputStream(buffer); final InputStream xmlInput=SchemaReadTest.class.getResourceAsStream(""/META-INF/schema/examples/co"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\commons\config\resource\ResourceResolutionException.java,ResourceResolutionException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\FilterConfigHelper.java,FilterConfigHelper,public  (FilterConfig filterConfig){ this.filterConfig=filterConfig; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\FilterConfigHelper.java,getFilterConfig,public String  (String defaultConfig){ return StringUtils.defaultIfEmpty(filterConfig.getInitParameter(FILTER_CONFIG) defaultConfig); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\services\reporting\metrics\MetricNameUtility.java,safeReportingName,public static String  (String name){ StringBuilder safeName=new StringBuilder(name.length()); for ( char c : name.toCharArray()) { safeName.append(REPLACEMENT_CHARACTER_MAP.getOrDefault(c String.valueOf(c))); } return safeName.toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\servlet\PowerApiContextException.java,PowerApiContextException,public  (String message){ super(message); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\spring\ReposeSpringProperties.java,stripSpringValueStupidity,public static String  (String atValue){ return atValue.substring(2 atValue.length() - 1); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,CompressedHttpServletRequest, (HttpServletRequest httpRequest CompressingStreamFactory compressingStreamFactory CompressingFilterContext context){ super(httpRequest); this.httpRequest=httpRequest; this.compressingStreamFactory=compressingStreamFactory; this.context=context; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,getCompressingServletInputStream,private CompressingServletInputStream  () throws IOException { if (compressedSIS == null) { compressedSIS=new CompressingServletInputStream(httpRequest.getInputStream() compressingStreamFactory context); } return compressedSIS; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,getDateHeader,@Override public long  (String header){ return isFilteredHeader(header) ? -1L : super.getDateHeader(header); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,getHeader,@Override public String  (String header){ return isFilteredHeader(header) ? null : super.getHeader(header); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,getInputStream,"@Override public ServletInputStream  () throws IOException { if (isGetReaderCalled) { throw new IllegalStateException(""getReader() has already been called""); } isGetInputStreamCalled=true; return getCompressingServletInputStream(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,getIntHeader,@Override public int  (String header){ return isFilteredHeader(header) ? -1 : super.getIntHeader(header); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,getReader,"@Override public BufferedReader  () throws IOException { if (isGetInputStreamCalled) { throw new IllegalStateException(""getInputStream() has already been called""); } isGetReaderCalled=true; if (bufferedReader == null) { bufferedReader=new BufferedReader(n"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,isFilteredHeader,private static boolean  (String headerName){ return CompressingHttpServletResponse.CONTENT_ENCODING_HEADER.equalsIgnoreCase(headerName) || CompressingHttpServletResponse.ACCEPT_ENCODING_HEADER.equalsIgnoreCase(headerName); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressedHttpServletRequest.java,toString,"@Override public String  (){ return ""CompressedHttpServletRequest""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,destroy,"@Override public void  (){ logger.log(""CompressingFilter is being destroyed...""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,doFilter,@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { ServletRequest chainRequest=getRequest(request); ServletResponse chainResponse=getResponse(request response); boolean attempt
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,getRequest,"private ServletRequest  (ServletRequest request){ if (!(request instanceof HttpServletRequest)) { logger.logDebug(""Can't compress non-HTTP request""); return null; } HttpServletRequest httpRequest=(HttpServletRequest)request; String contentEncoding=httpRequest.getHeader(CompressingHttpServletResponse.CONTENT_ENCODING_HEADER); if (contentEncoding == null || StringUtils.equalsIgnoreCase(contentEncoding CompressingStreamFactory.NO_ENCODING)) { logger.logDebug(""Request is not compressed  so not decompressing""); return null; } if (!CompressingStreamFactory.isSupportedRequestContentEncoding(contentEncoding)) { logger.logDebug(""Can't decompress request with encoding: "" + contentEncoding); return null; } if (CompressingStreamFactory.NO_ENCODING.equalsIgnoreCase(contentEncoding)) { logger.logDebug(""Can't decompress request with encoding: "" + contentEncoding); return null; } return new CompressedHttpServletRequest(httpRequest CompressingStreamFactory.getFactoryForContentEncoding(contentEncoding) context); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,getResponse,"private ServletResponse  (ServletRequest request ServletResponse response){ if (response.isCommitted() || request.getAttribute(ALREADY_APPLIED_KEY) != null) { logger.logDebug(""Response committed or filter has already been applied""); return null; } if (!(request instanceof HttpServletRequest) || !(response instanceof HttpServletResponse)) { logger.logDebug(""Can't compress non-HTTP request  response""); return null; } HttpServletRequest httpRequest=(HttpServletRequest)request; HttpServletResponse httpResponse=(HttpServletResponse)response; if (logger.isDebug()) { logger.logDebug(""Request for: '"" + httpRequest.getRequestURI() + '\''); } String requestURI=httpRequest.getRequestURI(); if (!isCompressablePath(requestURI)) { logger.logDebug(""Compression disabled for path: "" + requestURI); return null; } String userAgent=httpRequest.getHeader(""User-Agent""); if (!isCompressableUserAgent(userAgent)) { logger.logDebug(""Compression disabled for User-Agent: "" + userAgent); return null; } setVaryHeader(httpResponse); String contentEncoding=CompressingStreamFactory.getBestContentEncoding(httpRequest); assert contentEncoding != null; if (CompressingStreamFactory.NO_ENCODING.equals(contentEncoding)) { logger.logDebug(""Compression not supported or declined by request""); return null; } if (logger.isDebug()) { logger.logDebug(""Compression supported; using content encoding '"" + contentEncoding + '\''); } CompressingStreamFactory compressingStreamFactory=CompressingStreamFactory.getFactoryForContentEncoding(contentEncoding); return new CompressingHttpServletResponse(httpResponse compressingStreamFactory contentEncoding context); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,init,"@Override public void  (FilterConfig config) throws ServletException { assert config != null; context=new CompressingFilterContext(config); logger=context.getLogger(); logger.log(""CompressingFilter has initialized""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,isCompressablePath,private boolean  (String path){ if (path != null) { for ( Pattern pattern : context.getPathPatterns()) { if (pattern.matcher(path).matches()) { return context.isIncludePathPatterns(); } } } return !context.isIncludePathPatterns(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,isCompressableUserAgent,private boolean  (String userAgent){ if (userAgent != null) { for ( Pattern pattern : context.getUserAgentPatterns()) { if (pattern.matcher(userAgent).matches()) { return context.isIncludeUserAgentPatterns(); } } } return !context.isIncludeUserAgentPatterns(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,setForRepose,public void  (){ isForRepose=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,setVaryHeader,"void  (HttpServletResponse httpResponse){ if (logger.isDebug()) { logger.logDebug(""Setting Vary Header because the response *could be compressed*. "" + VARY_HEADER + "" : ""+ CompressingHttpServletResponse.ACCEPT_ENCODING_HEADER); } httpResponse.addHeader(VARY_HEADER CompressingHttpServletResponse.ACCEPT_ENCODING_HEADER); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilter.java,toString,@Override public String  (){ return VERSION_STRING; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\test\java\org\openrepose\core\services\reporting\metrics\MetricNameUtilityTest.java,safeReportingNameShouldNotModifyASafeName,"@Test public void  () throws Exception { String name=""myName""; String safeName=MetricNameUtility.safeReportingName(name); assertThat(safeName equalTo(name)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\test\java\org\openrepose\core\services\reporting\metrics\MetricNameUtilityTest.java,safeReportingNameShouldReplaceUnsafeCharacters,"@Test public void  () throws Exception { String name=""/a/.+/.*""; String safeName=MetricNameUtility.safeReportingName(name); assertThat(safeName equalTo(name.replace('.' '_'))); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,SystemModelInterrogator,public  (String clusterId String nodeId){ this.clusterId=clusterId; this.nodeId=nodeId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,allClusterNodes,public static Map<String List<String>>  (SystemModel systemModel){ HashMap<String List<String>> clusterNodes=new HashMap<>(); for ( ReposeCluster cluster : systemModel.getReposeCluster()) { LinkedList<String> nodes=new LinkedList<>(); clusterNodes.put(cluster.getId() nodes); for ( Node node : cluster.getNodes().getNode()) { nodes.add(node.getId()); } } return clusterNodes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,getDefaultDestination,private Optional<Destination>  (Optional<ReposeCluster> cluster){ Optional<Destination> dest=Optional.empty(); if (cluster.isPresent()) { List<Destination> destinations=new ArrayList<>(); destinations.addAll(cluster.get().getDestinations().getEndpoint()); destinations.addAll(cluster.get().getDestinations().getTarget()); for ( Destination destination : destinations) { if (destination.isDefault()) { dest=Optional.of(destination); } } } return dest; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,getLocalCluster,public Optional<ReposeCluster>  (SystemModel systemModel){ for ( ReposeCluster cluster : systemModel.getReposeCluster()) { if (cluster.getId().equals(clusterId) && getLocalNode(cluster).isPresent()) { return Optional.of(cluster); } } return Optional.empty(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,getLocalNode,public Optional<Node>  (SystemModel systemModel){ Optional<Node> localNode=Optional.empty(); for ( Cluster reposeCluster : systemModel.getReposeCluster()) { if (reposeCluster.getId().equals(clusterId)) { localNode=getLocalNode(reposeCluster); } } return localNode; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\core\repose-core-api\src\main\java\org\openrepose\core\filter\SystemModelInterrogator.java,getServiceForCluster,public Optional<Service>  (SystemModel systemModel String serviceName){ Optional<ReposeCluster> cluster=getLocalCluster(systemModel); Optional<Service> found=Optional.empty(); if (cluster.isPresent() && cluster.get().getServices() != null) { for ( Service service : cluster.get().getServices().getService()) { if (service.getName().equalsIgnoreCase(serviceName)) { found=Optional.of(service); } } } return found; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,CompressingFilterLoggerImpl," (ServletContext ctx boolean debug String delegateLoggerName boolean isJavaUtilLogger) throws ServletException { assert ctx != null; servletContext=ctx; this.debug=debug; if (delegateLoggerName == null) { delegate=null; } else if (isJavaUtilLogger) { delegate=new JavaUtilLoggingImpl(delegateLoggerName); } else { try { Class<?> delegateClass=Class.forName(""com.planetj.servlet.filter.compression.JakartaCommonsLoggingImpl""); Constructor<?> constructor=delegateClass.getConstructor(String.class); delegate=(CompressingFilterLogger)constructor.newInstance(delegateLoggerName); } catch ( ClassNotFoundException cnfe) { throw new ServletException(cnfe); } catch ( NoSuchMethodException nsme) { throw new ServletException(nsme); } catch ( InvocationTargetException ite) { throw new ServletException(ite); } catch ( IllegalAccessException iae) { throw new ServletException(iae); } catch ( InstantiationException ie) { throw new ServletException(ie); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,isDebug,@Override public boolean  (){ return debug; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,log,@Override public void  (String message Throwable t){ servletContext.log(MESSAGE_PREFIX + message t); if (delegate != null) { delegate.log(message t); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,logDebug,@Override public void  (String message Throwable t){ if (debug) { servletContext.log(MESSAGE_PREFIX + message t); if (delegate != null) { delegate.logDebug(message t); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterLoggerImpl.java,toString,"@Override public String  (){ return ""CompressingFilterLoggerImpl""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,CompressingFilterStats, (){ responseInputStatsCallback=new OutputStatsCallback(StatsField.RESPONSE_INPUT_BYTES); responseCompressedStatsCallback=new OutputStatsCallback(StatsField.RESPONSE_COMPRESSED_BYTES); requestInputStatsCallback=new InputStatsCallback(StatsField.REQUEST_INPUT_BYTES); requestCompressedStatsCallback=new InputStatsCallback(StatsField.REQUEST_COMPRESSED_BYTES); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,InputStatsCallback,private  (StatsField field){ this.field=field; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,OutputStatsCallback,private  (StatsField field){ this.field=field; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,bytesRead,@Override public void  (long numBytes){ assert numBytes >= 0; switch (field) { case REQUEST_INPUT_BYTES: requestInputBytes+=numBytes; break; case REQUEST_COMPRESSED_BYTES: requestCompressedBytes+=numBytes; break; default : throw new IllegalStateException(
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,bytesWritten,@Override public void  (int numBytes){ assert numBytes >= 0; switch (field) { case RESPONSE_INPUT_BYTES: responseInputBytes+=(long)numBytes; break; case RESPONSE_COMPRESSED_BYTES: responseCompressedBytes+=(long)numBytes; break; default : throw new Illegal
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getInputStatsCallback,InputStatsCallback  (StatsField field){ switch (field) { case REQUEST_INPUT_BYTES: return requestInputStatsCallback; case REQUEST_COMPRESSED_BYTES: return requestCompressedStatsCallback; default : throw new IllegalArgumentException(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getNumRequestsCompressed,public int  (){ return numRequestsCompressed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getNumResponsesCompressed,public int  (){ return numResponsesCompressed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getOutputStatsCallback,OutputStatsCallback  (StatsField field){ switch (field) { case RESPONSE_INPUT_BYTES: return responseInputStatsCallback; case RESPONSE_COMPRESSED_BYTES: return responseCompressedStatsCallback; default : throw new IllegalArgumentException(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getRequestAverageCompressionRatio,public double  (){ return requestCompressedBytes == 0L ? 0.0 : (double)requestInputBytes / (double)requestCompressedBytes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getRequestCompressedBytes,public long  (){ return requestCompressedBytes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getRequestInputBytes,public long  (){ return requestInputBytes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getResponseAverageCompressionRatio,public double  (){ return responseCompressedBytes == 0L ? 0.0 : (double)responseInputBytes / (double)responseCompressedBytes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getResponseCompressedBytes,public long  (){ return responseCompressedBytes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getResponseInputBytes,public long  (){ return responseInputBytes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getTotalRequestsNotCompressed,public int  (){ return totalRequestsNotCompressed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,getTotalResponsesNotCompressed,public int  (){ return totalResponsesNotCompressed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,incrementNumRequestsCompressed,void  (){ numRequestsCompressed++; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,incrementNumResponsesCompressed,void  (){ numResponsesCompressed++; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,incrementTotalRequestsNotCompressed,void  (){ totalRequestsNotCompressed++; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,incrementTotalResponsesNotCompressed,void  (){ totalResponsesNotCompressed++; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterStats.java,toString,"@Override public String  (){ return ""InputStatsCallback[field: "" + field + ']'; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,CompressingFilterContext," (FilterConfig filterConfig) throws ServletException { assert filterConfig != null; debug=readBooleanValue(filterConfig ""debug""); String javaUtilDelegateName=filterConfig.getInitParameter(""javaUtilLogger""); if (javaUtilDelegateName != null) { logger=new CompressingFilterLoggerImpl(filterConfig.getServletContext() debug javaUtilDelegateName true); } else { String jakartaCommonsDelegateName=filterConfig.getInitParameter(""jakartaCommonsLogger""); logger=new CompressingFilterLoggerImpl(filterConfig.getServletContext() debug jakartaCommonsDelegateName false); } logger.logDebug(""Debug logging statements are enabled""); compressionThreshold=readCompressionThresholdValue(filterConfig); if (logger.isDebug()) { logger.logDebug(""Using compressing threshold: "" + compressionThreshold); } servletContext=filterConfig.getServletContext(); assert this.servletContext != null; if (readBooleanValue(filterConfig ""statsEnabled"")) { stats=new CompressingFilterStats(); ensureStatsInContext(); logger.logDebug(""Stats are enabled""); } else { stats=null; logger.logDebug(""Stats are disabled""); } String includeContentTypesString=filterConfig.getInitParameter(""includeContentTypes""); String excludeContentTypesString=filterConfig.getInitParameter(""excludeContentTypes""); if (includeContentTypesString != null && excludeContentTypesString != null) { throw new IllegalArgumentException(""Can't specify both includeContentTypes and excludeContentTypes""); } if (includeContentTypesString == null) { includeContentTypes=false; contentTypes=parseContentTypes(excludeContentTypesString); } else { includeContentTypes=true; contentTypes=parseContentTypes(includeContentTypesString); } if (!contentTypes.isEmpty()) { logger.logDebug(""Filter will "" + (includeContentTypes ? ""include"" : ""exclude"") + "" only these content types: ""+ contentTypes); } String includePathPatternsString=filterConfig.getInitParameter(""includePathPatterns""); String excludePathPatternsString=filterConfig.getInitParameter(""excludePathPatterns""); if (includePathPatternsString != null && excludePathPatternsString != null) { throw new IllegalArgumentException(""Can't specify both includePathPatterns and excludePathPatterns""); } if (includePathPatternsString == null) { includePathPatterns=false; pathPatterns=parsePatterns(excludePathPatternsString); } else { includePathPatterns=true; pathPatterns=parsePatterns(includePathPatternsString); } if (!pathPatterns.isEmpty() && logger.isDebug()) { logger.logDebug(""Filter will "" + (includePathPatterns ? ""include"" : ""exclude"") + "" only these file patterns: ""+ pathPatterns); } String includeUserAgentPatternsString=filterConfig.getInitParameter(""includeUserAgentPatterns""); String excludeUserAgentPatternsString=filterConfig.getInitParameter(""excludeUserAgentPatterns""); if (includeUserAgentPatternsString != null && excludeUserAgentPatternsString != null) { throw new IllegalArgumentException(""Can't specify both includeUserAgentPatterns and excludeUserAgentPatterns""); } if (includeUserAgentPatternsString == null) { includeUserAgentPatterns=false; userAgentPatterns=parsePatterns(excludeUserAgentPatternsString); } else { includeUserAgentPatterns=true; userAgentPatterns=parsePatterns(includeUserAgentPatternsString); } if (!userAgentPatterns.isEmpty() && logger.isDebug()) { logger.logDebug(""Filter will "" + (includeUserAgentPatterns ? ""include"" : ""exclude"") + "" only these User-Agent patterns: ""+ userAgentPatterns); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,ensureStatsInContext,private void  (){ assert servletContext != null; if (servletContext.getAttribute(CompressingFilterStats.STATS_KEY) == null) { servletContext.setAttribute(CompressingFilterStats.STATS_KEY stats); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,getCompressionThreshold,int  (){ return compressionThreshold; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,getContentTypes,Collection<String>  (){ return contentTypes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,getLogger,CompressingFilterLogger  (){ assert logger != null; return logger; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,getPathPatterns,Iterable<Pattern>  (){ return pathPatterns; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,getStats,"CompressingFilterStats  (){ if (stats == null) { throw new IllegalStateException(""Stats are not enabled""); } ensureStatsInContext(); return stats; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,getUserAgentPatterns,Iterable<Pattern>  (){ return userAgentPatterns; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,isDebug,boolean  (){ return debug; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,isIncludeContentTypes,boolean  (){ return includeContentTypes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,isIncludePathPatterns,boolean  (){ return includePathPatterns; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,isIncludeUserAgentPatterns,boolean  (){ return includeUserAgentPatterns; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,isStatsEnabled,boolean  (){ return stats != null; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,parseContentTypes,private static Collection<String>  (String contentTypesString){ if (contentTypesString == null) { return Collections.emptyList(); } List<String> contentTypes=new ArrayList<>(5); for ( String contentType : COMMA.split(contentTypesString)) { if (contentType.length() > 0) { contentTypes.add(contentType); } } return Collections.unmodifiableList(contentTypes); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,parsePatterns,private static Collection<Pattern>  (String patternsString){ if (patternsString == null) { return Collections.emptyList(); } List<Pattern> patterns=new ArrayList<>(5); for ( String pattern : COMMA.split(patternsString)) { if (pattern.length() > 0) { patterns.add(Pattern.compile(pattern)); } } return Collections.unmodifiableList(patterns); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,readBooleanValue,private static boolean  (FilterConfig filterConfig String parameter){ return Boolean.valueOf(filterConfig.getInitParameter(parameter)); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,readCompressionThresholdValue,"private static int  (FilterConfig filterConfig) throws ServletException { String compressionThresholdString=filterConfig.getInitParameter(""compressionThreshold""); int value; if (compressionThresholdString != null) { try { value=Integer.parseInt(compressionThresholdString); } catch ( NumberFormatException nfe) { throw new ServletException(""Invalid compression threshold: "" + compressionThresholdString nfe); } if (value < 0) { throw new ServletException(""Compression threshold cannot be negative""); } } else { value=DEFAULT_COMPRESSION_THRESHOLD; } return value; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingFilterContext.java,toString,"@Override public String  (){ return ""CompressingFilterContext""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,CompressingHttpServletResponse, (HttpServletResponse httpResponse CompressingStreamFactory compressingStreamFactory String contentEncoding CompressingFilterContext context){ super(httpResponse); this.httpResponse=httpResponse; this.compressedContentEncoding=contentEncoding; compressing=false; logger=context.getLogger(); this.compressingStreamFactory=compressingStreamFactory; this.context=context; contentTypeOK=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,addDateHeader,@Override public void  (String name long value){ if (isAllowedHeader(name)) { httpResponse.addDateHeader(name value); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,addHeader,"@Override public void  (String name String value){ if (CACHE_CONTROL_HEADER.equalsIgnoreCase(name)) { httpResponse.addHeader(CACHE_CONTROL_HEADER value); if (value.contains(""no-transform"")) { logger.logDebug(""Aborting compression due to no-transform direc"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,addIntHeader,@Override public void  (String name int value){ if (CONTENT_LENGTH_HEADER.equalsIgnoreCase(name)) { setContentLength(value); } else if (ETAG_HEADER.equalsIgnoreCase(name)) { savedETag=String.valueOf(value); setETagHeader(); } else if (isAllowedHeader(name
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,close,void  () throws IOException { if (compressingSOS != null && !compressingSOS.isClosed()) { compressingSOS.close(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,doSetContentLength,"private void  (long contentLength){ if (compressing) { logger.logDebug(""Ignoring application-specified content length since response is compressed""); } else { savedContentLength=contentLength; savedContentLengthSet=true; logger.logDebug(""Saving application-specified content length for later: "" + contentLength); if (compressingSOS != null && compressingSOS.isAborted()) { httpResponse.setHeader(CONTENT_LENGTH_HEADER String.valueOf(contentLength)); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,equalsIgnoreCaseAny,private static boolean  (String a String... others){ for ( String other : others) { if (a.equalsIgnoreCase(other)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,flushBuffer,@Override public void  (){ flushWriter(); if (compressingSOS != null) { compressingSOS.flush(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,flushWriter,private void  (){ if (printWriter != null) { printWriter.flush(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,getCompressingServletOutputStream,private CompressingServletOutputStream  () throws IOException { if (compressingSOS == null) { compressingSOS=new CompressingServletOutputStream(httpResponse.getOutputStream() compressingStreamFactory this context logger); } if (!compressingSOS.isClosed() && mustNotCompress()) { compressingSOS.abortCompression(); } return compressingSOS; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,getOutputStream,"@Override public ServletOutputStream  () throws IOException { if (isGetWriterCalled) { throw new IllegalStateException(""getWriter() has already been called""); } isGetOutputStreamCalled=true; return getCompressingServletOutputStream(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,getWriter,"@Override public PrintWriter  () throws IOException { if (isGetOutputStreamCalled) { throw new IllegalStateException(""getCompressingOutputStream() has already been called""); } isGetWriterCalled=true; if (printWriter == null) { printWriter=new PrintWriter("
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,isAllowedHeader,"private boolean  (String header){ boolean unallowed=header != null && equalsIgnoreCaseAny(header UNALLOWED_HEADERS); if (unallowed && logger.isDebug()) { logger.logDebug(""Header '"" + header + ""' cannot be set by application""); } return !unallowed; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,isCompressableContentType,private boolean  (String contentType){ String contentTypeOnly=contentType; if (contentType != null) { int semicolonIndex=contentType.indexOf((int)';'); if (semicolonIndex >= 0) { contentTypeOnly=contentType.substring(0 semicolonIndex); } } else { return true; } for ( String compressionEncoding : CompressingStreamFactory.ALL_COMPRESSION_ENCODINGS) { if (contentTypeOnly.contains(compressionEncoding)) { return false; } } boolean isContained=context.getContentTypes().contains(contentTypeOnly); return context.isIncludeContentTypes() ? isContained : !isContained; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,isCompressableEncoding,private static boolean  (String encoding){ if (encoding == null) { return true; } for ( String compressionEncoding : CompressingStreamFactory.ALL_COMPRESSION_ENCODINGS) { if (encoding.equals(compressionEncoding)) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,isCompressing,boolean  (){ return compressing; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,maybeAbortCompression,"private void  (){ if (compressingSOS != null) { try { compressingSOS.abortCompression(); } catch ( IOException ioe) { logger.log(""Unexpected error while aborting compression"" ioe); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,mustNotCompress,"private boolean  (){ contentTypeOK=isCompressableContentType(this.httpResponse.getHeader(""content-type"")); if (!contentTypeOK) { logger.logDebug(""Will not compress since configuration excludes this content type""); return true; } if (savedContentLengthSet && savedContentLength < (long)context.getCompressionThreshold()) { logger.logDebug(""Will not compress since page has set a content length which is less than "" + ""the compression threshold: "" + savedContentLength); return true; } if (noTransformSet) { logger.logDebug(""Will not compress since no-transform was specified""); return true; } return !isCompressableEncoding(savedContentEncoding); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,rawStreamCommitted,"void  (){ assert !compressing; logger.logDebug(""Committing response without compression""); setNonCompressionResponseHeaders(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,reset,@Override public void  (){ flushWriter(); if (compressingSOS != null) { compressingSOS.reset(); } httpResponse.reset(); if (compressing) { setCompressionResponseHeaders(); } else { setNonCompressionResponseHeaders(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,resetBuffer,@Override public void  (){ flushWriter(); if (compressingSOS != null) { compressingSOS.reset(); } httpResponse.resetBuffer(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,setCompressionResponseHeaders,"private void  (){ logger.logDebug(""Setting compression-related headers""); String fullContentEncodingHeader=savedContentEncoding == null ? compressedContentEncoding : savedContentEncoding + ' ' + compressedContentEncoding; httpResponse.setHeader(CONTENT_ENCODING_HEADER fullContentEncodingHeader); setETagHeader(); if (context.isDebug()) { httpResponse.setHeader(X_COMPRESSED_BY_HEADER COMPRESSED_BY_VALUE); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,setContentLength,@Override public void  (int contentLength){ doSetContentLength((long)contentLength); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,setContentType,"@Override public void  (String contentType){ contentTypeOK=isCompressableContentType(contentType); httpResponse.setContentType(contentType); if (!contentTypeOK && compressingSOS != null) { logger.logDebug(""Aborting compression since Content-Type is exclud"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,setDateHeader,@Override public void  (String name long value){ if (isAllowedHeader(name)) { httpResponse.setDateHeader(name value); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,setETagHeader,private void  (){ if (savedETag != null) { if (compressing) { httpResponse.setHeader(ETAG_HEADER savedETag + '-' + compressedContentEncoding); } else { httpResponse.setHeader(ETAG_HEADER savedETag); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,setHeader,"@Override public void  (String name String value){ if (CACHE_CONTROL_HEADER.equalsIgnoreCase(name)) { httpResponse.setHeader(CACHE_CONTROL_HEADER value); if (value.contains(""no-transform"")) { logger.logDebug(""Aborting compression due to no-transform direc"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,setIntHeader,@Override public void  (String name int value){ if (CONTENT_LENGTH_HEADER.equalsIgnoreCase(name)) { setContentLength(value); } else if (ETAG_HEADER.equalsIgnoreCase(name)) { savedETag=String.valueOf(value); setETagHeader(); } else if (isAllowedHeader(name
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,setNonCompressionResponseHeaders,private void  (){ if (savedContentLengthSet) { httpResponse.setHeader(CONTENT_LENGTH_HEADER String.valueOf(savedContentLength)); } if (savedContentEncoding != null) { httpResponse.setHeader(CONTENT_ENCODING_HEADER savedContentEncoding); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,switchToCompression,"void  (){ assert !compressing; logger.logDebug(""Switching to compression in the response""); compressing=true; setCompressionResponseHeaders(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingHttpServletResponse.java,toString,"@Override public String  (){ return ""CompressingHttpServletResponse[compressing: "" + compressing + ']'; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,CompressingServletInputStream, (InputStream rawStream CompressingStreamFactory compressingStreamFactory CompressingFilterContext context) throws IOException { this.compressingStream=compressingStreamFactory.getCompressingStream(rawStream context).getCompressingInputStream(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,available,@Override public int  () throws IOException { checkClosed(); return compressingStream.available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,checkClosed,"private void  (){ if (closed) { throw new IllegalStateException(""Stream is already closed""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,close,@Override public void  () throws IOException { if (!closed) { compressingStream.close(); closed=true; } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,mark,@Override public synchronized void  (int readlimit){ checkClosed(); compressingStream.mark(readlimit); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,markSupported,@Override public boolean  (){ checkClosed(); return compressingStream.markSupported(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,read,@Override public int  (byte[] b int offset int length) throws IOException { checkClosed(); return compressingStream.read(b offset length); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,reset,@Override public synchronized void  () throws IOException { checkClosed(); compressingStream.reset(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,skip,@Override public long  (long n) throws IOException { checkClosed(); return compressingStream.skip(n); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletInputStream.java,toString,"@Override public String  (){ return ""CompressingServletInputStream""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,CompressingServletOutputStream, (OutputStream rawStream CompressingStreamFactory compressingStreamFactory CompressingHttpServletResponse compressingResponse CompressingFilterContext context CompressingFilterLogger logger){ this.rawStream=rawStream; this.compressingStreamFactory=compressingStreamFactory; this.compressingResponse=compressingResponse; this.context=context; this.logger=logger; closed=false; aborted=false; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,ResponseBufferCommitmentCallback,private  (CompressingHttpServletResponse response){ assert response != null; this.response=response; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,abortCompression,void  () throws IOException { assert thresholdOutputStream == null; checkWriteState(); thresholdOutputStream.forceOutputStream1(); aborted=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,checkClosed,"private void  () throws IOException { if (closed) { throw new IOException(""Stream is already closed""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,checkWriteState,private void  (){ if (thresholdOutputStream == null) { thresholdOutputStream=new ThresholdOutputStream(rawStream compressingStreamFactory context new ResponseBufferCommitmentCallback(compressingResponse) logger); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,close,@Override public void  () throws IOException { if (!closed) { compressingResponse.flushBuffer(); closed=true; if (thresholdOutputStream == null) { compressingResponse.rawStreamCommitted(); rawStream.close(); } else { thresholdOutputStream.close(); } } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,compressingStreamCommitted,@Override public void  (){ response.switchToCompression(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,engageCompression,void  () throws IOException { checkWriteState(); thresholdOutputStream.switchToOutputStream2(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,isAborted,boolean  (){ return aborted; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,isClosed,boolean  (){ return closed; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,rawStreamCommitted,@Override public void  (){ response.rawStreamCommitted(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,reset,void  (){ if (thresholdOutputStream != null) { thresholdOutputStream.reset(); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,toString,"@Override public String  (){ return ""ResponseBufferCommitmentCallback""; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingServletOutputStream.java,write,@Override public void  (int b) throws IOException { checkClosed(); checkWriteState(); assert thresholdOutputStream != null; thresholdOutputStream.write(b); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,ContentEncodingQ,"@SuppressWarnings(""squid:S3346"") private  (String contentEncoding double q){ assert contentEncoding != null && contentEncoding.length() > 0; this.contentEncoding=contentEncoding; this.q=q; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,finish,@Override public void  () throws IOException { deflaterOutputStream.finish(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,getBestContentEncoding,static String  (HttpServletRequest httpRequest){ String forcedEncoding=(String)httpRequest.getAttribute(CompressingFilter.FORCE_ENCODING_KEY); String bestEncoding; if (forcedEncoding != null) { bestEncoding=forcedEncoding; } else { String acceptEncodingHeader=httpRequest.getHeader(CompressingHttpServletResponse.ACCEPT_ENCODING_HEADER); if (acceptEncodingHeader == null) { bestEncoding=NO_ENCODING; } else { bestEncoding=BEST_ENCODING_CACHE.get(acceptEncodingHeader); if (bestEncoding == null) { if (acceptEncodingHeader.indexOf((int)' ') >= 0) { bestEncoding=selectBestEncoding(acceptEncodingHeader); } else { bestEncoding=parseBestEncoding(acceptEncodingHeader); } BEST_ENCODING_CACHE.put(acceptEncodingHeader bestEncoding); } } } if (!isSupportedResponseContentEncoding(bestEncoding)) { bestEncoding=NO_ENCODING; } return bestEncoding; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,getCompressingOutputStream,@Override public OutputStream  (){ return statsOutputStream; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,getCompressingStream,@Override CompressingInputStream  (final InputStream inputStream final CompressingFilterContext context){ return () -> CompressingStreamFactory.maybeWrapStatsInputStream(new InflaterInputStream(CompressingStreamFactory.maybeWrapStatsInputStream(inputStrea
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,JavaUtilLoggingImpl,public  (String loggerName){ logger=Logger.getLogger(loggerName); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,getContentEncoding,String  (){ return contentEncoding; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,isDebug,@Override public boolean  (){ return logger.isLoggable(Level.FINE); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,getFactoryForContentEncoding,"@SuppressWarnings(""squid:S3346"") static CompressingStreamFactory  (String contentEncoding){ assert FACTORY_MAP.containsKey(contentEncoding); return FACTORY_MAP.get(contentEncoding); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,log,@Override public void  (String message Throwable t){ logger.log(Level.INFO message t); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,getQ,double  (){ return q; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,logDebug,@Override public void  (String message Throwable t){ logger.log(Level.FINE message t); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,isSupportedRequestContentEncoding,static boolean  (String contentEncoding){ return NO_ENCODING.equals(contentEncoding) || FACTORY_MAP.containsKey(contentEncoding); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\JavaUtilLoggingImpl.java,toString,"@Override public String  (){ return ""JavaUtilLoggingImpl["" + logger + ']'; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,isSupportedResponseContentEncoding,private static boolean  (String contentEncoding){ return NO_ENCODING.equals(contentEncoding) || FACTORY_MAP.containsKey(contentEncoding); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,maybeWrapStatsInputStream,private static InputStream  (InputStream inputStream CompressingFilterContext context CompressingFilterStats.StatsField field){ assert inputStream != null; InputStream result; if (context.isStatsEnabled()) { CompressingFilterStats stats=context.getStats(); CompressingFilterStats.InputStatsCallback callbackInput=stats.getInputStatsCallback(field); result=new StatsInputStream(inputStream callbackInput); } else { result=inputStream; } return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,maybeWrapStatsOutputStream,private static OutputStream  (OutputStream outputStream CompressingFilterContext context CompressingFilterStats.StatsField field){ assert outputStream != null; OutputStream result; if (context.isStatsEnabled()) { CompressingFilterStats stats=context.getStats(); CompressingFilterStats.OutputStatsCallback callbackOutput=stats.getOutputStatsCallback(field); result=new StatsOutputStream(outputStream callbackOutput); } else { result=outputStream; } return result; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,parseBestEncoding,private static String  (String acceptEncodingHeader){ ContentEncodingQ contentEncodingQ=parseContentEncodingQ(acceptEncodingHeader); String contentEncoding=contentEncodingQ.getContentEncoding(); if (contentEncodingQ.getQ() > 0.0) { if (ANY_ENCODING.equals(contentEncoding)) { return SUPPORTED_ENCODINGS.get(0); } else if (SUPPORTED_ENCODINGS.contains(contentEncoding)) { return contentEncoding; } } return NO_ENCODING; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,parseContentEncodingQ,"private static ContentEncodingQ  (String contentEncodingString){ double q=1.0; int qvalueStartIndex=contentEncodingString.indexOf((int)';'); String contentEncoding; if (qvalueStartIndex >= 0) { contentEncoding=contentEncodingString.substring(0 qvalueStartIndex).trim(); String qvalueString=contentEncodingString.substring(qvalueStartIndex + 1).trim(); if (qvalueString.startsWith(""q="")) { try { q=Double.parseDouble(qvalueString.substring(2)); } catch ( NumberFormatException ignored) { LOG.trace(""Couldn't parse a Double from {}."" qvalueString.substring(2) ignored); } } } else { contentEncoding=contentEncodingString.trim(); } return new ContentEncodingQ(contentEncoding q); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,selectBestEncoding,"@SuppressWarnings(""squid:S1244"") private static String  (String acceptEncodingHeader){ Collection<String> bestEncodings=new HashSet<>(3); double bestQ=0.0; Collection<String> unacceptableEncodings=new HashSet<>(3); boolean willAcceptAnything=false; for ( "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\CompressingStreamFactory.java,toString,"@Override public String  (){ return contentEncoding + "";q="" + q; } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\StatsOutputStream.java,StatsOutputStream, (OutputStream outputStream StatsCallback statsCallback){ assert outputStream != null && statsCallback != null; this.outputStream=outputStream; this.statsCallback=statsCallback; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\StatsInputStream.java,StatsInputStream, (InputStream inputStream StatsCallback statsCallback){ assert inputStream != null && statsCallback != null; this.inputStream=inputStream; this.statsCallback=statsCallback; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\StatsInputStream.java,available,@Override public int  () throws IOException { return inputStream.available(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\ThresholdOutputStream.java,ThresholdOutputStream, (OutputStream out1 CompressingStreamFactory compressingStreamFactory CompressingFilterContext context BufferCommitmentCallback thresholdReachedCallback CompressingFilterLogger logger){ assert out1 != null && compressingStreamFactory != null && context != null && thresholdReachedCallback != null; buffering=true; this.out1=out1; this.compressingStreamFactory=compressingStreamFactory; this.context=context; threshold=context.getCompressionThreshold(); bufferCommitmentCallback=thresholdReachedCallback; this.logger=logger; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\ThresholdOutputStream.java,checkClosed,"private void  (){ if (closed) { throw new IllegalStateException(""Stream is closed""); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\main\java\org\openrepose\external\pjlcompression\ThresholdOutputStream.java,close,@Override public void  () throws IOException { closed=true; if (forceOut1) { out1.flush(); out1.close(); } else if (buffering) { forceOutputStream1(); out1.flush(); out1.close(); } else { assert out2 != null; assert compressingOutputStream != null; out2.f
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterRequestTest.java,doGet,@Override public void  (HttpServletRequest request HttpServletResponse response) throws IOException { InputStream sis=request.getInputStream(); byte[] buffer=new byte[1024]; int bytesRead; while ((bytesRead=sis.read(buffer)) > 0) { baos.write(buffer 0 byt
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterRequestTest.java,getCompressedOutput,private static byte[]  (byte[] output) throws IOException { ByteArrayOutputStream baos=new ByteArrayOutputStream(); DeflaterOutputStream gzipOut=new GZIPOutputStream(baos); gzipOut.write(output); gzipOut.finish(); gzipOut.close(); baos.close(); return baos.toByteArray(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterRequestTest.java,setUp,"@Before public void  () throws Exception { filterConfig=new MockFilterConfig(); filterConfig.addInitParameter(""debug"" ""true""); filterConfig.addInitParameter(""statsEnabled"" ""true""); filter=new CompressingFilter(); filter.init(filterConfig); request=new Moc"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterRequestTest.java,testBigOutput,@Test public void  () throws Exception { final ByteArrayOutputStream baos=new ByteArrayOutputStream(10000); filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IO
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,doGet,"@Override public void  (HttpServletRequest request HttpServletResponse response) throws IOException { response.setHeader(""ETag"" String.valueOf(output.hashCode())); response.getWriter().print(output); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,doTestNoOutput,"private void  () throws IOException  ServletException { filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { response.getWriter().close(); } } ); filter.doFilter(request response filterChain); assertEquals(HttpServletResponse.SC_OK response.getStatus()); assertNull(response.getRedirectedUrl()); verify(response never()).sendError(anyInt()); verify(response never()).sendError(anyInt() anyString()); assertEquals(EMPTY response.getContentAsString()); assertNull(request.getAttribute(CompressingFilter.COMPRESSED_KEY)); assertFalse(response.containsHeader(""Content-Encoding"")); assertFalse(response.containsHeader(""X-Compressed-By"")); assertTrue(response.containsHeader(CompressingFilter.VARY_HEADER)); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,getCompressedOutput,private static byte[]  (byte[] output) throws IOException { ByteArrayOutputStream baos=new ByteArrayOutputStream(); DeflaterOutputStream gzipOut=new GZIPOutputStream(baos); gzipOut.write(output); gzipOut.finish(); gzipOut.close(); return baos.toByteArray(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,setUp,"@Before public void  () throws Exception { filterConfig=new MockFilterConfig(); filterConfig.addInitParameter(""debug"" ""true""); filterConfig.addInitParameter(""statsEnabled"" ""true""); filterConfig.addInitParameter(""excludePathPatterns"" "".*badpath.* whocares"""
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testAlreadyApplied,@Test public void  () throws Exception { verifyOutput(BIG_DOCUMENT true); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testBigOutput,@Test public void  () throws Exception { verifyOutput(BIG_DOCUMENT true); CompressingFilterStats stats=(CompressingFilterStats)filterConfig.getServletContext().getAttribute(CompressingFilterStats.STATS_KEY); assertNotNull(stats); assertEquals(0 stats.getN
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testClose,@Test public void  () throws IOException  ServletException { filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { response.getWriter().print(SMALL_DO
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testExcludeContentTypes1,"@Test public void  () throws Exception { filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { response.setContentType(""text/badtype; otherstuff""); re"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testExcludeContentTypes2,"@Test public void  () throws Exception { filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { response.setContentType(""text/goodtype; otherstuff""); r"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testExcludePathPatterns1,"@Test public void  () throws Exception { request.setRequestURI(""/some/goodpath/index.html""); verifyOutput(BIG_DOCUMENT true); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testExcludePathPatterns2,"@Test public void  () throws Exception { request.setRequestURI(""/some/badpath/index.html""); verifyOutput(BIG_DOCUMENT false); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testExcludeUserAgentPatterns1,"@Test public void  () throws Exception { request.addHeader(""User-Agent"" ""MSIE5""); verifyOutput(BIG_DOCUMENT true); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testExcludeUserAgentPatterns2,"@Test public void  () throws Exception { request.addHeader(""User-Agent"" ""Nokia6820""); verifyOutput(BIG_DOCUMENT false); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testFlush,@Test public void  () throws IOException  ServletException { filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { response.getWriter().print(SMALL_DO
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testForceEncoding,"@Test public void  () throws Exception { request.setAttribute(CompressingFilter.FORCE_ENCODING_KEY ""identity""); verifyOutput(BIG_DOCUMENT false); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testNoGzipOutput,@Test public void  () throws IOException  ServletException { doTestNoOutput(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testNoTransform,"@Test public void  () throws Exception { filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { response.setHeader(""Cache-Control"" ""no-transform""); res"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testNoZipOutput,"@Test public void  () throws IOException  ServletException { request.addHeader(""Content-Encoding"" ""compress""); doTestNoOutput(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testRedirect,"@Test public void  () throws Exception { String redirectLocation=""http://www.google.com/""; filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { respo"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testSmallOutput,@Test public void  () throws Exception { verifyOutput(SMALL_DOCUMENT false); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,testSpuriousFlushClose,@Test public void  () throws IOException  ServletException { filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { response.getWriter().print(SMALL_DO
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterResponseTest.java,verifyOutput,"private void  (boolean initFilterChain final String output boolean shouldCompress) throws IOException  ServletException { if (initFilterChain) { filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { response.setHeader(""ETag"" String.valueOf(output.hashCode())); response.getWriter().print(output); } } ); } request.addHeader(""Accept-Encoding"" ""deflate gzip""); filter.doFilter(request response filterChain); assertEquals(HttpServletResponse.SC_OK response.getStatus()); assertNull(response.getRedirectedUrl()); verify(response never()).sendError(anyInt()); verify(response never()).sendError(anyInt() anyString()); if (shouldCompress) { assertTrue(response.containsHeader(""Vary"")); byte[] outputBytes=output.getBytes(TEST_ENCODING); byte[] expectedBytes=getCompressedOutput(outputBytes); byte[] moduleOutput=response.getContentAsByteArray(); assertThat(outputBytes not(equalTo(moduleOutput))); assertArrayEquals(expectedBytes moduleOutput); assertEquals(Boolean.TRUE request.getAttribute(CompressingFilter.COMPRESSED_KEY)); assertTrue(response.containsHeader(""Content-Encoding"")); assertTrue(response.containsHeader(""X-Compressed-By"")); assertThat(response.getHeader(""ETag"") anyOf(org.hamcrest.Matchers.nullValue() org.hamcrest.Matchers.endsWith(""-gzip""))); } else { assertEquals(output response.getContentAsString()); assertNull(request.getAttribute(CompressingFilter.COMPRESSED_KEY)); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterTest.java,doFilter_acceptEncodingShouldBeRemovedFromRequest,@Test public void  () throws Exception { MockHttpServletRequest mockRequest=new MockHttpServletRequest(); MockHttpServletResponse mockResponse=new MockHttpServletResponse(); FilterChain mockFilterChain=mock(FilterChain.class); ArgumentCaptor<ServletReques
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\CompressingFilterTest.java,setup,@Before public void  () throws Exception { MockFilterConfig filterConfig=new MockFilterConfig(); compressingFilter=new CompressingFilter(); compressingFilter.init(filterConfig); compressingFilter.setForRepose(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\LogTest.java,testJavaUtiImpl,"@Test public void  () throws Exception { Class<?> delegateClass=Class.forName(""org.openrepose.external.pjlcompression.JavaUtilLoggingImpl""); Constructor<?> constructor=delegateClass.getConstructor(String.class); constructor.newInstance(""foo""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\LoadRunner.java,doGet,@Override public void  (HttpServletRequest request HttpServletResponse response) throws IOException { PrintWriter writer=response.getWriter(); for ( String string : data) { writer.print(string); } } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\LoadRunner.java,main,"public static void  (String... args) throws IOException  ServletException { MockFilterConfig filterConfig=new MockFilterConfig(); filterConfig.addInitParameter(""debug"" ""true""); filterConfig.addInitParameter(""statsEnabled"" ""true""); CompressingFilter filter=new CompressingFilter(); filter.init(filterConfig); MockHttpServletRequest request=new MockHttpServletRequest(); request.setMethod(""GET""); request.addHeader(""Accept-Encoding"" ""gzip""); MockHttpServletResponse response=new MockHttpServletResponse(); Random r=new Random(0xDEADBEEFL); final String[] data=new String[200]; for (int i=0; i < data.length; i++) { byte[] bytes=new byte[50]; r.nextBytes(bytes); data[i]=new String(bytes); } MockFilterChain filterChain=new MockFilterChain(new HttpServlet(){ @Override public void doGet( HttpServletRequest request  HttpServletResponse response) throws IOException { PrintWriter writer=response.getWriter(); for ( String string : data) { writer.print(string); } } } ); long start=System.currentTimeMillis(); int iterations=1000; for (int i=0; i < iterations; i++) { filter.doFilter(request response filterChain); } long end=System.currentTimeMillis(); long time=end - start; System.out.println(""Completed in "" + time + ""ms (""+ (double)time / iterations + "" per request)""); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsOutputStreamTest.java,assertBytesWritten,private void  (int numBytes){ assertEquals(numBytes callback.totalBytesWritten); assertEquals(numBytes baos.size()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsOutputStreamTest.java,bytesWritten,public void  (int numBytes){ totalBytesWritten+=numBytes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsOutputStreamTest.java,setUp,@Before public void  () throws Exception { baos=new ByteArrayOutputStream(); callback=new MockStatsCallback(); statsOut=new StatsOutputStream(baos callback); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsOutputStreamTest.java,testStats,@Test public void  () throws Exception { assertBytesWritten(0); statsOut.write(0); assertBytesWritten(1); statsOut.write(new byte[10]); assertBytesWritten(11); statsOut.write(new byte[10] 0 5); assertBytesWritten(16); statsOut.flush(); assertBytesWritten(
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,compressingStreamCommitted,public void  (){ compressingStreamCommitted=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,rawStreamCommitted,public void  (){ rawStreamCommitted=true; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,setUp,@Before public void  () throws Exception { baos=new ByteArrayOutputStream(); callback=new Callback(); FilterConfig filterConfig=new MockFilterConfig(); CompressingFilterContext context=new CompressingFilterContext(filterConfig); CompressingFilterLogger lo
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,testCompression,@Test public void  () throws Exception { byte[] bytes=CompressingFilterResponseTest.BIG_DOCUMENT.getBytes(); tos.write(bytes); tos.close(); assertThat(baos.size() greaterThan(0)); assertThat(baos.size() lessThan(bytes.length)); assertFalse(callback.rawStr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,testForceCompression,@Test public void  () throws Exception { byte[] bytes=CompressingFilterResponseTest.SMALL_DOCUMENT.getBytes(); tos.switchToOutputStream2(); for (int i=0; i < 10; i++) { tos.write(bytes); } tos.close(); assertThat(baos.size() greaterThan(0)); assertThat(ba
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,testForceNoCompression,@Test public void  () throws Exception { byte[] bytes=CompressingFilterResponseTest.BIG_DOCUMENT.getBytes(); tos.forceOutputStream1(); tos.write(bytes); tos.close(); assertThat(bytes equalTo(baos.toByteArray())); assertTrue(callback.rawStreamCommitted); a
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,testNoCompression,@Test public void  () throws Exception { byte[] bytes=CompressingFilterResponseTest.SMALL_DOCUMENT.getBytes(); tos.write(bytes); tos.close(); assertThat(bytes equalTo(baos.toByteArray())); assertTrue(callback.rawStreamCommitted); assertFalse(callback.comp
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,testReset,@Test public void  () throws Exception { tos.write(new byte[10]); assertEquals(0 baos.size()); tos.reset(); assertEquals(0 baos.size()); tos.close(); assertEquals(0 baos.size()); assertTrue(callback.rawStreamCommitted); assertFalse(callback.compressingStr
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\ThresholdOutputStreamTest.java,testWriteFlush,@Test public void  () throws Exception { tos.write(0); tos.write(new byte[10]); tos.write(new byte[10] 0 5); assertEquals(0 baos.size()); tos.flush(); assertEquals(10 baos.size()); tos.close(); assertEquals(23 baos.size()); assertFalse(callback.rawStreamC
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,assertBytesRead,private void  (int numBytes){ assertEquals(numBytes callback.totalBytesRead); assertEquals(numBytes 100 - bais.available()); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,bytesRead,public void  (long numBytes){ totalBytesRead+=numBytes; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,setUp,@Before public void  () throws Exception { bais=new ByteArrayInputStream(new byte[100]); callback=new MockStatsCallback(); statsIn=new StatsInputStream(bais callback); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,testMarkSkipReset,@Test public void  () throws Exception { assertTrue(statsIn.markSupported()); statsIn.mark(40); statsIn.skip(50); assertBytesRead(50); try { statsIn.reset(); } catch ( IOException expectedException) { } statsIn.close(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\external\pjl-compressing-filter\src\test\java\org\openrepose\external\pjlcompression\StatsInputStreamTest.java,testStats,@Test public void  () throws Exception { assertBytesRead(0); assertEquals(0 statsIn.read()); assertBytesRead(1); assertEquals(10 statsIn.read(new byte[10])); assertBytesRead(11); assertEquals(5 statsIn.read(new byte[10] 0 5)); assertBytesRead(16); statsIn
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\providers\MockServiceProvider.java,getEchoBody,"public String  (HttpServletRequest request String body){ StringBuilder resp=new StringBuilder(""""); try { resp=resp.append(RequestUtil.servletRequestToXml(request body)); } catch ( IOException|JAXBException e) { LOG.trace("""" e); } return resp.toString(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\providers\MockServiceProvider.java,getEndService,"public Response  (String statusCode HttpServletRequest request String body){ int status; try { status=Integer.parseInt(statusCode); } catch ( NumberFormatException e) { status=Response.Status.NOT_FOUND.getStatusCode(); } String resp=getEchoBody(request body); ResponseBuilder response=Response.status(status); return response.entity(resp).header(""x-request-id"" ""somevalue"").header(""Content-Length"" resp.length()).build(); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,MocksServletResource,public  (){ provider=new MockServiceProvider(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,getEndService,"@GET @Path(""{id : .*}"") public Response  (@Context HttpServletRequest request){ return provider.getEndService(request); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,getService,"@GET @Path(""/"") public Response  (@Context HttpServletRequest request){ return provider.getEndService(request); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,postEndService,"@POST @Path(""{id : .*}"") public Response  (String body @Context HttpServletRequest request){ return provider.getEndService(DEFAULT_RESPONSE_CODE request body); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\MocksServletResource.java,postService,"@POST @Path(""/"") public Response  (String body @Context HttpServletRequest request){ return provider.getEndService(DEFAULT_RESPONSE_CODE request body); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainer.java,ReposeContainer,public  (ReposeContainerProps props){ this.listenPort=props.getStartPort(); this.warLocation=props.getWar(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,ReposeContainerProps,public  (String startPort String war String configDir String clusterId String nodeId String... originServiceWars){ this.startPort=startPort; this.war=war; this.configDir=configDir; this.clusterId=clusterId; this.nodeId=nodeId; this.originServiceWars=originServiceWars; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,getClusterId,public String  (){ return clusterId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,getConfigDirectory,public String  (){ return configDir; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,getNodeId,public String  (){ return nodeId; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,getOriginServiceWars,public String[]  (){ return originServiceWars; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,getStartPort,public String  (){ return startPort; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerProps.java,getWar,public String  (){ return war; } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-api\src\main\java\org\openrepose\commons\utils\test\ReposeContainerUtil.java,parseArgs,"public static ReposeContainerProps  (String[] args) throws ParseException { Options options=new Options(); CommandLineParser parser=new BasicParser(); Option portOpt=new Option(""p"" true ""Repose port to listen on""); Option rootwarOpt=new Option(""w"" true ""Location of ROOT.war""); Option configDirOpt=new Option(""d"" true ""Location of the configuration directory""); Option clusterIdOpt=new Option(""c"" true ""Cluster ID of the node being launched""); Option nodeIdOpt=new Option(""n"" true ""Node ID of the node being launched""); Option applicationWarsOpt=new Option(""war"" true """"); portOpt.setRequired(true); rootwarOpt.setRequired(true); clusterIdOpt.setRequired(true); nodeIdOpt.setRequired(true); options.addOption(portOpt).addOption(rootwarOpt).addOption(configDirOpt).addOption(clusterIdOpt).addOption(nodeIdOpt).addOption(applicationWarsOpt); final CommandLine cmdline; cmdline=parser.parse(options args); return new ReposeContainerProps(cmdline.getOptionValue(""p"") cmdline.getOptionValue(""w"") cmdline.getOptionValue(""d"") cmdline.getOptionValue(""c"") cmdline.getOptionValue(""n"") cmdline.getOptionValues(""war"")); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassFishContainer.java,ReposeGlassFishContainer,"public  (ReposeContainerProps props) throws GlassFishException { super(props); GlassFishProperties properties=new GlassFishProperties(); GlassFishRuntime runtime=GlassFishRuntime.bootstrap(); properties.setPort(""http-listener"" Integer.parseInt(listenPort)); glassfish=runtime.newGlassFish(properties); } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassFishContainer.java,run,@Override public void  (){ stopRepose(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassFishContainer.java,startRepose,"@Override protected void  (){ try { glassfish.start(); Runtime.getRuntime().addShutdownHook(new Thread(){ @Override public void run(){ stopRepose(); } } ); File war=new File(warLocation); Deployer deployer=glassfish.getDeployer(); deployer.deploy(war ""--n"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassFishContainer.java,stopRepose,"@Override protected void  (){ try { glassfish.stop(); } catch ( GlassFishException e) { LOG.trace(""Unable to stop glassfish container"" e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-glassfish\src\main\java\org\openrepose\commons\utils\test\glassfish\ReposeGlassfishServer.java,main,public static void  (String[] args) throws GlassFishException  ParseException { ReposeContainerProps props=ReposeContainerUtil.parseArgs(args); ReposeGlassFishContainer container=new ReposeGlassFishContainer(props); container.startRepose(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,ReposeTomcatContainer,"public  (ReposeContainerProps props) throws ServletException { super(props); tomcat=new Tomcat(); tomcat.setBaseDir(BASE_DIRECTORY); tomcat.setPort(Integer.parseInt(listenPort)); tomcat.getHost().setAutoDeploy(true); tomcat.getHost().setDeployOnStartup(true); Context reposeContext=tomcat.addWebapp(""/"" warLocation); reposeContext.setCrossContext(true); reposeContext.addParameter(""repose-cluster-id"" props.getClusterId()); reposeContext.addParameter(""repose-node-id"" props.getNodeId()); String configDir=props.getConfigDirectory(); if (configDir != null) { reposeContext.addParameter(""repose-config-directory"" configDir); } if (props.getOriginServiceWars() != null && props.getOriginServiceWars().length != 0) { for ( String originService : props.getOriginServiceWars()) { tomcat.addWebapp(""/"" + getServletPath(originService) originService); } } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,getServletPath,private static String  (String filePath){ return filePath.substring(filePath.lastIndexOf('/') + 1 filePath.lastIndexOf('.')); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,run,@Override public void  (){ stopRepose(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,startRepose,"@Override @SuppressWarnings(""squid:S106"") protected void  (){ try { tomcat.start(); Runtime.getRuntime().addShutdownHook(new Thread(){ @Override public void run(){ stopRepose(); } } ); System.out.println(""Tomcat Container Running""); tomcat.getServer().awa"
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatContainer.java,stopRepose,"@Override @SuppressWarnings(""squid:S106"") protected void  (){ try { System.out.println(""Stopping Tomcat Server""); tomcat.stop(); tomcat.getServer().stop(); } catch ( LifecycleException e) { LOG.trace(""Error stopping Repose Tomcat"" e); } } "
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\mocks-servlet\src\main\java\org\openrepose\commons\utils\test\mocks\providers\RequestUtil.java,servletRequestToXml,public static String  (HttpServletRequest request String body) throws IOException  JAXBException { RequestInformation req=new RequestInformation(); req.setUri(request.getRequestURL().toString()); req.setPath(request.getRequestURI()); req.setMethod(request.getMethod()); req.setQueryString(request.getQueryString()); req.setBody(body); if (!request.getParameterMap().isEmpty()) { QueryParameters q=new QueryParameters(); Enumeration<String> queryParamNames=request.getParameterNames(); while (queryParamNames.hasMoreElements()) { String name=queryParamNames.nextElement(); String value=Arrays.toString(request.getParameterMap().get(name)); NameValuePair nvp=new NameValuePair(); nvp.setName(name); nvp.setValue(value); q.getParameter().add(nvp); } req.setQueryParams(q); } HeaderList h=new HeaderList(); Enumeration<String> headerNames=request.getHeaderNames(); while (headerNames.hasMoreElements()) { String headerName=headerNames.nextElement(); Enumeration<String> headerValues=request.getHeaders(headerName); while (headerValues.hasMoreElements()) { String headerValue=headerValues.nextElement(); NameValuePair nvp=new NameValuePair(); nvp.setName(headerName); nvp.setValue(headerValue); h.getHeader().add(nvp); } } req.setHeaders(h); ObjectFactory factory=new ObjectFactory(); JAXBContext jaxbContext=JAXBContext.newInstance(CONTEXT_PATH); Marshaller marshaller=jaxbContext.createMarshaller(); ByteArrayOutputStream baos=new ByteArrayOutputStream(); marshaller.marshal(factory.createRequestInfo(req) baos); return baos.toString(); } 
C:\Users\User\Desktop\Thesis\repose\repose-aggregator\tests\test-containers\test-container-tomcat\src\main\java\org\openrepose\commons\utils\test\tomcat\ReposeTomcatServer.java,main,public static void  (String[] args) throws ParseException  ServletException { ReposeContainerProps props=ReposeContainerUtil.parseArgs(args); ReposeTomcatContainer container=new ReposeTomcatContainer(props); container.startRepose(); } 
