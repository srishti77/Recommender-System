ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,AbstractInstanceConfig,protected  (DataCenterInfo info){ this.info=info; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getASGName,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getDataCenterInfo,@Override public DataCenterInfo  (){ return info; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getHostInfo,"private static Pair<String String>  (){ Pair<String String> pair; try { InetAddress localHost=InetAddress.getLocalHost(); pair=new Pair<String String>(localHost.getHostAddress() localHost.getHostName()); } catch ( UnknownHostException e) { logger.error(""Cannot get host info"" e); pair=new Pair<String String>("""" """"); } return pair; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getHostName,@Override public String  (boolean refresh){ return hostInfo.second(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getIpAddress,@Override public String  (){ return hostInfo.first(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getLeaseExpirationDurationInSeconds,@Override public int  (){ return LEASE_EXPIRATION_DURATION_SECONDS; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getLeaseRenewalIntervalInSeconds,@Override public int  (){ return LEASE_RENEWAL_INTERVAL_SECONDS; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getMetadataMap,@Override public Map<String String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getNonSecurePort,@Override public int  (){ return NON_SECURE_PORT; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getSecurePort,@Override public int  (){ return SECURE_PORT; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getSecurePortEnabled,@Override public boolean  (){ return SECURE_PORT_ENABLED; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getSecureVirtualHostName,"@Override public String  (){ return (getHostName(false) + "":"" + getSecurePort()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,getVirtualHostName,"@Override public String  (){ return (getHostName(false) + "":"" + getNonSecurePort()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,isInstanceEnabledOnit,@Override public boolean  (){ return INSTANCE_ENABLED_ON_INIT; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AbstractInstanceConfig.java,isNonSecurePortEnabled,@Override public boolean  (){ return NON_SECURE_PORT_ENABLED; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,AmazonInfo,"public  (@JsonProperty(""name"") String name @JsonProperty(""metadata"") Map<String String> metadata){ this.metadata=metadata; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,Builder,private  (){ result=new AmazonInfo(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,MetaDataKey, (String name String path){ this.name=name; this.path=path; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,addMetadata,public Builder  (MetaDataKey key String value){ result.metadata.put(key.getName() value); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,autoBuild,"public AmazonInfo  (String namespace){ if (config == null) { config=new Archaius1AmazonInfoConfig(namespace); } for ( MetaDataKey key : MetaDataKey.values()) { int numOfRetries=config.getNumRetries(); while (numOfRetries-- > 0) { try { String mac=null; if (key == MetaDataKey.vpcId) { mac=result.metadata.get(MetaDataKey.mac.getName()); } URL url=key.getURL(null mac); String value=AmazonInfoUtils.readEc2MetadataUrl(key url config.getConnectTimeout() config.getReadTimeout()); if (value != null) { result.metadata.put(key.getName() value); } break; } catch ( Throwable e) { if (config.shouldLogAmazonMetadataErrors()) { logger.warn(""Cannot get the value for the metadata key: {} Reason :"" key e); } if (numOfRetries >= 0) { try { Thread.sleep(SLEEP_TIME_MS); } catch ( InterruptedException e1) { } continue; } } } if (key == MetaDataKey.instanceId && config.shouldFailFastOnFirstLoad() && !result.metadata.containsKey(MetaDataKey.instanceId.getName())) { logger.warn(""Skipping the rest of AmazonInfo init as we were not able to load instanceId after "" + ""the configured number of retries: {}  per fail fast configuration: {}"" config.getNumRetries() config.shouldFailFastOnFirstLoad()); break; } } return result; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,build,public AmazonInfo  (){ return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (!(o instanceof AmazonInfo)) return false; AmazonInfo that=(AmazonInfo)o; if (metadata != null ? !metadata.equals(that.metadata) : that.metadata != null) return false; return true; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,get,public String  (MetaDataKey key){ return metadata.get(key.getName()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,getId,@Override @JsonIgnore public String  (){ return get(MetaDataKey.instanceId); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,getMetadata,"@JsonProperty(""metadata"") public Map<String String>  (){ return metadata; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,getName,@Override public Name  (){ return Name.Amazon; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,getURL,public URL  (String prepend String append) throws MalformedURLException { return new URL(AWS_METADATA_URL + path + name); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,hashCode,@Override public int  (){ return metadata != null ? metadata.hashCode() : 0; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,newBuilder,public static Builder  (){ return new Builder(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,read,public String  (InputStream inputStream) throws IOException { BufferedReader br=new BufferedReader(new InputStreamReader(inputStream)); String toReturn; try { String line=br.readLine(); toReturn=line; while (line != null) { line=br.readLine(); } return toReturn; } finally { br.close(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,setMetadata,public void  (Map<String String> metadataMap){ this.metadata=metadataMap; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,toString,"@Override public String  (){ return ""AmazonInfo{"" + ""metadata="" + metadata + '}'; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\AmazonInfo.java,withAmazonInfoConfig,public Builder  (AmazonInfoConfig config){ this.config=config; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,Archaius1AmazonInfoConfig,"public  (String namespace){ this.namespace=namespace.endsWith(""."") ? namespace : namespace + "".""; this.configInstance=Archaius1Utils.initConfig(CommonConstants.CONFIG_FILE_NAME); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,getConnectTimeout,@Override public int  (){ return configInstance.getIntProperty(namespace + CONNECT_TIMEOUT_KEY Values.DEFAULT_CONNECT_TIMEOUT).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,getNamespace,@Override public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,getNumRetries,@Override public int  (){ return configInstance.getIntProperty(namespace + NUM_RETRIES_KEY Values.DEFAULT_NUM_RETRIES).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,getReadTimeout,@Override public int  (){ return configInstance.getIntProperty(namespace + READ_TIMEOUT_KEY Values.DEFAULT_READ_TIMEOUT).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,shouldFailFastOnFirstLoad,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + FAIL_FAST_ON_FIRST_LOAD_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,shouldLogAmazonMetadataErrors,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + LOG_METADATA_ERROR_KEY false).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\Archaius1AmazonInfoConfig.java,shouldValidateInstanceId,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_VALIDATE_INSTANCE_ID_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,CloudInstanceConfig, (String namespace AmazonInfoConfig amazonInfoConfig AmazonInfo initialInfo boolean eagerInit){ super(namespace); this.amazonInfoConfig=amazonInfoConfig; if (eagerInit) { RefreshableAmazonInfoProvider.FallbackAddressProvider fallbackAddressProvider=new RefreshableAmazonInfoProvider.FallbackAddressProvider(){ @Override public String getFallbackIp(){ return CloudInstanceConfig.super.getIpAddress(); } @Override public String getFallbackHostname(){ return CloudInstanceConfig.super.getHostName(false); } } ; this.amazonInfoHolder=new RefreshableAmazonInfoProvider(amazonInfoConfig fallbackAddressProvider); } else { this.amazonInfoHolder=new RefreshableAmazonInfoProvider(initialInfo amazonInfoConfig); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,getDataCenterInfo,@Override public DataCenterInfo  (){ return amazonInfoHolder.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,getDefaultAddressResolutionOrder,@Override public String[]  (){ String[] order=super.getDefaultAddressResolutionOrder(); return (order.length == 0) ? DEFAULT_AWS_ADDRESS_RESOLUTION_ORDER : order; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,getFallbackHostname,@Override public String  (){ return CloudInstanceConfig.super.getHostName(false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,getFallbackIp,@Override public String  (){ return CloudInstanceConfig.super.getIpAddress(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,getHostName,@Override public String  (boolean refresh){ if (refresh) { amazonInfoHolder.refresh(); } return amazonInfoHolder.get().get(MetaDataKey.publicHostname); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,getIpAddress,@Override public String  (){ String ipAddr=amazonInfoHolder.get().get(MetaDataKey.localIpv4); return ipAddr == null ? super.getIpAddress() : ipAddr; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,refreshAmazonInfo,@Deprecated public synchronized void  (){ amazonInfoHolder.refresh(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,resolveDefaultAddress,@Override public String  (boolean refresh){ String result=getHostName(refresh); for ( String name : getDefaultAddressResolutionOrder()) { try { AmazonInfo.MetaDataKey key=AmazonInfo.MetaDataKey.valueOf(name); String address=amazonInfoHolder.get().get(key)
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\CloudInstanceConfig.java,shouldUpdate,@Deprecated static boolean  (AmazonInfo newInfo AmazonInfo oldInfo){ return RefreshableAmazonInfoProvider.shouldUpdate(newInfo oldInfo); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java,ApplicationInfoManager,@Deprecated public  (EurekaInstanceConfig config){ this(config (OptionalArgs)null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\ApplicationInfoManager.java,getEurekaInstanceConfig,public EurekaInstanceConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaAccept.java,fromString,public static EurekaAccept  (String name){ if (name == null || name.isEmpty()) { return full; } try { return EurekaAccept.valueOf(name.toLowerCase()); } catch ( Exception e) { return full; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaAccept.java,getClientAccept,public static EurekaAccept  (DecoderWrapper decoderWrapper){ return decoderNameToAcceptMap.get(decoderWrapper.codecName()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,EurekaClientIdentity,public  (String id String clientName){ this.id=id; this.clientName=clientName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,getId,@Override public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,getName,@Override public String  (){ return clientName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\EurekaClientIdentity.java,getVersion,@Override public String  (){ return clientVersion; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java,HealthCheckCallbackToHandlerBridge,public  (HealthCheckCallback callback){ this.callback=callback; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckCallbackToHandlerBridge.java,getStatus,@Override public InstanceInfo.InstanceStatus  (InstanceInfo.InstanceStatus currentStatus){ if (null == callback || InstanceInfo.InstanceStatus.STARTING == currentStatus || InstanceInfo.InstanceStatus.OUT_OF_SERVICE == currentStatus) { return currentStatus
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\HealthCheckResource.java,doHealthCheck,@GET public Response  (){ try { InstanceInfo myInfo=ApplicationInfoManager.getInstance().getInfo(); switch (myInfo.getStatus()) { case UP: return Response.status(Status.OK).build(); case STARTING: return Response.status(Status.NO_CONTENT).build(); case OU
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,Builder,private  (){ result=new LeaseInfo(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,LeaseInfo,"@JsonCreator public  (@JsonProperty(""renewalIntervalInSecs"") int renewalIntervalInSecs @JsonProperty(""durationInSecs"") int durationInSecs @JsonProperty(""registrationTimestamp"") long registrationTimestamp @JsonProperty(""lastRenewalTimestamp"") Long lastRene"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,build,public LeaseInfo  (){ return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,getDurationInSecs,public int  (){ return durationInSecs; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,getEvictionTimestamp,public long  (){ return evictionTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,getRegistrationTimestamp,public long  (){ return registrationTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,getRenewalIntervalInSecs,public int  (){ return renewalIntervalInSecs; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,getRenewalTimestamp,"@JsonProperty(""lastRenewalTimestamp"") public long  (){ return lastRenewalTimestamp; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,getServiceUpTimestamp,public long  (){ return serviceUpTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,newBuilder,public static Builder  (){ return new Builder(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,setDurationInSecs,public Builder  (int d){ if (d <= 0) { result.durationInSecs=DEFAULT_LEASE_DURATION; } else { result.durationInSecs=d; } return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,setEvictionTimestamp,public Builder  (long ts){ result.evictionTimestamp=ts; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,setRegistrationTimestamp,public Builder  (long ts){ result.registrationTimestamp=ts; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,setRenewalIntervalInSecs,public Builder  (int i){ if (i <= 0) { result.renewalIntervalInSecs=DEFAULT_LEASE_RENEWAL_INTERVAL; } else { result.renewalIntervalInSecs=i; } return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,setRenewalTimestamp,public Builder  (long ts){ result.lastRenewalTimestamp=ts; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\LeaseInfo.java,setServiceUpTimestamp,public Builder  (long ts){ result.serviceUpTimestamp=ts; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInstanceConfig.java,MyDataCenterInstanceConfig,public  (String namespace DataCenterInfo dataCenterInfo){ super(namespace dataCenterInfo); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInfo.java,MyDataCenterInfo,"@JsonCreator public  (@JsonProperty(""name"") Name name){ this.name=name; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\MyDataCenterInfo.java,getName,@Override public Name  (){ return name; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,Builder,public  (InstanceInfo instanceInfo){ this(instanceInfo LazyHolder.DEFAULT_VIP_ADDRESS_RESOLVER null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,InstanceInfo,public  (InstanceInfo ii){ this.instanceId=ii.instanceId; this.appName=ii.appName; this.appGroupName=ii.appGroupName; this.ipAddr=ii.ipAddr; this.sid=ii.sid; this.port=ii.port; this.securePort=ii.securePort; this.homePageUrl=ii.homePageUrl; this.statusPageUrl=ii.statusPageUrl; this.healthCheckUrl=ii.healthCheckUrl; this.secureHealthCheckUrl=ii.secureHealthCheckUrl; this.vipAddress=ii.vipAddress; this.secureVipAddress=ii.secureVipAddress; this.statusPageRelativeUrl=ii.statusPageRelativeUrl; this.statusPageExplicitUrl=ii.statusPageExplicitUrl; this.healthCheckRelativeUrl=ii.healthCheckRelativeUrl; this.healthCheckSecureExplicitUrl=ii.healthCheckSecureExplicitUrl; this.vipAddressUnresolved=ii.vipAddressUnresolved; this.secureVipAddressUnresolved=ii.secureVipAddressUnresolved; this.healthCheckExplicitUrl=ii.healthCheckExplicitUrl; this.countryId=ii.countryId; this.isSecurePortEnabled=ii.isSecurePortEnabled; this.isUnsecurePortEnabled=ii.isUnsecurePortEnabled; this.dataCenterInfo=ii.dataCenterInfo; this.hostName=ii.hostName; this.status=ii.status; this.overriddenstatus=ii.overriddenstatus; this.isInstanceInfoDirty=ii.isInstanceInfoDirty; this.leaseInfo=ii.leaseInfo; this.isCoordinatingDiscoveryServer=ii.isCoordinatingDiscoveryServer; this.metadata=ii.metadata; this.lastUpdatedTimestamp=ii.lastUpdatedTimestamp; this.lastDirtyTimestamp=ii.lastDirtyTimestamp; this.actionType=ii.actionType; this.asgName=ii.asgName; this.version=ii.version; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,PortWrapper,"@JsonCreator public  (@JsonProperty(""@enabled"") boolean enabled @JsonProperty(""$"") int port){ this.enabled=enabled; this.port=port; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,add,public Builder  (String key String val){ result.metadata.put(key val); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,build,"public InstanceInfo  (){ if (!isInitialized()) { throw new IllegalStateException(""name is required!""); } return result; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,enablePort,public Builder  (PortType type boolean isEnabled){ if (type == PortType.SECURE) { result.isSecurePortEnabled=isEnabled; } else { result.isUnsecurePortEnabled=isEnabled; } return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,equals,@Override public boolean  (Object obj){ if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } InstanceInfo other=(InstanceInfo)obj; String id=getId(); if (id == null) { if (other.getId() !
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getASGName,"@JsonProperty(""asgName"") public String  (){ return this.asgName; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getActionType,public ActionType  (){ return actionType; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getAppGroupName,public String  (){ return appGroupName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getAppName,"@JsonProperty(""app"") public String  (){ return appName; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getCountryId,@Deprecated public int  (){ return countryId; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getDataCenterInfo,public DataCenterInfo  (){ return dataCenterInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getHealthCheckUrl,public String  (){ return healthCheckUrl; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getHealthCheckUrls,@JsonIgnore public Set<String>  (){ Set<String> healthCheckUrlSet=new LinkedHashSet<String>(); if (this.isUnsecurePortEnabled && healthCheckUrl != null && !healthCheckUrl.isEmpty()) { healthCheckUrlSet.add(healthCheckUrl); } if (this.isSecurePortEnabled &
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getHomePageUrl,public String  (){ return homePageUrl; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getHostName,public String  (){ return hostName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getIPAddr,"@JsonProperty(""ipAddr"") public String  (){ return ipAddr; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getId,@JsonIgnore public String  (){ if (instanceId != null && !instanceId.isEmpty()) { return instanceId; } else if (dataCenterInfo instanceof UniqueIdentifier) { String uniqueId=((UniqueIdentifier)dataCenterInfo).getId(); if (uniqueId != null && !uniqueId.isE
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getInstanceId,public String  (){ return instanceId; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getLastDirtyTimestamp,public Long  (){ return lastDirtyTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getLastUpdatedTimestamp,public long  (){ return lastUpdatedTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getLeaseInfo,public LeaseInfo  (){ return leaseInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getMetadata,public Map<String String>  (){ return metadata; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getOverriddenStatus,public InstanceStatus  (){ return overriddenstatus; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getPort,@JsonIgnore public int  (){ return port; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getRawInstance,public InstanceInfo  (){ return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getSID,"@JsonProperty(""sid"") @Deprecated public String  (){ return sid; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getSecureHealthCheckUrl,public String  (){ return secureHealthCheckUrl; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getSecurePort,@JsonIgnore public int  (){ return securePort; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getSecureVipAddress,public String  (){ return secureVipAddress; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getStatus,public InstanceStatus  (){ return status; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getStatusPageUrl,public String  (){ return statusPageUrl; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getVIPAddress,"@JsonProperty(""vipAddress"") public String  (){ return vipAddress; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getVersion,@Deprecated @JsonIgnore public String  (){ return version; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,getZone,"public static String  (String[] availZones InstanceInfo myInfo){ String instanceZone=((availZones == null || availZones.length == 0) ? ""default"" : availZones[0]); if (myInfo != null && myInfo.getDataCenterInfo().getName() == DataCenterInfo.Name.Amazon) { String awsInstanceZone=((AmazonInfo)myInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.availabilityZone); if (awsInstanceZone != null) { instanceZone=awsInstanceZone; } } return instanceZone; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,hashCode,@Override public int  (){ String id=getId(); return (id == null) ? 31 : (id.hashCode() + 31); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,isCoordinatingDiscoveryServer,"@JsonProperty("" "") public Boolean isCoordinatingDiscoveryServer(){ return isCoordinatingDiscoveryServer; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,isDirty,@JsonIgnore public boolean  (){ return isInstanceInfoDirty; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,isDirtyWithTime,public synchronized Long  (){ if (isInstanceInfoDirty) { return lastDirtyTimestamp; } else { return null; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,isEnabled,public boolean  (){ return enabled; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,isInitialized,public boolean  (){ return (result.appName != null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,isPortEnabled,@JsonIgnore public boolean  (PortType type){ if (type == PortType.SECURE) { return isSecurePortEnabled; } else { return isUnsecurePortEnabled; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,newBuilder,public static Builder  (VipAddressResolver vipAddressResolver){ return new Builder(new InstanceInfo() vipAddressResolver null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refreshHealthCheckUrl,private Builder  (){ setHealthCheckUrls(result.healthCheckRelativeUrl result.healthCheckExplicitUrl result.healthCheckSecureExplicitUrl); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refreshSecureVIPAddress,private Builder  (){ setSecureVIPAddress(result.secureVipAddressUnresolved); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refreshStatusPageUrl,private Builder  (){ setStatusPageUrl(result.statusPageRelativeUrl result.statusPageExplicitUrl); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,refreshVIPAddress,private Builder  (){ setVIPAddress(result.vipAddressUnresolved); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,registerRuntimeMetadata,synchronized void  (Map<String String> runtimeMetadata){ metadata.putAll(runtimeMetadata); setIsDirty(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,removeMetadataMapLegacyValues,"private Map<String String>  (Map<String String> metadata){ if (InstanceInfoSerializer.METADATA_COMPATIBILITY_VALUE.equals(metadata.get(InstanceInfoSerializer.METADATA_COMPATIBILITY_KEY))) { metadata.remove(InstanceInfoSerializer.METADATA_COMPATIBILITY_KEY); } else if (InstanceInfoSerializer.METADATA_COMPATIBILITY_VALUE.equals(metadata.get(""class""))) { metadata.remove(""class""); } return metadata; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setASGName,public Builder  (String asgName){ result.asgName=intern.apply(asgName); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setActionType,public void  (ActionType actionType){ this.actionType=actionType; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setAppGroupName,public Builder  (String appGroupName){ if (appGroupName != null) { result.appGroupName=intern.apply(appGroupName.toUpperCase(Locale.ROOT)); } else { result.appGroupName=null; } return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setAppGroupNameForDeser,public Builder  (String appGroupName){ result.appGroupName=appGroupName; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setAppName,public Builder  (String appName){ result.appName=intern.apply(appName.toUpperCase(Locale.ROOT)); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setAppNameForDeser,public Builder  (String appName){ result.appName=appName; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setCountryId,@Deprecated public Builder  (int id){ result.countryId=id; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setDataCenterInfo,public Builder  (DataCenterInfo datacenter){ result.dataCenterInfo=datacenter; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setHealthCheckUrls,"public Builder  (String relativeUrl String explicitUrl String secureExplicitUrl){ String hostNameInterpolationExpression=""${"" + namespace + ""hostname}""; result.healthCheckRelativeUrl=relativeUrl; result.healthCheckExplicitUrl=explicitUrl; result.healthCheckSecureExplicitUrl=secureExplicitUrl; if (explicitUrl != null) { result.healthCheckUrl=explicitUrl.replace(hostNameInterpolationExpression result.hostName); } else if (result.isUnsecurePortEnabled) { result.healthCheckUrl=HTTP_PROTOCOL + result.hostName + COLON+ result.port+ relativeUrl; } if (secureExplicitUrl != null) { result.secureHealthCheckUrl=secureExplicitUrl.replace(hostNameInterpolationExpression result.hostName); } else if (result.isSecurePortEnabled) { result.secureHealthCheckUrl=HTTPS_PROTOCOL + result.hostName + COLON+ result.securePort+ relativeUrl; } return this; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setHealthCheckUrlsForDeser,public Builder  (String healthCheckUrl String secureHealthCheckUrl){ if (healthCheckUrl != null) { result.healthCheckUrl=healthCheckUrl; } if (secureHealthCheckUrl != null) { result.secureHealthCheckUrl=secureHealthCheckUrl; } return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setHomePageUrl,"public Builder  (String relativeUrl String explicitUrl){ String hostNameInterpolationExpression=""${"" + namespace + ""hostname}""; if (explicitUrl != null) { result.homePageUrl=explicitUrl.replace(hostNameInterpolationExpression result.hostName); } else if (relativeUrl != null) { result.homePageUrl=HTTP_PROTOCOL + result.hostName + COLON+ result.port+ relativeUrl; } return this; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setHomePageUrlForDeser,public Builder  (String homePageUrl){ result.homePageUrl=homePageUrl; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setHostName,"public Builder  (String hostName){ if (hostName == null || hostName.isEmpty()) { logger.warn(""Passed in hostname is blank  not setting it""); return this; } String existingHostName=result.hostName; result.hostName=hostName; if ((existingHostName != null) && !(hostName.equals(existingHostName))) { refreshStatusPageUrl().refreshHealthCheckUrl().refreshVIPAddress().refreshSecureVIPAddress(); } return this; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setIPAddr,public Builder  (String ip){ result.ipAddr=ip; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setInstanceId,public Builder  (String instanceId){ result.instanceId=instanceId; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setIsCoordinatingDiscoveryServer,public void  (){ String instanceId=getId(); if ((instanceId != null) && (instanceId.equals(ApplicationInfoManager.getInstance().getInfo().getId()))) { isCoordinatingDiscoveryServer=Boolean.TRUE; } else { isCoordinatingDiscoveryServer=Boolean.FALSE; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setIsDirty,public synchronized void  (){ isInstanceInfoDirty=true; lastDirtyTimestamp=System.currentTimeMillis(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setIsDirtyWithTime,public synchronized long  (){ setIsDirty(); return lastDirtyTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setLastDirtyTimestamp,public void  (Long lastDirtyTimestamp){ this.lastDirtyTimestamp=lastDirtyTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setLastUpdatedTimestamp,public void  (){ this.lastUpdatedTimestamp=System.currentTimeMillis(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setLeaseInfo,public void  (LeaseInfo info){ leaseInfo=info; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setMetadata,public Builder  (Map<String String> mt){ result.metadata=mt; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setNamespace,"public Builder  (String namespace){ this.namespace=namespace.endsWith(""."") ? namespace : namespace + "".""; return this; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setOverriddenStatus,public synchronized void  (InstanceStatus status){ if (this.overriddenstatus != status) { this.overriddenstatus=status; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setPort,public Builder  (int port){ result.port=port; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setSID,@Deprecated public void  (String sid){ this.sid=sid; setIsDirty(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setSecurePort,public Builder  (int port){ result.securePort=port; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setSecureVIPAddress,public Builder  (final String secureVIPAddress){ result.secureVipAddressUnresolved=intern.apply(secureVIPAddress); result.secureVipAddress=intern.apply(vipAddressResolver.resolveDeploymentContextBasedVipAddresses(secureVIPAddress)); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setSecureVIPAddressDeser,public Builder  (String secureVIPAddress){ result.secureVipAddress=intern.apply(secureVIPAddress); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setStatus,public synchronized InstanceStatus  (InstanceStatus status){ if (this.status != status) { InstanceStatus prev=this.status; this.status=status; setIsDirty(); return prev; } return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setStatusPageUrl,"public Builder  (String relativeUrl String explicitUrl){ String hostNameInterpolationExpression=""${"" + namespace + ""hostname}""; result.statusPageRelativeUrl=relativeUrl; result.statusPageExplicitUrl=explicitUrl; if (explicitUrl != null) { result.statusPageUrl=explicitUrl.replace(hostNameInterpolationExpression result.hostName); } else if (relativeUrl != null) { result.statusPageUrl=HTTP_PROTOCOL + result.hostName + COLON+ result.port+ relativeUrl; } return this; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setStatusPageUrlForDeser,public Builder  (String statusPageUrl){ result.statusPageUrl=statusPageUrl; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setStatusWithoutDirty,public synchronized void  (InstanceStatus status){ if (this.status != status) { this.status=status; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setVIPAddress,public Builder  (final String vipAddress){ result.vipAddressUnresolved=intern.apply(vipAddress); result.vipAddress=intern.apply(vipAddressResolver.resolveDeploymentContextBasedVipAddresses(vipAddress)); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,setVIPAddressDeser,public Builder  (String vipAddress){ result.vipAddress=intern.apply(vipAddress); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,toEnum,"public static InstanceStatus  (String s){ if (s != null) { try { return InstanceStatus.valueOf(s.toUpperCase()); } catch ( IllegalArgumentException e) { logger.debug(""illegal argument supplied to InstanceStatus.valueOf: {}  defaulting to {}"" s UNKNOWN); } } return UNKNOWN; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\InstanceInfo.java,unsetIsDirty,public synchronized void  (long unsetDirtyTimestamp){ if (lastDirtyTimestamp <= unsetDirtyTimestamp) { isInstanceInfoDirty=false; } else { } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\Archaius1VipAddressResolver.java,resolveDeploymentContextBasedVipAddresses,@Override public String  (String vipAddressMacro){ if (vipAddressMacro == null) { return null; } String result=vipAddressMacro; Matcher matcher=VIP_ATTRIBUTES_PATTERN.matcher(result); while (matcher.find()) { String key=matcher.group(1); String value=Dyna
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,PropertiesInstanceConfig,"public  (String namespace DataCenterInfo info){ super(info); this.namespace=namespace.endsWith(""."") ? namespace : namespace + "".""; appGrpNameFromEnv=ConfigurationManager.getConfigInstance().getString(FALLBACK_APP_GROUP_KEY Values.UNKNOWN_APPLICATION); this.configInstance=Archaius1Utils.initConfig(CommonConstants.CONFIG_FILE_NAME); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getASGName,@Override public String  (){ return configInstance.getStringProperty(namespace + ASG_NAME_KEY super.getASGName()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getAppGroupName,@Override public String  (){ return configInstance.getStringProperty(namespace + APP_GROUP_KEY appGrpNameFromEnv).get().trim(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getAppname,@Override public String  (){ return configInstance.getStringProperty(namespace + APP_NAME_KEY Values.UNKNOWN_APPLICATION).get().trim(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getDefaultAddressResolutionOrder,"@Override public String[]  (){ String result=configInstance.getStringProperty(namespace + DEFAULT_ADDRESS_RESOLUTION_ORDER_KEY null).get(); return result == null ? new String[0] : result.split("" ""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getHealthCheckUrl,@Override public String  (){ return configInstance.getStringProperty(namespace + HEALTHCHECK_URL_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getHealthCheckUrlPath,@Override public String  (){ return configInstance.getStringProperty(namespace + HEALTHCHECK_URL_PATH_KEY Values.DEFAULT_HEALTHCHECK_URLPATH).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getHomePageUrl,@Override public String  (){ return configInstance.getStringProperty(namespace + HOME_PAGE_URL_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getHomePageUrlPath,@Override public String  (){ return configInstance.getStringProperty(namespace + HOME_PAGE_URL_PATH_KEY Values.DEFAULT_HOMEPAGE_URLPATH).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getInstanceId,@Override public String  (){ String result=configInstance.getStringProperty(namespace + INSTANCE_ID_KEY null).get(); return result == null ? null : result.trim(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getIpAddress,public String  (){ return super.getIpAddress(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getLeaseExpirationDurationInSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + LEASE_EXPIRATION_DURATION_KEY super.getLeaseExpirationDurationInSeconds()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getLeaseRenewalIntervalInSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + LEASE_RENEWAL_INTERVAL_KEY super.getLeaseRenewalIntervalInSeconds()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getMetadataMap,"@Override public Map<String String>  (){ String metadataNamespace=namespace + INSTANCE_METADATA_PREFIX + "".""; Map<String String> metadataMap=new LinkedHashMap<String String>(); Configuration config=(Configuration)configInstance.getBackingConfigurationSour"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getNamespace,@Override public String  (){ return this.namespace; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getNonSecurePort,@Override public int  (){ return configInstance.getIntProperty(namespace + PORT_KEY super.getNonSecurePort()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getSecureHealthCheckUrl,@Override public String  (){ return configInstance.getStringProperty(namespace + SECURE_HEALTHCHECK_URL_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getSecurePort,@Override public int  (){ return configInstance.getIntProperty(namespace + SECURE_PORT_KEY super.getSecurePort()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getSecurePortEnabled,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SECURE_PORT_ENABLED_KEY super.getSecurePortEnabled()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getSecureVirtualHostName,@Override public String  (){ if (this.getSecurePortEnabled()) { return configInstance.getStringProperty(namespace + SECURE_VIRTUAL_HOSTNAME_KEY super.getSecureVirtualHostName()).get(); } else { return null; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getStatusPageUrl,@Override public String  (){ return configInstance.getStringProperty(namespace + STATUS_PAGE_URL_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getStatusPageUrlPath,@Override public String  (){ return configInstance.getStringProperty(namespace + STATUS_PAGE_URL_PATH_KEY Values.DEFAULT_STATUSPAGE_URLPATH).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,getVirtualHostName,@Override public String  (){ if (this.isNonSecurePortEnabled()) { return configInstance.getStringProperty(namespace + VIRTUAL_HOSTNAME_KEY super.getVirtualHostName()).get(); } else { return null; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,isInstanceEnabledOnit,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + TRAFFIC_ENABLED_ON_INIT_KEY super.isInstanceEnabledOnit()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\PropertiesInstanceConfig.java,isNonSecurePortEnabled,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + PORT_ENABLED_KEY super.isNonSecurePortEnabled()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\CloudInstanceConfigProvider.java,get,@Override public synchronized CloudInstanceConfig  (){ if (config == null) { if (namespace == null) { config=new CloudInstanceConfig(); } else { config=new CloudInstanceConfig(namespace); } DiscoveryManager.getInstance().setEurekaInstanceConfig(config); }
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java,EurekaConfigBasedInstanceInfoProvider,@Inject public  (EurekaInstanceConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\EurekaConfigBasedInstanceInfoProvider.java,get,@Override public synchronized InstanceInfo  (){ if (instanceInfo == null) { LeaseInfo.Builder leaseInfoBuilder=LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(config.getLeaseRenewalIntervalInSeconds()).setDurationInSecs(config.getLeaseExpirationDu
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\providers\MyDataCenterInstanceConfigProvider.java,get,@Override public synchronized MyDataCenterInstanceConfig  (){ if (config == null) { if (namespace == null) { config=new MyDataCenterInstanceConfig(); } else { config=new MyDataCenterInstanceConfig(namespace); } DiscoveryManager.getInstance().setEurekaInst
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\RefreshableAmazonInfoProvider.java,RefreshableAmazonInfoProvider, (AmazonInfo initialInfo AmazonInfoConfig amazonInfoConfig){ this.amazonInfoConfig=amazonInfoConfig; this.info=initialInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\appinfo\RefreshableAmazonInfoProvider.java,get,@Override public AmazonInfo  (){ return info; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,getEventListeners,Set<EurekaEventListener>  (){ return eventListeners == null ? Collections.<EurekaEventListener>emptySet() : eventListeners; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,getHostnameVerifier,public Optional<HostnameVerifier>  (){ return hostnameVerifier; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,getSSLContext,public Optional<SSLContext>  (){ return sslContext; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,getTransportClientFactories,public TransportClientFactories  (){ return transportClientFactories; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,onEvent,@Override public void  (EurekaEvent event){ eventBus.publish(event); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setAdditionalFilters,@Inject(optional=true) public void  (Collection<T> additionalFilters){ this.additionalFilters=additionalFilters; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setEurekaJerseyClient,@Inject(optional=true) public void  (EurekaJerseyClient eurekaJerseyClient){ this.eurekaJerseyClient=eurekaJerseyClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setEventBus,@Inject(optional=true) public void  (final EventBus eventBus){ if (eventListeners == null) { eventListeners=new HashSet<>(); } eventListeners.add(new EurekaEventListener(){ @Override public void onEvent( EurekaEvent event){ eventBus.publish(event); } } );
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setEventListeners,@Inject(optional=true) public void  (Set<EurekaEventListener> listeners){ if (eventListeners == null) { eventListeners=new HashSet<>(); } eventListeners.addAll(listeners); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setHealthCheckCallbackProvider,@Inject(optional=true) public void  (Provider<HealthCheckCallback> healthCheckCallbackProvider){ this.healthCheckCallbackProvider=healthCheckCallbackProvider; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setHealthCheckHandlerProvider,@Inject(optional=true) public void  (Provider<HealthCheckHandler> healthCheckHandlerProvider){ this.healthCheckHandlerProvider=healthCheckHandlerProvider; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setHostnameVerifier,@Inject(optional=true) public void  (HostnameVerifier hostnameVerifier){ this.hostnameVerifier=Optional.of(hostnameVerifier); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setPreRegistrationHandler,@Inject(optional=true) public void  (PreRegistrationHandler preRegistrationHandler){ this.preRegistrationHandler=preRegistrationHandler; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setSSLContext,@Inject(optional=true) public void  (SSLContext sslContext){ this.sslContext=Optional.of(sslContext); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractDiscoveryClientOptionalArgs.java,setTransportClientFactories,@Inject(optional=true) public void  (TransportClientFactories transportClientFactories){ this.transportClientFactories=transportClientFactories; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,AbstractAzToRegionMapper,protected  (EurekaClientConfig clientConfig){ this.clientConfig=clientConfig; populateDefaultAZToRegionMap(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,get,@Override public List<String>  (){ return new ArrayList<String>(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\AbstractAzToRegionMapper.java,getRegionForAvailabilityZone,@Override public String  (String availabilityZone){ String region=availabilityZoneVsRegion.get(availabilityZone); if (null == region) { return parseAzToGetRegion(availabilityZone); } return region; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\CacheRefreshedEvent.java,toString,"@Override public String  (){ return ""CacheRefreshedEvent[timestamp="" + getTimestamp() + ""]""; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EntityBodyConverter.java,getXStreamInstance,private XStream  (MediaType mediaType){ XStream xstream=null; if (JSON.equalsIgnoreCase(mediaType.getSubtype())) { xstream=JsonXStream.getInstance(); } else if (XML.equalsIgnoreCase(mediaType.getSubtype())) { xstream=XmlXStream.getInstance(); } return xstream; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EntityBodyConverter.java,read,"public Object  (InputStream is Class type MediaType mediaType) throws IOException { XStream xstream=getXStreamInstance(mediaType); if (xstream != null) { return xstream.fromXML(is); } else { throw new IllegalArgumentException(""Content-type: "" + mediaType.getType() + "" is currently not supported for ""+ type.getName()); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EntityBodyConverter.java,write,"public void  (Object object OutputStream os MediaType mediaType) throws IOException { XStream xstream=getXStreamInstance(mediaType); if (xstream != null) { xstream.toXML(object os); } else { throw new IllegalArgumentException(""Content-type: "" + mediaType.getType() + "" is currently not supported for ""+ object.getClass().getName()); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java,EnumLookup,"@SuppressWarnings(""unchecked"")  (Class<T> enumType Function<T char[]> namer){ this.sortedValues=(T[])Array.newInstance(enumType enumType.getEnumConstants().length); System.arraycopy(enumType.getEnumConstants() 0 sortedValues 0 sortedValues.length); Arrays"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java,equals,public static boolean  (char[] a1 char[] a2 int a2Offset int a2Length){ if (a1.length != a2Length) return false; for (int i=0; i < a2Length; i++) { if (a1[i] != a2[i + a2Offset]) return false; } return true; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java,find,public T  (char[] a int offset int length T defaultValue){ if (length < this.minLength || length > this.maxLength) return defaultValue; int hash=hashCode(a offset length); int index=Arrays.binarySearch(sortedHashes hash); if (index >= 0) { for (int i=index; i < sortedValues.length && sortedHashes[index] == hash; i++) { if (equals(sortedNames[i] a offset length)) { return sortedValues[i]; } } } return defaultValue; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EnumLookup.java,hashCode,public static int  (char[] a int offset int length){ if (a == null) return 0; int result=1; for (int i=0; i < length; i++) { result=31 * result + a[i + offset]; } return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,addMiniConfig,protected void  (ObjectMapper mapper){ mapper.addMixIn(InstanceInfo.class MiniInstanceInfoMixIn.class); bindAmazonInfoFilter(mapper); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,bindAmazonInfoFilter,"private void  (ObjectMapper mapper){ SimpleFilterProvider filters=new SimpleFilterProvider(); final String filterName=""exclude-amazon-info-entries""; mapper.setAnnotationIntrospector(new JacksonAnnotationIntrospector(){ @Override public Object findFilterId( Annotated a){ if (Map.class.isAssignableFrom(a.getRawType())) { return filterName; } return super.findFilterId(a); } } ); filters.addFilter(filterName new SimpleBeanPropertyFilter(){ @Override protected boolean include( BeanPropertyWriter writer){ return true; } @Override protected boolean include( PropertyWriter writer){ return MINI_AMAZON_INFO_INCLUDE_KEYS.contains(writer.getName()); } } ); mapper.setFilters(filters); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\AbstractEurekaJacksonCodec.java,findFilterId,@Override public Object  (Annotated a){ if (Map.class.isAssignableFrom(a.getRawType())) { return filterName; } return super.findFilterId(a); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,autoMarshalEligible,"private static void  (Object o HierarchicalStreamWriter writer){ try { Class c=o.getClass(); Field[] fields=c.getDeclaredFields(); Annotation annotation=null; for ( Field f : fields) { annotation=f.getAnnotation(Auto.class); if (annotation != null) { f.setAccessible(true); if (f.get(o) != null) { writer.startNode(f.getName()); writer.setValue(String.valueOf(f.get(o))); writer.endNode(); } } } } catch ( Throwable th) { logger.error(""Error in marshalling the object"" th); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,autoUnmarshalEligible,"private static void  (HierarchicalStreamReader reader Object o){ try { String nodeName=reader.getNodeName(); Class c=o.getClass(); Field f=null; try { f=c.getDeclaredField(nodeName); } catch ( NoSuchFieldException e) { UNMARSHALL_ERROR_COUNTER.increment(); } if (f == null) { return; } Annotation annotation=f.getAnnotation(Auto.class); if (annotation == null) { return; } f.setAccessible(true); String value=reader.getValue(); Class returnClass=f.getType(); if (value != null) { if (!String.class.equals(returnClass)) { Method method=returnClass.getDeclaredMethod(""valueOf"" java.lang.String.class); Object valueObject=method.invoke(returnClass value); f.set(o valueObject); } else { f.set(o value); } } } catch ( Throwable th) { logger.error(""Error in unmarshalling the object:"" th); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,canConvert,"@Override public boolean  (@SuppressWarnings(""rawtypes"") Class type){ return Map.class.isAssignableFrom(type); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,getName,@Override public Name  (){ return name; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,getStatus,public String  (InstanceInfo info){ return info.getStatus().name(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,marshal,"@Override @SuppressWarnings(""unchecked"") public void  (Object source HierarchicalStreamWriter writer MarshallingContext context){ Map<String String> map=(Map<String String>)source; for (Iterator<Entry<String String>> iter=map.entrySet().iterator(); iter.h"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,unmarshal,@Override public Object  (HierarchicalStreamReader reader UnmarshallingContext context){ return unmarshalMap(reader context); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\Converters.java,unmarshalMap,private Map<String String>  (HierarchicalStreamReader reader UnmarshallingContext context){ Map<String String> map=Collections.emptyMap(); while (reader.hasMoreChildren()) { if (map == Collections.EMPTY_MAP) { map=new HashMap<String String>(); } reader.moveDown(); String key=reader.getNodeName(); String value=reader.getValue(); reader.moveUp(); map.put(StringCache.intern(key) value); } return map; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,ApplicationDeserializer,public  (ObjectMapper mapper){ this.mapper=mapper; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,ApplicationField,private  (String name){ this.fieldName=name.toCharArray(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,ApplicationsDeserializer,public  (ObjectMapper mapper String versionDeltaKey String appHashCodeKey){ this.mapper=mapper; this.versionDeltaKey=versionDeltaKey; this.appHashCodeKey=appHashCodeKey; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,ApplicationsSerializer,public  (String versionDeltaKey String appHashCodeKey){ this.versionDeltaKey=versionDeltaKey; this.appHashCodeKey=appHashCodeKey; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,EurekaJacksonCodec,"public  (String versionDeltaKey String appsHashCodeKey){ this.versionDeltaKey=versionDeltaKey; this.appHashCodeKey=appsHashCodeKey; this.mapper=new ObjectMapper(); this.mapper.setSerializationInclusion(Include.NON_NULL); SimpleModule module=new SimpleModule(""eureka1.x"" VERSION); module.addSerializer(DataCenterInfo.class new DataCenterInfoSerializer()); module.addSerializer(InstanceInfo.class new InstanceInfoSerializer()); module.addSerializer(Application.class new ApplicationSerializer()); module.addSerializer(Applications.class new ApplicationsSerializer(this.versionDeltaKey this.appHashCodeKey)); module.addDeserializer(LeaseInfo.class new LeaseInfoDeserializer()); module.addDeserializer(InstanceInfo.class new InstanceInfoDeserializer(this.mapper)); module.addDeserializer(Application.class new ApplicationDeserializer(this.mapper)); module.addDeserializer(Applications.class new ApplicationsDeserializer(this.mapper this.versionDeltaKey this.appHashCodeKey)); this.mapper.registerModule(module); Map<Class<?> Supplier<ObjectReader>> readers=new HashMap<>(); readers.put(InstanceInfo.class () -> mapper.reader().forType(InstanceInfo.class).withRootName(""instance"")); readers.put(Application.class () -> mapper.reader().forType(Application.class).withRootName(""application"")); readers.put(Applications.class () -> mapper.reader().forType(Applications.class).withRootName(""applications"")); this.objectReaderByClass=readers; Map<Class<?> ObjectWriter> writers=new HashMap<>(); writers.put(InstanceInfo.class mapper.writer().forType(InstanceInfo.class).withRootName(""instance"")); writers.put(Application.class mapper.writer().forType(Application.class).withRootName(""application"")); writers.put(Applications.class mapper.writer().forType(Applications.class).withRootName(""applications"")); this.objectWriterByClass=writers; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,InstanceInfoDeserializer,protected  (ObjectMapper mapper){ this.mapper=mapper; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,InstanceInfoField,private  (String elementName){ this.elementName=elementName.toCharArray(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,LeaseInfoField,private  (String fieldName){ this.fieldName=fieldName.toCharArray(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,PortField,private  (String name){ this.fieldName=name.toCharArray(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,autoMarshalEligible,"protected void  (Object o JsonGenerator jgen){ try { Class<?> c=o.getClass(); Field[] fields=c.getDeclaredFields(); Annotation annotation; for ( Field f : fields) { annotation=f.getAnnotation(Auto.class); if (annotation != null) { f.setAccessible(true); if (f.get(o) != null) { jgen.writeStringField(f.getName() String.valueOf(f.get(o))); } } } } catch ( Throwable th) { logger.error(""Error in marshalling the object"" th); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,autoUnmarshalEligible,"void  (String fieldName String value Object o){ if (value == null || o == null) return; Class<?> c=o.getClass(); String cacheKey=c.getName() + "":"" + fieldName; BiConsumer<Object String> action=autoUnmarshalActions.computeIfAbsent(cacheKey k -> { try { Field f=null; try { f=c.getDeclaredField(fieldName); } catch ( NoSuchFieldException e) { } if (f == null) { return (t v) -> { } ; } Annotation annotation=f.getAnnotation(Auto.class); if (annotation == null) { return (t v) -> { } ; } f.setAccessible(true); final Field setterField=f; Class<?> returnClass=setterField.getType(); if (!String.class.equals(returnClass)) { Method method=returnClass.getDeclaredMethod(""valueOf"" java.lang.String.class); return (t v) -> tryCatchLog(() -> { setterField.set(t method.invoke(returnClass v)); return null; } ); } else { return (t v) -> tryCatchLog(() -> { setterField.set(t v); return null; } ); } } catch ( Exception ex) { logger.error(""Error in unmarshalling the object:"" ex); return null; } } ); action.accept(o value); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,deserialize,"@Override public Applications  (JsonParser jp DeserializationContext context) throws IOException { if (Thread.currentThread().isInterrupted()) { throw new JsonParseException(jp ""processing aborted""); } Applications apps=new Applications(); JsonToken jsonT"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,formatKey,"protected static String  (EurekaClientConfig clientConfig String keyTemplate){ String replacement; if (clientConfig == null) { replacement=""__""; } else { replacement=clientConfig.getEscapeCharReplacement(); } StringBuilder sb=new StringBuilder(keyTemplate.length() + 1); for ( char c : keyTemplate.toCharArray()) { if (c == '_') { sb.append(replacement); } else { sb.append(c); } } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,getAppHashCodeKey,protected String  (){ return appHashCodeKey; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,getElementName,public char[]  (){ return elementName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,getFieldName,public char[]  (){ return fieldName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,getInstance,public static EurekaJacksonCodec  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,getMapper,protected ObjectMapper  (){ return mapper; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,getVersionDeltaKey,protected String  (){ return versionDeltaKey; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,loadConfig,static EurekaClientConfig  (){ return com.netflix.discovery.DiscoveryManager.getInstance().getEurekaClientConfig(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,readValue,public <T>T  (Class<T> type String text) throws IOException { ObjectReader reader=DeserializerStringCache.init(Optional.ofNullable(objectReaderByClass.get(type)).map(Supplier::get).orElseGet(() -> mapper.readerFor(type))); try { return reader.readValue(text); } finally { DeserializerStringCache.clear(reader CacheScope.GLOBAL_SCOPE); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,serialize,@Override public void  (Applications applications JsonGenerator jgen SerializerProvider provider) throws IOException { jgen.writeStartObject(); jgen.writeStringField(versionDeltaKey applications.getVersion().toString()); jgen.writeStringField(appHashCodeK
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,serializeWithType,@Override public void  (DataCenterInfo dataCenterInfo JsonGenerator jgen SerializerProvider provider TypeSerializer typeSer) throws IOException  JsonProcessingException { jgen.writeStartObject(); if (dataCenterInfo.getName() == Name.Amazon) { jgen.writeSt
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,setInstance,public static void  (EurekaJacksonCodec instance){ INSTANCE=instance; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,tryCatchLog,"private static void  (Callable<Void> callable){ try { callable.call(); } catch ( Exception ex) { logger.error(""Error in unmarshalling the object:"" ex); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,writeTo,public <T>void  (T object OutputStream entityStream) throws IOException { ObjectWriter writer=objectWriterByClass.get(object.getClass()); if (writer == null) { mapper.writeValue(entityStream object); } else { writer.writeValue(entityStream object); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\EurekaJacksonCodec.java,writeToString,"public <T>String  (T object){ try { ObjectWriter writer=objectWriterByClass.get(object.getClass()); if (writer == null) { return mapper.writeValueAsString(object); } return writer.writeValueAsString(object); } catch ( IOException e) { throw new IllegalArgumentException(""Cannot encode provided object"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsJacksonBuilder.java,build,public Applications  (){ return new Applications(appsHashCode version applications); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsJacksonBuilder.java,with,"@JsonAnySetter public void  (String fieldName Object value){ if (fieldName == null || value == null) { return; } if (fieldName.startsWith(""version"")) { try { version=value instanceof Number ? ((Number)value).longValue() : Long.parseLong((String)value); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsJacksonBuilder.java,withApplication,"@JsonProperty(""application"") public void  (List<Application> applications){ this.applications=applications; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\ApplicationsXmlJacksonBuilder.java,withApplication,@Override @JacksonXmlElementWrapper(useWrapping=false) public void  (List<Application> applications){ super.withApplication(applications); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,build,public AmazonInfo  (){ return new AmazonInfo(Name.Amazon.name() metadata); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,deserialize,@Override public AmazonInfo  (JsonParser jp DeserializationContext context) throws IOException { Map<String String> metadata=new CompactHashMap<>(); DeserializerStringCache intern=DeserializerStringCache.from(context); JsonToken jsonToken; while ((jsonTok
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,withMetadata,public StringInterningAmazonInfoBuilder  (HashMap<String String> metadata){ this.metadata=metadata; if (metadata.isEmpty()) { return this; } for ( Map.Entry<String String> entry : metadata.entrySet()) { String key=entry.getKey().intern(); if (VALUE_INTERN_KEYS.containsKey(key)) { entry.setValue(StringCache.intern(entry.getValue())); } } return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\builder\StringInterningAmazonInfoBuilder.java,withName,public StringInterningAmazonInfoBuilder  (String name){ return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonJsonModifiers.java,createJsonSerializerModifier,public static BeanSerializerModifier  (final KeyFormatter keyFormatter final boolean compactMode){ return new BeanSerializerModifier(){ @Override public JsonSerializer<?> modifySerializer( SerializationConfig config  BeanDescription beanDesc  JsonSerializer<?> serializer){ if (beanDesc.getBeanClass().isAssignableFrom(Applications.class)) { return new ApplicationsJsonBeanSerializer((BeanSerializerBase)serializer keyFormatter); } if (beanDesc.getBeanClass().isAssignableFrom(InstanceInfo.class)) { return new InstanceInfoJsonBeanSerializer((BeanSerializerBase)serializer compactMode); } return serializer; } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonJsonModifiers.java,modifySerializer,@Override public JsonSerializer<?>  (SerializationConfig config BeanDescription beanDesc JsonSerializer<?> serializer){ if (beanDesc.getBeanClass().isAssignableFrom(Applications.class)) { return new ApplicationsJsonBeanSerializer((BeanSerializerBase)seria
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,DataCenterTypeInfoResolver,public  (){ super(TypeFactory.defaultInstance().constructType(DataCenterInfo.class) TypeFactory.defaultInstance()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,idFromValue,@Override public String  (Object value){ if (value.getClass().equals(AmazonInfo.class)) { return AmazonInfo.class.getName(); } return MY_DATA_CENTER_INFO_TYPE_MARKER; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\DataCenterTypeInfoResolver.java,typeFromId,@Override public JavaType  (DatabindContext context String id) throws IOException { if (MY_DATA_CENTER_INFO_TYPE_MARKER.equals(id)) { return context.getTypeFactory().constructType(MyDataCenterInfo.class); } return super.typeFromId(context id); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonXmlModifiers.java,createXmlSerializerModifier,public static BeanSerializerModifier  (final KeyFormatter keyFormatter){ return new BeanSerializerModifier(){ @Override public JsonSerializer<?> modifySerializer( SerializationConfig config  BeanDescription beanDesc  JsonSerializer<?> serializer){ if (beanDesc.getBeanClass().isAssignableFrom(Applications.class)) { return new ApplicationsXmlBeanSerializer((BeanSerializerBase)serializer keyFormatter); } if (beanDesc.getBeanClass().isAssignableFrom(InstanceInfo.class)) { return new InstanceInfoXmlBeanSerializer((BeanSerializerBase)serializer); } return serializer; } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJacksonXmlModifiers.java,modifySerializer,@Override public JsonSerializer<?>  (SerializationConfig config BeanDescription beanDesc JsonSerializer<?> serializer){ if (beanDesc.getBeanClass().isAssignableFrom(Applications.class)) { return new ApplicationsXmlBeanSerializer((BeanSerializerBase)serial
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java,EurekaXmlJacksonCodec,public  (final KeyFormatter keyFormatter boolean compact){ xmlMapper=new XmlMapper(){ public ObjectMapper registerModule( Module module){ setSerializerFactory(getSerializerFactory().withSerializerModifier(EurekaJacksonXmlModifiers.createXmlSerializerModifier(keyFormatter))); return super.registerModule(module); } } ; xmlMapper.setSerializationInclusion(Include.NON_NULL); xmlMapper.addMixIn(DataCenterInfo.class DataCenterInfoXmlMixIn.class); xmlMapper.addMixIn(InstanceInfo.PortWrapper.class PortWrapperXmlMixIn.class); xmlMapper.addMixIn(Application.class ApplicationXmlMixIn.class); xmlMapper.addMixIn(Applications.class ApplicationsXmlMixIn.class); SimpleModule xmlModule=new SimpleModule(); xmlMapper.registerModule(xmlModule); if (compact) { addMiniConfig(xmlMapper); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java,getObjectMapper,@Override public <T>ObjectMapper  (Class<T> type){ return xmlMapper; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaXmlJacksonCodec.java,registerModule,public ObjectMapper  (Module module){ setSerializerFactory(getSerializerFactory().withSerializerModifier(EurekaJacksonXmlModifiers.createXmlSerializerModifier(keyFormatter))); return super.registerModule(module); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,EurekaJsonJacksonCodec,public  (final KeyFormatter keyFormatter boolean compact){ this.unwrappedJsonMapper=createObjectMapper(keyFormatter compact false); this.wrappedJsonMapper=createObjectMapper(keyFormatter compact true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,createObjectMapper,private ObjectMapper  (KeyFormatter keyFormatter boolean compact boolean wrapped){ ObjectMapper newMapper=new ObjectMapper(); SimpleModule jsonModule=new SimpleModule(); jsonModule.setSerializerModifier(EurekaJacksonJsonModifiers.createJsonSerializerModifier(keyFormatter compact)); newMapper.registerModule(jsonModule); newMapper.setSerializationInclusion(Include.NON_NULL); newMapper.configure(SerializationFeature.WRAP_ROOT_VALUE wrapped); newMapper.configure(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED false); newMapper.configure(DeserializationFeature.UNWRAP_ROOT_VALUE wrapped); newMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY true); newMapper.addMixIn(Applications.class ApplicationsJsonMixIn.class); if (compact) { addMiniConfig(newMapper); } else { newMapper.addMixIn(InstanceInfo.class InstanceInfoJsonMixIn.class); } return newMapper; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\EurekaJsonJacksonCodec.java,getObjectMapper,@Override public <T>ObjectMapper  (Class<T> type){ ObjectMapper mapper=mappers.get(type); if (mapper == null) { mapper=hasJsonRootName(type) ? wrappedJsonMapper : unwrappedJsonMapper; mappers.put(type mapper); } return mapper; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsJsonBeanSerializer.java,ApplicationsJsonBeanSerializer,"public  (BeanSerializerBase src KeyFormatter keyFormatter){ super(src); versionKey=keyFormatter.formatKey(""versions_delta""); appsHashCodeKey=keyFormatter.formatKey(""apps_hashcode""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsJsonBeanSerializer.java,serializeFields,@Override protected void  (Object bean JsonGenerator jgen0 SerializerProvider provider) throws IOException { super.serializeFields(bean jgen0 provider); Applications applications=(Applications)bean; if (applications.getVersion() != null) { jgen0.writeStri
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsXmlBeanSerializer.java,ApplicationsXmlBeanSerializer,"public  (BeanSerializerBase src KeyFormatter keyFormatter){ super(src); versionKey=keyFormatter.formatKey(""versions_delta""); appsHashCodeKey=keyFormatter.formatKey(""apps_hashcode""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationsXmlBeanSerializer.java,serializeFields,@Override protected void  (Object bean JsonGenerator jgen0 SerializerProvider provider) throws IOException { super.serializeFields(bean jgen0 provider); Applications applications=(Applications)bean; if (applications.getVersion() != null) { jgen0.writeStri
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java,InstanceInfoXmlBeanSerializer,public  (BeanSerializerBase src){ super(src); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoXmlBeanSerializer.java,serializeFields,@Override protected void  (Object bean JsonGenerator jgen0 SerializerProvider provider) throws IOException { super.serializeFields(bean jgen0 provider); InstanceInfo instanceInfo=(InstanceInfo)bean; ToXmlGenerator xgen=(ToXmlGenerator)jgen0; xgen.writeFie
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\PortWrapperXmlDeserializer.java,PortWrapperXmlDeserializer,public  (){ super(InstanceInfo.PortWrapper.class); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\PortWrapperXmlDeserializer.java,deserialize,"@Override public InstanceInfo.PortWrapper  (JsonParser jp DeserializationContext ctxt) throws IOException { boolean enabled=false; int port=0; while (jp.nextToken() == JsonToken.FIELD_NAME) { String fieldName=jp.getCurrentName(); jp.nextToken(); if (""enab"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java,InstanceInfoJsonBeanSerializer,public  (BeanSerializerBase src boolean compactMode){ super(src); this.compactMode=compactMode; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\InstanceInfoJsonBeanSerializer.java,serializeFields,"@Override protected void  (Object bean JsonGenerator jgen0 SerializerProvider provider) throws IOException { super.serializeFields(bean jgen0 provider); InstanceInfo instanceInfo=(InstanceInfo)bean; jgen0.writeFieldName(""port""); jgen0.writeStartObject(); "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationXmlDeserializer.java,ApplicationXmlDeserializer,public  (){ super(Application.class); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\jackson\serializer\ApplicationXmlDeserializer.java,deserialize,@Override public Application  (JsonParser jp DeserializationContext ctxt) throws IOException  JsonProcessingException { String name=null; List<InstanceInfo> instances=new ArrayList<>(); while (jp.nextToken() == JsonToken.FIELD_NAME) { String fieldName=jp.
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java,KeyFormatter,@Inject public  (EurekaClientConfig eurekaClientConfig){ if (eurekaClientConfig == null) { this.replacement=DEFAULT_REPLACEMENT; } else { this.replacement=eurekaClientConfig.getEscapeCharReplacement(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java,defaultKeyFormatter,public static KeyFormatter  (){ return DEFAULT_KEY_FORMATTER; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\KeyFormatter.java,formatKey,public String  (String keyTemplate){ StringBuilder sb=new StringBuilder(keyTemplate.length() + 1); for ( char c : keyTemplate.toCharArray()) { if (c == '_') { sb.append(replacement); } else { sb.append(c); } } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,JsonXStream,public  (){ super(new JettisonMappedXmlDriver(){ private final NameCoder coder=initializeNameCoder(); protected NameCoder getNameCoder(){ return this.coder; } } ); registerConverter(new Converters.ApplicationConverter()); registerConverter(new Converters.ApplicationsConverter()); registerConverter(new Converters.DataCenterInfoConverter()); registerConverter(new Converters.InstanceInfoConverter()); registerConverter(new Converters.LeaseInfoConverter()); registerConverter(new Converters.MetadataConverter()); setMode(XStream.NO_REFERENCES); processAnnotations(new Class[]{InstanceInfo.class Application.class Applications.class}); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,getInstance,public static JsonXStream  (){ return s_instance; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,getNameCoder,protected NameCoder  (){ return this.coder; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\JsonXStream.java,initializeNameCoder,private static XmlFriendlyNameCoder  (){ EurekaClientConfig clientConfig=DiscoveryManager.getInstance().getEurekaClientConfig(); if (clientConfig == null) { return new XmlFriendlyNameCoder(); } return new XmlFriendlyNameCoder(clientConfig.getDollarReplacement() clientConfig.getEscapeCharReplacement()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,codecName,@Override public String  (){ return CodecWrappers.getCodecName(this.getClass()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,create,private static CodecWrapper  (String name){ if (getCodecName(JacksonJson.class).equals(name)) { return new JacksonJson(); } else if (getCodecName(JacksonJsonMini.class).equals(name)) { return new JacksonJsonMini(); } else if (getCodecName(LegacyJacksonJson.class).equals(name)) { return new LegacyJacksonJson(); } else if (getCodecName(XStreamJson.class).equals(name)) { return new XStreamJson(); } else if (getCodecName(JacksonXml.class).equals(name)) { return new JacksonXml(); } else if (getCodecName(JacksonXmlMini.class).equals(name)) { return new JacksonXmlMini(); } else if (getCodecName(XStreamXml.class).equals(name)) { return new XStreamXml(); } else { return null; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,decode,@Override public <T>T  (InputStream inputStream Class<T> type) throws IOException { return (T)codec.fromXML(inputStream type); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,encode,@Override public <T>void  (T object OutputStream outputStream) throws IOException { codec.toXML(object outputStream); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,getCodec,public static synchronized CodecWrapper  (String name){ if (name == null) { return null; } if (!CODECS.containsKey(name)) { CodecWrapper wrapper=create(name); if (wrapper != null) { CODECS.put(wrapper.codecName() wrapper); } } return CODECS.get(name); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,getCodecName,public static <T extends CodecWrapperBase>String  (Class<T> clazz){ return clazz.getSimpleName(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,getDecoder,public static synchronized DecoderWrapper  (String name){ if (name == null) { return null; } if (!CODECS.containsKey(name)) { CodecWrapper wrapper=create(name); if (wrapper != null) { CODECS.put(wrapper.codecName() wrapper); } } return CODECS.get(name); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,getEncoder,public static synchronized EncoderWrapper  (String name){ if (name == null) { return null; } if (!CODECS.containsKey(name)) { CodecWrapper wrapper=create(name); if (wrapper != null) { CODECS.put(wrapper.codecName() wrapper); } } return CODECS.get(name); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,registerWrapper,public static void  (CodecWrapper wrapper){ CODECS.put(wrapper.codecName() wrapper); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,resolveDecoder,public static synchronized DecoderWrapper  (String name String eurekaAccept){ EurekaAccept accept=EurekaAccept.fromString(eurekaAccept); switch (accept) { case compact: return getDecoder(JacksonJsonMini.class); case full: default : return getDecoder(name); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\wrappers\CodecWrappers.java,support,@Override public boolean  (MediaType mediaType){ return mediaType.equals(MediaType.APPLICATION_XML_TYPE); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java,XmlXStream,public  (){ super(new DomDriver(null initializeNameCoder())); registerConverter(new Converters.ApplicationConverter()); registerConverter(new Converters.ApplicationsConverter()); registerConverter(new Converters.DataCenterInfoConverter()); registerConverter(new Converters.InstanceInfoConverter()); registerConverter(new Converters.LeaseInfoConverter()); registerConverter(new Converters.MetadataConverter()); setMode(XStream.NO_REFERENCES); processAnnotations(new Class[]{InstanceInfo.class Application.class Applications.class}); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java,getInstance,public static XmlXStream  (){ return s_instance; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\converters\XmlXStream.java,initializeNameCoder,private static XmlFriendlyNameCoder  (){ EurekaClientConfig clientConfig=DiscoveryManager.getInstance().getEurekaClientConfig(); if (clientConfig == null) { return new XmlFriendlyNameCoder(); } return new XmlFriendlyNameCoder(clientConfig.getDollarReplacement() clientConfig.getEscapeCharReplacement()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryEvent.java,DiscoveryEvent,protected  (){ this.timestamp=System.currentTimeMillis(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryEvent.java,getTimestamp,public final long  (){ return this.timestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,getDiscoveryClient,@Deprecated public DiscoveryClient  (){ return discoveryClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,getEurekaClient,public EurekaClient  (){ return discoveryClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,getEurekaClientConfig,public EurekaClientConfig  (){ return eurekaClientConfig; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,getEurekaInstanceConfig,public EurekaInstanceConfig  (){ return eurekaInstanceConfig; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,getInstance,public static DiscoveryManager  (){ return s_instance; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,getLookupService,public LookupService  (){ return discoveryClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,initComponent,public void  (EurekaInstanceConfig config EurekaClientConfig eurekaConfig){ initComponent(config eurekaConfig null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,setDiscoveryClient,public void  (DiscoveryClient discoveryClient){ this.discoveryClient=discoveryClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,setEurekaClientConfig,public void  (EurekaClientConfig eurekaClientConfig){ this.eurekaClientConfig=eurekaClientConfig; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,setEurekaInstanceConfig,public void  (EurekaInstanceConfig eurekaInstanceConfig){ this.eurekaInstanceConfig=eurekaInstanceConfig; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryManager.java,shutdownComponent,"public void  (){ if (discoveryClient != null) { try { discoveryClient.shutdown(); discoveryClient=null; } catch ( Throwable th) { logger.error(""Error in shutting down client"" th); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,DiscoveryClient,@Inject  (ApplicationInfoManager applicationInfoManager EurekaClientConfig config AbstractDiscoveryClientOptionalArgs args Provider<BackupRegistry> backupRegistryProvider){ if (args != null) { this.healthCheckHandlerProvider=args.healthCheckHandlerProvide
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,cancelScheduledTasks,private void  (){ if (instanceInfoReplicator != null) { instanceInfoReplicator.stop(); } if (heartbeatExecutor != null) { heartbeatExecutor.shutdownNow(); } if (cacheRefreshExecutor != null) { cacheRefreshExecutor.shutdownNow(); } if (scheduler != null) { scheduler.shutdownNow(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,computeStalenessMonitorDelay,private long  (long delay){ if (delay < 0) { return System.currentTimeMillis() - initTimestampMs; } else { return delay; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fetchRegistry,"private boolean  (boolean forceFullRegistryFetch){ Stopwatch tracer=FETCH_REGISTRY_TIMER.start(); try { Applications applications=getApplications(); if (clientConfig.shouldDisableDelta() || (!Strings.isNullOrEmpty(clientConfig.getRegistryRefreshSingleVipAddress())) || forceFullRegistryFetch|| (applications == null)|| (applications.getRegisteredApplications().size() == 0)|| (applications.getVersion() == -1)) { logger.info(""Disable delta property : {}"" clientConfig.shouldDisableDelta()); logger.info(""Single vip registry refresh property : {}"" clientConfig.getRegistryRefreshSingleVipAddress()); logger.info(""Force full registry fetch : {}"" forceFullRegistryFetch); logger.info(""Application is null : {}"" (applications == null)); logger.info(""Registered Applications size is zero : {}"" (applications.getRegisteredApplications().size() == 0)); logger.info(""Application version is -1: {}"" (applications.getVersion() == -1)); getAndStoreFullRegistry(); } else { getAndUpdateDelta(applications); } applications.setAppsHashCode(applications.getReconcileHashCode()); logTotalInstances(); } catch ( Throwable e) { logger.error(PREFIX + ""{} - was unable to refresh its cache! status = {}"" appPathIdentifier e.getMessage() e); return false; } finally { if (tracer != null) { tracer.stop(); } } onCacheRefreshed(); updateInstanceRemoteStatus(); return true; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fetchRegistryFromBackup,"private void  (){ try { @SuppressWarnings(""deprecation"") BackupRegistry backupRegistryInstance=newBackupRegistryInstance(); if (null == backupRegistryInstance) { backupRegistryInstance=backupRegistryProvider.get(); } if (null != backupRegistryInstance) { Applications apps=null; if (isFetchingRemoteRegionRegistries()) { String remoteRegionsStr=remoteRegionsToFetch.get(); if (null != remoteRegionsStr) { apps=backupRegistryInstance.fetchRegistry(remoteRegionsStr.split("" "")); } } else { apps=backupRegistryInstance.fetchRegistry(); } if (apps != null) { final Applications applications=this.filterAndShuffle(apps); applications.setAppsHashCode(applications.getReconcileHashCode()); localRegionApps.set(applications); logTotalInstances(); logger.info(""Fetched registry successfully from the backup""); } } else { logger.warn(""No backup registry instance defined & unable to find any discovery servers.""); } } catch ( Throwable e) { logger.warn(""Cannot fetch applications from apps although backup registry was specified"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,filterAndShuffle,private Applications  (Applications apps){ if (apps != null) { if (isFetchingRemoteRegionRegistries()) { Map<String Applications> remoteRegionVsApps=new ConcurrentHashMap<String Applications>(); apps.shuffleAndIndexInstances(remoteRegionVsApps clientConfig instanceRegionChecker); for ( Applications applications : remoteRegionVsApps.values()) { applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances()); } this.remoteRegionVsApps=remoteRegionVsApps; } else { apps.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances()); } } return apps; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,fireEvent,"protected void  (final EurekaEvent event){ for ( EurekaEventListener listener : eventListeners) { try { listener.onEvent(event); } catch ( Exception e) { logger.info(""Event {} throw an exception for listener {}"" event listener e.getMessage()); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,get,@Override public synchronized BackupRegistry  (){ if (backupRegistryInstance == null) { String backupRegistryClassName=config.getBackupRegistryImpl(); if (null != backupRegistryClassName) { try { backupRegistryInstance=(BackupRegistry)Class.forName(backup
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getAllKnownRegions,public Set<String>  (){ String localRegion=instanceRegionChecker.getLocalRegion(); if (!remoteRegionVsApps.isEmpty()) { Set<String> regions=remoteRegionVsApps.keySet(); Set<String> toReturn=new HashSet<String>(regions); toReturn.add(localRegion); return toReturn; } else { return Collections.singleton(localRegion); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getAndStoreFullRegistry,"private void  () throws Throwable { long currentUpdateGeneration=fetchRegistryGeneration.get(); logger.info(""Getting all instance registry info from the eureka server""); Applications apps=null; EurekaHttpResponse<Applications> httpResponse=clientConfig.getRegistryRefreshSingleVipAddress() == null ? eurekaTransport.queryClient.getApplications(remoteRegionsRef.get()) : eurekaTransport.queryClient.getVip(clientConfig.getRegistryRefreshSingleVipAddress() remoteRegionsRef.get()); if (httpResponse.getStatusCode() == Status.OK.getStatusCode()) { apps=httpResponse.getEntity(); } logger.info(""The response status is {}"" httpResponse.getStatusCode()); if (apps == null) { logger.error(""The application is null for some reason. Not storing this information""); } else if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration currentUpdateGeneration + 1)) { localRegionApps.set(this.filterAndShuffle(apps)); logger.debug(""Got full registry with apps hashcode {}"" apps.getAppsHashCode()); } else { logger.warn(""Not updating applications as another thread is updating it already""); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getAndUpdateDelta,"private void  (Applications applications) throws Throwable { long currentUpdateGeneration=fetchRegistryGeneration.get(); Applications delta=null; EurekaHttpResponse<Applications> httpResponse=eurekaTransport.queryClient.getDelta(remoteRegionsRef.get()); if (httpResponse.getStatusCode() == Status.OK.getStatusCode()) { delta=httpResponse.getEntity(); } if (delta == null) { logger.warn(""The server does not allow the delta revision to be applied because it is not safe. "" + ""Hence got the full registry.""); getAndStoreFullRegistry(); } else if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration currentUpdateGeneration + 1)) { logger.debug(""Got delta update with apps hashcode {}"" delta.getAppsHashCode()); String reconcileHashCode=""""; if (fetchRegistryUpdateLock.tryLock()) { try { updateDelta(delta); reconcileHashCode=getReconcileHashCode(applications); } finally { fetchRegistryUpdateLock.unlock(); } } else { logger.warn(""Cannot acquire update lock  aborting getAndUpdateDelta""); } if (!reconcileHashCode.equals(delta.getAppsHashCode()) || clientConfig.shouldLogDeltaDiff()) { reconcileAndLogDifference(delta reconcileHashCode); } } else { logger.warn(""Not updating application delta as another thread is updating it already""); logger.debug(""Ignoring delta update with apps hashcode {}  as another thread is updating it already"" delta.getAppsHashCode()); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getApplication,@Override public Application  (String appName){ return getApplications().getRegisteredApplications(appName); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getApplicationInfoManager,@Override public ApplicationInfoManager  (){ return applicationInfoManager; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getApplications,@Override public Applications  (String serviceUrl){ try { EurekaHttpResponse<Applications> response=clientConfig.getRegistryRefreshSingleVipAddress() == null ? eurekaTransport.queryClient.getApplications() : eurekaTransport.queryClient.getVip(clientConfig
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getApplicationsForARegion,@Override public Applications  (@Nullable String region){ if (instanceRegionChecker.isLocalRegion(region)) { return localRegionApps.get(); } else { return remoteRegionVsApps.get(region); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getDiscoveryServiceUrls,@Deprecated @Override public List<String>  (String zone){ return EndpointUtils.getDiscoveryServiceUrls(clientConfig zone urlRandomizer); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getEC2DiscoveryUrlsFromZone,@Deprecated public static Set<String>  (String dnsName EndpointUtils.DiscoveryUrlType type){ return EndpointUtils.getEC2DiscoveryUrlsFromZone(dnsName type); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getEurekaClientConfig,@Override public EurekaClientConfig  (){ return clientConfig; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getEurekaServiceUrlsFromConfig,@Deprecated public static List<String>  (String instanceZone boolean preferSameZone){ return EndpointUtils.getServiceUrlsFromConfig(staticClientConfig instanceZone preferSameZone); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getHealthCheckHandler,@Override public HealthCheckHandler  (){ if (healthCheckHandler == null) { if (null != healthCheckHandlerProvider) { healthCheckHandler=healthCheckHandlerProvider.get(); } else if (null != healthCheckCallbackProvider) { healthCheckHandler=new HealthCheckC
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getId,"@Override public String  (){ return ""statusChangeListener""; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getInstanceInfo,@VisibleForTesting InstanceInfo  (){ return instanceInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getInstanceInfoReplicator,@VisibleForTesting InstanceInfoReplicator  (){ return instanceInfoReplicator; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getInstanceRemoteStatus,@Override public InstanceInfo.InstanceStatus  (){ return lastRemoteInstanceStatus; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getInstancesById,@Override public List<InstanceInfo>  (String id){ List<InstanceInfo> instancesList=new ArrayList<InstanceInfo>(); for ( Application app : this.getApplications().getRegisteredApplications()) { InstanceInfo instanceInfo=app.getByInstanceId(id); if (instance
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getInstancesByVipAddress,"@Override public List<InstanceInfo>  (String vipAddress boolean secure @Nullable String region){ if (vipAddress == null) { throw new IllegalArgumentException(""Supplied VIP Address cannot be null""); } Applications applications; if (instanceRegionChecker.is"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,DefaultEurekaClientConfig,"public  (String namespace){ this.namespace=namespace.endsWith(""."") ? namespace : namespace + "".""; this.configInstance=Archaius1Utils.initConfig(CommonConstants.CONFIG_FILE_NAME); this.transportConfig=new DefaultEurekaTransportConfig(namespace configInstance); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,allowRedirects,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_ALLOW_REDIRECTS_KEY false).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,fetchRegistryForRemoteRegions,@Nullable @Override public String  (){ return configInstance.getStringProperty(namespace + SHOULD_FETCH_REMOTE_REGION_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getAvailabilityZones,"@Override public String[]  (String region){ return configInstance.getStringProperty(namespace + region + "".""+ CONFIG_AVAILABILITY_ZONE_PREFIX DEFAULT_ZONE).get().split("" ""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getBackupRegistryImpl,@Override public String  (){ return configInstance.getStringProperty(namespace + BACKUP_REGISTRY_CLASSNAME_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getCacheRefreshExecutorExponentialBackOffBound,@Override public int  (){ return configInstance.getIntProperty(namespace + CACHEREFRESH_BACKOFF_BOUND_KEY Values.DEFAULT_EXECUTOR_THREAD_POOL_BACKOFF_BOUND).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getCacheRefreshExecutorThreadPoolSize,@Override public int  (){ return configInstance.getIntProperty(namespace + CACHEREFRESH_THREADPOOL_SIZE_KEY Values.DEFAULT_EXECUTOR_THREAD_POOL_SIZE).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getClientDataAccept,@Override public String  (){ return configInstance.getStringProperty(namespace + CLIENT_DATA_ACCEPT_KEY EurekaAccept.full.name()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getDecoderName,@Override public String  (){ return configInstance.getStringProperty(namespace + CLIENT_DECODER_NAME_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getDollarReplacement,@Override public String  (){ return configInstance.getStringProperty(namespace + CONFIG_DOLLAR_REPLACEMENT_KEY Values.CONFIG_DOLLAR_REPLACEMENT).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEncoderName,@Override public String  (){ return configInstance.getStringProperty(namespace + CLIENT_ENCODER_NAME_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEscapeCharReplacement,@Override public String  (){ return configInstance.getStringProperty(namespace + CONFIG_ESCAPE_CHAR_REPLACEMENT_KEY Values.CONFIG_ESCAPE_CHAR_REPLACEMENT).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaConnectionIdleTimeoutSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + EUREKA_SERVER_CONNECTION_IDLE_TIMEOUT_KEY 30).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServerConnectTimeoutSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + EUREKA_SERVER_CONNECT_TIMEOUT_KEY 5).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServerDNSName,@Override public String  (){ return configInstance.getStringProperty(namespace + EUREKA_SERVER_DNS_NAME_KEY configInstance.getStringProperty(namespace + EUREKA_SERVER_FALLBACK_DNS_NAME_KEY null).get()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServerPort,@Override public String  (){ return configInstance.getStringProperty(namespace + EUREKA_SERVER_PORT_KEY configInstance.getStringProperty(namespace + EUREKA_SERVER_FALLBACK_PORT_KEY null).get()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServerReadTimeoutSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + EUREKA_SERVER_READ_TIMEOUT_KEY 8).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServerServiceUrls,"@Override public List<String>  (String myZone){ String serviceUrls=configInstance.getStringProperty(namespace + CONFIG_EUREKA_SERVER_SERVICE_URL_PREFIX + "".""+ myZone null).get(); if (serviceUrls == null || serviceUrls.isEmpty()) { serviceUrls=configInstan"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServerTotalConnections,@Override public int  (){ return configInstance.getIntProperty(namespace + EUREKA_SERVER_MAX_CONNECTIONS_KEY 200).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServerTotalConnectionsPerHost,@Override public int  (){ return configInstance.getIntProperty(namespace + EUREKA_SERVER_MAX_CONNECTIONS_PER_HOST_KEY 50).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServerURLContext,@Override public String  (){ return configInstance.getStringProperty(namespace + EUREKA_SERVER_URL_CONTEXT_KEY configInstance.getStringProperty(namespace + EUREKA_SERVER_FALLBACK_URL_CONTEXT_KEY null).get()).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getEurekaServiceUrlPollIntervalSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + EUREKA_SERVER_URL_POLL_INTERVAL_KEY 5 * 60 * 1000).get() / 1000; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getExperimental,"@Override public String  (String name){ return configInstance.getStringProperty(namespace + CONFIG_EXPERIMENTAL_PREFIX + "".""+ name null).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getHeartbeatExecutorExponentialBackOffBound,@Override public int  (){ return configInstance.getIntProperty(namespace + HEARTBEAT_BACKOFF_BOUND_KEY Values.DEFAULT_EXECUTOR_THREAD_POOL_BACKOFF_BOUND).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getHeartbeatExecutorThreadPoolSize,@Override public int  (){ return configInstance.getIntProperty(namespace + HEARTBEAT_THREADPOOL_SIZE_KEY Values.DEFAULT_EXECUTOR_THREAD_POOL_SIZE).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getInitialInstanceInfoReplicationIntervalSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + INITIAL_REGISTRATION_REPLICATION_DELAY_KEY 40).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getInstanceInfoReplicationIntervalSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + REGISTRATION_REPLICATION_INTERVAL_KEY 30).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getProxyHost,@Override public String  (){ return configInstance.getStringProperty(namespace + EUREKA_SERVER_PROXY_HOST_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getProxyPassword,@Override public String  (){ return configInstance.getStringProperty(namespace + EUREKA_SERVER_PROXY_PASSWORD_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getProxyPort,@Override public String  (){ return configInstance.getStringProperty(namespace + EUREKA_SERVER_PROXY_PORT_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getProxyUserName,@Override public String  (){ return configInstance.getStringProperty(namespace + EUREKA_SERVER_PROXY_USERNAME_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getRegion,@Override public String  (){ DynamicStringProperty defaultEurekaRegion=configInstance.getStringProperty(CLIENT_REGION_FALLBACK_KEY Values.DEFAULT_CLIENT_REGION); return configInstance.getStringProperty(namespace + CLIENT_REGION_KEY defaultEurekaRegion.get
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getRegistryFetchIntervalSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + REGISTRY_REFRESH_INTERVAL_KEY 30).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getRegistryRefreshSingleVipAddress,@Override public String  (){ return configInstance.getStringProperty(namespace + FETCH_SINGLE_VIP_ONLY_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,getTransportConfig,@Override public EurekaTransportConfig  (){ return transportConfig; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldDisableDelta,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_DISABLE_DELTA_KEY false).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldEnforceRegistrationAtInit,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_ENFORCE_REGISTRATION_AT_INIT false).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldFetchRegistry,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + FETCH_REGISTRY_ENABLED_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldFilterOnlyUpInstances,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_FILTER_ONLY_UP_INSTANCES_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldGZipContent,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + EUREKA_SERVER_GZIP_CONTENT_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldLogDeltaDiff,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_LOG_DELTA_DIFF_KEY false).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldOnDemandUpdateStatusChange,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_ONDEMAND_UPDATE_STATUS_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldPreferSameZoneEureka,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_PREFER_SAME_ZONE_SERVER_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldRegisterWithEureka,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + REGISTRATION_ENABLED_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldUnregisterOnShutdown,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_UNREGISTER_ON_SHUTDOWN_KEY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DefaultEurekaClientConfig.java,shouldUseDnsForFetchingServiceUrls,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + SHOULD_USE_DNS_KEY false).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getInstancesByVipAddressAndAppName,"@Override public List<InstanceInfo>  (String vipAddress String appName boolean secure){ List<InstanceInfo> result=new ArrayList<InstanceInfo>(); if (vipAddress == null && appName == null) { throw new IllegalArgumentException(""Supplied VIP Address and appl"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getLastSuccessfulHeartbeatTimePeriod,public long  (){ return lastSuccessfulHeartbeatTimestamp < 0 ? lastSuccessfulHeartbeatTimestamp : System.currentTimeMillis() - lastSuccessfulHeartbeatTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getLastSuccessfulHeartbeatTimePeriodInternal,"@com.netflix.servo.annotations.Monitor(name=METRIC_REGISTRATION_PREFIX + ""lastSuccessfulHeartbeatTimePeriod"" description=""How much time has passed from last successful heartbeat"" type=DataSourceType.GAUGE) private long  (){ long delay=getLastSuccessfulHea"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getLastSuccessfulRegistryFetchTimePeriod,public long  (){ return lastSuccessfulRegistryFetchTimestamp < 0 ? lastSuccessfulRegistryFetchTimestamp : System.currentTimeMillis() - lastSuccessfulRegistryFetchTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getLastSuccessfulRegistryFetchTimePeriodInternal,"@com.netflix.servo.annotations.Monitor(name=METRIC_REGISTRY_PREFIX + ""lastSuccessfulRegistryFetchTimePeriod"" description=""How much time has passed from last successful local registry update"" type=DataSourceType.GAUGE) private long  (){ long delay=getLastS"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getNextServerFromEureka,"@Override public InstanceInfo  (String virtualHostname boolean secure){ List<InstanceInfo> instanceInfoList=this.getInstancesByVipAddress(virtualHostname secure); if (instanceInfoList == null || instanceInfoList.isEmpty()) { throw new RuntimeException(""No"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getReconcileHashCode,private String  (Applications applications){ TreeMap<String AtomicInteger> instanceCountMap=new TreeMap<String AtomicInteger>(); if (isFetchingRemoteRegionRegistries()) { for ( Applications remoteApp : remoteRegionVsApps.values()) { remoteApp.populateInstanceCountMap(instanceCountMap); } } applications.populateInstanceCountMap(instanceCountMap); return Applications.getReconcileHashCode(instanceCountMap); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getRegion,"@Deprecated public static String  (){ String region=staticClientConfig.getRegion(); if (region == null) { region=""default""; } region=region.trim().toLowerCase(); return region; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getServiceUrlsFromConfig,@Deprecated @Override public List<String>  (String instanceZone boolean preferSameZone){ return EndpointUtils.getServiceUrlsFromConfig(clientConfig instanceZone preferSameZone); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getServiceUrlsFromDNS,@Deprecated @Override public List<String>  (String instanceZone boolean preferSameZone){ return EndpointUtils.getServiceUrlsFromDNS(clientConfig instanceZone preferSameZone urlRandomizer); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,getZone,@Deprecated public static String  (InstanceInfo myInfo){ String[] availZones=staticClientConfig.getAvailabilityZones(staticClientConfig.getRegion()); return InstanceInfo.getZone(availZones myInfo); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,initScheduledTasks,"private void  (){ if (clientConfig.shouldFetchRegistry()) { int registryFetchIntervalSeconds=clientConfig.getRegistryFetchIntervalSeconds(); int expBackOffBound=clientConfig.getCacheRefreshExecutorExponentialBackOffBound(); scheduler.schedule(new TimedSupervisorTask(""cacheRefresh"" scheduler cacheRefreshExecutor registryFetchIntervalSeconds TimeUnit.SECONDS expBackOffBound new CacheRefreshThread()) registryFetchIntervalSeconds TimeUnit.SECONDS); } if (clientConfig.shouldRegisterWithEureka()) { int renewalIntervalInSecs=instanceInfo.getLeaseInfo().getRenewalIntervalInSecs(); int expBackOffBound=clientConfig.getHeartbeatExecutorExponentialBackOffBound(); logger.info(""Starting heartbeat executor: "" + ""renew interval is: {}"" renewalIntervalInSecs); scheduler.schedule(new TimedSupervisorTask(""heartbeat"" scheduler heartbeatExecutor renewalIntervalInSecs TimeUnit.SECONDS expBackOffBound new HeartbeatThread()) renewalIntervalInSecs TimeUnit.SECONDS); instanceInfoReplicator=new InstanceInfoReplicator(this instanceInfo clientConfig.getInstanceInfoReplicationIntervalSeconds() 2); statusChangeListener=new ApplicationInfoManager.StatusChangeListener(){ @Override public String getId(){ return ""statusChangeListener""; } @Override public void notify( StatusChangeEvent statusChangeEvent){ if (InstanceStatus.DOWN == statusChangeEvent.getStatus() || InstanceStatus.DOWN == statusChangeEvent.getPreviousStatus()) { logger.warn(""Saw local status change event {}"" statusChangeEvent); } else { logger.info(""Saw local status change event {}"" statusChangeEvent); } instanceInfoReplicator.onDemandUpdate(); } } ; if (clientConfig.shouldOnDemandUpdateStatusChange()) { applicationInfoManager.registerStatusChangeListener(statusChangeListener); } instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds()); } else { logger.info(""Not registering with Eureka server per configuration""); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,isFetchingRemoteRegionRegistries,private boolean  (){ return null != remoteRegionsToFetch.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,localRegistrySize,"@com.netflix.servo.annotations.Monitor(name=METRIC_REGISTRY_PREFIX + "" "" description=""Count of instances in the local registry"" type=DataSourceType.GAUGE) public int localRegistrySize(){ return registrySize; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,logTotalInstances,"private void  (){ if (logger.isDebugEnabled()) { int totInstances=0; for ( Application application : getApplications().getRegisteredApplications()) { totInstances+=application.getInstancesAsIsFromEureka().size(); } logger.debug(""The total number of all instances in the client now is {}"" totInstances); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,newBackupRegistryInstance,@Deprecated @Nullable protected BackupRegistry  () throws ClassNotFoundException  IllegalAccessException  InstantiationException { return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,notify,"@Override public void  (StatusChangeEvent statusChangeEvent){ if (InstanceStatus.DOWN == statusChangeEvent.getStatus() || InstanceStatus.DOWN == statusChangeEvent.getPreviousStatus()) { logger.warn(""Saw local status change event {}"" statusChangeEvent); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,onCacheRefreshed,protected void  (){ fireEvent(new CacheRefreshedEvent()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,onRemoteStatusChanged,protected void  (InstanceInfo.InstanceStatus oldStatus InstanceInfo.InstanceStatus newStatus){ fireEvent(new StatusChangeEvent(oldStatus newStatus)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,reconcileAndLogDifference,"private void  (Applications delta String reconcileHashCode) throws Throwable { logger.debug(""The Reconcile hashcodes do not match  client : {}  server : {}. Getting the full registry"" reconcileHashCode delta.getAppsHashCode()); RECONCILE_HASH_CODES_MISMATCH.increment(); long currentUpdateGeneration=fetchRegistryGeneration.get(); EurekaHttpResponse<Applications> httpResponse=clientConfig.getRegistryRefreshSingleVipAddress() == null ? eurekaTransport.queryClient.getApplications(remoteRegionsRef.get()) : eurekaTransport.queryClient.getVip(clientConfig.getRegistryRefreshSingleVipAddress() remoteRegionsRef.get()); Applications serverApps=httpResponse.getEntity(); if (serverApps == null) { logger.warn(""Cannot fetch full registry from the server; reconciliation failure""); return; } if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration currentUpdateGeneration + 1)) { localRegionApps.set(this.filterAndShuffle(serverApps)); getApplications().setVersion(delta.getVersion()); logger.debug(""The Reconcile hashcodes after complete sync up  client : {}  server : {}."" getApplications().getReconcileHashCode() delta.getAppsHashCode()); } else { logger.warn(""Not setting the applications map as another thread has advanced the update generation""); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,refreshInstanceInfo,"void  (){ applicationInfoManager.refreshDataCenterInfoIfRequired(); applicationInfoManager.refreshLeaseInfoIfRequired(); InstanceStatus status; try { status=getHealthCheckHandler().getStatus(instanceInfo.getStatus()); } catch ( Exception e) { logger.warn(""Exception from healthcheckHandler.getStatus  setting status to DOWN"" e); status=InstanceStatus.DOWN; } if (null != status) { applicationInfoManager.setInstanceStatus(status); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,DNSBasedAzToRegionMapper,public  (EurekaClientConfig clientConfig){ super(clientConfig); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DNSBasedAzToRegionMapper.java,getZonesForARegion,@Override protected Set<String>  (String region){ Map<String List<String>> zoneBasedDiscoveryUrlsFromRegion=EndpointUtils.getZoneBasedDiscoveryUrlsFromRegion(clientConfig region); if (null != zoneBasedDiscoveryUrlsFromRegion) { return zoneBasedDiscoveryUr
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,refreshRegistry,@VisibleForTesting void  (){ try { boolean isFetchingRemoteRegionRegistries=isFetchingRemoteRegionRegistries(); boolean remoteRegionsModified=false; String latestRemoteRegions=clientConfig.fetchRegistryForRemoteRegions(); if (null != latestRemoteRegions) 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,register,"boolean  () throws Throwable { logger.info(PREFIX + ""{}: registering service..."" appPathIdentifier); EurekaHttpResponse<Void> httpResponse; try { httpResponse=eurekaTransport.registrationClient.register(instanceInfo); } catch ( Exception e) { logger.warn(PREFIX + ""{} - registration failed {}"" appPathIdentifier e.getMessage() e); throw e; } if (logger.isInfoEnabled()) { logger.info(PREFIX + ""{} - registration status: {}"" appPathIdentifier httpResponse.getStatusCode()); } return httpResponse.getStatusCode() == 204; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,registerEventListener,@Override public void  (EurekaEventListener eventListener){ this.eventListeners.add(eventListener); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,registerHealthCheck,"@Override public void  (HealthCheckHandler healthCheckHandler){ if (instanceInfo == null) { logger.error(""Cannot register a healthcheck handler when instance info is null!""); } if (healthCheckHandler != null) { this.healthCheckHandler=healthCheckHandler; "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,registerHealthCheckCallback,"@Deprecated @Override public void  (HealthCheckCallback callback){ if (instanceInfo == null) { logger.error(""Cannot register a listener for instance info since it is null!""); } if (callback != null) { healthCheckHandler=new HealthCheckCallbackToHandlerBri"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,renew,"boolean  (){ EurekaHttpResponse<InstanceInfo> httpResponse; try { httpResponse=eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName() instanceInfo.getId() instanceInfo null); logger.debug(PREFIX + ""{} - Heartbeat status: {}"" appPathIdentifier httpResponse.getStatusCode()); if (httpResponse.getStatusCode() == 404) { REREGISTER_COUNTER.increment(); logger.info(PREFIX + ""{} - Re-registering apps/{}"" appPathIdentifier instanceInfo.getAppName()); long timestamp=instanceInfo.setIsDirtyWithTime(); boolean success=register(); if (success) { instanceInfo.unsetIsDirty(timestamp); } return success; } return httpResponse.getStatusCode() == 200; } catch ( Throwable e) { logger.error(PREFIX + ""{} - was unable to send heartbeat!"" appPathIdentifier e); return false; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,run,public void  (){ refreshRegistry(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,scheduleServerEndpointTask,"private void  (EurekaTransport eurekaTransport AbstractDiscoveryClientOptionalArgs args){ Collection<?> additionalFilters=args == null ? Collections.emptyList() : args.additionalFilters; EurekaJerseyClient providedJerseyClient=args == null ? null : args.eurekaJerseyClient; TransportClientFactories argsTransportClientFactories=null; if (args != null && args.getTransportClientFactories() != null) { argsTransportClientFactories=args.getTransportClientFactories(); } @SuppressWarnings(""rawtypes"") TransportClientFactories transportClientFactories=argsTransportClientFactories == null ? new Jersey1TransportClientFactories() : argsTransportClientFactories; Optional<SSLContext> sslContext=args == null ? Optional.empty() : args.getSSLContext(); Optional<HostnameVerifier> hostnameVerifier=args == null ? Optional.empty() : args.getHostnameVerifier(); eurekaTransport.transportClientFactory=providedJerseyClient == null ? transportClientFactories.newTransportClientFactory(clientConfig additionalFilters applicationInfoManager.getInfo() sslContext hostnameVerifier) : transportClientFactories.newTransportClientFactory(additionalFilters providedJerseyClient); ApplicationsResolver.ApplicationsSource applicationsSource=new ApplicationsResolver.ApplicationsSource(){ @Override public Applications getApplications( int stalenessThreshold  TimeUnit timeUnit){ long thresholdInMs=TimeUnit.MILLISECONDS.convert(stalenessThreshold timeUnit); long delay=getLastSuccessfulRegistryFetchTimePeriod(); if (delay > thresholdInMs) { logger.info(""Local registry is too stale for local lookup. Threshold:{}  actual:{}"" thresholdInMs delay); return null; } else { return localRegionApps.get(); } } } ; eurekaTransport.bootstrapResolver=EurekaHttpClients.newBootstrapResolver(clientConfig transportConfig eurekaTransport.transportClientFactory applicationInfoManager.getInfo() applicationsSource); if (clientConfig.shouldRegisterWithEureka()) { EurekaHttpClientFactory newRegistrationClientFactory=null; EurekaHttpClient newRegistrationClient=null; try { newRegistrationClientFactory=EurekaHttpClients.registrationClientFactory(eurekaTransport.bootstrapResolver eurekaTransport.transportClientFactory transportConfig); newRegistrationClient=newRegistrationClientFactory.newClient(); } catch ( Exception e) { logger.warn(""Transport initialization failure"" e); } eurekaTransport.registrationClientFactory=newRegistrationClientFactory; eurekaTransport.registrationClient=newRegistrationClient; } if (clientConfig.shouldFetchRegistry()) { EurekaHttpClientFactory newQueryClientFactory=null; EurekaHttpClient newQueryClient=null; try { newQueryClientFactory=EurekaHttpClients.queryClientFactory(eurekaTransport.bootstrapResolver eurekaTransport.transportClientFactory clientConfig transportConfig applicationInfoManager.getInfo() applicationsSource); newQueryClient=newQueryClientFactory.newClient(); } catch ( Exception e) { logger.warn(""Transport initialization failure"" e); } eurekaTransport.queryClientFactory=newQueryClientFactory; eurekaTransport.queryClient=newQueryClient; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,shutdown,"@PreDestroy @Override public synchronized void  (){ if (isShutdown.compareAndSet(false true)) { logger.info(""Shutting down DiscoveryClient ...""); if (statusChangeListener != null && applicationInfoManager != null) { applicationInfoManager.unregisterStatus"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,unregister,"void  (){ if (eurekaTransport != null && eurekaTransport.registrationClient != null) { try { logger.info(""Unregistering ...""); EurekaHttpResponse<Void> httpResponse=eurekaTransport.registrationClient.cancel(instanceInfo.getAppName() instanceInfo.getId()); logger.info(PREFIX + ""{} - deregister status: {}"" appPathIdentifier httpResponse.getStatusCode()); } catch ( Exception e) { logger.error(PREFIX + ""{} - de-registration failed{}"" appPathIdentifier e.getMessage() e); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,unregisterEventListener,@Override public boolean  (EurekaEventListener eventListener){ return this.eventListeners.remove(eventListener); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,updateDelta,"private void  (Applications delta){ int deltaCount=0; for ( Application app : delta.getRegisteredApplications()) { for ( InstanceInfo instance : app.getInstances()) { Applications applications=getApplications(); String instanceRegion=instanceRegionChecker.getInstanceRegion(instance); if (!instanceRegionChecker.isLocalRegion(instanceRegion)) { Applications remoteApps=remoteRegionVsApps.get(instanceRegion); if (null == remoteApps) { remoteApps=new Applications(); remoteRegionVsApps.put(instanceRegion remoteApps); } applications=remoteApps; } ++deltaCount; if (ActionType.ADDED.equals(instance.getActionType())) { Application existingApp=applications.getRegisteredApplications(instance.getAppName()); if (existingApp == null) { applications.addApplication(app); } logger.debug(""Added instance {} to the existing apps in region {}"" instance.getId() instanceRegion); applications.getRegisteredApplications(instance.getAppName()).addInstance(instance); } else if (ActionType.MODIFIED.equals(instance.getActionType())) { Application existingApp=applications.getRegisteredApplications(instance.getAppName()); if (existingApp == null) { applications.addApplication(app); } logger.debug(""Modified instance {} to the existing apps "" instance.getId()); applications.getRegisteredApplications(instance.getAppName()).addInstance(instance); } else if (ActionType.DELETED.equals(instance.getActionType())) { Application existingApp=applications.getRegisteredApplications(instance.getAppName()); if (existingApp == null) { applications.addApplication(app); } logger.debug(""Deleted instance {} to the existing apps "" instance.getId()); applications.getRegisteredApplications(instance.getAppName()).removeInstance(instance); } } } logger.debug(""The total number of instances fetched by the delta processor : {}"" deltaCount); getApplications().setVersion(delta.getVersion()); getApplications().shuffleInstances(clientConfig.shouldFilterOnlyUpInstances()); for ( Applications applications : remoteRegionVsApps.values()) { applications.setVersion(delta.getVersion()); applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances()); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\DiscoveryClient.java,updateInstanceRemoteStatus,private synchronized void  (){ InstanceInfo.InstanceStatus currentRemoteInstanceStatus=null; if (instanceInfo.getAppName() != null) { Application app=getApplication(instanceInfo.getAppName()); if (app != null) { InstanceInfo remoteInstanceInfo=app.getByInstanceId(instanceInfo.getId()); if (remoteInstanceInfo != null) { currentRemoteInstanceStatus=remoteInstanceInfo.getStatus(); } } } if (currentRemoteInstanceStatus == null) { currentRemoteInstanceStatus=InstanceInfo.InstanceStatus.UNKNOWN; } if (lastRemoteInstanceStatus != currentRemoteInstanceStatus) { onRemoteStatusChanged(lastRemoteInstanceStatus currentRemoteInstanceStatus); lastRemoteInstanceStatus=currentRemoteInstanceStatus; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,getCNamesFromTxtRecord,"public static Set<String>  (String discoveryDnsName) throws NamingException { Attributes attrs=dirContext.getAttributes(discoveryDnsName new String[]{TXT_RECORD_TYPE}); Attribute attr=attrs.get(TXT_RECORD_TYPE); String txtRecord=null; if (attr != null) { txtRecord=attr.get().toString(); } Set<String> cnamesSet=new TreeSet<String>(); if (txtRecord == null || txtRecord.trim().isEmpty()) { return cnamesSet; } String[] cnames=txtRecord.split("" ""); Collections.addAll(cnamesSet cnames); return cnamesSet; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,getDirContext,"public static DirContext  (){ Hashtable<String String> env=new Hashtable<String String>(); env.put(JAVA_NAMING_FACTORY_INITIAL DNS_NAMING_FACTORY); env.put(JAVA_NAMING_PROVIDER_URL DNS_PROVIDER_URL); try { return new InitialDirContext(env); } catch ( Throwable e) { throw new RuntimeException(""Cannot get dir context for some reason"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,isLocalOrIp,"private static boolean  (String currentHost){ if (""localhost"".equals(currentHost)) { return true; } if (""127.0.0.1"".equals(currentHost)) { return true; } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,resolve,"public static String  (String originalHost){ String currentHost=originalHost; if (isLocalOrIp(currentHost)) { return originalHost; } try { String targetHost=null; do { Attributes attrs=dirContext.getAttributes(currentHost new String[]{A_RECORD_TYPE CNAME_RECORD_TYPE}); Attribute attr=attrs.get(A_RECORD_TYPE); if (attr != null) { targetHost=attr.get().toString(); } attr=attrs.get(CNAME_RECORD_TYPE); if (attr != null) { currentHost=attr.get().toString(); } else { targetHost=currentHost; } } while (targetHost == null); return targetHost; } catch ( NamingException e) { logger.warn(""Cannot resolve eureka server address {}; returning original value {}"" currentHost originalHost e); return originalHost; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\DnsResolver.java,resolveARecord,@Nullable public static List<String>  (String rootDomainName){ if (isLocalOrIp(rootDomainName)) { return null; } try { Attributes attrs=dirContext.getAttributes(rootDomainName new String[]{A_RECORD_TYPE CNAME_RECORD_TYPE}); Attribute aRecord=attrs.get(A_R
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,InstanceInfoBasedUrlRandomizer,public  (InstanceInfo instanceInfo){ this.instanceInfo=instanceInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getDiscoveryServiceUrls,public static List<String>  (EurekaClientConfig clientConfig String zone ServiceUrlRandomizer randomizer){ boolean shouldUseDns=clientConfig.shouldUseDnsForFetchingServiceUrls(); if (shouldUseDns) { return getServiceUrlsFromDNS(clientConfig zone clientConfig.shouldPreferSameZoneEureka() randomizer); } return getServiceUrlsFromConfig(clientConfig zone clientConfig.shouldPreferSameZoneEureka()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getEC2DiscoveryUrlsFromZone,"public static Set<String>  (String dnsName DiscoveryUrlType type){ Set<String> eipsForZone=null; try { dnsName=""txt."" + dnsName; logger.debug(""The zone url to be looked up is {} :"" dnsName); Set<String> ec2UrlsForZone=DnsResolver.getCNamesFromTxtRecord(dnsName); for ( String ec2Url : ec2UrlsForZone) { logger.debug(""The eureka url for the dns name {} is {}"" dnsName ec2Url); ec2UrlsForZone.add(ec2Url); } if (DiscoveryUrlType.CNAME.equals(type)) { return ec2UrlsForZone; } eipsForZone=new TreeSet<String>(); for ( String cname : ec2UrlsForZone) { String[] tokens=cname.split(""\\.""); String ec2HostName=tokens[0]; String[] ips=ec2HostName.split(""-""); StringBuilder eipBuffer=new StringBuilder(); for (int ipCtr=1; ipCtr < 5; ipCtr++) { eipBuffer.append(ips[ipCtr]); if (ipCtr < 4) { eipBuffer.append("".""); } } eipsForZone.add(eipBuffer.toString()); } logger.debug(""The EIPS for {} is {} :"" dnsName eipsForZone); } catch ( Throwable e) { throw new RuntimeException(""Cannot get cnames bound to the region:"" + dnsName e); } return eipsForZone; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getRegion,public static String  (EurekaClientConfig clientConfig){ String region=clientConfig.getRegion(); if (region == null) { region=DEFAULT_REGION; } region=region.trim().toLowerCase(); return region; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getServiceUrlsFromConfig,"public static List<String>  (EurekaClientConfig clientConfig String instanceZone boolean preferSameZone){ List<String> orderedUrls=new ArrayList<String>(); String region=getRegion(clientConfig); String[] availZones=clientConfig.getAvailabilityZones(clientConfig.getRegion()); if (availZones == null || availZones.length == 0) { availZones=new String[1]; availZones[0]=DEFAULT_ZONE; } logger.debug(""The availability zone for the given region {} are {}"" region availZones); int myZoneOffset=getZoneOffset(instanceZone preferSameZone availZones); List<String> serviceUrls=clientConfig.getEurekaServerServiceUrls(availZones[myZoneOffset]); if (serviceUrls != null) { orderedUrls.addAll(serviceUrls); } int currentOffset=myZoneOffset == (availZones.length - 1) ? 0 : (myZoneOffset + 1); while (currentOffset != myZoneOffset) { serviceUrls=clientConfig.getEurekaServerServiceUrls(availZones[currentOffset]); if (serviceUrls != null) { orderedUrls.addAll(serviceUrls); } if (currentOffset == (availZones.length - 1)) { currentOffset=0; } else { currentOffset++; } } if (orderedUrls.size() < 1) { throw new IllegalArgumentException(""DiscoveryClient: invalid serviceUrl specified!""); } return orderedUrls; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getServiceUrlsFromDNS,"public static List<String>  (EurekaClientConfig clientConfig String instanceZone boolean preferSameZone ServiceUrlRandomizer randomizer){ String region=getRegion(clientConfig); Map<String List<String>> zoneDnsNamesMap=getZoneBasedDiscoveryUrlsFromRegion(clientConfig region); Set<String> availableZones=zoneDnsNamesMap.keySet(); List<String> zones=new ArrayList<String>(availableZones); if (zones.isEmpty()) { throw new RuntimeException(""No available zones configured for the instanceZone "" + instanceZone); } int zoneIndex=0; boolean zoneFound=false; for ( String zone : zones) { logger.debug(""Checking if the instance zone {} is the same as the zone from DNS {}"" instanceZone zone); if (preferSameZone) { if (instanceZone.equalsIgnoreCase(zone)) { zoneFound=true; } } else { if (!instanceZone.equalsIgnoreCase(zone)) { zoneFound=true; } } if (zoneFound) { logger.debug(""The zone index from the list {} that matches the instance zone {} is {}"" zones instanceZone zoneIndex); break; } zoneIndex++; } if (zoneIndex >= zones.size()) { if (logger.isWarnEnabled()) { logger.warn(""No match for the zone {} in the list of available zones {}"" instanceZone zones.toArray()); } } else { for (int i=0; i < zoneIndex; i++) { String zone=zones.remove(0); zones.add(zone); } } List<String> serviceUrls=new ArrayList<String>(); for ( String zone : zones) { for ( String zoneCname : zoneDnsNamesMap.get(zone)) { List<String> ec2Urls=new ArrayList<String>(getEC2DiscoveryUrlsFromZone(zoneCname DiscoveryUrlType.CNAME)); if (ec2Urls.size() > 1) { randomizer.randomize(ec2Urls); } for ( String ec2Url : ec2Urls) { String serviceUrl=""http://"" + ec2Url + "":""+ clientConfig.getEurekaServerPort()+ ""/""+ clientConfig.getEurekaServerURLContext()+ ""/""; logger.debug(""The EC2 url is {}"" serviceUrl); serviceUrls.add(serviceUrl); } } } String primaryServiceUrl=serviceUrls.remove(0); randomizer.randomize(serviceUrls); serviceUrls.add(0 primaryServiceUrl); if (logger.isDebugEnabled()) { logger.debug(""This client will talk to the following serviceUrls in order : {} "" (Object)serviceUrls.toArray()); } return serviceUrls; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getServiceUrlsMapFromConfig,"public static Map<String List<String>>  (EurekaClientConfig clientConfig String instanceZone boolean preferSameZone){ Map<String List<String>> orderedUrls=new LinkedHashMap<>(); String region=getRegion(clientConfig); String[] availZones=clientConfig.getAvailabilityZones(clientConfig.getRegion()); if (availZones == null || availZones.length == 0) { availZones=new String[1]; availZones[0]=DEFAULT_ZONE; } logger.debug(""The availability zone for the given region {} are {}"" region availZones); int myZoneOffset=getZoneOffset(instanceZone preferSameZone availZones); String zone=availZones[myZoneOffset]; List<String> serviceUrls=clientConfig.getEurekaServerServiceUrls(zone); if (serviceUrls != null) { orderedUrls.put(zone serviceUrls); } int currentOffset=myZoneOffset == (availZones.length - 1) ? 0 : (myZoneOffset + 1); while (currentOffset != myZoneOffset) { zone=availZones[currentOffset]; serviceUrls=clientConfig.getEurekaServerServiceUrls(zone); if (serviceUrls != null) { orderedUrls.put(zone serviceUrls); } if (currentOffset == (availZones.length - 1)) { currentOffset=0; } else { currentOffset++; } } if (orderedUrls.size() < 1) { throw new IllegalArgumentException(""DiscoveryClient: invalid serviceUrl specified!""); } return orderedUrls; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getZoneBasedDiscoveryUrlsFromRegion,"public static Map<String List<String>>  (EurekaClientConfig clientConfig String region){ String discoveryDnsName=null; try { discoveryDnsName=""txt."" + region + "".""+ clientConfig.getEurekaServerDNSName(); logger.debug(""The region url to be looked up is {} :"" discoveryDnsName); Set<String> zoneCnamesForRegion=new TreeSet<String>(DnsResolver.getCNamesFromTxtRecord(discoveryDnsName)); Map<String List<String>> zoneCnameMapForRegion=new TreeMap<String List<String>>(); for ( String zoneCname : zoneCnamesForRegion) { String zone=null; if (isEC2Url(zoneCname)) { throw new RuntimeException(""Cannot find the right DNS entry for "" + discoveryDnsName + "". ""+ ""Expected mapping of the format <aws_zone>.<domain_name>""); } else { String[] cnameTokens=zoneCname.split(""\\.""); zone=cnameTokens[0]; logger.debug(""The zoneName mapped to region {} is {}"" region zone); } List<String> zoneCnamesSet=zoneCnameMapForRegion.get(zone); if (zoneCnamesSet == null) { zoneCnamesSet=new ArrayList<String>(); zoneCnameMapForRegion.put(zone zoneCnamesSet); } zoneCnamesSet.add(zoneCname); } return zoneCnameMapForRegion; } catch ( Throwable e) { throw new RuntimeException(""Cannot get cnames bound to the region:"" + discoveryDnsName e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,getZoneOffset,"private static int  (String myZone boolean preferSameZone String[] availZones){ for (int i=0; i < availZones.length; i++) { if (myZone != null && (availZones[i].equalsIgnoreCase(myZone.trim()) == preferSameZone)) { return i; } } logger.warn(""DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - {} "" + "" preferSameZone - {}. Defaulting to {}"" myZone preferSameZone availZones[0]); return 0; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,isEC2Url,"private static boolean  (String zoneCname){ return zoneCname.startsWith(""ec2""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\endpoint\EndpointUtils.java,randomize,@Override public void  (List<String> urlList){ int listSize=0; if (urlList != null) { listSize=urlList.size(); } if ((instanceInfo == null) || (listSize == 0)) { return; } int instanceHashcode=instanceInfo.getHostName().hashCode(); if (instanceHashcode < 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaIdentityHeaderFilter.java,EurekaIdentityHeaderFilter,public  (AbstractEurekaIdentity authInfo){ this.authInfo=authInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaIdentityHeaderFilter.java,handle,@Override public ClientResponse  (ClientRequest cr) throws ClientHandlerException { if (authInfo != null) { cr.getHeaders().putSingle(AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY authInfo.getName()); cr.getHeaders().putSingle(AbstractEurekaIdentity.AUTH_VE
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,EurekaUpStatusResolver,@Inject public  (EurekaClient client EventBus eventBus){ this.eventBus=eventBus; this.client=client; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,getChangeCount,public long  (){ return counter.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,getStatus,public InstanceInfo.InstanceStatus  (){ return currentStatus; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,init,"@PostConstruct public void  (){ try { currentStatus=client.getInstanceRemoteStatus(); LOG.info(""Initial status set to {}"" currentStatus); eventBus.registerSubscriber(this); } catch ( InvalidSubscriberException e) { LOG.error(""Error registring for discover"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,onStatusChange,"@Subscribe public void  (StatusChangeEvent event){ LOG.info(""Eureka status changed from {} to {}"" event.getPreviousStatus() event.getStatus()); currentStatus=event.getStatus(); counter.incrementAndGet(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\EurekaUpStatusResolver.java,shutdown,@PreDestroy public void  (){ eventBus.unregisterSubscriber(this); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\guice\EurekaModule.java,configure,@Override protected void  (){ bind(ApplicationInfoManager.class).asEagerSingleton(); bind(EurekaInstanceConfig.class).toProvider(CloudInstanceConfigProvider.class).in(Scopes.SINGLETON); bind(EurekaClientConfig.class).toProvider(DefaultEurekaClientConfigPr
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\guice\EurekaModule.java,equals,@Override public boolean  (Object obj){ return obj != null && getClass().equals(obj.getClass()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\guice\EurekaModule.java,hashCode,@Override public int  (){ return getClass().hashCode(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,InstanceInfoReplicator," (DiscoveryClient discoveryClient InstanceInfo instanceInfo int replicationIntervalSeconds int burstSize){ this.discoveryClient=discoveryClient; this.instanceInfo=instanceInfo; this.scheduler=Executors.newScheduledThreadPool(1 new ThreadFactoryBuilder().setNameFormat(""DiscoveryClient-InstanceInfoReplicator-%d"").setDaemon(true).build()); this.scheduledPeriodicRef=new AtomicReference<Future>(); this.started=new AtomicBoolean(false); this.rateLimiter=new RateLimiter(TimeUnit.MINUTES); this.replicationIntervalSeconds=replicationIntervalSeconds; this.burstSize=burstSize; this.allowedRatePerMinute=60 * this.burstSize / this.replicationIntervalSeconds; logger.info(""InstanceInfoReplicator onDemand update allowed rate per min is {}"" allowedRatePerMinute); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,onDemandUpdate,"public boolean  (){ if (rateLimiter.acquire(burstSize allowedRatePerMinute)) { if (!scheduler.isShutdown()) { scheduler.submit(new Runnable(){ @Override public void run(){ logger.debug(""Executing on-demand update of local InstanceInfo""); Future latestPeriodic=scheduledPeriodicRef.get(); if (latestPeriodic != null && !latestPeriodic.isDone()) { logger.debug(""Canceling the latest scheduled update  it will be rescheduled at the end of on demand update""); latestPeriodic.cancel(false); } InstanceInfoReplicator.this.run(); } } ); return true; } else { logger.warn(""Ignoring onDemand update due to stopped scheduler""); return false; } } else { logger.warn(""Ignoring onDemand update due to rate limiter""); return false; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,run,"public void  (){ try { discoveryClient.refreshInstanceInfo(); Long dirtyTimestamp=instanceInfo.isDirtyWithTime(); if (dirtyTimestamp != null) { discoveryClient.register(); instanceInfo.unsetIsDirty(dirtyTimestamp); } } catch ( Throwable t) { logger.warn(""There was a problem with the instance info replicator"" t); } finally { Future next=scheduler.schedule(this replicationIntervalSeconds TimeUnit.SECONDS); scheduledPeriodicRef.set(next); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,shutdownAndAwaitTermination,"private void  (ExecutorService pool){ pool.shutdown(); try { if (!pool.awaitTermination(3 TimeUnit.SECONDS)) { pool.shutdownNow(); } } catch ( InterruptedException e) { logger.warn(""InstanceInfoReplicator stop interrupted""); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,start,public void  (int initialDelayMs){ if (started.compareAndSet(false true)) { instanceInfo.setIsDirty(); Future next=scheduler.schedule(this initialDelayMs TimeUnit.SECONDS); scheduledPeriodicRef.set(next); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceInfoReplicator.java,stop,public void  (){ shutdownAndAwaitTermination(scheduler); started.set(false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\internal\util\AmazonInfoUtils.java,readEc2MetadataUrl,public static String  (MetaDataKey metaDataKey URL url int connectionTimeoutMs int readTimeoutMs) throws IOException { HttpURLConnection uc=(HttpURLConnection)url.openConnection(); uc.setConnectTimeout(connectionTimeoutMs); uc.setReadTimeout(readTimeoutMs); if (uc.getResponseCode() != HttpURLConnection.HTTP_OK) { BufferedReader br=new BufferedReader(new InputStreamReader(uc.getErrorStream())); try { while (br.readLine() != null) { } } finally { br.close(); } } else { return metaDataKey.read(uc.getInputStream()); } return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,InstanceRegionChecker, (AzToRegionMapper azToRegionMapper String localRegion){ this.azToRegionMapper=azToRegionMapper; this.localRegion=localRegion; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,getAzToRegionMapper,public AzToRegionMapper  (){ return azToRegionMapper; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,getInstanceRegion,"@Nullable public String  (InstanceInfo instanceInfo){ if (instanceInfo.getDataCenterInfo() == null || instanceInfo.getDataCenterInfo().getName() == null) { logger.warn(""Cannot get region for instance id:{}  app:{} as dataCenterInfo is null. Returning loca"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,getLocalRegion,public String  (){ return localRegion; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InstanceRegionChecker.java,isLocalRegion,public boolean  (@Nullable String instanceRegion){ return null == instanceRegion || instanceRegion.equals(localRegion); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\internal\util\Archaius1Utils.java,initConfig,"public static DynamicPropertyFactory  (String configName){ DynamicPropertyFactory configInstance=DynamicPropertyFactory.getInstance(); DynamicStringProperty EUREKA_PROPS_FILE=configInstance.getStringProperty(""eureka.client.props"" configName); String env=ConfigurationManager.getConfigInstance().getString(EUREKA_ENVIRONMENT ""test""); ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_ENVIRONMENT env); String eurekaPropsFile=EUREKA_PROPS_FILE.get(); try { ConfigurationManager.loadCascadedPropertiesFromResources(eurekaPropsFile); } catch ( IOException e) { logger.warn(""Cannot find the properties specified : {}. This may be okay if there are other environment "" + ""specific properties or the configuration is installed with a different mechanism."" eurekaPropsFile); } return configInstance; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\NotImplementedRegistryImpl.java,fetchRegistry,@Override public Applications  (String[] includeRemoteRegions){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java,PropertyBasedAzToRegionMapper,public  (EurekaClientConfig clientConfig){ super(clientConfig); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\PropertyBasedAzToRegionMapper.java,getZonesForARegion,@Override protected Set<String>  (String region){ return new HashSet<String>(Arrays.asList(clientConfig.getAvailabilityZones(region))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InternalEurekaStatusModule.java,configure,@Override protected void  (){ bind(new TypeLiteral<Supplier<Boolean>>(){ } ).toProvider(UpStatusProvider.class); bind(new TypeLiteral<Supplier<Boolean>>(){ } ).toProvider(DownStatusProvider.class); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\InternalEurekaStatusModule.java,get,@Override public Boolean  (){ return !resolver.getStatus().equals(InstanceInfo.InstanceStatus.UP); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProvider.java,get,@Override public synchronized EurekaClientConfig  (){ if (config == null) { config=(namespace == null) ? new DefaultEurekaClientConfig() : new DefaultEurekaClientConfig(namespace); DiscoveryManager.getInstance().setEurekaClientConfig(config); } return con
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,Applications,"@JsonCreator public  (@JsonProperty(""appsHashCode"") String appsHashCode @JsonProperty(""versionDelta"") Long versionDelta @JsonProperty(""application"") List<Application> registeredApplications){ this.applications=new ConcurrentLinkedQueue<Application>(); thi"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,addApplication,public void  (Application app){ appNameApplicationMap.put(app.getName().toUpperCase(Locale.ROOT) app); addInstancesToVIPMaps(app this.virtualHostNameAppMap this.secureVirtualHostNameAppMap); applications.add(app); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,addInstanceToMap,"private void  (InstanceInfo info String vipAddresses Map<String VipIndexSupport> vipMap){ if (vipAddresses != null) { String[] vipAddressArray=vipAddresses.toUpperCase(Locale.ROOT).split("" ""); for ( String vipAddress : vipAddressArray) { VipIndexSupport vis=vipMap.computeIfAbsent(vipAddress k -> new VipIndexSupport()); vis.instances.add(info); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,addInstancesToVIPMaps,private void  (Application app Map<String VipIndexSupport> virtualHostNameAppMap Map<String VipIndexSupport> secureVirtualHostNameAppMap){ for ( InstanceInfo info : app.getInstances()) { String vipAddresses=info.getVIPAddress(); if (vipAddresses != null) { addInstanceToMap(info vipAddresses virtualHostNameAppMap); } String secureVipAddresses=info.getSecureVipAddress(); if (secureVipAddresses != null) { addInstanceToMap(info secureVipAddresses secureVirtualHostNameAppMap); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getAppsHashCode,@JsonIgnore public String  (){ return this.appsHashCode; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getInstancesBySecureVirtualHostName,public List<InstanceInfo>  (String secureVirtualHostName){ return Optional.ofNullable(this.secureVirtualHostNameAppMap.get(secureVirtualHostName.toUpperCase(Locale.ROOT))).map(VipIndexSupport::getVipList).map(AtomicReference::get).orElseGet(Collections::emptyList); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getInstancesByVirtualHostName,public List<InstanceInfo>  (String virtualHostName){ return Optional.ofNullable(this.virtualHostNameAppMap.get(virtualHostName.toUpperCase(Locale.ROOT))).map(VipIndexSupport::getVipList).map(AtomicReference::get).orElseGet(Collections::emptyList); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getNextIndex,public AtomicLong  (String virtualHostname boolean secure){ Map<String VipIndexSupport> index=(secure) ? secureVirtualHostNameAppMap : virtualHostNameAppMap; return Optional.ofNullable(index.get(virtualHostname.toUpperCase(Locale.ROOT))).map(VipIndexSupport::getRoundRobinIndex).orElse(null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getReconcileHashCode,public static String  (Map<String AtomicInteger> instanceCountMap){ StringBuilder reconcileHashCode=new StringBuilder(75); for ( Map.Entry<String AtomicInteger> mapEntry : instanceCountMap.entrySet()) { reconcileHashCode.append(mapEntry.getKey()).append(STATUS_DELIMITER).append(mapEntry.getValue().get()).append(STATUS_DELIMITER); } return reconcileHashCode.toString(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getRegisteredApplications,public Application  (String appName){ return appNameApplicationMap.get(appName.toUpperCase(Locale.ROOT)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getRoundRobinIndex,public AtomicLong  (){ return roundRobinIndex; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getVersion,@Deprecated @JsonIgnore public Long  (){ return this.versionDelta; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,getVipList,public AtomicReference<List<InstanceInfo>>  (){ return vipList; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,populateInstanceCountMap,public void  (Map<String AtomicInteger> instanceCountMap){ for ( Application app : this.getRegisteredApplications()) { for ( InstanceInfo info : app.getInstancesAsIsFromEureka()) { AtomicInteger instanceCount=instanceCountMap.computeIfAbsent(info.getStatus().name() k -> new AtomicInteger(0)); instanceCount.incrementAndGet(); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,setAppsHashCode,public void  (String hashCode){ this.appsHashCode=hashCode; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,setVersion,@Deprecated public void  (Long version){ this.versionDelta=version; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffleAndFilterInstances,private void  (Map<String VipIndexSupport> srcMap boolean filterUpInstances){ Random shuffleRandom=new Random(); for ( Map.Entry<String VipIndexSupport> entries : srcMap.entrySet()) { VipIndexSupport vipIndexSupport=entries.getValue(); AbstractQueue<InstanceInfo> vipInstances=vipIndexSupport.instances; final List<InstanceInfo> filteredInstances; if (filterUpInstances) { filteredInstances=vipInstances.stream().filter(ii -> ii.getStatus() == InstanceStatus.UP).collect(Collectors.toCollection(() -> new ArrayList<>(vipInstances.size()))); } else { filteredInstances=new ArrayList<InstanceInfo>(vipInstances); } Collections.shuffle(filteredInstances shuffleRandom); vipIndexSupport.vipList.set(filteredInstances); vipIndexSupport.roundRobinIndex.set(0); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffleAndIndexInstances,public void  (Map<String Applications> remoteRegionsRegistry EurekaClientConfig clientConfig InstanceRegionChecker instanceRegionChecker){ shuffleInstances(clientConfig.shouldFilterOnlyUpInstances() true remoteRegionsRegistry clientConfig instanceRegionChecker); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,shuffleInstances,private void  (boolean filterUpInstances boolean indexByRemoteRegions @Nullable Map<String Applications> remoteRegionsRegistry @Nullable EurekaClientConfig clientConfig @Nullable InstanceRegionChecker instanceRegionChecker){ Map<String VipIndexSupport> secureVirtualHostNameAppMap=new HashMap<>(); Map<String VipIndexSupport> virtualHostNameAppMap=new HashMap<>(); for ( Application application : appNameApplicationMap.values()) { if (indexByRemoteRegions) { application.shuffleAndStoreInstances(remoteRegionsRegistry clientConfig instanceRegionChecker); } else { application.shuffleAndStoreInstances(filterUpInstances); } this.addInstancesToVIPMaps(application virtualHostNameAppMap secureVirtualHostNameAppMap); } shuffleAndFilterInstances(virtualHostNameAppMap filterUpInstances); shuffleAndFilterInstances(secureVirtualHostNameAppMap filterUpInstances); this.virtualHostNameAppMap.putAll(virtualHostNameAppMap); this.virtualHostNameAppMap.keySet().retainAll(virtualHostNameAppMap.keySet()); this.secureVirtualHostNameAppMap.putAll(secureVirtualHostNameAppMap); this.secureVirtualHostNameAppMap.keySet().retainAll(secureVirtualHostNameAppMap.keySet()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Applications.java,size,public int  (){ return applications.stream().mapToInt(Application::size).sum(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,DiscoveryJerseyProvider,"public  (EncoderWrapper jsonEncoder DecoderWrapper jsonDecoder){ this.jsonEncoder=jsonEncoder == null ? CodecWrappers.getEncoder(LegacyJacksonJson.class) : jsonEncoder; this.jsonDecoder=jsonDecoder == null ? CodecWrappers.getDecoder(LegacyJacksonJson.class) : jsonDecoder; LOGGER.info(""Using JSON encoding codec {}"" this.jsonEncoder.codecName()); LOGGER.info(""Using JSON decoding codec {}"" this.jsonDecoder.codecName()); if (jsonEncoder instanceof CodecWrappers.JacksonJsonMini) { throw new UnsupportedOperationException(""Encoder: "" + jsonEncoder.codecName() + ""is not supported for the client""); } this.xmlEncoder=CodecWrappers.getEncoder(CodecWrappers.XStreamXml.class); this.xmlDecoder=CodecWrappers.getDecoder(CodecWrappers.XStreamXml.class); LOGGER.info(""Using XML encoding codec {}"" this.xmlEncoder.codecName()); LOGGER.info(""Using XML decoding codec {}"" this.xmlDecoder.codecName()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,closeInputOnError,"private static void  (InputStream inputStream){ if (inputStream != null) { LOGGER.error(""Unexpected error occurred during de-serialization of discovery data  done connection cleanup""); try { inputStream.close(); } catch ( IOException e) { LOGGER.debug(""Cannot close input"" e); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,createErrorReply,"private static Response  (int status String errorMessage MediaType mediaType){ String message; if (MediaType.APPLICATION_JSON_TYPE.equals(mediaType)) { message=""{\""error\"": \"""" + errorMessage + ""\""}""; } else { message=""<error><message>"" + errorMessage + ""</message></error>""; } return Response.status(status).entity(message).type(mediaType).build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,getSize,@Override public long  (Object serializableObject Class serializableClass Type type Annotation[] annotations MediaType mediaType){ return -1; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,isReadable,@Override public boolean  (Class serializableClass Type type Annotation[] annotations MediaType mediaType){ return isSupportedMediaType(mediaType) && isSupportedCharset(mediaType) && isSupportedEntity(serializableClass); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,isSupportedCharset,"private static boolean  (MediaType mediaType){ Map<String String> parameters=mediaType.getParameters(); if (parameters == null || parameters.isEmpty()) { return true; } String charset=parameters.get(""charset""); return charset == null || ""UTF-8"".equalsIgnoreCase(charset) || ""ISO-8859-1"".equalsIgnoreCase(charset); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,isSupportedEntity,"private static boolean  (Class<?> entityType){ try { Annotation annotation=entityType.getAnnotation(Serializer.class); if (annotation != null) { return true; } } catch ( Throwable th) { LOGGER.warn(""Exception in checking for annotations"" th); } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,isSupportedMediaType,private boolean  (MediaType mediaType){ if (MediaType.APPLICATION_JSON_TYPE.isCompatible(mediaType)) { return true; } if (MediaType.APPLICATION_XML_TYPE.isCompatible(mediaType)) { return xmlDecoder != null; } return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,isWriteable,@Override public boolean  (Class serializableClass Type type Annotation[] annotations MediaType mediaType){ return isSupportedMediaType(mediaType) && isSupportedEntity(serializableClass); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,readFrom,@Override public Object  (Class serializableClass Type type Annotation[] annotations MediaType mediaType MultivaluedMap headers InputStream inputStream) throws IOException { DecoderWrapper decoder; if (MediaType.MEDIA_TYPE_WILDCARD.equals(mediaType.getSub
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\provider\DiscoveryJerseyProvider.java,writeTo,"@Override public void  (Object serializableObject Class serializableClass Type type Annotation[] annotations MediaType mediaType MultivaluedMap headers OutputStream outputStream) throws IOException  WebApplicationException { EncoderWrapper encoder=""json""."
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,Application,"@JsonCreator public  (@JsonProperty(""name"") String name @JsonProperty(""instance"") List<InstanceInfo> instances){ this(name); for ( InstanceInfo instanceInfo : instances) { addInstance(instanceInfo); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,_shuffleAndStoreInstances,private void  (boolean filterUpInstances boolean indexByRemoteRegions @Nullable Map<String Applications> remoteRegionsRegistry @Nullable EurekaClientConfig clientConfig @Nullable InstanceRegionChecker instanceRegionChecker){ List<InstanceInfo> instanceInfoList; synchronized (instances) { instanceInfoList=new ArrayList<InstanceInfo>(instances); } boolean remoteIndexingActive=indexByRemoteRegions && null != instanceRegionChecker && null != clientConfig && null != remoteRegionsRegistry; if (remoteIndexingActive || filterUpInstances) { Iterator<InstanceInfo> it=instanceInfoList.iterator(); while (it.hasNext()) { InstanceInfo instanceInfo=it.next(); if (filterUpInstances && InstanceStatus.UP != instanceInfo.getStatus()) { it.remove(); } else if (remoteIndexingActive) { String instanceRegion=instanceRegionChecker.getInstanceRegion(instanceInfo); if (!instanceRegionChecker.isLocalRegion(instanceRegion)) { Applications appsForRemoteRegion=remoteRegionsRegistry.get(instanceRegion); if (null == appsForRemoteRegion) { appsForRemoteRegion=new Applications(); remoteRegionsRegistry.put(instanceRegion appsForRemoteRegion); } Application remoteApp=appsForRemoteRegion.getRegisteredApplications(instanceInfo.getAppName()); if (null == remoteApp) { remoteApp=new Application(instanceInfo.getAppName()); appsForRemoteRegion.addApplication(remoteApp); } remoteApp.addInstance(instanceInfo); this.removeInstance(instanceInfo false); it.remove(); } } } } Collections.shuffle(instanceInfoList shuffleRandom); this.shuffledInstances.set(instanceInfoList); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,addInstance,public void  (InstanceInfo i){ instancesMap.put(i.getId() i); synchronized (instances) { instances.remove(i); instances.add(i); isDirty=true; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,getByInstanceId,public InstanceInfo  (String id){ return instancesMap.get(id); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,getInstances,"@JsonProperty(""instance"") public List<InstanceInfo>  (){ return Optional.ofNullable(shuffledInstances.get()).orElseGet(this::getInstancesAsIsFromEureka); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,getInstancesAsIsFromEureka,@JsonIgnore public List<InstanceInfo>  (){ synchronized (instances) { return new ArrayList<InstanceInfo>(this.instances); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,removeInstance,private void  (InstanceInfo i boolean markAsDirty){ instancesMap.remove(i.getId()); synchronized (instances) { instances.remove(i); if (markAsDirty) { isDirty=true; } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,setName,public void  (String name){ this.name=StringCache.intern(name); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,shuffleAndStoreInstances,public void  (Map<String Applications> remoteRegionsRegistry EurekaClientConfig clientConfig InstanceRegionChecker instanceRegionChecker){ _shuffleAndStoreInstances(clientConfig.shouldFilterOnlyUpInstances() true remoteRegionsRegistry clientConfig instanceRegionChecker); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,size,public int  (){ return instances.size(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Application.java,toString,"@Override public String  (){ return ""Application [name="" + name + ""  isDirty=""+ isDirty+ ""  instances=""+ instances+ ""  shuffledInstances=""+ shuffledInstances+ ""  instancesMap=""+ instancesMap+ ""]""; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\dns\DnsServiceImpl.java,resolveARecord,@Nullable @Override public List<String>  (String rootDomainName){ return DnsResolver.resolveARecord(rootDomainName); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\dns\DnsServiceImpl.java,resolveIp,@Override public String  (String hostName){ return DnsResolver.resolve(hostName); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,MonitoredConnectionManager,public  (String name SchemeRegistry schreg){ super(schreg); initMonitors(name); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,createConnectionPool,@Override protected ConnPoolByRoute  (long connTTL TimeUnit connTTLTimeUnit){ return new NamedConnectionPool(connOperator connPerRoute 20 connTTL connTTLTimeUnit); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,getConnectionPool,@VisibleForTesting ConnPoolByRoute  (){ return this.pool; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,initMonitors,void  (String name){ if (this.pool instanceof NamedConnectionPool) { ((NamedConnectionPool)this.pool).initMonitors(name); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\MonitoredConnectionManager.java,requestConnection,@Override public ClientConnectionRequest  (HttpRoute route Object state){ return super.requestConnection(route state); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolver.java,ApplicationsResolver,public  (EurekaClientConfig clientConfig EurekaTransportConfig transportConfig ApplicationsSource applicationsSource String vipAddress){ this.clientConfig=clientConfig; this.transportConfig=transportConfig; this.applicationsSource=applicationsSource; this.vipAddress=vipAddress; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,Pair,public  (E1 first E2 second){ this.first=first; this.second=second; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,first,public E1  (){ return first; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,second,public E2  (){ return second; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,setFirst,public void  (E1 first){ this.first=first; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\Pair.java,setSecond,public void  (E2 second){ this.second=second; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,AsyncResolver," (String name ClusterResolver<T> delegate List<T> initialValue int executorThreadPoolSize int refreshIntervalMs int warmUpTimeoutMs){ this.name=name; this.delegate=delegate; this.refreshIntervalMs=refreshIntervalMs; this.warmUpTimeoutMs=warmUpTimeoutMs; this.executorService=Executors.newScheduledThreadPool(1 new ThreadFactoryBuilder().setNameFormat(""AsyncResolver-"" + name + ""-%d"").setDaemon(true).build()); this.threadPoolExecutor=new ThreadPoolExecutor(1 executorThreadPoolSize 0 TimeUnit.SECONDS new SynchronousQueue<Runnable>() new ThreadFactoryBuilder().setNameFormat(""AsyncResolver-"" + name + ""-executor-%d"").setDaemon(true).build()); this.backgroundTask=new TimedSupervisorTask(this.getClass().getSimpleName() executorService threadPoolExecutor refreshIntervalMs TimeUnit.MILLISECONDS 5 updateTask); this.resultsRef=new AtomicReference<>(initialValue); Monitors.registerObject(name this); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,doWarmUp,"boolean  (){ Future future=null; try { future=threadPoolExecutor.submit(updateTask); future.get(warmUpTimeoutMs TimeUnit.MILLISECONDS); return true; } catch ( Exception e) { logger.warn(""Best effort warm up failed"" e); } finally { if (future != null) { future.cancel(true); } } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,getClusterEndpoints,@Override public List<T>  (){ long delay=refreshIntervalMs; if (warmedUp.compareAndSet(false true)) { if (!doWarmUp()) { delay=0; } } if (scheduled.compareAndSet(false true)) { scheduleTask(delay); } return resultsRef.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,getEndpointsSize,"@Monitor(name=METRIC_RESOLVER_PREFIX + ""endpointsSize"" description=""How many records are the in the endpoints ref"" type=DataSourceType.GAUGE) public long  (){ return resultsRef.get().size(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,getLastLoadTimestamp,"@Monitor(name=METRIC_RESOLVER_PREFIX + ""lastLoadTimestamp"" description=""How much time has passed from last successful async load"" type=DataSourceType.GAUGE) public long  (){ return lastLoadTimestamp < 0 ? 0 : System.currentTimeMillis() - lastLoadTimestamp"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,getRegion,@Override public String  (){ return delegate.getRegion(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,run,"@Override public void  (){ try { List<T> newList=delegate.getClusterEndpoints(); if (newList != null) { resultsRef.getAndSet(newList); lastLoadTimestamp=System.currentTimeMillis(); } else { logger.warn(""Delegate returned null list of cluster endpoints""); "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,scheduleTask,void  (long delay){ executorService.schedule(backgroundTask delay TimeUnit.MILLISECONDS); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\AsyncResolver.java,shutdown,@Override public void  (){ if (Monitors.isObjectRegistered(name this)) { Monitors.unregisterObject(name this); } executorService.shutdownNow(); threadPoolExecutor.shutdownNow(); backgroundTask.cancel(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,NamedConnectionPool, (ClientConnectionOperator operator HttpParams params){ super(operator params); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,createEntry,@Override protected BasicPoolEntry  (RouteSpecificPool rospl ClientConnectionOperator op){ createEntryCounter.increment(); Stopwatch stopWatch=creationTimer.start(); try { return super.createEntry(rospl op); } finally { stopWatch.stop(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,deleteEntry,@Override protected void  (BasicPoolEntry entry){ deleteCounter.increment(); super.deleteEntry(entry); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,freeEntry,@Override public void  (BasicPoolEntry entry boolean reusable long validDuration TimeUnit timeUnit){ releaseCounter.increment(); super.freeEntry(entry reusable validDuration timeUnit); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,getConnectionCount,"@Monitor(name=""connectionCount"" type=DataSourceType.GAUGE) public int  (){ return this.getConnectionsInPool(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,getCreatedEntryCount,public final long  (){ return createEntryCounter.getValue().longValue(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,getDeleteCount,public final long  (){ return deleteCounter.getValue().longValue(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,getEntryBlocking,@Override protected BasicPoolEntry  (HttpRoute route Object state long timeout TimeUnit tunit WaitingThreadAborter aborter) throws ConnectionPoolTimeoutException  InterruptedException { Stopwatch stopWatch=requestTimer.start(); try { return super.getEntry
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,getFreeEntry,@Override protected BasicPoolEntry  (RouteSpecificPool rospl Object state){ BasicPoolEntry entry=super.getFreeEntry(rospl state); if (entry != null) { freeEntryCounter.increment(); } return entry; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,getFreeEntryCount,public final long  (){ return freeEntryCounter.getValue().longValue(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,getReleaseCount,public final long  (){ return releaseCounter.getValue().longValue(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,getRequestsCount,public final long  (){ return requestCounter.getValue().longValue(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,initMonitors,"void  (String name){ Preconditions.checkNotNull(name); freeEntryCounter=Monitors.newCounter(name + ""_Reuse""); createEntryCounter=Monitors.newCounter(name + ""_CreateNew""); requestCounter=Monitors.newCounter(name + ""_Request""); releaseCounter=Monitors.newCounter(name + ""_Release""); deleteCounter=Monitors.newCounter(name + ""_Delete""); requestTimer=Monitors.newTimer(name + ""_RequestConnectionTimer"" TimeUnit.MILLISECONDS); creationTimer=Monitors.newTimer(name + ""_CreateConnectionTimer"" TimeUnit.MILLISECONDS); this.name=name; Monitors.registerObject(name this); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,requestPoolEntry,@Override public PoolEntryRequest  (HttpRoute route Object state){ requestCounter.increment(); return super.requestPoolEntry(route state); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\NamedConnectionPool.java,shutdown,@Override public void  (){ super.shutdown(); if (Monitors.isObjectRegistered(name this)) { Monitors.unregisterObject(name this); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,AwsEndpoint,public  (String hostName int port boolean isSecure String relativeUri String region String zone){ super(hostName port isSecure relativeUri); this.region=region; this.zone=zone; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,createForServerList,public static List<AwsEndpoint>  (List<String> hostNames int port boolean isSecure String relativeUri String region String zone){ if (hostNames.isEmpty()) { return Collections.emptyList(); } List<AwsEndpoint> awsEndpoints=new ArrayList<>(hostNames.size()); for ( String hostName : hostNames) { awsEndpoints.add(new AwsEndpoint(hostName port isSecure relativeUri region zone)); } return awsEndpoints; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (!(o instanceof AwsEndpoint)) return false; if (!super.equals(o)) return false; AwsEndpoint that=(AwsEndpoint)o; if (region != null ? !region.equals(that.region) : that.region != null) r
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,getRegion,public String  (){ return region; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,getZone,public String  (){ return zone; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,hashCode,@Override public int  (){ int result=super.hashCode(); result=31 * result + (zone != null ? zone.hashCode() : 0); result=31 * result + (region != null ? region.hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\AwsEndpoint.java,toString,"@Override public String  (){ return ""AwsEndpoint{ serviceUrl='"" + serviceUrl + '\''+ ""  region='""+ region+ '\''+ ""  zone='""+ zone+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,ConfigClusterResolver,public  (EurekaClientConfig clientConfig InstanceInfo myInstanceInfo){ this.clientConfig=clientConfig; this.myInstanceInfo=myInstanceInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,getClusterEndpoints,"@Override public List<AwsEndpoint>  (){ if (clientConfig.shouldUseDnsForFetchingServiceUrls()) { if (logger.isInfoEnabled()) { logger.info(""Resolving eureka endpoints via DNS: {}"" getDNSName()); } return getClusterEndpointsFromDns(); } else { logger.info("
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,getClusterEndpointsFromConfig,"private List<AwsEndpoint>  (){ String[] availZones=clientConfig.getAvailabilityZones(clientConfig.getRegion()); String myZone=InstanceInfo.getZone(availZones myInstanceInfo); Map<String List<String>> serviceUrls=EndpointUtils.getServiceUrlsMapFromConfig(clientConfig myZone clientConfig.shouldPreferSameZoneEureka()); List<AwsEndpoint> endpoints=new ArrayList<>(); for ( String zone : serviceUrls.keySet()) { for ( String url : serviceUrls.get(zone)) { try { endpoints.add(new AwsEndpoint(url getRegion() zone)); } catch ( Exception ignore) { logger.warn(""Invalid eureka server URI: {}; removing from the server pool"" url); } } } logger.debug(""Config resolved to {}"" endpoints); if (endpoints.isEmpty()) { logger.error(""Cannot resolve to any endpoints from provided configuration: {}"" serviceUrls); } return endpoints; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,getClusterEndpointsFromDns,"private List<AwsEndpoint>  (){ String discoveryDnsName=getDNSName(); int port=Integer.parseInt(clientConfig.getEurekaServerPort()); DnsTxtRecordClusterResolver dnsResolver=new DnsTxtRecordClusterResolver(getRegion() discoveryDnsName true port false clientConfig.getEurekaServerURLContext()); List<AwsEndpoint> endpoints=dnsResolver.getClusterEndpoints(); if (endpoints.isEmpty()) { logger.error(""Cannot resolve to any endpoints for the given dnsName: {}"" discoveryDnsName); } return endpoints; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,getDNSName,"private String  (){ return ""txt."" + getRegion() + '.'+ clientConfig.getEurekaServerDNSName(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolver.java,getRegion,@Override public String  (){ return clientConfig.getRegion(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,DnsTxtRecordClusterResolver,public  (String region String rootClusterDNS boolean extractZoneFromDNS int port boolean isSecure String relativeUri){ this.region=region; this.rootClusterDNS=rootClusterDNS; this.extractZoneFromDNS=extractZoneFromDNS; this.port=port; this.isSecure=isSecure; this.relativeUri=relativeUri; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,getClusterEndpoints,"@Override public List<AwsEndpoint>  (){ List<AwsEndpoint> eurekaEndpoints=resolve(region rootClusterDNS extractZoneFromDNS port isSecure relativeUri); logger.debug(""Resolved {} to {}"" rootClusterDNS eurekaEndpoints); return eurekaEndpoints; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,getRegion,@Override public String  (){ return region; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\DnsTxtRecordClusterResolver.java,resolve,"private static Set<String>  (String rootClusterDNS) throws NamingException { Set<String> result; try { result=DnsResolver.getCNamesFromTxtRecord(rootClusterDNS); if (!rootClusterDNS.startsWith(""txt."")) { result=DnsResolver.getCNamesFromTxtRecord(""txt."" + rootClusterDNS); } } catch ( NamingException e) { if (!rootClusterDNS.startsWith(""txt."")) { result=DnsResolver.getCNamesFromTxtRecord(""txt."" + rootClusterDNS); } else { throw e; } } return result; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,EurekaHttpResolver, (EurekaClientConfig clientConfig EurekaTransportConfig transportConfig EurekaHttpClientFactory clientFactory String vipAddress){ this.clientConfig=clientConfig; this.transportConfig=transportConfig; this.clientFactory=clientFactory; this.vipAddress=vipAddress; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,getClusterEndpoints,@Override public List<AwsEndpoint>  (){ List<AwsEndpoint> result=new ArrayList<>(); EurekaHttpClient client=null; try { client=clientFactory.newClient(); EurekaHttpResponse<Applications> response=client.getVip(vipAddress); if (validResponse(response)) { A
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,getRegion,@Override public String  (){ return clientConfig.getRegion(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolver.java,validResponse,private <T>boolean  (EurekaHttpResponse<T> response){ if (response == null) { return false; } int responseCode=response.getStatusCode(); return responseCode >= 200 && responseCode < 300; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,ZoneAffinityClusterResolver,public  (ClusterResolver<AwsEndpoint> delegate String myZone boolean zoneAffinity){ this.delegate=delegate; this.myZone=myZone; this.zoneAffinity=zoneAffinity; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,getClusterEndpoints,@Override public List<AwsEndpoint>  (){ List<AwsEndpoint>[] parts=ResolverUtils.splitByZone(delegate.getClusterEndpoints() myZone); List<AwsEndpoint> myZoneEndpoints=parts[0]; List<AwsEndpoint> remainingEndpoints=parts[1]; List<AwsEndpoint> randomizedList
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,getRegion,@Override public String  (){ return delegate.getRegion(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolver.java,randomizeAndMerge,private static List<AwsEndpoint>  (List<AwsEndpoint> myZoneEndpoints List<AwsEndpoint> remainingEndpoints){ if (myZoneEndpoints.isEmpty()) { return ResolverUtils.randomize(remainingEndpoints); } if (remainingEndpoints.isEmpty()) { return ResolverUtils.randomize(myZoneEndpoints); } List<AwsEndpoint> mergedList=ResolverUtils.randomize(myZoneEndpoints); mergedList.addAll(ResolverUtils.randomize(remainingEndpoints)); return mergedList; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ClusterResolverException.java,ClusterResolverException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,DefaultEndpoint,"public  (String networkAddress int port boolean isSecure String relativeUri){ this.networkAddress=networkAddress; this.port=port; this.isSecure=isSecure; this.relativeUri=relativeUri; StringBuilder sb=new StringBuilder().append(isSecure ? ""https"" : ""http"").append(""://"").append(networkAddress); if (port >= 0) { sb.append(':').append(port); } if (relativeUri != null) { if (!relativeUri.startsWith(""/"")) { sb.append('/'); } sb.append(relativeUri); } this.serviceUrl=sb.toString(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,compareTo,@Override public int  (Object that){ return serviceUrl.compareTo(((DefaultEndpoint)that).getServiceUrl()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,createForServerList,public static List<EurekaEndpoint>  (List<String> hostNames int port boolean isSecure String relativeUri){ if (hostNames.isEmpty()) { return Collections.emptyList(); } List<EurekaEndpoint> eurekaEndpoints=new ArrayList<>(hostNames.size()); for ( String hostName : hostNames) { eurekaEndpoints.add(new DefaultEndpoint(hostName port isSecure relativeUri)); } return eurekaEndpoints; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (!(o instanceof DefaultEndpoint)) return false; DefaultEndpoint that=(DefaultEndpoint)o; if (isSecure != that.isSecure) return false; if (port != that.port) return false; if (networkAddr
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,getHostName,@Deprecated @Override public String  (){ return networkAddress; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,getNetworkAddress,@Override public String  (){ return networkAddress; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,getPort,@Override public int  (){ return port; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,getRelativeUri,@Override public String  (){ return relativeUri; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,getServiceUrl,@Override public String  (){ return serviceUrl; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,hashCode,@Override public int  (){ int result=networkAddress != null ? networkAddress.hashCode() : 0; result=31 * result + port; result=31 * result + (isSecure ? 1 : 0); result=31 * result + (relativeUri != null ? relativeUri.hashCode() : 0); result=31 * result + 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,isSecure,@Override public boolean  (){ return isSecure; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DefaultEndpoint.java,toString,"@Override public String  (){ return ""DefaultEndpoint{ serviceUrl='"" + serviceUrl + '}'; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java,DnsClusterResolver,"public  (DnsService dnsService String region String rootClusterDNS int port boolean isSecure String relativeUri){ this.region=region; List<String> addresses=dnsService.resolveARecord(rootClusterDNS); if (addresses == null) { this.eurekaEndpoints=Collections.<EurekaEndpoint>singletonList(new DefaultEndpoint(rootClusterDNS port isSecure relativeUri)); } else { this.eurekaEndpoints=DefaultEndpoint.createForServerList(addresses port isSecure relativeUri); } logger.debug(""Resolved {} to {}"" rootClusterDNS eurekaEndpoints); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java,getClusterEndpoints,@Override public List<EurekaEndpoint>  (){ return eurekaEndpoints; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\DnsClusterResolver.java,getRegion,@Override public String  (){ return region; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,LegacyClusterResolver,public  (EurekaClientConfig clientConfig String myZone){ this.delegate=new ReloadingClusterResolver<>(new LegacyClusterResolverFactory(clientConfig myZone) clientConfig.getEurekaServiceUrlPollIntervalSeconds() * 1000); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,LegacyClusterResolverFactory, (EurekaClientConfig clientConfig String myZone){ this.clientConfig=clientConfig; this.myRegion=clientConfig.getRegion(); this.myZone=myZone; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,createClusterResolver,"@Override public ClusterResolver<AwsEndpoint>  (){ ClusterResolver<AwsEndpoint> newResolver; if (clientConfig.shouldUseDnsForFetchingServiceUrls()) { String discoveryDnsName=""txt."" + myRegion + '.'+ clientConfig.getEurekaServerDNSName(); newResolver=new D"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,createEurekaEndpointsFromConfig,"private List<AwsEndpoint>  (){ List<String> serviceUrls=EndpointUtils.getServiceUrlsFromConfig(clientConfig myZone clientConfig.shouldPreferSameZoneEureka()); List<AwsEndpoint> endpoints=new ArrayList<>(serviceUrls.size()); for ( String serviceUrl : serviceUrls) { try { URI serviceURI=new URI(serviceUrl); endpoints.add(new AwsEndpoint(serviceURI.getHost() serviceURI.getPort() ""https"".equalsIgnoreCase(serviceURI.getSchemeSpecificPart()) serviceURI.getPath() myRegion myZone)); } catch ( URISyntaxException ignore) { logger.warn(""Invalid eureka server URI: {}; removing from the server pool"" serviceUrl); } } return endpoints; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,getClusterEndpoints,@Override public List<AwsEndpoint>  (){ return delegate.getClusterEndpoints(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\LegacyClusterResolver.java,getRegion,@Override public String  (){ return delegate.getRegion(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,ReloadingClusterResolver,"public  (final ClusterResolverFactory<T> factory final long reloadIntervalMs){ this.factory=factory; this.reloadIntervalMs=reloadIntervalMs; this.maxReloadIntervalMs=MAX_RELOAD_INTERVAL_MULTIPLIER * reloadIntervalMs; this.delegateRef=new AtomicReference<>(factory.createClusterResolver()); this.lastUpdateTime=System.currentTimeMillis(); this.currentReloadIntervalMs=reloadIntervalMs; List<T> clusterEndpoints=delegateRef.get().getClusterEndpoints(); if (clusterEndpoints.isEmpty()) { logger.error(""Empty Eureka server endpoint list during initialization process""); throw new ClusterResolverException(""Resolved to an empty endpoint list""); } if (logger.isInfoEnabled()) { logger.info(""Initiated with delegate resolver of type {}; next reload in {}[sec]. Loaded endpoints={}"" delegateRef.get().getClass() currentReloadIntervalMs / 1000 clusterEndpoints); } try { Monitors.registerObject(this); } catch ( Throwable e) { logger.warn(""Cannot register metrics"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,getClusterEndpoints,@Override public List<T>  (){ long expiryTime=lastUpdateTime + currentReloadIntervalMs; if (expiryTime <= System.currentTimeMillis()) { try { ClusterResolver<T> newDelegate=reload(); this.lastUpdateTime=System.currentTimeMillis(); this.currentReloadInterv
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,getLastReloadTimestamp,"@Monitor(name=METRIC_RESOLVER_PREFIX + ""lastReloadTimestamp"" description=""How much time has passed from last successful cluster configuration resolve"" type=DataSourceType.GAUGE) public long  (){ return lastReloadTimestamp < 0 ? 0 : System.currentTimeMilli"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,getRegion,@Override public String  (){ ClusterResolver delegate=delegateRef.get(); return delegate == null ? null : delegate.getRegion(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolver.java,reload,"private ClusterResolver<T>  (){ ClusterResolver<T> newDelegate=factory.createClusterResolver(); List<T> newEndpoints=newDelegate.getClusterEndpoints(); if (newEndpoints.isEmpty()) { logger.info(""Tried to reload but empty endpoint list returned; keeping the current endpoints""); return null; } if (ResolverUtils.identical(delegateRef.get().getClusterEndpoints() newEndpoints)) { logger.debug(""Loaded cluster server list identical to the current one; no update required""); return null; } return newDelegate; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,extractZoneFromHostName,public static String  (String hostName){ Matcher matcher=ZONE_RE.matcher(hostName); if (matcher.matches()) { return matcher.group(2); } return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,identical,public static <T extends EurekaEndpoint>boolean  (List<T> firstList List<T> secondList){ if (firstList.size() != secondList.size()) { return false; } HashSet<T> compareSet=new HashSet<>(firstList); compareSet.removeAll(secondList); return compareSet.isEmpty(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,instanceInfoToEndpoint,"public static AwsEndpoint  (EurekaClientConfig clientConfig EurekaTransportConfig transportConfig InstanceInfo instanceInfo){ String zone=null; DataCenterInfo dataCenterInfo=instanceInfo.getDataCenterInfo(); if (dataCenterInfo instanceof AmazonInfo) { zone=((AmazonInfo)dataCenterInfo).get(AmazonInfo.MetaDataKey.availabilityZone); } String networkAddress; if (transportConfig.applicationsResolverUseIp()) { if (instanceInfo.getDataCenterInfo() instanceof AmazonInfo) { networkAddress=((AmazonInfo)instanceInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.localIpv4); } else { networkAddress=instanceInfo.getIPAddr(); } } else { networkAddress=instanceInfo.getHostName(); } if (networkAddress == null) { logger.error(""Cannot resolve InstanceInfo {} to a proper resolver endpoint  skipping"" instanceInfo); return null; } return new AwsEndpoint(networkAddress instanceInfo.getPort() false clientConfig.getEurekaServerURLContext() clientConfig.getRegion() zone); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,randomize,public static <T extends EurekaEndpoint>List<T>  (List<T> list){ List<T> randomList=new ArrayList<>(list); if (randomList.size() < 2) { return randomList; } Random random=new Random(LOCAL_IPV4_ADDRESS.hashCode()); int last=randomList.size() - 1; for (int i=0; i < last; i++) { int pos=random.nextInt(randomList.size() - i); if (pos != i) { Collections.swap(randomList i pos); } } return randomList; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\ResolverUtils.java,splitByZone,public static List<AwsEndpoint>[]  (List<AwsEndpoint> eurekaEndpoints String myZone){ if (eurekaEndpoints.isEmpty()) { return new List[]{Collections.emptyList() Collections.emptyList()}; } if (myZone == null) { return new List[]{Collections.emptyList() new ArrayList<>(eurekaEndpoints)}; } List<AwsEndpoint> myZoneList=new ArrayList<>(eurekaEndpoints.size()); List<AwsEndpoint> remainingZonesList=new ArrayList<>(eurekaEndpoints.size()); for ( AwsEndpoint endpoint : eurekaEndpoints) { if (myZone.equalsIgnoreCase(endpoint.getZone())) { myZoneList.add(endpoint); } else { remainingZonesList.add(endpoint); } } return new List[]{myZoneList remainingZonesList}; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,StaticClusterResolver,"public  (String region List<T> eurekaEndpoints){ this.eurekaEndpoints=eurekaEndpoints; this.region=region; logger.debug(""Fixed resolver configuration: {}"" eurekaEndpoints); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,fromURL,"public static ClusterResolver<EurekaEndpoint>  (String regionName URL serviceUrl){ boolean isSecure=""https"".equalsIgnoreCase(serviceUrl.getProtocol()); int defaultPort=isSecure ? 443 : 80; int port=serviceUrl.getPort() == -1 ? defaultPort : serviceUrl.getPort(); return new StaticClusterResolver<EurekaEndpoint>(regionName new DefaultEndpoint(serviceUrl.getHost() port isSecure serviceUrl.getPath())); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,getClusterEndpoints,@Override public List<T>  (){ return eurekaEndpoints; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\resolver\StaticClusterResolver.java,getRegion,@Override public String  (){ return region; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,cancel,@Override public EurekaHttpResponse<Void>  (final String appName final String id){ return execute(new RequestExecutor<Void>(){ @Override public EurekaHttpResponse<Void> execute( EurekaHttpClient delegate){ return delegate.cancel(appName id); } @Override p
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,deleteStatusOverride,@Override public EurekaHttpResponse<Void>  (final String appName final String id final InstanceInfo info){ return execute(new RequestExecutor<Void>(){ @Override public EurekaHttpResponse<Void> execute( EurekaHttpClient delegate){ return delegate.deleteSta
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,execute,@Override public EurekaHttpResponse<InstanceInfo>  (EurekaHttpClient delegate){ return delegate.getInstance(appName id); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,getApplication,@Override public EurekaHttpResponse<Application>  (final String appName){ return execute(new RequestExecutor<Application>(){ @Override public EurekaHttpResponse<Application> execute( EurekaHttpClient delegate){ return delegate.getApplication(appName); } @
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,getApplications,@Override public EurekaHttpResponse<Applications>  (final String... regions){ return execute(new RequestExecutor<Applications>(){ @Override public EurekaHttpResponse<Applications> execute( EurekaHttpClient delegate){ return delegate.getApplications(region
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,getDelta,@Override public EurekaHttpResponse<Applications>  (final String... regions){ return execute(new RequestExecutor<Applications>(){ @Override public EurekaHttpResponse<Applications> execute( EurekaHttpClient delegate){ return delegate.getDelta(regions); } @
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,getInstance,@Override public EurekaHttpResponse<InstanceInfo>  (final String appName final String id){ return execute(new RequestExecutor<InstanceInfo>(){ @Override public EurekaHttpResponse<InstanceInfo> execute( EurekaHttpClient delegate){ return delegate.getInstan
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,getRequestType,@Override public RequestType  (){ return RequestType.GetApplicationInstance; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,getSecureVip,@Override public EurekaHttpResponse<Applications>  (final String secureVipAddress final String... regions){ return execute(new RequestExecutor<Applications>(){ @Override public EurekaHttpResponse<Applications> execute( EurekaHttpClient delegate){ return d
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,getVip,@Override public EurekaHttpResponse<Applications>  (final String vipAddress final String... regions){ return execute(new RequestExecutor<Applications>(){ @Override public EurekaHttpResponse<Applications> execute( EurekaHttpClient delegate){ return delegat
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,register,@Override public EurekaHttpResponse<Void>  (final InstanceInfo info){ return execute(new RequestExecutor<Void>(){ @Override public EurekaHttpResponse<Void> execute( EurekaHttpClient delegate){ return delegate.register(info); } @Override public RequestType
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,sendHeartBeat,@Override public EurekaHttpResponse<InstanceInfo>  (final String appName final String id final InstanceInfo info final InstanceStatus overriddenStatus){ return execute(new RequestExecutor<InstanceInfo>(){ @Override public EurekaHttpResponse<InstanceInfo> 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\EurekaHttpClientDecorator.java,statusUpdate,@Override public EurekaHttpResponse<Void>  (final String appName final String id final InstanceStatus newStatus final InstanceInfo info){ return execute(new RequestExecutor<Void>(){ @Override public EurekaHttpResponse<Void> execute( EurekaHttpClient deleg
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,RetryableEurekaHttpClient,public  (String name EurekaTransportConfig transportConfig ClusterResolver clusterResolver TransportClientFactory clientFactory ServerStatusEvaluator serverStatusEvaluator int numberOfRetries){ this.name=name; this.transportConfig=transportConfig; this.clusterResolver=clusterResolver; this.clientFactory=clientFactory; this.serverStatusEvaluator=serverStatusEvaluator; this.numberOfRetries=numberOfRetries; Monitors.registerObject(name this); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,createFactory,public static EurekaHttpClientFactory  (final String name final EurekaTransportConfig transportConfig final ClusterResolver<EurekaEndpoint> clusterResolver final TransportClientFactory delegateFactory final ServerStatusEvaluator serverStatusEvaluator){ return new EurekaHttpClientFactory(){ @Override public EurekaHttpClient newClient(){ return new RetryableEurekaHttpClient(name transportConfig clusterResolver delegateFactory serverStatusEvaluator DEFAULT_NUMBER_OF_RETRIES); } @Override public void shutdown(){ delegateFactory.shutdown(); } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,execute,@Override protected <R>EurekaHttpResponse<R>  (RequestExecutor<R> requestExecutor){ List<EurekaEndpoint> candidateHosts=null; int endpointIdx=0; for (int retry=0; retry < numberOfRetries; retry++) { EurekaHttpClient currentHttpClient=delegate.get(); Eurek
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,getHostCandidates,"private List<EurekaEndpoint>  (){ List<EurekaEndpoint> candidateHosts=clusterResolver.getClusterEndpoints(); quarantineSet.retainAll(candidateHosts); int threshold=(int)(candidateHosts.size() * transportConfig.getRetryableClientQuarantineRefreshPercentage()); if (threshold > candidateHosts.size()) { threshold=candidateHosts.size(); } if (quarantineSet.isEmpty()) { } else if (quarantineSet.size() >= threshold) { logger.debug(""Clearing quarantined list of size {}"" quarantineSet.size()); quarantineSet.clear(); } else { List<EurekaEndpoint> remainingHosts=new ArrayList<>(candidateHosts.size()); for ( EurekaEndpoint endpoint : candidateHosts) { if (!quarantineSet.contains(endpoint)) { remainingHosts.add(endpoint); } } candidateHosts=remainingHosts; } return candidateHosts; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,getQuarantineSetSize,"@Monitor(name=METRIC_TRANSPORT_PREFIX + ""quarantineSize"" description=""number of servers quarantined"" type=DataSourceType.GAUGE) public long  (){ return quarantineSet.size(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,newClient,@Override public EurekaHttpClient  (){ return new RetryableEurekaHttpClient(name transportConfig clusterResolver delegateFactory serverStatusEvaluator DEFAULT_NUMBER_OF_RETRIES); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClient.java,shutdown,@Override public void  (){ delegateFactory.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,EurekaHttpClientRequestMetrics," (String resourceName){ this.countersByStatus=createStatusCounters(resourceName); latencyTimer=new BasicTimer(MonitorConfig.builder(EurekaClientNames.METRIC_TRANSPORT_PREFIX + ""latency"").withTag(""id"" resourceName).withTag(""class"" MetricsCollectingEurekaHttpClient.class.getSimpleName()).build() TimeUnit.MILLISECONDS); ServoUtil.register(latencyTimer); this.connectionErrors=new BasicCounter(MonitorConfig.builder(EurekaClientNames.METRIC_TRANSPORT_PREFIX + ""connectionErrors"").withTag(""id"" resourceName).withTag(""class"" MetricsCollectingEurekaHttpClient.class.getSimpleName()).build()); ServoUtil.register(connectionErrors); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,MetricsCollectingEurekaHttpClient,private  (EurekaHttpClient delegate Map<RequestType EurekaHttpClientRequestMetrics> metricsByRequestType ExceptionsMetric exceptionsMetric boolean shutdownMetrics){ this.delegate=delegate; this.metricsByRequestType=metricsByRequestType; this.exceptionsMetric=exceptionsMetric; this.shutdownMetrics=shutdownMetrics; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,createFactory,"public static TransportClientFactory  (final TransportClientFactory delegateFactory){ final Map<RequestType EurekaHttpClientRequestMetrics> metricsByRequestType=initializeMetrics(); final ExceptionsMetric exceptionMetrics=new ExceptionsMetric(EurekaClientNames.METRIC_TRANSPORT_PREFIX + ""exceptions""); return new TransportClientFactory(){ @Override public EurekaHttpClient newClient( EurekaEndpoint endpoint){ return new MetricsCollectingEurekaHttpClient(delegateFactory.newClient(endpoint) metricsByRequestType exceptionMetrics false); } @Override public void shutdown(){ shutdownMetrics(metricsByRequestType); exceptionMetrics.shutdown(); } } ; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,createStatusCounters,"private static Map<Status Counter>  (String resourceName){ Map<Status Counter> result=new EnumMap<>(Status.class); for ( Status status : Status.values()) { BasicCounter counter=new BasicCounter(MonitorConfig.builder(EurekaClientNames.METRIC_TRANSPORT_PREFIX + ""request"").withTag(""id"" resourceName).withTag(""class"" MetricsCollectingEurekaHttpClient.class.getSimpleName()).withTag(""status"" status.name()).build()); ServoUtil.register(counter); result.put(status counter); } return result; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,execute,@Override protected <R>EurekaHttpResponse<R>  (RequestExecutor<R> requestExecutor){ EurekaHttpClientRequestMetrics requestMetrics=metricsByRequestType.get(requestExecutor.getRequestType()); Stopwatch stopwatch=requestMetrics.latencyTimer.start(); try { Eu
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,initializeMetrics,"private static Map<RequestType EurekaHttpClientRequestMetrics>  (){ Map<RequestType EurekaHttpClientRequestMetrics> result=new EnumMap<>(RequestType.class); try { for ( RequestType requestType : RequestType.values()) { result.put(requestType new EurekaHttpClientRequestMetrics(requestType.name())); } } catch ( Exception e) { logger.warn(""Metrics initialization failure"" e); } return result; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,mappedStatus,private static Status  (EurekaHttpResponse<?> httpResponse){ int category=httpResponse.getStatusCode() / 100; switch (category) { case 1: return Status.x100; case 2: return Status.x200; case 3: return Status.x300; case 4: return Status.x400; case 5: return Status.x500; } return Status.Unknown; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,newClient,@Override public EurekaHttpClient  (EurekaEndpoint endpoint){ return new MetricsCollectingEurekaHttpClient(delegateFactory.newClient(endpoint) metricsByRequestType exceptionMetrics false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,shutdown,void  (){ ServoUtil.unregister(latencyTimer connectionErrors); ServoUtil.unregister(countersByStatus.values()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\MetricsCollectingEurekaHttpClient.java,shutdownMetrics,private static void  (Map<RequestType EurekaHttpClientRequestMetrics> metricsByRequestType){ for ( EurekaHttpClientRequestMetrics metrics : metricsByRequestType.values()) { metrics.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,RedirectingEurekaHttpClient,public  (String serviceUrl TransportClientFactory factory DnsService dnsService){ this.serviceEndpoint=new DefaultEndpoint(serviceUrl); this.factory=factory; this.dnsService=dnsService; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,createFactory,public static TransportClientFactory  (final TransportClientFactory delegateFactory){ final DnsServiceImpl dnsService=new DnsServiceImpl(); return new TransportClientFactory(){ @Override public EurekaHttpClient newClient( EurekaEndpoint endpoint){ return new RedirectingEurekaHttpClient(endpoint.getServiceUrl() delegateFactory dnsService); } @Override public void shutdown(){ delegateFactory.shutdown(); } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,execute,@Override protected <R>EurekaHttpResponse<R>  (RequestExecutor<R> requestExecutor){ EurekaHttpClient currentEurekaClient=delegateRef.get(); if (currentEurekaClient == null) { AtomicReference<EurekaHttpClient> currentEurekaClientRef=new AtomicReference<>(f
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,executeOnNewServer,"private <R>EurekaHttpResponse<R>  (RequestExecutor<R> requestExecutor AtomicReference<EurekaHttpClient> currentHttpClientRef){ URI targetUrl=null; for (int followRedirectCount=0; followRedirectCount < MAX_FOLLOWED_REDIRECTS; followRedirectCount++) { EurekaHttpResponse<R> httpResponse=requestExecutor.execute(currentHttpClientRef.get()); if (httpResponse.getStatusCode() != 302) { if (followRedirectCount == 0) { logger.debug(""Pinning to endpoint {}"" targetUrl); } else { logger.info(""Pinning to endpoint {}  after {} redirect(s)"" targetUrl followRedirectCount); } return httpResponse; } targetUrl=getRedirectBaseUri(httpResponse.getLocation()); if (targetUrl == null) { throw new TransportException(""Invalid redirect URL "" + httpResponse.getLocation()); } currentHttpClientRef.getAndSet(null).shutdown(); currentHttpClientRef.set(factory.newClient(new DefaultEndpoint(targetUrl.toString()))); } String message=""Follow redirect limit crossed for URI "" + serviceEndpoint.getServiceUrl(); logger.warn(message); throw new TransportException(message); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,getRedirectBaseUri,"private URI  (URI locationURI){ if (locationURI == null) { throw new TransportException(""Missing Location header in the redirect reply""); } Matcher pathMatcher=REDIRECT_PATH_REGEX.matcher(locationURI.getPath()); if (pathMatcher.matches()) { return UriBuilder.fromUri(locationURI).host(dnsService.resolveIp(locationURI.getHost())).replacePath(pathMatcher.group(1)).replaceQuery(null).build(); } logger.warn(""Invalid redirect URL {}"" locationURI); return null; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,newClient,@Override public EurekaHttpClient  (EurekaEndpoint endpoint){ return new RedirectingEurekaHttpClient(endpoint.getServiceUrl() delegateFactory dnsService); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClient.java,shutdown,@Override public void  (){ delegateFactory.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,accept,@Override public boolean  (int statusCode RequestType requestType){ return statusCode >= 200 && statusCode < 300; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,httpSuccessEvaluator,public static ServerStatusEvaluator  (){ return HTTP_SUCCESS_EVALUATOR; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\ServerStatusEvaluators.java,legacyEvaluator,public static ServerStatusEvaluator  (){ return LEGACY_EVALUATOR; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,DefaultEurekaTransportConfig,"public  (String parentNamespace DynamicPropertyFactory configInstance){ this.namespace=parentNamespace == null ? SUB_NAMESPACE : (parentNamespace.endsWith(""."") ? parentNamespace + SUB_NAMESPACE : parentNamespace + ""."" + SUB_NAMESPACE); this.configInstance=configInstance; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,applicationsResolverUseIp,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + APPLICATION_RESOLVER_USE_IP_KEY false).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getApplicationsResolverDataStalenessThresholdSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + DATA_STALENESS_THRESHOLD_KEY Values.DATA_STALENESS_TRHESHOLD).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getAsyncExecutorThreadPoolSize,@Override public int  (){ return configInstance.getIntProperty(namespace + ASYNC_EXECUTOR_THREADPOOL_SIZE_KEY Values.ASYNC_EXECUTOR_THREADPOOL_SIZE).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getAsyncResolverRefreshIntervalMs,@Override public int  (){ return configInstance.getIntProperty(namespace + ASYNC_RESOLVER_REFRESH_INTERVAL_KEY Values.ASYNC_RESOLVER_REFRESH_INTERVAL).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getAsyncResolverWarmUpTimeoutMs,@Override public int  (){ return configInstance.getIntProperty(namespace + ASYNC_RESOLVER_WARMUP_TIMEOUT_KEY Values.ASYNC_RESOLVER_WARMUP_TIMEOUT).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getBootstrapResolverStrategy,@Override public String  (){ return configInstance.getStringProperty(namespace + BOOTSTRAP_RESOLVER_STRATEGY_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getReadClusterVip,@Override public String  (){ return configInstance.getStringProperty(namespace + READ_CLUSTER_VIP_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getRetryableClientQuarantineRefreshPercentage,@Override public double  (){ return configInstance.getDoubleProperty(namespace + QUARANTINE_REFRESH_PERCENTAGE_KEY Values.QUARANTINE_REFRESH_PERCENTAGE).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getSessionedClientReconnectIntervalSeconds,@Override public int  (){ return configInstance.getIntProperty(namespace + SESSION_RECONNECT_INTERVAL_KEY Values.SESSION_RECONNECT_INTERVAL).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,getWriteClusterVip,@Override public String  (){ return configInstance.getStringProperty(namespace + WRITE_CLUSTER_VIP_KEY null).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\DefaultEurekaTransportConfig.java,useBootstrapResolverForQuery,@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + USE_BOOTSTRAP_RESOLVER_FOR_QUERY true).get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,SessionedEurekaHttpClient,public  (String name EurekaHttpClientFactory clientFactory long sessionDurationMs){ this.name=name; this.clientFactory=clientFactory; this.sessionDurationMs=sessionDurationMs; this.currentSessionDurationMs=randomizeSessionDuration(sessionDurationMs); Monitors.registerObject(name this); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,execute,"@Override protected <R>EurekaHttpResponse<R>  (RequestExecutor<R> requestExecutor){ long now=System.currentTimeMillis(); long delay=now - lastReconnectTimeStamp; if (delay >= currentSessionDurationMs) { logger.debug(""Ending a session and starting anew""); "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,getCurrentSessionDuration,"@Monitor(name=METRIC_TRANSPORT_PREFIX + ""currentSessionDuration"" description=""Duration of the current session"" type=DataSourceType.GAUGE) public long  (){ return lastReconnectTimeStamp < 0 ? 0 : System.currentTimeMillis() - lastReconnectTimeStamp; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,randomizeSessionDuration,protected long  (long sessionDurationMs){ long delta=(long)(sessionDurationMs * (random.nextDouble() - 0.5)); return sessionDurationMs + delta; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClient.java,shutdown,@Override public void  (){ if (Monitors.isObjectRegistered(name this)) { Monitors.unregisterObject(name this); } TransportUtils.shutdown(eurekaHttpClientRef.getAndSet(null)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,canonicalClientFactory,static EurekaHttpClientFactory  (final String name final EurekaTransportConfig transportConfig final ClusterResolver<EurekaEndpoint> clusterResolver final TransportClientFactory transportClientFactory){ return new EurekaHttpClientFactory(){ @Override public EurekaHttpClient newClient(){ return new SessionedEurekaHttpClient(name RetryableEurekaHttpClient.createFactory(name transportConfig clusterResolver RedirectingEurekaHttpClient.createFactory(transportClientFactory) ServerStatusEvaluators.legacyEvaluator()) transportConfig.getSessionedClientReconnectIntervalSeconds() * 1000); } @Override public void shutdown(){ wrapClosable(clusterResolver).shutdown(); } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,compositeBootstrapResolver,"static ClosableResolver<AwsEndpoint>  (final EurekaClientConfig clientConfig final EurekaTransportConfig transportConfig final TransportClientFactory transportClientFactory final InstanceInfo myInstanceInfo final ApplicationsResolver.ApplicationsSource applicationsSource){ final ClusterResolver rootResolver=new ConfigClusterResolver(clientConfig myInstanceInfo); final EurekaHttpResolver remoteResolver=new EurekaHttpResolver(clientConfig transportConfig rootResolver transportClientFactory transportConfig.getWriteClusterVip()); final ApplicationsResolver localResolver=new ApplicationsResolver(clientConfig transportConfig applicationsSource transportConfig.getWriteClusterVip()); ClusterResolver<AwsEndpoint> compositeResolver=new ClusterResolver<AwsEndpoint>(){ @Override public String getRegion(){ return clientConfig.getRegion(); } @Override public List<AwsEndpoint> getClusterEndpoints(){ List<AwsEndpoint> result=localResolver.getClusterEndpoints(); if (result.isEmpty()) { result=remoteResolver.getClusterEndpoints(); } return result; } } ; List<AwsEndpoint> initialValue=compositeResolver.getClusterEndpoints(); if (initialValue.isEmpty()) { String msg=""Initial resolution of Eureka endpoints failed. Check ConfigClusterResolver logs for more info""; logger.error(msg); failFastOnInitCheck(clientConfig msg); } String[] availZones=clientConfig.getAvailabilityZones(clientConfig.getRegion()); String myZone=InstanceInfo.getZone(availZones myInstanceInfo); return new AsyncResolver<>(EurekaClientNames.BOOTSTRAP new ZoneAffinityClusterResolver(compositeResolver myZone true) initialValue transportConfig.getAsyncExecutorThreadPoolSize() transportConfig.getAsyncResolverRefreshIntervalMs()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,compositeQueryResolver,static ClosableResolver<AwsEndpoint>  (final ClusterResolver<AwsEndpoint> remoteResolver final ClusterResolver<AwsEndpoint> localResolver final EurekaClientConfig clientConfig final EurekaTransportConfig transportConfig final InstanceInfo myInstanceInfo){ String[] availZones=clientConfig.getAvailabilityZones(clientConfig.getRegion()); String myZone=InstanceInfo.getZone(availZones myInstanceInfo); ClusterResolver<AwsEndpoint> compositeResolver=new ClusterResolver<AwsEndpoint>(){ @Override public String getRegion(){ return clientConfig.getRegion(); } @Override public List<AwsEndpoint> getClusterEndpoints(){ List<AwsEndpoint> result=localResolver.getClusterEndpoints(); if (result.isEmpty()) { result=remoteResolver.getClusterEndpoints(); } return result; } } ; return new AsyncResolver<>(EurekaClientNames.QUERY new ZoneAffinityClusterResolver(compositeResolver myZone true) transportConfig.getAsyncExecutorThreadPoolSize() transportConfig.getAsyncResolverRefreshIntervalMs() transportConfig.getAsyncResolverWarmUpTimeoutMs()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,defaultBootstrapResolver,"static ClosableResolver<AwsEndpoint>  (final EurekaClientConfig clientConfig final InstanceInfo myInstanceInfo){ String[] availZones=clientConfig.getAvailabilityZones(clientConfig.getRegion()); String myZone=InstanceInfo.getZone(availZones myInstanceInfo); ClusterResolver<AwsEndpoint> delegateResolver=new ZoneAffinityClusterResolver(new ConfigClusterResolver(clientConfig myInstanceInfo) myZone true); List<AwsEndpoint> initialValue=delegateResolver.getClusterEndpoints(); if (initialValue.isEmpty()) { String msg=""Initial resolution of Eureka server endpoints failed. Check ConfigClusterResolver logs for more info""; logger.error(msg); failFastOnInitCheck(clientConfig msg); } return new AsyncResolver<>(EurekaClientNames.BOOTSTRAP delegateResolver initialValue 1 clientConfig.getEurekaServiceUrlPollIntervalSeconds() * 1000); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,failFastOnInitCheck,"private static void  (EurekaClientConfig clientConfig String msg){ if (""true"".equals(clientConfig.getExperimental(""clientTransportFailFastOnInit""))) { throw new RuntimeException(msg); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,getClusterEndpoints,@Override public List<T>  (){ return clusterResolver.getClusterEndpoints(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,getRegion,@Override public String  (){ return clusterResolver.getRegion(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,newBootstrapResolver,"public static ClosableResolver<AwsEndpoint>  (final EurekaClientConfig clientConfig final EurekaTransportConfig transportConfig final TransportClientFactory transportClientFactory final InstanceInfo myInstanceInfo final ApplicationsResolver.ApplicationsSource applicationsSource){ if (COMPOSITE_BOOTSTRAP_STRATEGY.equals(transportConfig.getBootstrapResolverStrategy())) { if (clientConfig.shouldFetchRegistry()) { return compositeBootstrapResolver(clientConfig transportConfig transportClientFactory myInstanceInfo applicationsSource); } else { logger.warn(""Cannot create a composite bootstrap resolver if registry fetch is disabled."" + "" Falling back to using a default bootstrap resolver.""); } } return defaultBootstrapResolver(clientConfig myInstanceInfo); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,newClient,@Override public EurekaHttpClient  (){ return new SessionedEurekaHttpClient(name RetryableEurekaHttpClient.createFactory(name transportConfig clusterResolver RedirectingEurekaHttpClient.createFactory(transportClientFactory) ServerStatusEvaluators.legacyEv
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,queryClientFactory,public static EurekaHttpClientFactory  (ClusterResolver bootstrapResolver TransportClientFactory transportClientFactory EurekaClientConfig clientConfig EurekaTransportConfig transportConfig InstanceInfo myInstanceInfo ApplicationsResolver.ApplicationsSource applicationsSource){ ClosableResolver queryResolver=transportConfig.useBootstrapResolverForQuery() ? wrapClosable(bootstrapResolver) : queryClientResolver(bootstrapResolver transportClientFactory clientConfig transportConfig myInstanceInfo applicationsSource); return canonicalClientFactory(EurekaClientNames.QUERY transportConfig queryResolver transportClientFactory); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,queryClientResolver,static ClosableResolver<AwsEndpoint>  (final ClusterResolver bootstrapResolver final TransportClientFactory transportClientFactory final EurekaClientConfig clientConfig final EurekaTransportConfig transportConfig final InstanceInfo myInstanceInfo final ApplicationsResolver.ApplicationsSource applicationsSource){ final EurekaHttpResolver remoteResolver=new EurekaHttpResolver(clientConfig transportConfig bootstrapResolver transportClientFactory transportConfig.getReadClusterVip()); final ApplicationsResolver localResolver=new ApplicationsResolver(clientConfig transportConfig applicationsSource transportConfig.getReadClusterVip()); return compositeQueryResolver(remoteResolver localResolver clientConfig transportConfig myInstanceInfo); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,registrationClientFactory,public static EurekaHttpClientFactory  (ClusterResolver bootstrapResolver TransportClientFactory transportClientFactory EurekaTransportConfig transportConfig){ return canonicalClientFactory(EurekaClientNames.REGISTRATION transportConfig bootstrapResolver transportClientFactory); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClients.java,wrapClosable,static <T extends EurekaEndpoint>ClosableResolver<T>  (final ClusterResolver<T> clusterResolver){ if (clusterResolver instanceof ClosableResolver) { return (ClosableResolver)clusterResolver; } return new ClosableResolver<T>(){ @Override public void shutdown(){ } @Override public String getRegion(){ return clusterResolver.getRegion(); } @Override public List<T> getClusterEndpoints(){ return clusterResolver.getClusterEndpoints(); } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,EurekaHttpResponse,"private  (EurekaHttpResponseBuilder<T> builder){ this.statusCode=builder.statusCode; this.entity=builder.entity; this.headers=builder.headers; if (headers != null) { String locationValue=headers.get(HttpHeaders.LOCATION); try { this.location=locationValue == null ? null : new URI(locationValue); } catch ( URISyntaxException e) { throw new TransportException(""Invalid Location header value in response; cannot complete the request (location="" + locationValue + ')' e); } } else { this.location=null; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,EurekaHttpResponseBuilder,private  (int statusCode){ this.statusCode=statusCode; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,anEurekaHttpResponse,public static <T>EurekaHttpResponseBuilder<T>  (int statusCode T entity){ return new EurekaHttpResponseBuilder<T>(statusCode).entity(entity); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,build,public EurekaHttpResponse<T>  (){ return new EurekaHttpResponse<T>(this); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,entity,public EurekaHttpResponseBuilder<T>  (T entity MediaType contentType){ return entity(entity).type(contentType); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,getEntity,public T  (){ return entity; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,getHeaders,public Map<String String>  (){ return headers == null ? Collections.<String String>emptyMap() : headers; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,getLocation,public URI  (){ return location; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,getStatusCode,public int  (){ return statusCode; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,headers,public EurekaHttpResponseBuilder<T>  (Map<String String> headers){ this.headers=headers; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,status,public static EurekaHttpResponse<Void>  (int status){ return new EurekaHttpResponse<>(status null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpResponse.java,type,public EurekaHttpResponseBuilder<T>  (MediaType contentType){ headers(HttpHeaders.CONTENT_TYPE contentType.toString()); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,ApacheHttpClientConnectionCleaner,"public  (ApacheHttpClient4 apacheHttpClient final long connectionIdleTimeout){ this.apacheHttpClient=apacheHttpClient; this.eurekaConnCleaner.scheduleWithFixedDelay(new Runnable(){ @Override public void run(){ cleanIdle(connectionIdleTimeout); } }  HTTP_CONNECTION_CLEANER_INTERVAL_MS HTTP_CONNECTION_CLEANER_INTERVAL_MS TimeUnit.MILLISECONDS); MonitorConfig.Builder monitorConfigBuilder=MonitorConfig.builder(""Eureka-Connection-Cleaner-Time""); executionTimeStats=new BasicTimer(monitorConfigBuilder.build()); cleanupFailed=new BasicCounter(MonitorConfig.builder(""Eureka-Connection-Cleaner-Failure"").build()); try { Monitors.registerObject(this); } catch ( Exception e) { logger.error(""Unable to register with servo."" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,cleanIdle,"public void  (long delayMs){ Stopwatch start=executionTimeStats.start(); try { apacheHttpClient.getClientHandler().getHttpClient().getConnectionManager().closeIdleConnections(delayMs TimeUnit.SECONDS); } catch ( Throwable e) { logger.error(""Cannot clean connections"" e); cleanupFailed.increment(); } finally { if (null != start) { start.stop(); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,newThread,"@Override public Thread  (Runnable r){ Thread thread=new Thread(r ""Eureka-JerseyClient-Conn-Cleaner"" + threadNumber.incrementAndGet()); thread.setDaemon(true); return thread; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,run,@Override public void  (){ cleanIdle(connectionIdleTimeout); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\ApacheHttpClientConnectionCleaner.java,shutdown,public void  (){ cleanIdle(0); eurekaConnCleaner.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\AbstractJerseyEurekaHttpClient.java,AbstractJerseyEurekaHttpClient,"protected  (Client jerseyClient String serviceUrl){ this.jerseyClient=jerseyClient; this.serviceUrl=serviceUrl; logger.debug(""Created client for url: {}"" serviceUrl); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,newClient,@Override public EurekaHttpClient  (EurekaEndpoint serviceUrl){ return metricsFactory.newClient(serviceUrl); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,newTransportClientFactory,@Override public TransportClientFactory  (EurekaClientConfig clientConfig Collection<ClientFilter> additionalFilters InstanceInfo myInstanceInfo Optional<SSLContext> sslContext Optional<HostnameVerifier> hostnameVerifier){ final TransportClientFactory jer
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\Jersey1TransportClientFactories.java,shutdown,@Override public void  (){ metricsFactory.shutdown(); jerseyFactory.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClient.java,JerseyApplicationClient,public  (Client jerseyClient String serviceUrl Map<String String> additionalHeaders){ super(jerseyClient serviceUrl); this.additionalHeaders=additionalHeaders; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClient.java,addExtraHeaders,@Override protected void  (Builder webResource){ if (additionalHeaders != null) { for ( String key : additionalHeaders.keySet()) { webResource.header(key additionalHeaders.get(key)); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,EurekaJerseyClientImpl,"public  (int connectionTimeout int readTimeout final int connectionIdleTimeout ClientConfig clientConfig){ try { jerseyClientConfig=clientConfig; apacheHttpClient=ApacheHttpClient4.create(jerseyClientConfig); HttpParams params=apacheHttpClient.getClientHandler().getHttpClient().getParams(); HttpConnectionParams.setConnectionTimeout(params connectionTimeout); HttpConnectionParams.setSoTimeout(params readTimeout); this.apacheHttpClientConnectionCleaner=new ApacheHttpClientConnectionCleaner(apacheHttpClient connectionIdleTimeout); } catch ( Throwable e) { throw new RuntimeException(""Cannot create Jersey client"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,MyDefaultApacheHttpClient4Config," (){ MonitoredConnectionManager cm; if (systemSSL) { cm=createSystemSslCM(); } else if (sslContext != null || hostnameVerifier != null || trustStoreFileName != null) { cm=createCustomSslCM(); } else { cm=createDefaultSslCM(); } if (proxyHost != null) { addProxyConfiguration(cm); } DiscoveryJerseyProvider discoveryJerseyProvider=new DiscoveryJerseyProvider(encoderWrapper decoderWrapper); getSingletons().add(discoveryJerseyProvider); cm.setDefaultMaxPerRoute(maxConnectionsPerHost); cm.setMaxTotal(maxTotalConnections); getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER cm); String fullUserAgentName=(userAgent == null ? clientName : userAgent) + ""/v"" + buildVersion(); getProperties().put(CoreProtocolPNames.USER_AGENT fullUserAgentName); getProperties().put(PROPERTY_FOLLOW_REDIRECTS Boolean.FALSE); getProperties().put(ClientPNames.HANDLE_REDIRECTS Boolean.FALSE); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,addProxyConfiguration,"private void  (MonitoredConnectionManager cm){ if (proxyUserName != null && proxyPassword != null) { getProperties().put(ApacheHttpClient4Config.PROPERTY_PROXY_USERNAME proxyUserName); getProperties().put(ApacheHttpClient4Config.PROPERTY_PROXY_PASSWORD proxyPassword); } else { getProperties().put(ApacheHttpClient4Config.PROPERTY_PROXY_USERNAME ""guest""); getProperties().put(ApacheHttpClient4Config.PROPERTY_PROXY_PASSWORD ""guest""); } getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI ""http://"" + proxyHost + "":""+ proxyPort); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,build,"public EurekaJerseyClient  (){ MyDefaultApacheHttpClient4Config config=new MyDefaultApacheHttpClient4Config(); try { return new EurekaJerseyClientImpl(connectionTimeout readTimeout connectionIdleTimeout config); } catch ( Throwable e) { throw new RuntimeException(""Cannot create Jersey client "" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,createCustomSslCM,"private MonitoredConnectionManager  (){ FileInputStream fin=null; try { if (sslContext == null) { sslContext=SSLContext.getInstance(PROTOCOL_SCHEME); KeyStore sslKeyStore=KeyStore.getInstance(KEYSTORE_TYPE); fin=new FileInputStream(trustStoreFileName); sslKeyStore.load(fin trustStorePassword.toCharArray()); TrustManagerFactory factory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); factory.init(sslKeyStore); TrustManager[] trustManagers=factory.getTrustManagers(); sslContext.init(null trustManagers null); } if (hostnameVerifier == null) { hostnameVerifier=SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER; } SSLConnectionSocketFactory customSslSocketFactory=new SSLConnectionSocketFactory(sslContext hostnameVerifier); SSLSocketFactory sslSocketFactory=new SSLSocketFactoryAdapter(customSslSocketFactory); SchemeRegistry sslSchemeRegistry=new SchemeRegistry(); sslSchemeRegistry.register(new Scheme(PROTOCOL HTTPS_PORT sslSocketFactory)); return new MonitoredConnectionManager(clientName sslSchemeRegistry); } catch ( Exception ex) { throw new IllegalStateException(""SSL configuration issue"" ex); } finally { if (fin != null) { try { fin.close(); } catch ( IOException ignore) { } } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,createDefaultSslCM,"private MonitoredConnectionManager  (){ final SchemeRegistry registry=new SchemeRegistry(); registry.register(new Scheme(""http"" 80 PlainSocketFactory.getSocketFactory())); registry.register(new Scheme(""https"" 443 new SSLSocketFactoryAdapter(SSLConnectionSocketFactory.getSocketFactory()))); return new MonitoredConnectionManager(clientName registry); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,createSystemSslCM,private MonitoredConnectionManager  (){ MonitoredConnectionManager cm; SSLConnectionSocketFactory systemSocketFactory=SSLConnectionSocketFactory.getSystemSocketFactory(); SSLSocketFactory sslSocketFactory=new SSLSocketFactoryAdapter(systemSocketFactory); SchemeRegistry sslSchemeRegistry=new SchemeRegistry(); sslSchemeRegistry.register(new Scheme(PROTOCOL HTTPS_PORT sslSocketFactory)); cm=new MonitoredConnectionManager(clientName sslSchemeRegistry); return cm; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,destroyResources,@Override public void  (){ apacheHttpClientConnectionCleaner.shutdown(); apacheHttpClient.destroy(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,getClient,@Override public ApacheHttpClient4  (){ return apacheHttpClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withClientName,public EurekaJerseyClientBuilder  (String clientName){ this.clientName=clientName; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withConnectionIdleTimeout,public EurekaJerseyClientBuilder  (int connectionIdleTimeout){ this.connectionIdleTimeout=connectionIdleTimeout; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withConnectionTimeout,public EurekaJerseyClientBuilder  (int connectionTimeout){ this.connectionTimeout=connectionTimeout; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withCustomSSL,public EurekaJerseyClientBuilder  (SSLContext sslContext){ this.sslContext=sslContext; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withDecoder,public EurekaJerseyClientBuilder  (String decoderName String clientDataAccept){ return this.withDecoderWrapper(CodecWrappers.resolveDecoder(decoderName clientDataAccept)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withDecoderWrapper,public EurekaJerseyClientBuilder  (DecoderWrapper decoderWrapper){ this.decoderWrapper=decoderWrapper; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withEncoder,public EurekaJerseyClientBuilder  (String encoderName){ return this.withEncoderWrapper(CodecWrappers.getEncoder(encoderName)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withEncoderWrapper,public EurekaJerseyClientBuilder  (EncoderWrapper encoderWrapper){ this.encoderWrapper=encoderWrapper; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withHostnameVerifier,public void  (HostnameVerifier hostnameVerifier){ this.hostnameVerifier=hostnameVerifier; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withMaxConnectionsPerHost,public EurekaJerseyClientBuilder  (int maxConnectionsPerHost){ this.maxConnectionsPerHost=maxConnectionsPerHost; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withMaxTotalConnections,public EurekaJerseyClientBuilder  (int maxTotalConnections){ this.maxTotalConnections=maxTotalConnections; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withProxy,public EurekaJerseyClientBuilder  (String proxyHost String proxyPort String user String password){ this.proxyHost=proxyHost; this.proxyPort=proxyPort; this.proxyUserName=user; this.proxyPassword=password; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withReadTimeout,public EurekaJerseyClientBuilder  (int readTimeout){ this.readTimeout=readTimeout; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withSystemSSLConfiguration,public EurekaJerseyClientBuilder  (){ this.systemSSL=true; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withTrustStoreFile,public EurekaJerseyClientBuilder  (String trustStoreFileName String trustStorePassword){ this.trustStoreFileName=trustStoreFileName; this.trustStorePassword=trustStorePassword; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\EurekaJerseyClientImpl.java,withUserAgent,public EurekaJerseyClientBuilder  (String userAgent){ this.userAgent=userAgent; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,SSLSocketFactoryAdapter,public  (SSLConnectionSocketFactory factory HostnameVerifier hostnameVerifier){ super(DummySSLSocketFactory.INSTANCE new WrappedX509HostnameVerifier(hostnameVerifier)); this.factory=factory; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,WrappedX509HostnameVerifier,private  (HostnameVerifier hostnameVerifier){ this.hostnameVerifier=hostnameVerifier; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,connectSocket,@Override public Socket  (final int connectTimeout final Socket socket final HttpHost host final InetSocketAddress remoteAddress final InetSocketAddress localAddress final HttpContext context) throws IOException { return factory.connectSocket(connectTimeo
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,createLayeredSocket,@Override public Socket  (final Socket socket final String target final int port final HttpContext context) throws IOException { return factory.createLayeredSocket(socket target port context); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,createSocket,@Override public Socket  (InetAddress address int port InetAddress localAddress int localPort) throws IOException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,getDefaultCipherSuites,@Override public String[]  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,getSupportedCipherSuites,@Override public String[]  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\SSLSocketFactoryAdapter.java,verify,@Override public boolean  (String hostname SSLSession session){ return hostnameVerifier.verify(hostname session); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,JerseyEurekaHttpClientFactory,private  (EurekaJerseyClient jerseyClient ApacheHttpClient4 apacheClient long connectionIdleTimeout Map<String String> additionalHeaders){ this.jerseyClient=jerseyClient; this.apacheClient=jerseyClient != null ? jerseyClient.getClient() : apacheClient; this.additionalHeaders=additionalHeaders; this.cleaner=new ApacheHttpClientConnectionCleaner(this.apacheClient connectionIdleTimeout); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,addFilters,private void  (ApacheHttpClient4 discoveryApacheClient){ discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false)); String ip=myInstanceInfo == null ? null : myInstanceInfo.getIPAddr(); AbstractEurekaIdentity identity=clientIdentity == null ? new EurekaClientIdentity(ip) : clientIdentity; discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity)); if (additionalFilters != null) { for ( ClientFilter filter : additionalFilters) { if (filter != null) { discoveryApacheClient.addFilter(filter); } } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,addProxyConfiguration,"private void  (ClientConfig clientConfig){ if (proxyUserName != null && proxyPassword != null) { clientConfig.getProperties().put(ApacheHttpClient4Config.PROPERTY_PROXY_USERNAME proxyUserName); clientConfig.getProperties().put(ApacheHttpClient4Config.PROPERTY_PROXY_PASSWORD proxyPassword); } else { clientConfig.getProperties().put(ApacheHttpClient4Config.PROPERTY_PROXY_USERNAME ""guest""); clientConfig.getProperties().put(ApacheHttpClient4Config.PROPERTY_PROXY_PASSWORD ""guest""); } clientConfig.getProperties().put(DefaultApacheHttpClient4Config.PROPERTY_PROXY_URI ""http://"" + proxyHost + ':'+ proxyPort); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,build,"@Override public JerseyEurekaHttpClientFactory  (){ Map<String String> additionalHeaders=new HashMap<>(); if (allowRedirect) { additionalHeaders.put(HTTP_X_DISCOVERY_ALLOW_REDIRECT ""true""); } if (EurekaAccept.compact == eurekaAccept) { additionalHeaders.p"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,buildExperimental,"private JerseyEurekaHttpClientFactory  (Map<String String> additionalHeaders){ ThreadSafeClientConnManager cm=createConnectionManager(); ClientConfig clientConfig=new DefaultApacheHttpClient4Config(); if (proxyHost != null) { addProxyConfiguration(clientConfig); } DiscoveryJerseyProvider discoveryJerseyProvider=new DiscoveryJerseyProvider(encoderWrapper decoderWrapper); clientConfig.getSingletons().add(discoveryJerseyProvider); cm.setDefaultMaxPerRoute(maxConnectionsPerHost); cm.setMaxTotal(maxTotalConnections); clientConfig.getProperties().put(ApacheHttpClient4Config.PROPERTY_CONNECTION_MANAGER cm); String fullUserAgentName=(userAgent == null ? clientName : userAgent) + ""/v"" + buildVersion(); clientConfig.getProperties().put(CoreProtocolPNames.USER_AGENT fullUserAgentName); clientConfig.getProperties().put(ClientConfig.PROPERTY_FOLLOW_REDIRECTS Boolean.FALSE); clientConfig.getProperties().put(ClientPNames.HANDLE_REDIRECTS Boolean.FALSE); ApacheHttpClient4 apacheClient=ApacheHttpClient4.create(clientConfig); addFilters(apacheClient); return new JerseyEurekaHttpClientFactory(apacheClient connectionIdleTimeout additionalHeaders); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,buildLegacy,"private JerseyEurekaHttpClientFactory  (Map<String String> additionalHeaders boolean systemSSL){ EurekaJerseyClientBuilder clientBuilder=new EurekaJerseyClientBuilder().withClientName(clientName).withUserAgent(""Java-EurekaClient"").withConnectionTimeout(connectionTimeout).withReadTimeout(readTimeout).withMaxConnectionsPerHost(maxConnectionsPerHost).withMaxTotalConnections(maxTotalConnections).withConnectionIdleTimeout((int)connectionIdleTimeout).withEncoderWrapper(encoderWrapper).withDecoderWrapper(decoderWrapper); if (systemSSL) { clientBuilder.withSystemSSLConfiguration(); } else if (sslContext != null) { clientBuilder.withCustomSSL(sslContext); } if (hostnameVerifier != null) { clientBuilder.withHostnameVerifier(hostnameVerifier); } EurekaJerseyClient jerseyClient=clientBuilder.build(); ApacheHttpClient4 discoveryApacheClient=jerseyClient.getClient(); addFilters(discoveryApacheClient); return new JerseyEurekaHttpClientFactory(jerseyClient additionalHeaders); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,create,"public static JerseyEurekaHttpClientFactory  (EurekaClientConfig clientConfig Collection<ClientFilter> additionalFilters InstanceInfo myInstanceInfo AbstractEurekaIdentity clientIdentity Optional<SSLContext> sslContext Optional<HostnameVerifier> hostnameVerifier){ JerseyEurekaHttpClientFactoryBuilder clientBuilder=newBuilder().withAdditionalFilters(additionalFilters).withMyInstanceInfo(myInstanceInfo).withUserAgent(""Java-EurekaClient"").withClientConfig(clientConfig).withClientIdentity(clientIdentity); sslContext.ifPresent(clientBuilder::withSSLContext); hostnameVerifier.ifPresent(clientBuilder::withHostnameVerifier); if (""true"".equals(System.getProperty(""com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory""))) { clientBuilder.withClientName(""DiscoveryClient-HTTPClient-System"").withSystemSSLConfiguration(); } else if (clientConfig.getProxyHost() != null && clientConfig.getProxyPort() != null) { clientBuilder.withClientName(""Proxy-DiscoveryClient-HTTPClient"").withProxy(clientConfig.getProxyHost() Integer.parseInt(clientConfig.getProxyPort()) clientConfig.getProxyUserName() clientConfig.getProxyPassword()); } else { clientBuilder.withClientName(""DiscoveryClient-HTTPClient""); } return clientBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,createConnectionManager,"private ThreadSafeClientConnManager  (){ try { ThreadSafeClientConnManager connectionManager; if (sslContext != null) { SchemeSocketFactory socketFactory=new SSLSocketFactory(sslContext new AllowAllHostnameVerifier()); SchemeRegistry sslSchemeRegistry=new SchemeRegistry(); sslSchemeRegistry.register(new Scheme(""https"" 443 socketFactory)); connectionManager=new ThreadSafeClientConnManager(sslSchemeRegistry); } else { connectionManager=new ThreadSafeClientConnManager(); } return connectionManager; } catch ( Exception e) { throw new IllegalStateException(""Cannot initialize Apache connection manager"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,experimentalBuilder,public static JerseyEurekaHttpClientFactoryBuilder  (){ return new JerseyEurekaHttpClientFactoryBuilder().withExperimental(true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,newBuilder,public static JerseyEurekaHttpClientFactoryBuilder  (){ return new JerseyEurekaHttpClientFactoryBuilder().withExperimental(false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,newClient,@Override public EurekaHttpClient  (EurekaEndpoint endpoint){ return new JerseyApplicationClient(apacheClient endpoint.getServiceUrl() additionalHeaders); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,shutdown,@Override public void  (){ cleaner.shutdown(); if (jerseyClient != null) { jerseyClient.destroyResources(); } else { apacheClient.destroy(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,withAdditionalFilters,public JerseyEurekaHttpClientFactoryBuilder  (Collection<ClientFilter> additionalFilters){ this.additionalFilters=additionalFilters; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\jersey\JerseyEurekaHttpClientFactory.java,withExperimental,public JerseyEurekaHttpClientFactoryBuilder  (boolean experimental){ this.experimental=experimental; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportException.java,TransportException,public  (String message Throwable cause){ super(message cause); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportUtils.java,getOrSetAnotherClient,public static EurekaHttpClient  (AtomicReference<EurekaHttpClient> eurekaHttpClientRef EurekaHttpClient another){ EurekaHttpClient existing=eurekaHttpClientRef.get(); if (eurekaHttpClientRef.compareAndSet(null another)) { return another; } another.shutdown(); return existing; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\shared\transport\TransportUtils.java,shutdown,public static void  (EurekaHttpClient eurekaHttpClient){ if (eurekaHttpClient != null) { eurekaHttpClient.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\TimedSupervisorTask.java,TimedSupervisorTask,"public  (String name ScheduledExecutorService scheduler ThreadPoolExecutor executor int timeout TimeUnit timeUnit int expBackOffBound Runnable task){ this.scheduler=scheduler; this.executor=executor; this.timeoutMillis=timeUnit.toMillis(timeout); this.task=task; this.delay=new AtomicLong(timeoutMillis); this.maxDelay=timeoutMillis * expBackOffBound; timeoutCounter=Monitors.newCounter(""timeouts""); rejectedCounter=Monitors.newCounter(""rejectedExecutions""); throwableCounter=Monitors.newCounter(""throwables""); threadPoolLevelGauge=new LongGauge(MonitorConfig.builder(""threadPoolUsed"").build()); Monitors.registerObject(name this); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\TimedSupervisorTask.java,run,@Override public void  (){ Future<?> future=null; try { future=executor.submit(task); threadPoolLevelGauge.set((long)executor.getActiveCount()); future.get(timeoutMillis TimeUnit.MILLISECONDS); delay.set(timeoutMillis); threadPoolLevelGauge.set((long)exec
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,StatusChangeEvent,public  (InstanceInfo.InstanceStatus previous InstanceInfo.InstanceStatus current){ super(); this.current=current; this.previous=previous; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,getPreviousStatus,public InstanceInfo.InstanceStatus  (){ return previous; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,getStatus,public InstanceInfo.InstanceStatus  (){ return current; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,isUp,public boolean  (){ return this.current.equals(InstanceInfo.InstanceStatus.UP); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\StatusChangeEvent.java,toString,"@Override public String  (){ return ""StatusChangeEvent [timestamp="" + getTimestamp() + ""  current=""+ current+ ""  previous=""+ previous+ ""]""; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,DiscoveryBuildInfo," (Class<?> clazz){ Manifest resolvedManifest=null; try { String jarUrl=resolveJarUrl(clazz); if (jarUrl != null) { resolvedManifest=loadManifest(jarUrl); } } catch ( Throwable e) { logger.warn(""Cannot load eureka-client manifest file; no build meta data are available"" e); } this.manifest=resolvedManifest; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,buildVersion,public static String  (){ return INSTANCE.getBuildVersion(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,getBuildVersion,"String  (){ return getManifestAttribute(""Implementation-Version"" ""<version_unknown>""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,getManifestAttribute,String  (String name String defaultValue){ if (manifest == null) { return defaultValue; } Name attrName=new Name(name); Object value=manifest.getMainAttributes().get(attrName); return value == null ? defaultValue : value.toString(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,loadManifest,"private static Manifest  (String jarUrl) throws Exception { InputStream is=new URL(jarUrl + ""!/META-INF/MANIFEST.MF"").openStream(); try { return new Manifest(is); } finally { is.close(); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DiscoveryBuildInfo.java,resolveJarUrl,"private static String  (Class<?> clazz){ URL location=clazz.getResource('/' + clazz.getName().replace('.' '/') + "".class""); if (location != null) { Matcher matcher=Pattern.compile(""(jar:file.*-[\\d.]+(-rc[\\d]+|-SNAPSHOT)?.jar)!.*$"").matcher(location.toString()); if (matcher.matches()) { return matcher.group(1); } } return null; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,equal,private static boolean  (Map<String String> first Map<String String> second){ if (first == second) { return true; } if (first == null || first == null && second != null || first.size() != second.size()) { return false; } for ( Map.Entry<String String> entry : first.entrySet()) { if (!second.containsKey(entry.getKey())) { return false; } String firstValue=entry.getValue(); String secondValue=second.get(entry.getKey()); if (!firstValue.equals(secondValue)) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,equalMini,public static boolean  (InstanceInfo first InstanceInfo second){ if (first == second) { return true; } if (first == null || first == null && second != null) { return false; } if (first.getPort() != second.getPort()) { return false; } if (first.getSecurePort() != second.getSecurePort()) { return false; } if (first.getActionType() != second.getActionType()) { return false; } if (first.getInstanceId() != null ? !first.getInstanceId().equals(second.getInstanceId()) : second.getInstanceId() != null) { return false; } if (first.getAppName() != null ? !first.getAppName().equals(second.getAppName()) : second.getAppName() != null) { return false; } if (first.getASGName() != null ? !first.getASGName().equals(second.getASGName()) : second.getASGName() != null) { return false; } if (!subsetOf(first.getDataCenterInfo() second.getDataCenterInfo())) { return false; } if (first.getHostName() != null ? !first.getHostName().equals(second.getHostName()) : second.getHostName() != null) { return false; } if (first.getIPAddr() != null ? !first.getIPAddr().equals(second.getIPAddr()) : second.getIPAddr() != null) { return false; } if (first.getVIPAddress() != null ? !first.getVIPAddress().equals(second.getVIPAddress()) : second.getVIPAddress() != null) { return false; } if (first.getSecureVipAddress() != null ? !first.getSecureVipAddress().equals(second.getSecureVipAddress()) : second.getSecureVipAddress() != null) { return false; } if (first.getStatus() != null ? !first.getStatus().equals(second.getStatus()) : second.getStatus() != null) { return false; } if (first.getLastUpdatedTimestamp() != second.getLastUpdatedTimestamp()) { return false; } return true; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,equals,@Override public boolean  (InstanceInfo first InstanceInfo second){ return first.getId() != null ? first.getId().equals(second.getId()) : second.getId() == null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,idEqual,private static boolean  (InstanceInfo first InstanceInfo second){ return first.getId().equals(second.getId()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityComparators.java,subsetOf,public static boolean  (AmazonInfo first AmazonInfo second){ if (first == second) { return true; } if (first == null || first == null && second != null) { return false; } return first.getMetadata().entrySet().containsAll(second.getMetadata().entrySet()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,ArrayCharBuffer, (JsonParser source Supplier<String> valueTransform) throws IOException { this(source); this.valueTransform=valueTransform; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,DeserializerStringCache,private  (Map<CharBuffer String> globalCache Map<CharBuffer String> applicationCache){ this.globalCache=globalCache; this.applicationCache=applicationCache; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,StringCharBuffer, (String source){ this.source=source; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,apply,"public String  (final String stringValue CacheScope cacheScope){ if (stringValue != null && (lengthLimit < 0 || stringValue.length() <= lengthLimit)) { return (String)(cacheScope == CacheScope.GLOBAL_SCOPE ? globalCache : applicationCache).computeIfAbsent(CharBuffer.wrap(stringValue) s -> { logger.trace("" (string) writing new interned value {} into {} cache scope"" stringValue cacheScope); return stringValue; } ); } return stringValue; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,arrayHash,private static int  (char[] a int offset int length){ if (a == null) return 0; int result=0; int limit=offset + length; for (int i=offset; i < limit; i++) { result=31 * result + a[i]; } return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,chars,@Override public OfInt  (){ return new OfInt(){ int index; @Override public boolean hasNext(){ return index < source.length(); } @Override public int nextInt(){ return source.charAt(index++); } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,clear,"public static void  (DeserializationContext context CacheScope scope){ withCache(context cache -> { if (scope == CacheScope.GLOBAL_SCOPE) { if (debugLogEnabled) logger.debug(""clearing global-level serialization cache with size {}"" cache.globalCache.size()); cache.globalCache.clear(); } if (debugLogEnabled) logger.debug(""clearing app-level serialization cache with size {}"" cache.applicationCache.size()); cache.applicationCache.clear(); return null; } ); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,consume,@Override public String  (BiConsumer<CharBuffer String> valueConsumer){ valueConsumer.accept(this source); return source; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,equals,@Override public boolean  (Object other){ if (other instanceof CharBuffer) { CharBuffer otherBuffer=(CharBuffer)other; int length=source.length(); if (otherBuffer.length() == length) { OfInt otherText=otherBuffer.chars(); for (int i=0; i < length; i++) { 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,from,public static DeserializerStringCache  (DeserializationContext context){ return withCache(context cache -> { if (cache == null) { cache=new DeserializerStringCache(new HashMap<CharBuffer String>() new HashMap<CharBuffer String>()); } return cache; } ); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,hasNext,@Override public boolean  (){ return index < source.length(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,hashCode,@Override public int  (){ return source.hashCode(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,init,public static ObjectReader  (ObjectReader reader DeserializationContext context){ return withCache(context cache -> { if (cache == null) throw new IllegalStateException(); return reader.withAttribute(ATTR_STRING_CACHE cache); } ); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,initReader,public ObjectReader  (ObjectReader reader){ return reader.withAttribute(ATTR_STRING_CACHE this); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,length,@Override public int  (){ return source.length(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,nextInt,@Override public int  (){ return source.charAt(index++); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,removeEldestEntry,@Override protected boolean  (Entry<CharBuffer String> eldest){ return size() > LRU_LIMIT; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,size,public int  (){ return globalCache.size() + applicationCache.size(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,toString,@Override public String  (){ return source; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,withCache,private static <T>T  (ObjectReader reader Function<DeserializerStringCache T> consumer){ DeserializerStringCache cache=(DeserializerStringCache)reader.getAttributes().getAttribute(ATTR_STRING_CACHE); return consumer.apply(cache); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\DeserializerStringCache.java,wrap,public static CharBuffer  (String source){ return new StringCharBuffer(source); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,comparatorByAppNameAndId,public static Comparator<InstanceInfo>  (){ return INSTANCE_APP_ID_COMPARATOR; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,compare,@Override public int  (InstanceInfo o1 InstanceInfo o2){ int ac=compareStrings(o1.getAppName() o2.getAppName()); if (ac != 0) { return ac; } return compareStrings(o1.getId() o2.getId()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,compareStrings,private int  (String s1 String s2){ if (s1 == null) { if (s2 != null) { return -1; } } if (s2 == null) { return 1; } return s1.compareTo(s2); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copyApplication,public static void  (Application source Application result){ if (source != null) { for ( InstanceInfo instance : source.getInstances()) { result.addInstance(instance); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copyApplications,public static void  (Applications source Applications result){ if (source != null) { for ( Application app : source.getRegisteredApplications()) { result.addApplication(new Application(app.getName() app.getInstances())); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copyInstance,public static InstanceInfo  (InstanceInfo original ActionType actionType){ InstanceInfo copy=new InstanceInfo(original); copy.setActionType(actionType); return copy; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,copyInstances,public static Collection<InstanceInfo>  (Collection<InstanceInfo> instances ActionType actionType){ List<InstanceInfo> result=new ArrayList<>(); for ( InstanceInfo instance : instances) { result.add(copyInstance(instance actionType)); } return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,countInstances,public static int  (Applications applications){ int count=0; for ( Application application : applications.getRegisteredApplications()) { count+=application.getInstances().size(); } return count; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,deepCopyApplication,public static Application  (Application source){ Application result=new Application(source.getName()); deepCopyApplication(source result EurekaEntityTransformers.<InstanceInfo>identity()); return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,deepCopyApplications,public static Applications  (Applications source){ Applications result=new Applications(); for ( Application application : source.getRegisteredApplications()) { result.addApplication(deepCopyApplication(application)); } return updateMeta(result); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,mergeApplication,"public static Application  (Application first Application second){ if (!first.getName().equals(second.getName())) { throw new IllegalArgumentException(""Cannot merge applications with different names""); } Application merged=copyApplication(first); for ( InstanceInfo instance : second.getInstances()) { switch (instance.getActionType()) { case ADDED: case MODIFIED: merged.addInstance(instance); break; case DELETED: merged.removeInstance(instance); } } return merged; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,mergeApplications,public static Applications  (Applications first Applications second){ Set<String> firstNames=selectApplicationNames(first); Set<String> secondNames=selectApplicationNames(second); Set<String> allNames=new HashSet<String>(firstNames); allNames.addAll(secondNames); Applications merged=new Applications(); for ( String appName : allNames) { if (firstNames.contains(appName)) { if (secondNames.contains(appName)) { merged.addApplication(mergeApplication(first.getRegisteredApplications(appName) second.getRegisteredApplications(appName))); } else { merged.addApplication(copyApplication(first.getRegisteredApplications(appName))); } } else { merged.addApplication(copyApplication(second.getRegisteredApplications(appName))); } } return updateMeta(merged); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,selectAll,public static Collection<InstanceInfo>  (Applications applications){ List<InstanceInfo> all=new ArrayList<>(); for ( Application a : applications.getRegisteredApplications()) { all.addAll(a.getInstances()); } return all; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,selectApplicationNames,public static Set<String>  (Applications applications){ Set<String> result=new HashSet<>(); for ( Application app : applications.getRegisteredApplications()) { result.add(app.getName()); } return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,selectInstance,public static InstanceInfo  (Applications applications String appName String id){ Application application=applications.getRegisteredApplications(appName); if (application != null) { for ( InstanceInfo instance : application.getInstances()) { if (instance.getId().equals(id)) { return instance; } } } return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,selectInstancesMappedById,public static Map<String InstanceInfo>  (Application application){ Map<String InstanceInfo> result=new HashMap<>(); for ( InstanceInfo instance : application.getInstances()) { result.put(instance.getId() instance); } return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,takeFirst,public static InstanceInfo  (Applications applications){ for ( Application application : applications.getRegisteredApplications()) { if (!application.getInstances().isEmpty()) { return application.getInstances().get(0); } } return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,toApplicationMap,public static Map<String Application>  (List<InstanceInfo> instances){ Map<String Application> applicationMap=new HashMap<String Application>(); for ( InstanceInfo instance : instances) { String appName=instance.getAppName(); Application application=applicationMap.get(appName); if (application == null) { applicationMap.put(appName application=new Application(appName)); } application.addInstance(instance); } return applicationMap; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,toApplications,public static Applications  (List<InstanceInfo> instances){ Applications result=new Applications(); for ( InstanceInfo instance : instances) { Application app=result.getRegisteredApplications(instance.getAppName()); if (app == null) { app=new Application(instance.getAppName()); result.addApplication(app); } app.addInstance(instance); } return updateMeta(result); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityFunctions.java,updateMeta,public static Applications  (Applications applications){ applications.setVersion(1L); applications.setAppsHashCode(applications.getReconcileHashCode()); return applications; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityTransformers.java,actionTypeSetter,"public static Transformer<InstanceInfo>  (ActionType actionType){ switch (actionType) { case ADDED: return ADD_ACTION_SETTER_TRANSFORMER; case MODIFIED: return MODIFIED_ACTION_SETTER_TRANSFORMER; case DELETED: return DELETED_ACTION_SETTER_TRANSFORMER; } throw new IllegalStateException(""Unhandled ActionType value "" + actionType); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityTransformers.java,apply,@Override public InstanceInfo  (InstanceInfo instance){ InstanceInfo copy=new InstanceInfo(instance); copy.setActionType(ActionType.DELETED); return copy; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaEntityTransformers.java,identity,public static <T>Transformer<T>  (){ return (Transformer<T>)IDENTITY_TRANSFORMER; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,ExceptionsMetric,public  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,count,public void  (Throwable ex){ getOrCreateCounter(extractName(ex)).increment(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,extractName,private static String  (Throwable ex){ Throwable cause=ex; while (cause.getCause() != null) { cause=cause.getCause(); } return cause.getClass().getSimpleName(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,getOrCreateCounter,"private Counter  (String exceptionName){ Counter counter=exceptionCounters.get(exceptionName); if (counter == null) { counter=new BasicCounter(MonitorConfig.builder(name).withTag(""id"" exceptionName).build()); if (exceptionCounters.putIfAbsent(exceptionName counter) == null) { DefaultMonitorRegistry.getInstance().register(counter); } else { counter=exceptionCounters.get(exceptionName); } } return counter; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ExceptionsMetric.java,shutdown,public void  (){ ServoUtil.unregister(exceptionCounters.values()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,getPrivateIp,public static String  (InstanceInfo instanceInfo){ String defaultPrivateIp=null; if (instanceInfo.getDataCenterInfo() instanceof AmazonInfo) { defaultPrivateIp=((AmazonInfo)instanceInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.localIpv4); } if (isNullOrEmpty(defaultPrivateIp)) { defaultPrivateIp=instanceInfo.getIPAddr(); } return defaultPrivateIp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,isInEc2,"public static boolean  (InstanceInfo instanceInfo){ if (instanceInfo.getDataCenterInfo() instanceof AmazonInfo) { String instanceId=((AmazonInfo)instanceInfo.getDataCenterInfo()).getId(); if (instanceId != null && instanceId.startsWith(""i-"")) { return true; } } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,isInVpc,public static boolean  (InstanceInfo instanceInfo){ if (instanceInfo.getDataCenterInfo() instanceof AmazonInfo) { AmazonInfo info=(AmazonInfo)instanceInfo.getDataCenterInfo(); String vpcId=info.get(AmazonInfo.MetaDataKey.vpcId); return !isNullOrEmpty(vpcId); } return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\EurekaUtils.java,isNullOrEmpty,private static boolean  (String str){ return str == null || str.isEmpty(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,RateLimiter,"public  (TimeUnit averageRateUnit){ switch (averageRateUnit) { case SECONDS: rateToMsConversion=1000; break; case MINUTES: rateToMsConversion=60 * 1000; break; default : throw new IllegalArgumentException(""TimeUnit of "" + averageRateUnit + "" is not supported""); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,acquire,public boolean  (int burstSize long averageRate long currentTimeMillis){ if (burstSize <= 0 || averageRate <= 0) { return true; } refillToken(burstSize averageRate currentTimeMillis); return consumeToken(burstSize); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,consumeToken,private boolean  (int burstSize){ while (true) { int currentLevel=consumedTokens.get(); if (currentLevel >= burstSize) { return false; } if (consumedTokens.compareAndSet(currentLevel currentLevel + 1)) { return true; } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,refillToken,private void  (int burstSize long averageRate long currentTimeMillis){ long refillTime=lastRefillTime.get(); long timeDelta=currentTimeMillis - refillTime; long newTokens=timeDelta * averageRate / rateToMsConversion; if (newTokens > 0) { long newRefillTime=refillTime == 0 ? currentTimeMillis : refillTime + newTokens * rateToMsConversion / averageRate; if (lastRefillTime.compareAndSet(refillTime newRefillTime)) { while (true) { int currentLevel=consumedTokens.get(); int adjustedLevel=Math.min(currentLevel burstSize); int newLevel=(int)Math.max(0 adjustedLevel - newTokens); if (consumedTokens.compareAndSet(currentLevel newLevel)) { return; } } } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\RateLimiter.java,reset,public void  (){ consumedTokens.set(0); lastRefillTime.set(0); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ServoUtil.java,register,"public static <T>boolean  (Monitor<T> monitor){ try { DefaultMonitorRegistry.getInstance().register(monitor); } catch ( Exception e) { logger.warn(""Cannot register monitor {}"" monitor.getConfig().getName()); if (logger.isDebugEnabled()) { logger.debug(e.getMessage() e); } return false; } return true; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ServoUtil.java,unregister,public static <M extends Monitor>void  (Collection<M> monitors){ for ( M monitor : monitors) { unregister(monitor); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,StringCache,public  (int lengthLimit){ this.lengthLimit=lengthLimit; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,cachedValueOf,public String  (final String str){ if (str != null && (lengthLimit < 0 || str.length() <= lengthLimit)) { try { lock.readLock().lock(); WeakReference<String> ref=cache.get(str); if (ref != null) { return ref.get(); } } finally { lock.readLock().unlock(); } try { lock.writeLock().lock(); WeakReference<String> ref=cache.get(str); if (ref != null) { return ref.get(); } cache.put(str new WeakReference<>(str)); } finally { lock.writeLock().unlock(); } return str; } return str; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,intern,public static String  (String original){ return INSTANCE.cachedValueOf(original); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringCache.java,size,public int  (){ try { lock.readLock().lock(); return cache.size(); } finally { lock.readLock().unlock(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\StringUtil.java,join,public static String  (String... values){ if (values == null || values.length == 0) { return null; } StringBuilder sb=new StringBuilder(); for ( String value : values) { sb.append(' ').append(value); } return sb.substring(1); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\SystemUtil.java,getServerIPv4,"public static String  (){ String candidateAddress=null; try { Enumeration<NetworkInterface> nics=NetworkInterface.getNetworkInterfaces(); while (nics.hasMoreElements()) { NetworkInterface nic=nics.nextElement(); Enumeration<InetAddress> inetAddresses=nic.getInetAddresses(); while (inetAddresses.hasMoreElements()) { String address=inetAddresses.nextElement().getHostAddress(); String nicName=nic.getName(); if (nicName.startsWith(""eth0"") || nicName.startsWith(""en0"")) { return address; } if (nicName.endsWith(""0"") || candidateAddress == null) { candidateAddress=address; } } } } catch ( SocketException e) { throw new RuntimeException(""Cannot resolve local network address"" e); } return candidateAddress == null ? ""127.0.0.1"" : candidateAddress; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\SystemUtil.java,main,"public static void  (String[] args){ System.out.println(""Found IP="" + getServerIPv4()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java,NoOpThresholdLevelMetric,public  (){ super(null null new long[]{}); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\main\java\com\netflix\discovery\util\ThresholdLevelsMetric.java,ThresholdLevelsMetric,"public  (Object owner String prefix long[] levels){ this.levels=levels; this.gauges=new LongGauge[levels.length]; for (int i=0; i < levels.length; i++) { String name=prefix + String.format(""%05d"" levels[i]); MonitorConfig config=new MonitorConfig.Builder(name).withTag(""class"" owner.getClass().getName()).build(); gauges[i]=new LongGauge(config); try { DefaultMonitorRegistry.getInstance().register(gauges[i]); } catch ( Throwable e) { logger.warn(""Cannot register metric {}"" name e); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\AmazonInfoTest.java,testExtractAccountId,"@Test public void  () throws Exception { String json=""{\n"" + "" \""imageId\"" : \""ami-someId\"" \n"" + "" \""instanceType\"" : \""m1.small\"" \n""+ "" \""version\"" : \""2000-00-00\"" \n""+ "" \""architecture\"" : \""x86_64\"" \n""+ "" \""accountId\"" : \""1111111111\"" \n""+ "" \""ins"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,map,@Override public InstanceInfo.InstanceStatus  (InstanceInfo.InstanceStatus prev){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,setUp,@Before public void  (){ AmazonInfo initialAmazonInfo=AmazonInfo.Builder.newBuilder().build(); config=spy(new CloudInstanceConfig(initialAmazonInfo)); instanceInfo=InstanceInfoGenerator.takeOne(); this.applicationInfoManager=new ApplicationInfoManager(con
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,testCustomInstanceStatusMapper,@Test public void  (){ ApplicationInfoManager.OptionalArgs optionalArgs=new ApplicationInfoManager.OptionalArgs(); optionalArgs.setInstanceStatusMapper(new ApplicationInfoManager.InstanceStatusMapper(){ @Override public InstanceInfo.InstanceStatus map( In
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,testNullResultInstanceStatusMapper,@Test public void  (){ ApplicationInfoManager.OptionalArgs optionalArgs=new ApplicationInfoManager.OptionalArgs(); optionalArgs.setInstanceStatusMapper(new ApplicationInfoManager.InstanceStatusMapper(){ @Override public InstanceInfo.InstanceStatus map( In
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\ApplicationInfoManagerTest.java,testRefreshDataCenterInfoWithAmazonInfo,"@Test public void  (){ String newPublicHostname=""newValue""; assertThat(instanceInfo.getHostName() is(not(newPublicHostname))); ((AmazonInfo)config.getDataCenterInfo()).getMetadata().put(publicHostname.getName() newPublicHostname); applicationInfoManager.r"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,createConfig,private CloudInstanceConfig  (AmazonInfo info){ return new CloudInstanceConfig(info){ @Override public String[] getDefaultAddressResolutionOrder(){ return new String[]{publicHostname.name() localIpv4.name()}; } @Override public String getHostName( boolean refresh){ return dummyDefault; } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,getDefaultAddressResolutionOrder,@Override public String[]  (){ return new String[]{publicHostname.name() localIpv4.name()}; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,getHostName,@Override public String  (boolean refresh){ return dummyDefault; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,setUp,@Before public void  (){ instanceInfo=InstanceInfoGenerator.takeOne(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\CloudInstanceConfigTest.java,testResolveDefaultAddress,@Test public void  (){ AmazonInfo info=(AmazonInfo)instanceInfo.getDataCenterInfo(); config=createConfig(info); assertThat(config.resolveDefaultAddress(false) is(info.get(publicHostname))); info.getMetadata().remove(publicHostname.getName()); config=creat
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\AbstractDiscoveryClientTester.java,setUp,@Before public void  () throws Exception { setupProperties(); populateLocalRegistryAtStartup(); populateRemoteRegistryAtStartup(); setupDiscoveryClient(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\AbstractDiscoveryClientTester.java,tearDown,@After public void  () throws Exception { shutdownDiscoveryClient(); DiscoveryClientResource.clearDiscoveryClientConfig(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,createLocalApps,private Application  (){ Application myapp=new Application(LOCAL_REGION_APP_NAME); InstanceInfo instanceInfo=createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME); myapp.addInstance(instanceInfo); return myapp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,createLocalInstance,"private InstanceInfo  (String instanceHostName){ InstanceInfo.Builder instanceBuilder=InstanceInfo.Builder.newBuilder(); instanceBuilder.setAppName(LOCAL_REGION_APP_NAME); instanceBuilder.setVIPAddress(ALL_REGIONS_VIP_ADDR); instanceBuilder.setHostName(instanceHostName); instanceBuilder.setIPAddr(""10.10.101.1""); AmazonInfo amazonInfo=getAmazonInfo(null instanceHostName); instanceBuilder.setDataCenterInfo(amazonInfo); instanceBuilder.setMetadata(amazonInfo.getMetadata()); return instanceBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,createRemoteApps,private Application  (){ Application myapp=new Application(REMOTE_REGION_APP_NAME); InstanceInfo instanceInfo=createRemoteInstance(REMOTE_REGION_INSTANCE_1_HOSTNAME); myapp.addInstance(instanceInfo); return myapp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,createRemoteInstance,"private InstanceInfo  (String instanceHostName){ InstanceInfo.Builder instanceBuilder=InstanceInfo.Builder.newBuilder(); instanceBuilder.setAppName(REMOTE_REGION_APP_NAME); instanceBuilder.setVIPAddress(ALL_REGIONS_VIP_ADDR); instanceBuilder.setHostName(instanceHostName); instanceBuilder.setIPAddr(""10.10.101.1""); AmazonInfo amazonInfo=getAmazonInfo(REMOTE_ZONE instanceHostName); instanceBuilder.setDataCenterInfo(amazonInfo); instanceBuilder.setMetadata(amazonInfo.getMetadata()); return instanceBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,getAmazonInfo,"private AmazonInfo  (@Nullable String availabilityZone String instanceHostName){ AmazonInfo.Builder azBuilder=AmazonInfo.Builder.newBuilder(); azBuilder.addMetadata(AmazonInfo.MetaDataKey.availabilityZone (null == availabilityZone) ? ""us-east-1a"" : availabilityZone); azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceId instanceHostName); azBuilder.addMetadata(AmazonInfo.MetaDataKey.amiId ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceType ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.localIpv4 ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicIpv4 ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicHostname instanceHostName); return azBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,setUp,"public void  (boolean enableRemote) throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.client.refresh.interval"" CLIENT_REFRESH_RATE); ConfigurationManager.getConfigInstance().setProperty(""eureka.registration.enabled"" ""false""); if (enableRemote) { ConfigurationManager.getConfigInstance().setProperty(""eureka.fetchRemoteRegionsRegistry"" REMOTE_REGION); } ConfigurationManager.getConfigInstance().setProperty(""eureka.myregion.availabilityZones"" REMOTE_ZONE); ConfigurationManager.getConfigInstance().setProperty(""eureka.backupregistry"" MockBackupRegistry.class.getName()); ConfigurationManager.getConfigInstance().setProperty(""eureka.serviceUrl.default"" ""http://localhost:"" + NOT_AVAILABLE_EUREKA_PORT + MockRemoteEurekaServer.EUREKA_API_BASE_PATH); InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder(); builder.setIPAddr(""10.10.101.00""); builder.setHostName(""Hosttt""); builder.setAppName(""EurekaTestApp-"" + UUID.randomUUID()); builder.setDataCenterInfo(new DataCenterInfo(){ @Override public Name getName(){ return Name.MyOwn; } } ); ApplicationInfoManager applicationInfoManager=new ApplicationInfoManager(new MyDataCenterInstanceConfig() builder.build()); backupRegistry=new MockBackupRegistry(); setupBackupMock(); client=new DiscoveryClient(applicationInfoManager new DefaultEurekaClientConfig() null Providers.of((BackupRegistry)backupRegistry)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,setupBackupMock,private void  (){ Application localApp=createLocalApps(); Applications localApps=new Applications(); localApps.addApplication(localApp); backupRegistry.setLocalRegionApps(localApps); Application remoteApp=createRemoteApps(); Applications remoteApps=new Applications(); remoteApps.addApplication(remoteApp); backupRegistry.getRemoteRegionVsApps().put(REMOTE_REGION remoteApps); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,tearDown,@After public void  () throws Exception { client.shutdown(); ConfigurationManager.getConfigInstance().clear(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,testAppsHashCode,"@Test public void  () throws Exception { setUp(true); Applications applications=client.getApplications(); Assert.assertEquals(""UP_1_"" applications.getAppsHashCode()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,testLocalOnly,"@Test public void  () throws Exception { setUp(false); Applications applications=client.getApplications(); List<Application> registeredApplications=applications.getRegisteredApplications(); System.out.println(""***"" + registeredApplications); Assert.assert"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,testRemoteEnabledAndQueried,"@Test public void  () throws Exception { setUp(true); Applications applications=client.getApplicationsForARegion(REMOTE_REGION); List<Application> registeredApplications=applications.getRegisteredApplications(); Assert.assertNotNull(""Remote region apps no"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BackUpRegistryTest.java,testRemoteEnabledButLocalOnlyQueried,"@Test public void  () throws Exception { setUp(true); Applications applications=client.getApplications(); List<Application> registeredApplications=applications.getRegisteredApplications(); Assert.assertNotNull(""Local region apps not found."" registeredAppl"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,copyAmazonInfo,private static AmazonInfo  (InstanceInfo instanceInfo){ AmazonInfo currInfo=(AmazonInfo)instanceInfo.getDataCenterInfo(); AmazonInfo copyInfo=new AmazonInfo(); for ( String key : currInfo.getMetadata().keySet()) { copyInfo.getMetadata().put(key currInfo.getMetadata().get(key)); } return copyInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,setUp,@Before public void  (){ instanceInfo=InstanceInfoGenerator.takeOne(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,testAmazonInfoNoUpdateIfEmpty,@Test public void  (){ AmazonInfo oldInfo=(AmazonInfo)instanceInfo.getDataCenterInfo(); AmazonInfo newInfo=new AmazonInfo(); assertThat(RefreshableAmazonInfoProvider.shouldUpdate(newInfo oldInfo) is(false)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,testAmazonInfoNoUpdateIfEqual,@Test public void  (){ AmazonInfo oldInfo=(AmazonInfo)instanceInfo.getDataCenterInfo(); AmazonInfo newInfo=copyAmazonInfo(instanceInfo); assertThat(RefreshableAmazonInfoProvider.shouldUpdate(newInfo oldInfo) is(false)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,testAmazonInfoNoUpdateIfNoInstanceId,@Test public void  (){ AmazonInfo oldInfo=(AmazonInfo)instanceInfo.getDataCenterInfo(); AmazonInfo newInfo=copyAmazonInfo(instanceInfo); newInfo.getMetadata().remove(instanceId.getName()); assertThat(newInfo.getId() is(nullValue())); assertThat(newInfo.ge
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,testAmazonInfoNoUpdateIfNoLocalIpv4,@Test public void  (){ AmazonInfo oldInfo=(AmazonInfo)instanceInfo.getDataCenterInfo(); AmazonInfo newInfo=copyAmazonInfo(instanceInfo); newInfo.getMetadata().remove(localIpv4.getName()); assertThat(newInfo.get(localIpv4) is(nullValue())); assertThat(Clou
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\RefreshableAmazonInfoProviderTest.java,testAmazonInfoUpdatePositiveCase,@Test public void  (){ AmazonInfo oldInfo=(AmazonInfo)instanceInfo.getDataCenterInfo(); AmazonInfo newInfo=copyAmazonInfo(instanceInfo); newInfo.getMetadata().remove(amiId.getName()); assertThat(newInfo.getMetadata().size() is(oldInfo.getMetadata().size()
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,getName,public DataCenterInfo.Name  (){ return DataCenterInfo.Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,tearDown,"@After public void  () throws Exception { ((ConcurrentCompositeConfiguration)ConfigurationManager.getConfigInstance()).clearOverrideProperty(""NETFLIX_APP_GROUP""); ((ConcurrentCompositeConfiguration)ConfigurationManager.getConfigInstance()).clearOverridePr"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,testAppGroupName,"@Test public void  () throws Exception { String appGroup=""testAppGroup""; ((ConcurrentCompositeConfiguration)ConfigurationManager.getConfigInstance()).setOverrideProperty(""eureka.appGroup"" appGroup); MyDataCenterInstanceConfig config=new MyDataCenterInstan"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,testAppGroupNameSystemProp,"@Test public void  () throws Exception { String appGroup=""testAppGroupSystemProp""; ((ConcurrentCompositeConfiguration)ConfigurationManager.getConfigInstance()).setOverrideProperty(""NETFLIX_APP_GROUP"" appGroup); MyDataCenterInstanceConfig config=new MyData"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,testCopyConstructor,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo smallII1=newBuilder().setAppName(""test"").setDataCenterInfo(myDCI).build(); InstanceInfo smallII2=n"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,testGetIdWithInstanceIdNotUsed,"@Test public void  (){ InstanceInfo baseline=InstanceInfoGenerator.takeOne(); InstanceInfo instanceInfo1=new InstanceInfo.Builder(baseline).setInstanceId("""").build(); String dataCenterInfoId=((UniqueIdentifier)baseline.getDataCenterInfo()).getId(); assert"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,testGetIdWithInstanceIdUsed,@Test public void  (){ InstanceInfo baseline=InstanceInfoGenerator.takeOne(); String dataCenterInfoId=((UniqueIdentifier)baseline.getDataCenterInfo()).getId(); assertThat(baseline.getInstanceId() is(baseline.getId())); assertThat(dataCenterInfoId is(basel
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\appinfo\InstanceInfoTest.java,testHealthCheckSetContainsValidUrlEntries,"@Test public void  () throws Exception { Builder builder=newBuilder().setAppName(""test"").setNamespace(""eureka."").setHostName(""localhost"").setPort(80).setSecurePort(443).enablePort(PortType.SECURE true); InstanceInfo noHealtcheckInstanceInfo=builder.build("
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EnumLookupTest.java,TestEnum,private  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EnumLookupTest.java,testLookup,"@Test public void  (){ EnumLookup<TestEnum> lookup=new EnumLookup<>(TestEnum.class v -> v.name.toCharArray()); char[] buffer=""zeroonetwothreefour"".toCharArray(); Assert.assertSame(TestEnum.VAL_ONE lookup.find(buffer 4 3)); Assert.assertSame(TestEnum.VAL_T"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,addLocalAppDelta,protected void  (){ Application myappDelta=new Application(LOCAL_REGION_APP3_NAME); InstanceInfo instanceInfo=createInstance(LOCAL_REGION_APP3_NAME ALL_REGIONS_VIP3_ADDR LOCAL_REGION_APP3_INSTANCE1_HOSTNAME null); instanceInfo.setActionType(InstanceInfo.ActionType.ADDED); myappDelta.addInstance(instanceInfo); mockLocalEurekaServer.addLocalRegionAppsDelta(LOCAL_REGION_APP3_NAME myappDelta); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,createInstance,"protected static InstanceInfo  (String appName String vipAddress String instanceHostName String zone){ InstanceInfo.Builder instanceBuilder=InstanceInfo.Builder.newBuilder(); instanceBuilder.setAppName(appName); instanceBuilder.setVIPAddress(vipAddress); instanceBuilder.setHostName(instanceHostName); instanceBuilder.setIPAddr(""10.10.101.1""); AmazonInfo amazonInfo=getAmazonInfo(zone instanceHostName); instanceBuilder.setDataCenterInfo(amazonInfo); instanceBuilder.setMetadata(amazonInfo.getMetadata()); instanceBuilder.setLeaseInfo(LeaseInfo.Builder.newBuilder().build()); return instanceBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,createLocalApps,protected static List<Application>  (){ Application myapp1=new Application(LOCAL_REGION_APP1_NAME); InstanceInfo instanceInfo1=createInstance(LOCAL_REGION_APP1_NAME ALL_REGIONS_VIP1_ADDR LOCAL_REGION_APP1_INSTANCE1_HOSTNAME null); myapp1.addInstance(instanceInfo1); Application myapp2=new Application(LOCAL_REGION_APP2_NAME); InstanceInfo instanceInfo2=createInstance(LOCAL_REGION_APP2_NAME ALL_REGIONS_VIP2_ADDR LOCAL_REGION_APP2_INSTANCE1_HOSTNAME null); myapp2.addInstance(instanceInfo2); return Arrays.asList(myapp1 myapp2); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,createLocalAppsDelta,protected static List<Application>  (){ Application myapp1=new Application(LOCAL_REGION_APP1_NAME); InstanceInfo instanceInfo1=createInstance(LOCAL_REGION_APP1_NAME ALL_REGIONS_VIP1_ADDR LOCAL_REGION_APP1_INSTANCE2_HOSTNAME null); instanceInfo1.setActionType(InstanceInfo.ActionType.ADDED); myapp1.addInstance(instanceInfo1); Application myapp2=new Application(LOCAL_REGION_APP2_NAME); InstanceInfo instanceInfo2=createInstance(LOCAL_REGION_APP2_NAME ALL_REGIONS_VIP2_ADDR LOCAL_REGION_APP2_INSTANCE2_HOSTNAME null); instanceInfo2.setActionType(InstanceInfo.ActionType.ADDED); myapp2.addInstance(instanceInfo2); return Arrays.asList(myapp1 myapp2); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,createRemoteApps,protected static List<Application>  (){ Application myapp1=new Application(REMOTE_REGION_APP1_NAME); InstanceInfo instanceInfo1=createInstance(REMOTE_REGION_APP1_NAME ALL_REGIONS_VIP1_ADDR REMOTE_REGION_APP1_INSTANCE1_HOSTNAME REMOTE_ZONE); myapp1.addInstance(instanceInfo1); Application myapp2=new Application(REMOTE_REGION_APP2_NAME); InstanceInfo instanceInfo2=createInstance(REMOTE_REGION_APP2_NAME ALL_REGIONS_VIP2_ADDR REMOTE_REGION_APP2_INSTANCE1_HOSTNAME REMOTE_ZONE); myapp2.addInstance(instanceInfo2); return Arrays.asList(myapp1 myapp2); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,createRemoteAppsDelta,protected static List<Application>  (){ Application myapp1=new Application(REMOTE_REGION_APP1_NAME); InstanceInfo instanceInfo1=createInstance(REMOTE_REGION_APP1_NAME ALL_REGIONS_VIP1_ADDR REMOTE_REGION_APP1_INSTANCE2_HOSTNAME REMOTE_ZONE); instanceInfo1.setActionType(InstanceInfo.ActionType.ADDED); myapp1.addInstance(instanceInfo1); Application myapp2=new Application(REMOTE_REGION_APP2_NAME); InstanceInfo instanceInfo2=createInstance(REMOTE_REGION_APP2_NAME ALL_REGIONS_VIP2_ADDR REMOTE_REGION_APP2_INSTANCE2_HOSTNAME REMOTE_ZONE); instanceInfo2.setActionType(InstanceInfo.ActionType.ADDED); myapp2.addInstance(instanceInfo2); return Arrays.asList(myapp1 myapp2); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,getAmazonInfo,"protected static AmazonInfo  (@Nullable String availabilityZone String instanceHostName){ AmazonInfo.Builder azBuilder=AmazonInfo.Builder.newBuilder(); azBuilder.addMetadata(AmazonInfo.MetaDataKey.availabilityZone null == availabilityZone ? ""us-east-1a"" : availabilityZone); azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceId instanceHostName); azBuilder.addMetadata(AmazonInfo.MetaDataKey.amiId ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceType ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.localIpv4 ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicIpv4 ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicHostname instanceHostName); return azBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,newInstanceInfoBuilder,protected InstanceInfo.Builder  (int renewalIntervalInSecs){ return DiscoveryClientResource.newInstanceInfoBuilder(renewalIntervalInSecs); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populateLocalRegistryAtStartup,protected void  (){ for ( Application app : createLocalApps()) { mockLocalEurekaServer.addLocalRegionApps(app.getName() app); } for ( Application appDelta : createLocalAppsDelta()) { mockLocalEurekaServer.addLocalRegionAppsDelta(appDelta.getName() appDelta); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,populateRemoteRegistryAtStartup,protected void  (){ for ( Application app : createRemoteApps()) { mockLocalEurekaServer.addRemoteRegionApps(app.getName() app); } for ( Application appDelta : createRemoteAppsDelta()) { mockLocalEurekaServer.addRemoteRegionAppsDelta(appDelta.getName() appDelta); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,setupDiscoveryClient,protected void  (int renewalIntervalInSecs){ InstanceInfo instanceInfo=newInstanceInfoBuilder(renewalIntervalInSecs).build(); client=DiscoveryClientResource.setupDiscoveryClient(instanceInfo); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,setupProperties,protected void  (){ DiscoveryClientResource.setupDiscoveryClientConfig(mockLocalEurekaServer.getPort() MockRemoteEurekaServer.EUREKA_API_BASE_PATH); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\BaseDiscoveryClientTester.java,shutdownDiscoveryClient,protected void  (){ if (client != null) { client.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,CodecLoadTester,"public  (String[] args) throws Exception { if (args.length != 1) { System.err.println(""ERROR: too many command line arguments; file name expected only""); throw new IllegalArgumentException(); } String fileName=args[0]; Applications applications; try { System.out.println(""Attempting to load "" + fileName + "" in XML format...""); applications=loadWithCodec(fileName MediaType.APPLICATION_XML_TYPE); } catch ( Exception e) { System.out.println(""Attempting to load "" + fileName + "" in JSON format...""); applications=loadWithCodec(fileName MediaType.APPLICATION_JSON_TYPE); } this.applications=applications; long totalInstances=0; for ( Application a : applications.getRegisteredApplications()) { totalInstances+=a.getInstances().size(); } System.out.printf(""Loaded %d applications with %d instances\n"" applications.getRegisteredApplications().size() totalInstances); firstHolder.value=applications; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,call,@Override public int  (Object object){ AbstractEurekaJacksonCodec codec; if (mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) { codec=compact ? jsonCodecNgCompact : jsonCodecNG; } else { codec=compact ? xmlCodecNgCompact : xmlCodecNG; } ByteArrayOutputS
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,createJacksonNgAction,"Func0  (final MediaType mediaType final boolean compact){ return new Func0<Object>(){ @Override public int call( Object object){ AbstractEurekaJacksonCodec codec; if (mediaType.equals(MediaType.APPLICATION_JSON_TYPE)) { codec=compact ? jsonCodecNgCompact : jsonCodecNG; } else { codec=compact ? xmlCodecNgCompact : xmlCodecNG; } ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); try { codec.writeTo(object captureStream); byte[] bytes=captureStream.toByteArray(); InputStream source=new ByteArrayInputStream(bytes); Applications readValue=codec.getObjectMapper(object.getClass()).readValue(source Applications.class); secondHolder.value=readValue; return bytes.length; } catch ( IOException e) { throw new RuntimeException(""unexpected"" e); } } } ; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,formatSize,"private static String  (long size){ if (size < 1000) { return String.format(""%d [bytes]"" size); } if (size < 1024 * 1024) { return String.format(""%.2f [KB]"" size / 1024f); } return String.format(""%.2f [MB]"" size / (1024f * 1024f)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,loadWithCodec,private Applications  (String fileName MediaType mediaType) throws IOException { FileInputStream fis=new FileInputStream(fileName); BufferedInputStream bis=new BufferedInputStream(fis); return (Applications)xstreamCodec.read(bis Applications.class mediaType); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,main,public static void  (String[] args) throws Exception { CodecLoadTester loadTester; if (args.length == 0) { loadTester=new CodecLoadTester(2000 40); } else { loadTester=new CodecLoadTester(args); } loadTester.runFullSpeed(); Thread.sleep(100000); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,runApplicationIntervalTest,"public void  (int batch int intervalMs long durationSec Func0 action){ long startTime=System.currentTimeMillis(); long endTime=startTime + durationSec * 1000; long now; do { now=System.currentTimeMillis(); runApplicationLoadTest(batch action); long waiting=intervalMs - (System.currentTimeMillis() - now); System.out.println(""Waiting "" + waiting + ""ms""); if (waiting > 0) { try { Thread.sleep(waiting); } catch ( InterruptedException e) { } } } while (now < endTime); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,runApplicationLoadTest,public void  (int loops Func0<Application> action){ for (int i=0; i < loops; i++) { action.call(applicationList.get(i % applicationList.size())); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,runApplicationsLoadTest,"public void  (int loops Func0<Applications> action){ long size=0; for (int i=0; i < loops; i++) { size+=action.call(applications); } System.out.println(""Average applications object size="" + formatSize(size / loops)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,runFullSpeed,"public void  (){ int loop=5; System.gc(); long start=System.currentTimeMillis(); runApplicationsLoadTest(loop createJacksonNgAction(MediaType.APPLICATION_JSON_TYPE false)); long executionTime=System.currentTimeMillis() - start; System.out.printf(""Execution time: %d[ms]\n"" executionTime); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,runInstanceInfoIntervalTest,"public void  (int batch int intervalMs long durationSec Func0 action){ long startTime=System.currentTimeMillis(); long endTime=startTime + durationSec * 1000; long now; do { now=System.currentTimeMillis(); runInstanceInfoLoadTest(batch action); long waiting=intervalMs - (System.currentTimeMillis() - now); System.out.println(""Waiting "" + waiting + ""ms""); if (waiting > 0) { try { Thread.sleep(waiting); } catch ( InterruptedException e) { } } } while (now < endTime); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,runInstanceInfoLoadTest,public void  (int loops Func0<InstanceInfo> action){ for (int i=0; i < loops; i++) { action.call(instanceInfoList.get(i % instanceInfoList.size())); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\CodecLoadTester.java,runIntervals,public void  (){ int batch=1500; int intervalMs=1000; long durationSec=600; runInstanceInfoIntervalTest(batch intervalMs durationSec xstreamJsonAction); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,downloadRegistration,"private static File  (String discoveryUrl) throws IOException { if (discoveryUrl == null) { throw new IllegalArgumentException(""null value not allowed for parameter discoveryUrl""); } File localFile=File.createTempFile(""discovery-data-"" "".json""); URL url=new URL(discoveryUrl); System.out.println(""downloading registration data from "" + url + "" to ""+ localFile); HttpURLConnection hurlConn=(HttpURLConnection)url.openConnection(); hurlConn.setDoOutput(true); hurlConn.setRequestProperty(""accept"" ""application/json""); hurlConn.connect(); try (InputStream is=hurlConn.getInputStream()){ java.nio.file.Files.copy(is localFile.toPath() StandardCopyOption.REPLACE_EXISTING); } return localFile; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,testCuriosity,"@Test public void  (){ char[] arr1=""test"".toCharArray(); char[] arr2=new char[]{'t' 'e' 's' 't'}; System.out.println(""array equals"" + arr1.equals(arr2)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,testDecodeTimeout,"@Test public void  () throws Exception { ExecutorService executor=Executors.newFixedThreadPool(5); File localDiscovery=downloadRegistration(System.getProperty(""discovery.url"")); Callable<Applications> task=() -> { try (InputStream is=new FileInputStream(l"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecIntegrationTest.java,testRealDecode,"@Test public void  () throws Exception { Applications applications; File localDiscovery=new File(""/var/folders/6j/qy6n1npj11x5j2j_9ng2wzmw0000gp/T/discovery-data-6054758555577530004.json""); long testStart=System.currentTimeMillis(); for (int i=0; i < 60; "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,call,@Override public void  (EncoderWrapper encodingCodec DecoderWrapper decodingCodec) throws IOException { String encodedString=encodingCodec.encode(replicationListResponse); ReplicationListResponse decodedValue=decodingCodec.decode(encodedString Replication
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testApplicationEncodeDecode,"@Test public void  () throws Exception { final Application application=new Application(""testApp""); application.addInstance(infoIterator.next()); application.addInstance(infoIterator.next()); Action2 codingAction=new Action2(){ @Override public void call( "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testApplicationsEncodeDecode,@Test public void  () throws Exception { final Applications applications=infoGenerator.takeDelta(2); Action2 codingAction=new Action2(){ @Override public void call( EncoderWrapper encodingCodec  DecoderWrapper decodingCodec) throws IOException { String en
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testApplicationsJsonEncodeDecodeWithSingleAppItem,@Test public void  () throws Exception { final Applications applications=infoGenerator.takeDelta(1); Action2 codingAction=new Action2(){ @Override public void call( EncoderWrapper encodingCodec  DecoderWrapper decodingCodec) throws IOException { String en
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testBatchRequestEncoding,@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); List<ReplicationInstance> replicationInstances=new ArrayList<>(); replicationInstances.add(new ReplicationInstance(instance.getAppName() instance.getId() Syste
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testBatchResponseEncoding,@Test public void  () throws Exception { List<ReplicationInstanceResponse> responseList=new ArrayList<>(); responseList.add(new ReplicationInstanceResponse(200 InstanceInfoGenerator.takeOne())); final ReplicationListResponse replicationListResponse=new Re
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testInstanceInfoEncodeDecode,@Test public void  () throws Exception { final InstanceInfo instanceInfo=infoIterator.next(); Action2 codingAction=new Action2(){ @Override public void call( EncoderWrapper encodingCodec  DecoderWrapper decodingCodec) throws IOException { String encodedSt
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testInstanceInfoEncodeDecodeCompatibilityDueToOverriddenStatusRenaming,@Test public void  () throws Exception { final InstanceInfo instanceInfo=infoIterator.next(); new InstanceInfo.Builder(instanceInfo).setOverriddenStatus(InstanceInfo.InstanceStatus.OUT_OF_SERVICE); Action2 codingAction=new Action2(){ @Override public void
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testInstanceInfoEncodeDecodeJsonWithEmptyMetadataMap,@Test public void  () throws Exception { final InstanceInfo base=infoIterator.next(); final InstanceInfo instanceInfo=new InstanceInfo.Builder(base).setMetadata(Collections.EMPTY_MAP).build(); Action2 codingAction=new Action2(){ @Override public void call
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testInstanceInfoEncodeDecodeLegacyJacksonToJackson,@Deprecated @Test public void  () throws Exception { final InstanceInfo instanceInfo=infoIterator.next(); Action2 codingAction=new Action2(){ @Override public void call( EncoderWrapper encodingCodec  DecoderWrapper decodingCodec) throws IOException { Stri
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testInstanceInfoFullEncodeMiniDecodeJackson,@Test public void  () throws Exception { final InstanceInfo instanceInfo=infoIterator.next(); Action2 codingAction=new Action2(){ @Override public void call( EncoderWrapper encodingCodec  DecoderWrapper decodingCodec) throws IOException { String encodedSt
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testInstanceInfoFullEncodeMiniDecodeJacksonWithMyOwnDataCenterInfo,@Test public void  () throws Exception { final InstanceInfo base=infoIterator.next(); final InstanceInfo instanceInfo=new InstanceInfo.Builder(base).setDataCenterInfo(new MyDataCenterInfo(DataCenterInfo.Name.MyOwn)).build(); Action2 codingAction=new Actio
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,testInstanceInfoMiniEncodeMiniDecodeJackson,@Test public void  () throws Exception { final InstanceInfo instanceInfo=infoIterator.next(); Action2 codingAction=new Action2(){ @Override public void call( EncoderWrapper encodingCodec  DecoderWrapper decodingCodec) throws IOException { String encodedSt
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,verifyAllPairs,"public void  (Action2 codingAction Class<?> typeToEncode List<CodecWrapper> codecHolders) throws Exception { for ( EncoderWrapper encodingCodec : codecHolders) { for ( DecoderWrapper decodingCodec : codecHolders) { String pair=""{"" + encodingCodec.codecName() + ' '+ decodingCodec.codecName()+ '}'; System.out.println(""Encoding "" + typeToEncode.getSimpleName() + "" using ""+ pair); try { codingAction.call(encodingCodec decodingCodec); } catch ( Exception ex) { throw new Exception(""Encoding failure for codec pair "" + pair ex); } } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaCodecCompatibilityTest.java,verifyForPair,"public void  (Action2 codingAction Class<?> typeToEncode EncoderWrapper encodingCodec DecoderWrapper decodingCodec) throws Exception { String pair=""{"" + encodingCodec.codecName() + ' '+ decodingCodec.codecName()+ '}'; System.out.println(""Encoding "" + typeToEncode.getSimpleName() + "" using ""+ pair); try { codingAction.call(encodingCodec decodingCodec); } catch ( Exception ex) { throw new Exception(""Encoding failure for codec pair "" + pair ex); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,testEncodingDecodingWithMetaData,@Test public void  () throws Exception { Applications applications=InstanceInfoGenerator.newBuilder(10 2).withMetaData(true).build().toApplications(); XStream xstream=JsonXStream.getInstance(); String jsonDocument=xstream.toXML(applications); Applications
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,testEncodingDecodingWithoutMetaData,@Test public void  () throws Exception { Applications applications=InstanceInfoGenerator.newBuilder(10 2).withMetaData(false).build().toApplications(); XStream xstream=JsonXStream.getInstance(); String jsonDocument=xstream.toXML(applications); Application
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\JsonXStreamTest.java,testVoidElementUnmarshalling,"@Test(expected=ForbiddenClassException.class timeout=5000) public void  () throws Exception { XStream xstream=JsonXStream.getInstance(); xstream.fromXML(""{'void':null}""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testApplicationJacksonEncodeDecode,@Test public void  () throws Exception { ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); codec.writeTo(APPLICATION_1 captureStream); byte[] encoded=captureStream.toByteArray(); InputStream source=new ByteArrayInputStream(encoded); Applica
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testApplicationJacksonEncodeXStreamDecode,@Test public void  () throws Exception { ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); codec.writeTo(APPLICATION_1 captureStream); byte[] encoded=captureStream.toByteArray(); InputStream source=new ByteArrayInputStream(encoded); Applica
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testApplicationXStreamEncodeJacksonDecode,@Test public void  () throws Exception { Application original=APPLICATION_1; ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); new EntityBodyConverter().write(original captureStream MediaType.APPLICATION_JSON_TYPE); byte[] encoded=captureSt
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testApplicationsJacksonEncodeDecode,@Test public void  () throws Exception { ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); codec.writeTo(APPLICATIONS captureStream); byte[] encoded=captureStream.toByteArray(); InputStream source=new ByteArrayInputStream(encoded); Applicat
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testApplicationsJacksonEncodeXStreamDecode,@Test public void  () throws Exception { ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); codec.writeTo(APPLICATIONS captureStream); byte[] encoded=captureStream.toByteArray(); InputStream source=new ByteArrayInputStream(encoded); Applicat
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testApplicationsXStreamEncodeJacksonDecode,@Test public void  () throws Exception { Applications original=APPLICATIONS; ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); new EntityBodyConverter().write(original captureStream MediaType.APPLICATION_JSON_TYPE); byte[] encoded=captureSt
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testInstanceInfoJacksonEncodeDecode,@Test public void  () throws Exception { ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); codec.writeTo(INSTANCE_INFO_1_A1 captureStream); byte[] encoded=captureStream.toByteArray(); InputStream source=new ByteArrayInputStream(encoded); In
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testInstanceInfoJacksonEncodeDecodeWithoutMetaData,@Test public void  () throws Exception { InstanceInfo noMetaDataInfo=InstanceInfoGenerator.newBuilder(1 1).withMetaData(false).build().serviceIterator().next(); ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); codec.writeTo(noMetaDataInfo 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testInstanceInfoJacksonEncodeXStreamDecode,@Test public void  () throws Exception { ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); codec.writeTo(INSTANCE_INFO_1_A1 captureStream); byte[] encoded=captureStream.toByteArray(); InputStream source=new ByteArrayInputStream(encoded); In
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testInstanceInfoXStreamEncodeJacksonDecode,@Test public void  () throws Exception { InstanceInfo original=INSTANCE_INFO_1_A1; ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); new EntityBodyConverter().write(original captureStream MediaType.APPLICATION_JSON_TYPE); byte[] encoded=cap
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testJacksonWrite,@Test public void  () throws Exception { ByteArrayOutputStream captureStream=new ByteArrayOutputStream(); codec.writeTo(INSTANCE_INFO_1_A1 captureStream); byte[] encoded=captureStream.toByteArray(); InputStream source=new ByteArrayInputStream(encoded); In
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJacksonCodecTest.java,testJacksonWriteToString,@Test public void  () throws Exception { String jsonValue=codec.writeToString(INSTANCE_INFO_1_A1); InstanceInfo decoded=codec.readValue(InstanceInfo.class new ByteArrayInputStream(jsonValue.getBytes(Charset.defaultCharset()))); assertTrue(EurekaEntityComp
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doAmazonInfoCompactEncodeDecodeTest,private void  (AbstractEurekaJacksonCodec codec) throws Exception { AmazonInfo amazonInfo=(AmazonInfo)infoIterator.next().getDataCenterInfo(); String encodedString=codec.getObjectMapper(DataCenterInfo.class).writeValueAsString(amazonInfo); AmazonInfo decodedValue=(AmazonInfo)codec.getObjectMapper(DataCenterInfo.class).readValue(encodedString DataCenterInfo.class); assertThat(decodedValue.get(MetaDataKey.publicHostname) is(equalTo(amazonInfo.get(MetaDataKey.publicHostname)))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doAmazonInfoEncodeDecodeTest,private void  (AbstractEurekaJacksonCodec codec) throws Exception { AmazonInfo amazonInfo=(AmazonInfo)infoIterator.next().getDataCenterInfo(); String encodedString=codec.getObjectMapper(DataCenterInfo.class).writeValueAsString(amazonInfo); DataCenterInfo decodedValue=codec.getObjectMapper(DataCenterInfo.class).readValue(encodedString DataCenterInfo.class); assertThat(EurekaEntityComparators.equal(amazonInfo decodedValue) is(true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doApplicationEncodeDecode,"private void  (AbstractEurekaJacksonCodec codec) throws Exception { Application application=new Application(""testApp""); application.addInstance(infoIterator.next()); application.addInstance(infoIterator.next()); String encodedString=codec.getObjectMapper(Application.class).writeValueAsString(application); Application decodedValue=codec.getObjectMapper(Application.class).readValue(encodedString Application.class); assertThat(EurekaEntityComparators.equal(application decodedValue) is(true)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doApplicationsEncodeDecode,private void  (AbstractEurekaJacksonCodec codec) throws Exception { Applications applications=infoGenerator.takeDelta(2); String encodedString=codec.getObjectMapper(Applications.class).writeValueAsString(applications); Applications decodedValue=codec.getObjectMapper(Applications.class).readValue(encodedString Applications.class); assertThat(EurekaEntityComparators.equal(applications decodedValue) is(true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doInstanceInfoCompactEncodeDecode,"private void  (AbstractEurekaJacksonCodec codec boolean isJson) throws Exception { InstanceInfo instanceInfo=infoIterator.next(); String encodedString=codec.getObjectMapper(InstanceInfo.class).writeValueAsString(instanceInfo); if (isJson) { JsonNode metadataNode=new ObjectMapper().readTree(encodedString).get(""instance"").get(""metadata""); assertThat(metadataNode is(nullValue())); } InstanceInfo decodedValue=codec.getObjectMapper(InstanceInfo.class).readValue(encodedString InstanceInfo.class); assertThat(decodedValue.getId() is(equalTo(instanceInfo.getId()))); assertThat(decodedValue.getMetadata().isEmpty() is(true)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doInstanceInfoEncodeDecode,private void  (AbstractEurekaJacksonCodec codec) throws Exception { InstanceInfo instanceInfo=infoIterator.next(); String encodedString=codec.getObjectMapper(InstanceInfo.class).writeValueAsString(instanceInfo); InstanceInfo decodedValue=codec.getObjectMapper(InstanceInfo.class).readValue(encodedString InstanceInfo.class); assertThat(EurekaEntityComparators.equal(instanceInfo decodedValue) is(true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doInstanceInfoIgnoredFieldsAreFilteredOutDuringDeserializationProcess,public void  (AbstractEurekaJacksonCodec fullCodec AbstractEurekaJacksonCodec compactCodec) throws Exception { InstanceInfo instanceInfo=infoIterator.next(); String encodedString=fullCodec.getObjectMapper(InstanceInfo.class).writeValueAsString(instanceInfo); InstanceInfo decodedValue=compactCodec.getObjectMapper(InstanceInfo.class).readValue(encodedString InstanceInfo.class); assertThat(decodedValue.getId() is(equalTo(instanceInfo.getId()))); assertThat(decodedValue.getAppName() is(equalTo(instanceInfo.getAppName()))); assertThat(decodedValue.getIPAddr() is(equalTo(instanceInfo.getIPAddr()))); assertThat(decodedValue.getVIPAddress() is(equalTo(instanceInfo.getVIPAddress()))); assertThat(decodedValue.getSecureVipAddress() is(equalTo(instanceInfo.getSecureVipAddress()))); assertThat(decodedValue.getHostName() is(equalTo(instanceInfo.getHostName()))); assertThat(decodedValue.getStatus() is(equalTo(instanceInfo.getStatus()))); assertThat(decodedValue.getActionType() is(equalTo(instanceInfo.getActionType()))); assertThat(decodedValue.getASGName() is(equalTo(instanceInfo.getASGName()))); assertThat(decodedValue.getLastUpdatedTimestamp() is(equalTo(instanceInfo.getLastUpdatedTimestamp()))); AmazonInfo sourceAmazonInfo=(AmazonInfo)instanceInfo.getDataCenterInfo(); AmazonInfo decodedAmazonInfo=(AmazonInfo)decodedValue.getDataCenterInfo(); assertThat(decodedAmazonInfo.get(MetaDataKey.accountId) is(equalTo(sourceAmazonInfo.get(MetaDataKey.accountId)))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,gc,public static void  (){ System.gc(); System.runFinalization(); try { Thread.sleep(1000); } catch ( InterruptedException e) { } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doInstanceInfoWithNoMetaEncodeDecode,"private void  (AbstractEurekaJacksonCodec codec boolean json) throws Exception { InstanceInfo noMetaDataInfo=new InstanceInfo.Builder(infoIterator.next()).setMetadata(null).build(); String encodedString=codec.getObjectMapper(InstanceInfo.class).writeValueAsString(noMetaDataInfo); if (json) { assertThat(encodedString.contains(""\""@class\"":\""java.util.Collections$EmptyMap\"""") is(true)); } InstanceInfo decodedValue=codec.getObjectMapper(InstanceInfo.class).readValue(encodedString InstanceInfo.class); assertThat(decodedValue.getId() is(equalTo(noMetaDataInfo.getId()))); assertThat(decodedValue.getMetadata().isEmpty() is(true)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\StringCacheTest.java,testVerifyStringsAreGarbageCollectedIfNotReferenced,"@Test public void  () throws Exception { StringCache cache=new StringCache(); for (int i=0; i < CACHE_SIZE; i++) { cache.cachedValueOf(""id#"" + i); } gc(); assertTrue(cache.size() < CACHE_SIZE * 0.1); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doLeaseInfoEncodeDecode,private void  (AbstractEurekaJacksonCodec codec) throws Exception { LeaseInfo leaseInfo=infoIterator.next().getLeaseInfo(); String encodedString=codec.getObjectMapper(LeaseInfo.class).writeValueAsString(leaseInfo); LeaseInfo decodedValue=codec.getObjectMapper(LeaseInfo.class).readValue(encodedString LeaseInfo.class); assertThat(EurekaEntityComparators.equal(leaseInfo decodedValue) is(true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,doMyDataCenterInfoEncodeDecodeTest,private void  (AbstractEurekaJacksonCodec codec) throws Exception { DataCenterInfo myDataCenterInfo=new DataCenterInfo(){ @Override public Name getName(){ return Name.MyOwn; } } ; String encodedString=codec.getObjectMapper(DataCenterInfo.class).writeValueAsString(myDataCenterInfo); DataCenterInfo decodedValue=codec.getObjectMapper(DataCenterInfo.class).readValue(encodedString DataCenterInfo.class); assertThat(decodedValue.getName() is(equalTo(Name.MyOwn))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testAmazonInfoCompactEncodeDecodeWithJson,@Test public void  () throws Exception { doAmazonInfoCompactEncodeDecodeTest(new EurekaJsonJacksonCodec(KeyFormatter.defaultKeyFormatter() true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testAmazonInfoCompactEncodeDecodeWithXml,@Test public void  () throws Exception { doAmazonInfoCompactEncodeDecodeTest(new EurekaXmlJacksonCodec(KeyFormatter.defaultKeyFormatter() true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testAmazonInfoEncodeDecodeWithJson,@Test public void  () throws Exception { doAmazonInfoEncodeDecodeTest(new EurekaJsonJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testAmazonInfoEncodeDecodeWithXml,@Test public void  () throws Exception { doAmazonInfoEncodeDecodeTest(new EurekaXmlJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testApplicationEncodeDecodeWithJson,@Test public void  () throws Exception { doApplicationEncodeDecode(new EurekaJsonJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testApplicationEncodeDecodeWithXml,@Test public void  () throws Exception { doApplicationEncodeDecode(new EurekaXmlJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testApplicationsEncodeDecodeWithJson,@Test public void  () throws Exception { doApplicationsEncodeDecode(new EurekaJsonJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testApplicationsEncodeDecodeWithXml,@Test public void  () throws Exception { doApplicationsEncodeDecode(new EurekaXmlJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testInstanceInfoCompactEncodeDecodeWithJson,@Test public void  () throws Exception { doInstanceInfoCompactEncodeDecode(new EurekaJsonJacksonCodec(KeyFormatter.defaultKeyFormatter() true) true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testInstanceInfoCompactEncodeDecodeWithXml,@Test public void  () throws Exception { doInstanceInfoCompactEncodeDecode(new EurekaXmlJacksonCodec(KeyFormatter.defaultKeyFormatter() true) false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testInstanceInfoEncodeDecodeWithJson,@Test public void  () throws Exception { doInstanceInfoEncodeDecode(new EurekaJsonJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testInstanceInfoEncodeDecodeWithXml,@Test public void  () throws Exception { doInstanceInfoEncodeDecode(new EurekaXmlJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testInstanceInfoIgnoredFieldsAreFilteredOutDuringDeserializationProcessWithJson,@Test public void  () throws Exception { doInstanceInfoIgnoredFieldsAreFilteredOutDuringDeserializationProcess(new EurekaJsonJacksonCodec() new EurekaJsonJacksonCodec(KeyFormatter.defaultKeyFormatter() true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testInstanceInfoIgnoredFieldsAreFilteredOutDuringDeserializationProcessWithXml,@Test public void  () throws Exception { doInstanceInfoIgnoredFieldsAreFilteredOutDuringDeserializationProcess(new EurekaXmlJacksonCodec() new EurekaXmlJacksonCodec(KeyFormatter.defaultKeyFormatter() true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testInstanceInfoWithNoMetaEncodeDecodeWithJson,@Test public void  () throws Exception { doInstanceInfoWithNoMetaEncodeDecode(new EurekaJsonJacksonCodec() true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testInstanceInfoWithNoMetaEncodeDecodeWithXml,@Test public void  () throws Exception { doInstanceInfoWithNoMetaEncodeDecode(new EurekaXmlJacksonCodec() false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testLeaseInfoEncodeDecodeWithJson,@Test public void  () throws Exception { doLeaseInfoEncodeDecode(new EurekaJsonJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testLeaseInfoEncodeDecodeWithXml,@Test public void  () throws Exception { doLeaseInfoEncodeDecode(new EurekaXmlJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testMyDataCenterInfoEncodeDecodeWithJson,@Test public void  () throws Exception { doMyDataCenterInfoEncodeDecodeTest(new EurekaJsonJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\EurekaJsonAndXmlJacksonCodecTest.java,testMyDataCenterInfoEncodeDecodeWithXml,@Test public void  () throws Exception { doMyDataCenterInfoEncodeDecodeTest(new EurekaXmlJacksonCodec()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,codecName,@Override public String  (){ return testWrapperName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,decode,@Override public <T>T  (InputStream inputStream Class<T> type) throws IOException { return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,support,@Override public boolean  (MediaType mediaType){ return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\wrappers\CodecWrappersTest.java,testRegisterNewWrapper,@Test public void  (){ Assert.assertNull(CodecWrappers.getEncoder(testWrapperName)); Assert.assertNull(CodecWrappers.getDecoder(testWrapperName)); CodecWrappers.registerWrapper(new TestWrapper()); Assert.assertNotNull(CodecWrappers.getEncoder(testWrapperN
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,testEncodingDecodingWithMetaData,@Test public void  () throws Exception { Applications applications=InstanceInfoGenerator.newBuilder(10 2).withMetaData(true).build().toApplications(); XStream xstream=XmlXStream.getInstance(); String xmlDocument=xstream.toXML(applications); Applications d
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,testEncodingDecodingWithoutMetaData,@Test public void  () throws Exception { Applications applications=InstanceInfoGenerator.newBuilder(10 2).withMetaData(false).build().toApplications(); XStream xstream=XmlXStream.getInstance(); String xmlDocument=xstream.toXML(applications); Applications 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,testVoidAttributeUnmarshalling,"@Test(expected=ForbiddenClassException.class timeout=5000) public void  () throws Exception { XStream xstream=XmlXStream.getInstance(); xstream.fromXML(""<string class='void'>Hello  world!</string>""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\converters\XmlXStreamTest.java,testVoidElementUnmarshalling,"@Test(expected=ForbiddenClassException.class timeout=5000) public void  () throws Exception { XStream xstream=XmlXStream.getInstance(); xstream.fromXML(""<void/>""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientCloseJerseyThreadTest.java,containsJerseyThread,private boolean  (){ Set<Thread> threads=Thread.getAllStackTraces().keySet(); for ( Thread t : threads) { if (t.getName().contains(THREAD_NAME)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientCloseJerseyThreadTest.java,testThreadCount,@Test public void  () throws InterruptedException { assertThat(containsJerseyThread() equalTo(true)); client.shutdown(); Thread.sleep(5); assertThat(containsJerseyThread() equalTo(false)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,setUp,"@Before public void  () throws Exception { mockLocalEurekaServer=new MockRemoteEurekaServer(); mockLocalEurekaServer.start(); ConfigurationManager.getConfigInstance().setProperty(""eureka.registration.enabled"" ""false""); ConfigurationManager.getConfigInstan"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientDisableRegistryTest.java,testDisableFetchRegistry,"@Test public void  () throws Exception { Assert.assertFalse(""Registry fetch disabled but eureka server recieved a registry fetch."" mockLocalEurekaServer.isSentRegistry()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,MyHealthCheckCallback,private  (boolean health){ this.health=health; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,MyHealthCheckHandler,private  (InstanceInfo.InstanceStatus health){ this.health=health; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,getStatus,"@Override public InstanceInfo.InstanceStatus  (InstanceInfo.InstanceStatus currentStatus){ invoked=true; if (shouldException) { throw new RuntimeException(""test induced exception""); } return health; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,isHealthy,@Override public boolean  (){ invoked=true; return health; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,isInvoked,public boolean  (){ return invoked; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,newInstanceInfoBuilder,@Override protected InstanceInfo.Builder  (int renewalIntervalInSecs){ InstanceInfo.Builder builder=super.newInstanceInfoBuilder(renewalIntervalInSecs); builder.setStatus(InstanceInfo.InstanceStatus.STARTING); return builder; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,reset,public void  (){ shouldException=false; invoked=false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,setupProperties,"@Override protected void  (){ super.setupProperties(); ConfigurationManager.getConfigInstance().setProperty(""eureka.registration.enabled"" ""true""); ConfigurationManager.getConfigInstance().setProperty(""eureka.appinfo.initial.replicate.time"" Integer.MAX_VAL"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,testCallback,@Test public void  () throws Exception { MyHealthCheckCallback myCallback=new MyHealthCheckCallback(true); Assert.assertTrue(client instanceof DiscoveryClient); DiscoveryClient clientImpl=(DiscoveryClient)client; InstanceInfoReplicator instanceInfoReplica
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientHealthTest.java,testHandler,@Test public void  () throws Exception { MyHealthCheckHandler myHealthCheckHandler=new MyHealthCheckHandler(InstanceInfo.InstanceStatus.UP); Assert.assertTrue(client instanceof DiscoveryClient); DiscoveryClient clientImpl=(DiscoveryClient)client; Instance
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,TestApplicationInfoManager, (InstanceInfo instanceInfo){ super(new MyDataCenterInstanceConfig() instanceInfo null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,TestClient,public  (ApplicationInfoManager applicationInfoManager EurekaClientConfig config){ super(applicationInfoManager config); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,expectStatus,private void  (InstanceInfo.InstanceStatus expected long timeout TimeUnit timeUnit) throws InterruptedException { String status=mockLocalEurekaServer.registrationStatusesQueue.poll(timeout timeUnit); Assert.assertEquals(expected.name() status); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,getLast,private static <T>T  (List<T> list){ return list.get(list.size() - 1); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,getStatusChangeListeners,Map<String StatusChangeListener>  (){ return this.listeners; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,registerUpdateLifecycleTest,@Test public void  () throws Exception { applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP); expectStatus(InstanceInfo.InstanceStatus.UP 5 TimeUnit.SECONDS); applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UNKNOW
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,registerUpdateQuickLifecycleTest,@Test public void  () throws Exception { applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UP); applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.UNKNOWN); applicationInfoManager.setInstanceStatus(InstanceInfo.Instanc
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,registerUpdateShutdownTest,@Test public void  () throws Exception { Assert.assertEquals(1 applicationInfoManager.getStatusChangeListeners().size()); client.shutdown(); Assert.assertEquals(0 applicationInfoManager.getStatusChangeListeners().size()); Mockito.verify(client Mockito.tim
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,setUp,"@Before public void  () throws Exception { mockLocalEurekaServer=new MockRemoteEurekaServer(); mockLocalEurekaServer.start(); ConfigurationManager.getConfigInstance().setProperty(""eureka.name"" ""EurekaTestApp-"" + UUID.randomUUID()); ConfigurationManager.ge"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,tearDown,@After public void  () throws Exception { client.shutdown(); mockLocalEurekaServer.stop(); ConfigurationManager.getConfigInstance().clear(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,testDoNotUnregisterOnShutdown,"@Test public void  () throws Exception { client.shutdown(); ConfigurationManager.getConfigInstance().setProperty(""eureka.shouldUnregisterOnShutdown"" ""false""); client=Mockito.spy(new TestClient(applicationInfoManager new DefaultEurekaClientConfig())); clie"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,testRegistrationDisabled,"@Test public void  () throws Exception { client.shutdown(); ConfigurationManager.getConfigInstance().setProperty(""eureka.registration.enabled"" ""false""); client=new TestClient(applicationInfoManager new DefaultEurekaClientConfig()); Assert.assertEquals(0 a"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegisterUpdateTest.java,unregister,@Override public void  (){ super.unregister(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,consume,@Subscribe public void  (StatusChangeEvent event){ receivedEvents.add(event); eventLatch.countDown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,setUp,@Before public void  () throws Exception { reset(requestHandler); when(requestHandler.register(any(InstanceInfo.class))).thenReturn(EurekaHttpResponse.status(204)); when(requestHandler.cancel(anyString() anyString())).thenReturn(EurekaHttpResponse.status(
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,setUpClass,@BeforeClass public static void  () throws IOException { eurekaHttpServer=new SimpleEurekaHttpServer(requestHandler); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,tearDownClass,@AfterClass public static void  () throws Exception { if (eurekaHttpServer != null) { eurekaHttpServer.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,testCacheRefreshEvent,"@Test public void  () throws Exception { InstanceInfoGenerator instanceGen=InstanceInfoGenerator.newBuilder(2 ""testApp"").build(); Applications initialApps=instanceGen.takeDelta(1); when(requestHandler.getApplications()).thenReturn(anEurekaHttpResponse(200"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientEventBusTest.java,testStatusChangeEvent,@Test public void  () throws Exception { final CountDownLatch eventLatch=new CountDownLatch(1); final List<StatusChangeEvent> receivedEvents=new ArrayList<StatusChangeEvent>(); EventBus eventBus=discoveryClientResource.getEventBus(); eventBus.registerSubs
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,onEvent,@Override public void  (EurekaEvent event){ this.event=event; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,setUp,@Before public void  () throws Exception { reset(requestHandler); when(requestHandler.register(any(InstanceInfo.class))).thenReturn(EurekaHttpResponse.status(204)); when(requestHandler.cancel(anyString() anyString())).thenReturn(EurekaHttpResponse.status(
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,setUpClass,@BeforeClass public static void  () throws IOException { eurekaHttpServer=new SimpleEurekaHttpServer(requestHandler); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,tearDownClass,@AfterClass public static void  () throws Exception { if (eurekaHttpServer != null) { eurekaHttpServer.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaEventListenerTest.java,testCacheRefreshEvent,@Test public void  () throws Exception { CapturingEurekaEventListener listener=new CapturingEurekaEventListener(); Applications initialApps=toApplications(discoveryClientResource.getMyInstanceInfo()); when(requestHandler.getApplications()).thenReturn(anEu
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,await,private static void  (Callable<Boolean> condition long time TimeUnit timeUnit) throws Exception { long timeout=System.currentTimeMillis() + timeUnit.toMillis(time); while (!condition.call()) { if (System.currentTimeMillis() >= timeout) { throw new TimeoutException(); } Thread.sleep(100); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,call,@Override public Boolean  () throws Exception { List<Application> applicationList=client.getApplications().getRegisteredApplications(); return !applicationList.isEmpty() && applicationList.get(0).getInstances().size() == 2; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,setUp,"@Before public void  () throws Exception { targetServerBaseUri=""http://localhost:"" + targetServerMockRule.getHttpPort(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,tearDown,@After public void  (){ if (redirectServerMockClient != null) { redirectServerMockClient.reset(); } if (targetServerMockClient.client != null) { targetServerMockClient.client.reset(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,testClientFallsBackToOriginalServerOnError,@Test public void  () throws Exception { Applications fullFetchApps1=dataGenerator.takeDelta(1); String fullFetchJson1=toJson(fullFetchApps1); Applications fullFetchApps2=EurekaEntityFunctions.mergeApplications(fullFetchApps1 dataGenerator.takeDelta(1)); 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,testClientQueryFollowsRedirectsAndPinsToTargetServer,@Test public void  () throws Exception { Applications fullFetchApps=dataGenerator.takeDelta(1); String fullFetchJson=toJson(fullFetchApps); Applications deltaFetchApps=dataGenerator.takeDelta(1); String deltaFetchJson=toJson(deltaFetchApps); redirectServe
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRedirectTest.java,toJson,private static String  (Applications applications) throws IOException { ByteArrayOutputStream os=new ByteArrayOutputStream(); new EntityBodyConverter().write(applications os MediaType.APPLICATION_JSON_TYPE); os.close(); return os.toString(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,configure,@Override protected void  (){ bind(EurekaInstanceConfig.class).toProvider(MyDataCenterInstanceConfigProvider.class).in(Scopes.SINGLETON); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,setUp,"@Before public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.region"" ""default""); ConfigurationManager.getConfigInstance().setProperty(""eureka.shouldFetchRegistry"" ""false""); ConfigurationManager.getConfigInstance("
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,tearDown,@After public void  (){ if (injector != null) { injector.shutdown(); } ConfigurationManager.getConfigInstance().clear(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\guice\EurekaModuleTest.java,testDI,"@SuppressWarnings(""deprecation"") @Test public void  (){ InstanceInfo instanceInfo=injector.getInstance(InstanceInfo.class); Assert.assertEquals(ApplicationInfoManager.getInstance().getInfo() instanceInfo); EurekaClient eurekaClient=injector.getInstance(Eu"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,testDefaultOverride,"@Test public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.us-east-1.availabilityZones"" ""abc def""); PropertyBasedAzToRegionMapper azToRegionMapper=new PropertyBasedAzToRegionMapper(new DefaultEurekaClientConfig()"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,testDefaults,"@Test public void  () throws Exception { PropertyBasedAzToRegionMapper azToRegionMapper=new PropertyBasedAzToRegionMapper(new DefaultEurekaClientConfig()); InstanceRegionChecker checker=new InstanceRegionChecker(azToRegionMapper ""us-east-1""); azToRegionMa"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,testInstanceWithNoAZ,"@Test public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.us-east-1.availabilityZones"" ""abc def""); PropertyBasedAzToRegionMapper azToRegionMapper=new PropertyBasedAzToRegionMapper(new DefaultEurekaClientConfig()"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,testNotMappedAZ,"@Test public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.us-east-1.availabilityZones"" ""abc def""); PropertyBasedAzToRegionMapper azToRegionMapper=new PropertyBasedAzToRegionMapper(new DefaultEurekaClientConfig()"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceRegionCheckerTest.java,testNotMappedAZNotFollowingFormat,"@Test public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.us-east-1.availabilityZones"" ""abc def""); PropertyBasedAzToRegionMapper azToRegionMapper=new PropertyBasedAzToRegionMapper(new DefaultEurekaClientConfig()"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,setUp,@Before public void  () throws Exception { discoveryClient=mock(DiscoveryClient.class); HealthCheckHandler healthCheckHandler=mock(HealthCheckHandler.class); when(discoveryClient.getHealthCheckHandler()).thenReturn(healthCheckHandler); when(healthCheckHan
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,tearDown,@After public void  () throws Exception { replicator.stop(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,testOnDemandUpdate,@Test public void  () throws Throwable { assertTrue(replicator.onDemandUpdate()); Thread.sleep(10); assertTrue(replicator.onDemandUpdate()); Thread.sleep(1000 * refreshRateSeconds / 2); assertTrue(replicator.onDemandUpdate()); Thread.sleep(10); verify(dis
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,testOnDemandUpdateRateLimiting,@Test public void  () throws Throwable { assertTrue(replicator.onDemandUpdate()); Thread.sleep(10); assertTrue(replicator.onDemandUpdate()); Thread.sleep(10); assertFalse(replicator.onDemandUpdate()); Thread.sleep(10); verify(discoveryClient times(2)).ref
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,testOnDemandUpdateResetAutomaticRefresh,@Test public void  () throws Throwable { replicator.start(0); Thread.sleep(1000 * refreshRateSeconds / 2); assertTrue(replicator.onDemandUpdate()); Thread.sleep(1000 * refreshRateSeconds + 50); verify(discoveryClient times(3)).refreshInstanceInfo(); verif
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\InstanceInfoReplicatorTest.java,testOnDemandUpdateResetAutomaticRefreshWithInitialDelay,@Test public void  () throws Throwable { replicator.start(1000 * refreshRateSeconds); assertTrue(replicator.onDemandUpdate()); Thread.sleep(1000 * refreshRateSeconds + 100); verify(discoveryClient times(2)).refreshInstanceInfo(); verify(discoveryClient ti
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,getName,@Override public Name  (){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,prepareRemoteRegionRegistry,"private void  () throws Exception { Applications localApplications=InstanceInfoGenerator.newBuilder(4 ""app1"" ""app2"").build().toApplications(); Applications remoteApplications=InstanceInfoGenerator.newBuilder(4 ""remote1"" ""remote2"").withZone(TEST_REMOTE_ZONE).build().toApplications(); Applications allApplications=mergeApplications(localApplications remoteApplications); Applications delta=copyApplications(remoteApplications); delta.setAppsHashCode(allApplications.getAppsHashCode()); when(requestHandler.getApplications(TEST_REMOTE_REGION)).thenReturn(anEurekaHttpResponse(200 localApplications).type(MediaType.APPLICATION_JSON_TYPE).build()); when(requestHandler.getDelta(TEST_REMOTE_REGION)).thenReturn(anEurekaHttpResponse(200 delta).type(MediaType.APPLICATION_JSON_TYPE).build()); assertThat(discoveryClientResource.awaitCacheUpdate(5 TimeUnit.SECONDS) is(true)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,setUp,@Before public void  () throws Exception { reset(requestHandler); when(requestHandler.cancel(anyString() anyString())).thenReturn(EurekaHttpResponse.status(200)); when(requestHandler.getDelta()).thenReturn(anEurekaHttpResponse(200 new Applications()).type
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,setUpClass,@BeforeClass public static void  () throws IOException { eurekaHttpServer=new SimpleEurekaHttpServer(requestHandler); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,tearDownClass,@AfterClass public static void  () throws Exception { if (eurekaHttpServer != null) { eurekaHttpServer.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testAllAppsForRegions,@Test public void  () throws Exception { prepareRemoteRegionRegistry(); EurekaClient client=discoveryClientResource.getClient(); Applications appsForRemoteRegion=client.getApplicationsForARegion(TEST_REMOTE_REGION); assertThat(countInstances(appsForRemote
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testApplyDeltaWithBadInstanceInfoDataCenterInfoAsNull,"@Test public void  () throws Exception { InstanceInfoGenerator instanceGen=InstanceInfoGenerator.newBuilder(2 ""testApp"").build(); InstanceInfo first=instanceGen.first(); Applications initial=toApplications(first); when(requestHandler.getApplications(TEST_"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testAppsHashCodeAfterRefresh,"@Test public void  () throws Exception { InstanceInfoGenerator instanceGen=InstanceInfoGenerator.newBuilder(2 ""testApp"").build(); InstanceInfo first=instanceGen.first(); Applications initial=toApplications(first); when(requestHandler.getApplications(TEST_"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testCacheRefreshSingleAppForLocalRegion,"@Test public void  () throws Exception { InstanceInfoGenerator instanceGen=InstanceInfoGenerator.newBuilder(2 ""testApp"").build(); Applications initialApps=instanceGen.takeDelta(1); String vipAddress=initialApps.getRegisteredApplications().get(0).getInstan"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testEurekaClientPeriodicCacheRefresh,@Test public void  () throws Exception { InstanceInfoGenerator instanceGen=InstanceInfoGenerator.newBuilder(3 1).build(); Applications initialApps=instanceGen.takeDelta(1); when(requestHandler.getApplications(TEST_REMOTE_REGION)).thenReturn(anEurekaHttpRe
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testEurekaClientPeriodicHeartbeat,@Test public void  () throws Exception { DiscoveryClientResource registeringClientResource=discoveryClientResource.fork().withRegistration(true).withRegistryFetch(false).build(); InstanceInfo instance=registeringClientResource.getMyInstanceInfo(); when(re
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testGetAllKnownRegions,@Test public void  () throws Exception { prepareRemoteRegionRegistry(); EurekaClient client=discoveryClientResource.getClient(); Set<String> allKnownRegions=client.getAllKnownRegions(); assertThat(allKnownRegions.size() is(equalTo(2))); assertThat(allKnow
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testGetByVipInLocalRegion,"@Test public void  () throws Exception { Applications applications=InstanceInfoGenerator.newBuilder(4 ""app1"" ""app2"").build().toApplications(); InstanceInfo instance=applications.getRegisteredApplications(""app1"").getInstances().get(0); when(requestHandler."
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testGetByVipInRemoteRegion,@Test public void  () throws Exception { prepareRemoteRegionRegistry(); EurekaClient client=discoveryClientResource.getClient(); String vipAddress=takeFirst(client.getApplicationsForARegion(TEST_REMOTE_REGION)).getVIPAddress(); List<InstanceInfo> instance
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testGetInvalidVIP,"@Test public void  () throws Exception { Applications applications=InstanceInfoGenerator.newBuilder(1 ""testApp"").build().toApplications(); when(requestHandler.getApplications(TEST_REMOTE_REGION)).thenReturn(anEurekaHttpResponse(200 applications).type(Medi"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\DiscoveryClientRegistryTest.java,testGetInvalidVIPForRemoteRegion,"@Test public void  () throws Exception { prepareRemoteRegionRegistry(); EurekaClient client=discoveryClientResource.getClient(); List<InstanceInfo> instancesByVipAddress=client.getInstancesByVipAddress(""XYZ"" false TEST_REMOTE_REGION); assertThat(instances"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,configure,@Override protected void  (){ bind(EurekaInstanceConfig.class).to(LocalEurekaInstanceConfig.class); bind(EurekaClientConfig.class).to(BadServerEurekaClientConfig2.class); bind(AbstractDiscoveryClientOptionalArgs.class).to(Jersey1DiscoveryClientOptionalArg
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,getAppname,@Override public String  (){ return MY_APPLICATION_NAME; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,getEurekaServerServiceUrls,"@Override public List<String>  (String myZone){ return singletonList(""http://localhost:1/v2/""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,getInitialInstanceInfoReplicationIntervalSeconds,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,getInstanceId,@Override public String  (){ return MY_INSTANCE_ID; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,getInstanceInfoReplicationIntervalSeconds,@Override public int  (){ return 1; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,getLeaseRenewalIntervalInSeconds,@Override public int  (){ return 1; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,getRegistryFetchIntervalSeconds,@Override public int  (){ return 1; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,setupClass,@BeforeClass public static void  () throws IOException { eurekaHttpServer=new SimpleEurekaHttpServer(requestHandler); when(requestHandler.register(any(InstanceInfo.class))).thenReturn(EurekaHttpResponse.status(204)); when(requestHandler.cancel(MY_APPLICAT
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,shouldEnforceRegistrationAtInit,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,shouldFetchRegistry,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,shouldRegisterWithEureka,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,tearDownClass,@AfterClass public static void  (){ if (eurekaHttpServer != null) { eurekaHttpServer.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,testBackupRegistryInjection,@Test public void  () throws Exception { final BackupRegistry backupRegistry=mock(BackupRegistry.class); when(backupRegistry.fetchRegistry()).thenReturn(APPLICATIONS); Injector injector=LifecycleInjector.builder().withModules(new AbstractModule(){ @Overri
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,testEnforcingRegistrationOnInitFastFail,@Test(expected=ProvisionException.class) public void  (){ Injector injector=LifecycleInjector.builder().withModules(new AbstractModule(){ @Override protected void configure(){ bind(EurekaInstanceConfig.class).to(LocalEurekaInstanceConfig.class); bind(Eure
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\EurekaClientLifecycleTest.java,testEurekaClientLifecycle,@Test public void  () throws Exception { Injector injector=LifecycleInjector.builder().withModules(new AbstractModule(){ @Override protected void configure(){ bind(EurekaInstanceConfig.class).to(LocalEurekaInstanceConfig.class); bind(EurekaClientConfig.cl
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,fetchRegistry,@Override public Applications  (String[] includeRemoteRegions){ Applications toReturn=new Applications(); for ( Application application : localRegionApps.getRegisteredApplications()) { toReturn.addApplication(application); } for ( String region : includeR
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,getLocalRegionApps,public Applications  (){ return localRegionApps; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,getRemoteRegionVsApps,public Map<String Applications>  (){ return remoteRegionVsApps; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,setLocalRegionApps,public void  (Applications localRegionApps){ this.localRegionApps=localRegionApps; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockBackupRegistry.java,setRemoteRegionVsApps,public void  (Map<String Applications> remoteRegionVsApps){ this.remoteRegionVsApps=remoteRegionVsApps; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,before,@Before public void  (){ args=new Jersey1DiscoveryClientOptionalArgs(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,get,@Override public T  (){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,testHealthCheckCallbackGuiceProvider,@Test public void  (){ args.setHealthCheckCallbackProvider(new GuiceProvider<HealthCheckCallback>()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,testHealthCheckCallbackJavaxProvider,@Test public void  (){ args.setHealthCheckCallbackProvider(new JavaxProvider<HealthCheckCallback>()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,testHealthCheckHandlerGuiceProvider,@Test public void  (){ args.setHealthCheckHandlerProvider(new GuiceProvider<HealthCheckHandler>()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\Jersey1DiscoveryClientOptionalArgsTest.java,testHealthCheckHandlerJavaxProvider,@Test public void  (){ args.setHealthCheckHandlerProvider(new JavaxProvider<HealthCheckHandler>()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,testDecodingWithUtf8CharsetExplicitlySet,"@Test public void  () throws Exception { Map<String String> params=new HashMap<>(); params.put(""charset"" ""UTF-8""); testEncodingDecoding(new MediaType(""application"" ""json"" params)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,testEncodingDecoding,private void  (MediaType mediaType) throws IOException { assertThat(jerseyProvider.isWriteable(InstanceInfo.class InstanceInfo.class null mediaType) is(true)); ByteArrayOutputStream out=new ByteArrayOutputStream(); jerseyProvider.writeTo(INSTANCE InstanceInfo.class InstanceInfo.class null mediaType null out); assertThat(jerseyProvider.isReadable(InstanceInfo.class InstanceInfo.class null mediaType) is(true)); ByteArrayInputStream in=new ByteArrayInputStream(out.toByteArray()); InstanceInfo decodedInstance=(InstanceInfo)jerseyProvider.readFrom(InstanceInfo.class InstanceInfo.class null mediaType null in); assertThat(decodedInstance is(equalTo(INSTANCE))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,testJsonEncodingDecoding,@Test public void  () throws Exception { testEncodingDecoding(MediaType.APPLICATION_JSON_TYPE); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,testNonUtf8CharsetIsNotAccepted,"@Test public void  () throws Exception { Map<String String> params=new HashMap<>(); params.put(""charset"" ""ISO-8859""); MediaType mediaTypeWithNonSupportedCharset=new MediaType(""application"" ""json"" params); assertThat(jerseyProvider.isReadable(InstanceInfo."
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\provider\DiscoveryJerseyProviderTest.java,testXmlEncodingDecoding,@Test public void  () throws Exception { testEncodingDecoding(MediaType.APPLICATION_XML_TYPE); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,addDeltaApps,protected void  (boolean includeRemote Applications apps){ for ( Application application : applicationDeltaMap.values()) { apps.addApplication(application); } if (includeRemote) { for ( Application application : remoteRegionAppsDelta.values()) { apps.addApplication(application); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,addLocalRegionApps,public void  (String appName Application app){ applicationMap.put(appName app); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,addLocalRegionAppsDelta,public void  (String appName Application app){ applicationDeltaMap.put(appName app); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,addRemoteRegionApps,public void  (String appName Application app){ remoteRegionApps.put(appName app); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,addRemoteRegionAppsDelta,public void  (String appName Application app){ remoteRegionAppsDelta.put(appName app); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,after,@Override protected void  (){ try { stop(); } catch ( Exception e) { Assert.fail(e.getMessage()); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,before,@Override protected void  () throws Throwable { start(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,getDeltaAppsHashCode,protected String  (boolean includeRemote){ Applications allApps=new Applications(); for ( Application application : applicationMap.values()) { allApps.addApplication(application); } if (includeRemote) { for ( Application application : remoteRegionApps.values()) { allApps.addApplication(application); } } addDeltaApps(includeRemote allApps); return allApps.getReconcileHashCode(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,getPort,public int  (){ return port; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,handle,@Override public void  (String target HttpServletRequest request HttpServletResponse response int dispatch) throws IOException  ServletException { String authName=request.getHeader(AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY); String authVersion=request.g
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,isRemoteRequest,"protected boolean  (HttpServletRequest request){ String queryString=request.getQueryString(); if (queryString == null) { return false; } return queryString.contains(""regions=""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,isSentDelta,public boolean  (){ return sentDelta.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,isSentRegistry,public boolean  (){ return sentRegistry.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,sendOkResponseWithContent,"protected void  (Request request HttpServletResponse response Applications apps) throws IOException { String content=XmlXStream.getInstance().toXML(apps); response.setContentType(""application/xml""); response.setStatus(HttpServletResponse.SC_OK); response.getWriter().println(content); response.getWriter().flush(); request.setHandled(true); System.out.println(""Eureka port: "" + port + "". ""+ System.currentTimeMillis()+ "". Eureka resource mock  sent response for request path: ""+ request.getPathInfo()+ ""  apps count: ""+ apps.getRegisteredApplications().size()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,sleep,"protected void  (int seconds){ try { Thread.sleep(seconds); } catch ( InterruptedException e) { System.out.println(""Interrupted: "" + e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,start,public void  () throws Exception { server=new Server(port); server.setHandler(new AppsResourceHandler()); server.start(); port=server.getConnectors()[0].getLocalPort(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,stop,public void  () throws Exception { server.stop(); server=null; port=0; registrationStatusesQueue.clear(); registrationStatuses.clear(); applicationMap.clear(); remoteRegionApps.clear(); remoteRegionAppsDelta.clear(); applicationDeltaMap.clear(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\MockRemoteEurekaServer.java,waitForDeltaToBeRetrieved,"public void  (int refreshRate) throws InterruptedException { int count=0; while (count++ < 3 && !isSentDelta()) { System.out.println(""Sleeping for "" + refreshRate + "" seconds to let the remote registry fetch delta. Attempt: ""+ count); Thread.sleep(3 * refreshRate * 1000); System.out.println(""Done sleeping for 10 seconds to let the remote registry fetch delta. Delta fetched: "" + isSentDelta()); } System.out.println(""Sleeping for extra "" + refreshRate + "" seconds for the client to update delta in memory.""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,setUp,@Before public void  (){ when(transportConfig.getAsyncExecutorThreadPoolSize()).thenReturn(3); when(transportConfig.getAsyncResolverRefreshIntervalMs()).thenReturn(200); when(transportConfig.getAsyncResolverWarmUpTimeoutMs()).thenReturn(100); resolver=spy
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,shutDown,@After public void  (){ resolver.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,testDelegateFailureAtWarmUp,@Test public void  (){ when(delegateResolver.getClusterEndpoints()).thenReturn(null); doNothing().when(resolver).scheduleTask(anyLong()); List endpoints=resolver.getClusterEndpoints(); assertThat(endpoints.isEmpty() is(true)); verify(delegateResolver time
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\AsyncResolverTest.java,testHappyCase,@Test public void  (){ List delegateReturns1=new ArrayList(SampleCluster.UsEast1a.builder().withServerPool(2).build()); List delegateReturns2=new ArrayList(SampleCluster.UsEast1b.builder().withServerPool(3).build()); when(delegateResolver.getClusterEndpoi
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProviderTest.java,configure,"@Override public void  (BootstrapBinder binder){ binder.bind(String.class).annotatedWith(EurekaNamespace.class).toInstance(""testnamespace.""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\providers\DefaultEurekaClientConfigProviderTest.java,testNameSpaceInjection,"@Test public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""testnamespace.serviceUrl.default"" SERVICE_URI); Injector injector=LifecycleInjector.builder().withBootstrapModule(new BootstrapModule(){ @Override public void c"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,getName,public DataCenterInfo.Name  (){ return DataCenterInfo.Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffleRemoteRegistryTest,"@Test public void  () throws Exception { AmazonInfo ai1=AmazonInfo.Builder.newBuilder().addMetadata(MetaDataKey.availabilityZone ""us-east-1a"").build(); InstanceInfo instanceInfo1=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.tes"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffleSecureVirtualHostNameMapLastInstanceTest,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.testname:1"")"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,shuffleVirtualHostNameMapLastInstanceTest,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.testname:1"")"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,testApplicationsHashAndVersion,"@Test public void  (){ Applications applications=new Applications(""appsHashCode"" 1L Collections.emptyList()); assertEquals(1L (long)applications.getVersion()); assertEquals(""appsHashCode"" applications.getAppsHashCode()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,testGetNextIndex,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.testname:1"")"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,testInstanceFiltering,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.testname:1"")"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,testPopulateInstanceCount,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.testname:1"")"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,testReconcileHashcode,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.testname:1"")"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,testRegisteredApplications,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.testname:1"")"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,testRegisteredApplicationsConstructor,"@Test public void  (){ DataCenterInfo myDCI=new DataCenterInfo(){ public DataCenterInfo.Name getName(){ return DataCenterInfo.Name.MyOwn; } } ; InstanceInfo instanceInfo=InstanceInfo.Builder.newBuilder().setAppName(""test"").setVIPAddress(""test.testname:1"")"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\ApplicationsTest.java,testVersionAndAppHash,"@Test public void  (){ Applications apps=new Applications(); assertEquals(-1L (long)apps.getVersion()); assertNull(apps.getAppsHashCode()); apps.setVersion(101L); apps.setAppsHashCode(""UP_5_DOWN_6_""); assertEquals(101L (long)apps.getVersion()); assertEqua"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,setUp,"@Before public void  (){ when(clientConfig.getEurekaServerURLContext()).thenReturn(""context""); when(clientConfig.getRegion()).thenReturn(""region""); when(transportConfig.getApplicationsResolverDataStalenessThresholdSeconds()).thenReturn(1); applications=In"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,testHappyCase,@Test public void  (){ when(applicationsSource.getApplications(anyInt() eq(TimeUnit.SECONDS))).thenReturn(applications); List<AwsEndpoint> endpoints=resolver.getClusterEndpoints(); assertThat(endpoints.size() equalTo(applications.getInstancesByVirtualHost
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,testStaleData,@Test public void  (){ when(applicationsSource.getApplications(anyInt() eq(TimeUnit.SECONDS))).thenReturn(null); List<AwsEndpoint> endpoints=resolver.getClusterEndpoints(); assertThat(endpoints.isEmpty() is(true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ApplicationsResolverTest.java,testVipDoesNotExist,"@Test public void  (){ vipAddress=""doNotExist""; when(transportConfig.getReadClusterVip()).thenReturn(vipAddress); resolver=new ApplicationsResolver(clientConfig transportConfig applicationsSource transportConfig.getReadClusterVip()); when(applicationsSour"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,setUp,"@Before public void  (){ when(clientConfig.getEurekaServerURLContext()).thenReturn(""context""); when(clientConfig.getRegion()).thenReturn(""region""); applications=InstanceInfoGenerator.newBuilder(5 ""eurekaRead"" ""someOther"").build().toApplications(); vipAddr"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,testErrorResponseFromRemoteServer,@Test public void  (){ when(httpClient.getVip(vipAddress)).thenReturn(EurekaHttpResponse.anEurekaHttpResponse(500 (Applications)null).build()); List<AwsEndpoint> endpoints=resolver.getClusterEndpoints(); assertThat(endpoints.isEmpty() is(true)); verify(ht
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,testHappyCase,@Test public void  (){ List<AwsEndpoint> endpoints=resolver.getClusterEndpoints(); assertThat(endpoints.size() equalTo(applications.getInstancesByVirtualHostName(vipAddress).size())); verify(httpClient times(1)).shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\EurekaHttpResolverTest.java,testNoValidDataFromRemoteServer,@Test public void  (){ Applications newApplications=new Applications(); for ( Application application : applications.getRegisteredApplications()) { if (!application.getInstances().get(0).getVIPAddress().equals(vipAddress)) { newApplications.addApplication
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolverTest.java,setUp,"@Before public void  (){ when(clientConfig.shouldUseDnsForFetchingServiceUrls()).thenReturn(false); when(clientConfig.getRegion()).thenReturn(""us-east-1""); when(clientConfig.getAvailabilityZones(""us-east-1"")).thenReturn(new String[]{""us-east-1c"" ""us-east-"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ConfigClusterResolverTest.java,testReadFromConfig,"@Test public void  (){ List<AwsEndpoint> endpoints=resolver.getClusterEndpoints(); assertThat(endpoints.size() equalTo(6)); for ( AwsEndpoint endpoint : endpoints) { if (endpoint.getZone().equals(""us-east-1e"")) { assertThat(""secure was wrong"" endpoint.isS"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\TestEurekaHttpResolver.java,TestEurekaHttpResolver,public  (EurekaClientConfig clientConfig EurekaTransportConfig transportConfig EurekaHttpClientFactory clientFactory String vipAddress){ super(clientConfig transportConfig clientFactory vipAddress); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\SampleCluster.java,SampleClusterBuilder,public  (String region String zone String networkPrefix){ this.region=region; this.zone=zone; this.networkPrefix=networkPrefix; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\SampleCluster.java,build,"public List<AwsEndpoint>  (){ List<AwsEndpoint> endpoints=new ArrayList<>(); for (int i=0; i < serverPoolSize; i++) { String hostName=networkPrefix + i; endpoints.add(new AwsEndpoint(hostName 80 false ""/eureka/v2"" region zone)); } return endpoints; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,testExtractZoneFromHostName,"@Test public void  () throws Exception { assertThat(ResolverUtils.extractZoneFromHostName(""us-east-1c.myservice.net"") is(equalTo(""us-east-1c""))); assertThat(ResolverUtils.extractZoneFromHostName(""txt.us-east-1c.myservice.net"") is(equalTo(""us-east-1c""))); "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,testIdentical,@Test public void  () throws Exception { List<AwsEndpoint> firstList=SampleCluster.UsEast1a.builder().withServerPool(10).build(); List<AwsEndpoint> secondList=ResolverUtils.randomize(firstList); assertThat(ResolverUtils.identical(firstList secondList) is(
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ResolverUtilsTest.java,testSplitByZone,"@Test public void  () throws Exception { List<AwsEndpoint> endpoints=SampleCluster.merge(SampleCluster.UsEast1a SampleCluster.UsEast1b SampleCluster.UsEast1c); List<AwsEndpoint>[] parts=ResolverUtils.splitByZone(endpoints ""us-east-1b""); List<AwsEndpoint> "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,testAntiAffinity,"@Test public void  () throws Exception { List<AwsEndpoint> endpoints=SampleCluster.merge(SampleCluster.UsEast1a SampleCluster.UsEast1b); ZoneAffinityClusterResolver resolver=new ZoneAffinityClusterResolver(new StaticClusterResolver<>(""regionA"" endpoints) "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,testApplicationZoneIsFirstOnTheList,@Test public void  () throws Exception { List<AwsEndpoint> endpoints=SampleCluster.merge(SampleCluster.UsEast1a SampleCluster.UsEast1b SampleCluster.UsEast1c); ZoneAffinityClusterResolver resolver=new ZoneAffinityClusterResolver(new StaticClusterResolver<
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\aws\ZoneAffinityClusterResolverTest.java,testUnrecognizedZoneIsIgnored,"@Test public void  () throws Exception { List<AwsEndpoint> endpoints=SampleCluster.merge(SampleCluster.UsEast1a SampleCluster.UsEast1b); ZoneAffinityClusterResolver resolver=new ZoneAffinityClusterResolver(new StaticClusterResolver<>(""regionA"" endpoints) "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\StaticClusterResolverTest.java,testClusterResolverFromURL,"@Test public void  () throws Exception { verifyEqual(StaticClusterResolver.fromURL(""regionA"" new URL(""http://eureka.test:8080/eureka/v2/apps"")) new DefaultEndpoint(""eureka.test"" 8080 false ""/eureka/v2/apps"")); verifyEqual(StaticClusterResolver.fromURL(""re"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\StaticClusterResolverTest.java,verifyEqual,private static void  (ClusterResolver<EurekaEndpoint> actual EurekaEndpoint expected){ assertThat(actual.getClusterEndpoints().get(0) is(equalTo(expected))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,awaitUpdate,"private static boolean  (ReloadingClusterResolver<AwsEndpoint> resolver List<AwsEndpoint> expected) throws Exception { long deadline=System.currentTimeMillis() + 5 * 1000; do { List<AwsEndpoint> current=resolver.getClusterEndpoints(); if (ResolverUtils.identical(current expected)) { return true; } Thread.sleep(1); } while (System.currentTimeMillis() < deadline); throw new TimeoutException(""Endpoint list not reloaded on time""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,createClusterResolver,"@Override public ClusterResolver<AwsEndpoint>  (){ return new StaticClusterResolver<>(""regionA"" currentEndpointsRef.get()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,setEndpoints,void  (List<AwsEndpoint> endpoints){ currentEndpointsRef.set(endpoints); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,testDataAreReloadedPeriodically,@Test(timeout=30000) public void  () throws Exception { List<AwsEndpoint> firstEndpointList=SampleCluster.UsEast1a.build(); factory.setEndpoints(firstEndpointList); resolver=new ReloadingClusterResolver<>(factory 1); assertThat(resolver.getClusterEndpoint
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\resolver\ReloadingClusterResolverTest.java,testIdenticalListsDoNotCauseReload,@Test(timeout=30000) public void  () throws Exception { List<AwsEndpoint> firstEndpointList=SampleCluster.UsEast1a.build(); factory.setEndpoints(firstEndpointList); resolver=new ReloadingClusterResolver(factory 1); assertThat(resolver.getClusterEndpoints(
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,setupRedirect,"public void  (){ when(factory.newClient(Matchers.<EurekaEndpoint>anyVararg())).thenReturn(sourceClient redirectedClient); when(sourceClient.getApplications()).thenReturn(anEurekaHttpResponse(302 Applications.class).headers(HttpHeaders.LOCATION ""http://another.discovery.test/eureka/v2/apps"").build()); when(dnsService.resolveIp(""another.discovery.test"")).thenReturn(""192.168.0.1""); when(redirectedClient.getApplications()).thenReturn(anEurekaHttpResponse(200 new Applications()).type(MediaType.APPLICATION_JSON_TYPE).build()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,testNonRedirectedRequestsAreServedByFirstClient,@Test public void  () throws Exception { when(factory.newClient(Matchers.<EurekaEndpoint>anyVararg())).thenReturn(sourceClient); when(sourceClient.getApplications()).thenReturn(anEurekaHttpResponse(200 new Applications()).type(MediaType.APPLICATION_JSON_T
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,testOnConnectionErrorPinnedClientIsDestroyed,@Test public void  () throws Exception { setupRedirect(); RedirectingEurekaHttpClient httpClient=new RedirectingEurekaHttpClient(SERVICE_URL factory dnsService); httpClient.getApplications(); verify(redirectedClient times(1)).getApplications(); when(redir
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RedirectingEurekaHttpClientTest.java,testRedirectsAreFollowedAndClientIsPinnedToTheLastServer,@Test public void  () throws Exception { setupRedirect(); RedirectingEurekaHttpClient httpClient=new RedirectingEurekaHttpClient(SERVICE_URL factory dnsService); httpClient.getApplications(); verify(factory times(2)).newClient(Matchers.<EurekaEndpoint>any
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,RequestExecutorRunner, (RequestExecutor<Void> requestExecutor){ this.requestExecutor=requestExecutor; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,awaitReady,"void  (){ try { readyLatch.await(); } catch ( InterruptedException e) { throw new IllegalStateException(""never released""); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,complete,void  (){ completeLatch.countDown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,execute,"@Override public EurekaHttpResponse<Void>  (EurekaHttpClient delegate){ readyLatch.countDown(); try { completeLatch.await(); } catch ( InterruptedException e) { throw new IllegalStateException(""never released""); } return EurekaHttpResponse.status(200); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,executeWithTransportErrorExpectation,"private void  (){ try { retryableClient.execute(requestExecutor); fail(""TransportException expected""); } catch ( TransportException ignore) { } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,getRequestType,@Override public RequestType  (){ return TEST_REQUEST_TYPE; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,run,@Override public void  (){ retryableClient.execute(requestExecutor); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,setUp,"@Before public void  () throws Exception { when(transportConfig.getRetryableClientQuarantineRefreshPercentage()).thenReturn(0.66); retryableClient=new RetryableEurekaHttpClient(""test"" transportConfig clusterResolver clientFactory serverStatusEvaluator NUM"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,simulateTransportError,"private void  (int delegateFrom int count){ for (int i=0; i < count; i++) { int delegateId=delegateFrom + i; when(clientFactory.newClient(Matchers.<EurekaEndpoint>anyVararg())).thenReturn(clusterDelegates.get(delegateId)); when(requestExecutor.execute(clusterDelegates.get(delegateId))).thenThrow(new TransportException(""simulated network error"")); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,test5xxStatusCodeResultsInRequestRetry,@Test public void  () throws Exception { when(clientFactory.newClient(Matchers.<EurekaEndpoint>anyVararg())).thenReturn(clusterDelegates.get(0) clusterDelegates.get(1)); when(requestExecutor.execute(clusterDelegates.get(0))).thenReturn(EurekaHttpResponse.
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testConcurrentRequestsLeaveLastSuccessfulDelegate,@Test(timeout=10000) public void  () throws Exception { when(clientFactory.newClient(Matchers.<EurekaEndpoint>anyVararg())).thenReturn(clusterDelegates.get(0) clusterDelegates.get(1)); BlockingRequestExecutor executor0=new BlockingRequestExecutor(); Block
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testErrorResponseIsReturnedIfRetryLimitIsReached,@Test(expected=TransportException.class) public void  () throws Exception { simulateTransportError(0 NUMBER_OF_RETRIES + 1); retryableClient.execute(requestExecutor); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testQuarantineListIsResetWhenNoMoreServerAreAvailable,@Test public void  () throws Exception { simulateTransportError(0 CLUSTER_SIZE); for (int i=0; i < 2; i++) { executeWithTransportErrorExpectation(); } when(clientFactory.newClient(Matchers.<EurekaEndpoint>anyVararg())).thenReturn(clusterDelegates.get(0));
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testRequestIsRetriedOnConnectionError,@Test public void  () throws Exception { when(clientFactory.newClient(Matchers.<EurekaEndpoint>anyVararg())).thenReturn(clusterDelegates.get(0) clusterDelegates.get(1)); when(requestExecutor.execute(clusterDelegates.get(0))).thenThrow(new TransportExcepti
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\RetryableEurekaHttpClientTest.java,testRequestsReuseSameConnectionIfThereIsNoError,@Test public void  () throws Exception { when(clientFactory.newClient(Matchers.<EurekaEndpoint>anyVararg())).thenReturn(clusterDelegates.get(0)); when(requestExecutor.execute(clusterDelegates.get(0))).thenReturn(EurekaHttpResponse.status(200)); for (int i
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,await,public boolean  (long timeout TimeUnit unit) throws Exception { return latch.await(timeout unit); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,TestTask,public  (int runTimeSecs boolean blockInterrupt){ this.runTimeSecs=runTimeSecs; this.blockInterrupt=blockInterrupt; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,run,public void  (){ testTaskStartCounter.incrementAndGet(); try { testTaskCounter.incrementAndGet(); synchronized (maxConcurrentTestTasks) { int activeCount=executor.getActiveCount(); if (maxConcurrentTestTasks.get() < activeCount) { maxConcurrentTestTasks.set(activeCount); } } long endTime=System.currentTimeMillis() + runTimeSecs * 1000; while (endTime >= System.currentTimeMillis()) { try { Thread.sleep(runTimeSecs * 1000); } catch ( InterruptedException e) { if (!blockInterrupt) { throw e; } } } testTaskCounter.decrementAndGet(); testTaskSuccessfulCounter.incrementAndGet(); } catch ( InterruptedException e) { testTaskInterruptedCounter.incrementAndGet(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,setUp,"@Before public void  (){ scheduler=Executors.newScheduledThreadPool(4 new ThreadFactoryBuilder().setNameFormat(""DiscoveryClient-%d"").setDaemon(true).build()); helperExecutor=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(10)); executor=new "
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,tearDown,@After public void  (){ if (executor != null) { executor.shutdownNow(); } if (helperExecutor != null) { helperExecutor.shutdownNow(); } if (scheduler != null) { scheduler.shutdownNow(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,testSupervisorRejectNewTasksIfThreadPoolIsFullForIncompleteTasks,"@Test public void  () throws Exception { TestTask testTask=new TestTask(4 true); TimedSupervisorTask supervisorTask=new TimedSupervisorTask(""test"" scheduler executor 1 TimeUnit.MILLISECONDS EXP_BACK_OFF_BOUND testTask); scheduler.schedule(supervisorTask 0"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,testSupervisorTaskAsPeriodicScheduledJobHappyCase,"@Test public void  () throws Exception { TestTask testTask=new TestTask(1 false); TimedSupervisorTask supervisorTask=new TimedSupervisorTask(""test"" scheduler executor 4 TimeUnit.SECONDS EXP_BACK_OFF_BOUND testTask); scheduler.schedule(supervisorTask 0 Tim"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,testSupervisorTaskAsPeriodicScheduledJobTestTaskTimingOut,"@Test public void  () throws Exception { TestTask testTask=new TestTask(5 false); TimedSupervisorTask supervisorTask=new TimedSupervisorTask(""test"" scheduler executor 2 TimeUnit.SECONDS EXP_BACK_OFF_BOUND testTask); scheduler.schedule(supervisorTask 0 Tim"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,testSupervisorTaskCancelsTimedOutTask,"@Test public void  () throws Exception { TestTask testTask=new TestTask(5 false); TimedSupervisorTask supervisorTask=new TimedSupervisorTask(""test"" scheduler executor 1 TimeUnit.SECONDS EXP_BACK_OFF_BOUND testTask); helperExecutor.submit(supervisorTask).g"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\TimedSupervisorTaskTest.java,testSupervisorTaskDefaultSingleTestTaskHappyCase,"@Test public void  () throws Exception { TestTask testTask=new TestTask(1 false); TimedSupervisorTask supervisorTask=new TimedSupervisorTask(""test"" scheduler executor 5 TimeUnit.SECONDS EXP_BACK_OFF_BOUND testTask); helperExecutor.submit(supervisorTask).g"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,handle,@Override public ClientResponse  (ClientRequest cr) throws ClientHandlerException { latch.countDown(); return mock(ClientResponse.class); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,setUp,@Before public void  () throws IOException { clientConfig=mock(EurekaClientConfig.class); transportConfig=mock(EurekaTransportConfig.class); when(clientConfig.getEurekaServerTotalConnectionsPerHost()).thenReturn(10); when(clientConfig.getEurekaServerTotal
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,tearDown,@After public void  () throws Exception { if (writeServer != null) { writeServer.shutdown(); } if (readServer != null) { readServer.shutdown(); } if (clientFactory != null) { clientFactory.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,testAddingAdditionalFilters,@Test public void  () throws Exception { TestFilter testFilter=new TestFilter(); Collection<ClientFilter> additionalFilters=Arrays.<ClientFilter>asList(testFilter); TransportClientFactory transportClientFactory=new Jersey1TransportClientFactories().newTra
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,testCanonicalClient,"@Test public void  () throws Exception { Applications apps=instanceGen.toApplications(); when(writeRequestHandler.getApplications()).thenReturn(anEurekaHttpResponse(302 Applications.class).headers(""Location"" readServerURI + ""/v2/apps"").build()); when(read"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,testCanonicalResolver,"@Test public void  () throws Exception { when(clientConfig.getEurekaServerURLContext()).thenReturn(""context""); when(clientConfig.getRegion()).thenReturn(""region""); when(transportConfig.getAsyncExecutorThreadPoolSize()).thenReturn(3); when(transportConfig."
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\EurekaHttpClientsTest.java,testCompositeBootstrapResolver,"@Test public void  () throws Exception { Applications applications=InstanceInfoGenerator.newBuilder(5 ""eurekaWrite"" ""someOther"").build().toApplications(); Applications applications2=InstanceInfoGenerator.newBuilder(2 ""eurekaWrite"" ""someOther"").build().toA"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClientTest.java,getEurekaHttpClient,"@Override protected EurekaHttpClient  (URI serviceURI){ Preconditions.checkState(jerseyHttpClient == null ""EurekaHttpClient has been already created""); TransportClientFactory clientFactory=JerseyEurekaHttpClientFactory.newBuilder().withClientName(""compati"
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\jersey\JerseyApplicationClientTest.java,tearDown,@Override @After public void  () throws Exception { if (jerseyHttpClient != null) { jerseyHttpClient.shutdown(); } super.tearDown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,answer,@Override public EurekaHttpClient  (InvocationOnMock invocation) throws Throwable { return clientRef.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\shared\transport\decorator\SessionedEurekaHttpClientTest.java,testReconnectIsEnforcedAtConfiguredInterval,@Test public void  () throws Exception { final AtomicReference<EurekaHttpClient> clientRef=new AtomicReference<>(firstClient); when(factory.newClient()).thenAnswer(new Answer<EurekaHttpClient>(){ @Override public EurekaHttpClient answer( InvocationOnMock 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,testIsInEc2,@Test public void  (){ InstanceInfo instanceInfo1=new InstanceInfo.Builder(InstanceInfoGenerator.takeOne()).setDataCenterInfo(new DataCenterInfo(){ @Override public Name getName(){ return Name.MyOwn; } } ).build(); Assert.assertFalse(EurekaUtils.isInEc2(i
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\EurekaUtilsTest.java,testIsInVpc,@Test public void  (){ InstanceInfo instanceInfo1=new InstanceInfo.Builder(InstanceInfoGenerator.takeOne()).setDataCenterInfo(new DataCenterInfo(){ @Override public Name getName(){ return Name.MyOwn; } } ).build(); Assert.assertFalse(EurekaUtils.isInVpc(i
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\RateLimiterTest.java,testBursts,private void  (RateLimiter rateLimiter long start int burstSize int averageRate long step){ assertTrue(rateLimiter.acquire(burstSize averageRate start)); assertTrue(rateLimiter.acquire(burstSize averageRate start)); assertFalse(rateLimiter.acquire(burstSize averageRate start)); assertTrue(rateLimiter.acquire(burstSize averageRate start + step + step / 2)); assertFalse(rateLimiter.acquire(burstSize averageRate start + step + step / 2)); assertTrue(rateLimiter.acquire(burstSize averageRate start + 2 * step)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\RateLimiterTest.java,testEvenLoad,private void  (RateLimiter rateLimiter long start int burstSize int averageRate long step){ for (long currentTime=start; currentTime < 3; currentTime+=step) { assertTrue(rateLimiter.acquire(burstSize averageRate currentTime)); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client\src\test\java\com\netflix\discovery\util\DiscoveryBuildInfoTest.java,testRequestedManifestIsLocatedAndLoaded,"@Test public void  () throws Exception { DiscoveryBuildInfo buildInfo=new DiscoveryBuildInfo(ObjectMapper.class); assertThat(buildInfo.getBuildVersion().contains(""version_unknown"") is(false)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,Archaius2AmazonInfoConfig,public  (Config configInstance String namespace){ this.namespace=namespace; this.configInstance=configInstance; this.prefixedConfig=new InternalPrefixedConfig(configInstance namespace); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,getConnectTimeout,@Override public int  (){ return prefixedConfig.getInteger(CONNECT_TIMEOUT_KEY Values.DEFAULT_CONNECT_TIMEOUT); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,getNamespace,@Override public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,getNumRetries,@Override public int  (){ return prefixedConfig.getInteger(NUM_RETRIES_KEY Values.DEFAULT_NUM_RETRIES); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,getReadTimeout,@Override public int  (){ return prefixedConfig.getInteger(READ_TIMEOUT_KEY Values.DEFAULT_READ_TIMEOUT); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,shouldFailFastOnFirstLoad,@Override public boolean  (){ return prefixedConfig.getBoolean(FAIL_FAST_ON_FIRST_LOAD_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,shouldLogAmazonMetadataErrors,@Override public boolean  (){ return prefixedConfig.getBoolean(LOG_METADATA_ERROR_KEY false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Archaius2AmazonInfoConfig.java,shouldValidateInstanceId,@Override public boolean  (){ return prefixedConfig.getBoolean(SHOULD_VALIDATE_INSTANCE_ID_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,Ec2EurekaArchaius2InstanceConfig, (Config configInstance AmazonInfoConfig amazonInfoConfig String namespace AmazonInfo initialInfo boolean eagerInit){ super(configInstance namespace); this.amazonInfoConfig=amazonInfoConfig; if (eagerInit) { RefreshableAmazonInfoProvider.FallbackAddressProvider fallbackAddressProvider=new RefreshableAmazonInfoProvider.FallbackAddressProvider(){ @Override public String getFallbackIp(){ return Ec2EurekaArchaius2InstanceConfig.super.getIpAddress(); } @Override public String getFallbackHostname(){ return Ec2EurekaArchaius2InstanceConfig.super.getHostName(false); } } ; this.amazonInfoHolder=new RefreshableAmazonInfoProvider(amazonInfoConfig fallbackAddressProvider); } else { this.amazonInfoHolder=new RefreshableAmazonInfoProvider(initialInfo amazonInfoConfig); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,getDataCenterInfo,@Override public DataCenterInfo  (){ return amazonInfoHolder.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,getDefaultAddressResolutionOrder,@Override public String[]  (){ String[] order=super.getDefaultAddressResolutionOrder(); return (order.length == 0) ? DEFAULT_AWS_ADDRESS_RESOLUTION_ORDER : order; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,getFallbackHostname,@Override public String  (){ return Ec2EurekaArchaius2InstanceConfig.super.getHostName(false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,getFallbackIp,@Override public String  (){ return Ec2EurekaArchaius2InstanceConfig.super.getIpAddress(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,getHostName,@Override public String  (boolean refresh){ if (refresh) { amazonInfoHolder.refresh(); } return amazonInfoHolder.get().get(MetaDataKey.publicHostname); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,refreshAmazonInfo,@Deprecated public synchronized void  (){ amazonInfoHolder.refresh(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfig.java,resolveDefaultAddress,@Override public String  (boolean refresh){ String result=getHostName(refresh); for ( String name : getDefaultAddressResolutionOrder()) { try { AmazonInfo.MetaDataKey key=AmazonInfo.MetaDataKey.valueOf(name); String address=amazonInfoHolder.get().get(key)
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,EurekaArchaius2InstanceConfig,public  (Config configInstance String namespace DataCenterInfo dcInfo){ this.defaultAppGroup=configInstance.getString(FALLBACK_APP_GROUP_KEY Values.UNKNOWN_APPLICATION); this.namespace=namespace; this.configInstance=configInstance; this.prefixedConfig=new InternalPrefixedConfig(configInstance namespace); this.dcInfo=dcInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getASGName,@Override public String  (){ return prefixedConfig.getString(ASG_NAME_KEY super.getASGName()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getAppGroupName,@Override public String  (){ return prefixedConfig.getString(APP_GROUP_KEY defaultAppGroup).trim(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getAppname,@Override public String  (){ return prefixedConfig.getString(APP_NAME_KEY Values.UNKNOWN_APPLICATION).trim(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getDataCenterInfo,@Override public DataCenterInfo  (){ return dcInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getDefaultAddressResolutionOrder,"@Override public String[]  (){ String result=prefixedConfig.getString(DEFAULT_ADDRESS_RESOLUTION_ORDER_KEY null); return result == null ? new String[0] : result.split("" ""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getHealthCheckUrl,@Override public String  (){ return prefixedConfig.getString(HEALTHCHECK_URL_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getHealthCheckUrlPath,@Override public String  (){ return prefixedConfig.getString(HEALTHCHECK_URL_PATH_KEY Values.DEFAULT_HEALTHCHECK_URLPATH); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getHomePageUrl,@Override public String  (){ return prefixedConfig.getString(HOME_PAGE_URL_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getHomePageUrlPath,@Override public String  (){ return prefixedConfig.getString(HOME_PAGE_URL_PATH_KEY Values.DEFAULT_HOMEPAGE_URLPATH); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getInstanceId,@Override public String  (){ String result=prefixedConfig.getString(INSTANCE_ID_KEY null); return result == null ? null : result.trim(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getLeaseExpirationDurationInSeconds,@Override public int  (){ return prefixedConfig.getInteger(LEASE_EXPIRATION_DURATION_KEY super.getLeaseExpirationDurationInSeconds()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getLeaseRenewalIntervalInSeconds,@Override public int  (){ return prefixedConfig.getInteger(LEASE_RENEWAL_INTERVAL_KEY super.getLeaseRenewalIntervalInSeconds()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getMetadataMap,@Override public Map<String String>  (){ Map<String String> meta=new HashMap<>(); InternalPrefixedConfig metadataConfig=new InternalPrefixedConfig(configInstance namespace INSTANCE_METADATA_PREFIX); for ( String key : Sets.newHashSet(metadataConfig.getKey
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getNamespace,@Override public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getNonSecurePort,@Override public int  (){ return prefixedConfig.getInteger(PORT_KEY super.getNonSecurePort()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getSecureHealthCheckUrl,@Override public String  (){ return prefixedConfig.getString(SECURE_HEALTHCHECK_URL_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getSecurePort,@Override public int  (){ return prefixedConfig.getInteger(SECURE_PORT_KEY super.getSecurePort()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getSecurePortEnabled,@Override public boolean  (){ return prefixedConfig.getBoolean(SECURE_PORT_ENABLED_KEY super.getSecurePortEnabled()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getSecureVirtualHostName,@Override public String  (){ return this.getSecurePortEnabled() ? prefixedConfig.getString(SECURE_VIRTUAL_HOSTNAME_KEY super.getSecureVirtualHostName()) : null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getStatusPageUrl,@Override public String  (){ return prefixedConfig.getString(STATUS_PAGE_URL_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getStatusPageUrlPath,@Override public String  (){ return prefixedConfig.getString(STATUS_PAGE_URL_PATH_KEY Values.DEFAULT_STATUSPAGE_URLPATH); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,getVirtualHostName,@Override public String  (){ return this.isNonSecurePortEnabled() ? prefixedConfig.getString(VIRTUAL_HOSTNAME_KEY super.getVirtualHostName()) : null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,isInstanceEnabledOnit,@Override public boolean  (){ return prefixedConfig.getBoolean(TRAFFIC_ENABLED_ON_INIT_KEY super.isInstanceEnabledOnit()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\EurekaArchaius2InstanceConfig.java,isNonSecurePortEnabled,@Override public boolean  (){ return prefixedConfig.getBoolean(PORT_ENABLED_KEY super.isNonSecurePortEnabled()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java,Archaius2VipAddressResolver,@Inject public  (Config config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\Archaius2VipAddressResolver.java,resolveDeploymentContextBasedVipAddresses,@Override public String  (String vipAddressMacro){ if (vipAddressMacro == null) { return null; } String result=vipAddressMacro; Matcher matcher=VIP_ATTRIBUTES_PATTERN.matcher(result); while (matcher.find()) { String key=matcher.group(1); String value=conf
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,CompositeInstanceConfigFactory,@Inject public  (Config configInstance String namespace){ this.configInstance=configInstance; this.namespace=namespace; this.prefixedConfig=new InternalPrefixedConfig(configInstance namespace); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,autoDetectEc2,"private boolean  (AmazonInfoConfig amazonInfoConfig){ try { URL url=AmazonInfo.MetaDataKey.instanceId.getURL(null null); String id=AmazonInfoUtils.readEc2MetadataUrl(AmazonInfo.MetaDataKey.instanceId url amazonInfoConfig.getConnectTimeout() amazonInfoConfig.getReadTimeout()); if (id != null) { logger.info(""Auto detected EC2 deployment environment  instanceId = {}"" id); return true; } else { logger.info(""Auto detected non-EC2 deployment environment  instanceId from metadata url is null""); return false; } } catch ( SocketTimeoutException e) { logger.info(""Auto detected non-EC2 deployment environment  connection to ec2 instance metadata url failed.""); } catch ( Exception e) { logger.warn(""Failed to auto-detect whether we are in EC2 due to unexpected exception"" e); } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,get,@Override public synchronized EurekaInstanceConfig  (){ if (eurekaInstanceConfig == null) { AmazonInfoConfig amazonInfoConfig=new Archaius2AmazonInfoConfig(configInstance namespace); if (isInEc2(amazonInfoConfig)) { eurekaInstanceConfig=new Ec2EurekaArcha
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,getDeploymentEnvironmentOverride,private String  (){ return prefixedConfig.getString(DEPLOYMENT_ENVIRONMENT_OVERRIDE_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\appinfo\providers\CompositeInstanceConfigFactory.java,isInEc2,"private boolean  (AmazonInfoConfig amazonInfoConfig){ String deploymentEnvironmentOverride=getDeploymentEnvironmentOverride(); if (deploymentEnvironmentOverride == null) { return autoDetectEc2(amazonInfoConfig); } else if (""ec2"".equalsIgnoreCase(deploymentEnvironmentOverride)) { logger.info(""Assuming EC2 deployment environment due to config override""); return true; } else { return false; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,EurekaArchaius2ClientConfig,public  (Config configInstance EurekaTransportConfig transportConfig String namespace){ this.transportConfig=transportConfig; this.configInstance=configInstance; this.prefixedConfig=new InternalPrefixedConfig(configInstance namespace); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,allowRedirects,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_ALLOW_REDIRECTS_KEY false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,fetchRegistryForRemoteRegions,public String  (){ return prefixedConfig.getString(SHOULD_FETCH_REMOTE_REGION_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getAvailabilityZones,"public String[]  (String region){ return prefixedConfig.getString(String.format(""%s."" + CONFIG_AVAILABILITY_ZONE_PREFIX region) DEFAULT_ZONE).split("" ""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getBackupRegistryImpl,public String  (){ return prefixedConfig.getString(BACKUP_REGISTRY_CLASSNAME_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getCacheRefreshExecutorExponentialBackOffBound,public int  (){ return prefixedConfig.getInteger(CACHEREFRESH_BACKOFF_BOUND_KEY Values.DEFAULT_EXECUTOR_THREAD_POOL_BACKOFF_BOUND); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getCacheRefreshExecutorThreadPoolSize,public int  (){ return prefixedConfig.getInteger(CACHEREFRESH_THREADPOOL_SIZE_KEY Values.DEFAULT_EXECUTOR_THREAD_POOL_SIZE); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getClientDataAccept,@Override public String  (){ return prefixedConfig.getString(CLIENT_DATA_ACCEPT_KEY EurekaAccept.full.name()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getDecoderName,@Override public String  (){ return prefixedConfig.getString(CLIENT_DECODER_NAME_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getDollarReplacement,public String  (){ return prefixedConfig.getString(CONFIG_DOLLAR_REPLACEMENT_KEY Values.CONFIG_DOLLAR_REPLACEMENT); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEncoderName,@Override public String  (){ return prefixedConfig.getString(CLIENT_ENCODER_NAME_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEscapeCharReplacement,public String  (){ return prefixedConfig.getString(CONFIG_ESCAPE_CHAR_REPLACEMENT_KEY Values.CONFIG_ESCAPE_CHAR_REPLACEMENT); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaConnectionIdleTimeoutSeconds,public int  (){ return prefixedConfig.getInteger(EUREKA_SERVER_CONNECTION_IDLE_TIMEOUT_KEY 30); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServerConnectTimeoutSeconds,public int  (){ return prefixedConfig.getInteger(EUREKA_SERVER_CONNECT_TIMEOUT_KEY 5); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServerDNSName,public String  (){ return prefixedConfig.getString(EUREKA_SERVER_DNS_NAME_KEY prefixedConfig.getString(EUREKA_SERVER_FALLBACK_DNS_NAME_KEY null)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServerPort,public String  (){ return prefixedConfig.getString(EUREKA_SERVER_PORT_KEY prefixedConfig.getString(EUREKA_SERVER_FALLBACK_PORT_KEY null)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServerReadTimeoutSeconds,public int  (){ return prefixedConfig.getInteger(EUREKA_SERVER_READ_TIMEOUT_KEY 8); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServerServiceUrls,"public List<String>  (String myZone){ String serviceUrls=prefixedConfig.getString(CONFIG_EUREKA_SERVER_SERVICE_URL_PREFIX + ""."" + myZone null); if (serviceUrls == null || serviceUrls.isEmpty()) { serviceUrls=prefixedConfig.getString(CONFIG_EUREKA_SERVER_SERVICE_URL_PREFIX + "".default"" null); } return serviceUrls != null ? Arrays.asList(serviceUrls.split("" "")) : Collections.<String>emptyList(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServerTotalConnections,public int  (){ return prefixedConfig.getInteger(EUREKA_SERVER_MAX_CONNECTIONS_KEY 200); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServerTotalConnectionsPerHost,public int  (){ return prefixedConfig.getInteger(EUREKA_SERVER_MAX_CONNECTIONS_PER_HOST_KEY 50); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServerURLContext,public String  (){ return prefixedConfig.getString(EUREKA_SERVER_URL_CONTEXT_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getEurekaServiceUrlPollIntervalSeconds,public int  (){ return prefixedConfig.getInteger(EUREKA_SERVER_URL_POLL_INTERVAL_KEY 300); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getExperimental,"@Override public String  (String name){ return prefixedConfig.getString(CONFIG_EXPERIMENTAL_PREFIX + ""."" + name null); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getHeartbeatExecutorExponentialBackOffBound,public int  (){ return prefixedConfig.getInteger(HEARTBEAT_BACKOFF_BOUND_KEY Values.DEFAULT_EXECUTOR_THREAD_POOL_BACKOFF_BOUND); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getHeartbeatExecutorThreadPoolSize,public int  (){ return prefixedConfig.getInteger(HEARTBEAT_THREADPOOL_SIZE_KEY Values.DEFAULT_EXECUTOR_THREAD_POOL_SIZE); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getInitialInstanceInfoReplicationIntervalSeconds,public int  (){ return prefixedConfig.getInteger(INITIAL_REGISTRATION_REPLICATION_DELAY_KEY 40); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getInstanceInfoReplicationIntervalSeconds,public int  (){ return prefixedConfig.getInteger(REGISTRATION_REPLICATION_INTERVAL_KEY 30); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getProxyHost,public String  (){ return prefixedConfig.getString(EUREKA_SERVER_PROXY_HOST_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getProxyPassword,public String  (){ return prefixedConfig.getString(EUREKA_SERVER_PROXY_PASSWORD_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getProxyPort,public String  (){ return prefixedConfig.getString(EUREKA_SERVER_PROXY_PORT_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getProxyUserName,public String  (){ return prefixedConfig.getString(EUREKA_SERVER_PROXY_USERNAME_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getRegion,public String  (){ return prefixedConfig.getString(CLIENT_REGION_KEY prefixedConfig.getString(CLIENT_REGION_FALLBACK_KEY Values.DEFAULT_CLIENT_REGION)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getRegistryFetchIntervalSeconds,public int  (){ return prefixedConfig.getInteger(REGISTRY_REFRESH_INTERVAL_KEY 30); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getRegistryRefreshSingleVipAddress,public String  (){ return prefixedConfig.getString(FETCH_SINGLE_VIP_ONLY_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,getTransportConfig,@Override public EurekaTransportConfig  (){ return transportConfig; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldDisableDelta,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_DISABLE_DELTA_KEY false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldEnforceRegistrationAtInit,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_ENFORCE_REGISTRATION_AT_INIT false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldFetchRegistry,public boolean  (){ return prefixedConfig.getBoolean(FETCH_REGISTRY_ENABLED_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldFilterOnlyUpInstances,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_FILTER_ONLY_UP_INSTANCES_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldGZipContent,public boolean  (){ return prefixedConfig.getBoolean(EUREKA_SERVER_GZIP_CONTENT_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldLogDeltaDiff,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_LOG_DELTA_DIFF_KEY false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldOnDemandUpdateStatusChange,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_ONDEMAND_UPDATE_STATUS_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldPreferSameZoneEureka,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_PREFER_SAME_ZONE_SERVER_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldRegisterWithEureka,public boolean  (){ return prefixedConfig.getBoolean(REGISTRATION_ENABLED_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldUnregisterOnShutdown,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_UNREGISTER_ON_SHUTDOWN_KEY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\EurekaArchaius2ClientConfig.java,shouldUseDnsForFetchingServiceUrls,public boolean  (){ return prefixedConfig.getBoolean(SHOULD_USE_DNS_KEY false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bindEurekaClientConfigNamespace,protected LinkedBindingBuilder<String>  (){ return bind(String.class).annotatedWith(Names.named(InternalEurekaClientModule.CLIENT_CONFIG_NAMESPACE_KEY)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bindEurekaInstanceConfigFactory,protected LinkedBindingBuilder<EurekaInstanceConfigFactory>  (){ return bind(EurekaInstanceConfigFactory.class); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,bindEurekaInstanceConfigNamespace,protected LinkedBindingBuilder<String>  (){ return bind(String.class).annotatedWith(Names.named(InternalEurekaClientModule.INSTANCE_CONFIG_NAMESPACE_KEY)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\EurekaClientModule.java,configure,@Override protected void  (){ install(new InternalEurekaClientModule()); configureEureka(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,EurekaArchaius2TransportConfig,public  (Config configInstance String parentNamespace String subNamespace){ this.configInstance=configInstance; this.prefixedConfig=new InternalPrefixedConfig(configInstance parentNamespace subNamespace); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,applicationsResolverUseIp,@Override public boolean  (){ return prefixedConfig.getBoolean(APPLICATION_RESOLVER_USE_IP_KEY false); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getApplicationsResolverDataStalenessThresholdSeconds,@Override public int  (){ return prefixedConfig.getInteger(DATA_STALENESS_THRESHOLD_KEY Values.DATA_STALENESS_TRHESHOLD); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getAsyncExecutorThreadPoolSize,@Override public int  (){ return prefixedConfig.getInteger(ASYNC_EXECUTOR_THREADPOOL_SIZE_KEY Values.ASYNC_EXECUTOR_THREADPOOL_SIZE); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getAsyncResolverRefreshIntervalMs,@Override public int  (){ return prefixedConfig.getInteger(ASYNC_RESOLVER_REFRESH_INTERVAL_KEY Values.ASYNC_RESOLVER_REFRESH_INTERVAL); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getAsyncResolverWarmUpTimeoutMs,@Override public int  (){ return prefixedConfig.getInteger(ASYNC_RESOLVER_WARMUP_TIMEOUT_KEY Values.ASYNC_RESOLVER_WARMUP_TIMEOUT); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getBootstrapResolverStrategy,@Override public String  (){ return prefixedConfig.getString(BOOTSTRAP_RESOLVER_STRATEGY_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getReadClusterVip,@Override public String  (){ return prefixedConfig.getString(READ_CLUSTER_VIP_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getRetryableClientQuarantineRefreshPercentage,@Override public double  (){ return prefixedConfig.getDouble(QUARANTINE_REFRESH_PERCENTAGE_KEY Values.QUARANTINE_REFRESH_PERCENTAGE); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getSessionedClientReconnectIntervalSeconds,@Override public int  (){ return prefixedConfig.getInteger(SESSION_RECONNECT_INTERVAL_KEY Values.SESSION_RECONNECT_INTERVAL); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,getWriteClusterVip,@Override public String  (){ return prefixedConfig.getString(WRITE_CLUSTER_VIP_KEY null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\shared\transport\EurekaArchaius2TransportConfig.java,useBootstrapResolverForQuery,@Override public boolean  (){ return prefixedConfig.getBoolean(USE_BOOTSTRAP_RESOLVER_FOR_QUERY true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,createConfig,private Ec2EurekaArchaius2InstanceConfig  (AmazonInfo info){ return new Ec2EurekaArchaius2InstanceConfig(MapConfig.from(Collections.<String String>emptyMap()) info){ @Override public String[] getDefaultAddressResolutionOrder(){ return new String[]{publicHostname.name() localIpv4.name()}; } @Override public String getHostName( boolean refresh){ return dummyDefault; } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,getDefaultAddressResolutionOrder,@Override public String[]  (){ return new String[]{publicHostname.name() localIpv4.name()}; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,getHostName,@Override public String  (boolean refresh){ return dummyDefault; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,setUp,@Before public void  (){ instanceInfo=InstanceInfoGenerator.takeOne(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\appinfo\Ec2EurekaArchaius2InstanceConfigTest.java,testResolveDefaultAddress,@Test public void  (){ AmazonInfo info=(AmazonInfo)instanceInfo.getDataCenterInfo(); config=createConfig(info); assertThat(config.resolveDefaultAddress(false) is(info.get(publicHostname))); info.getMetadata().remove(publicHostname.getName()); config=creat
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,InternalPrefixedConfig,"public  (Config config String... namespaces){ this.config=config; String tempNamespace=""""; for ( String namespace : namespaces) { if (namespace != null && !namespace.isEmpty()) { tempNamespace+=namespace.endsWith(""."") ? namespace : namespace + "".""; } } this.namespace=tempNamespace; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,getBoolean,public Boolean  (String key Boolean defaultValue){ return config.getBoolean(namespace + key defaultValue); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,getDouble,public Double  (String key Double defaultValue){ return config.getDouble(namespace + key defaultValue); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,getInteger,public Integer  (String key Integer defaultValue){ return config.getInteger(namespace + key defaultValue); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,getKeys,"public Iterator<String>  (){ final String prefixRegex=""^"" + namespace; final Iterator<String> internalIterator=config.getKeys(namespace); return new Iterator<String>(){ @Override public boolean hasNext(){ return internalIterator.hasNext(); } @Override public String next(){ String value=internalIterator.next(); return value.replaceFirst(prefixRegex """"); } } ; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,getLong,public Long  (String key Long defaultValue){ return config.getLong(namespace + key defaultValue); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,getNamespace,public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,getString,public String  (String key String defaultValue){ return config.getString(namespace + key defaultValue); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,hasNext,@Override public boolean  (){ return internalIterator.hasNext(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\internal\util\InternalPrefixedConfig.java,next,"@Override public String  (){ String value=internalIterator.next(); return value.replaceFirst(prefixRegex """"); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,configureArchaius,"@Override protected void  (){ bindApplicationConfigurationOverride().toInstance(MapConfig.builder().put(""eureka.region"" ""default"").put(""eureka.shouldFetchRegistry"" ""false"").put(""eureka.registration.enabled"" ""false"").put(""eureka.serviceUrl.default"" ""http:/"
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,setUp,"@Before public void  () throws Exception { injector=InjectorBuilder.fromModules(new ArchaiusModule(){ @Override protected void configureArchaius(){ bindApplicationConfigurationOverride().toInstance(MapConfig.builder().put(""eureka.region"" ""default"").put(""e"
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,tearDown,@After public void  (){ if (injector != null) { injector.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\Ec2EurekaClientModuleTest.java,testDI,"@SuppressWarnings(""deprecation"") @Test public void  (){ InstanceInfo instanceInfo=injector.getInstance(InstanceInfo.class); Assert.assertEquals(ApplicationInfoManager.getInstance().getInfo() instanceInfo); VipAddressResolver vipAddressResolver=injector.ge"
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,configure,@Override protected void  (){ requireBinding(Config.class); bind(ApplicationInfoManager.class).asEagerSingleton(); bind(VipAddressResolver.class).to(Archaius2VipAddressResolver.class); bind(InstanceInfo.class).toProvider(EurekaConfigBasedInstanceInfoProvi
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,equals,@Override public boolean  (Object obj){ return obj != null && getClass().equals(obj.getClass()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,getClientConfigNamespace,"String  (){ return clientConfigNamespace == null ? ""eureka"" : clientConfigNamespace; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,getEurekaClientConfig,@Provides @Singleton public EurekaClientConfig  (Config config EurekaTransportConfig transportConfig ModuleConfig moduleConfig EurekaConfigLoader configLoader){ return new EurekaArchaius2ClientConfig(config transportConfig moduleConfig.getClientConfigName
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,getEurekaInstanceConfigProvider,@Provides @Singleton public EurekaInstanceConfig  (ModuleConfig moduleConfig EurekaConfigLoader configLoader){ return moduleConfig.getInstanceConfigProvider().get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,getEurekaTransportConfig,@Provides @Singleton public EurekaTransportConfig  (Config config ModuleConfig moduleConfig EurekaConfigLoader configLoader){ return new EurekaArchaius2TransportConfig(config moduleConfig.getClientConfigNamespace()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,getInstanceConfigNamespace,"String  (){ return instanceConfigNamespace == null ? ""eureka"" : instanceConfigNamespace; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,getInstanceConfigProvider,EurekaInstanceConfigFactory  (){ return instanceConfigFactory == null ? new CompositeInstanceConfigFactory(config getInstanceConfigNamespace()) : instanceConfigFactory; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\main\java\com\netflix\discovery\guice\InternalEurekaClientModule.java,hashCode,@Override public int  (){ return getClass().hashCode(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,configure,@Override protected void  (){ bind(ApplicationInfoManager.class).toInstance(mockInfoManager); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,configureEureka,@Override protected void  (){ bindEurekaInstanceConfigFactory().toInstance(mockFactory); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\EurekaClientModuleConfigurationTest.java,testBindEurekaInstanceConfigFactory,@Test public void  (){ final EurekaInstanceConfigFactory mockFactory=Mockito.mock(EurekaInstanceConfigFactory.class); final EurekaInstanceConfig mockConfig=Mockito.mock(EurekaInstanceConfig.class); final ApplicationInfoManager mockInfoManager=Mockito.mock
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,configureArchaius,"@Override protected void  (){ bindApplicationConfigurationOverride().toInstance(MapConfig.builder().put(""eureka.region"" ""default"").put(""eureka.shouldFetchRegistry"" ""false"").put(""eureka.registration.enabled"" ""false"").put(""eureka.serviceUrl.default"" ""http:/"
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,setUp,"@Before public void  () throws Exception { injector=InjectorBuilder.fromModules(new ArchaiusModule(){ @Override protected void configureArchaius(){ bindApplicationConfigurationOverride().toInstance(MapConfig.builder().put(""eureka.region"" ""default"").put(""e"
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,tearDown,@After public void  (){ if (injector != null) { injector.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\guice\NonEc2EurekaClientModuleTest.java,testDI,"@SuppressWarnings(""deprecation"") @Test public void  (){ InstanceInfo instanceInfo=injector.getInstance(InstanceInfo.class); Assert.assertEquals(ApplicationInfoManager.getInstance().getInfo() instanceInfo); VipAddressResolver vipAddressResolver=injector.ge"
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,configure,@Override protected void  (){ bind(ApplicationInfoManager.class).asEagerSingleton(); bind(EurekaInstanceConfig.class).toProvider(CloudInstanceConfigProvider.class).in(Scopes.SINGLETON); bind(EurekaClientConfig.class).toProvider(DefaultEurekaClientConfigPr
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,equals,@Override public boolean  (Object obj){ return obj != null && getClass().equals(obj.getClass()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,getTransportClientFactories,@Provides public TransportClientFactories  (){ return Jersey2TransportClientFactories.getInstance(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\guice\Jersey2EurekaModule.java,hashCode,@Override public int  (){ return getClass().hashCode(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-archaius2\src\test\java\com\netflix\discovery\internal\util\InternalPrefixedConfigTest.java,testPrefixes,"@Test public void  (){ Config configInstance=Mockito.mock(Config.class); InternalPrefixedConfig config=new InternalPrefixedConfig(configInstance); Assert.assertEquals("""" config.getNamespace()); config=new InternalPrefixedConfig(configInstance ""foo""); Asse"
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClient.java,AbstractJersey2EurekaHttpClient,"public  (Client jerseyClient String serviceUrl){ this.jerseyClient=jerseyClient; this.serviceUrl=serviceUrl; String localUserName=null; String localPassword=null; try { URI serviceURI=new URI(serviceUrl); if (serviceURI.getUserInfo() != null) { String[] credentials=serviceURI.getUserInfo().split("":""); if (credentials.length == 2) { localUserName=credentials[0]; localPassword=credentials[1]; } } } catch ( URISyntaxException ignore) { } this.userName=localUserName; this.password=localPassword; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaIdentityHeaderFilter.java,EurekaIdentityHeaderFilter,public  (AbstractEurekaIdentity authInfo){ this.authInfo=authInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaIdentityHeaderFilter.java,filter,@Override public void  (ClientRequestContext requestContext) throws IOException { if (authInfo != null) { requestContext.getHeaders().putSingle(AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY authInfo.getName()); requestContext.getHeaders().putSingle(Abstract
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,ConnectionCleanerTask,"private  (int connectionIdleTimeout){ this.connectionIdleTimeout=connectionIdleTimeout; MonitorConfig.Builder monitorConfigBuilder=MonitorConfig.builder(""Eureka-Connection-Cleaner-Time""); executionTimeStats=new BasicTimer(monitorConfigBuilder.build()); cleanupFailed=new BasicCounter(MonitorConfig.builder(""Eureka-Connection-Cleaner-Failure"").build()); try { Monitors.registerObject(this); } catch ( Exception e) { s_logger.error(""Unable to register with servo."" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,EurekaJersey2ClientImpl,"public  (int connectionTimeout int readTimeout final int connectionIdleTimeout ClientConfig clientConfig){ try { jerseyClientConfig=clientConfig; jerseyClientConfig.register(DiscoveryJerseyProvider.class); jerseyClientConfig.connectorProvider(new ApacheConnectorProvider()); jerseyClientConfig.property(ClientProperties.CONNECT_TIMEOUT connectionTimeout); jerseyClientConfig.property(ClientProperties.READ_TIMEOUT readTimeout); apacheHttpClient=ClientBuilder.newClient(jerseyClientConfig); connectionCleanerTask=new ConnectionCleanerTask(connectionIdleTimeout); eurekaConnCleaner.scheduleWithFixedDelay(connectionCleanerTask HTTP_CONNECTION_CLEANER_INTERVAL_MS HTTP_CONNECTION_CLEANER_INTERVAL_MS TimeUnit.MILLISECONDS); } catch ( Throwable e) { throw new RuntimeException(""Cannot create Jersey2 client"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,MyDefaultApacheHttpClient4Config," (){ PoolingHttpClientConnectionManager cm; if (systemSSL) { cm=createSystemSslCM(); } else if (trustStoreFileName != null) { cm=createCustomSslCM(); } else { cm=new PoolingHttpClientConnectionManager(); } if (proxyHost != null) { addProxyConfiguration(); } DiscoveryJerseyProvider discoveryJerseyProvider=new DiscoveryJerseyProvider(encoderWrapper decoderWrapper); register(discoveryJerseyProvider); cm.setDefaultMaxPerRoute(maxConnectionsPerHost); cm.setMaxTotal(maxTotalConnections); property(ApacheClientProperties.CONNECTION_MANAGER cm); String fullUserAgentName=(userAgent == null ? clientName : userAgent) + ""/v"" + buildVersion(); property(CoreProtocolPNames.USER_AGENT fullUserAgentName); property(ClientProperties.FOLLOW_REDIRECTS Boolean.FALSE); property(ClientPNames.HANDLE_REDIRECTS Boolean.FALSE); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,addProxyConfiguration,"private void  (){ if (proxyUserName != null && proxyPassword != null) { property(ClientProperties.PROXY_USERNAME proxyUserName); property(ClientProperties.PROXY_PASSWORD proxyPassword); } else { property(ClientProperties.PROXY_USERNAME ""guest""); property(ClientProperties.PROXY_PASSWORD ""guest""); } property(ClientProperties.PROXY_URI ""http://"" + proxyHost + "":""+ proxyPort); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,build,"public EurekaJersey2Client  (){ MyDefaultApacheHttpClient4Config config=new MyDefaultApacheHttpClient4Config(); try { return new EurekaJersey2ClientImpl(connectionTimeout readTimeout connectionIdleTimeout config); } catch ( Throwable e) { throw new RuntimeException(""Cannot create Jersey client "" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,createCustomSslCM,"private PoolingHttpClientConnectionManager  (){ FileInputStream fin=null; try { SSLContext sslContext=SSLContext.getInstance(PROTOCOL_SCHEME); KeyStore sslKeyStore=KeyStore.getInstance(KEYSTORE_TYPE); fin=new FileInputStream(trustStoreFileName); sslKeyStore.load(fin trustStorePassword.toCharArray()); TrustManagerFactory factory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); factory.init(sslKeyStore); TrustManager[] trustManagers=factory.getTrustManagers(); sslContext.init(null trustManagers null); ConnectionSocketFactory socketFactory=new SSLConnectionSocketFactory(sslContext SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); Registry registry=RegistryBuilder.<ConnectionSocketFactory>create().register(PROTOCOL socketFactory).build(); return new PoolingHttpClientConnectionManager(registry); } catch ( Exception ex) { throw new IllegalStateException(""SSL configuration issue"" ex); } finally { if (fin != null) { try { fin.close(); } catch ( IOException ignore) { } } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,createSystemSslCM,private PoolingHttpClientConnectionManager  (){ ConnectionSocketFactory socketFactory=SSLConnectionSocketFactory.getSystemSocketFactory(); Registry registry=RegistryBuilder.<ConnectionSocketFactory>create().register(PROTOCOL socketFactory).build(); return new PoolingHttpClientConnectionManager(registry); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,destroyResources,@Override public void  (){ if (eurekaConnCleaner != null) { eurekaConnCleaner.execute(connectionCleanerTask); eurekaConnCleaner.shutdown(); } if (apacheHttpClient != null) { apacheHttpClient.close(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,getClient,@Override public Client  (){ return apacheHttpClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,newThread,"@Override public Thread  (Runnable r){ Thread thread=new Thread(r ""Eureka-Jersey2Client-Conn-Cleaner"" + threadNumber.incrementAndGet()); thread.setDaemon(true); return thread; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,run,@Override public void  (){ Stopwatch start=executionTimeStats.start(); try { HttpClientConnectionManager cm=(HttpClientConnectionManager)apacheHttpClient.getConfiguration().getProperty(ApacheClientProperties.CONNECTION_MANAGER); cm.closeIdleConnections(co
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withClientName,public EurekaJersey2ClientBuilder  (String clientName){ this.clientName=clientName; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withConnectionIdleTimeout,public EurekaJersey2ClientBuilder  (int connectionIdleTimeout){ this.connectionIdleTimeout=connectionIdleTimeout; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withConnectionTimeout,public EurekaJersey2ClientBuilder  (int connectionTimeout){ this.connectionTimeout=connectionTimeout; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withDecoder,public EurekaJersey2ClientBuilder  (String decoderName String clientDataAccept){ return this.withDecoderWrapper(CodecWrappers.resolveDecoder(decoderName clientDataAccept)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withDecoderWrapper,public EurekaJersey2ClientBuilder  (DecoderWrapper decoderWrapper){ this.decoderWrapper=decoderWrapper; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withEncoder,public EurekaJersey2ClientBuilder  (String encoderName){ return this.withEncoderWrapper(CodecWrappers.getEncoder(encoderName)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withEncoderWrapper,public EurekaJersey2ClientBuilder  (EncoderWrapper encoderWrapper){ this.encoderWrapper=encoderWrapper; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withMaxConnectionsPerHost,public EurekaJersey2ClientBuilder  (int maxConnectionsPerHost){ this.maxConnectionsPerHost=maxConnectionsPerHost; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withMaxTotalConnections,public EurekaJersey2ClientBuilder  (int maxTotalConnections){ this.maxTotalConnections=maxTotalConnections; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withProxy,public EurekaJersey2ClientBuilder  (String proxyHost String proxyPort String user String password){ this.proxyHost=proxyHost; this.proxyPort=proxyPort; this.proxyUserName=user; this.proxyPassword=password; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withReadTimeout,public EurekaJersey2ClientBuilder  (int readTimeout){ this.readTimeout=readTimeout; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withSystemSSLConfiguration,public EurekaJersey2ClientBuilder  (){ this.systemSSL=true; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withTrustStoreFile,public EurekaJersey2ClientBuilder  (String trustStoreFileName String trustStorePassword){ this.trustStoreFileName=trustStoreFileName; this.trustStorePassword=trustStorePassword; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\EurekaJersey2ClientImpl.java,withUserAgent,public EurekaJersey2ClientBuilder  (String userAgent){ this.userAgent=userAgent; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,Jersey2ApplicationClientFactory,public  (Client jersey2Client MultivaluedMap<String Object> additionalHeaders){ this.jersey2Client=jersey2Client; this.additionalHeaders=additionalHeaders; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,addProviders,private void  (ClientConfig clientConfig){ DiscoveryJerseyProvider discoveryJerseyProvider=new DiscoveryJerseyProvider(encoderWrapper decoderWrapper); clientConfig.register(discoveryJerseyProvider); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,addProxyConfiguration,"private void  (ClientConfig clientConfig){ if (proxyHost != null) { String proxyAddress=proxyHost; if (proxyPort > 0) { proxyAddress+=':' + proxyPort; } clientConfig.property(ClientProperties.PROXY_URI proxyAddress); if (proxyUserName != null) { if (proxyPassword == null) { throw new IllegalArgumentException(""Proxy user name provided but not password""); } clientConfig.property(ClientProperties.PROXY_USERNAME proxyUserName); clientConfig.property(ClientProperties.PROXY_PASSWORD proxyPassword); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,addSSLConfiguration,"private void  (ClientBuilder clientBuilder){ try { if (systemSSL) { clientBuilder.sslContext(SSLContext.getDefault()); } else if (trustStoreFileName != null) { KeyStore trustStore=KeyStore.getInstance(KEY_STORE_TYPE); FileInputStream fin=new FileInputStream(trustStoreFileName); trustStore.load(fin trustStorePassword.toCharArray()); clientBuilder.trustStore(trustStore); } else if (sslContext != null) { clientBuilder.sslContext(sslContext); } } catch ( Exception ex) { throw new IllegalArgumentException(""Cannot setup SSL for Jersey2 client"" ex); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,build,@Override public Jersey2ApplicationClientFactory  (){ ClientBuilder clientBuilder=ClientBuilder.newBuilder(); ClientConfig clientConfig=new ClientConfig(); for ( ClientRequestFilter filter : additionalFilters) { clientBuilder.register(filter); } for ( Fea
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,create,"public static Jersey2ApplicationClientFactory  (EurekaClientConfig clientConfig Collection<ClientRequestFilter> additionalFilters InstanceInfo myInstanceInfo AbstractEurekaIdentity clientIdentity Optional<SSLContext> sslContext Optional<HostnameVerifier> hostnameVerifier){ Jersey2ApplicationClientFactoryBuilder clientBuilder=newBuilder(); clientBuilder.withAdditionalFilters(additionalFilters); clientBuilder.withMyInstanceInfo(myInstanceInfo); clientBuilder.withUserAgent(""Java-EurekaClient""); clientBuilder.withClientConfig(clientConfig); clientBuilder.withClientIdentity(clientIdentity); sslContext.ifPresent(clientBuilder::withSSLContext); hostnameVerifier.ifPresent(clientBuilder::withHostnameVerifier); if (""true"".equals(System.getProperty(""com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory""))) { clientBuilder.withClientName(""DiscoveryClient-HTTPClient-System"").withSystemSSLConfiguration(); } else if (clientConfig.getProxyHost() != null && clientConfig.getProxyPort() != null) { clientBuilder.withClientName(""Proxy-DiscoveryClient-HTTPClient"").withProxy(clientConfig.getProxyHost() Integer.parseInt(clientConfig.getProxyPort()) clientConfig.getProxyUserName() clientConfig.getProxyPassword()); } else { clientBuilder.withClientName(""DiscoveryClient-HTTPClient""); } return clientBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,filter,@Override public void  (ClientRequestContext requestContext){ requestContext.getHeaders().put(HttpHeaders.USER_AGENT Collections.<Object>singletonList(fullUserAgentName)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,newBuilder,public static Jersey2ApplicationClientFactoryBuilder  (){ return new Jersey2ApplicationClientFactoryBuilder(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,newClient,@Override public EurekaHttpClient  (EurekaEndpoint endpoint){ return new Jersey2ApplicationClient(jersey2Client endpoint.getServiceUrl() additionalHeaders); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,shutdown,@Override public void  (){ jersey2Client.close(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,withAdditionalFilters,Jersey2ApplicationClientFactoryBuilder  (Collection<ClientRequestFilter> additionalFilters){ if (additionalFilters != null) { this.additionalFilters.addAll(additionalFilters); } return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClientFactory.java,withFeature,public Jersey2ApplicationClientFactoryBuilder  (Feature feature){ features.add(feature); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,getInstance,public static Jersey2TransportClientFactories  (){ return INSTANCE; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClient.java,Jersey2ApplicationClient,public  (Client jerseyClient String serviceUrl MultivaluedMap<String Object> additionalHeaders){ super(jerseyClient serviceUrl); this.additionalHeaders=additionalHeaders; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,newClient,@Override public EurekaHttpClient  (EurekaEndpoint serviceUrl){ return metricsFactory.newClient(serviceUrl); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2ApplicationClient.java,addExtraHeaders,@Override protected void  (Builder webResource){ if (additionalHeaders != null) { for ( Map.Entry<String List<Object>> entry : additionalHeaders.entrySet()) { webResource.header(entry.getKey() entry.getValue()); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,newTransportClientFactory,@Override public TransportClientFactory  (Collection<ClientRequestFilter> additionalFilters EurekaJerseyClient providedJerseyClient){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2TransportClientFactories.java,shutdown,@Override public void  (){ metricsFactory.shutdown(); jerseyFactory.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2EurekaIdentityHeaderFilter.java,Jersey2EurekaIdentityHeaderFilter,public  (AbstractEurekaIdentity authInfo){ this.authInfo=authInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\main\java\com\netflix\discovery\shared\transport\jersey2\Jersey2EurekaIdentityHeaderFilter.java,filter,@Override public void  (ClientRequestContext requestContext) throws IOException { if (authInfo != null) { requestContext.getHeaders().putSingle(AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY authInfo.getName()); requestContext.getHeaders().putSingle(Abstract
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClientTest.java,getEurekaHttpClient,@Override protected EurekaHttpClient  (URI serviceURI){ Jersey2ApplicationClientFactoryBuilder factoryBuilder=Jersey2ApplicationClientFactory.newBuilder(); if (serviceURI.getUserInfo() != null) { factoryBuilder.withFeature(HttpAuthenticationFeature.basicB
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\shared\transport\jersey2\AbstractJersey2EurekaHttpClientTest.java,tearDown,@Override @After public void  () throws Exception { if (jersey2HttpClient != null) { jersey2HttpClient.shutdown(); } super.tearDown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,configure,@Override protected void  (){ bind(EurekaInstanceConfig.class).toProvider(MyDataCenterInstanceConfigProvider.class).in(Scopes.SINGLETON); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,setUp,"@Before public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.region"" ""default""); ConfigurationManager.getConfigInstance().setProperty(""eureka.shouldFetchRegistry"" ""false""); ConfigurationManager.getConfigInstance("
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,tearDown,@After public void  (){ if (injector != null) { injector.shutdown(); } ConfigurationManager.getConfigInstance().clear(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-client-jersey2\src\test\java\com\netflix\discovery\guice\Jersey2EurekaModuleTest.java,testDI,"@SuppressWarnings(""deprecation"") @Test public void  (){ InstanceInfo instanceInfo=injector.getInstance(InstanceInfo.class); Assert.assertEquals(ApplicationInfoManager.getInstance().getInfo() instanceInfo); EurekaClient eurekaClient=injector.getInstance(Eu"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,AwsAsgUtil,@Inject public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig InstanceRegistry registry){ this.serverConfig=serverConfig; this.clientConfig=clientConfig; this.registry=registry; this.asgCache=CacheBuilder.newBuilder().initialCapacity(50
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,CacheKey, (String asgAccountId String asgName){ this.asgAccountId=asgAccountId; this.asgName=asgName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,call,@Override public Boolean  () throws Exception { return load(key); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (!(o instanceof CacheKey)) return false; CacheKey cacheKey=(CacheKey)o; if (asgAccountId != null ? !asgAccountId.equals(cacheKey.asgAccountId) : cacheKey.asgAccountId != null) return fal
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getASGAccount,"private String  (String asgName){ Applications apps=registry.getApplicationsFromLocalRegionOnly(); for ( Application app : apps.getRegisteredApplications()) { for ( InstanceInfo instanceInfo : app.getInstances()) { String thisAsgName=instanceInfo.getASGName(); if (thisAsgName != null && thisAsgName.equals(asgName)) { String localAccountId=getAccountId(instanceInfo null); if (localAccountId != null) { return localAccountId; } } } } logger.info(""Couldn't get the ASG account for {}  using the default accountId instead"" asgName); return accountId; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getASGUpdateTask,"private TimerTask  (){ return new TimerTask(){ @Override public void run(){ try { Set<CacheKey> cacheKeys=getCacheKeys(); if (logger.isDebugEnabled()) { logger.debug(""Trying to refresh the keys for {}"" Arrays.toString(cacheKeys.toArray())); } for ( CacheKey key : cacheKeys) { try { asgCache.refresh(key); } catch ( Throwable e) { logger.error(""Error updating the ASG cache for {}"" key e); } } } catch ( Throwable e) { logger.error(""Error updating the ASG cache"" e); } } } ; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getAccountId,private static String  (){ InstanceInfo myInfo=ApplicationInfoManager.getInstance().getInfo(); return ((AmazonInfo)myInfo.getDataCenterInfo()).get(MetaDataKey.accountId); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getAmazonAutoScalingClient,"private AmazonAutoScaling  (){ String aWSAccessId=serverConfig.getAWSAccessId(); String aWSSecretKey=serverConfig.getAWSSecretKey(); ClientConfiguration clientConfiguration=new ClientConfiguration().withConnectionTimeout(serverConfig.getASGQueryTimeoutMs()); if (null != aWSAccessId && !"""".equals(aWSAccessId) && null != aWSSecretKey && !"""".equals(aWSSecretKey)) { return new AmazonAutoScalingClient(new BasicAWSCredentials(aWSAccessId aWSSecretKey) clientConfiguration); } else { return new AmazonAutoScalingClient(new InstanceProfileCredentialsProvider() clientConfiguration); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getCacheKeys,private Set<CacheKey>  (){ Set<CacheKey> cacheKeys=new HashSet<CacheKey>(); Applications apps=registry.getApplicationsFromLocalRegionOnly(); for ( Application app : apps.getRegisteredApplications()) { for ( InstanceInfo instanceInfo : app.getInstances()) { String localAccountId=getAccountId(instanceInfo accountId); String asgName=instanceInfo.getASGName(); if (asgName != null) { CacheKey key=new CacheKey(localAccountId asgName); cacheKeys.add(key); } } } return cacheKeys; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getNumberofASGQueries,"@com.netflix.servo.annotations.Monitor(name=""numOfASGQueries"" description=""Number of queries made to AWS to retrieve ASG information"" type=DataSourceType.COUNTER) public long  (){ return asgCache.stats().loadCount(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getNumberofASGQueryFailures,"@com.netflix.servo.annotations.Monitor(name=""numOfASGQueryFailures"" description=""Number of queries made to AWS to retrieve ASG information and that failed"" type=DataSourceType.COUNTER) public long  (){ return asgCache.stats().loadExceptionCount(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,getNumberofElementsinASGCache,"@com.netflix.servo.annotations.Monitor(name=""numOfElementsinASGCache"" description=""Number of elements in the ASG Cache"" type=DataSourceType.GAUGE) public long  (){ return asgCache.size(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,hashCode,@Override public int  (){ int result=asgName != null ? asgName.hashCode() : 0; result=31 * result + (asgAccountId != null ? asgAccountId.hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,initializeStsSession,"private Credentials  (String asgAccount){ AWSSecurityTokenService sts=new AWSSecurityTokenServiceClient(new InstanceProfileCredentialsProvider()); String region=clientConfig.getRegion(); if (!region.equals(""us-east-1"")) { sts.setEndpoint(""sts."" + region + "".amazonaws.com""); } String roleName=serverConfig.getListAutoScalingGroupsRoleName(); String roleArn=""arn:aws:iam::"" + asgAccount + "":role/""+ roleName; AssumeRoleResult assumeRoleResult=sts.assumeRole(new AssumeRoleRequest().withRoleArn(roleArn).withRoleSessionName(""sts-session-"" + asgAccount)); return assumeRoleResult.getCredentials(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,isASGEnabled,"public boolean  (InstanceInfo instanceInfo){ CacheKey cacheKey=new CacheKey(getAccountId(instanceInfo accountId) instanceInfo.getASGName()); Boolean result=asgCache.getIfPresent(cacheKey); if (result != null) { return result; } else { logger.info(""Cache value for asg {} does not exist yet  async refreshing."" cacheKey.asgName); asgCache.refresh(cacheKey); return true; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,isASGEnabledinAWS,"private Boolean  (String asgAccountid String asgName){ try { Stopwatch t=this.loadASGInfoTimer.start(); boolean returnValue=!isAddToLoadBalancerSuspended(asgAccountid asgName); t.stop(); return returnValue; } catch ( Throwable e) { logger.error(""Could not get ASG information from AWS: "" e); } return Boolean.TRUE; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,isAddToLoadBalancerSuspended,private boolean  (AutoScalingGroup asg){ List<SuspendedProcess> suspendedProcesses=asg.getSuspendedProcesses(); for ( SuspendedProcess process : suspendedProcesses) { if (PROP_ADD_TO_LOAD_BALANCER.equals(process.getProcessName())) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,load,@Override public Boolean  (CacheKey key) throws Exception { return isASGEnabledinAWS(key.asgAccountId key.asgName); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,newThread,"@Override public Thread  (Runnable r){ Thread thread=new Thread(r ""Eureka-AWS-isASGEnabled""); thread.setDaemon(true); return thread; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,reload,@Override public ListenableFuture<Boolean>  (final CacheKey key Boolean oldValue) throws Exception { return listeningCacheReloadExecutor.submit(new Callable<Boolean>(){ @Override public Boolean call() throws Exception { return load(key); } } ); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieveAutoScalingGroup,"private AutoScalingGroup  (String asgName){ if (Strings.isNullOrEmpty(asgName)) { logger.warn(""null asgName specified  not attempting to retrieve AutoScalingGroup from AWS""); return null; } DescribeAutoScalingGroupsRequest request=new DescribeAutoScalingGroupsRequest().withAutoScalingGroupNames(asgName); DescribeAutoScalingGroupsResult result=awsClient.describeAutoScalingGroups(request); List<AutoScalingGroup> asgs=result.getAutoScalingGroups(); if (asgs.isEmpty()) { return null; } else { return asgs.get(0); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,retrieveAutoScalingGroupCrossAccount,"private AutoScalingGroup  (String asgAccount String asgName){ logger.debug(""Getting cross account ASG for asgName: {}  asgAccount: {}"" asgName asgAccount); Credentials credentials=stsCredentials.get(asgAccount); if (credentials == null || credentials.getExpiration().getTime() < System.currentTimeMillis() + 1000) { stsCredentials.put(asgAccount initializeStsSession(asgAccount)); credentials=stsCredentials.get(asgAccount); } ClientConfiguration clientConfiguration=new ClientConfiguration().withConnectionTimeout(serverConfig.getASGQueryTimeoutMs()); AmazonAutoScaling autoScalingClient=new AmazonAutoScalingClient(new BasicSessionCredentials(credentials.getAccessKeyId() credentials.getSecretAccessKey() credentials.getSessionToken()) clientConfiguration); String region=clientConfig.getRegion(); if (!region.equals(""us-east-1"")) { autoScalingClient.setEndpoint(""autoscaling."" + region + "".amazonaws.com""); } DescribeAutoScalingGroupsRequest request=new DescribeAutoScalingGroupsRequest().withAutoScalingGroupNames(asgName); DescribeAutoScalingGroupsResult result=autoScalingClient.describeAutoScalingGroups(request); List<AutoScalingGroup> asgs=result.getAutoScalingGroups(); if (asgs.isEmpty()) { return null; } else { return asgs.get(0); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,run,"@Override public void  (){ try { Set<CacheKey> cacheKeys=getCacheKeys(); if (logger.isDebugEnabled()) { logger.debug(""Trying to refresh the keys for {}"" Arrays.toString(cacheKeys.toArray())); } for ( CacheKey key : cacheKeys) { try { asgCache.refresh(key)"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,setStatus,public void  (String asgName boolean enabled){ String asgAccountId=getASGAccount(asgName); asgCache.put(new CacheKey(asgAccountId asgName) enabled); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsAsgUtil.java,toString,"@Override public String  (){ return ""CacheKey{"" + ""asgName='"" + asgName + '\''+ ""  asgAccountId='""+ asgAccountId+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsBinderDelegate.java,AwsBinderDelegate,@Inject public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig PeerAwareInstanceRegistry registry ApplicationInfoManager applicationInfoManager){ AwsBindingStrategy bindingStrategy=serverConfig.getBindingStrategy(); switch (bindingStrate
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsBinderDelegate.java,shutdown,@Override @PreDestroy public void  () throws Exception { delegate.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\AwsBinderDelegate.java,start,@Override @PostConstruct public void  () throws Exception { delegate.start(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,EIPManager,@Inject public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig PeerAwareInstanceRegistry registry ApplicationInfoManager applicationInfoManager){ this.serverConfig=serverConfig; this.clientConfig=clientConfig; this.registry=registry; thi
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,bindEIP,"public void  (){ InstanceInfo myInfo=applicationInfoManager.getInfo(); String myInstanceId=((AmazonInfo)myInfo.getDataCenterInfo()).get(MetaDataKey.instanceId); String myZone=((AmazonInfo)myInfo.getDataCenterInfo()).get(MetaDataKey.availabilityZone); Collection<String> candidateEIPs=getCandidateEIPs(myInstanceId myZone); AmazonEC2 ec2Service=getEC2Service(); boolean isMyinstanceAssociatedWithEIP=false; Address selectedEIP=null; for ( String eipEntry : candidateEIPs) { try { String associatedInstanceId; DescribeAddressesRequest describeAddressRequest=new DescribeAddressesRequest().withPublicIps(eipEntry); DescribeAddressesResult result=ec2Service.describeAddresses(describeAddressRequest); if ((result.getAddresses() != null) && (!result.getAddresses().isEmpty())) { Address eipAddress=result.getAddresses().get(0); associatedInstanceId=eipAddress.getInstanceId(); if (((associatedInstanceId == null) || (associatedInstanceId.isEmpty()))) { if (selectedEIP == null) { selectedEIP=eipAddress; } } else if (isMyinstanceAssociatedWithEIP=(associatedInstanceId.equals(myInstanceId))) { selectedEIP=eipAddress; break; } else { logger.warn(""The selected EIP {} is associated with another instance {} according to AWS "" + "" hence skipping this"" eipEntry associatedInstanceId); } } } catch ( Throwable t) { logger.error(""Failed to bind elastic IP: {} to {}"" eipEntry myInstanceId t); } } if (null != selectedEIP) { String publicIp=selectedEIP.getPublicIp(); if (!isMyinstanceAssociatedWithEIP) { AssociateAddressRequest associateAddressRequest=new AssociateAddressRequest().withInstanceId(myInstanceId); String domain=selectedEIP.getDomain(); if (""vpc"".equals(domain)) { associateAddressRequest.setAllocationId(selectedEIP.getAllocationId()); } else { associateAddressRequest.setPublicIp(publicIp); } ec2Service.associateAddress(associateAddressRequest); logger.info(""\n\n\nAssociated {} running in zone: {} to elastic IP: {}"" myInstanceId myZone publicIp); } logger.info(""My instance {} seems to be already associated with the EIP {}"" myInstanceId publicIp); } else { logger.info(""No EIP is free to be associated with this instance. Candidate EIPs are: {}"" candidateEIPs); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getCandidateEIPs,"public Collection<String>  (String myInstanceId String myZone){ if (myZone == null) { myZone=""us-east-1d""; } Collection<String> eipCandidates=clientConfig.shouldUseDnsForFetchingServiceUrls() ? getEIPsForZoneFromDNS(myZone) : getEIPsForZoneFromConfig(myZone); if (eipCandidates == null || eipCandidates.size() == 0) { throw new RuntimeException(""Could not get any elastic ips from the EIP pool for zone :"" + myZone); } return eipCandidates; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getEC2Service,"private AmazonEC2  (){ String aWSAccessId=serverConfig.getAWSAccessId(); String aWSSecretKey=serverConfig.getAWSSecretKey(); AmazonEC2 ec2Service; if (null != aWSAccessId && !"""".equals(aWSAccessId) && null != aWSSecretKey && !"""".equals(aWSSecretKey)) { ec2Service=new AmazonEC2Client(new BasicAWSCredentials(aWSAccessId aWSSecretKey)); } else { ec2Service=new AmazonEC2Client(new InstanceProfileCredentialsProvider()); } String region=clientConfig.getRegion(); region=region.trim().toLowerCase(); ec2Service.setEndpoint(""ec2."" + region + "".amazonaws.com""); return ec2Service; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getEIPsForZoneFromConfig,private Collection<String>  (String myZone){ List<String> ec2Urls=clientConfig.getEurekaServerServiceUrls(myZone); return getEIPsFromServiceUrls(ec2Urls); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getEIPsForZoneFromDNS,private Collection<String>  (String myZone){ List<String> ec2Urls=EndpointUtils.getServiceUrlsFromDNS(clientConfig myZone true new EndpointUtils.InstanceInfoBasedUrlRandomizer(applicationInfoManager.getInfo())); return getEIPsFromServiceUrls(ec2Urls); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,getEIPsFromServiceUrls,"private Collection<String>  (List<String> ec2Urls){ List<String> returnedUrls=new ArrayList<String>(); String region=clientConfig.getRegion(); String regionPhrase=""""; if (!US_EAST_1.equals(region)) { regionPhrase=""."" + region; } for ( String cname : ec2Urls) { int beginIndex=cname.indexOf(""ec2-"") + 4; if (-1 < beginIndex) { int endIndex=cname.indexOf(regionPhrase + "".compute""); String eipStr=cname.substring(beginIndex endIndex); String eip=eipStr.replaceAll(""\\-"" "".""); returnedUrls.add(eip); } } return returnedUrls; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,handleEIPBinding,"private void  () throws InterruptedException { int retries=serverConfig.getEIPBindRebindRetries(); for (int i=0; i < retries; i++) { try { if (isEIPBound()) { break; } else { bindEIP(); } } catch ( Throwable e) { logger.error(""Cannot bind to EIP"" e); Thread.sleep(EIP_BIND_SLEEP_TIME_MS); } } timer.schedule(new EIPBindingTask() serverConfig.getEIPBindingRetryIntervalMsWhenUnbound()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,isEIPBound,"public boolean  (){ InstanceInfo myInfo=applicationInfoManager.getInfo(); String myInstanceId=((AmazonInfo)myInfo.getDataCenterInfo()).get(MetaDataKey.instanceId); String myZone=((AmazonInfo)myInfo.getDataCenterInfo()).get(MetaDataKey.availabilityZone); String myPublicIP=((AmazonInfo)myInfo.getDataCenterInfo()).get(MetaDataKey.publicIpv4); Collection<String> candidateEIPs=getCandidateEIPs(myInstanceId myZone); for ( String eipEntry : candidateEIPs) { if (eipEntry.equals(myPublicIP)) { logger.info(""My instance {} seems to be already associated with the public ip {}"" myInstanceId myPublicIP); return true; } } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,run,@Override public void  (){ boolean isEIPBound=false; try { isEIPBound=isEIPBound(); if (!isEIPBound) { registry.clearRegistry(); int count=registry.syncUp(); registry.openForTraffic(applicationInfoManager count); } else { return; } bindEIP(); } catch ( Th
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,shutdown,"@PreDestroy public void  () throws Exception { timer.cancel(); for (int i=0; i < serverConfig.getEIPBindRebindRetries(); i++) { try { unbindEIP(); break; } catch ( Exception e) { logger.warn(""Cannot unbind the EIP from the instance""); Thread.sleep(1000); "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,start,@PostConstruct public void  () throws Exception { handleEIPBinding(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\EIPManager.java,unbindEIP,"public void  () throws Exception { InstanceInfo myInfo=applicationInfoManager.getInfo(); String myPublicIP=null; if (myInfo != null && myInfo.getDataCenterInfo().getName() == Name.Amazon) { myPublicIP=((AmazonInfo)myInfo.getDataCenterInfo()).get(MetaDataKey.publicIpv4); if (myPublicIP == null) { logger.info(""Instance is not associated with an EIP. Will not try to unbind""); return; } try { AmazonEC2 ec2Service=getEC2Service(); DescribeAddressesRequest describeAddressRequest=new DescribeAddressesRequest().withPublicIps(myPublicIP); DescribeAddressesResult result=ec2Service.describeAddresses(describeAddressRequest); if ((result.getAddresses() != null) && (!result.getAddresses().isEmpty())) { Address eipAddress=result.getAddresses().get(0); DisassociateAddressRequest dissociateRequest=new DisassociateAddressRequest(); String domain=eipAddress.getDomain(); if (""vpc"".equals(domain)) { dissociateRequest.setAssociationId(eipAddress.getAssociationId()); } else { dissociateRequest.setPublicIp(eipAddress.getPublicIp()); } ec2Service.disassociateAddress(dissociateRequest); logger.info(""Dissociated the EIP {} from this instance"" myPublicIP); } } catch ( Throwable e) { throw new RuntimeException(""Cannot dissociate address from this instance"" e); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,AsgReplicationTask,protected  (String peerNodeName Action action String asgName ASGStatus newStatus){ super(peerNodeName action); this.asgName=asgName; this.newStatus=newStatus; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,getAsgName,public String  (){ return asgName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,getNewStatus,public ASGStatus  (){ return newStatus; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\AsgReplicationTask.java,getTaskName,@Override public String  (){ return asgName + ':' + action+ '@'+ peerNodeName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,ResourceRecordSetWithHostedZone,public  (HostedZone hostedZone ResourceRecordSet resourceRecordSet){ this.hostedZone=hostedZone; this.resourceRecordSet=resourceRecordSet; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,Route53Binder,"public  (String registrationHostname EurekaServerConfig serverConfig EurekaClientConfig clientConfig ApplicationInfoManager applicationInfoManager){ this.registrationHostname=registrationHostname; this.serverConfig=serverConfig; this.clientConfig=clientConfig; this.applicationInfoManager=applicationInfoManager; this.timer=new Timer(""Eureka-Route53Binder"" true); this.amazonRoute53Client=getAmazonRoute53Client(serverConfig); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,createResourceRecordSet,private boolean  (ResourceRecordSetWithHostedZone rrs) throws InterruptedException { rrs.getResourceRecordSet().setResourceRecords(Arrays.asList(new ResourceRecord(registrationHostname))); Change change=new Change(ChangeAction.UPSERT rrs.getResourceRecordSet()); if (executeChangeWithRetry(change rrs.getHostedZone())) { Thread.sleep(1000); ResourceRecordSet resourceRecordSet=getResourceRecordSet(rrs.getResourceRecordSet().getName() rrs.getHostedZone()); return resourceRecordSet.getResourceRecords().equals(rrs.getResourceRecordSet().getResourceRecords()); } return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,doBind,"private void  () throws InterruptedException { List<ResourceRecordSetWithHostedZone> freeDomains=new ArrayList<>(); List<String> domains=getDeclaredDomains(); for ( String domain : domains) { ResourceRecordSetWithHostedZone rrs=getResourceRecordSetWithHostedZone(domain); if (rrs != null) { if (rrs.getResourceRecordSet() == null) { ResourceRecordSet resourceRecordSet=new ResourceRecordSet(); resourceRecordSet.setName(domain); resourceRecordSet.setType(RRType.CNAME); resourceRecordSet.setTTL(serverConfig.getRoute53DomainTTL()); freeDomains.add(new ResourceRecordSetWithHostedZone(rrs.getHostedZone() resourceRecordSet)); } else if (NULL_DOMAIN.equals(rrs.getResourceRecordSet().getResourceRecords().get(0).getValue())) { freeDomains.add(rrs); } if (hasValue(rrs registrationHostname)) { return; } } } for ( ResourceRecordSetWithHostedZone rrs : freeDomains) { if (createResourceRecordSet(rrs)) { logger.info(""Bind {} to {}"" registrationHostname rrs.getResourceRecordSet().getName()); return; } } logger.warn(""Unable to find free domain in {}"" domains); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,executeChange,"private void  (Change change HostedZone hostedZone){ logger.info(""Execute change {} "" change); ChangeResourceRecordSetsRequest changeResourceRecordSetsRequest=new ChangeResourceRecordSetsRequest(); changeResourceRecordSetsRequest.setHostedZoneId(hostedZone.getId()); ChangeBatch changeBatch=new ChangeBatch(); changeBatch.withChanges(change); changeResourceRecordSetsRequest.setChangeBatch(changeBatch); amazonRoute53Client.changeResourceRecordSets(changeResourceRecordSetsRequest); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,executeChangeWithRetry,"private boolean  (Change change HostedZone hostedZone) throws InterruptedException { Throwable firstError=null; for (int i=0; i < serverConfig.getRoute53BindRebindRetries(); i++) { try { executeChange(change hostedZone); return true; } catch ( Throwable e) { if (firstError == null) { firstError=e; } Thread.sleep(1000); } } if (firstError != null) { logger.error(""Cannot execute change {} {}"" change firstError firstError); } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,extractDomain,"private String  (String url) throws MalformedURLException { return new URL(url).getHost() + "".""; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,getAmazonRoute53Client,"private AmazonRoute53Client  (EurekaServerConfig serverConfig){ String aWSAccessId=serverConfig.getAWSAccessId(); String aWSSecretKey=serverConfig.getAWSSecretKey(); ClientConfiguration clientConfiguration=new ClientConfiguration().withConnectionTimeout(serverConfig.getASGQueryTimeoutMs()); if (null != aWSAccessId && !"""".equals(aWSAccessId) && null != aWSSecretKey && !"""".equals(aWSSecretKey)) { return new AmazonRoute53Client(new BasicAWSCredentials(aWSAccessId aWSSecretKey) clientConfiguration); } else { return new AmazonRoute53Client(new InstanceProfileCredentialsProvider() clientConfiguration); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,getDeclaredDomains,private List<String>  (){ final String myZone=getMyZone(); List<String> ec2Urls=clientConfig.getEurekaServerServiceUrls(myZone); return toDomains(ec2Urls); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,getHostedZone,public HostedZone  (){ return hostedZone; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,getMyZone,"private String  (){ InstanceInfo info=applicationInfoManager.getInfo(); AmazonInfo amazonInfo=info != null ? (AmazonInfo)info.getDataCenterInfo() : null; String zone=amazonInfo != null ? amazonInfo.get(AmazonInfo.MetaDataKey.availabilityZone) : null; if (zone == null) { throw new RuntimeException(""Cannot extract availabilityZone""); } return zone; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,getRegistrationHostnameFromAmazonDataCenterInfo,private static String  (ApplicationInfoManager applicationInfoManager){ InstanceInfo myInfo=applicationInfoManager.getInfo(); AmazonInfo dataCenterInfo=(AmazonInfo)myInfo.getDataCenterInfo(); String ip=dataCenterInfo.get(AmazonInfo.MetaDataKey.publicHostname); if (ip == null || ip.length() == 0) { return dataCenterInfo.get(AmazonInfo.MetaDataKey.localHostname); } return ip; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,getResourceRecordSet,public ResourceRecordSet  (){ return resourceRecordSet; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,getResourceRecordSetWithHostedZone,private ResourceRecordSetWithHostedZone  (String domain){ HostedZone hostedZone=getHostedZone(domain); if (hostedZone != null) { return new ResourceRecordSetWithHostedZone(hostedZone getResourceRecordSet(domain hostedZone)); } return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,hasValue,private boolean  (ResourceRecordSetWithHostedZone resourceRecordSetWithHostedZone String ip){ if (resourceRecordSetWithHostedZone != null && resourceRecordSetWithHostedZone.getResourceRecordSet() != null) { for ( ResourceRecord rr : resourceRecordSetWithHostedZone.getResourceRecordSet().getResourceRecords()) { if (ip.equals(rr.getValue())) { return true; } } } return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,run,"@Override public void  (){ try { doBind(); } catch ( Throwable e) { logger.error(""Could not bind to Route53"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,shutdown,@Override @PreDestroy public void  () throws InterruptedException { timer.cancel(); for ( String domain : getDeclaredDomains()) { unbindFromDomain(domain); } amazonRoute53Client.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,start,"@Override @PostConstruct public void  () throws InterruptedException { doBind(); timer.schedule(new TimerTask(){ @Override public void run(){ try { doBind(); } catch ( Throwable e) { logger.error(""Could not bind to Route53"" e); } } }  serverConfig.getRout"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,toDomains,"private List<String>  (List<String> ec2Urls){ List<String> domains=new ArrayList<>(ec2Urls.size()); for ( String url : ec2Urls) { try { domains.add(extractDomain(url)); } catch ( MalformedURLException e) { logger.error(""Invalid url {}"" url e); } } return domains; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\Route53Binder.java,unbindFromDomain,private void  (String domain) throws InterruptedException { ResourceRecordSetWithHostedZone resourceRecordSetWithHostedZone=getResourceRecordSetWithHostedZone(domain); if (hasValue(resourceRecordSetWithHostedZone registrationHostname)) { resourceRecordSetWithHostedZone.getResourceRecordSet().getResourceRecords().get(0).setValue(NULL_DOMAIN); executeChangeWithRetry(new Change(ChangeAction.UPSERT resourceRecordSetWithHostedZone.getResourceRecordSet()) resourceRecordSetWithHostedZone.getHostedZone()); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,ElasticNetworkInterfaceBinder,@Inject public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig PeerAwareInstanceRegistry registry ApplicationInfoManager applicationInfoManager){ this.serverConfig=serverConfig; this.clientConfig=clientConfig; this.registry=registry; thi
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,alreadyBound,"public boolean  () throws MalformedURLException { InstanceInfo myInfo=applicationInfoManager.getInfo(); String myInstanceId=((AmazonInfo)myInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.instanceId); AmazonEC2 ec2Service=getEC2Service(); List<InstanceNetworkInterface> instanceNetworkInterfaces=instanceData(myInstanceId ec2Service).getNetworkInterfaces(); List<String> candidateIPs=getCandidateIps(); for ( String ip : candidateIPs) { for ( InstanceNetworkInterface ini : instanceNetworkInterfaces) { if (ip.equals(ini.getPrivateIpAddress())) { logger.info(""My instance {} seems to be already associated with the ip {}"" myInstanceId ip); return true; } } } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,apply,public Integer  (NetworkInterface networkInterface){ return ips.indexOf(networkInterface.getPrivateIpAddress()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,bind,"public void  () throws MalformedURLException { InstanceInfo myInfo=ApplicationInfoManager.getInstance().getInfo(); String myInstanceId=((AmazonInfo)myInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.instanceId); String myZone=((AmazonInfo)myInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.availabilityZone); final List<String> ips=getCandidateIps(); Ordering<NetworkInterface> ipsOrder=Ordering.natural().onResultOf(new Function<NetworkInterface Integer>(){ public Integer apply( NetworkInterface networkInterface){ return ips.indexOf(networkInterface.getPrivateIpAddress()); } } ); AmazonEC2 ec2Service=getEC2Service(); String subnetId=instanceData(myInstanceId ec2Service).getSubnetId(); DescribeNetworkInterfacesResult result=ec2Service.describeNetworkInterfaces(new DescribeNetworkInterfacesRequest().withFilters(new Filter(""private-ip-address"" ips)).withFilters(new Filter(""status"" Lists.newArrayList(""available""))).withFilters(new Filter(""subnet-id"" Lists.newArrayList(subnetId)))); if (result.getNetworkInterfaces().isEmpty()) { logger.info(""No ip is free to be associated with this instance. Candidate ips are: {} for zone: {}"" ips myZone); } else { NetworkInterface selected=ipsOrder.min(result.getNetworkInterfaces()); ec2Service.attachNetworkInterface(new AttachNetworkInterfaceRequest().withNetworkInterfaceId(selected.getNetworkInterfaceId()).withDeviceIndex(1).withInstanceId(myInstanceId)); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,getCandidateIps,"public List<String>  () throws MalformedURLException { InstanceInfo myInfo=applicationInfoManager.getInfo(); String myZone=((AmazonInfo)myInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.availabilityZone); Collection<String> candidates=clientConfig.shouldUseDnsForFetchingServiceUrls() ? getIPsForZoneFromDNS(myZone) : getIPsForZoneFromConfig(myZone); if (candidates == null || candidates.size() == 0) { throw new RuntimeException(""Could not get any ips from the pool for zone :"" + myZone); } List<String> ips=Lists.newArrayList(); for ( String candidate : candidates) { String host=new URL(candidate).getHost(); if (InetAddresses.isInetAddress(host)) { ips.add(host); } else { String firstPartOfHost=Splitter.on(""."").splitToList(host).get(0); List<String> noIpPrefix=Splitter.on(""-"").splitToList(firstPartOfHost).subList(1 5); String ip=Joiner.on(""."").join(noIpPrefix); if (InetAddresses.isInetAddress(ip)) { ips.add(ip); } else { throw new IllegalArgumentException(""Illegal internal hostname "" + host + "" translated to '""+ ip+ ""'""); } } } return ips; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,getEC2Service,"private AmazonEC2  (){ String aWSAccessId=serverConfig.getAWSAccessId(); String aWSSecretKey=serverConfig.getAWSSecretKey(); AmazonEC2 ec2Service; if (null != aWSAccessId && !"""".equals(aWSAccessId) && null != aWSSecretKey && !"""".equals(aWSSecretKey)) { ec2Service=new AmazonEC2Client(new BasicAWSCredentials(aWSAccessId aWSSecretKey)); } else { ec2Service=new AmazonEC2Client(new InstanceProfileCredentialsProvider()); } String region=clientConfig.getRegion(); region=region.trim().toLowerCase(); ec2Service.setEndpoint(""ec2."" + region + "".amazonaws.com""); return ec2Service; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,getIPsForZoneFromConfig,private Collection<String>  (String myZone){ return clientConfig.getEurekaServerServiceUrls(myZone); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,getIPsForZoneFromDNS,private Collection<String>  (String myZone){ return EndpointUtils.getServiceUrlsFromDNS(clientConfig myZone true new EndpointUtils.InstanceInfoBasedUrlRandomizer(applicationInfoManager.getInfo())); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,instanceData,private Instance  (String myInstanceId AmazonEC2 ec2){ return ec2.describeInstances(new DescribeInstancesRequest().withInstanceIds(myInstanceId)).getReservations().get(0).getInstances().get(0); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,run,@Override public void  (){ boolean alreadyBound=false; try { alreadyBound=alreadyBound(); if (!alreadyBound) { registry.clearRegistry(); int count=registry.syncUp(); registry.openForTraffic(applicationInfoManager count); } else { return; } bind(); } catch
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,shutdown,"@PreDestroy public void  () throws Exception { timer.cancel(); for (int i=0; i < serverConfig.getEIPBindRebindRetries(); i++) { try { unbind(); break; } catch ( Exception e) { logger.warn(""Cannot unbind the IP from the instance""); Thread.sleep(IP_BIND_SLE"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,start,"@PostConstruct public void  () throws Exception { int retries=serverConfig.getEIPBindRebindRetries(); for (int i=0; i < retries; i++) { try { if (alreadyBound()) { break; } else { bind(); } } catch ( Throwable e) { logger.error(""Cannot bind to IP"" e); Thr"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\aws\ElasticNetworkInterfaceBinder.java,unbind,public void  () throws Exception { InstanceInfo myInfo=applicationInfoManager.getInfo(); String myInstanceId=((AmazonInfo)myInfo.getDataCenterInfo()).get(AmazonInfo.MetaDataKey.instanceId); AmazonEC2 ec2=getEC2Service(); List<InstanceNetworkInterface> result=instanceData(myInstanceId ec2).getNetworkInterfaces(); List<String> ips=getCandidateIps(); for ( InstanceNetworkInterface networkInterface : result) { if (ips.contains(networkInterface.getPrivateIpAddress())) { String attachmentId=networkInterface.getAttachment().getAttachmentId(); ec2.detachNetworkInterface(new DetachNetworkInterfaceRequest().withAttachmentId(attachmentId)); break; } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,DynamicGZIPContentEncodingFilter,public  (EurekaServerConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,GzipAdapter, (ClientRequestAdapter cra){ super(cra); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,adapt,@Override public OutputStream  (ClientRequest request OutputStream out) throws IOException { return new GZIPOutputStream(getAdapter().adapt(request out)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,decompressResponse,private static void  (ClientResponse response){ InputStream entityInputStream=response.getEntityInputStream(); GZIPInputStream uncompressedIS; try { uncompressedIS=new GZIPInputStream(entityInputStream); } catch ( IOException ex) { try { entityInputStream.close(); } catch ( IOException ignored) { } throw new ClientHandlerException(ex); } response.setEntityInputStream(uncompressedIS); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,handle,@Override public ClientResponse  (ClientRequest request){ if (!request.getHeaders().containsKey(HttpHeaders.ACCEPT_ENCODING)) { request.getHeaders().add(HttpHeaders.ACCEPT_ENCODING GZIP_ENCODING); } if (request.getEntity() != null) { Object requestEncodin
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\DynamicGZIPContentEncodingFilter.java,isCompressionEnabled,private boolean  (){ return config.shouldEnableReplicatedRequestCompression(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,InstanceReplicationTask,protected  (String peerNodeName Action action InstanceInfo instanceInfo InstanceStatus overriddenStatus boolean replicateInstanceInfo){ super(peerNodeName action); this.appName=instanceInfo.getAppName(); this.id=instanceInfo.getId(); this.instanceInfo=instanceInfo; this.overriddenStatus=overriddenStatus; this.replicateInstanceInfo=replicateInstanceInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,getAppName,public String  (){ return appName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,getInstanceInfo,public InstanceInfo  (){ return instanceInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,getOverriddenStatus,public InstanceStatus  (){ return overriddenStatus; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,getTaskName,public String  (){ return appName + '/' + id+ ':'+ action+ '@'+ peerNodeName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\InstanceReplicationTask.java,shouldReplicateInstanceInfo,public boolean  (){ return replicateInstanceInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,PeerEurekaNode, (PeerAwareInstanceRegistry registry String targetHost String serviceUrl HttpReplicationClient replicationClient EurekaServerConfig config int batchSize long maxBatchingDelayMs long retrySleepTimeMs long serverUnavailableSleepTimeMs){ this.registry=registry; this.targetHost=targetHost; this.replicationClient=replicationClient; this.serviceUrl=serviceUrl; this.config=config; this.maxProcessingDelayMs=config.getMaxTimeForReplication(); String batcherName=getBatcherName(); ReplicationTaskProcessor taskProcessor=new ReplicationTaskProcessor(targetHost replicationClient); this.batchingDispatcher=TaskDispatchers.createBatchingTaskDispatcher(batcherName config.getMaxElementsInPeerReplicationPool() batchSize config.getMaxThreadsForPeerReplication() maxBatchingDelayMs serverUnavailableSleepTimeMs retrySleepTimeMs taskProcessor); this.nonBatchingDispatcher=TaskDispatchers.createNonBatchingTaskDispatcher(targetHost config.getMaxElementsInStatusReplicationPool() config.getMaxThreadsForStatusReplication() maxBatchingDelayMs serverUnavailableSleepTimeMs retrySleepTimeMs taskProcessor); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,cancel,"public void  (final String appName final String id) throws Exception { long expiryTime=System.currentTimeMillis() + maxProcessingDelayMs; batchingDispatcher.process(taskId(""cancel"" appName id) new InstanceReplicationTask(targetHost Action.Cancel appName id){ @Override public EurekaHttpResponse<Void> execute(){ return replicationClient.cancel(appName id); } @Override public void handleFailure( int statusCode  Object responseEntity) throws Throwable { super.handleFailure(statusCode responseEntity); if (statusCode == 404) { logger.warn(""{}: missing entry."" getTaskName()); } } }  expiryTime); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,deleteStatusOverride,"public void  (final String appName final String id final InstanceInfo info){ long expiryTime=System.currentTimeMillis() + maxProcessingDelayMs; batchingDispatcher.process(taskId(""deleteStatusOverride"" appName id) new InstanceReplicationTask(targetHost Action.DeleteStatusOverride info null false){ @Override public EurekaHttpResponse<Void> execute(){ return replicationClient.deleteStatusOverride(appName id info); } }  expiryTime); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,equals,@Override public boolean  (Object obj){ if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; } PeerEurekaNode other=(PeerEurekaNode)obj; if (serviceUrl == null) { if (other.serviceUrl != nu
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,execute,@Override public EurekaHttpResponse<Void>  (){ return replicationClient.deleteStatusOverride(appName id info); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,getBatcherName,"public String  (){ String batcherName; try { batcherName=new URL(serviceUrl).getHost(); } catch ( MalformedURLException e1) { batcherName=serviceUrl; } return ""target_"" + batcherName; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,getLeaseRenewalOf,private static int  (InstanceInfo info){ return (info.getLeaseInfo() == null ? Lease.DEFAULT_DURATION_IN_SECS : info.getLeaseInfo().getRenewalIntervalInSecs()) * 1000; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,getServiceUrl,public String  (){ return serviceUrl; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,handleFailure,"@Override public void  (int statusCode Object responseEntity) throws Throwable { super.handleFailure(statusCode responseEntity); if (statusCode == 404) { logger.warn(""{}: missing entry."" getTaskName()); if (info != null) { logger.warn(""{}: cannot find ins"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,hashCode,@Override public int  (){ final int prime=31; int result=1; result=prime * result + ((serviceUrl == null) ? 0 : serviceUrl.hashCode()); return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,heartbeat,"public void  (final String appName final String id final InstanceInfo info final InstanceStatus overriddenStatus boolean primeConnection) throws Throwable { if (primeConnection) { replicationClient.sendHeartBeat(appName id info overriddenStatus); return; } ReplicationTask replicationTask=new InstanceReplicationTask(targetHost Action.Heartbeat info overriddenStatus false){ @Override public EurekaHttpResponse<InstanceInfo> execute() throws Throwable { return replicationClient.sendHeartBeat(appName id info overriddenStatus); } @Override public void handleFailure( int statusCode  Object responseEntity) throws Throwable { super.handleFailure(statusCode responseEntity); if (statusCode == 404) { logger.warn(""{}: missing entry."" getTaskName()); if (info != null) { logger.warn(""{}: cannot find instance id {} and hence replicating the instance with status {}"" getTaskName() info.getId() info.getStatus()); register(info); } } else if (config.shouldSyncWhenTimestampDiffers()) { InstanceInfo peerInstanceInfo=(InstanceInfo)responseEntity; if (peerInstanceInfo != null) { syncInstancesIfTimestampDiffers(appName id info peerInstanceInfo); } } } } ; long expiryTime=System.currentTimeMillis() + getLeaseRenewalOf(info); batchingDispatcher.process(taskId(""heartbeat"" info) replicationTask expiryTime); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,register,"public void  (final InstanceInfo info) throws Exception { long expiryTime=System.currentTimeMillis() + getLeaseRenewalOf(info); batchingDispatcher.process(taskId(""register"" info) new InstanceReplicationTask(targetHost Action.Register info null true){ public EurekaHttpResponse<Void> execute(){ return replicationClient.register(info); } }  expiryTime); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,shutDown,public void  (){ batchingDispatcher.shutdown(); nonBatchingDispatcher.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,statusUpdate,"public void  (final String appName final String id final InstanceStatus newStatus final InstanceInfo info){ long expiryTime=System.currentTimeMillis() + maxProcessingDelayMs; batchingDispatcher.process(taskId(""statusUpdate"" appName id) new InstanceReplicationTask(targetHost Action.StatusUpdate info null false){ @Override public EurekaHttpResponse<Void> execute(){ return replicationClient.statusUpdate(appName id newStatus info); } }  expiryTime); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,syncInstancesIfTimestampDiffers,"private void  (String appName String id InstanceInfo info InstanceInfo infoFromPeer){ try { if (infoFromPeer != null) { logger.warn(""Peer wants us to take the instance information from it  since the timestamp differs "" + ""Id : {} My Timestamp : {}  Peer's timestamp: {}"" id info.getLastDirtyTimestamp() infoFromPeer.getLastDirtyTimestamp()); if (infoFromPeer.getOverriddenStatus() != null && !InstanceStatus.UNKNOWN.equals(infoFromPeer.getOverriddenStatus())) { logger.warn(""Overridden Status info -id {}  mine {}  peer's {}"" id info.getOverriddenStatus() infoFromPeer.getOverriddenStatus()); registry.storeOverriddenStatusIfRequired(appName id infoFromPeer.getOverriddenStatus()); } registry.register(infoFromPeer true); } } catch ( Throwable e) { logger.warn(""Exception when trying to set information from peer :"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNode.java,taskId,private static String  (String requestType InstanceInfo info){ return taskId(requestType info.getAppName() info.getId()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,ReplicationInstanceResponse,"@JsonCreator public  (@JsonProperty(""statusCode"") int statusCode @JsonProperty(""responseEntity"") InstanceInfo responseEntity){ this.statusCode=statusCode; this.responseEntity=responseEntity; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,build,public ReplicationInstanceResponse  (){ return new ReplicationInstanceResponse(statusCode responseEntity); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ReplicationInstanceResponse that=(ReplicationInstanceResponse)o; if (statusCode != that.statusCode) return false; if (responseEnti
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,getResponseEntity,public InstanceInfo  (){ return responseEntity; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,getStatusCode,public int  (){ return statusCode; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,ReplicationList,public  (ReplicationInstance replicationInstance){ this(Collections.singletonList(replicationInstance)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,addReplicationInstance,public void  (ReplicationInstance instance){ replicationList.add(instance); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ReplicationList that=(ReplicationList)o; return !(replicationList != null ? !replicationList.equals(that.replicationList) : that.r
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,getReplicationList,public List<ReplicationInstance>  (){ return this.replicationList; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationList.java,hashCode,@Override public int  (){ return replicationList != null ? replicationList.hashCode() : 0; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,hashCode,@Override public int  (){ int result=statusCode; result=31 * result + (responseEntity != null ? responseEntity.hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,setResponseEntity,public Builder  (InstanceInfo entity){ this.responseEntity=entity; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstanceResponse.java,setStatusCode,public Builder  (int statusCode){ this.statusCode=statusCode; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,ReplicationInstance,"@JsonCreator public  (@JsonProperty(""appName"") String appName @JsonProperty(""id"") String id @JsonProperty(""lastDirtyTimestamp"") Long lastDirtyTimestamp @JsonProperty(""overriddenStatus"") String overriddenStatus @JsonProperty(""status"") String status @JsonPr"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,aReplicationInstance,public static ReplicationInstanceBuilder  (){ return new ReplicationInstanceBuilder(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,build,public ReplicationInstance  (){ return new ReplicationInstance(appName id lastDirtyTimestamp overriddenStatus status instanceInfo action); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,but,public ReplicationInstanceBuilder  (){ return aReplicationInstance().withAppName(appName).withId(id).withLastDirtyTimestamp(lastDirtyTimestamp).withOverriddenStatus(overriddenStatus).withStatus(status).withInstanceInfo(instanceInfo).withAction(action); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ReplicationInstance that=(ReplicationInstance)o; if (appName != null ? !appName.equals(that.appName) : that.appName != null) retur
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,getAction,public Action  (){ return action; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,getAppName,public String  (){ return appName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,getInstanceInfo,public InstanceInfo  (){ return instanceInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,getLastDirtyTimestamp,public Long  (){ return lastDirtyTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,getOverriddenStatus,public String  (){ return overriddenStatus; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,getStatus,public String  (){ return status; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,hashCode,@Override public int  (){ int result=appName != null ? appName.hashCode() : 0; result=31 * result + (id != null ? id.hashCode() : 0); result=31 * result + (lastDirtyTimestamp != null ? lastDirtyTimestamp.hashCode() : 0); result=31 * result + (overriddenSt
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,replicationInstance,public static ReplicationInstanceBuilder  (){ return ReplicationInstanceBuilder.aReplicationInstance(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,withAction,public ReplicationInstanceBuilder  (Action action){ this.action=action; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,withAppName,public ReplicationInstanceBuilder  (String appName){ this.appName=appName; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,withId,public ReplicationInstanceBuilder  (String id){ this.id=id; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,withInstanceInfo,public ReplicationInstanceBuilder  (InstanceInfo instanceInfo){ this.instanceInfo=instanceInfo; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,withLastDirtyTimestamp,public ReplicationInstanceBuilder  (Long lastDirtyTimestamp){ this.lastDirtyTimestamp=lastDirtyTimestamp; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,withOverriddenStatus,public ReplicationInstanceBuilder  (String overriddenStatus){ this.overriddenStatus=overriddenStatus; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationInstance.java,withStatus,public ReplicationInstanceBuilder  (String status){ this.status=status; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,ReplicationListResponse,"@JsonCreator public  (@JsonProperty(""responseList"") List<ReplicationInstanceResponse> responseList){ this.responseList=responseList; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,addResponse,public void  (ReplicationInstanceResponse singleResponse){ responseList.add(singleResponse); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ReplicationListResponse that=(ReplicationListResponse)o; return !(responseList != null ? !responseList.equals(that.responseList) :
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,getResponseList,public List<ReplicationInstanceResponse>  (){ return responseList; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\protocol\ReplicationListResponse.java,hashCode,@Override public int  (){ return responseList != null ? responseList.hashCode() : 0; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,PeerEurekaNodes,@Inject public  (PeerAwareInstanceRegistry registry EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs ApplicationInfoManager applicationInfoManager){ this.registry=registry; this.serverConfig=serverConfig; this.clie
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,createPeerEurekaNode,"protected PeerEurekaNode  (String peerEurekaNodeUrl){ HttpReplicationClient replicationClient=JerseyReplicationClient.createReplicationClient(serverConfig serverCodecs peerEurekaNodeUrl); String targetHost=hostFromUrl(peerEurekaNodeUrl); if (targetHost == null) { targetHost=""host""; } return new PeerEurekaNode(registry targetHost peerEurekaNodeUrl replicationClient serverConfig); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,getMinNumberOfAvailablePeers,public int  (){ return serverConfig.getHealthStatusMinNumberOfAvailablePeers(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,getPeerEurekaNodes,public List<PeerEurekaNode>  (){ return peerEurekaNodes; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,getPeerNodesView,public List<PeerEurekaNode>  (){ return Collections.unmodifiableList(peerEurekaNodes); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,hostFromUrl,"public static String  (String url){ URI uri; try { uri=new URI(url); } catch ( URISyntaxException e) { logger.warn(""Cannot parse service URI {}"" url e); return null; } return uri.getHost(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,isInstanceURL,public boolean  (String url InstanceInfo instance){ String hostName=hostFromUrl(url); String myInfoComparator=instance.getHostName(); if (clientConfig.getTransportConfig().applicationsResolverUseIp()) { myInfoComparator=instance.getIPAddr(); } return hostName != null && hostName.equals(myInfoComparator); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,isThisMe,public static boolean  (String url){ InstanceInfo myInfo=ApplicationInfoManager.getInstance().getInfo(); String hostName=hostFromUrl(url); return hostName != null && hostName.equals(myInfo.getHostName()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,isThisMyUrl,public boolean  (String url){ return isInstanceURL(url applicationInfoManager.getInfo()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,newThread,"@Override public Thread  (Runnable r){ Thread thread=new Thread(r ""Eureka-PeerNodesUpdater""); thread.setDaemon(true); return thread; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,resolvePeerUrls,protected List<String>  (){ InstanceInfo myInfo=applicationInfoManager.getInfo(); String zone=InstanceInfo.getZone(clientConfig.getAvailabilityZones(clientConfig.getRegion()) myInfo); List<String> replicaUrls=EndpointUtils.getDiscoveryServiceUrls(clientConfig zone new EndpointUtils.InstanceInfoBasedUrlRandomizer(myInfo)); int idx=0; while (idx < replicaUrls.size()) { if (isThisMyUrl(replicaUrls.get(idx))) { replicaUrls.remove(idx); } else { idx++; } } return replicaUrls; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,run,"@Override public void  (){ try { updatePeerEurekaNodes(resolvePeerUrls()); } catch ( Throwable e) { logger.error(""Cannot update the replica Nodes"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,shutdown,public void  (){ taskExecutor.shutdown(); List<PeerEurekaNode> toRemove=this.peerEurekaNodes; this.peerEurekaNodes=Collections.emptyList(); this.peerEurekaNodeUrls=Collections.emptySet(); for ( PeerEurekaNode node : toRemove) { node.shutDown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,start,"public void  (){ taskExecutor=Executors.newSingleThreadScheduledExecutor(new ThreadFactory(){ @Override public Thread newThread( Runnable r){ Thread thread=new Thread(r ""Eureka-PeerNodesUpdater""); thread.setDaemon(true); return thread; } } ); try { updatePeerEurekaNodes(resolvePeerUrls()); Runnable peersUpdateTask=new Runnable(){ @Override public void run(){ try { updatePeerEurekaNodes(resolvePeerUrls()); } catch ( Throwable e) { logger.error(""Cannot update the replica Nodes"" e); } } } ; taskExecutor.scheduleWithFixedDelay(peersUpdateTask serverConfig.getPeerEurekaNodesUpdateIntervalMs() serverConfig.getPeerEurekaNodesUpdateIntervalMs() TimeUnit.MILLISECONDS); } catch ( Exception e) { throw new IllegalStateException(e); } for ( PeerEurekaNode node : peerEurekaNodes) { logger.info(""Replica node URL: {}"" node.getServiceUrl()); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\PeerEurekaNodes.java,updatePeerEurekaNodes,"protected void  (List<String> newPeerUrls){ if (newPeerUrls.isEmpty()) { logger.warn(""The replica size seems to be empty. Check the route 53 DNS Registry""); return; } Set<String> toShutdown=new HashSet<>(peerEurekaNodeUrls); toShutdown.removeAll(newPeerUrls); Set<String> toAdd=new HashSet<>(newPeerUrls); toAdd.removeAll(peerEurekaNodeUrls); if (toShutdown.isEmpty() && toAdd.isEmpty()) { return; } List<PeerEurekaNode> newNodeList=new ArrayList<>(peerEurekaNodes); if (!toShutdown.isEmpty()) { logger.info(""Removing no longer available peer nodes {}"" toShutdown); int i=0; while (i < newNodeList.size()) { PeerEurekaNode eurekaNode=newNodeList.get(i); if (toShutdown.contains(eurekaNode.getServiceUrl())) { newNodeList.remove(i); eurekaNode.shutDown(); } else { i++; } } } if (!toAdd.isEmpty()) { logger.info(""Adding new peer nodes {}"" toAdd); for ( String peerUrl : toAdd) { newNodeList.add(createPeerEurekaNode(peerUrl)); } } this.peerEurekaNodes=newNodeList; this.peerEurekaNodeUrls=new HashSet<>(newPeerUrls); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTask.java,ReplicationTask, (String peerNodeName Action action){ this.peerNodeName=peerNodeName; this.action=action; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,ReplicationTaskProcessor, (String peerId HttpReplicationClient replicationClient){ this.replicationClient=replicationClient; this.peerId=peerId; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,DefaultEurekaServerContext,@Inject public  (EurekaServerConfig serverConfig ServerCodecs serverCodecs PeerAwareInstanceRegistry registry PeerEurekaNodes peerEurekaNodes ApplicationInfoManager applicationInfoManager){ this.serverConfig=serverConfig; this.serverCodecs=serverCodecs; t
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,getApplicationInfoManager,@Override public ApplicationInfoManager  (){ return applicationInfoManager; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,getPeerEurekaNodes,@Override public PeerEurekaNodes  (){ return peerEurekaNodes; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,getRegistry,@Override public PeerAwareInstanceRegistry  (){ return registry; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,getServerCodecs,@Override public ServerCodecs  (){ return serverCodecs; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,getServerConfig,@Override public EurekaServerConfig  (){ return serverConfig; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,initialize,"@PostConstruct @Override public void  () throws Exception { logger.info(""Initializing ...""); peerEurekaNodes.start(); registry.init(peerEurekaNodes); logger.info(""Initialized""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerContext.java,shutdown,"@PreDestroy @Override public void  () throws Exception { logger.info(""Shutting down ...""); registry.shutdown(); peerEurekaNodes.shutdown(); logger.info(""Shut down""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,createReplicationInstanceOf,private static ReplicationInstance  (InstanceReplicationTask task){ ReplicationInstanceBuilder instanceBuilder=aReplicationInstance(); instanceBuilder.withAppName(task.getAppName()); instanceBuilder.withId(task.getId()); InstanceInfo instanceInfo=task.getInstanceInfo(); if (instanceInfo != null) { String overriddenStatus=task.getOverriddenStatus() == null ? null : task.getOverriddenStatus().name(); instanceBuilder.withOverriddenStatus(overriddenStatus); instanceBuilder.withLastDirtyTimestamp(instanceInfo.getLastDirtyTimestamp()); if (task.shouldReplicateInstanceInfo()) { instanceBuilder.withInstanceInfo(instanceInfo); } String instanceStatus=instanceInfo.getStatus() == null ? null : instanceInfo.getStatus().name(); instanceBuilder.withStatus(instanceStatus); } instanceBuilder.withAction(task.getAction()); return instanceBuilder.build(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,createReplicationListOf,private ReplicationList  (List<ReplicationTask> tasks){ ReplicationList list=new ReplicationList(); for ( ReplicationTask task : tasks) { list.addReplicationInstance(createReplicationInstanceOf((InstanceReplicationTask)task)); } return list; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,handleBatchResponse,"private void  (ReplicationTask task ReplicationInstanceResponse response){ int statusCode=response.getStatusCode(); if (isSuccess(statusCode)) { task.handleSuccess(); return; } try { task.handleFailure(response.getStatusCode() response.getResponseEntity()); } catch ( Throwable e) { logger.error(""Replication task {} error handler failure"" task.getTaskName() e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,isNetworkConnectException,private static boolean  (Throwable e){ do { if (IOException.class.isInstance(e)) { return true; } e=e.getCause(); } while (e != null); return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,isSuccess,private static boolean  (int statusCode){ return statusCode >= 200 && statusCode < 300; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,logNetworkErrorSample,"private void  (ReplicationTask task Throwable e){ long now=System.currentTimeMillis(); if (now - lastNetworkErrorTime > 10000) { lastNetworkErrorTime=now; StringBuilder sb=new StringBuilder(); sb.append(""Network level connection to peer "").append(peerId); if (task != null) { sb.append("" for task "").append(task.getTaskName()); } sb.append(""; retrying after delay""); logger.error(sb.toString() e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,maybeReadTimeOut,private static boolean  (Throwable e){ do { if (IOException.class.isInstance(e)) { String message=e.getMessage().toLowerCase(); Matcher matcher=READ_TIME_OUT_PATTERN.matcher(message); if (matcher.find()) { return true; } } e=e.getCause(); } while (e != null); return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\cluster\ReplicationTaskProcessor.java,process,@Override public ProcessingResult  (List<ReplicationTask> tasks){ ReplicationList list=createReplicationListOf(tasks); try { EurekaHttpResponse<ReplicationListResponse> response=replicationClient.submitBatchUpdates(list); int statusCode=response.getStatus
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,DefaultEurekaServerConfig,public  (String namespace){ this.namespace=namespace; init(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,disableTransparentFallbackToOtherRegion,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""remoteRegion.disable.transparent.fallback"" false).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getASGCacheExpiryTimeoutMs,"@Override public long  (){ return configInstance.getIntProperty(namespace + ""asgCacheExpiryTimeoutMs"" (10 * 60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getASGQueryTimeoutMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""asgQueryTimeoutMs"" 300).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getASGUpdateIntervalMs,"@Override public long  (){ return configInstance.getIntProperty(namespace + ""asgUpdateIntervalMs"" (5 * 60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getAWSAccessId,"@Override public String  (){ String aWSAccessId=configInstance.getStringProperty(namespace + ""awsAccessId"" null).get(); if (null != aWSAccessId) { return aWSAccessId.trim(); } else { return null; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getAWSSecretKey,"@Override public String  (){ String aWSSecretKey=configInstance.getStringProperty(namespace + ""awsSecretKey"" null).get(); if (null != aWSSecretKey) { return aWSSecretKey.trim(); } else { return null; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getBindingStrategy,"@Override public AwsBindingStrategy  (){ return AwsBindingStrategy.valueOf(configInstance.getStringProperty(namespace + ""awsBindingStrategy"" AwsBindingStrategy.EIP.name()).get().toUpperCase()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getDeltaRetentionTimerIntervalInMs,"@Override public long  (){ return configInstance.getLongProperty(namespace + ""deltaRetentionTimerIntervalInMs"" (30 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getEIPBindRebindRetries,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""eipBindRebindRetries"" 3).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getEIPBindingRetryIntervalMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""eipBindRebindRetryIntervalMs"" (5 * 60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getEIPBindingRetryIntervalMsWhenUnbound,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""eipBindRebindRetryIntervalMsWhenUnbound"" (1 * 60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getEvictionIntervalTimerInMs,"@Override public long  (){ return configInstance.getLongProperty(namespace + ""evictionIntervalTimerInMs"" (60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getExperimental,"@Override public String  (String name){ return configInstance.getStringProperty(namespace + ""experimental."" + name null).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getHealthStatusMinNumberOfAvailablePeers,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""minAvailableInstancesForPeerReplication"" -1).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getJsonCodecName,"@Override public String  (){ return configInstance.getStringProperty(namespace + ""jsonCodecName"" null).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getListAutoScalingGroupsRoleName,@Override public String  (){ return listAutoScalingGroupsRoleName.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMaxElementsInPeerReplicationPool,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""maxElementsInPeerReplicationPool"" 10000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMaxElementsInStatusReplicationPool,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""maxElementsInStatusReplicationPool"" 10000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMaxIdleThreadAgeInMinutesForPeerReplication,"@Override public long  (){ return configInstance.getIntProperty(namespace + ""maxIdleThreadAgeInMinutesForPeerReplication"" 15).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMaxIdleThreadInMinutesAgeForStatusReplication,"@Override public long  (){ return configInstance.getLongProperty(namespace + ""maxIdleThreadAgeInMinutesForStatusReplication"" 10).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMaxThreadsForPeerReplication,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""maxThreadsForPeerReplication"" 20).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMaxThreadsForStatusReplication,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""maxThreadsForStatusReplication"" 1).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMaxTimeForReplication,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""maxTimeForReplication"" TIME_TO_WAIT_FOR_REPLICATION).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMinThreadsForPeerReplication,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""minThreadsForPeerReplication"" 5).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getMinThreadsForStatusReplication,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""minThreadsForStatusReplication"" 1).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getNumberOfReplicationRetries,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""numberOfReplicationRetries"" 5).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getPeerEurekaNodesUpdateIntervalMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""peerEurekaNodesUpdateIntervalMs"" (10 * 60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getPeerEurekaStatusRefreshTimeIntervalMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""peerEurekaStatusRefreshTimeIntervalMs"" (30 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getPeerNodeConnectTimeoutMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""peerNodeConnectTimeoutMs"" 1000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getPeerNodeConnectionIdleTimeoutSeconds,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""peerNodeConnectionIdleTimeoutSeconds"" 30).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getPeerNodeReadTimeoutMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""peerNodeReadTimeoutMs"" 5000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getPeerNodeTotalConnections,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""peerNodeTotalConnections"" 1000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getPeerNodeTotalConnectionsPerHost,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""peerNodeTotalConnectionsPerHost"" 500).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRateLimiterBurstSize,@Override public int  (){ return rateLimiterBurstSize.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRateLimiterFullFetchAverageRate,@Override public int  (){ return rateLimiterFullFetchAverageRate.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRateLimiterPrivilegedClients,@Override public Set<String>  (){ return rateLimiterPrivilegedClients.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRateLimiterRegistryFetchAverageRate,@Override public int  (){ return rateLimiterRegistryFetchAverageRate.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRegistrySyncRetries,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""numberRegistrySyncRetries"" 5).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRegistrySyncRetryWaitMs,"@Override public long  (){ return configInstance.getIntProperty(namespace + ""registrySyncRetryWaitMs"" 30 * 1000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionAppWhitelist,"@Nullable @Override public Set<String>  (@Nullable String regionName){ if (null == regionName) { regionName=""global""; } else { regionName=regionName.trim().toLowerCase(); } DynamicStringProperty appWhiteListProp=configInstance.getStringProperty(namespace "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionConnectTimeoutMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""remoteRegionConnectTimeoutMs"" 2000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionConnectionIdleTimeoutSeconds,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""remoteRegionConnectionIdleTimeoutSeconds"" 30).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionFetchThreadPoolSize,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""remoteRegion.fetchThreadPoolSize"" 20).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionReadTimeoutMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""remoteRegionReadTimeoutMs"" 5000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionRegistryFetchInterval,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""remoteRegion.registryFetchIntervalInSeconds"" 30).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionTotalConnections,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""remoteRegionTotalConnections"" 1000).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionTotalConnectionsPerHost,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""remoteRegionTotalConnectionsPerHost"" 500).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionTrustStore,"@Override public String  (){ return configInstance.getStringProperty(namespace + ""remoteRegion.trustStoreFileName"" """").get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionTrustStorePassword,"@Override public String  (){ return configInstance.getStringProperty(namespace + ""remoteRegion.trustStorePassword"" ""changeit"").get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionUrls,"@Override public String[]  (){ String remoteRegionUrlString=configInstance.getStringProperty(namespace + ""remoteRegionUrls"" null).get(); String[] remoteRegionUrl=null; if (remoteRegionUrlString != null) { remoteRegionUrl=remoteRegionUrlString.split("" ""); "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRemoteRegionUrlsWithName,"@Override public Map<String String>  (){ String propName=namespace + ""remoteRegionUrlsWithName""; String remoteRegionUrlWithNameString=configInstance.getStringProperty(propName null).get(); if (null == remoteRegionUrlWithNameString) { return Collections.em"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRenewalPercentThreshold,"@Override public double  (){ return configInstance.getDoubleProperty(namespace + ""renewalPercentThreshold"" 0.85).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRenewalThresholdUpdateIntervalMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""renewalThresholdUpdateIntervalMs"" (15 * 60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getResponseCacheAutoExpirationInSeconds,"@Override public long  (){ return configInstance.getIntProperty(namespace + ""responseCacheAutoExpirationInSeconds"" 180).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getResponseCacheUpdateIntervalMs,"@Override public long  (){ return configInstance.getIntProperty(namespace + ""responseCacheUpdateIntervalMs"" (30 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRetentionTimeInMSInDeltaQueue,"@Override public long  (){ return configInstance.getLongProperty(namespace + ""retentionTimeInMSInDeltaQueue"" (3 * 60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRoute53BindRebindRetries,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""route53BindRebindRetries"" 3).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRoute53BindingRetryIntervalMs,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""route53BindRebindRetryIntervalMs"" (5 * 60 * 1000)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getRoute53DomainTTL,"@Override public long  (){ return configInstance.getLongProperty(namespace + ""route53DomainTTL"" 30l).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getWaitTimeInMsWhenSyncEmpty,"@Override public int  (){ return configInstance.getIntProperty(namespace + ""waitTimeInMsWhenSyncEmpty"" (1000 * 60 * 5)).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,getXmlCodecName,"@Override public String  (){ return configInstance.getStringProperty(namespace + ""xmlCodecName"" null).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,init,"private void  (){ String env=ConfigurationManager.getConfigInstance().getString(EUREKA_ENVIRONMENT TEST); ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_ENVIRONMENT env); String eurekaPropsFile=EUREKA_PROPS_FILE.get(); try { ConfigurationManager.loadCascadedPropertiesFromResources(eurekaPropsFile); } catch ( IOException e) { logger.warn(""Cannot find the properties specified : {}. This may be okay if there are other environment "" + ""specific properties or the configuration is installed with a different mechanism."" eurekaPropsFile); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,isRateLimiterEnabled,@Override public boolean  (){ return rateLimiterEnabled.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,isRateLimiterThrottleStandardClients,@Override public boolean  (){ return rateLimiterThrottleStandardClients.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldBatchReplication,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""shouldBatchReplication"" false).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldDisableDelta,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""disableDelta"" false).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldDisableDeltaForRemoteRegions,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""disableDeltaForRemoteRegions"" false).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldEnableReplicatedRequestCompression,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""enableReplicatedRequestCompression"" false).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldEnableSelfPreservation,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""enableSelfPreservation"" true).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldGZipContentFromRemoteRegion,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""remoteRegion.gzipContent"" true).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldLogIdentityHeaders,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""auth.shouldLogIdentityHeaders"" true).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldPrimeAwsReplicaConnections,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""primeAwsReplicaConnections"" true).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldSyncWhenTimestampDiffers,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""syncWhenTimestampDiffers"" true).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\DefaultEurekaServerConfig.java,shouldUseReadOnlyResponseCache,"@Override public boolean  (){ return configInstance.getBooleanProperty(namespace + ""shouldUseReadOnlyResponseCache"" true).get(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,EurekaBootStrap,public  (EurekaClient eurekaClient){ this.eurekaClient=eurekaClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,contextDestroyed,"@Override public void  (ServletContextEvent event){ try { logger.info(""{} Shutting down Eureka Server.."" new Date()); ServletContext sc=event.getServletContext(); sc.removeAttribute(EurekaServerContext.class.getName()); destroyEurekaServerContext(); destr"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,contextInitialized,@Override public void  (ServletContextEvent event){ try { initEurekaEnvironment(); initEurekaServerContext(); ServletContext sc=event.getServletContext(); sc.setAttribute(EurekaServerContext.class.getName() serverContext); } catch ( Throwable e) { logger.
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,destroyEurekaServerContext,protected void  () throws Exception { EurekaMonitors.shutdown(); if (awsBinder != null) { awsBinder.shutdown(); } if (serverContext != null) { serverContext.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,getPeerEurekaNodes,protected PeerEurekaNodes  (PeerAwareInstanceRegistry registry EurekaServerConfig eurekaServerConfig EurekaClientConfig eurekaClientConfig ServerCodecs serverCodecs ApplicationInfoManager applicationInfoManager){ PeerEurekaNodes peerEurekaNodes=new PeerEurekaNodes(registry eurekaServerConfig eurekaClientConfig serverCodecs applicationInfoManager); return peerEurekaNodes; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,initEurekaEnvironment,"protected void  () throws Exception { logger.info(""Setting the eureka configuration..""); String dataCenter=ConfigurationManager.getConfigInstance().getString(EUREKA_DATACENTER); if (dataCenter == null) { logger.info(""Eureka data center value eureka.datacenter is not set  defaulting to default""); ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_DATACENTER DEFAULT); } else { ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_DATACENTER dataCenter); } String environment=ConfigurationManager.getConfigInstance().getString(EUREKA_ENVIRONMENT); if (environment == null) { ConfigurationManager.getConfigInstance().setProperty(ARCHAIUS_DEPLOYMENT_ENVIRONMENT TEST); logger.info(""Eureka environment value eureka.environment is not set  defaulting to test""); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,initEurekaServerContext,"protected void  () throws Exception { EurekaServerConfig eurekaServerConfig=new DefaultEurekaServerConfig(); JsonXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter() XStream.PRIORITY_VERY_HIGH); XmlXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter() XStream.PRIORITY_VERY_HIGH); logger.info(""Initializing the eureka client...""); logger.info(eurekaServerConfig.getJsonCodecName()); ServerCodecs serverCodecs=new DefaultServerCodecs(eurekaServerConfig); ApplicationInfoManager applicationInfoManager=null; if (eurekaClient == null) { EurekaInstanceConfig instanceConfig=isCloud(ConfigurationManager.getDeploymentContext()) ? new CloudInstanceConfig() : new MyDataCenterInstanceConfig(); applicationInfoManager=new ApplicationInfoManager(instanceConfig new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get()); EurekaClientConfig eurekaClientConfig=new DefaultEurekaClientConfig(); eurekaClient=new DiscoveryClient(applicationInfoManager eurekaClientConfig); } else { applicationInfoManager=eurekaClient.getApplicationInfoManager(); } PeerAwareInstanceRegistry registry; if (isAws(applicationInfoManager.getInfo())) { registry=new AwsInstanceRegistry(eurekaServerConfig eurekaClient.getEurekaClientConfig() serverCodecs eurekaClient); awsBinder=new AwsBinderDelegate(eurekaServerConfig eurekaClient.getEurekaClientConfig() registry applicationInfoManager); awsBinder.start(); } else { registry=new PeerAwareInstanceRegistryImpl(eurekaServerConfig eurekaClient.getEurekaClientConfig() serverCodecs eurekaClient); } PeerEurekaNodes peerEurekaNodes=getPeerEurekaNodes(registry eurekaServerConfig eurekaClient.getEurekaClientConfig() serverCodecs applicationInfoManager); serverContext=new DefaultEurekaServerContext(eurekaServerConfig serverCodecs registry peerEurekaNodes applicationInfoManager); EurekaServerContextHolder.initialize(serverContext); serverContext.initialize(); logger.info(""Initialized server context""); int registryCount=registry.syncUp(); registry.openForTraffic(applicationInfoManager registryCount); EurekaMonitors.registerAllStats(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,isAws,"protected boolean  (InstanceInfo selfInstanceInfo){ boolean result=DataCenterInfo.Name.Amazon == selfInstanceInfo.getDataCenterInfo().getName(); logger.info(""isAws returned {}"" result); return result; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaBootStrap.java,isCloud,"protected boolean  (DeploymentContext deploymentContext){ logger.info(""Deployment datacenter is {}"" deploymentContext.getDeploymentDatacenter()); return CLOUD.equals(deploymentContext.getDeploymentDatacenter()); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,EurekaServerIdentity,public  (String id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,getId,@Override public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,getName,@Override public String  (){ return DEFAULT_SERVER_NAME; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerIdentity.java,getVersion,@Override public String  (){ return serverVersion; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,EurekaServerContextHolder,private  (EurekaServerContext serverContext){ this.serverContext=serverContext; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,getInstance,public static EurekaServerContextHolder  (){ return holder; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,getServerContext,public EurekaServerContext  (){ return this.serverContext; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\EurekaServerContextHolder.java,initialize,public static synchronized void  (EurekaServerContext serverContext){ holder=new EurekaServerContextHolder(serverContext); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,EnumWrapper,private  (Enumeration<E> delegate E extraElement){ this.delegate=delegate; this.extraElementRef=new AtomicReference<>(extraElement); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,addGzipAcceptEncoding,"private static HttpServletRequest  (HttpServletRequest request){ return new HttpServletRequestWrapper(request){ @Override public Enumeration<String> getHeaders( String name){ if (HttpHeaders.ACCEPT_ENCODING.equals(name)) { return new EnumWrapper<String>(""gzip""); } return new EnumWrapper<String>(super.getHeaders(name) HttpHeaders.ACCEPT_ENCODING); } @Override public Enumeration<String> getHeaderNames(){ return new EnumWrapper<String>(super.getHeaderNames() HttpHeaders.ACCEPT_ENCODING); } @Override public String getHeader( String name){ if (HttpHeaders.ACCEPT_ENCODING.equals(name)) { return ""gzip""; } return super.getHeader(name); } } ; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,doFilter,"@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { HttpServletRequest httpRequest=(HttpServletRequest)request; if (""GET"".equals(httpRequest.getMethod())) { String acceptEncodin"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,getHeader,"@Override public String  (String name){ if (HttpHeaders.ACCEPT_ENCODING.equals(name)) { return ""gzip""; } return super.getHeader(name); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,getHeaderNames,@Override public Enumeration<String>  (){ return new EnumWrapper<String>(super.getHeaderNames() HttpHeaders.ACCEPT_ENCODING); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,getHeaders,"@Override public Enumeration<String>  (String name){ if (HttpHeaders.ACCEPT_ENCODING.equals(name)) { return new EnumWrapper<String>(""gzip""); } return new EnumWrapper<String>(super.getHeaders(name) HttpHeaders.ACCEPT_ENCODING); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,hasMoreElements,@Override public boolean  (){ return extraElementRef.get() != null || delegate != null && delegate.hasMoreElements(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\GzipEncodingEnforcingFilter.java,nextElement,@Override public E  (){ E extra=extraElementRef.getAndSet(null); if (extra != null) { return extra; } if (delegate == null) { throw new NoSuchElementException(); } return delegate.nextElement(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,Lease,public  (T r int durationInSecs){ holder=r; registrationTimestamp=System.currentTimeMillis(); lastUpdateTimestamp=registrationTimestamp; duration=(durationInSecs * 1000); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,cancel,public void  (){ if (evictionTimestamp <= 0) { evictionTimestamp=System.currentTimeMillis(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,getEvictionTimestamp,public long  (){ return evictionTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,getHolder,public T  (){ return holder; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,getLastRenewalTimestamp,public long  (){ return lastUpdateTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,getRegistrationTimestamp,public long  (){ return registrationTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,getServiceUpTimestamp,public long  (){ return serviceUpTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,isExpired,public boolean  (long additionalLeaseMs){ return (evictionTimestamp > 0 || System.currentTimeMillis() > (lastUpdateTimestamp + duration + additionalLeaseMs)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,renew,public void  (){ lastUpdateTimestamp=System.currentTimeMillis() + duration; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,serviceUp,public void  (){ if (serviceUpTimestamp == 0) { serviceUpTimestamp=System.currentTimeMillis(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\lease\Lease.java,setServiceUpTimestamp,public void  (long serviceUpTimestamp){ this.serviceUpTimestamp=serviceUpTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,doFilter,@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { Target target=getTarget(request); if (target == Target.Other) { chain.doFilter(request response); return; } HttpServletReques
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,getTarget,"private static Target  (ServletRequest request){ Target target=Target.Other; if (request instanceof HttpServletRequest) { HttpServletRequest httpRequest=(HttpServletRequest)request; String pathInfo=httpRequest.getRequestURI(); if (""GET"".equals(httpRequest.getMethod()) && pathInfo != null) { Matcher matcher=TARGET_RE.matcher(pathInfo); if (matcher.matches()) { if (matcher.groupCount() == 0 || matcher.group(1) == null || ""/"".equals(matcher.group(1))) { target=Target.FullFetch; } else if (""/delta"".equals(matcher.group(1))) { target=Target.DeltaFetch; } else { target=Target.Application; } } } if (target == Target.Other) { logger.debug(""URL path {} not matched by rate limiting filter"" pathInfo); } } return target; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,incrementStats,private void  (Target target){ if (serverConfig.isRateLimiterEnabled()) { EurekaMonitors.RATE_LIMITED.increment(); if (target == Target.FullFetch) { EurekaMonitors.RATE_LIMITED_FULL_FETCH.increment(); } } else { EurekaMonitors.RATE_LIMITED_CANDIDATES.increment(); if (target == Target.FullFetch) { EurekaMonitors.RATE_LIMITED_FULL_FETCH_CANDIDATES.increment(); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,init,@Override public void  (FilterConfig filterConfig) throws ServletException { if (serverConfig == null) { EurekaServerContext serverContext=(EurekaServerContext)filterConfig.getServletContext().getAttribute(EurekaServerContext.class.getName()); serverConfi
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,isOverloaded,private boolean  (Target target){ int maxInWindow=serverConfig.getRateLimiterBurstSize(); int fetchWindowSize=serverConfig.getRateLimiterRegistryFetchAverageRate(); boolean overloaded=!registryFetchRateLimiter.acquire(maxInWindow fetchWindowSize); if (target == Target.FullFetch) { int fullFetchWindowSize=serverConfig.getRateLimiterFullFetchAverageRate(); overloaded|=!registryFullFetchRateLimiter.acquire(maxInWindow fullFetchWindowSize); } return overloaded; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,isPrivileged,private boolean  (HttpServletRequest request){ if (serverConfig.isRateLimiterThrottleStandardClients()) { return false; } Set<String> privilegedClients=serverConfig.getRateLimiterPrivilegedClients(); String clientName=request.getHeader(AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY); return privilegedClients.contains(clientName) || DEFAULT_PRIVILEGED_CLIENTS.contains(clientName); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,isRateLimited,"private boolean  (HttpServletRequest request Target target){ if (isPrivileged(request)) { logger.debug(""Privileged {} request"" target); return false; } if (isOverloaded(target)) { logger.debug(""Overloaded {} request; discarding it"" target); return true; } logger.debug(""{} request admitted"" target); return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\RateLimitingFilter.java,reset,static void  (){ registryFetchRateLimiter.reset(); registryFullFetchRateLimiter.reset(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,AbstractInstanceRegistry,protected  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs){ this.serverConfig=serverConfig; this.clientConfig=clientConfig; this.serverCodecs=serverCodecs; this.recentCanceledQueue=new CircularQueue<Pair<Long String>>(1000); this.recentRegisteredQueue=new CircularQueue<Pair<Long String>>(1000); this.renewsLastMin=new MeasuredRate(1000 * 60 * 1); this.deltaRetentionTimer.schedule(getDeltaRetentionTask() serverConfig.getDeltaRetentionTimerIntervalInMs() serverConfig.getDeltaRetentionTimerIntervalInMs()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,CircularQueue,public  (int size){ this.size=size; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,RecentlyChangedItem,public  (Lease<InstanceInfo> lease){ this.leaseInfo=lease; lastUpdateTime=System.currentTimeMillis(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,add,@Override public boolean  (E e){ this.makeSpaceIfNotAvailable(); return super.add(e); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,cancel,@Override public boolean  (String appName String id boolean isReplication){ return internalCancel(appName id isReplication); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,clearRegistry,@Override public void  (){ overriddenInstanceStatusMap.clear(); recentCanceledQueue.clear(); recentRegisteredQueue.clear(); recentlyChangedQueue.clear(); registry.clear(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,decorateInstanceInfo,private InstanceInfo  (Lease<InstanceInfo> lease){ InstanceInfo info=lease.getHolder(); int renewalInterval=LeaseInfo.DEFAULT_LEASE_RENEWAL_INTERVAL; int leaseDuration=LeaseInfo.DEFAULT_LEASE_DURATION; if (info.getLeaseInfo() != null) { renewalInterval=info.getLeaseInfo().getRenewalIntervalInSecs(); leaseDuration=info.getLeaseInfo().getDurationInSecs(); } info.setLeaseInfo(LeaseInfo.Builder.newBuilder().setRegistrationTimestamp(lease.getRegistrationTimestamp()).setRenewalTimestamp(lease.getLastRenewalTimestamp()).setServiceUpTimestamp(lease.getServiceUpTimestamp()).setRenewalIntervalInSecs(renewalInterval).setDurationInSecs(leaseDuration).setEvictionTimestamp(lease.getEvictionTimestamp()).build()); info.setIsCoordinatingDiscoveryServer(); return info; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,deleteStatusOverride,@Override public boolean  (String appName String id InstanceStatus newStatus String lastDirtyTimestamp boolean isReplication){ try { read.lock(); STATUS_OVERRIDE_DELETE.increment(isReplication); Map<String Lease<InstanceInfo>> gMap=registry.get(appName); 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,evict,"public void  (long additionalLeaseMs){ logger.debug(""Running the evict task""); if (!isLeaseExpirationEnabled()) { logger.debug(""DS: lease expiration is currently disabled.""); return; } List<Lease<InstanceInfo>> expiredLeases=new ArrayList<>(); for ( Entry<String Map<String Lease<InstanceInfo>>> groupEntry : registry.entrySet()) { Map<String Lease<InstanceInfo>> leaseMap=groupEntry.getValue(); if (leaseMap != null) { for ( Entry<String Lease<InstanceInfo>> leaseEntry : leaseMap.entrySet()) { Lease<InstanceInfo> lease=leaseEntry.getValue(); if (lease.isExpired(additionalLeaseMs) && lease.getHolder() != null) { expiredLeases.add(lease); } } } } int registrySize=(int)getLocalRegistrySize(); int registrySizeThreshold=(int)(registrySize * serverConfig.getRenewalPercentThreshold()); int evictionLimit=registrySize - registrySizeThreshold; int toEvict=Math.min(expiredLeases.size() evictionLimit); if (toEvict > 0) { logger.info(""Evicting {} items (expired={}  evictionLimit={})"" toEvict expiredLeases.size() evictionLimit); Random random=new Random(System.currentTimeMillis()); for (int i=0; i < toEvict; i++) { int next=i + random.nextInt(expiredLeases.size() - i); Collections.swap(expiredLeases i next); Lease<InstanceInfo> lease=expiredLeases.get(i); String appName=lease.getHolder().getAppName(); String id=lease.getHolder().getId(); EXPIRED.increment(); logger.warn(""DS: Registry: expired lease for {}/{}"" appName id); internalCancel(appName id false); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getApplication,@Override public Application  (String appName boolean includeRemoteRegion){ Application app=null; Map<String Lease<InstanceInfo>> leaseMap=registry.get(appName); if (leaseMap != null && leaseMap.size() > 0) { for ( Entry<String Lease<InstanceInfo>> entry 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getApplicationDeltas,@Deprecated public Applications  (){ GET_ALL_CACHE_MISS_DELTA.increment(); Applications apps=new Applications(); apps.setVersion(responseCache.getVersionDelta().get()); Map<String Application> applicationInstancesMap=new HashMap<String Application>(); try
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getApplicationDeltasFromMultipleRegions,"public Applications  (String[] remoteRegions){ if (null == remoteRegions) { remoteRegions=allKnownRemoteRegions; } boolean includeRemoteRegion=remoteRegions.length != 0; if (includeRemoteRegion) { GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS_DELTA.increment(); } else { GET_ALL_CACHE_MISS_DELTA.increment(); } Applications apps=new Applications(); apps.setVersion(responseCache.getVersionDeltaWithRegions().get()); Map<String Application> applicationInstancesMap=new HashMap<String Application>(); try { write.lock(); Iterator<RecentlyChangedItem> iter=this.recentlyChangedQueue.iterator(); logger.debug(""The number of elements in the delta queue is :{}"" this.recentlyChangedQueue.size()); while (iter.hasNext()) { Lease<InstanceInfo> lease=iter.next().getLeaseInfo(); InstanceInfo instanceInfo=lease.getHolder(); logger.debug(""The instance id {} is found with status {} and actiontype {}"" instanceInfo.getId() instanceInfo.getStatus().name() instanceInfo.getActionType().name()); Application app=applicationInstancesMap.get(instanceInfo.getAppName()); if (app == null) { app=new Application(instanceInfo.getAppName()); applicationInstancesMap.put(instanceInfo.getAppName() app); apps.addApplication(app); } app.addInstance(decorateInstanceInfo(lease)); } if (includeRemoteRegion) { for ( String remoteRegion : remoteRegions) { RemoteRegionRegistry remoteRegistry=regionNameVSRemoteRegistry.get(remoteRegion); if (null != remoteRegistry) { Applications remoteAppsDelta=remoteRegistry.getApplicationDeltas(); if (null != remoteAppsDelta) { for ( Application application : remoteAppsDelta.getRegisteredApplications()) { if (shouldFetchFromRemoteRegistry(application.getName() remoteRegion)) { Application appInstanceTillNow=apps.getRegisteredApplications(application.getName()); if (appInstanceTillNow == null) { appInstanceTillNow=new Application(application.getName()); apps.addApplication(appInstanceTillNow); } for ( InstanceInfo instanceInfo : application.getInstances()) { appInstanceTillNow.addInstance(instanceInfo); } } } } } } } Applications allApps=getApplicationsFromMultipleRegions(remoteRegions); apps.setAppsHashCode(allApps.getReconcileHashCode()); return apps; } finally { write.unlock(); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getApplications,@Deprecated public Applications  (boolean includeRemoteRegion){ GET_ALL_CACHE_MISS.increment(); Applications apps=new Applications(); apps.setVersion(1L); for ( Entry<String Map<String Lease<InstanceInfo>>> entry : registry.entrySet()) { Application app=n
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getApplicationsFromAllRemoteRegions,public Applications  (){ return getApplicationsFromMultipleRegions(allKnownRemoteRegions); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getApplicationsFromLocalRegionOnly,@Override public Applications  (){ return getApplicationsFromMultipleRegions(EMPTY_STR_ARRAY); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getApplicationsFromMultipleRegions,"public Applications  (String[] remoteRegions){ boolean includeRemoteRegion=null != remoteRegions && remoteRegions.length != 0; logger.debug(""Fetching applications registry with remote regions: {}  Regions argument {}"" includeRemoteRegion remoteRegions); if (includeRemoteRegion) { GET_ALL_WITH_REMOTE_REGIONS_CACHE_MISS.increment(); } else { GET_ALL_CACHE_MISS.increment(); } Applications apps=new Applications(); apps.setVersion(1L); for ( Entry<String Map<String Lease<InstanceInfo>>> entry : registry.entrySet()) { Application app=null; if (entry.getValue() != null) { for ( Entry<String Lease<InstanceInfo>> stringLeaseEntry : entry.getValue().entrySet()) { Lease<InstanceInfo> lease=stringLeaseEntry.getValue(); if (app == null) { app=new Application(lease.getHolder().getAppName()); } app.addInstance(decorateInstanceInfo(lease)); } } if (app != null) { apps.addApplication(app); } } if (includeRemoteRegion) { for ( String remoteRegion : remoteRegions) { RemoteRegionRegistry remoteRegistry=regionNameVSRemoteRegistry.get(remoteRegion); if (null != remoteRegistry) { Applications remoteApps=remoteRegistry.getApplications(); for ( Application application : remoteApps.getRegisteredApplications()) { if (shouldFetchFromRemoteRegistry(application.getName() remoteRegion)) { logger.info(""Application {} fetched from the remote region {}"" application.getName() remoteRegion); Application appInstanceTillNow=apps.getRegisteredApplications(application.getName()); if (appInstanceTillNow == null) { appInstanceTillNow=new Application(application.getName()); apps.addApplication(appInstanceTillNow); } for ( InstanceInfo instanceInfo : application.getInstances()) { appInstanceTillNow.addInstance(instanceInfo); } } else { logger.debug(""Application {} not fetched from the remote region {} as there exists a "" + ""whitelist and this app is not in the whitelist."" application.getName() remoteRegion); } } } else { logger.warn(""No remote registry available for the remote region {}"" remoteRegion); } } } apps.setAppsHashCode(apps.getReconcileHashCode()); return apps; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getCompensationTimeMs,long  (){ long currNanos=getCurrentTimeNano(); long lastNanos=lastExecutionNanosRef.getAndSet(currNanos); if (lastNanos == 0l) { return 0l; } long elapsedMs=TimeUnit.NANOSECONDS.toMillis(currNanos - lastNanos); long compensationTime=elapsedMs - serverConfig.getEvictionIntervalTimerInMs(); return compensationTime <= 0l ? 0l : compensationTime; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getCurrentTimeNano,long  (){ return System.nanoTime(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getDeltaRetentionTask,private TimerTask  (){ return new TimerTask(){ @Override public void run(){ Iterator<RecentlyChangedItem> it=recentlyChangedQueue.iterator(); while (it.hasNext()) { if (it.next().getLastUpdateTime() < System.currentTimeMillis() - serverConfig.getRetentionTimeInMSInDeltaQueue()) { it.remove(); } else { break; } } } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AbstractInstanceRegistry.java,getInstanceByAppAndId,@Override public InstanceInfo  (String appName String id boolean includeRemoteRegions){ Map<String Lease<InstanceInfo>> leaseMap=registry.get(appName); Lease<InstanceInfo> lease=null; if (leaseMap != null) { lease=leaseMap.get(id); } if (lease != null && 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,AwsInstanceRegistry,@Inject public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs EurekaClient eurekaClient){ super(serverConfig clientConfig serverCodecs eurekaClient); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,getAwsAsgUtil,public AwsAsgUtil  (){ return awsAsgUtil; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,getInstanceInfoOverrideRule,@Override protected InstanceStatusOverrideRule  (){ return this.instanceStatusOverrideRule; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\AwsInstanceRegistry.java,init,@Override public void  (PeerEurekaNodes peerEurekaNodes) throws Exception { super.init(peerEurekaNodes); this.awsAsgUtil=new AwsAsgUtil(serverConfig clientConfig this); this.instanceStatusOverrideRule=new FirstMatchWinsCompositeRule(new DownOrStartingRule
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,Key,"public  (EntityType entityType String entityName KeyType type Version v EurekaAccept eurekaAccept @Nullable String[] regions){ this.regions=regions; this.entityType=entityType; this.entityName=entityName; this.requestType=type; this.requestVersion=v; this.eurekaAccept=eurekaAccept; hashKey=this.entityType + this.entityName + (null != this.regions ? Arrays.toString(this.regions) : """")+ requestType.name()+ requestVersion.name()+ this.eurekaAccept.name(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,cloneWithoutRegions,public Key  (){ return new Key(entityType entityName requestType requestVersion eurekaAccept); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,equals,@Override public boolean  (Object other){ if (other instanceof Key) { return getHashKey().equals(((Key)other).getHashKey()); } else { return false; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,getEntityType,public EntityType  (){ return entityType; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,getEurekaAccept,public EurekaAccept  (){ return eurekaAccept; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,getHashKey,public String  (){ return hashKey; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,getName,public String  (){ return entityName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,getRegions,public String[]  (){ return regions; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,getType,public KeyType  (){ return requestType; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,getVersion,public Version  (){ return requestVersion; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,hasRegions,public boolean  (){ return null != regions && regions.length != 0; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,hashCode,@Override public int  (){ String hashKey=getHashKey(); return hashKey.hashCode(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\Key.java,toStringCompact,"public String  (){ StringBuilder sb=new StringBuilder(); sb.append(""{name="").append(entityName).append(""  type="").append(entityType).append(""  format="").append(requestType); if (regions != null) { sb.append(""  regions="").append(Arrays.toString(regions)); } sb.append('}'); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AlwaysMatchInstanceStatusRule.java,apply,"@Override public StatusOverrideResult  (InstanceInfo instanceInfo Lease<InstanceInfo> existingLease boolean isReplication){ logger.debug(""Returning the default instance status {} for instance {}"" instanceInfo.getStatus() instanceInfo.getId()); return Stat"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AlwaysMatchInstanceStatusRule.java,toString,@Override public String  (){ return AlwaysMatchInstanceStatusRule.class.getName(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java,AsgEnabledRule,public  (AwsAsgUtil awsAsgUtil){ this.awsAsgUtil=awsAsgUtil; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java,apply,"@Override public StatusOverrideResult  (InstanceInfo instanceInfo Lease<InstanceInfo> existingLease boolean isReplication){ if (instanceInfo.getASGName() != null) { boolean isASGDisabled=!awsAsgUtil.isASGEnabled(instanceInfo); logger.debug(""The ASG name i"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\AsgEnabledRule.java,toString,@Override public String  (){ return AsgEnabledRule.class.getName(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,RemoteRegionRegistry,@Inject public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs String regionName URL remoteRegionURL){ this.serverConfig=serverConfig; this.remoteRegionURL=remoteRegionURL; this.fetchRegistryTimer=Monitors.newTi
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,closeResponse,"private void  (ClientResponse response){ if (response != null) { try { response.close(); } catch ( Throwable th) { logger.error(""Cannot release response resource :"" th); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetchAndStoreDelta,"private boolean  () throws Throwable { long currGeneration=fetchRegistryGeneration.get(); Applications delta=fetchRemoteRegistry(true); if (delta == null) { logger.error(""The delta is null for some reason. Not storing this information""); } else if (fetchRegistryGeneration.compareAndSet(currGeneration currGeneration + 1)) { this.applicationsDelta.set(delta); } else { delta=null; logger.warn(""Not updating delta as another thread is updating it already""); } if (delta == null) { logger.warn(""The server does not allow the delta revision to be applied because it is not "" + ""safe. Hence got the full registry.""); return storeFullRegistry(); } else { String reconcileHashCode=""""; if (fetchRegistryUpdateLock.tryLock()) { try { updateDelta(delta); reconcileHashCode=getApplications().getReconcileHashCode(); } finally { fetchRegistryUpdateLock.unlock(); } } else { logger.warn(""Cannot acquire update lock  aborting updateDelta operation of fetchAndStoreDelta""); } if ((!reconcileHashCode.equals(delta.getAppsHashCode()))) { return reconcileAndLogDifference(delta reconcileHashCode); } } return delta != null; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetchRegistry,"private boolean  (){ boolean success; Stopwatch tracer=fetchRegistryTimer.start(); try { if (serverConfig.shouldDisableDeltaForRemoteRegions() || (getApplications() == null) || (getApplications().getRegisteredApplications().size() == 0)) { logger.info(""Disable delta property : {}"" serverConfig.shouldDisableDeltaForRemoteRegions()); logger.info(""Application is null : {}"" getApplications() == null); logger.info(""Registered Applications size is zero : {}"" getApplications().getRegisteredApplications().isEmpty()); success=storeFullRegistry(); } else { success=fetchAndStoreDelta(); } logTotalInstances(); } catch ( Throwable e) { logger.error(""Unable to fetch registry information from the remote registry {}"" this.remoteRegionURL e); return false; } finally { if (tracer != null) { tracer.stop(); } } return success; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,fetchRemoteRegistry,"private Applications  (boolean delta){ logger.info(""Getting instance registry info from the eureka server : {}   delta : {}"" this.remoteRegionURL delta); if (shouldUseExperimentalTransport()) { try { EurekaHttpResponse<Applications> httpResponse=delta ? eurekaHttpClient.getDelta() : eurekaHttpClient.getApplications(); int httpStatus=httpResponse.getStatusCode(); if (httpStatus >= 200 && httpStatus < 300) { logger.debug(""Got the data successfully : {}"" httpStatus); return httpResponse.getEntity(); } logger.warn(""Cannot get the data from {} : {}"" this.remoteRegionURL httpStatus); } catch ( Throwable t) { logger.error(""Can't get a response from {}"" this.remoteRegionURL t); } } else { ClientResponse response=null; try { String urlPath=delta ? ""apps/delta"" : ""apps/""; response=discoveryApacheClient.resource(this.remoteRegionURL + urlPath).accept(MediaType.APPLICATION_JSON_TYPE).get(ClientResponse.class); int httpStatus=response.getStatus(); if (httpStatus >= 200 && httpStatus < 300) { logger.debug(""Got the data successfully : {}"" httpStatus); return response.getEntity(Applications.class); } logger.warn(""Cannot get the data from {} : {}"" this.remoteRegionURL httpStatus); } catch ( Throwable t) { logger.error(""Can't get a response from {}"" this.remoteRegionURL t); } finally { closeResponse(response); } } return null; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,getApplication,@Override public Application  (String appName){ return this.applications.get().getRegisteredApplications(appName); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,getApplicationDeltas,public Applications  (){ return this.applicationsDelta.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,getApplications,@Override public Applications  (){ return applications.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,getInstancesById,@Override public List<InstanceInfo>  (String id){ List<InstanceInfo> list=Collections.emptyList(); for ( Application app : applications.get().getRegisteredApplications()) { InstanceInfo info=app.getByInstanceId(id); if (info != null) { list.add(info); ret
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,getNextServerFromEureka,@Override public InstanceInfo  (String arg0 boolean arg1){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,isReadyForServingData,public boolean  (){ return readyForServingData; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,logTotalInstances,"private void  (){ int totInstances=0; for ( Application application : getApplications().getRegisteredApplications()) { totInstances+=application.getInstancesAsIsFromEureka().size(); } logger.debug(""The total number of all instances in the client now is {}"" totInstances); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,reconcileAndLogDifference,"private boolean  (Applications delta String reconcileHashCode) throws Throwable { logger.warn(""The Reconcile hashcodes do not match  client : {}  server : {}. Getting the full registry"" reconcileHashCode delta.getAppsHashCode()); long currentGeneration=fetchRegistryGeneration.get(); Applications apps=this.fetchRemoteRegistry(false); if (apps == null) { logger.error(""The application is null for some reason. Not storing this information""); return false; } if (fetchRegistryGeneration.compareAndSet(currentGeneration currentGeneration + 1)) { applications.set(apps); applicationsDelta.set(apps); logger.warn(""The Reconcile hashcodes after complete sync up  client : {}  server : {}."" getApplications().getReconcileHashCode() delta.getAppsHashCode()); return true; } else { logger.warn(""Not setting the applications map as another thread has advanced the update generation""); return true; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,run,"@Override public void  (){ try { if (fetchRegistry()) { readyForServingData=true; } else { logger.warn(""Failed to fetch remote registry. This means this eureka server is not "" + ""ready for serving traffic.""); } } catch ( Throwable e) { logger.error(""Error"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,shouldUseExperimentalTransport,"private boolean  (){ if (eurekaHttpClient == null) { return false; } String enabled=serverConfig.getExperimental(""transport.enabled""); return enabled != null && ""true"".equalsIgnoreCase(enabled); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,storeFullRegistry,"public boolean  (){ long currentGeneration=fetchRegistryGeneration.get(); Applications apps=fetchRemoteRegistry(false); if (apps == null) { logger.error(""The application is null for some reason. Not storing this information""); } else if (fetchRegistryGeneration.compareAndSet(currentGeneration currentGeneration + 1)) { applications.set(apps); applicationsDelta.set(apps); logger.info(""Successfully updated registry with the latest content""); return true; } else { logger.warn(""Not updating applications as another thread is updating it already""); } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\RemoteRegionRegistry.java,updateDelta,"private void  (Applications delta){ int deltaCount=0; for ( Application app : delta.getRegisteredApplications()) { for ( InstanceInfo instance : app.getInstances()) { ++deltaCount; if (ActionType.ADDED.equals(instance.getActionType())) { Application existingApp=getApplications().getRegisteredApplications(instance.getAppName()); if (existingApp == null) { getApplications().addApplication(app); } logger.debug(""Added instance {} to the existing apps "" instance.getId()); getApplications().getRegisteredApplications(instance.getAppName()).addInstance(instance); } else if (ActionType.MODIFIED.equals(instance.getActionType())) { Application existingApp=getApplications().getRegisteredApplications(instance.getAppName()); if (existingApp == null) { getApplications().addApplication(app); } logger.debug(""Modified instance {} to the existing apps "" instance.getId()); getApplications().getRegisteredApplications(instance.getAppName()).addInstance(instance); } else if (ActionType.DELETED.equals(instance.getActionType())) { Application existingApp=getApplications().getRegisteredApplications(instance.getAppName()); if (existingApp == null) { getApplications().addApplication(app); } logger.debug(""Deleted instance {} to the existing apps "" instance.getId()); getApplications().getRegisteredApplications(instance.getAppName()).removeInstance(instance); } } } logger.debug(""The total number of instances fetched by the delta processor : {}"" deltaCount); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,ResponseCacheImpl," (EurekaServerConfig serverConfig ServerCodecs serverCodecs AbstractInstanceRegistry registry){ this.serverConfig=serverConfig; this.serverCodecs=serverCodecs; this.shouldUseReadOnlyResponseCache=serverConfig.shouldUseReadOnlyResponseCache(); this.registry=registry; long responseCacheUpdateIntervalMs=serverConfig.getResponseCacheUpdateIntervalMs(); this.readWriteCacheMap=CacheBuilder.newBuilder().initialCapacity(1000).expireAfterWrite(serverConfig.getResponseCacheAutoExpirationInSeconds() TimeUnit.SECONDS).removalListener(new RemovalListener<Key Value>(){ @Override public void onRemoval( RemovalNotification<Key Value> notification){ Key removedKey=notification.getKey(); if (removedKey.hasRegions()) { Key cloneWithNoRegions=removedKey.cloneWithoutRegions(); regionSpecificKeys.remove(cloneWithNoRegions removedKey); } } } ).build(new CacheLoader<Key Value>(){ @Override public Value load( Key key) throws Exception { if (key.hasRegions()) { Key cloneWithNoRegions=key.cloneWithoutRegions(); regionSpecificKeys.put(cloneWithNoRegions key); } Value value=generatePayload(key); return value; } } ); if (shouldUseReadOnlyResponseCache) { timer.schedule(getCacheUpdateTask() new Date(((System.currentTimeMillis() / responseCacheUpdateIntervalMs) * responseCacheUpdateIntervalMs) + responseCacheUpdateIntervalMs) responseCacheUpdateIntervalMs); } try { Monitors.registerObject(this); } catch ( Throwable e) { logger.warn(""Cannot register the JMX monitor for the InstanceRegistry"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,Value,public  (String payload){ this.payload=payload; if (!EMPTY_PAYLOAD.equals(payload)) { Stopwatch tracer=compressPayloadTimer.start(); try { ByteArrayOutputStream bos=new ByteArrayOutputStream(); GZIPOutputStream out=new GZIPOutputStream(bos); byte[] rawBytes=payload.getBytes(); out.write(rawBytes); out.finish(); out.close(); bos.close(); gzipped=bos.toByteArray(); } catch ( IOException e) { gzipped=null; } finally { if (tracer != null) { tracer.stop(); } } } else { gzipped=null; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,generatePayload,"private Value  (Key key){ Stopwatch tracer=null; try { String payload; switch (key.getEntityType()) { case Application: boolean isRemoteRegionRequested=key.hasRegions(); if (ALL_APPS.equals(key.getName())) { if (isRemoteRegionRequested) { tracer=serializeAllAppsWithRemoteRegionTimer.start(); payload=getPayLoad(key registry.getApplicationsFromMultipleRegions(key.getRegions())); } else { tracer=serializeAllAppsTimer.start(); payload=getPayLoad(key registry.getApplications()); } } else if (ALL_APPS_DELTA.equals(key.getName())) { if (isRemoteRegionRequested) { tracer=serializeDeltaAppsWithRemoteRegionTimer.start(); versionDeltaWithRegions.incrementAndGet(); versionDeltaWithRegionsLegacy.incrementAndGet(); payload=getPayLoad(key registry.getApplicationDeltasFromMultipleRegions(key.getRegions())); } else { tracer=serializeDeltaAppsTimer.start(); versionDelta.incrementAndGet(); versionDeltaLegacy.incrementAndGet(); payload=getPayLoad(key registry.getApplicationDeltas()); } } else { tracer=serializeOneApptimer.start(); payload=getPayLoad(key registry.getApplication(key.getName())); } break; case VIP: case SVIP: tracer=serializeViptimer.start(); payload=getPayLoad(key getApplicationsForVip(key registry)); break; default : logger.error(""Unidentified entity type: {} found in the cache key."" key.getEntityType()); payload=""""; break; } return new Value(payload); } finally { if (tracer != null) { tracer.stop(); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,get,@VisibleForTesting String  (final Key key boolean useReadOnlyCache){ Value payload=getValue(key useReadOnlyCache); if (payload == null || payload.getPayload().equals(EMPTY_PAYLOAD)) { return null; } else { return payload.getPayload(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getApplicationsForVip,"private static Applications  (Key key AbstractInstanceRegistry registry){ logger.debug(""Retrieving applications from registry for key : {} {} {} {}"" key.getEntityType() key.getName() key.getVersion() key.getType()); Applications toReturn=new Applications(); Applications applications=registry.getApplications(); for ( Application application : applications.getRegisteredApplications()) { Application appToAdd=null; for ( InstanceInfo instanceInfo : application.getInstances()) { String vipAddress; if (Key.EntityType.VIP.equals(key.getEntityType())) { vipAddress=instanceInfo.getVIPAddress(); } else if (Key.EntityType.SVIP.equals(key.getEntityType())) { vipAddress=instanceInfo.getSecureVipAddress(); } else { continue; } if (null != vipAddress) { String[] vipAddresses=vipAddress.split("" ""); Arrays.sort(vipAddresses); if (Arrays.binarySearch(vipAddresses key.getName()) >= 0) { if (null == appToAdd) { appToAdd=new Application(application.getName()); toReturn.addApplication(appToAdd); } appToAdd.addInstance(instanceInfo); } } } } toReturn.setAppsHashCode(toReturn.getReconcileHashCode()); logger.debug(""Retrieved applications from registry for key : {} {} {} {}  reconcile hashcode: {}"" key.getEntityType() key.getName() key.getVersion() key.getType() toReturn.getReconcileHashCode()); return toReturn; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getCacheUpdateTask,"private TimerTask  (){ return new TimerTask(){ @Override public void run(){ logger.debug(""Updating the client cache from response cache""); for ( Key key : readOnlyCacheMap.keySet()) { if (logger.isDebugEnabled()) { logger.debug(""Updating the client cache from response cache for key : {} {} {} {}"" key.getEntityType() key.getName() key.getVersion() key.getType()); } try { CurrentRequestVersion.set(key.getVersion()); Value cacheValue=readWriteCacheMap.get(key); Value currentCacheValue=readOnlyCacheMap.get(key); if (cacheValue != currentCacheValue) { readOnlyCacheMap.put(key cacheValue); } } catch ( Throwable th) { logger.error(""Error while updating the client cache from response cache for key {}"" key.toStringCompact() th); } } } } ; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getCurrentSize,"@Monitor(name=""responseCacheSize"" type=DataSourceType.GAUGE) public int  (){ return readWriteCacheMap.asMap().size(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getGZIP,public byte[]  (Key key){ Value payload=getValue(key shouldUseReadOnlyResponseCache); if (payload == null) { return null; } return payload.getGzipped(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getGzipped,public byte[]  (){ return gzipped; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getPayLoad,"private String  (Key key Application app){ if (app == null) { return EMPTY_PAYLOAD; } EncoderWrapper encoderWrapper=serverCodecs.getEncoder(key.getType() key.getEurekaAccept()); try { return encoderWrapper.encode(app); } catch ( Exception e) { logger.error(""Failed to encode the payload for application {}"" app.getName() e); return """"; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getPayload,public String  (){ return payload; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getValue,@VisibleForTesting Value  (final Key key boolean useReadOnlyCache){ Value payload=null; try { if (useReadOnlyCache) { final Value currentPayload=readOnlyCacheMap.get(key); if (currentPayload != null) { payload=currentPayload; } else { payload=readWriteCac
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getVersionDelta,@Override public AtomicLong  (){ return versionDelta; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getVersionDeltaStatic,@Deprecated public static AtomicLong  (){ return versionDeltaLegacy; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getVersionDeltaWithRegions,@Override public AtomicLong  (){ return versionDeltaWithRegions; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,getVersionDeltaWithRegionsLegacy,@Deprecated public static AtomicLong  (){ return versionDeltaWithRegionsLegacy; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,invalidate,"public void  (Key... keys){ for ( Key key : keys) { logger.debug(""Invalidating the response cache key : {} {} {} {}  {}"" key.getEntityType() key.getName() key.getVersion() key.getType() key.getEurekaAccept()); readWriteCacheMap.invalidate(key); Collection<Key> keysWithRegions=regionSpecificKeys.get(key); if (null != keysWithRegions && !keysWithRegions.isEmpty()) { for ( Key keysWithRegion : keysWithRegions) { logger.debug(""Invalidating the response cache key : {} {} {} {} {}"" key.getEntityType() key.getName() key.getVersion() key.getType() key.getEurekaAccept()); readWriteCacheMap.invalidate(keysWithRegion); } } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,load,@Override public Value  (Key key) throws Exception { if (key.hasRegions()) { Key cloneWithNoRegions=key.cloneWithoutRegions(); regionSpecificKeys.put(cloneWithNoRegions key); } Value value=generatePayload(key); return value; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,onRemoval,@Override public void  (RemovalNotification<Key Value> notification){ Key removedKey=notification.getKey(); if (removedKey.hasRegions()) { Key cloneWithNoRegions=removedKey.cloneWithoutRegions(); regionSpecificKeys.remove(cloneWithNoRegions removedKey); }
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\ResponseCacheImpl.java,run,"@Override public void  (){ logger.debug(""Updating the client cache from response cache""); for ( Key key : readOnlyCacheMap.keySet()) { if (logger.isDebugEnabled()) { logger.debug(""Updating the client cache from response cache for key : {} {} {} {}"" key.ge"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,PeerAwareInstanceRegistryImpl,@Inject public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs EurekaClient eurekaClient){ super(serverConfig clientConfig serverCodecs); this.eurekaClient=eurekaClient; this.numberOfReplicationsLastMin=new Meas
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,cancel,@Override public boolean  (final String appName final String id final boolean isReplication){ if (super.cancel(appName id isReplication)) { replicateToPeers(Action.Cancel appName id null null isReplication); synchronized (lock) { if (this.expectedNumberOf
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,compare,public int  (Application l Application r){ return l.getName().compareTo(r.getName()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,deleteStatusOverride,@Override public boolean  (String appName String id InstanceStatus newStatus String lastDirtyTimestamp boolean isReplication){ if (super.deleteStatusOverride(appName id newStatus lastDirtyTimestamp isReplication)) { replicateToPeers(Action.DeleteStatusOve
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,getInstanceInfoOverrideRule,@Override protected InstanceStatusOverrideRule  (){ return this.instanceStatusOverrideRule; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,getLocalRegistrySize,"@Override @com.netflix.servo.annotations.Monitor(name=""localRegistrySize"" description=""Current registry size"" type=DataSourceType.GAUGE) public long  (){ return super.getLocalRegistrySize(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,getNextServerFromEureka,@Override public InstanceInfo  (String virtualHostname boolean secure){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,getNumOfReplicationsInLastMin,"@com.netflix.servo.annotations.Monitor(name=""numOfReplicationsInLastMin"" description=""Number of total replications received in the last minute"" type=com.netflix.servo.annotations.DataSourceType.GAUGE) public long  (){ return numberOfReplicationsLastMin.ge"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,getReplicaNodes,@Deprecated public List<PeerEurekaNode>  (){ return Collections.unmodifiableList(peerEurekaNodes.getPeerEurekaNodes()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,getSortedApplications,@Override public List<Application>  (){ List<Application> apps=new ArrayList<Application>(getApplications().getRegisteredApplications()); Collections.sort(apps APP_COMPARATOR); return apps; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,getTimer,public com.netflix.servo.monitor.Timer  (){ return this.timer; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,init,@Override public void  (PeerEurekaNodes peerEurekaNodes) throws Exception { this.numberOfReplicationsLastMin.start(); this.peerEurekaNodes=peerEurekaNodes; initializedResponseCache(); scheduleRenewalThresholdUpdateTask(); initRemoteRegionRegistry(); try {
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,isBelowRenewThresold,"@com.netflix.servo.annotations.Monitor(name=""isBelowRenewThreshold"" description=""0 = false  1 = true"" type=com.netflix.servo.annotations.DataSourceType.GAUGE) @Override public int  (){ if ((getNumOfRenewsInLastMin() <= numberOfRenewsPerMinThreshold) && (("
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,isLeaseExpirationEnabled,@Override public boolean  (){ if (!isSelfPreservationModeEnabled()) { return true; } return numberOfRenewsPerMinThreshold > 0 && getNumOfRenewsInLastMin() > numberOfRenewsPerMinThreshold; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,isRegisterable,public boolean  (InstanceInfo instanceInfo){ DataCenterInfo datacenterInfo=instanceInfo.getDataCenterInfo(); String serverRegion=clientConfig.getRegion(); if (AmazonInfo.class.isInstance(datacenterInfo)) { AmazonInfo info=AmazonInfo.class.cast(instanceInfo.getDataCenterInfo()); String availabilityZone=info.get(MetaDataKey.availabilityZone); if (availabilityZone == null && US_EAST_1.equalsIgnoreCase(serverRegion)) { return true; } else if ((availabilityZone != null) && (availabilityZone.contains(serverRegion))) { return true; } } return true; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,isSelfPreservationModeEnabled,@Override public boolean  (){ return serverConfig.shouldEnableSelfPreservation(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,openForTraffic,@Override public void  (ApplicationInfoManager applicationInfoManager int count){ this.expectedNumberOfRenewsPerMin=count * 2; this.numberOfRenewsPerMinThreshold=(int)(this.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold()); logger.
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,primeAwsReplicas,"private void  (ApplicationInfoManager applicationInfoManager){ boolean areAllPeerNodesPrimed=false; while (!areAllPeerNodesPrimed) { String peerHostName=null; try { Application eurekaApps=this.getApplication(applicationInfoManager.getInfo().getAppName() false); if (eurekaApps == null) { areAllPeerNodesPrimed=true; logger.info(""No peers needed to prime.""); return; } for ( PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) { for ( InstanceInfo peerInstanceInfo : eurekaApps.getInstances()) { LeaseInfo leaseInfo=peerInstanceInfo.getLeaseInfo(); if (System.currentTimeMillis() > (leaseInfo.getRenewalTimestamp() + (leaseInfo.getDurationInSecs() * 1000)) + (2 * 60 * 1000)) { continue; } peerHostName=peerInstanceInfo.getHostName(); logger.info(""Trying to send heartbeat for the eureka server at {} to make sure the "" + ""network channels are open"" peerHostName); if (peerHostName.equalsIgnoreCase(new URI(node.getServiceUrl()).getHost())) { node.heartbeat(peerInstanceInfo.getAppName() peerInstanceInfo.getId() peerInstanceInfo null true); } } } areAllPeerNodesPrimed=true; } catch ( Throwable e) { logger.error(""Could not contact {}"" peerHostName e); try { Thread.sleep(PRIME_PEER_NODES_RETRY_MS); } catch ( InterruptedException e1) { logger.warn(""Interrupted while priming : "" e1); areAllPeerNodesPrimed=true; } } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,register,@Override public void  (final InstanceInfo info final boolean isReplication){ int leaseDuration=Lease.DEFAULT_DURATION_IN_SECS; if (info.getLeaseInfo() != null && info.getLeaseInfo().getDurationInSecs() > 0) { leaseDuration=info.getLeaseInfo().getDuration
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,renew,public boolean  (final String appName final String id final boolean isReplication){ if (super.renew(appName id isReplication)) { replicateToPeers(Action.Heartbeat appName id null null isReplication); return true; } return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicateASGInfoToReplicaNodes,"private void  (final String asgName final ASGStatus newStatus final PeerEurekaNode node){ CurrentRequestVersion.set(Version.V2); try { node.statusUpdate(asgName newStatus); } catch ( Throwable e) { logger.error(""Cannot replicate ASG status information to {}"" node.getServiceUrl() e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicateInstanceActionsToPeers,"private void  (Action action String appName String id InstanceInfo info InstanceStatus newStatus PeerEurekaNode node){ try { InstanceInfo infoFromRegistry=null; CurrentRequestVersion.set(Version.V2); switch (action) { case Cancel: node.cancel(appName id); break; case Heartbeat: InstanceStatus overriddenStatus=overriddenInstanceStatusMap.get(id); infoFromRegistry=getInstanceByAppAndId(appName id false); node.heartbeat(appName id infoFromRegistry overriddenStatus false); break; case Register: node.register(info); break; case StatusUpdate: infoFromRegistry=getInstanceByAppAndId(appName id false); node.statusUpdate(appName id newStatus infoFromRegistry); break; case DeleteStatusOverride: infoFromRegistry=getInstanceByAppAndId(appName id false); node.deleteStatusOverride(appName id infoFromRegistry); break; } } catch (Throwable t) { logger.error(""Cannot replicate information to {} for action {}"" node.getServiceUrl() action.name() t); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,replicateToPeers,private void  (Action action String appName String id InstanceInfo info InstanceStatus newStatus boolean isReplication){ Stopwatch tracer=action.getTimer().start(); try { if (isReplication) { numberOfReplicationsLastMin.increment(); } if (peerEurekaNodes == Collections.EMPTY_LIST || isReplication) { return; } for ( final PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) { if (peerEurekaNodes.isThisMyUrl(node.getServiceUrl())) { continue; } replicateInstanceActionsToPeers(action appName id info newStatus node); } } finally { tracer.stop(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,run,@Override public void  (){ updateRenewalThreshold(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,scheduleRenewalThresholdUpdateTask,private void  (){ timer.schedule(new TimerTask(){ @Override public void run(){ updateRenewalThreshold(); } }  serverConfig.getRenewalThresholdUpdateIntervalMs() serverConfig.getRenewalThresholdUpdateIntervalMs()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,shouldAllowAccess,public boolean  (){ return shouldAllowAccess(true); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,shutdown,"@Override public void  (){ try { DefaultMonitorRegistry.getInstance().unregister(Monitors.newObjectMonitor(this)); } catch ( Throwable t) { logger.error(""Cannot shutdown monitor registry"" t); } try { peerEurekaNodes.shutdown(); } catch ( Throwable t) { lo"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,statusUpdate,@Override public void  (final String asgName final ASGStatus newStatus final boolean isReplication){ if (isReplication) { return; } for ( final PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) { replicateASGInfoToReplicaNodes(asgName newStatus 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,syncUp,"@Override public int  (){ int count=0; for (int i=0; ((i < serverConfig.getRegistrySyncRetries()) && (count == 0)); i++) { if (i > 0) { try { Thread.sleep(serverConfig.getRegistrySyncRetryWaitMs()); } catch ( InterruptedException e) { logger.warn(""Interru"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\PeerAwareInstanceRegistryImpl.java,updateRenewalThreshold,"private void  (){ try { Applications apps=eurekaClient.getApplications(); int count=0; for ( Application app : apps.getRegisteredApplications()) { for ( InstanceInfo instance : app.getInstances()) { if (this.isRegisterable(instance)) { ++count; } } } synchronized (lock) { if ((count * 2) > (serverConfig.getRenewalPercentThreshold() * numberOfRenewsPerMinThreshold) || (!this.isSelfPreservationModeEnabled())) { this.expectedNumberOfRenewsPerMin=count * 2; this.numberOfRenewsPerMinThreshold=(int)((count * 2) * serverConfig.getRenewalPercentThreshold()); } } logger.info(""Current renewal threshold is : {}"" numberOfRenewsPerMinThreshold); } catch ( Throwable e) { logger.error(""Cannot update renewal threshold"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java,FirstMatchWinsCompositeRule,public  (InstanceStatusOverrideRule... rules){ this.rules=rules; this.defaultRule=new AlwaysMatchInstanceStatusRule(); List<String> ruleNames=new ArrayList<>(rules.length + 1); for (int i=0; i < rules.length; ++i) { ruleNames.add(rules[i].toString()); } ruleNames.add(defaultRule.toString()); compositeRuleName=ruleNames.toString(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java,apply,@Override public StatusOverrideResult  (InstanceInfo instanceInfo Lease<InstanceInfo> existingLease boolean isReplication){ for (int i=0; i < this.rules.length; ++i) { StatusOverrideResult result=this.rules[i].apply(instanceInfo existingLease isReplicatio
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\FirstMatchWinsCompositeRule.java,toString,@Override public String  (){ return this.compositeRuleName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\LeaseExistsRule.java,apply,@Override public StatusOverrideResult  (InstanceInfo instanceInfo Lease<InstanceInfo> existingLease boolean isReplication){ if (!isReplication) { InstanceInfo.InstanceStatus existingStatus=null; if (existingLease != null) { existingStatus=existingLease.ge
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\DownOrStartingRule.java,toString,@Override public String  (){ return DownOrStartingRule.class.getName(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java,OverrideExistsRule,public  (Map<String InstanceInfo.InstanceStatus> statusOverrides){ this.statusOverrides=statusOverrides; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java,apply,"@Override public StatusOverrideResult  (InstanceInfo instanceInfo Lease<InstanceInfo> existingLease boolean isReplication){ InstanceInfo.InstanceStatus overridden=statusOverrides.get(instanceInfo.getId()); if (overridden != null) { logger.debug(""The insta"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\OverrideExistsRule.java,toString,@Override public String  (){ return OverrideExistsRule.class.getName(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,ApplicationsResource,public  (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,getApplicationResource,"@Path(""{appId}"") public ApplicationResource  (@PathParam(""version"") String version @PathParam(""appId"") String appId){ CurrentRequestVersion.set(Version.toEnum(version)); return new ApplicationResource(appId serverConfig registry); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,getContainerDifferential,"@Path(""delta"") @GET public Response  (@PathParam(""version"") String version @HeaderParam(HEADER_ACCEPT) String acceptHeader @HeaderParam(HEADER_ACCEPT_ENCODING) String acceptEncoding @HeaderParam(EurekaAccept.HTTP_X_EUREKA_ACCEPT) String eurekaAccept @Cont"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationsResource.java,getContainers,"@GET public Response  (@PathParam(""version"") String version @HeaderParam(HEADER_ACCEPT) String acceptHeader @HeaderParam(HEADER_ACCEPT_ENCODING) String acceptEncoding @HeaderParam(EurekaAccept.HTTP_X_EUREKA_ACCEPT) String eurekaAccept @Context UriInfo uri"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java,StatusOverrideResult,private  (boolean matches InstanceInfo.InstanceStatus status){ this.matches=matches; this.status=status; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java,matches,public boolean  (){ return matches; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java,matchingStatus,public static StatusOverrideResult  (InstanceInfo.InstanceStatus status){ return new StatusOverrideResult(true status); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\registry\rule\StatusOverrideResult.java,status,public InstanceInfo.InstanceStatus  (){ return status; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\AbstractVIPResource.java,AbstractVIPResource, (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\AbstractVIPResource.java,getVipResponse,"protected Response  (String version String entityName String acceptHeader EurekaAccept eurekaAccept Key.EntityType entityType){ if (!registry.shouldAllowAccess(false)) { return Response.status(Response.Status.FORBIDDEN).build(); } CurrentRequestVersion.set(Version.toEnum(version)); Key.KeyType keyType=Key.KeyType.JSON; if (acceptHeader == null || !acceptHeader.contains(""json"")) { keyType=Key.KeyType.XML; } Key cacheKey=new Key(entityType entityName keyType CurrentRequestVersion.get() eurekaAccept); String payLoad=responseCache.get(cacheKey); if (payLoad != null) { logger.debug(""Found: {}"" entityName); return Response.ok(payLoad).build(); } else { logger.debug(""Not Found: {}"" entityName); return Response.status(Response.Status.NOT_FOUND).build(); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,ApplicationResource, (String appName EurekaServerConfig serverConfig PeerAwareInstanceRegistry registry){ this.appName=appName.toUpperCase(); this.serverConfig=serverConfig; this.registry=registry; this.responseCache=registry.getResponseCache(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,addInstance,"@POST @Consumes({""application/json"" ""application/xml""}) public Response  (InstanceInfo info @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication){ logger.debug(""Registering instance {} (replication={})"" info.getId() isReplication); if (isB"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,getAppName,public String  (){ return appName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,getApplication,"@GET public Response  (@PathParam(""version"") String version @HeaderParam(""Accept"") final String acceptHeader @HeaderParam(EurekaAccept.HTTP_X_EUREKA_ACCEPT) String eurekaAccept){ if (!registry.shouldAllowAccess(false)) { return Response.status(Status.FORB"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,getInstanceInfo,"@Path(""{id}"") public InstanceResource  (@PathParam(""id"") String id){ return new InstanceResource(this id serverConfig registry); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,getName,String  (){ return appName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ApplicationResource.java,isBlank,private boolean  (String str){ return str == null || str.isEmpty(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\CurrentRequestVersion.java,get,public static Version  (){ return CURRENT_REQ_VERSION.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\CurrentRequestVersion.java,set,public static void  (Version version){ CURRENT_REQ_VERSION.set(version); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,DefaultServerCodecs,protected  (CodecWrapper fullJsonCodec CodecWrapper compactJsonCodec CodecWrapper fullXmlCodec CodecWrapper compactXmlCodec){ this.fullJsonCodec=fullJsonCodec; this.compactJsonCodec=compactJsonCodec; this.fullXmlCodec=fullXmlCodec; this.compactXmlCodec=compactXmlCodec; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,build,public ServerCodecs  (){ if (fullJsonCodec == null) { fullJsonCodec=CodecWrappers.getCodec(CodecWrappers.LegacyJacksonJson.class); } if (compactJsonCodec == null) { compactJsonCodec=CodecWrappers.getCodec(CodecWrappers.JacksonJsonMini.class); } if (fullXmlCodec == null) { fullXmlCodec=CodecWrappers.getCodec(CodecWrappers.XStreamXml.class); } if (compactXmlCodec == null) { compactXmlCodec=CodecWrappers.getCodec(CodecWrappers.JacksonXmlMini.class); } return new DefaultServerCodecs(fullJsonCodec compactJsonCodec fullXmlCodec compactXmlCodec); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,builder,public static Builder  (){ return new Builder(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,getCompactJsonCodec,@Override public CodecWrapper  (){ return compactJsonCodec; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,getCompactXmlCodecr,@Override public CodecWrapper  (){ return compactXmlCodec; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,getEncoder,@Override public EncoderWrapper  (Key.KeyType keyType EurekaAccept eurekaAccept){ switch (eurekaAccept) { case compact: return getEncoder(keyType true); case full: default : return getEncoder(keyType false); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,getFullJson,private static CodecWrapper  (EurekaServerConfig serverConfig){ CodecWrapper codec=CodecWrappers.getCodec(serverConfig.getJsonCodecName()); return codec == null ? CodecWrappers.getCodec(CodecWrappers.LegacyJacksonJson.class) : codec; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,getFullJsonCodec,@Override public CodecWrapper  (){ return fullJsonCodec; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,getFullXml,private static CodecWrapper  (EurekaServerConfig serverConfig){ CodecWrapper codec=CodecWrappers.getCodec(serverConfig.getXmlCodecName()); return codec == null ? CodecWrappers.getCodec(CodecWrappers.XStreamXml.class) : codec; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,getFullXmlCodec,@Override public CodecWrapper  (){ return fullXmlCodec; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,withCompactJsonCodec,public Builder  (CodecWrapper compactJsonCodec){ this.compactJsonCodec=compactJsonCodec; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,withCompactXmlCodec,public Builder  (CodecWrapper compactXmlEncoder){ this.compactXmlCodec=compactXmlEncoder; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,withEurekaServerConfig,public Builder  (EurekaServerConfig config){ fullJsonCodec=CodecWrappers.getCodec(config.getJsonCodecName()); fullXmlCodec=CodecWrappers.getCodec(config.getXmlCodecName()); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,withFullJsonCodec,public Builder  (CodecWrapper fullJsonCodec){ this.fullJsonCodec=fullJsonCodec; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\DefaultServerCodecs.java,withFullXmlCodec,public Builder  (CodecWrapper fullXmlCodec){ this.fullXmlCodec=fullXmlCodec; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,ASGResource,public  (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,statusUpdate,"@PUT @Path(""{asgName}/status"") public Response  (@PathParam(""asgName"") String asgName @QueryParam(""value"") String newStatus @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication){ if (awsAsgUtil == null) { return Response.status(400).build("
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ASGResource.java,toEnum,"public static ASGStatus  (String s){ for ( ASGStatus e : ASGStatus.values()) { if (e.name().equalsIgnoreCase(s)) { return e; } } throw new RuntimeException(""Cannot find ASG enum for the given string "" + s); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstancesResource.java,InstancesResource,public  (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstancesResource.java,getById,"@GET @Path(""{id}"") public Response  (@PathParam(""version"") String version @PathParam(""id"") String id){ CurrentRequestVersion.set(Version.toEnum(version)); List<InstanceInfo> list=registry.getInstancesById(id); if (list != null && !list.isEmpty()) { return"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,PeerReplicationResource,public  (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,batchReplication,"@Path(""batch"") @POST public Response  (ReplicationList replicationList){ try { ReplicationListResponse batchResponse=new ReplicationListResponse(); for ( ReplicationInstance instanceInfo : replicationList.getReplicationList()) { try { batchResponse.addRes"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,createApplicationResource,ApplicationResource  (ReplicationInstance instanceInfo){ return new ApplicationResource(instanceInfo.getAppName() serverConfig registry); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,createInstanceResource,InstanceResource  (ReplicationInstance instanceInfo ApplicationResource applicationResource){ return new InstanceResource(applicationResource instanceInfo.getId() serverConfig registry); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,dispatch,private ReplicationInstanceResponse  (ReplicationInstance instanceInfo){ ApplicationResource applicationResource=createApplicationResource(instanceInfo); InstanceResource resource=createInstanceResource(instanceInfo applicationResource); String lastDirtyTimestamp=toString(instanceInfo.getLastDirtyTimestamp()); String overriddenStatus=toString(instanceInfo.getOverriddenStatus()); String instanceStatus=toString(instanceInfo.getStatus()); Builder singleResponseBuilder=new Builder(); switch (instanceInfo.getAction()) { case Register: singleResponseBuilder=handleRegister(instanceInfo applicationResource); break; case Heartbeat: singleResponseBuilder=handleHeartbeat(serverConfig resource lastDirtyTimestamp overriddenStatus instanceStatus); break; case Cancel: singleResponseBuilder=handleCancel(resource); break; case StatusUpdate: singleResponseBuilder=handleStatusUpdate(instanceInfo resource); break; case DeleteStatusOverride: singleResponseBuilder=handleDeleteStatusOverride(instanceInfo resource); break; } return singleResponseBuilder.build(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handleCancel,private static Builder  (InstanceResource resource){ Response response=resource.cancelLease(REPLICATION); return new Builder().setStatusCode(response.getStatus()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handleDeleteStatusOverride,private static Builder  (ReplicationInstance instanceInfo InstanceResource resource){ Response response=resource.deleteStatusUpdate(REPLICATION instanceInfo.getStatus() instanceInfo.getLastDirtyTimestamp().toString()); return new Builder().setStatusCode(response.getStatus()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handleHeartbeat,"private static Builder  (EurekaServerConfig config InstanceResource resource String lastDirtyTimestamp String overriddenStatus String instanceStatus){ Response response=resource.renewLease(REPLICATION overriddenStatus instanceStatus lastDirtyTimestamp); int responseStatus=response.getStatus(); Builder responseBuilder=new Builder().setStatusCode(responseStatus); if (""false"".equals(config.getExperimental(""bugfix.934""))) { if (responseStatus == Status.OK.getStatusCode() && response.getEntity() != null) { responseBuilder.setResponseEntity((InstanceInfo)response.getEntity()); } } else { if ((responseStatus == Status.OK.getStatusCode() || responseStatus == Status.CONFLICT.getStatusCode()) && response.getEntity() != null) { responseBuilder.setResponseEntity((InstanceInfo)response.getEntity()); } } return responseBuilder; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handleRegister,private static Builder  (ReplicationInstance instanceInfo ApplicationResource applicationResource){ applicationResource.addInstance(instanceInfo.getInstanceInfo() REPLICATION); return new Builder().setStatusCode(Status.OK.getStatusCode()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,handleStatusUpdate,private static Builder  (ReplicationInstance instanceInfo InstanceResource resource){ Response response=resource.statusUpdate(instanceInfo.getStatus() REPLICATION toString(instanceInfo.getLastDirtyTimestamp())); return new Builder().setStatusCode(response.getStatus()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\PeerReplicationResource.java,toString,private static <T>String  (T value){ if (value == null) { return null; } return value.toString(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,InstanceResource, (ApplicationResource app String id EurekaServerConfig serverConfig PeerAwareInstanceRegistry registry){ this.app=app; this.id=id; this.serverConfig=serverConfig; this.registry=registry; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,cancelLease,"@DELETE public Response  (@HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication){ try { boolean isSuccess=registry.cancel(app.getName() id ""true"".equals(isReplication)); if (isSuccess) { logger.debug(""Found (Cancel): {} - {}"" app.getName() "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,deleteStatusUpdate,"@DELETE @Path(""status"") public Response  (@HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication @QueryParam(""value"") String newStatusValue @QueryParam(""lastDirtyTimestamp"") String lastDirtyTimestamp){ try { if (registry.getInstanceByAppAndI"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,getInstanceInfo,"@GET public Response  (){ InstanceInfo appInfo=registry.getInstanceByAppAndId(app.getName() id); if (appInfo != null) { logger.debug(""Found: {} - {}"" app.getName() id); return Response.ok(appInfo).build(); } else { logger.debug(""Not Found: {} - {}"" app.ge"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,renewLease,"@PUT public Response  (@HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication @QueryParam(""overriddenstatus"") String overriddenStatus @QueryParam(""status"") String status @QueryParam(""lastDirtyTimestamp"") String lastDirtyTimestamp){ boolean i"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,statusUpdate,"@PUT @Path(""status"") public Response  (@QueryParam(""value"") String newStatus @HeaderParam(PeerEurekaNode.HEADER_REPLICATION) String isReplication @QueryParam(""lastDirtyTimestamp"") String lastDirtyTimestamp){ try { if (registry.getInstanceByAppAndId(app.ge"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,updateMetadata,"@PUT @Path(""metadata"") public Response  (@Context UriInfo uriInfo){ try { InstanceInfo instanceInfo=registry.getInstanceByAppAndId(app.getName() id); if (instanceInfo == null) { logger.error(""Cannot find instance while updating metadata for instance {}"" i"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\InstanceResource.java,validateDirtyTimestamp,"private Response  (Long lastDirtyTimestamp boolean isReplication){ InstanceInfo appInfo=registry.getInstanceByAppAndId(app.getName() id false); if (appInfo != null) { if ((lastDirtyTimestamp != null) && (!lastDirtyTimestamp.equals(appInfo.getLastDirtyTimestamp()))) { Object[] args={id appInfo.getLastDirtyTimestamp() lastDirtyTimestamp isReplication}; if (lastDirtyTimestamp > appInfo.getLastDirtyTimestamp()) { logger.debug(""Time to sync  since the last dirty timestamp differs -"" + "" ReplicationInstance id : {} Registry : {} Incoming: {} Replication: {}"" args); return Response.status(Status.NOT_FOUND).build(); } else if (appInfo.getLastDirtyTimestamp() > lastDirtyTimestamp) { if (isReplication) { logger.debug(""Time to sync  since the last dirty timestamp differs -"" + "" ReplicationInstance id : {} Registry : {} Incoming: {} Replication: {}"" args); return Response.status(Status.CONFLICT).entity(appInfo).build(); } else { return Response.ok().build(); } } } } return Response.ok().build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\SecureVIPResource.java,SecureVIPResource,public  (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\SecureVIPResource.java,statusUpdate,"@GET @Path(""{svipAddress}"") public Response  (@PathParam(""version"") String version @PathParam(""svipAddress"") String svipAddress @HeaderParam(""Accept"") final String acceptHeader @HeaderParam(EurekaAccept.HTTP_X_EUREKA_ACCEPT) String eurekaAccept){ return g"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ServerInfoResource.java,ServerInfoResource,public  (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\ServerInfoResource.java,getOverrides,"@GET @Path(""statusoverrides"") public Response  () throws Exception { Map<String InstanceInfo.InstanceStatus> result=registry.overriddenInstanceStatusesSnapshot(); ObjectMapper objectMapper=new ObjectMapper(); String responseStr=objectMapper.writeValueAsSt"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\VIPResource.java,VIPResource,public  (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\VIPResource.java,statusUpdate,"@GET @Path(""{vipAddress}"") public Response  (@PathParam(""version"") String version @PathParam(""vipAddress"") String vipAddress @HeaderParam(""Accept"") final String acceptHeader @HeaderParam(EurekaAccept.HTTP_X_EUREKA_ACCEPT) String eurekaAccept){ return getV"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\StatusFilter.java,doFilter,"public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { InstanceInfo myInfo=ApplicationInfoManager.getInstance().getInfo(); InstanceStatus status=myInfo.getStatus(); if (status != InstanceStatus.UP && response instanceof HttpServletResponse) { HttpServletResponse httpRespone=(HttpServletResponse)response; httpRespone.sendError(SC_TEMPORARY_REDIRECT ""Current node is currently not ready to serve requests -- current status: "" + status + "" - try another DS node: ""); } chain.doFilter(request response); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,doFilter,@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { logAuth(request); chain.doFilter(request response); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,getHeader,protected String  (HttpServletRequest request String headerKey){ String value=request.getHeader(headerKey); return Strings.isNullOrEmpty(value) ? UNKNOWN : value; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,init,@Override public void  (FilterConfig filterConfig) throws ServletException { if (serverConfig == null) { EurekaServerContext serverContext=(EurekaServerContext)filterConfig.getServletContext().getAttribute(EurekaServerContext.class.getName()); serverConfi
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\ServerRequestAuthFilter.java,logAuth,"protected void  (ServletRequest request){ if (serverConfig.shouldLogIdentityHeaders()) { if (request instanceof HttpServletRequest) { HttpServletRequest httpRequest=(HttpServletRequest)request; String clientName=getHeader(httpRequest AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY); String clientVersion=getHeader(httpRequest AbstractEurekaIdentity.AUTH_VERSION_HEADER_KEY); DynamicCounter.increment(MonitorConfig.builder(NAME_PREFIX + clientName + ""-""+ clientVersion).build()); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,StatusResource,public  (){ this(EurekaServerContextHolder.getInstance().getServerContext()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,getCurrentTimeAsString,public static String  (){ SimpleDateFormat format=new SimpleDateFormat(DATE_FORMAT); return format.format(new Date()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\resources\StatusResource.java,getStatusInfo,@GET public StatusInfo  (){ return statusUtil.getStatusInfo(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,createFactory,public static TransportClientFactory  (final TransportClientFactory delegateFactory){ final DnsServiceImpl dnsService=new DnsServiceImpl(); return new TransportClientFactory(){ @Override public EurekaHttpClient newClient( EurekaEndpoint endpoint){ return new RedirectingEurekaHttpClient(endpoint.getServiceUrl() delegateFactory dnsService); } @Override public void shutdown(){ delegateFactory.shutdown(); } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,createRemoteRegionClient,public static EurekaHttpClient  (EurekaServerConfig serverConfig EurekaTransportConfig transportConfig ServerCodecs serverCodecs ClusterResolver<EurekaEndpoint> clusterResolver){ JerseyRemoteRegionClientFactory jerseyFactory=new JerseyRemoteRegionClientFactory(serverConfig serverCodecs clusterResolver.getRegion()); TransportClientFactory metricsFactory=MetricsCollectingEurekaHttpClient.createFactory(jerseyFactory); SessionedEurekaHttpClient client=new SessionedEurekaHttpClient(Names.REMOTE RetryableEurekaHttpClient.createFactory(Names.REMOTE transportConfig clusterResolver createFactory(metricsFactory) ServerStatusEvaluators.legacyEvaluator()) RECONNECT_INTERVAL_MINUTES * 60 * 1000); return client; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,newClient,@Override public EurekaHttpClient  (EurekaEndpoint endpoint){ return new RedirectingEurekaHttpClient(endpoint.getServiceUrl() delegateFactory dnsService); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\EurekaServerHttpClients.java,shutdown,@Override public void  (){ delegateFactory.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,JerseyRemoteRegionClientFactory,@Inject public  (EurekaServerConfig serverConfig ServerCodecs serverCodecs String region){ this.serverConfig=serverConfig; this.serverCodecs=serverCodecs; this.region=region; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,getOrCreateJerseyClient,"private EurekaJerseyClient  (String region EurekaEndpoint endpoint){ if (jerseyClient != null) { return jerseyClient; } synchronized (lock) { if (jerseyClient == null) { EurekaJerseyClientBuilder clientBuilder=new EurekaJerseyClientBuilder().withUserAgent(""Java-EurekaClient-RemoteRegion"").withEncoderWrapper(serverCodecs.getFullJsonCodec()).withDecoderWrapper(serverCodecs.getFullJsonCodec()).withConnectionTimeout(serverConfig.getRemoteRegionConnectTimeoutMs()).withReadTimeout(serverConfig.getRemoteRegionReadTimeoutMs()).withMaxConnectionsPerHost(serverConfig.getRemoteRegionTotalConnectionsPerHost()).withMaxTotalConnections(serverConfig.getRemoteRegionTotalConnections()).withConnectionIdleTimeout(serverConfig.getRemoteRegionConnectionIdleTimeoutSeconds()); if (endpoint.isSecure()) { clientBuilder.withClientName(""Discovery-RemoteRegionClient-"" + region); } else if (""true"".equals(System.getProperty(""com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory""))) { clientBuilder.withClientName(""Discovery-RemoteRegionSystemSecureClient-"" + region).withSystemSSLConfiguration(); } else { clientBuilder.withClientName(""Discovery-RemoteRegionSecureClient-"" + region).withTrustStoreFile(serverConfig.getRemoteRegionTrustStore() serverConfig.getRemoteRegionTrustStorePassword()); } jerseyClient=clientBuilder.build(); ApacheHttpClient4 discoveryApacheClient=jerseyClient.getClient(); boolean enableGZIPContentEncodingFilter=serverConfig.shouldGZipContentFromRemoteRegion(); if (enableGZIPContentEncodingFilter) { discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(false)); } String ip=null; try { ip=InetAddress.getLocalHost().getHostAddress(); } catch ( UnknownHostException e) { logger.warn(""Cannot find localhost ip"" e); } EurekaServerIdentity identity=new EurekaServerIdentity(ip); discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity)); } } return jerseyClient; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,newClient,@Override public EurekaHttpClient  (EurekaEndpoint endpoint){ return new JerseyApplicationClient(getOrCreateJerseyClient(region endpoint).getClient() endpoint.getServiceUrl() Collections.<String String>emptyMap()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyRemoteRegionClientFactory.java,shutdown,@Override public void  (){ if (jerseyClient != null) { jerseyClient.destroyResources(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,createBatchingTaskDispatcher,public static <ID T>TaskDispatcher<ID T>  (String id int maxBufferSize int workloadSize int workerCount long maxBatchingDelay long congestionRetryDelayMs long networkFailureRetryMs TaskProcessor<T> taskProcessor){ final AcceptorExecutor<ID T> acceptorExecutor=new AcceptorExecutor<>(id maxBufferSize workloadSize maxBatchingDelay congestionRetryDelayMs networkFailureRetryMs); final TaskExecutors<ID T> taskExecutor=TaskExecutors.batchExecutors(id workerCount taskProcessor acceptorExecutor); return new TaskDispatcher<ID T>(){ @Override public void process( ID id  T task  long expiryTime){ acceptorExecutor.process(id task expiryTime); } @Override public void shutdown(){ acceptorExecutor.shutdown(); taskExecutor.shutdown(); } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,createNonBatchingTaskDispatcher,public static <ID T>TaskDispatcher<ID T>  (String id int maxBufferSize int workerCount long maxBatchingDelay long congestionRetryDelayMs long networkFailureRetryMs TaskProcessor<T> taskProcessor){ final AcceptorExecutor<ID T> acceptorExecutor=new AcceptorExecutor<>(id maxBufferSize 1 maxBatchingDelay congestionRetryDelayMs networkFailureRetryMs); final TaskExecutors<ID T> taskExecutor=TaskExecutors.singleItemExecutors(id workerCount taskProcessor acceptorExecutor); return new TaskDispatcher<ID T>(){ @Override public void process( ID id  T task  long expiryTime){ acceptorExecutor.process(id task expiryTime); } @Override public void shutdown(){ acceptorExecutor.shutdown(); taskExecutor.shutdown(); } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,process,@Override public void  (ID id T task long expiryTime){ acceptorExecutor.process(id task expiryTime); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskDispatchers.java,shutdown,@Override public void  (){ acceptorExecutor.shutdown(); taskExecutor.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,AcceptorExecutor," (String id int maxBufferSize int maxBatchingSize long maxBatchingDelay long congestionRetryDelayMs long networkFailureRetryMs){ this.maxBufferSize=maxBufferSize; this.maxBatchingSize=maxBatchingSize; this.maxBatchingDelay=maxBatchingDelay; this.trafficShaper=new TrafficShaper(congestionRetryDelayMs networkFailureRetryMs); ThreadGroup threadGroup=new ThreadGroup(""eurekaTaskExecutors""); this.acceptorThread=new Thread(threadGroup new AcceptorRunner() ""TaskAcceptor-"" + id); this.acceptorThread.setDaemon(true); this.acceptorThread.start(); final double[] percentiles={50.0 95.0 99.0 99.5}; final StatsConfig statsConfig=new StatsConfig.Builder().withSampleSize(1000).withPercentiles(percentiles).withPublishStdDev(true).build(); final MonitorConfig config=MonitorConfig.builder(METRIC_REPLICATION_PREFIX + ""batchSize"").build(); this.batchSizeMetric=new StatsTimer(config statsConfig); try { Monitors.registerObject(id this); } catch ( Throwable e) { logger.warn(""Cannot register servo monitor for this object"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,appendTaskHolder,private void  (TaskHolder<ID T> taskHolder){ if (isFull()) { pendingTasks.remove(processingOrder.poll()); queueOverflows++; } TaskHolder<ID T> previousTask=pendingTasks.put(taskHolder.getId() taskHolder); if (previousTask == null) { processingOrder.add(taskHolder.getId()); } else { overriddenTasks++; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assignBatchWork,void  (){ if (hasEnoughTasksForNextBatch()) { if (batchWorkRequests.tryAcquire(1)) { long now=System.currentTimeMillis(); int len=Math.min(maxBatchingSize processingOrder.size()); List<TaskHolder<ID T>> holders=new ArrayList<>(len); while (holders.size() < len && !processingOrder.isEmpty()) { ID id=processingOrder.poll(); TaskHolder<ID T> holder=pendingTasks.remove(id); if (holder.getExpiryTime() > now) { holders.add(holder); } else { expiredTasks++; } } if (holders.isEmpty()) { batchWorkRequests.release(); } else { batchSizeMetric.record(holders.size() TimeUnit.MILLISECONDS); batchWorkQueue.add(holders); } } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,assignSingleItemWork,void  (){ if (!processingOrder.isEmpty()) { if (singleItemWorkRequests.tryAcquire(1)) { long now=System.currentTimeMillis(); while (!processingOrder.isEmpty()) { ID id=processingOrder.poll(); TaskHolder<ID T> holder=pendingTasks.remove(id); if (holder.getExpiryTime() > now) { singleItemWorkQueue.add(holder); return; } expiredTasks++; } singleItemWorkRequests.release(); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drainAcceptorQueue,private void  (){ while (!acceptorQueue.isEmpty()) { appendTaskHolder(acceptorQueue.poll()); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drainInputQueues,private void  () throws InterruptedException { do { drainReprocessQueue(); drainAcceptorQueue(); if (!isShutdown.get()) { if (reprocessQueue.isEmpty() && acceptorQueue.isEmpty() && pendingTasks.isEmpty()) { TaskHolder<ID T> taskHolder=acceptorQueue.poll(10 TimeUnit.MILLISECONDS); if (taskHolder != null) { appendTaskHolder(taskHolder); } } } } while (!reprocessQueue.isEmpty() || !acceptorQueue.isEmpty() || pendingTasks.isEmpty()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,drainReprocessQueue,private void  (){ long now=System.currentTimeMillis(); while (!reprocessQueue.isEmpty() && !isFull()) { TaskHolder<ID T> taskHolder=reprocessQueue.pollLast(); ID id=taskHolder.getId(); if (taskHolder.getExpiryTime() <= now) { expiredTasks++; } else if (pendingTasks.containsKey(id)) { overriddenTasks++; } else { pendingTasks.put(id taskHolder); processingOrder.addFirst(id); } } if (isFull()) { queueOverflows+=reprocessQueue.size(); reprocessQueue.clear(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,getAcceptorQueueSize,"@Monitor(name=METRIC_REPLICATION_PREFIX + ""acceptorQueueSize"" description=""Number of tasks waiting in the acceptor queue"" type=DataSourceType.GAUGE) public long  (){ return acceptorQueue.size(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,getPendingJobRequests,"@Monitor(name=METRIC_REPLICATION_PREFIX + ""pendingJobRequests"" description=""Number of worker threads awaiting job assignment"" type=DataSourceType.GAUGE) public long  (){ return singleItemWorkRequests.availablePermits() + batchWorkRequests.availablePermits"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,getQueueSize,"@Monitor(name=METRIC_REPLICATION_PREFIX + ""queueSize"" description=""Task queue size"" type=DataSourceType.GAUGE) public long  (){ return pendingTasks.size(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,getReprocessQueueSize,"@Monitor(name=METRIC_REPLICATION_PREFIX + ""reprocessQueueSize"" description=""Number of tasks waiting in the reprocess queue"" type=DataSourceType.GAUGE) public long  (){ return reprocessQueue.size(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,hasEnoughTasksForNextBatch,private boolean  (){ if (processingOrder.isEmpty()) { return false; } if (pendingTasks.size() >= maxBufferSize) { return true; } TaskHolder<ID T> nextHolder=pendingTasks.get(processingOrder.peek()); long delay=System.currentTimeMillis() - nextHolder.getSubmitTimestamp(); return delay >= maxBatchingDelay; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,isFull,private boolean  (){ return pendingTasks.size() >= maxBufferSize; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,process,void  (ID id T task long expiryTime){ acceptorQueue.add(new TaskHolder<ID T>(id task expiryTime)); acceptedTasks++; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,reprocess,void  (TaskHolder<ID T> taskHolder ProcessingResult processingResult){ reprocessQueue.add(taskHolder); replayedTasks++; trafficShaper.registerFailure(processingResult); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,requestWorkItem,BlockingQueue<TaskHolder<ID T>>  (){ singleItemWorkRequests.release(); return singleItemWorkQueue; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,requestWorkItems,BlockingQueue<List<TaskHolder<ID T>>>  (){ batchWorkRequests.release(); return batchWorkQueue; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,run,@Override public void  (){ long scheduleTime=0; while (!isShutdown.get()) { try { drainInputQueues(); int totalItems=processingOrder.size(); long now=System.currentTimeMillis(); if (scheduleTime < now) { scheduleTime=now + trafficShaper.transmissionDelay(
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,shutdown,void  (){ if (isShutdown.compareAndSet(false true)) { acceptorThread.interrupt(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\AcceptorExecutor.java,workerTaskQueueSize,"@Monitor(name=METRIC_REPLICATION_PREFIX + ""availableJobs"" description=""Number of jobs ready to be taken by the workers"" type=DataSourceType.GAUGE) public long  (){ return singleItemWorkQueue.size() + batchWorkQueue.size(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,TaskHolder, (ID id T task long expiryTime){ this.id=id; this.expiryTime=expiryTime; this.task=task; this.submitTimestamp=System.currentTimeMillis(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,getExpiryTime,public long  (){ return expiryTime; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,getId,public ID  (){ return id; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,getSubmitTimestamp,public long  (){ return submitTimestamp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskHolder.java,getTask,public T  (){ return task; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,JerseyReplicationClient,public  (EurekaJerseyClient jerseyClient String serviceUrl){ super(jerseyClient.getClient() serviceUrl); this.jerseyClient=jerseyClient; this.jerseyApacheClient=jerseyClient.getClient(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,addExtraHeaders,"@Override protected void  (Builder webResource){ webResource.header(PeerEurekaNode.HEADER_REPLICATION ""true""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,createReplicationClient,"public static JerseyReplicationClient  (EurekaServerConfig config ServerCodecs serverCodecs String serviceUrl){ String name=JerseyReplicationClient.class.getSimpleName() + "": "" + serviceUrl+ ""apps/: ""; EurekaJerseyClient jerseyClient; try { String hostname; try { hostname=new URL(serviceUrl).getHost(); } catch ( MalformedURLException e) { hostname=serviceUrl; } String jerseyClientName=""Discovery-PeerNodeClient-"" + hostname; EurekaJerseyClientBuilder clientBuilder=new EurekaJerseyClientBuilder().withClientName(jerseyClientName).withUserAgent(""Java-EurekaClient-Replication"").withEncoderWrapper(serverCodecs.getFullJsonCodec()).withDecoderWrapper(serverCodecs.getFullJsonCodec()).withConnectionTimeout(config.getPeerNodeConnectTimeoutMs()).withReadTimeout(config.getPeerNodeReadTimeoutMs()).withMaxConnectionsPerHost(config.getPeerNodeTotalConnectionsPerHost()).withMaxTotalConnections(config.getPeerNodeTotalConnections()).withConnectionIdleTimeout(config.getPeerNodeConnectionIdleTimeoutSeconds()); if (serviceUrl.startsWith(""https://"") && ""true"".equals(System.getProperty(""com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory""))) { clientBuilder.withSystemSSLConfiguration(); } jerseyClient=clientBuilder.build(); } catch ( Throwable e) { throw new RuntimeException(""Cannot Create new Replica Node :"" + name e); } String ip=null; try { ip=InetAddress.getLocalHost().getHostAddress(); } catch ( UnknownHostException e) { logger.warn(""Cannot find localhost ip"" e); } ApacheHttpClient4 jerseyApacheClient=jerseyClient.getClient(); jerseyApacheClient.addFilter(new DynamicGZIPContentEncodingFilter(config)); EurekaServerIdentity identity=new EurekaServerIdentity(ip); jerseyApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity)); return new JerseyReplicationClient(jerseyClient serviceUrl); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,isSuccess,private static boolean  (int statusCode){ return statusCode >= 200 && statusCode < 300; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,sendHeartBeat,"@Override public EurekaHttpResponse<InstanceInfo>  (String appName String id InstanceInfo info InstanceStatus overriddenStatus){ String urlPath=""apps/"" + appName + '/'+ id; ClientResponse response=null; try { WebResource webResource=jerseyClient.getClient"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,shutdown,@Override public void  (){ super.shutdown(); jerseyClient.destroyResources(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,statusUpdate,"@Override public EurekaHttpResponse<Void>  (String asgName ASGStatus newStatus){ ClientResponse response=null; try { String urlPath=""asg/"" + asgName + ""/status""; response=jerseyApacheClient.resource(serviceUrl).path(urlPath).queryParam(""value"" newStatus.n"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\transport\JerseyReplicationClient.java,submitBatchUpdates,@Override public EurekaHttpResponse<ReplicationListResponse>  (ReplicationList replicationList){ ClientResponse response=null; try { response=jerseyApacheClient.resource(serviceUrl).path(PeerEurekaNode.BATCH_URL_PATH).accept(MediaType.APPLICATION_JSON_TYP
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java,TrafficShaper, (long congestionRetryDelayMs long networkFailureRetryMs){ this.congestionRetryDelayMs=Math.min(MAX_DELAY congestionRetryDelayMs); this.networkFailureRetryMs=Math.min(MAX_DELAY networkFailureRetryMs); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java,registerFailure,void  (ProcessingResult processingResult){ if (processingResult == ProcessingResult.Congestion) { lastCongestionError=System.currentTimeMillis(); } else if (processingResult == ProcessingResult.TransientError) { lastNetworkFailure=System.currentTimeMillis(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TrafficShaper.java,transmissionDelay,long  (){ if (lastCongestionError == -1 && lastNetworkFailure == -1) { return 0; } long now=System.currentTimeMillis(); if (lastCongestionError != -1) { long congestionDelay=now - lastCongestionError; if (congestionDelay >= 0 && congestionDelay < congestionRetryDelayMs) { return congestionRetryDelayMs - congestionDelay; } lastCongestionError=-1; } if (lastNetworkFailure != -1) { long failureDelay=now - lastNetworkFailure; if (failureDelay >= 0 && failureDelay < networkFailureRetryMs) { return networkFailureRetryMs - failureDelay; } lastNetworkFailure=-1; } return 0; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java,BatchWorkerRunnable, (String workerName AtomicBoolean isShutdown TaskExecutorMetrics metrics TaskProcessor<T> processor AcceptorExecutor<ID T> acceptorExecutor){ super(workerName isShutdown metrics processor acceptorExecutor); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java,SingleTaskWorkerRunnable, (String workerName AtomicBoolean isShutdown TaskExecutorMetrics metrics TaskProcessor<T> processor AcceptorExecutor<ID T> acceptorExecutor){ super(workerName isShutdown metrics processor acceptorExecutor); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java,TaskExecutorMetrics," (String id){ final double[] percentiles={50.0 95.0 99.0 99.5}; final StatsConfig statsConfig=new StatsConfig.Builder().withSampleSize(1000).withPercentiles(percentiles).withPublishStdDev(true).build(); final MonitorConfig config=MonitorConfig.builder(METRIC_REPLICATION_PREFIX + ""executionTime"").build(); taskWaitingTimeForProcessing=new StatsTimer(config statsConfig); try { Monitors.registerObject(id this); } catch ( Throwable e) { logger.warn(""Cannot register servo monitor for this object"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java,TaskExecutors," (WorkerRunnableFactory<ID T> workerRunnableFactory int workerCount AtomicBoolean isShutdown){ this.isShutdown=isShutdown; this.workerThreads=new ArrayList<>(); ThreadGroup threadGroup=new ThreadGroup(""eurekaTaskExecutors""); for (int i=0; i < workerCount; i++) { WorkerRunnable<ID T> runnable=workerRunnableFactory.create(i); Thread workerThread=new Thread(threadGroup runnable runnable.getWorkerName()); workerThreads.add(workerThread); workerThread.setDaemon(true); workerThread.start(); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java,WorkerRunnable, (String workerName AtomicBoolean isShutdown TaskExecutorMetrics metrics TaskProcessor<T> processor AcceptorExecutor<ID T> taskDispatcher){ this.workerName=workerName; this.isShutdown=isShutdown; this.metrics=metrics; this.processor=processor; this.taskDispatcher=taskDispatcher; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\batcher\TaskExecutors.java,batchExecutors,"static <ID T>TaskExecutors<ID T>  (final String name int workerCount final TaskProcessor<T> processor final AcceptorExecutor<ID T> acceptorExecutor){ final AtomicBoolean isShutdown=new AtomicBoolean(); final TaskExecutorMetrics metrics=new TaskExecutorMetrics(name); return new TaskExecutors<>(new WorkerRunnableFactory<ID T>(){ @Override public WorkerRunnable<ID T> create( int idx){ return new BatchWorkerRunnable<>(""TaskBatchingWorker-"" + name + '-'+ idx isShutdown metrics processor acceptorExecutor); } }  workerCount isShutdown); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,Builder,private  (){ result=new StatusInfo(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,add,public Builder  (String key String value){ if (result.applicationStats == null) { result.applicationStats=new HashMap<String String>(); } result.applicationStats.put(key value); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,build,"public StatusInfo  (){ if (result.instanceInfo == null) { throw new IllegalStateException(""instanceInfo can not be null""); } result.generalStats.put(""server-uptime"" getUpTime()); result.generalStats.put(""environment"" ConfigurationManager.getDeploymentContext().getDeploymentEnvironment()); Runtime runtime=Runtime.getRuntime(); int totalMem=(int)(runtime.totalMemory() / 1048576); int freeMem=(int)(runtime.freeMemory() / 1048576); int usedPercent=(int)(((float)totalMem - freeMem) / (totalMem) * 100.0); result.generalStats.put(""num-of-cpus"" String.valueOf(runtime.availableProcessors())); result.generalStats.put(""total-avail-memory"" String.valueOf(totalMem) + ""mb""); result.generalStats.put(""current-memory-usage"" String.valueOf(totalMem - freeMem) + ""mb"" + "" (""+ usedPercent+ ""%)""); return result; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,getApplicationStats,public Map<String String>  (){ return applicationStats; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,getCurrentTimeAsString,public static String  (){ SimpleDateFormat format=new SimpleDateFormat(DATE_FORMAT); return format.format(new Date()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,getGeneralStats,public Map<String String>  (){ return generalStats; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,getInstanceInfo,public InstanceInfo  (){ return instanceInfo; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,getUpTime,"public static String  (){ long diff=ManagementFactory.getRuntimeMXBean().getUptime(); diff/=1000 * 60; long minutes=diff % 60; diff/=60; long hours=diff % 24; diff/=24; long days=diff; StringBuilder buf=new StringBuilder(); if (days == 1) { buf.append(""1 day ""); } else if (days > 1) { buf.append(Long.valueOf(days).toString()).append("" days ""); } DecimalFormat format=new DecimalFormat(); format.setMinimumIntegerDigits(2); buf.append(format.format(hours)).append("":"").append(format.format(minutes)); return buf.toString(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,isHealthy,public boolean  (){ return isHeathly.booleanValue(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,newBuilder,public static Builder  (){ return new Builder(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusInfo.java,withInstanceInfo,public Builder  (InstanceInfo instanceInfo){ result.instanceInfo=instanceInfo; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,MeasuredRate,"public  (long sampleInterval){ this.sampleInterval=sampleInterval; this.timer=new Timer(""Eureka-MeasureRateTimer"" true); this.isActive=false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,getCount,public long  (){ return lastBucket.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,increment,public void  (){ currentBucket.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,run,"@Override public void  (){ try { lastBucket.set(currentBucket.getAndSet(0)); } catch ( Throwable e) { logger.error(""Cannot reset the Measured Rate"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,start,"public synchronized void  (){ if (!isActive) { timer.schedule(new TimerTask(){ @Override public void run(){ try { lastBucket.set(currentBucket.getAndSet(0)); } catch ( Throwable e) { logger.error(""Cannot reset the Measured Rate"" e); } } }  sampleInterval sampleInterval); isActive=true; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\MeasuredRate.java,stop,public synchronized void  (){ if (isActive) { timer.cancel(); isActive=false; } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,EurekaMonitors,"private  (String name String description){ this.name=name; this.description=description; DataCenterInfo dcInfo=ApplicationInfoManager.getInstance().getInfo().getDataCenterInfo(); if (dcInfo.getName() == Name.Amazon) { myZoneCounterName=((AmazonInfo)dcInfo).get(MetaDataKey.availabilityZone) + ""."" + name; } else { myZoneCounterName=""dcmaster."" + name; } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,getCount,public long  (){ return counter.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,getZoneSpecificCount,public long  (){ return myZoneCounter.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,getZoneSpecificName,public String  (){ return myZoneCounterName; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,increment,public void  (boolean isReplication){ counter.incrementAndGet(); if (!isReplication) { myZoneCounter.incrementAndGet(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,registerAllStats,public static void  (){ for ( EurekaMonitors c : EurekaMonitors.values()) { Monitors.registerObject(c.getName() c); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\EurekaMonitors.java,shutdown,public static void  (){ for ( EurekaMonitors c : EurekaMonitors.values()) { DefaultMonitorRegistry.getInstance().unregister(Monitors.newObjectMonitor(c.getName() c)); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,StatusUtil,public  (EurekaServerContext server){ this.myAppName=server.getApplicationInfoManager().getInfo().getAppName(); this.registry=server.getRegistry(); this.peerEurekaNodes=server.getPeerEurekaNodes(); this.instanceInfo=server.getApplicationInfoManager().getInfo(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,getStatusInfo,"public StatusInfo  (){ StatusInfo.Builder builder=StatusInfo.Builder.newBuilder(); int upReplicasCount=0; StringBuilder upReplicas=new StringBuilder(); StringBuilder downReplicas=new StringBuilder(); StringBuilder replicaHostNames=new StringBuilder(); for ( PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) { if (replicaHostNames.length() > 0) { replicaHostNames.append(""  ""); } replicaHostNames.append(node.getServiceUrl()); if (isReplicaAvailable(node.getServiceUrl())) { upReplicas.append(node.getServiceUrl()).append(' '); upReplicasCount++; } else { downReplicas.append(node.getServiceUrl()).append(' '); } } builder.add(""registered-replicas"" replicaHostNames.toString()); builder.add(""available-replicas"" upReplicas.toString()); builder.add(""unavailable-replicas"" downReplicas.toString()); if (peerEurekaNodes.getMinNumberOfAvailablePeers() > -1) { builder.isHealthy(upReplicasCount >= peerEurekaNodes.getMinNumberOfAvailablePeers()); } builder.withInstanceInfo(this.instanceInfo); return builder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\util\StatusUtil.java,isReplicaAvailable,"private boolean  (String url){ try { Application app=registry.getApplication(myAppName false); if (app == null) { return false; } for ( InstanceInfo info : app.getInstances()) { if (peerEurekaNodes.isInstanceURL(url info)) { return true; } } } catch ( Throwable e) { logger.error(""Could not determine if the replica is available "" e); } return false; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\Version.java,toEnum,public static Version  (String v){ for ( Version version : Version.values()) { if (version.name().equalsIgnoreCase(v)) { return version; } } return V2; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\main\java\com\netflix\eureka\V1AwareInstanceInfoConverter.java,getStatus,@Override public String  (InstanceInfo info){ Version version=CurrentRequestVersion.get(); if (version == null || version == Version.V1) { InstanceStatus status=info.getStatus(); switch (status) { case DOWN: case STARTING: case UP: break; default : status
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,TestPeerAwareInstanceRegistry,public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs EurekaClient eurekaClient){ super(serverConfig clientConfig serverCodecs eurekaClient); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,createLocalInstance,protected static InstanceInfo  (String hostname){ return createLocalInstanceWithStatus(hostname InstanceInfo.InstanceStatus.UP); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,createLocalInstanceWithStatus,"private static InstanceInfo  (String hostname InstanceInfo.InstanceStatus status){ InstanceInfo.Builder instanceBuilder=InstanceInfo.Builder.newBuilder(); instanceBuilder.setInstanceId(""foo""); instanceBuilder.setAppName(LOCAL_REGION_APP_NAME); instanceBuilder.setHostName(hostname); instanceBuilder.setIPAddr(""10.10.101.1""); instanceBuilder.setDataCenterInfo(getAmazonInfo(null hostname)); instanceBuilder.setLeaseInfo(LeaseInfo.Builder.newBuilder().build()); instanceBuilder.setStatus(status); return instanceBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,createLocalOutOfServiceInstance,protected static InstanceInfo  (String hostname){ return createLocalInstanceWithStatus(hostname InstanceInfo.InstanceStatus.OUT_OF_SERVICE); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,createLocalStartingInstance,protected static InstanceInfo  (String hostname){ return createLocalInstanceWithStatus(hostname InstanceInfo.InstanceStatus.STARTING); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,createRemoteApps,private static Application  (){ Application myapp=new Application(REMOTE_REGION_APP_NAME); InstanceInfo instanceInfo=createRemoteInstance(REMOTE_REGION_INSTANCE_1_HOSTNAME); myapp.addInstance(instanceInfo); return myapp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,createRemoteAppsDelta,private static Application  (){ Application myapp=new Application(REMOTE_REGION_APP_NAME); InstanceInfo instanceInfo=createRemoteInstance(REMOTE_REGION_INSTANCE_1_HOSTNAME); myapp.addInstance(instanceInfo); return myapp; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,createRemoteInstance,"protected static InstanceInfo  (String instanceHostName){ InstanceInfo.Builder instanceBuilder=InstanceInfo.Builder.newBuilder(); instanceBuilder.setAppName(REMOTE_REGION_APP_NAME); instanceBuilder.setHostName(instanceHostName); instanceBuilder.setIPAddr(""10.10.101.1""); instanceBuilder.setDataCenterInfo(getAmazonInfo(REMOTE_ZONE instanceHostName)); instanceBuilder.setLeaseInfo(LeaseInfo.Builder.newBuilder().build()); return instanceBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,getAmazonInfo,"private static AmazonInfo  (@Nullable String availabilityZone String instanceHostName){ AmazonInfo.Builder azBuilder=AmazonInfo.Builder.newBuilder(); azBuilder.addMetadata(AmazonInfo.MetaDataKey.availabilityZone null == availabilityZone ? ""us-east-1a"" : availabilityZone); azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceId instanceHostName); azBuilder.addMetadata(AmazonInfo.MetaDataKey.amiId ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceType ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.localIpv4 ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicIpv4 ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicHostname instanceHostName); return azBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,getDataCenterInfo,protected DataCenterInfo  (){ return new DataCenterInfo(){ @Override public Name getName(){ return Name.MyOwn; } } ; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,getNextServerFromEureka,@Override public InstanceInfo  (String virtualHostname boolean secure){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,isLeaseExpirationEnabled,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,makePeerAwareInstanceRegistry,protected PeerAwareInstanceRegistryImpl  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs EurekaClient eurekaClient){ return new TestPeerAwareInstanceRegistry(serverConfig clientConfig serverCodecs eurekaClient); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,newMockRemoteServer,protected MockRemoteEurekaServer  (){ return new MockRemoteEurekaServer(0 remoteRegionApps remoteRegionAppsDelta); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,populateRemoteRegistryAtStartup,private void  (){ Application myapp=createRemoteApps(); Application myappDelta=createRemoteAppsDelta(); remoteRegionApps.put(REMOTE_REGION_APP_NAME myapp); remoteRegionAppsDelta.put(REMOTE_REGION_APP_NAME myappDelta); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,registerInstanceLocally,protected void  (InstanceInfo remoteInstance){ registry.register(remoteInstance 10000000 false); registeredApps.add(new Pair<String String>(LOCAL_REGION_APP_NAME LOCAL_REGION_APP_NAME)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,setUp,"@Before public void  () throws Exception { ConfigurationManager.getConfigInstance().clearProperty(""eureka.remoteRegion.global.appWhiteList""); ConfigurationManager.getConfigInstance().setProperty(""eureka.responseCacheAutoExpirationInSeconds"" ""10""); Configu"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,tearDown,"@After public void  () throws Exception { for ( Pair<String String> registeredApp : registeredApps) { System.out.println(""Canceling application: "" + registeredApp.first() + "" from local registry.""); registry.cancel(registeredApp.first() registeredApp.seco"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\AbstractTester.java,verifyLocalInstanceStatus,"protected void  (String id InstanceInfo.InstanceStatus status){ InstanceInfo instanceInfo=registry.getApplication(LOCAL_REGION_APP_NAME).getByInstanceId(id); assertThat(""InstanceInfo with id "" + id + "" not found"" instanceInfo is(notNullValue())); assertThat(""Invalid InstanceInfo state"" instanceInfo.getStatus() is(equalTo(status))); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,setUp,"@Before public void  () throws Exception { replicationClient=JerseyReplicationClient.createReplicationClient(config serverCodecs ""http://localhost:"" + serverMockRule.getHttpPort() + ""/eureka/v2""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,tearDown,@After public void  (){ if (serverMockClient != null) { serverMockClient.reset(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,testAsgStatusUpdateReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""PUT"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/asg/"" + instanceInfo.getASGName() + ""/status"")).respond(response().withStatusCode("
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,testCancelReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""DELETE"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName() + '/'+ instanceInfo.getId())).respond(respon"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,testDeleteStatusOverrideReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""DELETE"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName() + '/'+ instanceInfo.getId()+ ""/status"")).res"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,testHeartbeatReplicationWithNoResponseBody,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""PUT"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName() + '/'+ instanceInfo.getId())).respond(response("
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,testHeartbeatReplicationWithResponseBody,"@Test public void  () throws Exception { InstanceInfo remoteInfo=new InstanceInfo(this.instanceInfo); remoteInfo.setStatus(InstanceStatus.DOWN); byte[] responseBody=toGzippedJson(remoteInfo); serverMockClient.when(request().withMethod(""PUT"").withHeader(he"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,testRegistrationReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""POST"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName())).respond(response().withStatusCode(200)); Eur"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,testStatusUpdateReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""PUT"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName() + '/'+ instanceInfo.getId()+ ""/status"")).respon"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\JerseyReplicationClientTest.java,toGzippedJson,private static byte[]  (InstanceInfo remoteInfo) throws IOException { ByteArrayOutputStream bos=new ByteArrayOutputStream(); GZIPOutputStream gos=new GZIPOutputStream(bos); EurekaJacksonCodec.getInstance().writeTo(remoteInfo gos); gos.flush(); return bos.toByteArray(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,TestablePeerEurekaNodes, (PeerAwareInstanceRegistry registry EurekaServerConfig serverConfig){ super(registry serverConfig new DefaultEurekaClientConfig() new DefaultServerCodecs(serverConfig) mock(ApplicationInfoManager.class)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,awaitNextReload,boolean  (long timeout TimeUnit timeUnit) throws InterruptedException { int lastReloadCounter=reloadCounter.get(); long endTime=System.currentTimeMillis() + timeUnit.toMillis(timeout); while (endTime > System.currentTimeMillis() && lastReloadCounter == reloadCounter.get()) { Thread.sleep(10); } return lastReloadCounter != reloadCounter.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,createPeerEurekaNode,"@Override protected PeerEurekaNode  (String peerEurekaNodeUrl){ if (peerEurekaNodeByUrl.containsKey(peerEurekaNodeUrl)) { throw new IllegalStateException(""PeerEurekaNode for URL "" + peerEurekaNodeUrl + "" is already created""); } PeerEurekaNode peerEurekaNo"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,getPeerNode,private PeerEurekaNode  (String peerEurekaUrl){ for ( PeerEurekaNode node : peerEurekaNodes.getPeerEurekaNodes()) { if (node.getServiceUrl().equals(peerEurekaUrl)) { return node; } } return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,resolvePeerUrls,@Override protected List<String>  (){ return peerUrlsRef.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,testInitialStartupShutdown,@Test public void  () throws Exception { peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_A); peerEurekaNodes.start(); PeerEurekaNode peerNode=getPeerNode(PEER_EUREKA_URL_A); assertThat(peerNode is(notNullValue())); peerEurekaNodes.shutdown(); verify(peerNode
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,testReloadWithNoPeerChange,@Test public void  () throws Exception { peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_A); peerEurekaNodes.start(); PeerEurekaNode peerNode=getPeerNode(PEER_EUREKA_URL_A); assertThat(peerEurekaNodes.awaitNextReload(60 TimeUnit.SECONDS) is(true)); assertTha
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,testReloadWithPeerUpdates,@Test public void  () throws Exception { peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_A); peerEurekaNodes.start(); PeerEurekaNode peerNodeA=getPeerNode(PEER_EUREKA_URL_A); peerEurekaNodes.withPeerUrls(PEER_EUREKA_URL_A PEER_EUREKA_URL_B); assertThat(peerE
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,updatePeerEurekaNodes,@Override protected void  (List<String> newPeerUrls){ super.updatePeerEurekaNodes(newPeerUrls); reloadCounter.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodesTest.java,withPeerUrls,void  (String... peerUrls){ this.peerUrlsRef.set(Arrays.asList(peerUrls)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,testReplicationInstanceEncoding,@Test public void  () throws Exception { ReplicationInstance replicationInstance=ClusterSampleData.newReplicationInstance(); String jsonText=jacksonCodec.writeToString(replicationInstance); ReplicationInstance decodedValue=jacksonCodec.readValue(Replicati
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,testReplicationInstanceResponseEncoding,@Test public void  () throws Exception { ReplicationInstanceResponse replicationInstanceResponse=ClusterSampleData.newReplicationInstanceResponse(true); String jsonText=jacksonCodec.writeToString(replicationInstanceResponse); ReplicationInstanceResponse d
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,testReplicationListEncoding,@Test public void  () throws Exception { ReplicationList replicationList=new ReplicationList(); replicationList.addReplicationInstance(ClusterSampleData.newReplicationInstance()); String jsonText=jacksonCodec.writeToString(replicationList); ReplicationLis
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\protocol\JacksonEncodingTest.java,testReplicationListResponseEncoding,@Test public void  () throws Exception { ReplicationListResponse replicationListResponse=new ReplicationListResponse(); replicationListResponse.addResponse(ClusterSampleData.newReplicationInstanceResponse(false)); String jsonText=jacksonCodec.writeToStrin
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,createPeerEurekaNode,"private PeerEurekaNode  (){ EurekaServerConfig config=ClusterSampleData.newEurekaServerConfig(); peerEurekaNode=new PeerEurekaNode(registry ""test"" ""http://test.host.com"" httpReplicationClient config BATCH_SIZE MAX_BATCHING_DELAY_MS ClusterSampleData.RETRY_SLEEP_TIME_MS ClusterSampleData.SERVER_UNAVAILABLE_SLEEP_TIME_MS); return peerEurekaNode; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expectRequestType,private Object  (RequestType requestType) throws InterruptedException { HandledRequest handledRequest=httpReplicationClient.nextHandledRequest(60 TimeUnit.SECONDS); assertThat(handledRequest is(notNullValue())); assertThat(handledRequest.getRequestType() is(equalTo(requestType))); return handledRequest.getData(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,expectSingleBatchRequest,private ReplicationInstance  () throws InterruptedException { HandledRequest handledRequest=httpReplicationClient.nextHandledRequest(30 TimeUnit.SECONDS); assertThat(handledRequest is(notNullValue())); assertThat(handledRequest.getRequestType() is(equalTo(RequestType.Batch))); Object data=handledRequest.getData(); assertThat(data is(instanceOf(ReplicationList.class))); List<ReplicationInstance> replications=((ReplicationList)data).getReplicationList(); assertThat(replications.size() is(equalTo(1))); return replications.get(0); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,setUp,@Before public void  () throws Exception { httpReplicationClient.withNetworkStatusCode(200); httpReplicationClient.withBatchReply(200); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,tearDown,@After public void  () throws Exception { if (peerEurekaNode != null) { peerEurekaNode.shutDown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,testAsgStatusUpdate,@Test public void  () throws Throwable { createPeerEurekaNode().statusUpdate(instanceInfo.getASGName() ASGStatus.DISABLED); Object newAsgStatus=expectRequestType(RequestType.AsgStatusUpdate); assertThat(newAsgStatus is(equalTo((Object)ASGStatus.DISABLED))
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,testCancelBatchReplication,@Test public void  () throws Exception { createPeerEurekaNode().cancel(instanceInfo.getAppName() instanceInfo.getId()); ReplicationInstance replicationInstance=expectSingleBatchRequest(); assertThat(replicationInstance.getAction() is(equalTo(Action.Cancel
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,testDeleteStatusOverrideBatchReplication,@Test public void  () throws Throwable { createPeerEurekaNode().deleteStatusOverride(instanceInfo.getAppName() instanceInfo.getId() instanceInfo); ReplicationInstance replicationInstance=expectSingleBatchRequest(); assertThat(replicationInstance.getAction
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,testHeartbeatBatchReplication,@Test public void  () throws Throwable { createPeerEurekaNode().heartbeat(instanceInfo.getAppName() instanceInfo.getId() instanceInfo null false); ReplicationInstance replicationInstance=expectSingleBatchRequest(); assertThat(replicationInstance.getAction
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,testHeartbeatReplicationFailure,@Test public void  () throws Throwable { httpReplicationClient.withNetworkStatusCode(200 200); httpReplicationClient.withBatchReply(404); createPeerEurekaNode().heartbeat(instanceInfo.getAppName() instanceInfo.getId() instanceInfo null false); Replication
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,testHeartbeatWithInstanceInfoFromPeer,@Test public void  () throws Throwable { InstanceInfo instanceInfoFromPeer=ClusterSampleData.newInstanceInfo(2); httpReplicationClient.withNetworkStatusCode(200); httpReplicationClient.withBatchReply(400); httpReplicationClient.withInstanceInfo(instanceIn
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,testRegistrationBatchReplication,@Test public void  () throws Exception { createPeerEurekaNode().register(instanceInfo); ReplicationInstance replicationInstance=expectSingleBatchRequest(); assertThat(replicationInstance.getAction() is(equalTo(Action.Register))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\PeerEurekaNodeTest.java,testStatusUpdateBatchReplication,@Test public void  () throws Throwable { createPeerEurekaNode().statusUpdate(instanceInfo.getAppName() instanceInfo.getId() InstanceStatus.DOWN instanceInfo); ReplicationInstance replicationInstance=expectSingleBatchRequest(); assertThat(replicationInstan
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,TestableInstanceReplicationTask, (String peerNodeName String appName String id Action action int replyStatusCode int networkFailuresRepeatCount){ super(peerNodeName action appName id); this.replyStatusCode=replyStatusCode; this.networkFailuresRepeatCount=networkFailuresRepeatCount; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,aReplicationTask,public static TestableReplicationTaskBuilder  (){ return new TestableReplicationTaskBuilder(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,build,"public TestableInstanceReplicationTask  (){ return new TestableInstanceReplicationTask(""peerNodeName#test"" APP_NAME ""id#"" + autoId++ action replyStatusCode networkFailuresRepeatCount); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,execute,"@Override public EurekaHttpResponse<Void>  () throws Throwable { if (triggeredNetworkFailures < networkFailuresRepeatCount) { triggeredNetworkFailures++; throw new IOException(""simulated network failure""); } return EurekaHttpResponse.status(replyStatusCod"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,getProcessingState,public ProcessingState  (){ return processingState.get(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,handleFailure,@Override public void  (int statusCode Object responseEntity) throws Throwable { processingState.compareAndSet(ProcessingState.Pending ProcessingState.Failed); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,handleSuccess,@Override public void  (){ processingState.compareAndSet(ProcessingState.Pending ProcessingState.Finished); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,withAction,public TestableReplicationTaskBuilder  (Action action){ this.action=action; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,withNetworkFailures,public TestableReplicationTaskBuilder  (int networkFailuresRepeatCount){ this.networkFailuresRepeatCount=networkFailuresRepeatCount; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableInstanceReplicationTask.java,withReplyStatusCode,public TestableReplicationTaskBuilder  (int replyStatusCode){ this.replyStatusCode=replyStatusCode; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,testGetGlobalAppWhiteList,"@Test public void  () throws Exception { String whitelistApp=""myapp""; ConfigurationManager.getConfigInstance().setProperty(""eureka.remoteRegion.global.appWhiteList"" whitelistApp); DefaultEurekaServerConfig config=new DefaultEurekaServerConfig(); Set<Strin"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,testGetRegionAppWhiteList,"@Test public void  () throws Exception { String globalWhiteListApp=""myapp""; String regionWhiteListApp=""myapp""; ConfigurationManager.getConfigInstance().setProperty(""eureka.remoteRegion.global.appWhiteList"" globalWhiteListApp); ConfigurationManager.getConf"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,testRemoteRegionUrlsWithName1Region,"@Test public void  () throws Exception { String region1=""myregion1""; String region1url=""http://local:888/eee""; ConfigurationManager.getConfigInstance().setProperty(""eureka.remoteRegionUrlsWithName"" region1 + ';' + region1url); DefaultEurekaServerConfig co"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\DefaultEurekaServerConfigTest.java,testRemoteRegionUrlsWithName2Regions,"@Test public void  () throws Exception { String region1=""myregion1""; String region1url=""http://local:888/eee""; String region2=""myregion2""; String region2url=""http://local:888/eee""; ConfigurationManager.getConfigInstance().setProperty(""eureka.remoteRegionU"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,setUp,"@Before public void  () throws Exception { replicationTaskProcessor=new ReplicationTaskProcessor(""peerId#test"" replicationClient); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testBatchableTaskCongestionFailureHandling,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().build(); replicationClient.withNetworkStatusCode(503); ProcessingResult status=replicationTaskProcessor.process(Collections.<ReplicationTask>singletonList(tas
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testBatchableTaskListExecution,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().build(); replicationClient.withBatchReply(200); replicationClient.withNetworkStatusCode(200); ProcessingResult status=replicationTaskProcessor.process(Collect
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testBatchableTaskNetworkFailureHandling,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().build(); replicationClient.withNetworkError(1); ProcessingResult status=replicationTaskProcessor.process(Collections.<ReplicationTask>singletonList(task)); as
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testBatchableTaskNetworkReadTimeOutHandling,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().build(); replicationClient.withReadtimeOut(1); ProcessingResult status=replicationTaskProcessor.process(Collections.<ReplicationTask>singletonList(task)); ass
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testBatchableTaskPermanentFailureHandling,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().build(); InstanceInfo instanceInfoFromPeer=InstanceInfoGenerator.takeOne(); replicationClient.withNetworkStatusCode(200); replicationClient.withBatchReply(400
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testNonBatchableTaskCongestionFailureHandling,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().withAction(Action.Heartbeat).withReplyStatusCode(503).build(); ProcessingResult status=replicationTaskProcessor.process(task); assertThat(status is(Processing
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testNonBatchableTaskExecution,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().withAction(Action.Heartbeat).withReplyStatusCode(200).build(); ProcessingResult status=replicationTaskProcessor.process(task); assertThat(status is(Processing
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testNonBatchableTaskNetworkFailureHandling,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().withAction(Action.Heartbeat).withNetworkFailures(1).build(); ProcessingResult status=replicationTaskProcessor.process(task); assertThat(status is(ProcessingRe
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\ReplicationTaskProcessorTest.java,testNonBatchableTaskPermanentFailureHandling,@Test public void  () throws Exception { TestableInstanceReplicationTask task=aReplicationTask().withAction(Action.Heartbeat).withReplyStatusCode(406).build(); ProcessingResult status=replicationTaskProcessor.process(task); assertThat(status is(Processing
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,HandledRequest,public  (RequestType requestType Object data){ this.requestType=requestType; this.data=data; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,cancel,@Override public EurekaHttpResponse<Void>  (String appName String id){ handledRequests.add(new HandledRequest(RequestType.Cancel id)); return EurekaHttpResponse.status(networkStatusCodes[callCounter.getAndIncrement()]); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,deleteStatusOverride,@Override public EurekaHttpResponse<Void>  (String appName String id InstanceInfo info){ handledRequests.add(new HandledRequest(RequestType.DeleteStatusOverride null)); return EurekaHttpResponse.status(networkStatusCodes[callCounter.getAndIncrement()]); }
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,getApplication,"@Override public EurekaHttpResponse<Application>  (String appName){ throw new IllegalStateException(""method not supported""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,getApplications,"@Override public EurekaHttpResponse<Applications>  (String... regions){ throw new IllegalStateException(""method not supported""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,getData,public Object  (){ return data; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,getDelta,"@Override public EurekaHttpResponse<Applications>  (String... regions){ throw new IllegalStateException(""method not supported""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,getInstance,"@Override public EurekaHttpResponse<InstanceInfo>  (String appName String id){ throw new IllegalStateException(""method not supported""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,getRequestType,public RequestType  (){ return requestType; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,getSecureVip,"@Override public EurekaHttpResponse<Applications>  (String secureVipAddress String... regions){ throw new IllegalStateException(""method not supported""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,getVip,"@Override public EurekaHttpResponse<Applications>  (String vipAddress String... regions){ throw new IllegalStateException(""method not supported""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,nextHandledRequest,public HandledRequest  (long timeout TimeUnit timeUnit) throws InterruptedException { return handledRequests.poll(timeout timeUnit); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,register,@Override public EurekaHttpResponse<Void>  (InstanceInfo info){ handledRequests.add(new HandledRequest(RequestType.Register info)); return EurekaHttpResponse.status(networkStatusCodes[callCounter.getAndIncrement()]); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,sendHeartBeat,@Override public EurekaHttpResponse<InstanceInfo>  (String appName String id InstanceInfo info InstanceStatus overriddenStatus){ handledRequests.add(new HandledRequest(RequestType.Heartbeat instanceInfoFromPeer)); int statusCode=networkStatusCodes[callCou
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,statusUpdate,@Override public EurekaHttpResponse<Void>  (String appName String id InstanceStatus newStatus InstanceInfo info){ handledRequests.add(new HandledRequest(RequestType.StatusUpdate newStatus)); return EurekaHttpResponse.status(networkStatusCodes[callCounter.
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,submitBatchUpdates,"@Override public EurekaHttpResponse<ReplicationListResponse>  (ReplicationList replicationList){ if (readTimeOutCounter.get() < readtimeOutRepeatCount) { readTimeOutCounter.incrementAndGet(); throw new RuntimeException(new SocketTimeoutException(""Read tim"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,withBatchReply,public void  (int batchStatusCode){ this.batchStatusCode=batchStatusCode; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,withInstanceInfo,public void  (InstanceInfo instanceInfoFromPeer){ this.instanceInfoFromPeer=instanceInfoFromPeer; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,withNetworkError,public void  (int networkFailuresRepeatCount){ this.networkFailuresRepeatCount=networkFailuresRepeatCount; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,withNetworkStatusCode,public void  (int... networkStatusCodes){ this.networkStatusCodes=networkStatusCodes; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,withProcessingDelay,public void  (long processingDelay TimeUnit timeUnit){ this.processingDelayMs=timeUnit.toMillis(processingDelay); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\cluster\TestableHttpReplicationClient.java,withReadtimeOut,public void  (int readtimeOutRepeatCount){ this.readtimeOutRepeatCount=readtimeOutRepeatCount; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,setUp,"@Before public void  () throws Exception { RateLimitingFilter.reset(); ConfigurationManager.getConfigInstance().setProperty(""eureka.rateLimiter.privilegedClients"" PYTHON_CLIENT); ConfigurationManager.getConfigInstance().setProperty(""eureka.rateLimiter.ena"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,testCustomClientShedding,@Test public void  () throws Exception { whenRequest(FULL_FETCH CUSTOM_CLIENT); filter.doFilter(request response filterChain); filter.doFilter(request response filterChain); verify(filterChain times(2)).doFilter(request response); long rateLimiterCounter=
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,testCustomClientThrottlingCandidatesCounter,"@Test public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.rateLimiter.enabled"" false); whenRequest(FULL_FETCH CUSTOM_CLIENT); filter.doFilter(request response filterChain); filter.doFilter(request response filte"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,testPrivilegedClientAlwaysServed,@Test public void  () throws Exception { whenRequest(FULL_FETCH PYTHON_CLIENT); filter.doFilter(request response filterChain); whenRequest(DELTA_FETCH EurekaClientIdentity.DEFAULT_CLIENT_NAME); filter.doFilter(request response filterChain); whenRequest(AP
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,testStandardClientsThrottlingEnforceable,"@Test public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.rateLimiter.throttleStandardClients"" true); whenRequest(FULL_FETCH EurekaClientIdentity.DEFAULT_CLIENT_NAME); filter.doFilter(request response filterChai"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RateLimitingFilterTest.java,whenRequest,"private void  (String path String client){ when(request.getMethod()).thenReturn(""GET""); when(request.getRequestURI()).thenReturn(path); when(request.getHeader(AbstractEurekaIdentity.AUTH_NAME_HEADER_KEY)).thenReturn(client); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,MockRemoteEurekaServer,"public  (int port Map<String Application> applicationMap Map<String Application> applicationDeltaMap){ this.applicationMap=applicationMap; this.applicationDeltaMap=applicationDeltaMap; ServletHandler handler=new AppsResourceHandler(); EurekaServerConfig serverConfig=new DefaultEurekaServerConfig(); EurekaServerContext serverContext=mock(EurekaServerContext.class); when(serverContext.getServerConfig()).thenReturn(serverConfig); handler.addFilterWithMapping(ServerRequestAuthFilter.class ""/*"" 1).setFilter(new ServerRequestAuthFilter(serverContext)); handler.addFilterWithMapping(RateLimitingFilter.class ""/*"" 1).setFilter(new RateLimitingFilter(serverContext)); server=new Server(port); server.addHandler(handler); System.out.println(String.format(""Created eureka server mock with applications map %s and applications delta map %s"" stringifyAppMap(applicationMap) stringifyAppMap(applicationDeltaMap))); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,after,@Override protected void  (){ try { stop(); } catch ( Exception e) { Assert.fail(e.getMessage()); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,before,@Override protected void  () throws Throwable { start(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,getPort,public int  (){ return port; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,handle,@Override public void  (String target HttpServletRequest request HttpServletResponse response int dispatch) throws IOException  ServletException { if (simulateNotReady) { response.setStatus(HttpServletResponse.SC_FORBIDDEN); return; } String authName=requ
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,isSentDelta,public boolean  (){ return sentDelta; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,sendOkResponseWithContent,"private void  (Request request HttpServletResponse response String content) throws IOException { response.setContentType(""application/json; charset=UTF-8""); response.setStatus(HttpServletResponse.SC_OK); response.getOutputStream().write(content.getBytes(""UTF-8"")); response.getOutputStream().flush(); request.setHandled(true); System.out.println(""Eureka resource mock  sent response for request path: "" + request.getPathInfo() + "" with content""+ content); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,simulateNotReady,public void  (boolean simulateNotReady){ this.simulateNotReady=simulateNotReady; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,start,public void  () throws Exception { server.start(); port=server.getConnectors()[0].getLocalPort(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,stop,public void  () throws Exception { server.stop(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,stringifyAppMap,"private static String  (Map<String Application> applicationMap){ StringBuilder builder=new StringBuilder(); for ( Map.Entry<String Application> entry : applicationMap.entrySet()) { String entryAsString=String.format(""{ name : %s   instance count: %d }"" entry.getKey() entry.getValue().getInstances().size()); builder.append(entryAsString); } return builder.toString(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\mock\MockRemoteEurekaServer.java,toJson,private String  (Applications apps) throws IOException { return new EurekaJsonJacksonCodec().getObjectMapper(Applications.class).writeValueAsString(apps); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,TestAwsInstanceRegistry,public  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs EurekaClient eurekaClient){ super(serverConfig clientConfig serverCodecs eurekaClient); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,createLocalUpInstanceWithAsg,"private static InstanceInfo  (String hostname){ InstanceInfo.Builder instanceBuilder=InstanceInfo.Builder.newBuilder(); instanceBuilder.setAppName(LOCAL_REGION_APP_NAME); instanceBuilder.setHostName(hostname); instanceBuilder.setIPAddr(""10.10.101.1""); instanceBuilder.setDataCenterInfo(getAmazonInfo(hostname)); instanceBuilder.setLeaseInfo(LeaseInfo.Builder.newBuilder().build()); instanceBuilder.setStatus(InstanceStatus.UP); instanceBuilder.setASGName(""ASG-YO-HO""); return instanceBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,getAmazonInfo,"private static AmazonInfo  (String instanceHostName){ AmazonInfo.Builder azBuilder=AmazonInfo.Builder.newBuilder(); azBuilder.addMetadata(AmazonInfo.MetaDataKey.availabilityZone ""us-east-1a""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceId instanceHostName); azBuilder.addMetadata(AmazonInfo.MetaDataKey.amiId ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.instanceType ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.localIpv4 ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicIpv4 ""XXX""); azBuilder.addMetadata(AmazonInfo.MetaDataKey.publicHostname instanceHostName); return azBuilder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,getDataCenterInfo,@Override protected DataCenterInfo  (){ return getAmazonInfo(LOCAL_REGION_INSTANCE_1_HOSTNAME); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,getNextServerFromEureka,@Override public InstanceInfo  (String virtualHostname boolean secure){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,isLeaseExpirationEnabled,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,makePeerAwareInstanceRegistry,@Override protected PeerAwareInstanceRegistryImpl  (EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs EurekaClient eurekaClient){ return new TestAwsInstanceRegistry(serverConfig clientConfig serverCodecs eurekaClien
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\AwsInstanceRegistryTest.java,testOverridesWithAsgEnabledThenDisabled,@Test public void  (){ InstanceInfo myInstance=createLocalUpInstanceWithAsg(LOCAL_REGION_INSTANCE_1_HOSTNAME); registerInstanceLocally(myInstance); verifyLocalInstanceStatus(myInstance.getId() InstanceStatus.UP); ((AwsInstanceRegistry)registry).getAwsAsgU
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testAppsHashCodeAfterRefresh,"@Test public void  () throws InterruptedException { Assert.assertEquals(""UP_1_"" registry.getApplicationsFromAllRemoteRegions().getAppsHashCode()); registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_2_HOSTNAME)); waitForDeltaToBeRetrieved();"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testEvictionTaskCompensationTime,@Test public void  () throws Exception { long evictionTaskPeriodNanos=serverConfig.getEvictionIntervalTimerInMs() * 1000000; AbstractInstanceRegistry.EvictionTask testTask=spy(registry.new EvictionTask()); when(testTask.getCurrentTimeNano()).thenReturn(1l
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testGetAppsDeltaFromAllRemoteRegions,@Test public void  () throws Exception { registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_2_HOSTNAME)); waitForDeltaToBeRetrieved(); Applications appDelta=registry.getApplicationDeltasFromMultipleRegions(null); List<Application> registere
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testGetAppsFromAllRemoteRegions,"@Test public void  () throws Exception { Applications apps=registry.getApplicationsFromAllRemoteRegions(); List<Application> registeredApplications=apps.getRegisteredApplications(); Assert.assertEquals(""Apps size from remote regions do not match"" 1 regist"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testGetAppsFromBothRegions,@Test public void  () throws Exception { registerInstanceLocally(createRemoteInstance(LOCAL_REGION_INSTANCE_2_HOSTNAME)); registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME)); Applications apps=registry.getApplicationsFromAllRemo
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testGetAppsFromLocalRegionOnly,@Test public void  () throws Exception { registerInstanceLocally(createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME)); Applications apps=registry.getApplicationsFromLocalRegionOnly(); List<Application> registeredApplications=apps.getRegisteredApplicatio
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testSoftDepRemoteUp,"@Test public void  () throws Exception { Assert.assertTrue(""Registry access disallowed when remote region is UP."" registry.shouldAllowAccess(false)); Assert.assertTrue(""Registry access disallowed when remote region is UP."" registry.shouldAllowAccess(true)"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testStatusOverrideSetAndRemoval,@Test public void  () throws Exception { InstanceInfo seed=createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME); seed.setLastDirtyTimestamp(100l); InstanceInfo myInstance1=new InstanceInfo(seed); registerInstanceLocally(myInstance1); verifyLocalInstanceS
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testStatusOverrideStartingStatus,@Test public void  () throws Exception { InstanceInfo myInstance=createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME); registerInstanceLocally(myInstance); verifyLocalInstanceStatus(myInstance.getId() InstanceStatus.UP); boolean statusResult=registry.sta
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testStatusOverrideWithExistingLeaseOutOfService,@Test public void  () throws Exception { InstanceInfo myInstance=createLocalOutOfServiceInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME); registerInstanceLocally(myInstance); verifyLocalInstanceStatus(myInstance.getId() InstanceStatus.OUT_OF_SERVICE); InstanceI
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testStatusOverrideWithExistingLeaseUp,@Test public void  () throws Exception { InstanceInfo myInstance=createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME); registerInstanceLocally(myInstance); verifyLocalInstanceStatus(myInstance.getId() InstanceStatus.UP); InstanceInfo sameInstance=createL
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,testStatusOverrideWithRenewAppliedToAReplica,@Test public void  () throws Exception { InstanceInfo seed=createLocalInstance(LOCAL_REGION_INSTANCE_1_HOSTNAME); seed.setLastDirtyTimestamp(100l); InstanceInfo myInstance1=new InstanceInfo(seed); registerInstanceLocally(myInstance1); verifyLocalInstanceS
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\InstanceRegistryTest.java,waitForDeltaToBeRetrieved,"private void  () throws InterruptedException { int count=0; System.out.println(""Sleeping up to 35 seconds to let the remote registry fetch delta.""); while (count++ < 35 && !mockRemoteEurekaServer.isSentDelta()) { Thread.sleep(1000); } if (!mockRemoteEurekaServer.isSentDelta()) { System.out.println(""Waited for 35 seconds but remote server did not send delta""); } Thread.sleep(2000); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,setUp,@Override @Before public void  () throws Exception { super.setUp(); EurekaServerConfig serverConfig=spy(new DefaultEurekaServerConfig()); doReturn(true).when(serverConfig).disableTransparentFallbackToOtherRegion(); testRegistry=new PeerAwareInstanceRegist
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,testInvalidate,@Test public void  () throws Exception { ResponseCacheImpl cache=(ResponseCacheImpl)testRegistry.getResponseCache(); Key key=new Key(Key.EntityType.Application REMOTE_REGION_APP_NAME Key.KeyType.JSON Version.V1 EurekaAccept.full); String response=cache.ge
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,testInvalidateWithMultipleRemoteRegions,@Test public void  () throws Exception { ResponseCacheImpl cache=(ResponseCacheImpl)testRegistry.getResponseCache(); Key key1=new Key(Key.EntityType.Application REMOTE_REGION_APP_NAME Key.KeyType.JSON Version.V1 EurekaAccept.full new String[]{REMOTE_REGIO
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\registry\ResponseCacheTest.java,testInvalidateWithRemoteRegion,@Test public void  () throws Exception { ResponseCacheImpl cache=(ResponseCacheImpl)testRegistry.getResponseCache(); Key key=new Key(Key.EntityType.Application REMOTE_REGION_APP_NAME Key.KeyType.JSON Version.V1 EurekaAccept.full new String[]{REMOTE_REGION
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,newMockRemoteServer,@Override protected MockRemoteEurekaServer  (){ MockRemoteEurekaServer server=super.newMockRemoteServer(); server.simulateNotReady(true); return server; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,setUp,@Override @Before public void  () throws Exception { super.setUp(); doReturn(10).when(serverConfig).getWaitTimeInMsWhenSyncEmpty(); doReturn(1).when(serverConfig).getRegistrySyncRetries(); doReturn(1l).when(serverConfig).getRegistrySyncRetryWaitMs(); regi
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\RemoteRegionSoftDependencyTest.java,testSoftDepRemoteDown,"@Test public void  () throws Exception { Assert.assertTrue(""Registry access disallowed when remote region is down."" registry.shouldAllowAccess(false)); Assert.assertFalse(""Registry access allowed when remote region is down."" registry.shouldAllowAccess(tru"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,getVipResponse,@Override protected Response  (String version String entityName String acceptHeader EurekaAccept eurekaAccept Key.EntityType entityType){ return super.getVipResponse(version entityName acceptHeader eurekaAccept entityType); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,setUp,@Override @Before public void  () throws Exception { super.setUp(); InstanceInfoGenerator instanceInfos=InstanceInfoGenerator.newBuilder(6 1).build(); testApplication=instanceInfos.toApplications().getRegisteredApplications().get(0); resource=new Abstract
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,testFullVipGet,@Test public void  () throws Exception { Response response=resource.getVipResponse(Version.V2.name() vipName MediaType.APPLICATION_JSON EurekaAccept.full Key.EntityType.VIP); String json=String.valueOf(response.getEntity()); DecoderWrapper decoder=CodecWr
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\AbstractVIPResourceTest.java,testMiniVipGet,@Test public void  () throws Exception { Response response=resource.getVipResponse(Version.V2.name() vipName MediaType.APPLICATION_JSON EurekaAccept.compact Key.EntityType.VIP); String json=String.valueOf(response.getEntity()); DecoderWrapper decoder=Code
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,getId,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,setUp,@Override @Before public void  () throws Exception { super.setUp(); InstanceInfoGenerator instanceInfos=InstanceInfoGenerator.newBuilder(6 1).build(); testApplication=instanceInfos.toApplications().getRegisteredApplications().get(0); applicationResource=n
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,testBadRegistration,"@Test public void  () throws Exception { InstanceInfo instanceInfo=spy(InstanceInfoGenerator.takeOne()); when(instanceInfo.getId()).thenReturn(null); Response response=applicationResource.addInstance(instanceInfo false + """"); assertThat(response.getStatus"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,setUp,@Override @Before public void  () throws Exception { super.setUp(); InstanceInfoGenerator instanceInfos=InstanceInfoGenerator.newBuilder(20 6).build(); testApplications=instanceInfos.toApplications(); applicationsResource=new ApplicationsResource(serverCo
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,testBadRegistrationOfDataCenterInfo,"@Test public void  () throws Exception { try { ConfigurationManager.getConfigInstance().setProperty(""eureka.experimental.registration.validation.dataCenterInfoId"" ""true""); InstanceInfo instanceInfo=spy(InstanceInfoGenerator.takeOne()); when(instanceInfo.g"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,testFullAppsGetGzipJsonHeaderType,"@Test public void  () throws Exception { Response response=applicationsResource.getContainers(Version.V2.name() MediaType.APPLICATION_JSON ""gzip"" EurekaAccept.full.name() null null); assertThat(response.getMetadata().getFirst(""Content-Encoding"").toString("
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,testFullAppGet,@Test public void  () throws Exception { Response response=applicationResource.getApplication(Version.V2.name() MediaType.APPLICATION_JSON EurekaAccept.full.name()); String json=String.valueOf(response.getEntity()); DecoderWrapper decoder=CodecWrappers.ge
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,testFullAppsGetGzipXmlHeaderType,"@Test public void  () throws Exception { Response response=applicationsResource.getContainers(Version.V2.name() MediaType.APPLICATION_XML ""gzip"" EurekaAccept.full.name() null null); assertThat(response.getMetadata().getFirst(""Content-Encoding"").toString()"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,testGoodRegistration,"@Test public void  () throws Exception { InstanceInfo noIdInfo=InstanceInfoGenerator.takeOne(); Response response=applicationResource.addInstance(noIdInfo false + """"); assertThat(response.getStatus() is(204)); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,testFullAppsGetJson,@Test public void  () throws Exception { Response response=applicationsResource.getContainers(Version.V2.name() MediaType.APPLICATION_JSON null EurekaAccept.full.name() null null); String json=String.valueOf(response.getEntity()); DecoderWrapper decoder=C
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationResourceTest.java,testMiniAppGet,@Test public void  () throws Exception { Response response=applicationResource.getApplication(Version.V2.name() MediaType.APPLICATION_JSON EurekaAccept.compact.name()); String json=String.valueOf(response.getEntity()); DecoderWrapper decoder=CodecWrappers
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ApplicationsResourceTest.java,testMiniAppsGet,@Test public void  () throws Exception { Response response=applicationsResource.getContainers(Version.V2.name() MediaType.APPLICATION_JSON null EurekaAccept.compact.name() null null); String json=String.valueOf(response.getEntity()); DecoderWrapper decode
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,setUp,@Override @Before public void  () throws Exception { super.setUp(); applicationResource=new ApplicationResource(testInstanceInfo.getAppName() serverContext.getServerConfig() serverContext.getRegistry()); instanceResource=new InstanceResource(applicationRe
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,testStatusOverrideDeleteIsAppliedToRegistry,"@Test public void  () throws Exception { registry.register(testInstanceInfo false); registry.statusUpdate(testInstanceInfo.getAppName() testInstanceInfo.getId() InstanceStatus.OUT_OF_SERVICE ""0"" false); assertThat(testInstanceInfo.getStatus() is(equalTo(I"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,testStatusOverrideDeleteIsAppliedToRegistryAndProvidedStatusIsSet,"@Test public void  () throws Exception { registry.register(testInstanceInfo false); registry.statusUpdate(testInstanceInfo.getAppName() testInstanceInfo.getId() InstanceStatus.OUT_OF_SERVICE ""0"" false); assertThat(testInstanceInfo.getStatus() is(equalTo(I"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,testStatusOverrideDeleteReturnsNotFoundErrorCodeIfInstanceNotRegistered,"@Test public void  () throws Exception { Response response=instanceResource.deleteStatusUpdate(InstanceStatus.OUT_OF_SERVICE.name() ""false"" ""0""); assertThat(response.getStatus() is(equalTo(Status.NOT_FOUND.getStatusCode()))); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\InstanceResourceTest.java,testStatusOverrideReturnsNotFoundErrorCodeIfInstanceNotRegistered,"@Test public void  () throws Exception { Response response=instanceResource.statusUpdate(InstanceStatus.OUT_OF_SERVICE.name() ""false"" ""0""); assertThat(response.getStatus() is(equalTo(Status.NOT_FOUND.getStatusCode()))); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,setUp,"@Before public void  () throws Exception { ConfigurationManager.getConfigInstance().setProperty(""eureka.awsAccessId"" ""fakeId""); ConfigurationManager.getConfigInstance().setProperty(""eureka.awsSecretKey"" ""fakeKey""); AmazonInfo dataCenterInfo=mock(AmazonInf"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,tearDown,@After public void  () throws Exception { ConfigurationManager.getConfigInstance().clear(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\AwsAsgUtilTest.java,testDefaultAsgStatus,@Test public void  (){ Assert.assertEquals(true awsAsgUtil.isASGEnabled(instanceInfo)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assertResponseEntityExist,private static void  (Response httpResponse){ ReplicationListResponse entity=(ReplicationListResponse)httpResponse.getEntity(); assertThat(entity is(notNullValue())); ReplicationInstanceResponse replicationResponse=entity.getResponseList().get(0); assertThat(replicationResponse.getResponseEntity() is(notNullValue())); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assertStatus,private static void  (Response httpResponse int expectedStatusCode){ ReplicationListResponse entity=(ReplicationListResponse)httpResponse.getEntity(); assertThat(entity is(notNullValue())); ReplicationInstanceResponse replicationResponse=entity.getResponseList().get(0); assertThat(replicationResponse.getStatusCode() is(equalTo(expectedStatusCode))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assertStatusIsConflict,private static void  (Response httpResponse){ assertStatus(httpResponse 409); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,assertStatusOkReply,private static void  (Response httpResponse){ assertStatus(httpResponse 200); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,createApplicationResource,@Override ApplicationResource  (ReplicationInstance instanceInfo){ return applicationResource; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,createInstanceResource,@Override InstanceResource  (ReplicationInstance instanceInfo ApplicationResource applicationResource){ return instanceResource; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,setUp,@Before public void  (){ serverContext=mock(EurekaServerContext.class); when(serverContext.getServerConfig()).thenReturn(mock(EurekaServerConfig.class)); peerReplicationResource=new PeerReplicationResource(serverContext){ @Override ApplicationResource cre
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,testCancelBatching,@Test public void  () throws Exception { when(instanceResource.cancelLease(anyString())).thenReturn(Response.ok().build()); ReplicationList replicationList=new ReplicationList(newReplicationInstanceOf(Action.Cancel instanceInfo)); Response response=peerRe
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,testConflictResponseReturnsTheInstanceInfoInTheResponseEntity,@Test public void  () throws Exception { when(instanceResource.renewLease(anyString() anyString() anyString() anyString())).thenReturn(Response.status(Status.CONFLICT).entity(instanceInfo).build()); ReplicationInstance replicationInstance=newReplicationIn
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,testDeleteStatusOverride,@Test public void  () throws Exception { when(instanceResource.deleteStatusUpdate(anyString() anyString() anyString())).thenReturn(Response.ok().build()); ReplicationInstance replicationInstance=newReplicationInstanceOf(Action.DeleteStatusOverride instanc
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,testHeartbeat,@Test public void  () throws Exception { when(instanceResource.renewLease(anyString() anyString() anyString() anyString())).thenReturn(Response.ok().build()); ReplicationInstance replicationInstance=newReplicationInstanceOf(Action.Heartbeat instanceInfo);
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,testRegisterBatching,@Test public void  () throws Exception { ReplicationList replicationList=new ReplicationList(newReplicationInstanceOf(Action.Register instanceInfo)); Response response=peerReplicationResource.batchReplication(replicationList); assertStatusOkReply(response
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\PeerReplicationResourceTest.java,testStatusUpdate,@Test public void  () throws Exception { when(instanceResource.statusUpdate(anyString() anyString() anyString())).thenReturn(Response.ok().build()); ReplicationInstance replicationInstance=newReplicationInstanceOf(Action.StatusUpdate instanceInfo); Respon
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,setUp,"@Before public void  () throws Exception { acceptorExecutor=new AcceptorExecutor<>(""TEST"" MAX_BUFFER_SIZE WORK_LOAD_SIZE MAX_BATCHING_DELAY_MS SERVER_UNAVAILABLE_SLEEP_TIME_MS RETRY_SLEEP_TIME_MS); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,tearDown,@After public void  () throws Exception { acceptorExecutor.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,testBatchSizeIsConstrainedByConfiguredMaxSize,"@Test public void  () throws Exception { for (int i=0; i <= MAX_BUFFER_SIZE; i++) { acceptorExecutor.process(i ""Task"" + i System.currentTimeMillis() + 60 * 1000); } List<TaskHolder<Integer String>> taskHolders=acceptorExecutor.requestWorkItems().poll(5 Ti"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,testNewTaskOverridesOldOne,"@Test public void  () throws Exception { acceptorExecutor.process(1 ""Task1"" System.currentTimeMillis() + 60 * 1000); acceptorExecutor.process(1 ""Task1.1"" System.currentTimeMillis() + 60 * 1000); TaskHolder<Integer String> taskHolder=acceptorExecutor.reque"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,testRepublishedTaskIsHandledFirst,"@Test public void  () throws Exception { acceptorExecutor.process(1 ""Task1"" System.currentTimeMillis() + 60 * 1000); acceptorExecutor.process(2 ""Task2"" System.currentTimeMillis() + 60 * 1000); TaskHolder<Integer String> firstTaskHolder=acceptorExecutor.re"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,testTasksAreDelayToMaximizeBatchSize,"@Test public void  () throws Exception { BlockingQueue<List<TaskHolder<Integer String>>> taskQueue=acceptorExecutor.requestWorkItems(); acceptorExecutor.process(1 ""Task1"" System.currentTimeMillis() + 60 * 1000); Thread.sleep(MAX_BATCHING_DELAY_MS / 2); ac"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,testTasksAreDispatchedToWorkers,"@Test public void  () throws Exception { acceptorExecutor.process(1 ""Task1"" System.currentTimeMillis() + 60 * 1000); TaskHolder<Integer String> taskHolder=acceptorExecutor.requestWorkItem().poll(5 TimeUnit.SECONDS); verifyTaskHolder(taskHolder 1 ""Task1"");"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,testWhenBufferOverflowsOldestTasksAreRemoved,"@Test public void  () throws Exception { for (int i=0; i <= MAX_BUFFER_SIZE; i++) { acceptorExecutor.process(i ""Task"" + i System.currentTimeMillis() + 60 * 1000); } TaskHolder<Integer String> firstTaskHolder=acceptorExecutor.requestWorkItem().poll(5 TimeU"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\AcceptorExecutorTest.java,verifyTaskHolder,private static void  (TaskHolder<Integer String> taskHolder int id String task){ assertThat(taskHolder is(notNullValue())); assertThat(taskHolder.getId() is(equalTo(id))); assertThat(taskHolder.getTask() is(equalTo(task))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,MockServer,"public  (String appName PeerEurekaNodes peerEurekaNodes) throws Exception { ApplicationInfoManager infoManager=new ApplicationInfoManager(new MyDataCenterInstanceConfig()); DefaultEurekaServerConfig serverConfig=Mockito.spy(new DefaultEurekaServerConfig()); DefaultEurekaClientConfig clientConfig=new DefaultEurekaClientConfig(); ServerCodecs serverCodecs=new DefaultServerCodecs(serverConfig); EurekaClient eurekaClient=Mockito.mock(EurekaClient.class); Mockito.doReturn(""true"").when(serverConfig).getExperimental(""registry.registration.ignoreIfDirtyTimestampIsOlder""); this.registry=new PeerAwareInstanceRegistryImpl(serverConfig clientConfig serverCodecs eurekaClient); this.registry.init(peerEurekaNodes); this.applicationResource=new ApplicationResource(appName serverConfig registry); EurekaServerContext serverContext=Mockito.mock(EurekaServerContext.class); Mockito.when(serverContext.getServerConfig()).thenReturn(serverConfig); Mockito.when(serverContext.getRegistry()).thenReturn(registry); this.replicationResource=new PeerReplicationResource(serverContext); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,setUp,@Before public void  () throws Exception { InstanceInfo seed=InstanceInfoGenerator.takeOne(); id=seed.getId(); appName=seed.getAppName(); instance1=InstanceInfo.Builder.newBuilder().setInstanceId(id).setAppName(appName).setHostName(seed.getHostName()).set
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\resources\ReplicationConcurrencyTest.java,testReplicationWithRegistrationAndUpdateOnDifferentServers,"@Test public void  () throws Exception { server2.applicationResource.addInstance(instance1 ""true""); InstanceInfo newServer2Sees=server2.registry.getInstanceByAppAndId(appName id); assertThat(newServer2Sees.getStatus() equalTo(instance2.getStatus())); serv"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expectPermanentErrors,public void  (int count) throws InterruptedException { for (int i=0; i < count; i++) { ProcessingResult task=permanentErrorTasks.poll(5 TimeUnit.SECONDS); assertThat(task is(notNullValue())); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expectSuccesses,public void  (int count) throws InterruptedException { for (int i=0; i < count; i++) { ProcessingResult task=completedTasks.poll(5 TimeUnit.SECONDS); assertThat(task is(notNullValue())); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,expectTransientErrors,public void  (int count) throws InterruptedException { for (int i=0; i < count; i++) { ProcessingResult task=transientErrorTasks.poll(5 TimeUnit.SECONDS); assertThat(task is(notNullValue())); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,permanentErrorTaskHolder,public static TaskHolder<Integer ProcessingResult>  (int id){ return new TaskHolder<>(id ProcessingResult.PermanentError System.currentTimeMillis() + 60 * 1000); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,process,@Override public ProcessingResult  (List<ProcessingResult> tasks){ for ( ProcessingResult task : tasks) { process(task); } return tasks.get(0); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,successfulTaskHolder,public static TaskHolder<Integer ProcessingResult>  (int id){ return new TaskHolder<>(id ProcessingResult.Success System.currentTimeMillis() + 60 * 1000); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\RecordingProcessor.java,transientErrorTaskHolder,public static TaskHolder<Integer ProcessingResult>  (int id){ return new TaskHolder<>(id ProcessingResult.TransientError System.currentTimeMillis() + 60 * 1000); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java,Jersey2PeerEurekaNodes,public  (PeerAwareInstanceRegistry registry EurekaServerConfig serverConfig EurekaClientConfig clientConfig ServerCodecs serverCodecs ApplicationInfoManager applicationInfoManager){ super(registry serverConfig clientConfig serverCodecs applicationInfoManager); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\cluster\Jersey2PeerEurekaNodes.java,createPeerEurekaNode,@Override protected PeerEurekaNode  (String peerEurekaNodeUrl){ HttpReplicationClient replicationClient=Jersey2ReplicationClient.createReplicationClient(serverConfig serverCodecs peerEurekaNodeUrl); String targetHost=hostFromUrl(peerEurekaNodeUrl); if (ta
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,awaitCompletion,void  () throws InterruptedException { assertThat(completionGuard.tryAcquire(5 TimeUnit.SECONDS) is(true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,lowestHit,int  (){ return Collections.min(threadHits.values()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,process,@Override public ProcessingResult  (List<Boolean> tasks){ Thread currentThread=Thread.currentThread(); Integer current=threadHits.get(currentThread); if (current == null) { threadHits.put(currentThread tasks.size()); } else { threadHits.put(currentThread 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,resetTo,void  (int expectedTasks){ completionGuard=new Semaphore(-expectedTasks + 1); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,tearDown,@After public void  () throws Exception { if (dispatcher != null) { dispatcher.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,testBatchingDispatcher,"@Test public void  () throws Exception { dispatcher=TaskDispatchers.createBatchingTaskDispatcher(""TEST"" MAX_BUFFER_SIZE WORK_LOAD_SIZE 1 MAX_BATCHING_DELAY_MS SERVER_UNAVAILABLE_SLEEP_TIME_MS RETRY_SLEEP_TIME_MS processor); dispatcher.process(1 Processing"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,testSingleTaskDispatcher,"@Test public void  () throws Exception { dispatcher=TaskDispatchers.createNonBatchingTaskDispatcher(""TEST"" MAX_BUFFER_SIZE 1 MAX_BATCHING_DELAY_MS SERVER_UNAVAILABLE_SLEEP_TIME_MS RETRY_SLEEP_TIME_MS processor); dispatcher.process(1 ProcessingResult.Succe"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskDispatchersTest.java,testTasksAreDistributedAcrossAllWorkerThreads,"@Test public void  () throws Exception { int threadCount=3; CountingTaskProcessor countingProcessor=new CountingTaskProcessor(); TaskDispatcher<Integer Boolean> dispatcher=TaskDispatchers.createBatchingTaskDispatcher(""TEST"" MAX_BUFFER_SIZE WORK_LOAD_SIZE "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,setUp,@Before public void  () throws Exception { when(acceptorExecutor.requestWorkItem()).thenReturn(taskQueue); when(acceptorExecutor.requestWorkItems()).thenReturn(taskBatchQueue); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,tearDown,@After public void  () throws Exception { taskExecutors.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,testBatchProcessingWithPermanentError,"@Test public void  () throws Exception { taskExecutors=TaskExecutors.batchExecutors(""TEST"" 1 processor acceptorExecutor); List<TaskHolder<Integer ProcessingResult>> taskHolderBatch=asList(permanentErrorTaskHolder(1) permanentErrorTaskHolder(2)); taskBatch"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,testBatchProcessingWithTransientError,"@Test public void  () throws Exception { taskExecutors=TaskExecutors.batchExecutors(""TEST"" 1 processor acceptorExecutor); List<TaskHolder<Integer ProcessingResult>> taskHolderBatch=asList(transientErrorTaskHolder(1) transientErrorTaskHolder(2)); taskBatch"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,testBatchSuccessfulProcessing,"@Test public void  () throws Exception { taskExecutors=TaskExecutors.batchExecutors(""TEST"" 1 processor acceptorExecutor); taskBatchQueue.add(asList(successfulTaskHolder(1) successfulTaskHolder(2))); processor.expectSuccesses(2); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,testSingleItemProcessingWithPermanentError,"@Test public void  () throws Exception { taskExecutors=TaskExecutors.singleItemExecutors(""TEST"" 1 processor acceptorExecutor); TaskHolder<Integer ProcessingResult> taskHolder=permanentErrorTaskHolder(1); taskQueue.add(taskHolder); processor.expectPermanen"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,testSingleItemProcessingWithTransientError,"@Test public void  () throws Exception { taskExecutors=TaskExecutors.singleItemExecutors(""TEST"" 1 processor acceptorExecutor); TaskHolder<Integer ProcessingResult> taskHolder=transientErrorTaskHolder(1); taskQueue.add(taskHolder); processor.expectTransien"
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\batcher\TaskExecutorsTest.java,testSingleItemSuccessfulProcessing,"@Test public void  () throws Exception { taskExecutors=TaskExecutors.singleItemExecutors(""TEST"" 1 processor acceptorExecutor); taskQueue.add(successfulTaskHolder(1)); processor.expectSuccesses(1); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java,Jersey2EurekaBootStrap,public  (DiscoveryClient discoveryClient){ super(discoveryClient); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\Jersey2EurekaBootStrap.java,getPeerEurekaNodes,@Override protected PeerEurekaNodes  (PeerAwareInstanceRegistry registry EurekaServerConfig eurekaServerConfig EurekaClientConfig eurekaClientConfig ServerCodecs serverCodecs ApplicationInfoManager applicationInfoManager){ PeerEurekaNodes peerEurekaNodes=
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\resources\EurekaServerContextBinder.java,configure,@Override protected void  (){ bindFactory(new EurekaServerContextFactory()).to(EurekaServerContext.class); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\resources\EurekaServerContextBinder.java,provide,@Override public EurekaServerContext  (){ return EurekaServerContextHolder.getInstance().getServerContext(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,Jersey2DynamicGZIPContentEncodingFilter,public  (EurekaServerConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,filter,"@Override public void  (ClientRequestContext requestContext ClientResponseContext responseContext) throws IOException { Object contentEncoding=responseContext.getHeaders().getFirst(HttpHeaders.CONTENT_ENCODING); if (""gzip"".equals(contentEncoding)) { respo"
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,hasEntity,private boolean  (ClientRequestContext requestContext){ return false; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2DynamicGZIPContentEncodingFilter.java,isCompressionEnabled,private boolean  (){ return config.shouldEnableReplicatedRequestCompression(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,getMockInstanceInfos,"List<InstanceInfo>  (int size){ List<InstanceInfo> instances=new ArrayList<>(); for (int i=0; i < size; i++) { InstanceInfo mockInstance=mock(InstanceInfo.class); when(mockInstance.getHostName()).thenReturn(String.valueOf(i)); when(mockInstance.getIPAddr()).thenReturn(String.valueOf(i)); when(mockInstance.getAppName()).thenReturn(""stuff""); instances.add(mockInstance); } return instances; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,getMockNodes,"List<PeerEurekaNode>  (int size){ List<PeerEurekaNode> nodes=new ArrayList<>(); for (int i=0; i < size; i++) { PeerEurekaNode mockNode=mock(PeerEurekaNode.class); when(mockNode.getServiceUrl()).thenReturn(String.format(""http://%d:8080/v2"" i)); nodes.add(mockNode); } return nodes; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,getStatusUtil,"private StatusUtil  (int replicas int instances int minimum){ EurekaServerContext mockEurekaServerContext=mock(EurekaServerContext.class); List<InstanceInfo> mockInstanceInfos=getMockInstanceInfos(instances); Application mockApplication=mock(Application.class); when(mockApplication.getInstances()).thenReturn(mockInstanceInfos); ApplicationInfoManager mockAppInfoManager=mock(ApplicationInfoManager.class); when(mockAppInfoManager.getInfo()).thenReturn(mockInstanceInfos.get(0)); when(mockEurekaServerContext.getApplicationInfoManager()).thenReturn(mockAppInfoManager); PeerAwareInstanceRegistry mockRegistry=mock(PeerAwareInstanceRegistry.class); when(mockRegistry.getApplication(""stuff"" false)).thenReturn(mockApplication); when(mockEurekaServerContext.getRegistry()).thenReturn(mockRegistry); List<PeerEurekaNode> mockNodes=getMockNodes(replicas); EurekaTransportConfig mockTransportConfig=mock(EurekaTransportConfig.class); when(mockTransportConfig.applicationsResolverUseIp()).thenReturn(false); EurekaClientConfig mockClientConfig=mock(EurekaClientConfig.class); when(mockClientConfig.getTransportConfig()).thenReturn(mockTransportConfig); EurekaServerConfig mockServerConfig=mock(EurekaServerConfig.class); when(mockServerConfig.getHealthStatusMinNumberOfAvailablePeers()).thenReturn(minimum); PeerEurekaNodes peerEurekaNodes=new PeerEurekaNodes(mockRegistry mockServerConfig mockClientConfig null mockAppInfoManager); PeerEurekaNodes spyPeerEurekaNodes=spy(peerEurekaNodes); when(spyPeerEurekaNodes.getPeerEurekaNodes()).thenReturn(mockNodes); when(mockEurekaServerContext.getPeerEurekaNodes()).thenReturn(spyPeerEurekaNodes); return new StatusUtil(mockEurekaServerContext); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,testGetStatusInfoHealthy,@Test public void  (){ StatusUtil statusUtil=getStatusUtil(3 3 2); assertTrue(statusUtil.getStatusInfo().isHealthy()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,testGetStatusInfoUnhealthy,@Test public void  (){ StatusUtil statusUtil=getStatusUtil(5 3 4); assertFalse(statusUtil.getStatusInfo().isHealthy()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core\src\test\java\com\netflix\eureka\util\StatusUtilTest.java,testGetStatusInfoUnsetHealth,"@Test public void  (){ StatusUtil statusUtil=getStatusUtil(5 3 -1); StatusInfo statusInfo=statusUtil.getStatusInfo(); try { statusInfo.isHealthy(); } catch ( NullPointerException e) { return; } fail(""Excpected NPE to be thrown when healthy threshold is no"
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaGovernatedService.java,configure,@Override protected void  (){ DynamicPropertyFactory configInstance=com.netflix.config.DynamicPropertyFactory.getInstance(); bind(DynamicPropertyFactory.class).toInstance(configInstance); bind(EurekaInstanceConfig.class).to(MyDataCenterInstanceConfig.clas
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaGovernatedService.java,init,"private static LifecycleInjector  () throws Exception { System.out.println(""Creating injector for Example Service""); LifecycleInjector injector=InjectorBuilder.fromModules(new EurekaModule() new ExampleServiceModule()).overrideWith(new AbstractModule(){ @Override protected void configure(){ DynamicPropertyFactory configInstance=com.netflix.config.DynamicPropertyFactory.getInstance(); bind(DynamicPropertyFactory.class).toInstance(configInstance); bind(EurekaInstanceConfig.class).to(MyDataCenterInstanceConfig.class); } } ).createInjector(); System.out.println(""Done creating the injector""); return injector; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaGovernatedService.java,main,"public static void  (String[] args) throws Exception { LifecycleInjector injector=null; try { injector=init(); injector.awaitTermination(); } catch ( Exception e) { System.out.println(""Error starting the sample service: "" + e); e.printStackTrace(); } finally { if (injector != null) { injector.shutdown(); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,Jersey2ReplicationClient,public  (EurekaJersey2Client eurekaJersey2Client String serviceUrl){ super(eurekaJersey2Client.getClient() serviceUrl); this.eurekaJersey2Client=eurekaJersey2Client; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,addExtraHeaders,"@Override protected void  (Builder webResource){ webResource.header(PeerEurekaNode.HEADER_REPLICATION ""true""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,createReplicationClient,"public static Jersey2ReplicationClient  (EurekaServerConfig config ServerCodecs serverCodecs String serviceUrl){ String name=Jersey2ReplicationClient.class.getSimpleName() + "": "" + serviceUrl+ ""apps/: ""; EurekaJersey2Client jerseyClient; try { String hostname; try { hostname=new URL(serviceUrl).getHost(); } catch ( MalformedURLException e) { hostname=serviceUrl; } String jerseyClientName=""Discovery-PeerNodeClient-"" + hostname; EurekaJersey2ClientImpl.EurekaJersey2ClientBuilder clientBuilder=new EurekaJersey2ClientImpl.EurekaJersey2ClientBuilder().withClientName(jerseyClientName).withUserAgent(""Java-EurekaClient-Replication"").withEncoderWrapper(serverCodecs.getFullJsonCodec()).withDecoderWrapper(serverCodecs.getFullJsonCodec()).withConnectionTimeout(config.getPeerNodeConnectTimeoutMs()).withReadTimeout(config.getPeerNodeReadTimeoutMs()).withMaxConnectionsPerHost(config.getPeerNodeTotalConnectionsPerHost()).withMaxTotalConnections(config.getPeerNodeTotalConnections()).withConnectionIdleTimeout(config.getPeerNodeConnectionIdleTimeoutSeconds()); if (serviceUrl.startsWith(""https://"") && ""true"".equals(System.getProperty(""com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory""))) { clientBuilder.withSystemSSLConfiguration(); } jerseyClient=clientBuilder.build(); } catch ( Throwable e) { throw new RuntimeException(""Cannot Create new Replica Node :"" + name e); } String ip=null; try { ip=InetAddress.getLocalHost().getHostAddress(); } catch ( UnknownHostException e) { logger.warn(""Cannot find localhost ip"" e); } Client jerseyApacheClient=jerseyClient.getClient(); jerseyApacheClient.register(new Jersey2DynamicGZIPContentEncodingFilter(config)); EurekaServerIdentity identity=new EurekaServerIdentity(ip); jerseyApacheClient.register(new EurekaIdentityHeaderFilter(identity)); return new Jersey2ReplicationClient(jerseyClient serviceUrl); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,isSuccess,private static boolean  (int statusCode){ return statusCode >= 200 && statusCode < 300; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,sendHeartBeat,"@Override public EurekaHttpResponse<InstanceInfo>  (String appName String id InstanceInfo info InstanceStatus overriddenStatus){ String urlPath=""apps/"" + appName + '/'+ id; Response response=null; try { WebTarget webResource=jerseyClient.target(serviceUrl"
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,shutdown,@Override public void  (){ super.shutdown(); eurekaJersey2Client.destroyResources(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,statusUpdate,"@Override public EurekaHttpResponse<Void>  (String asgName ASGStatus newStatus){ Response response=null; try { String urlPath=""asg/"" + asgName + ""/status""; response=jerseyClient.target(serviceUrl).path(urlPath).queryParam(""value"" newStatus.name()).request"
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\main\java\com\netflix\eureka\transport\Jersey2ReplicationClient.java,submitBatchUpdates,@Override public EurekaHttpResponse<ReplicationListResponse>  (ReplicationList replicationList){ Response response=null; try { response=jerseyClient.target(serviceUrl).path(PeerEurekaNode.BATCH_URL_PATH).request(MediaType.APPLICATION_JSON_TYPE).post(Entit
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,setUp,"@Before public void  () throws Exception { replicationClient=Jersey2ReplicationClient.createReplicationClient(config serverCodecs ""http://localhost:"" + serverMockRule.getHttpPort() + ""/eureka/v2""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,tearDown,@After public void  (){ if (serverMockClient != null) { serverMockClient.reset(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,testAsgStatusUpdateReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""PUT"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/asg/"" + instanceInfo.getASGName() + ""/status"")).respond(response().withStatusCode("
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,testCancelReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""DELETE"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName() + '/'+ instanceInfo.getId())).respond(respon"
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,testDeleteStatusOverrideReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""DELETE"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName() + '/'+ instanceInfo.getId()+ ""/status"")).res"
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,testHeartbeatReplicationWithNoResponseBody,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""PUT"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName() + '/'+ instanceInfo.getId())).respond(response("
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,testHeartbeatReplicationWithResponseBody,"@Test public void  () throws Exception { InstanceInfo remoteInfo=new InstanceInfo(this.instanceInfo); remoteInfo.setStatus(InstanceStatus.DOWN); byte[] responseBody=toGzippedJson(remoteInfo); serverMockClient.when(request().withMethod(""PUT"").withHeader(he"
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,testRegistrationReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""POST"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName())).respond(response().withStatusCode(200)); Eur"
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,testStatusUpdateReplication,"@Test public void  () throws Exception { serverMockClient.when(request().withMethod(""PUT"").withHeader(header(PeerEurekaNode.HEADER_REPLICATION ""true"")).withPath(""/eureka/v2/apps/"" + instanceInfo.getAppName() + '/'+ instanceInfo.getId()+ ""/status"")).respon"
C:\Users\User\Desktop\Thesis\eureka\eureka-core-jersey2\src\test\java\com\netflix\eureka\transport\Jersey2ReplicationClientTest.java,toGzippedJson,private static byte[]  (InstanceInfo remoteInfo) throws IOException { ByteArrayOutputStream bos=new ByteArrayOutputStream(); GZIPOutputStream gos=new GZIPOutputStream(bos); EurekaJacksonCodec.getInstance().writeTo(remoteInfo gos); gos.flush(); return bos.toByteArray(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initializeApplicationInfoManager,private static synchronized ApplicationInfoManager  (EurekaInstanceConfig instanceConfig){ if (applicationInfoManager == null) { InstanceInfo instanceInfo=new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get(); applicationInfoManager=new ApplicationInfoManager(instanceConfig instanceInfo); } return applicationInfoManager; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,initializeEurekaClient,private static synchronized EurekaClient  (ApplicationInfoManager applicationInfoManager EurekaClientConfig clientConfig){ if (eurekaClient == null) { eurekaClient=new DiscoveryClient(applicationInfoManager clientConfig); } return eurekaClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,main,public static void  (String[] args){ ExampleEurekaClient sampleClient=new ExampleEurekaClient(); ApplicationInfoManager applicationInfoManager=initializeApplicationInfoManager(new MyDataCenterInstanceConfig()); EurekaClient client=initializeEurekaClient(applicationInfoManager new DefaultEurekaClientConfig()); sampleClient.sendRequestToServiceUsingEureka(client); eurekaClient.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaClient.java,sendRequestToServiceUsingEureka,"public void  (EurekaClient eurekaClient){ String vipAddress=""sampleservice.mydomain.net""; InstanceInfo nextServerInfo=null; try { nextServerInfo=eurekaClient.getNextServerFromEureka(vipAddress false); } catch ( Exception e) { System.err.println(""Cannot get an instance of example service to talk to from eureka""); System.exit(-1); } System.out.println(""Found an instance of example service to talk to from eureka: "" + nextServerInfo.getVIPAddress() + "":""+ nextServerInfo.getPort()); System.out.println(""healthCheckUrl: "" + nextServerInfo.getHealthCheckUrl()); System.out.println(""override: "" + nextServerInfo.getOverriddenStatus()); Socket s=new Socket(); int serverPort=nextServerInfo.getPort(); try { s.connect(new InetSocketAddress(nextServerInfo.getHostName() serverPort)); } catch ( IOException e) { System.err.println(""Could not connect to the server :"" + nextServerInfo.getHostName() + "" at port ""+ serverPort); } catch ( Exception e) { System.err.println(""Could not connect to the server :"" + nextServerInfo.getHostName() + "" at port ""+ serverPort+ ""due to Exception ""+ e); } try { String request=""FOO "" + new Date(); System.out.println(""Connected to server. Sending a sample request: "" + request); PrintStream out=new PrintStream(s.getOutputStream()); out.println(request); System.out.println(""Waiting for server response..""); BufferedReader rd=new BufferedReader(new InputStreamReader(s.getInputStream())); String str=rd.readLine(); if (str != null) { System.out.println(""Received response from server: "" + str); System.out.println(""Exiting the client. Demo over..""); } rd.close(); } catch ( IOException e) { e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initializeApplicationInfoManager,private static synchronized ApplicationInfoManager  (EurekaInstanceConfig instanceConfig){ if (applicationInfoManager == null) { InstanceInfo instanceInfo=new EurekaConfigBasedInstanceInfoProvider(instanceConfig).get(); applicationInfoManager=new ApplicationInfoManager(instanceConfig instanceInfo); } return applicationInfoManager; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,initializeEurekaClient,private static synchronized EurekaClient  (ApplicationInfoManager applicationInfoManager EurekaClientConfig clientConfig){ if (eurekaClient == null) { eurekaClient=new DiscoveryClient(applicationInfoManager clientConfig); } return eurekaClient; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleEurekaService.java,main,public static void  (String[] args){ DynamicPropertyFactory configInstance=com.netflix.config.DynamicPropertyFactory.getInstance(); ApplicationInfoManager applicationInfoManager=initializeApplicationInfoManager(new MyDataCenterInstanceConfig()); EurekaClient eurekaClient=initializeEurekaClient(applicationInfoManager new DefaultEurekaClientConfig()); ExampleServiceBase exampleServiceBase=new ExampleServiceBase(applicationInfoManager eurekaClient configInstance); try { exampleServiceBase.start(); } finally { exampleServiceBase.stop(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,contextDestroyed,public void  (ServletContextEvent servletContextEvent){ EurekaMonitors.shutdown(); ServletContext sc=servletContextEvent.getServletContext(); sc.removeAttribute(EurekaServerContext.class.getName()); super.contextDestroyed(servletContextEvent); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,contextInitialized,@Override public void  (ServletContextEvent servletContextEvent){ super.contextInitialized(servletContextEvent); ServletContext sc=servletContextEvent.getServletContext(); sc.setAttribute(EurekaServerContext.class.getName() serverContext); int registryCou
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaContextListener.java,createInjector,@Override protected LifecycleInjector  (){ JsonXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter() XStream.PRIORITY_VERY_HIGH); XmlXStream.getInstance().registerConverter(new V1AwareInstanceInfoConverter() XStream.PRIORITY_VERY_HIGH
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,ExampleServiceBase,@Inject public  (ApplicationInfoManager applicationInfoManager EurekaClient eurekaClient DynamicPropertyFactory configInstance){ this.applicationInfoManager=applicationInfoManager; this.eurekaClient=eurekaClient; this.configInstance=configInstance; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,processRequest,"private void  (final Socket s){ try { BufferedReader rd=new BufferedReader(new InputStreamReader(s.getInputStream())); String line=rd.readLine(); if (line != null) { System.out.println(""Received a request from the example client: "" + line); } String response=""BAR "" + new Date(); System.out.println(""Sending the response to the client: "" + response); PrintStream out=new PrintStream(s.getOutputStream()); out.println(response); } catch ( Throwable e) { System.err.println(""Error processing requests""); } finally { if (s != null) { try { s.close(); } catch ( IOException e) { e.printStackTrace(); } } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,start,"@PostConstruct public void  (){ System.out.println(""Registering service to eureka with STARTING status""); applicationInfoManager.setInstanceStatus(InstanceInfo.InstanceStatus.STARTING); System.out.println(""Simulating service initialization by sleeping for"
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,stop,"@PreDestroy public void  (){ if (eurekaClient != null) { System.out.println(""Shutting down server. Demo over.""); eurekaClient.shutdown(); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-examples\src\main\java\com\netflix\eureka\ExampleServiceBase.java,waitForRegistrationWithEureka,"private void  (EurekaClient eurekaClient){ String vipAddress=configInstance.getStringProperty(""eureka.vipAddress"" ""sampleservice.mydomain.net"").get(); InstanceInfo nextServerInfo=null; while (nextServerInfo == null) { try { nextServerInfo=eurekaClient.getNextServerFromEureka(vipAddress false); } catch ( Throwable e) { System.out.println(""Waiting ... verifying service registration with eureka ...""); try { Thread.sleep(10000); } catch ( InterruptedException e1) { e1.printStackTrace(); } } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaInjectorCreator.java,configureServlets,"@Override protected void  (){ filter(""/*"").through(StatusFilter.class); filter(""/*"").through(ServerRequestAuthFilter.class); filter(""/v2/apps"" ""/v2/apps/*"").through(GzipEncodingEnforcingFilter.class); Map<String String> params=new HashMap<String String>()"
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\EurekaInjectorCreator.java,createInjector,"public static LifecycleInjector  (){ try { return InjectorBuilder.fromModules(new EurekaModule() new Ec2EurekaServerModule() new ProvisionDebugModule() new JerseyServletModule(){ @Override protected void configureServlets(){ filter(""/*"").through(StatusFilter.class); filter(""/*"").through(ServerRequestAuthFilter.class); filter(""/v2/apps"" ""/v2/apps/*"").through(GzipEncodingEnforcingFilter.class); Map<String String> params=new HashMap<String String>(); params.put(PackagesResourceConfig.PROPERTY_PACKAGES ""com.sun.jersey""); params.put(PackagesResourceConfig.PROPERTY_PACKAGES ""com.netflix""); params.put(""com.sun.jersey.config.property.WebPageContentRegex"" ""/(flex|images|js|css|jsp)/.*""); params.put(""com.sun.jersey.spi.container.ContainerRequestFilters"" ""com.sun.jersey.api.container.filter.GZIPContentEncodingFilter""); params.put(""com.sun.jersey.spi.container.ContainerResponseFilters"" ""com.sun.jersey.api.container.filter.GZIPContentEncodingFilter""); filter(""/*"").through(GuiceContainer.class params); bind(GuiceContainer.class).asEagerSingleton(); } } ).createInjector(); } catch ( Exception e) { logger.error(""Failed to create the injector"" e); e.printStackTrace(); throw new RuntimeException(e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,accept,@Override public boolean  (File dir String name){ return WAR_PATTERN.matcher(name).matches(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,createEurekaServerConfig,private static void  (){ eurekaServerConfig=mock(EurekaServerConfig.class); when(eurekaServerConfig.getPeerEurekaNodesUpdateIntervalMs()).thenReturn(1000); when(eurekaServerConfig.shouldSyncWhenTimestampDiffers()).thenReturn(true); when(eurekaServerConfig.getMaxTimeForReplication()).thenReturn(1000); when(eurekaServerConfig.getMaxElementsInPeerReplicationPool()).thenReturn(10); when(eurekaServerConfig.getMinThreadsForPeerReplication()).thenReturn(1); when(eurekaServerConfig.getMaxThreadsForPeerReplication()).thenReturn(1); when(eurekaServerConfig.shouldBatchReplication()).thenReturn(true); when(eurekaServerConfig.getPeerNodeTotalConnections()).thenReturn(1); when(eurekaServerConfig.getPeerNodeTotalConnectionsPerHost()).thenReturn(1); when(eurekaServerConfig.getPeerNodeConnectionIdleTimeoutSeconds()).thenReturn(1000); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,expectInstanceInfoInRegistry,private static InstanceInfo  (InstanceInfo instanceInfo){ EurekaHttpResponse<InstanceInfo> queryResponse=jerseyEurekaClient.getInstance(instanceInfo.getAppName() instanceInfo.getId()); assertThat(queryResponse.getStatusCode() is(equalTo(200))); assertThat(queryResponse.getEntity() is(notNullValue())); assertThat(queryResponse.getEntity().getId() is(equalTo(instanceInfo.getId()))); return queryResponse.getEntity(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,findWar,"private static File  (){ File dir=null; for ( String candidate : EUREKA1_WAR_DIRS) { File candidateFile=new File(candidate); if (candidateFile.exists()) { dir=candidateFile; break; } } if (dir == null) { throw new IllegalStateException(""No directory found at any in any pre-configured location: "" + Arrays.toString(EUREKA1_WAR_DIRS)); } File[] warFiles=dir.listFiles(new FilenameFilter(){ @Override public boolean accept( File dir  String name){ return WAR_PATTERN.matcher(name).matches(); } } ); if (warFiles.length == 0) { throw new IllegalStateException(""War file not found in directory "" + dir); } if (warFiles.length > 1) { throw new IllegalStateException(""Multiple war files found in directory "" + dir + "": ""+ Arrays.toString(warFiles)); } return warFiles[0]; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,injectEurekaConfiguration,"private static void  () throws UnknownHostException { String myHostName=InetAddress.getLocalHost().getHostName(); String myServiceUrl=""http://"" + myHostName + "":8080/v2/""; System.setProperty(""eureka.region"" ""default""); System.setProperty(""eureka.name"" ""eureka""); System.setProperty(""eureka.vipAddress"" ""eureka.mydomain.net""); System.setProperty(""eureka.port"" ""8080""); System.setProperty(""eureka.preferSameZone"" ""false""); System.setProperty(""eureka.shouldUseDns"" ""false""); System.setProperty(""eureka.shouldFetchRegistry"" ""false""); System.setProperty(""eureka.serviceUrl.defaultZone"" myServiceUrl); System.setProperty(""eureka.serviceUrl.default.defaultZone"" myServiceUrl); System.setProperty(""eureka.awsAccessId"" ""fake_aws_access_id""); System.setProperty(""eureka.awsSecretKey"" ""fake_aws_secret_key""); System.setProperty(""eureka.numberRegistrySyncRetries"" ""0""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,setUp,"@BeforeClass public static void  () throws Exception { injectEurekaConfiguration(); startServer(); createEurekaServerConfig(); httpClientFactory=JerseyEurekaHttpClientFactory.newBuilder().withClientName(""testEurekaClient"").withConnectionTimeout(1000).with"
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,startServer,"private static void  () throws Exception { File warFile=findWar(); server=new Server(8080); WebAppContext webapp=new WebAppContext(); webapp.setContextPath(""/""); webapp.setWar(warFile.getAbsolutePath()); server.setHandler(webapp); server.start(); eurekaServiceUrl=""http://localhost:8080/v2""; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,tearDown,@AfterClass public static void  () throws Exception { removeEurekaConfiguration(); if (jerseyReplicationClient != null) { jerseyReplicationClient.shutdown(); } if (server != null) { server.stop(); } if (httpClientFactory != null) { httpClientFactory.shutd
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,testBatch,@Test public void  () throws Exception { InstanceInfo instanceInfo=instanceInfoIt.next(); ReplicationInstance replicationInstance=ReplicationInstance.replicationInstance().withAction(Action.Register).withAppName(instanceInfo.getAppName()).withId(instanceI
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,testCancelForEntryThatDoesNotExist,@Test public void  () throws Exception { InstanceInfo instanceInfo=instanceInfoIt.next(); EurekaHttpResponse<Void> httpResponse=jerseyEurekaClient.cancel(instanceInfo.getAppName() instanceInfo.getId()); assertThat(httpResponse.getStatusCode() is(equalTo(4
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,testCancelForEntryThatExists,@Test public void  () throws Exception { InstanceInfo instanceInfo=instanceInfoIt.next(); jerseyEurekaClient.register(instanceInfo); EurekaHttpResponse<Void> httpResponse=jerseyEurekaClient.cancel(instanceInfo.getAppName() instanceInfo.getId()); assertTha
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,testHeartbeat,@Test public void  () throws Exception { InstanceInfo instanceInfo=instanceInfoIt.next(); jerseyEurekaClient.register(instanceInfo); EurekaHttpResponse<InstanceInfo> heartBeatResponse=jerseyReplicationClient.sendHeartBeat(instanceInfo.getAppName() instanc
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,testMissedHeartbeat,@Test public void  () throws Exception { InstanceInfo instanceInfo=instanceInfoIt.next(); EurekaHttpResponse<InstanceInfo> heartBeatResponse=jerseyReplicationClient.sendHeartBeat(instanceInfo.getAppName() instanceInfo.getId() instanceInfo null); assertTha
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,testRegistration,@Test public void  () throws Exception { InstanceInfo instanceInfo=instanceInfoIt.next(); EurekaHttpResponse<Void> httpResponse=jerseyEurekaClient.register(instanceInfo); assertThat(httpResponse.getStatusCode() is(equalTo(204))); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server\src\test\java\com\netflix\eureka\resources\EurekaClientServerRestIntegrationTest.java,testStatusOverrideUpdateAndDelete,@Test public void  () throws Exception { InstanceInfo instanceInfo=instanceInfoIt.next(); jerseyEurekaClient.register(instanceInfo); EurekaHttpResponse<Void> overrideUpdateResponse=jerseyEurekaClient.statusUpdate(instanceInfo.getAppName() instanceInfo.get
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\LocalDevEurekaServerModule.java,configure,@Override protected void  (){ bind(EurekaServerConfig.class).to(DefaultEurekaServerConfig.class).in(Scopes.SINGLETON); bind(PeerEurekaNodes.class).in(Scopes.SINGLETON); bind(PeerAwareInstanceRegistryImpl.class).asEagerSingleton(); bind(InstanceRegistry.cl
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\LocalDevEurekaServerModule.java,equals,@Override public boolean  (Object obj){ return LocalDevEurekaServerModule.class.equals(obj.getClass()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\Ec2EurekaServerModule.java,equals,@Override public boolean  (Object obj){ return Ec2EurekaServerModule.class.equals(obj.getClass()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\LocalDevEurekaServerModule.java,hashCode,@Override public int  (){ return LocalDevEurekaServerModule.class.hashCode(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-server-governator\src\main\java\com\netflix\eureka\guice\Ec2EurekaServerModule.java,hashCode,@Override public int  (){ return Ec2EurekaServerModule.class.hashCode(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,createResponse,"private static <T>EurekaHttpResponse<T>  (T entity){ return anEurekaHttpResponse(200 entity).headers(HttpHeaders.CONTENT_TYPE ""application/json"").build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,getEurekaClientWithBasicAuthentication,protected EurekaHttpClient  (String userName String password){ URI serviceURI=UriBuilder.fromUri(getHttpServer().getServiceURI()).userInfo(userName + ':' + password).build(); return getEurekaHttpClient(serviceURI); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,getEurekaHttpClient,protected EurekaHttpClient  (){ return getEurekaHttpClient(getHttpServer().getServiceURI()); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,getHttpServer,protected SimpleEurekaHttpServer  (){ return httpServer; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,onHttpRequest,@Override public void  (EurekaHttpRequest request){ observedHttpRequests.add(request); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,setUp,@Before public void  () throws Exception { httpServer=new SimpleEurekaHttpServer(requestHandler transportEventListener); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,tearDown,@After public void  () throws Exception { httpServer.shutdown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testBasicAuthentication,@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); when(requestHandler.register(instance)).thenReturn(EurekaHttpResponse.status(204)); EurekaHttpResponse<Void> httpResponse=getEurekaClientWithBasicAuthenticatio
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testCancelRequest,@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); when(requestHandler.cancel(instance.getAppName() instance.getId())).thenReturn(EurekaHttpResponse.status(200)); EurekaHttpResponse<Void> httpResponse=getEureka
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetApplicationInstanceRequest,@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); when(requestHandler.getInstance(instance.getAppName() instance.getId())).thenReturn(createResponse(instance)); EurekaHttpResponse<InstanceInfo> httpResponse=ge
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetApplicationsRequest,@Test public void  () throws Exception { Applications apps=InstanceInfoGenerator.newBuilder(2 1).build().toApplications(); when(requestHandler.getApplications()).thenReturn(createResponse(apps)); EurekaHttpResponse<Applications> httpResponse=getEurekaHttp
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetApplicationsWithRemoteRegionRequest,@Test public void  () throws Exception { Applications apps=InstanceInfoGenerator.newBuilder(2 1).build().toApplications(); when(requestHandler.getApplications(REMOTE_REGION)).thenReturn(createResponse(apps)); EurekaHttpResponse<Applications> httpResponse=
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetDeltaRequest,@Test public void  () throws Exception { Applications delta=InstanceInfoGenerator.newBuilder(2 1).build().takeDelta(2); when(requestHandler.getDelta()).thenReturn(createResponse(delta)); EurekaHttpResponse<Applications> httpResponse=getEurekaHttpClient().
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetDeltaWithRemoteRegionRequest,@Test public void  () throws Exception { Applications delta=InstanceInfoGenerator.newBuilder(2 1).build().takeDelta(2); when(requestHandler.getDelta(REMOTE_REGION)).thenReturn(createResponse(delta)); EurekaHttpResponse<Applications> httpResponse=getEureka
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetInstanceRequest,@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); when(requestHandler.getInstance(instance.getId())).thenReturn(createResponse(instance)); EurekaHttpResponse<InstanceInfo> httpResponse=getEurekaHttpClient().ge
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetSecureVipRequest,@Test public void  () throws Exception { Applications vipApps=InstanceInfoGenerator.newBuilder(1 2).build().toApplications(); String secureVipAddress=vipApps.getRegisteredApplications().get(0).getInstances().get(0).getSecureVipAddress(); when(requestHandl
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetSecureVipWithRemoteRegionRequest,@Test public void  () throws Exception { Applications vipApps=InstanceInfoGenerator.newBuilder(1 2).build().toApplications(); String secureVipAddress=vipApps.getRegisteredApplications().get(0).getInstances().get(0).getSecureVipAddress(); when(requestHandl
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetVipRequest,@Test public void  () throws Exception { Applications vipApps=InstanceInfoGenerator.newBuilder(1 2).build().toApplications(); String vipAddress=vipApps.getRegisteredApplications().get(0).getInstances().get(0).getVIPAddress(); when(requestHandler.getVip(vi
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testGetVipWithRemoteRegionRequest,@Test public void  () throws Exception { Applications vipApps=InstanceInfoGenerator.newBuilder(1 2).build().toApplications(); String vipAddress=vipApps.getRegisteredApplications().get(0).getInstances().get(0).getVIPAddress(); when(requestHandler.getVip(vi
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testHeartbeatRequest,"@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); InstanceInfo updated=new InstanceInfo.Builder(instance).setHostName(""another.host"").build(); when(requestHandler.sendHeartBeat(instance.getAppName() instance.g"
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testRegisterRequest,@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); when(requestHandler.register(instance)).thenReturn(EurekaHttpResponse.status(204)); EurekaHttpResponse<Void> httpResponse=getEurekaHttpClient().register(instan
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testStatusUpdateDeleteRequest,@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); when(requestHandler.deleteStatusOverride(instance.getAppName() instance.getId() null)).thenReturn(EurekaHttpResponse.status(200)); EurekaHttpResponse<Void> htt
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,testStatusUpdateRequest,@Test public void  () throws Exception { InstanceInfo instance=InstanceInfoGenerator.takeOne(); when(requestHandler.statusUpdate(instance.getAppName() instance.getId() InstanceStatus.OUT_OF_SERVICE null)).thenReturn(EurekaHttpResponse.status(200)); Eureka
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpClientCompatibilityTestSuite.java,verifyResponseOkWithEntity,private static void  (InstanceInfo original EurekaHttpResponse<InstanceInfo> httpResponse){ assertThat(httpResponse.getStatusCode() is(equalTo(200))); assertThat(httpResponse.getEntity() is(notNullValue())); assertThat(EurekaEntityComparators.equal(httpResponse.getEntity() original) is(true)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,DiscoveryClientResource, (DiscoveryClientRuleBuilder builder){ this.registrationEnabled=builder.registrationEnabled; this.registryFetchEnabled=builder.registryFetchEnabled; this.portResolverCallable=builder.portResolverCallable; this.eurekaHttpServer=builder.eurekaHttpServer; this.instance=builder.instance; this.remoteRegions=builder.remoteRegions; this.vipFetch=builder.vipFetch; this.userName=builder.userName; this.password=builder.password; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,after,@Override protected void  (){ if (client != null) { client.shutdown(); } for ( DiscoveryClientResource resource : forkedDiscoveryClientResources) { resource.after(); } for ( String property : SYSTEM_PROPERTY_TRACKER) { ConfigurationManager.getConfigInstan
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,awaitCacheUpdate,"public boolean  (long timeout TimeUnit unit) throws InterruptedException { final CountDownLatch latch=new CountDownLatch(1); Object eventListener=new Object(){ @Subscribe public void consume( CacheRefreshedEvent event){ latch.countDown(); } } ; try { getEventBus().registerSubscriber(eventListener); } catch ( InvalidSubscriberException e) { throw new IllegalStateException(""Unexpected error during subscriber registration"" e); } try { return latch.await(timeout unit); } finally { getEventBus().unregisterSubscriber(eventListener); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,basicAuthentication,"public DiscoveryClientRuleBuilder  (String userName String password){ Preconditions.checkNotNull(userName ""HTTP basic authentication user name is null""); Preconditions.checkNotNull(password ""HTTP basic authentication password is null""); this.userName=userName; this.password=password; return this; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,bindProperty,private static void  (String propertyName String value){ SYSTEM_PROPERTY_TRACKER.add(propertyName); ConfigurationManager.getConfigInstance().setProperty(propertyName value); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,build,public DiscoveryClientResource  (){ return new DiscoveryClientResource(this); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,clearDiscoveryClientConfig,"public static void  (){ ConfigurationManager.getConfigInstance().clearProperty(""eureka.client.refresh.interval""); ConfigurationManager.getConfigInstance().clearProperty(""eureka.registration.enabled""); ConfigurationManager.getConfigInstance().clearProperty(""eureka.fetchRemoteRegionsRegistry""); ConfigurationManager.getConfigInstance().clearProperty(""eureka.myregion.availabilityZones""); ConfigurationManager.getConfigInstance().clearProperty(""eureka.serviceUrl.default""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,connectWith,public DiscoveryClientRuleBuilder  (SimpleEurekaHttpServer eurekaHttpServer){ this.eurekaHttpServer=eurekaHttpServer; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,consume,@Subscribe public void  (CacheRefreshedEvent event){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,createApplicationManager,"private ApplicationInfoManager  (){ if (applicationManager == null) { EurekaInstanceConfig instanceConfig=new MyDataCenterInstanceConfig(EUREKA_TEST_NAMESPACE){ @Override public String getAppname(){ return ""discoveryClientTest""; } @Override public int getLeaseRenewalIntervalInSeconds(){ return 1; } } ; applicationManager=new ApplicationInfoManager(instanceConfig); } return applicationManager; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,createEurekaClientConfig,"private EurekaClientConfig  () throws Exception { URI serviceURI; if (portResolverCallable != null) { serviceURI=new URI(""http://localhost:"" + portResolverCallable.call() + ""/eureka/v2/""); } else if (eurekaHttpServer != null) { serviceURI=eurekaHttpServer.getServiceURI(); } else { throw new IllegalStateException(""Either port or EurekaHttpServer must be configured""); } if (userName != null) { serviceURI=UriBuilder.fromUri(serviceURI).userInfo(userName + ':' + password).build(); } bindProperty(EUREKA_TEST_NAMESPACE + ""serviceUrl.default"" serviceURI.toString()); if (remoteRegions != null && !remoteRegions.isEmpty()) { StringBuilder regions=new StringBuilder(); for ( String region : remoteRegions) { regions.append(' ').append(region); } bindProperty(EUREKA_TEST_NAMESPACE + ""fetchRemoteRegionsRegistry"" regions.substring(1)); } bindProperty(EUREKA_TEST_NAMESPACE + ""registration.enabled"" Boolean.toString(registrationEnabled)); bindProperty(EUREKA_TEST_NAMESPACE + ""appinfo.initial.replicate.time"" Integer.toString(0)); bindProperty(EUREKA_TEST_NAMESPACE + ""appinfo.replicate.interval"" Integer.toString(1)); bindProperty(EUREKA_TEST_NAMESPACE + ""shouldFetchRegistry"" Boolean.toString(registryFetchEnabled)); bindProperty(EUREKA_TEST_NAMESPACE + ""client.refresh.interval"" Integer.toString(1)); if (vipFetch != null) { bindProperty(EUREKA_TEST_NAMESPACE + ""registryRefreshSingleVipAddress"" vipFetch); } return new DefaultEurekaClientConfig(EUREKA_TEST_NAMESPACE); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,fork,"public DiscoveryClientRuleBuilder  (){ DiscoveryClientRuleBuilder builder=new DiscoveryClientRuleBuilder(){ @Override public DiscoveryClientResource build(){ DiscoveryClientResource clientResource=super.build(); try { clientResource.before(); } catch ( Throwable e) { throw new IllegalStateException(""Unexpected error during forking the client resource"" e); } forkedDiscoveryClientResources.add(clientResource); return clientResource; } } ; return builder.withInstanceInfo(instance).connectWith(eurekaHttpServer).withPortResolver(portResolverCallable).withRegistration(registrationEnabled).withRegistryFetch(registryFetchEnabled).withRemoteRegions(remoteRegions.toArray(new String[remoteRegions.size()])); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,getApplicationInfoManager,public ApplicationInfoManager  (){ return applicationInfoManager; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,getAppname,"@Override public String  (){ return ""discoveryClientTest""; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,getClient,public EurekaClient  (){ if (client == null) { try { applicationInfoManager=createApplicationManager(); EurekaClientConfig clientConfig=createEurekaClientConfig(); Jersey1DiscoveryClientOptionalArgs optionalArgs=new Jersey1DiscoveryClientOptionalArgs(); eventBus=new EventBusImpl(); optionalArgs.setEventBus(eventBus); client=new DiscoveryClient(applicationInfoManager clientConfig optionalArgs); } catch ( Exception e) { throw new RuntimeException(e); } } return client; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,getEventBus,public EventBus  (){ if (client == null) { getClient(); } return eventBus; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,getLeaseRenewalIntervalInSeconds,@Override public int  (){ return 1; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,getMyInstanceInfo,public InstanceInfo  (){ return createApplicationManager().getInfo(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,getName,@Override public Name  (){ return Name.MyOwn; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,newBuilder,public static DiscoveryClientRuleBuilder  (){ return new DiscoveryClientRuleBuilder(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,newInstanceInfoBuilder,"public static InstanceInfo.Builder  (int renewalIntervalInSecs){ InstanceInfo.Builder builder=InstanceInfo.Builder.newBuilder(); builder.setIPAddr(""10.10.101.00""); builder.setHostName(""Hosttt""); builder.setAppName(""EurekaTestApp-"" + UUID.randomUUID()); builder.setDataCenterInfo(new DataCenterInfo(){ @Override public Name getName(){ return Name.MyOwn; } } ); builder.setLeaseInfo(LeaseInfo.Builder.newBuilder().setRenewalIntervalInSecs(renewalIntervalInSecs).build()); return builder; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setupDiscoveryClient,public static EurekaClient  (InstanceInfo clientInstanceInfo){ DefaultEurekaClientConfig config=new DefaultEurekaClientConfig(); ApplicationInfoManager applicationInfoManager=new ApplicationInfoManager(new MyDataCenterInstanceConfig() clientInstanceInfo); DiscoveryManager.getInstance().setEurekaClientConfig(config); EurekaClient client=new DiscoveryClient(applicationInfoManager config); return client; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setupDiscoveryClientConfig,"public static void  (int serverPort String path){ ConfigurationManager.getConfigInstance().setProperty(""eureka.shouldFetchRegistry"" ""true""); ConfigurationManager.getConfigInstance().setProperty(""eureka.responseCacheAutoExpirationInSeconds"" ""10""); ConfigurationManager.getConfigInstance().setProperty(""eureka.client.refresh.interval"" CLIENT_REFRESH_RATE); ConfigurationManager.getConfigInstance().setProperty(""eureka.registration.enabled"" ""false""); ConfigurationManager.getConfigInstance().setProperty(""eureka.fetchRemoteRegionsRegistry"" REMOTE_REGION); ConfigurationManager.getConfigInstance().setProperty(""eureka.myregion.availabilityZones"" REMOTE_ZONE); ConfigurationManager.getConfigInstance().setProperty(""eureka.serviceUrl.default"" ""http://localhost:"" + serverPort + path); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,setupInjector,public static EurekaClient  (InstanceInfo clientInstanceInfo){ DefaultEurekaClientConfig config=new DefaultEurekaClientConfig(); DiscoveryManager.getInstance().setEurekaClientConfig(config); EurekaClient client=new DiscoveryClient(clientInstanceInfo config); ApplicationInfoManager.getInstance().initComponent(new MyDataCenterInstanceConfig()); return client; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,withInstanceInfo,public DiscoveryClientRuleBuilder  (InstanceInfo instance){ this.instance=instance; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,withPortResolver,public DiscoveryClientRuleBuilder  (Callable<Integer> portResolverCallable){ this.portResolverCallable=portResolverCallable; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,withRegistration,public DiscoveryClientRuleBuilder  (boolean enabled){ this.registrationEnabled=enabled; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,withRegistryFetch,public DiscoveryClientRuleBuilder  (boolean enabled){ this.registryFetchEnabled=enabled; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,withRemoteRegions,public DiscoveryClientRuleBuilder  (String... remoteRegions){ if (this.remoteRegions == null) { this.remoteRegions=new ArrayList<>(); } Collections.addAll(this.remoteRegions remoteRegions); return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\DiscoveryClientResource.java,withVipFetch,public DiscoveryClientRuleBuilder  (String vipFetch){ this.vipFetch=vipFetch; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,newEurekaServerConfig,public static EurekaServerConfig  (){ EurekaServerConfig config=mock(EurekaServerConfig.class); when(config.getPeerEurekaNodesUpdateIntervalMs()).thenReturn((int)EUREKA_NODES_UPDATE_INTERVAL_MS); when(config.shouldSyncWhenTimestampDiffers()).thenReturn(true); when(config.getMaxTimeForReplication()).thenReturn((int)REPLICATION_EXPIRY_TIME_MS); when(config.getMaxElementsInPeerReplicationPool()).thenReturn(10); when(config.getMaxElementsInStatusReplicationPool()).thenReturn(10); when(config.getMaxThreadsForPeerReplication()).thenReturn(1); when(config.getMaxThreadsForStatusReplication()).thenReturn(1); return config; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,newInstanceInfo,public static InstanceInfo  (int index){ Iterator<InstanceInfo> instanceGenerator=InstanceInfoGenerator.newBuilder(10 10).withMetaData(true).build().serviceIterator(); for (int i=0; i < index; i++) { instanceGenerator.next(); } return instanceGenerator.next(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,newReplicationInstance,public static ReplicationInstance  (){ return newReplicationInstanceOf(Action.Register newInstanceInfo(0)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,newReplicationInstanceOf,"public static ReplicationInstance  (Action action InstanceInfo instance){ switch (action) { case Register: return new ReplicationInstance(instance.getAppName() instance.getId() System.currentTimeMillis() null instance.getStatus().name() instance action); case Cancel: return new ReplicationInstance(instance.getAppName() instance.getId() System.currentTimeMillis() null null null action); case Heartbeat: return new ReplicationInstance(instance.getAppName() instance.getId() System.currentTimeMillis() InstanceStatus.OUT_OF_SERVICE.name() instance.getStatus().name() instance action); case StatusUpdate: return new ReplicationInstance(instance.getAppName() instance.getId() System.currentTimeMillis() InstanceStatus.OUT_OF_SERVICE.name() null null action); case DeleteStatusOverride: return new ReplicationInstance(instance.getAppName() instance.getId() System.currentTimeMillis() InstanceStatus.OUT_OF_SERVICE.name() null null action); } throw new IllegalStateException(""Unexpected action "" + action); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\ClusterSampleData.java,newReplicationInstanceResponse,public static ReplicationInstanceResponse  (boolean withInstanceInfo){ return new ReplicationInstanceResponse(200 withInstanceInfo ? newInstanceInfo(1) : null); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,after,@Override protected void  (){ if (eurekaHttpServer != null) { eurekaHttpServer.shutdown(); } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,before,@Override protected void  () throws Throwable { eurekaHttpServer=new SimpleEurekaHttpServer(requestHandler); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,getEurekaHttpServer,public SimpleEurekaHttpServer  (){ return eurekaHttpServer; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\junit\resource\SimpleEurekaHttpServerResource.java,getRequestHandler,public EurekaHttpClient  (){ return requestHandler; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,EurekaHttpRequest,public  (String requestMethod URI requestURI Map<String String> headers){ this.requestMethod=requestMethod; this.requestURI=requestURI; this.headers=Collections.unmodifiableMap(new HashMap<String String>(headers)); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,getHeaders,public Map<String String>  (){ return headers; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,getRequestMethod,public String  (){ return requestMethod; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\EurekaHttpRequest.java,getRequestURI,public URI  (){ return requestURI; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\DiagnosticClient.java,main,"public static void  (String[] args) throws InterruptedException { String discoveryURL=args[0]; long startTime=System.currentTimeMillis(); EurekaServerConfig serverConfig=new DefaultEurekaServerConfig(""eureka.""); JerseyReplicationClient client=JerseyReplicationClient.createReplicationClient(serverConfig new DefaultServerCodecs(serverConfig) discoveryURL); Applications applications=client.getApplications().getEntity(); System.out.println(""Applications count="" + applications.getRegisteredApplications().size()); System.out.println(""Instance count="" + countInstances(applications)); while (true) { long delay=System.currentTimeMillis() - startTime; if (delay >= 30000) { System.out.println(""Processing delay exceeds 30sec; we may be out of sync""); } else { long waitTime=30 * 1000 - delay; System.out.println(""Waiting "" + waitTime / 1000 + ""sec before next fetch...""); Thread.sleep(15 * 1000); } startTime=System.currentTimeMillis(); Applications delta=client.getDelta().getEntity(); Applications merged=EurekaEntityFunctions.mergeApplications(applications delta); if (merged.getAppsHashCode().equals(delta.getAppsHashCode())) { System.out.println(""Hash codes match: "" + delta.getAppsHashCode() + ""(delta count=""+ countInstances(delta)+ ')'); applications=merged; } else { System.out.println(""ERROR: hash codes do not match ("" + delta.getAppsHashCode() + ""(delta) != ""+ merged.getAppsHashCode()+ "" (merged) != ""+ applications.getAppsHashCode()+ ""(old apps)""+ ""(delta count=""+ countInstances(delta)+ ')'); applications=client.getApplications().getEntity(); } } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,InstanceInfoGenerator," (InstanceInfoGeneratorBuilder builder){ this.instanceCount=builder.instanceCount; this.appNames=builder.appNames; this.zone=builder.zone == null ? ""us-east-1c"" : builder.zone; this.taggedId=builder.taggedId; this.withMetaData=builder.includeMetaData; this.includeAsg=builder.includeAsg; this.useInstanceId=builder.useInstanceId; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,InstanceInfoGeneratorBuilder,public  (int instanceCount String... appNames){ this.instanceCount=instanceCount; this.appNames=appNames; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,build,public InstanceInfoGenerator  (){ return new InstanceInfoGenerator(this); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,first,public InstanceInfo  (){ return take(0); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,generateInstanceInfo,"private InstanceInfo  (int appIndex int appInstanceId boolean useInstanceId){ String appName=appNames[appIndex]; String hostName=""instance"" + appInstanceId + '.'+ appName+ "".com""; String privateHostname=""ip-10.0"" + appIndex + "".""+ appInstanceId+ "".compute.internal""; String publicIp=""20.0."" + appIndex + '.'+ appInstanceId; String privateIp=""192.168."" + appIndex + '.'+ appInstanceId; String instanceId=String.format(""i-%04d%04d"" appIndex appInstanceId); if (taggedId) { instanceId=instanceId + '_' + appName; } AmazonInfo dataCenterInfo=AmazonInfo.Builder.newBuilder().addMetadata(MetaDataKey.accountId ""testAccountId"").addMetadata(MetaDataKey.amiId String.format(""ami-%04d%04d"" appIndex appInstanceId)).addMetadata(MetaDataKey.availabilityZone zone).addMetadata(MetaDataKey.instanceId instanceId).addMetadata(MetaDataKey.instanceType ""m2.xlarge"").addMetadata(MetaDataKey.localHostname privateHostname).addMetadata(MetaDataKey.localIpv4 privateIp).addMetadata(MetaDataKey.publicHostname hostName).addMetadata(MetaDataKey.publicIpv4 publicIp).build(); String unsecureURL=""http://"" + hostName + "":8080""; String secureURL=""https://"" + hostName + "":8081""; long now=System.currentTimeMillis(); LeaseInfo leaseInfo=LeaseInfo.Builder.newBuilder().setDurationInSecs(3 * RENEW_INTERVAL).setRenewalIntervalInSecs(RENEW_INTERVAL).setServiceUpTimestamp(now - RENEW_INTERVAL).setRegistrationTimestamp(now).setEvictionTimestamp(now + 3 * RENEW_INTERVAL).setRenewalTimestamp(now + RENEW_INTERVAL).build(); Builder builder=useInstanceId ? InstanceInfo.Builder.newBuilder().setInstanceId(instanceId) : InstanceInfo.Builder.newBuilder(); builder.setActionType(ActionType.ADDED).setAppGroupName(appName + ""Group"").setAppName(appName).setHostName(hostName).setIPAddr(publicIp).setPort(8080).setSecurePort(8081).enablePort(PortType.SECURE true).setHealthCheckUrls(""/healthcheck"" unsecureURL + ""/healthcheck"" secureURL + ""/healthcheck"").setHomePageUrl(""/homepage"" unsecureURL + ""/homepage"").setStatusPageUrl(""/status"" unsecureURL + ""/status"").setLeaseInfo(leaseInfo).setStatus(InstanceStatus.UP).setVIPAddress(appName + "":8080"").setSecureVIPAddress(appName + "":8081"").setDataCenterInfo(dataCenterInfo).setLastUpdatedTimestamp(System.currentTimeMillis() - 100).setLastDirtyTimestamp(System.currentTimeMillis() - 100).setIsCoordinatingDiscoveryServer(true).enablePort(PortType.UNSECURE true); if (includeAsg) { builder.setASGName(appName + ""ASG""); } if (withMetaData) { builder.add(""appKey"" + appIndex Integer.toString(appInstanceId)); } return builder.build(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,hasNext,@Override public boolean  (){ return returned < instanceCount; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,newBuilder,public static InstanceInfoGeneratorBuilder  (int instanceCount String... appNames){ return new InstanceInfoGeneratorBuilder(instanceCount appNames); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,next,"@Override public InstanceInfo  (){ if (!hasNext()) { throw new NoSuchElementException(""no more InstanceInfo elements""); } InstanceInfo toReturn=generateInstanceInfo(currentApp appInstanceIds[currentApp] useInstanceId); appInstanceIds[currentApp]++; curren"
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,remove,"@Override public void  (){ throw new IllegalStateException(""method not supported""); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,serviceIterator,"public Iterator<InstanceInfo>  (){ return new Iterator<InstanceInfo>(){ private int returned; private final int[] appInstanceIds=new int[appNames.length]; private int currentApp; @Override public boolean hasNext(){ return returned < instanceCount; } @Override public InstanceInfo next(){ if (!hasNext()) { throw new NoSuchElementException(""no more InstanceInfo elements""); } InstanceInfo toReturn=generateInstanceInfo(currentApp appInstanceIds[currentApp] useInstanceId); appInstanceIds[currentApp]++; currentApp=(currentApp + 1) % appNames.length; returned++; return toReturn; } @Override public void remove(){ throw new IllegalStateException(""method not supported""); } } ; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,take,public InstanceInfo  (int idx){ return toInstanceList().get(idx); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,takeDelta,public Applications  (int count){ if (currentIt == null) { currentIt=serviceIterator(); allApplications=new Applications(); } List<InstanceInfo> instanceBatch=new ArrayList<InstanceInfo>(); for (int i=0; i < count; i++) { InstanceInfo next=currentIt.next(); next.setActionType(ActionType.ADDED); instanceBatch.add(next); } Applications nextBatch=EurekaEntityFunctions.toApplications(toApplicationMap(instanceBatch)); allApplications=mergeApplications(allApplications nextBatch); nextBatch.setAppsHashCode(allApplications.getAppsHashCode()); return nextBatch; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,takeOne,public static InstanceInfo  (){ return newBuilder(1 1).withMetaData(true).build().serviceIterator().next(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,toApplications,public Applications  (){ Map<String Application> appsByName=new HashMap<>(); Iterator<InstanceInfo> it=serviceIterator(); while (it.hasNext()) { InstanceInfo instanceInfo=it.next(); Application instanceApp=appsByName.get(instanceInfo.getAppName()); if (instanceApp == null) { instanceApp=new Application(instanceInfo.getAppName()); appsByName.put(instanceInfo.getAppName() instanceApp); } instanceApp.addInstance(instanceInfo); } Applications applications=new Applications(); for ( Application app : appsByName.values()) { applications.addApplication(app); } applications.shuffleInstances(false); applications.setAppsHashCode(applications.getReconcileHashCode()); applications.setVersion(1L); return applications; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,toInstanceList,public List<InstanceInfo>  (){ List<InstanceInfo> result=new ArrayList<>(instanceCount); Iterator<InstanceInfo> it=serviceIterator(); while (it.hasNext()) { InstanceInfo instanceInfo=it.next(); result.add(instanceInfo); } return result; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,withAsg,public InstanceInfoGeneratorBuilder  (boolean includeAsg){ this.includeAsg=includeAsg; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,withMetaData,public InstanceInfoGeneratorBuilder  (boolean includeMetaData){ this.includeMetaData=includeMetaData; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,withTaggedId,public InstanceInfoGeneratorBuilder  (boolean taggedId){ this.taggedId=taggedId; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,withUseInstanceId,public InstanceInfoGeneratorBuilder  (boolean useInstanceId){ this.useInstanceId=useInstanceId; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\InstanceInfoGenerator.java,withZone,public InstanceInfoGeneratorBuilder  (String zone){ this.zone=zone; return this; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,applicationNames,public static Set<String>  (Applications applications){ Set<String> names=new HashSet<String>(); for ( Application application : applications.getRegisteredApplications()) { names.add(application.getName()); } return names; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,copyOf,public static Application  (Application application){ Application copy=new Application(application.getName()); for ( InstanceInfo instance : application.getInstances()) { copy.addInstance(instance); } return copy; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,countInstances,public static int  (Applications applications){ int count=0; for ( Application application : applications.getRegisteredApplications()) { count+=application.getInstances().size(); } return count; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,merge,public static Applications  (Applications first Applications second){ Set<String> firstNames=applicationNames(first); Set<String> secondNames=applicationNames(second); Set<String> allNames=new HashSet<String>(firstNames); allNames.addAll(secondNames); Applications merged=new Applications(); for ( String appName : allNames) { if (firstNames.contains(appName)) { if (secondNames.contains(appName)) { merged.addApplication(merge(first.getRegisteredApplications(appName) second.getRegisteredApplications(appName))); } else { merged.addApplication(copyOf(first.getRegisteredApplications(appName))); } } else { merged.addApplication(copyOf(second.getRegisteredApplications(appName))); } } return updateMeta(merged); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,toApplicationMap,public static Map<String Application>  (List<InstanceInfo> instances){ Map<String Application> applicationMap=new HashMap<String Application>(); for ( InstanceInfo instance : instances) { String appName=instance.getAppName(); Application application=applicationMap.get(appName); if (application == null) { applicationMap.put(appName application=new Application(appName)); } application.addInstance(instance); } return applicationMap; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,toApplications,public static Applications  (Map<String Application> applicationMap){ Applications applications=new Applications(); for ( Application application : applicationMap.values()) { applications.addApplication(application); } return updateMeta(applications); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\util\ApplicationFunctions.java,updateMeta,public static Applications  (Applications applications){ applications.setVersion(1L); applications.setAppsHashCode(applications.getReconcileHashCode()); return applications; } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\util\InstanceInfoGeneratorTest.java,testInstanceInfoStream,"@Test public void  () throws Exception { Iterator<InstanceInfo> it=InstanceInfoGenerator.newBuilder(4 ""app1"" ""app2"").build().serviceIterator(); assertThat(it.next().getAppName() is(equalTo(""APP1""))); assertThat(it.next().getAppName() is(equalTo(""APP2"")));"
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServerTest.java,getEurekaHttpClient,"@Override protected EurekaHttpClient  (URI serviceURI){ Preconditions.checkState(eurekaHttpClient == null ""EurekaHttpClient has been already created""); httpClientFactory=JerseyEurekaHttpClientFactory.newBuilder().withClientName(""test"").withMaxConnectionsP"
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\test\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServerTest.java,tearDown,@Override @After public void  () throws Exception { httpClientFactory.shutdown(); super.tearDown(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,SimpleEurekaHttpServer,"public  (EurekaHttpClient requestHandler EurekaTransportEventListener eventListener) throws IOException { this.requestHandler=requestHandler; this.eventListener=eventListener; this.httpServer=HttpServer.create(new InetSocketAddress(0) 1); httpServer.createContext(""/v2"" createEurekaV2Handle()); httpServer.setExecutor(null); httpServer.start(); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,createEurekaV2Handle,"private HttpHandler  (){ return new HttpHandler(){ @Override public void handle( HttpExchange httpExchange) throws IOException { if (eventListener != null) { eventListener.onHttpRequest(mapToEurekaHttpRequest(httpExchange)); } try { String method=httpExchange.getRequestMethod(); String path=httpExchange.getRequestURI().getPath(); if (path.startsWith(""/v2/apps"")) { if (""GET"".equals(method)) { handleAppsGET(httpExchange); } else if (""POST"".equals(method)) { handleAppsPost(httpExchange); } else if (""PUT"".equals(method)) { handleAppsPut(httpExchange); } else if (""DELETE"".equals(method)) { handleAppsDelete(httpExchange); } else { httpExchange.sendResponseHeaders(HttpServletResponse.SC_NOT_FOUND 0); } } else if (path.startsWith(""/v2/vips"")) { handleVipsGET(httpExchange); } else if (path.startsWith(""/v2/svips"")) { handleSecureVipsGET(httpExchange); } else if (path.startsWith(""/v2/instances"")) { handleInstanceGET(httpExchange); } } catch ( Exception e) { logger.error(""HttpServer error"" e); httpExchange.sendResponseHeaders(500 0); } httpExchange.close(); } } ; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,getQueryParam,"private static String  (HttpExchange httpExchange String queryParam){ String query=httpExchange.getRequestURI().getQuery(); if (query != null) { for ( String part : query.split(""&"")) { String[] keyValue=part.split(""=""); if (keyValue.length > 1 && keyValue[0].equals(queryParam)) { return keyValue[1]; } } } return null; } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,getServerPort,public int  (){ return httpServer.getAddress().getPort(); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,getServiceURI,"public URI  (){ try { return new URI(""http://localhost:"" + getServerPort() + ""/v2/""); } catch ( URISyntaxException e) { throw new IllegalStateException(""Cannot parse service URI"" e); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handle,@Override public void  (HttpExchange httpExchange) throws IOException { if (eventListener != null) { eventListener.onHttpRequest(mapToEurekaHttpRequest(httpExchange)); } try { String method=httpExchange.getRequestMethod(); String path=httpExchange.getRequ
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handleAppsDelete,"private void  (HttpExchange httpExchange) throws IOException { EurekaHttpResponse<?> httpResponse; String path=httpExchange.getRequestURI().getPath(); Matcher matcher; if ((matcher=Pattern.compile(""/v2/apps/([^/]+)/([^/]+)"").matcher(path)).matches()) { httpResponse=requestHandler.cancel(matcher.group(1) matcher.group(2)); } else if ((matcher=Pattern.compile(""/v2/apps/([^/]+)/([^/]+)/status"").matcher(path)).matches()) { httpResponse=requestHandler.deleteStatusOverride(matcher.group(1) matcher.group(2) null); } else { httpExchange.sendResponseHeaders(HttpServletResponse.SC_NOT_FOUND 0); return; } mapResponse(httpExchange httpResponse); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handleAppsGET,"private void  (HttpExchange httpExchange) throws IOException { EurekaHttpResponse<?> httpResponse; String path=httpExchange.getRequestURI().getPath(); Matcher matcher; if (path.matches(""/v2/apps[/]?"")) { String regions=getQueryParam(httpExchange ""regions""); httpResponse=regions == null ? requestHandler.getApplications() : requestHandler.getApplications(regions); } else if (path.matches(""/v2/apps/delta[/]?"")) { String regions=getQueryParam(httpExchange ""regions""); httpResponse=regions == null ? requestHandler.getDelta() : requestHandler.getDelta(regions); } else if ((matcher=Pattern.compile(""/v2/apps/([^/]+)/([^/]+)"").matcher(path)).matches()) { httpResponse=requestHandler.getInstance(matcher.group(1) matcher.group(2)); } else { httpExchange.sendResponseHeaders(HttpServletResponse.SC_NOT_FOUND 0); return; } if (httpResponse == null) { httpResponse=EurekaHttpResponse.anEurekaHttpResponse(HttpServletResponse.SC_NOT_FOUND).build(); } mapResponse(httpExchange httpResponse); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handleAppsPost,"private void  (HttpExchange httpExchange) throws IOException { EurekaHttpResponse<?> httpResponse; String path=httpExchange.getRequestURI().getPath(); if (path.matches(""/v2/apps/([^/]+)(/)?"")) { InstanceInfo instance=decoder.decode(httpExchange.getRequestBody() InstanceInfo.class); httpResponse=requestHandler.register(instance); } else { httpExchange.sendResponseHeaders(HttpServletResponse.SC_NOT_FOUND 0); return; } mapResponse(httpExchange httpResponse); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handleAppsPut,"private void  (HttpExchange httpExchange) throws IOException { EurekaHttpResponse<?> httpResponse; String path=httpExchange.getRequestURI().getPath(); Matcher matcher; if ((matcher=Pattern.compile(""/v2/apps/([^/]+)/([^/]+)"").matcher(path)).matches()) { String overriddenstatus=getQueryParam(httpExchange ""overriddenstatus""); httpResponse=requestHandler.sendHeartBeat(matcher.group(1) matcher.group(2) null overriddenstatus == null ? null : InstanceStatus.valueOf(overriddenstatus)); } else if ((matcher=Pattern.compile(""/v2/apps/([^/]+)/([^/]+)/status"").matcher(path)).matches()) { String newStatus=getQueryParam(httpExchange ""value""); httpResponse=requestHandler.statusUpdate(matcher.group(1) matcher.group(2) newStatus == null ? null : InstanceStatus.valueOf(newStatus) null); } else { httpExchange.sendResponseHeaders(HttpServletResponse.SC_NOT_FOUND 0); return; } mapResponse(httpExchange httpResponse); } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handleInstanceGET,"private void  (HttpExchange httpExchange) throws IOException { Matcher matcher=Pattern.compile(""/v2/instances/([^/]+)"").matcher(httpExchange.getRequestURI().getPath()); if (matcher.matches()) { mapResponse(httpExchange requestHandler.getInstance(matcher.group(1))); } else { httpExchange.sendResponseHeaders(HttpServletResponse.SC_NOT_FOUND 0); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handleSecureVipsGET,"private void  (HttpExchange httpExchange) throws IOException { Matcher matcher=Pattern.compile(""/v2/svips/([^/]+)"").matcher(httpExchange.getRequestURI().getPath()); if (matcher.matches()) { String regions=getQueryParam(httpExchange ""regions""); EurekaHttpResponse<Applications> httpResponse=regions == null ? requestHandler.getSecureVip(matcher.group(1)) : requestHandler.getSecureVip(matcher.group(1) regions); mapResponse(httpExchange httpResponse); } else { httpExchange.sendResponseHeaders(HttpServletResponse.SC_NOT_FOUND 0); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,handleVipsGET,"private void  (HttpExchange httpExchange) throws IOException { Matcher matcher=Pattern.compile(""/v2/vips/([^/]+)"").matcher(httpExchange.getRequestURI().getPath()); if (matcher.matches()) { String regions=getQueryParam(httpExchange ""regions""); EurekaHttpResponse<Applications> httpResponse=regions == null ? requestHandler.getVip(matcher.group(1)) : requestHandler.getVip(matcher.group(1) regions); mapResponse(httpExchange httpResponse); } else { httpExchange.sendResponseHeaders(HttpServletResponse.SC_NOT_FOUND 0); } } "
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,mapResponse,private <T>void  (HttpExchange httpExchange EurekaHttpResponse<T> response) throws IOException { for ( Map.Entry<String String> headerEntry : response.getHeaders().entrySet()) { httpExchange.getResponseHeaders().add(headerEntry.getKey() headerEntry.getValue()); } if (response.getStatusCode() / 100 != 2) { httpExchange.sendResponseHeaders(response.getStatusCode() 0); return; } T entity=response.getEntity(); byte[] body=null; if (entity != null) { ByteArrayOutputStream bos=new ByteArrayOutputStream(); encoder.encode(entity bos); body=bos.toByteArray(); } httpExchange.sendResponseHeaders(response.getStatusCode() body == null ? 0 : body.length); if (body != null) { OutputStream responseStream=httpExchange.getResponseBody(); try { responseStream.write(body); responseStream.flush(); } finally { responseStream.close(); } } } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,mapToEurekaHttpRequest,private EurekaHttpRequest  (HttpExchange httpExchange){ Headers exchangeHeaders=httpExchange.getRequestHeaders(); Map<String String> headers=new HashMap<>(); for ( String key : exchangeHeaders.keySet()) { headers.put(key exchangeHeaders.getFirst(key)); } return new EurekaHttpRequest(httpExchange.getRequestMethod() httpExchange.getRequestURI() headers); } 
C:\Users\User\Desktop\Thesis\eureka\eureka-test-utils\src\main\java\com\netflix\discovery\shared\transport\SimpleEurekaHttpServer.java,shutdown,public void  (){ httpServer.stop(0); } 
