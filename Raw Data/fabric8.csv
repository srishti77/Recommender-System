ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\ExceptionResponseMapper.java,fromResponse,"@Override public Exception  (Response response){ try { Object entity=response.getEntity(); String message=""No message""; if (entity instanceof InputStream) { InputStream inputStream=(InputStream)entity; message=IOHelpers.readFully(inputStream); } else if ("
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\main\java\io\fabric8\agent\Agent.java,agentmain,public static void  (final String args final Instrumentation instrumentation) throws Exception { JvmAgent.agentmain(args instrumentation); ApmAgent.agentmain(args instrumentation); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\main\java\io\fabric8\agent\Agent.java,premain,public static void  (String args Instrumentation instrumentation) throws Exception { JvmAgent.premain(args instrumentation); ApmAgent.premain(args instrumentation); } 
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,configureAuthorization,public static void  (WebClient webClient String username String authorizationType String authorization){ HTTPConduit conduit=WebClient.getConfig(webClient).getHttpConduit(); if (Strings.isNotBlank(username)) { conduit.getAuthorization().setUserName(username); } if (Strings.isNotBlank(authorizationType) && Strings.isNotBlank(authorization)) { conduit.getAuthorization().setUserName(username); conduit.getAuthorization().setAuthorizationType(authorizationType); conduit.getAuthorization().setAuthorization(authorization); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\main\java\io\fabric8\agent\AgentLauncher.java,loadAgent,"public static void  (String pid String args) throws IOException { VirtualMachine vm; try { vm=VirtualMachine.attach(pid); } catch ( AttachNotSupportedException x) { IOException ioe=new IOException(x.getMessage()); ioe.initCause(x); throw ioe; } try { String agent=AgentLauncher.class.getProtectionDomain().getCodeSource().getLocation().getPath(); System.err.println(""Trying to load agent "" + agent); vm.loadAgent(agent args); System.out.println(""Agent successfully loaded""); } catch ( AgentLoadException x) { IOException ioe=new IOException(x.getMessage()); ioe.initCause(x); throw ioe; } catch ( AgentInitializationException x) { IOException ioe=new IOException(x.getMessage()); ioe.initCause(x); throw ioe; } finally { if (vm != null) { vm.detach(); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\main\java\io\fabric8\agent\AgentLauncher.java,main,"public static void  (String[] args){ if (args.length > 0) { try { System.err.println(""Attaching Fabric8 Agent to process: "" + args[0]); String options=""""; for (int i=1; i < args.length; i++) { options+=args[i]; if (i < (args.length - 1)) { options+="" ""; } } loadAgent(args[0] options); } catch ( Throwable e) { e.printStackTrace(); } } else { System.err.println(""Usage is "" + AgentLauncher.class.getName() + "" pid""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,configureCaCert,"public static void  (WebClient webClient String caCertData File caCertFile){ try { KeyStore trustStore=createTrustStore(caCertData caCertFile); TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); trustManagerFactory.init(trustStore); TrustManager[] trustManagers=trustManagerFactory.getTrustManagers(); HTTPConduit conduit=WebClient.getConfig(webClient).getHttpConduit(); TLSClientParameters params=conduit.getTlsClientParameters(); if (params == null) { params=new TLSClientParameters(); conduit.setTlsClientParameters(params); } TrustManager[] existingTrustManagers=params.getTrustManagers(); if (existingTrustManagers != null && existingTrustManagers.length > 0) { List<TrustManager> list=new ArrayList<>(); list.addAll(Arrays.asList(existingTrustManagers)); list.addAll(Arrays.asList(trustManagers)); trustManagers=list.toArray(new TrustManager[list.size()]); } params.setTrustManagers(trustManagers); } catch ( Exception e) { LOG.error(""Could not create trust manager for "" + caCertFile e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,configureClientCert,"public static void  (WebClient webClient String clientCertData File clientCertFile String clientKeyData File clientKeyFile String clientKeyAlgo char[] clientKeyPassword){ try { KeyStore keyStore=createKeyStore(clientCertData clientCertFile clientKeyData clientKeyFile clientKeyAlgo clientKeyPassword); KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); keyManagerFactory.init(keyStore clientKeyPassword); KeyManager[] keyManagers=keyManagerFactory.getKeyManagers(); HTTPConduit conduit=WebClient.getConfig(webClient).getHttpConduit(); TLSClientParameters params=conduit.getTlsClientParameters(); if (params == null) { params=new TLSClientParameters(); conduit.setTlsClientParameters(params); } KeyManager[] existingKeyManagers=params.getKeyManagers(); if (existingKeyManagers != null && existingKeyManagers.length > 0) { List<KeyManager> list=new ArrayList<>(); list.addAll(Arrays.asList(existingKeyManagers)); list.addAll(Arrays.asList(keyManagers)); keyManagers=list.toArray(new KeyManager[list.size()]); } params.setKeyManagers(keyManagers); } catch ( Exception e) { LOG.error(""Could not create key manager for "" + clientCertFile + "" (""+ clientKeyFile+ "")"" e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,configureUserAndPassword,public static void  (WebClient webClient String username String password){ if (Strings.isNotBlank(username) && Strings.isNotBlank(password)) { HTTPConduit conduit=WebClient.getConfig(webClient).getHttpConduit(); conduit.getAuthorization().setUserName(username); conduit.getAuthorization().setPassword(password); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,createKeyStore,"public static KeyStore  (String clientCertData File clientCertFile String clientKeyData File clientKeyFile String clientKeyAlgo char[] clientKeyPassword) throws Exception { try (InputStream certInputStream=getInputStreamFromDataOrFile(clientCertData clientCertFile)){ CertificateFactory certFactory=CertificateFactory.getInstance(""X509""); X509Certificate cert=(X509Certificate)certFactory.generateCertificate(certInputStream); InputStream keyInputStream=getInputStreamFromDataOrFile(clientKeyData clientKeyFile); PEMReader reader=new PEMReader(keyInputStream); RSAPrivateCrtKeySpec keySpec=new PKCS1EncodedKeySpec(reader.getDerBytes()).getKeySpec(); KeyFactory kf=KeyFactory.getInstance(clientKeyAlgo); RSAPrivateKey privKey=(RSAPrivateKey)kf.generatePrivate(keySpec); KeyStore keyStore=KeyStore.getInstance(""JKS""); keyStore.load(null clientKeyPassword); String alias=cert.getSubjectX500Principal().getName(); keyStore.setKeyEntry(alias privKey clientKeyPassword new Certificate[]{cert}); return keyStore; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,createPrivateTokenFilter,"public static ClientRequestFilter  (final String privateToken){ ClientRequestFilter interceptor=new ClientRequestFilter(){ @Override public void filter( ClientRequestContext requestContext) throws IOException { requestContext.getHeaders().add(""PRIVATE-TOKEN"" privateToken); } } ; return interceptor; } "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,createProviders,public static List<Object>  (){ List<Object> providers=new ArrayList<Object>(); Annotations[] annotationsToUse=JacksonJaxbJsonProvider.DEFAULT_ANNOTATIONS; ObjectMapper objectMapper=createObjectMapper(); providers.add(new JacksonJaxbJsonProvider(objectMapper annotationsToUse)); providers.add(new ExceptionResponseMapper()); return providers; } 
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,createTrustStore,"public static KeyStore  (String caCertData File caCertFile) throws Exception { try (InputStream pemInputStream=getInputStreamFromDataOrFile(caCertData caCertFile)){ CertificateFactory certFactory=CertificateFactory.getInstance(""X509""); X509Certificate cert=(X509Certificate)certFactory.generateCertificate(pemInputStream); KeyStore trustStore=KeyStore.getInstance(""JKS""); trustStore.load(null); String alias=cert.getSubjectX500Principal().getName(); trustStore.setCertificateEntry(alias cert); return trustStore; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,disableHostNameChecks,"public static void  (WebClient webClient){ HTTPConduit conduit=WebClient.getConfig(webClient).getHttpConduit(); TLSClientParameters params=conduit.getTlsClientParameters(); if (params == null) { params=new TLSClientParameters(); conduit.setTlsClientParameters(params); } LOG.debug(""Disabling host name checks""); params.setHostnameVerifier(new HostnameVerifier(){ @Override public boolean verify( String s  SSLSession sslSession){ return true; } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,disableSslChecks,public static void  (WebClient webClient){ HTTPConduit conduit=WebClient.getConfig(webClient).getHttpConduit(); TLSClientParameters params=conduit.getTlsClientParameters(); if (params == null) { params=new TLSClientParameters(); conduit.setTlsClientParameters(params); } params.setTrustManagers(new TrustManager[]{new TrustEverythingSSLTrustManager()}); params.setDisableCNCheck(true); } 
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,enableDigestAuthenticaionType,public static void  (WebClient webClient){ HTTPConduit conduit=WebClient.getConfig(webClient).getHttpConduit(); conduit.setAuthSupplier(new DigestAuthSupplier()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,filter,"@Override public void  (ClientRequestContext requestContext) throws IOException { requestContext.getHeaders().add(""PRIVATE-TOKEN"" privateToken); } "
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,getInputStreamFromDataOrFile,public static InputStream  (String data File file) throws FileNotFoundException { if (data != null) { return new Base64DecoderStream(new ByteArrayInputStream(data.getBytes())); } if (file != null) { return new FileInputStream(file); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\cxf-utils\src\main\java\io\fabric8\utils\cxf\WebClients.java,verify,@Override public boolean  (String s SSLSession sslSession){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestApp.java,checkEnabledMetrics,"protected static void  (){ MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer(); if (mBeanServer != null) { if (mBeanServer.isRegistered(AGENT_MBEAN_NAME)) { if (enabledAgent.compareAndSet(false true)) { try { mBeanServer.invoke(AGENT_MBEAN_NAME ""startMetrics"" new Object[0] new String[0]); System.out.println(""Enabled agent metrics "" + AGENT_MBEAN_NAME); } catch ( Exception e) { System.out.println(""Failed to invoke the mbean: "" + AGENT_MBEAN_NAME); e.printStackTrace(); } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestApp.java,main,"public static void  (String args[]) throws Exception { try { System.err.println(""RUNNING ...""); checkEnabledMetrics(); final int COUNT=20; for (int i=0; i < COUNT; i++) { TestLoad testLoad=new TestLoad(); pool.submit(testLoad); } TestLoad testLoad=new TestLoad(1000); pool.submit(testLoad); } catch ( Throwable e) { e.printStackTrace(); } System.err.println(""WAITING FOR LOAD TO COMPLETE ...""); pool.awaitTermination(5 TimeUnit.MINUTES); System.err.println(""STOPPED""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,TestLoad,public  (int maxIterations){ this.MAX_ITERATIONS=maxIterations; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,doSomethingElse,public void  (){ sleep(20); count2.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,getCount,public long  (){ return count.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,load,public void  (TestValues value){ load1(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,load1,public void  (TestValues value){ sleep(100); load2(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,load2,public void  (TestValues value){ sleep(10); count.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,run,"public void  (){ for (int i=0; i < MAX_ITERATIONS; i++) { for ( TestValues value : TestValues.values()) { System.out.println(Thread.currentThread().getName() + "" running #"" + i); load(value); if (i % 2 == 0) { doSomethingElse(); } } } System.out.println(Thread.currentThread().getName() + "" done""); done.set(true); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestLoad.java,sleep,private void  (long sleepTime){ try { Thread.sleep(sleepTime); } catch ( InterruptedException e) { } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestThreadFactory.java,TestThreadFactory,public  (String prefix){ this.prefix=prefix; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-agent\src\test\java\io\fabric8\testApp\TestThreadFactory.java,newThread,"@Override public Thread  (Runnable task){ String name=prefix + ""-"" + counter++; return new Thread(task name); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgentLauncher.java,loadAgent,"public static void  (String pid String args) throws IOException { VirtualMachine vm; try { vm=VirtualMachine.attach(pid); } catch ( AttachNotSupportedException x) { IOException ioe=new IOException(x.getMessage()); ioe.initCause(x); throw ioe; } try { String agent=ApmAgentLauncher.class.getProtectionDomain().getCodeSource().getLocation().getPath(); System.err.println(""Trying to load agent "" + agent); vm.loadAgent(agent args); System.out.println(""Agent successfully loaded""); } catch ( AgentLoadException x) { IOException ioe=new IOException(x.getMessage()); ioe.initCause(x); throw ioe; } catch ( AgentInitializationException x) { IOException ioe=new IOException(x.getMessage()); ioe.initCause(x); throw ioe; } finally { if (vm != null) { vm.detach(); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgentLauncher.java,main,"public static void  (String[] args){ if (args.length > 0) { try { System.err.println(""Attaching to process: "" + args[0]); String options=""""; for (int i=1; i < args.length; i++) { options+=args[i]; if (i < (args.length - 1)) { options+="" ""; } } loadAgent(args[0] options); } catch ( Throwable e) { e.printStackTrace(); } } else { System.err.println(""Usage is "" + ApmAgentLauncher.class.getName() + "" pid""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,ApmConfiguration," (){ addToBlackList(""java""); addToBlackList(""com.sun""); addToBlackList(""sun""); addToBlackList(""$Proxy""); addToBlackList(""ByCGLIB$$""); addToBlackList(""io.fabric8.apmagent""); addToBlackList(""org.apache.camel.spring.remoting""); addToBlackList(""org.jolokia""); addToBlackList(""org.springframework""); addToBlackList(""org.eclipse""); addToBlackList(""org.apache.xbean""); addToBlackList(""org.slf4j""); addToBlackList(""org.omg""); addToBlackList(""com.apple""); addToBlackList(""oracle""); addToBlackList(""org.apache.log4j""); addToBlackList(""org.objectweb.asm""); addToBlackList(""org.apache.commons""); addToBlackList(""org.apache.jasper""); addToBlackList(""jrockit""); addToBlackList(""org.json""); addToBlackList(""org.fusesource.hawtbuf""); addToBlackList(""com.intellij""); addToBlackList(""org.w3c.dom""); addToBlackList(""com.codahale""); addToWhiteList(""io.fabric8.testApp""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,addChangeListener,public void  (ApmConfigurationChangeListener changeListener){ changeListeners.add(changeListener); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,addToBlackList,"@Override public void  (String s){ FilterItem filterItem=new FilterItem(); String[] classAndMethod=s.split(""@""); filterItem.setClassName(classAndMethod[0]); if (classAndMethod.length > 1) { filterItem.setMethodName(classAndMethod[1]); } blackFilterList.ad"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,addToWhiteList,"@Override public void  (String s){ FilterItem filterItem=new FilterItem(); String[] classAndMethod=s.split(""@""); filterItem.setClassName(classAndMethod[0]); if (classAndMethod.length > 1) { filterItem.setMethodName(classAndMethod[1]); } whiteFilterList.ad"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,convert,private Object  (Object value Class type) throws Exception { PropertyEditor editor=PropertyEditorManager.findEditor(type); if (editor != null) { editor.setAsText(value.toString()); return editor.getValue(); } if (type == URI.class) { return new URI(value.toString()); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,findSetterMethod,"private Method  (String name){ String methodName=""set"" + name.substring(0 1).toUpperCase() + name.substring(1); Method[] methods=ApmConfiguration.class.getMethods(); for ( Method method : methods) { Class params[]=method.getParameterTypes(); if (method.getName().equals(methodName) && params.length == 1) { return method; } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,fireConfigurationChanged,private void  (){ for ( ApmConfigurationChangeListener apmConfigurationChangeListener : this.changeListeners) { apmConfigurationChangeListener.configurationChanged(); } resetChanged(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,getBlackList,@Override public String  (){ return getListAsString(blackFilterList); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,getListAsString,"private String  (List<FilterItem> list){ String result=""""; if (list != null && !list.isEmpty()) { for (int i=0; i < list.size(); i++) { FilterItem filterItem=list.get(i); result+=filterItem.getClassName(); String methodName=filterItem.getMethodName(); if (methodName != null && methodName.length() > 0) { result+=""@"" + methodName; } if (i < (list.size() - 1)) { result+="" ""; } } } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,getMethodMetricDepth,public int  (){ return methodMetricDepth; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,getSamplingInterval,public int  (){ return samplingInterval; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,getStrategy,public String  (){ return strategy.name(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,getStrategyImpl,public STRATEGY  (){ return strategy; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,getThreadMetricDepth,public int  (){ return threadMetricDepth; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,getWhiteList,@Override public String  (){ return getListAsString(whiteFilterList); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,initalizeFromProperties,public void  (Properties properties){ for ( Map.Entry entry : properties.entrySet()) { if (entry.getKey() != null && entry.getValue() != null) { setProperty(entry.getKey().toString() entry.getValue().toString()); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,initializeList,"private void  (String str List<FilterItem> list){ String[] split=str.split("" ""); for ( String s : split) { FilterItem filterItem=new FilterItem(); String[] classAndMethod=s.split(""@""); filterItem.setClassName(classAndMethod[0]); if (classAndMethod.length > 1) { filterItem.setMethodName(classAndMethod[1]); } list.add(filterItem); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isAsyncTransformation,@Override public boolean  (){ return asyncTransformation; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isAudit,public boolean  (String className String methodName){ return isWhiteListed(className methodName) || !isBlackListed(className methodName); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isAutoStartMetrics,public boolean  (){ return autoStartMetrics; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isBlackListed,public boolean  (String className String methodName){ for ( FilterItem item : blackFilterList) { if (item.matches(className methodName true)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isDebug,@Override public boolean  (){ return debug; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isFilterChanged,public boolean  (){ return filterChanged; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isMethodMetricDepthChanged,public boolean  (){ return methodMetricDepthChanged; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isStartJolokiaAgent,public boolean  (){ return startJolokiaAgent; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isStrategyChanged,public boolean  (){ return strategyChanged; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isThreadMetricDepthChanged,public boolean  (){ return threadMetricDepthChanged; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isTrace,@Override public boolean  (){ return trace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isUsePlatformMBeanServer,public boolean  (){ return usePlatformMBeanServer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isVerifyClasses,public boolean  (){ return verifyClasses; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,isWhiteListed,public boolean  (String className String methodName){ for ( FilterItem item : whiteFilterList) { if (item.matches(className methodName false)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,removeChangeListener,public void  (ApmConfigurationChangeListener changeListener){ changeListeners.remove(changeListener); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,resetChanged,private void  (){ filterChanged=false; methodMetricDepthChanged=false; threadMetricDepthChanged=false; strategyChanged=false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setAsyncTransformation,@Override public void  (boolean asyncTransformation){ this.asyncTransformation=asyncTransformation; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setAutoStartMetrics,public void  (boolean autoStartMetrics){ this.autoStartMetrics=autoStartMetrics; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setBlackList,@Override public void  (String blackList){ this.blackFilterList=new ArrayList<>(); initializeList(blackList this.blackFilterList); filterChanged=true; fireConfigurationChanged(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setDebug,@Override public void  (boolean debug){ this.debug=debug; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setMethodMetricDepth,public void  (int methodMetricDepth){ this.methodMetricDepth=methodMetricDepth; this.methodMetricDepthChanged=true; fireConfigurationChanged(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setProperty,"private void  (String name Object value){ try { Method setter=findSetterMethod(name); if (setter != null) { if (value == null || value.getClass().equals(setter.getParameterTypes()[0])) { setter.invoke(this value); } else { setter.invoke(this convert(value setter.getParameterTypes()[0])); } } } catch ( Throwable e) { logger.warn(""Failed to set property: "" + e.getMessage() e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setSamplingInterval,public void  (int samplingInterval){ this.samplingInterval=samplingInterval; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setStartJolokiaAgent,public void  (boolean startJolokiaAgent){ this.startJolokiaAgent=startJolokiaAgent; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setStrategy,public void  (String name){ STRATEGY newStrategy=STRATEGY.getStrategy(name); if (!this.strategy.equals(newStrategy)) { this.strategy=STRATEGY.getStrategy(name); this.strategyChanged=true; fireConfigurationChanged(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setThreadMetricDepth,public void  (int threadMetricDepth){ this.threadMetricDepth=threadMetricDepth; this.threadMetricDepthChanged=true; fireConfigurationChanged(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setTrace,@Override public void  (boolean trace){ this.trace=trace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setUsePlatformMBeanServer,public void  (boolean usePlatformMBeanServer){ this.usePlatformMBeanServer=usePlatformMBeanServer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setVerifyClasses,public void  (boolean verifyClasses){ this.verifyClasses=verifyClasses; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmConfiguration.java,setWhiteList,@Override public void  (String whiteList){ whiteFilterList=new ArrayList<>(); initializeList(whiteList this.whiteFilterList); filterChanged=true; fireConfigurationChanged(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,ApmAgent,private  (){ this.apmAgentContext=new ApmAgentContext(this); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,agentmain,"public static void  (final String args final Instrumentation instrumentation) throws Exception { try { ApmAgent agent=ApmAgent.INSTANCE; if (agent.initialize(instrumentation args)) { if (agent.getConfiguration().isStartJolokiaAgent()) { JvmAgent.agentmain(args instrumentation); } } } catch ( Exception e) { LOG.error(""Failed in agentmain due "" + e.getMessage() e); throw e; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,configurationChanged,@Override public void  (){ if (started.get()) { if (configuration.isMethodMetricDepthChanged()) { apmAgentContext.methodMetricsDepthChanged(); } if (configuration.isThreadMetricDepthChanged()) { apmAgentContext.threadMetricsDepthChanged(); } if (configura
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,enterMethod,public static void  (String methodName){ if (INSTANCE.started.get()) { INSTANCE.apmAgentContext.enterMethod(Thread.currentThread() methodName false); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,exitMethod,public static void  (String methodName){ if (INSTANCE.started.get()) { INSTANCE.apmAgentContext.exitMethod(Thread.currentThread() methodName false); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,getAllMethods,public List<String>  (){ if (isInitialized()) { return apmAgentContext.getAllMethods(); } return Collections.EMPTY_LIST; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,getConfiguration,public ApmConfiguration  (){ return configuration; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,getThreadMetrics,public List<ThreadMetrics>  (){ if (isInitialized()) { return apmAgentContext.getThreadMetrics(); } return Collections.EMPTY_LIST; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,getTransformedMethods,public List<String>  (){ if (isInitialized()) { return apmAgentContext.getTransformedMethods(); } return Collections.EMPTY_LIST; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,initialize,"public boolean  (final Instrumentation instrumentation String args) throws Exception { boolean result; if ((result=initialized.compareAndSet(false true))) { this.instrumentation=instrumentation; PropertyUtils.setProperties(configuration args); configuration.addChangeListener(this); apmAgentContext.initialize(); ApmConfiguration.STRATEGY theStrategy=configuration.getStrategyImpl(); switch (theStrategy) { case TRACE: this.strategy=new TraceStrategy(apmAgentContext instrumentation); LOG.debug(""Using Trace strategy""); break; default : this.strategy=new SamplingStrategy(apmAgentContext); LOG.debug(""Using Sampling strategy""); } this.strategy.initialize(); Thread cleanup=new Thread(){ @Override public void run(){ try { ApmAgent apmAgent=ApmAgent.INSTANCE; apmAgent.shutDown(); } catch (Exception e) { LOG.warn(""Failed to run shutdown hook due "" + e.getMessage() e); } } } ; Runtime.getRuntime().addShutdownHook(cleanup); } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,isInitialized,public boolean  (){ return initialized.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,isStarted,@Override public boolean  (){ return started.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,premain,"public static void  (String args Instrumentation instrumentation) throws Exception { try { ApmAgent agent=ApmAgent.INSTANCE; if (agent.initialize(instrumentation args)) { if (agent.getConfiguration().isStartJolokiaAgent()) { JvmAgent.premain(args instrumentation); } if (agent.getConfiguration().isAutoStartMetrics()) { agent.startMetrics(); } } } catch ( Exception e) { LOG.error(""Failed in premain due "" + e.getMessage() e); throw e; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,run,"@Override public void  (){ try { ApmAgent apmAgent=ApmAgent.INSTANCE; apmAgent.shutDown(); } catch ( Exception e) { LOG.warn(""Failed to run shutdown hook due "" + e.getMessage() e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,shutDown,"public void  (){ if (initialized.compareAndSet(true false)) { stopMetrics(); configuration.removeChangeListener(this); apmAgentContext.shutDown(); try { Strategy s=this.strategy; if (s != null) { s.shutDown(); } } catch ( Throwable e) { LOG.warn(""Failed to shutdown due "" + e.getMessage() e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,startMetrics,"public void  (){ if (isInitialized() && started.compareAndSet(false true)) { apmAgentContext.start(); try { Strategy s=this.strategy; if (s != null) { s.start(); } } catch ( Throwable e) { LOG.warn(""Failed to start strategy due "" + e.getMessage() + "". This exception is ignored."" e); } } else { LOG.debug(""Metrics already started""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ApmAgent.java,stopMetrics,"public void  (){ if (started.compareAndSet(true false)) { try { Strategy s=this.strategy; if (s != null) { s.stop(); } } catch ( Throwable e) { LOG.warn(""Failed to stop strategy due "" + e.getMessage() + "". This exception is ignored."" e); } apmAgentContext.stop(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,addMethod,public void  (String name String description){ MethodDescription methodDescription=new MethodDescription(getClassName() name description); allMethods.putIfAbsent(methodDescription.getMethodSignature() methodDescription); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,addTransformedMethod,public String  (String name String description){ String key=MethodDescription.getMethodSignature(name description); MethodDescription methodDescription=allMethods.get(key); assert (methodDescription != null); transformedMethods.putIfAbsent(key methodDescription); return key; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,getAllMethodNames,public Set<String>  (){ Set<String> set=new HashSet<>(); for ( MethodDescription methodDescription : allMethods.values()) { set.add(methodDescription.getMethodName()); } return set; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,getAllTransformedMethodNames,public Set<String>  (){ Set<String> set=new HashSet<>(); for ( MethodDescription methodDescription : transformedMethods.values()) { set.add(methodDescription.getMethodName()); } return set; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,getClassLoader,public ClassLoader  (){ return classLoader; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,getClassName,public String  (){ return className; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,getOriginal,public byte[]  (){ return original; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,getOriginalClass,public Class  (){ return originalClass; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,getTransformed,public byte[]  (){ return transformed; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,getTransformedMethodDescriptions,public Collection<MethodDescription>  (){ ArrayList<MethodDescription> result=new ArrayList<>(); result.addAll(transformedMethods.values()); return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,isCanTransform,public boolean  (){ return canTransform; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,isTransformed,public boolean  (){ return transformed != null && transformed.length > 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,removeTransformedMethod,public void  (String fullMethodName){ transformedMethods.remove(fullMethodName); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,resetTransformed,public void  (){ transformed=null; transformedMethods.clear(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,setCanTransform,public void  (boolean canTransform){ this.canTransform=canTransform; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,setClassLoader,public void  (ClassLoader classLoader){ this.classLoader=classLoader; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,setClassName,"public void  (String className){ this.className=className != null ? className.replace(""/"" ""."") : null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,setOriginal,public void  (byte[] original){ this.original=original; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,setOriginalClass,public void  (Class originalClass){ this.originalClass=originalClass; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\ClassInfo.java,setTransformed,public void  (byte[] transformed){ this.transformed=transformed; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,getClassName,public String  (){ return className; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,getMethodName,public String  (){ return methodName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,matches,public boolean  (String className String method boolean matchIfNoFilterMethod){ boolean result=matches(className); if (result) { result=false; if (method == null || method.isEmpty()) { if (getMethodName() == null || getMethodName().isEmpty()) { result=true; } } else if (getMethodName() != null && !getMethodName().isEmpty()) { result=method.matches(getMethodName()); } else { result=matchIfNoFilterMethod; } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,setClassName,public void  (String className){ this.className=className; if (className != null) { this.className=className.replace('/' '.'); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\FilterItem.java,setMethodName,public void  (String methodName){ this.methodName=methodName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,ApmAgentContext,public  (ApmAgent agent){ this.apmAgent=agent; this.configuration=agent.getConfiguration(); this.monitoredMethodMetrics=new MonitoredMethodMetrics(this); this.monitoredMethodMetrics.setMonitorSize(configuration.getMethodMetricDepth()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,buildDeltaList,public List<ClassInfo>  (){ List<ClassInfo> result=new ArrayList<>(); for ( ClassInfo classInfo : allMethods.values()) { if (classInfo.isTransformed()) { if (configuration.isAudit(classInfo.getClassName())) { boolean retransform=false; Set<String> transformedMethodNames=classInfo.getAllTransformedMethodNames(); for ( String methodName : transformedMethodNames) { if (!configuration.isAudit(classInfo.getClassName() methodName)) { retransform=true; break; } } if (!retransform) { Set<String> allMethodNames=classInfo.getAllMethodNames(); for ( String methodName : allMethodNames) { if (!transformedMethodNames.contains(methodName) && configuration.isAudit(classInfo.getClassName() methodName)) { retransform=true; break; } } } if (retransform) { result.add(classInfo); } } else { result.add(classInfo); } } else if (configuration.isAudit(classInfo.getClassName())) { if (classInfo.isCanTransform()) { result.add(classInfo); } } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,compare,@Override public int  (ThreadMetrics threadMetrics1 ThreadMetrics threadMetrics2){ return (int)(threadMetrics2.getCpuTime() - threadMetrics1.getCpuTime()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,doHouseKeeping,"void  (){ if (doHouseKeeping.compareAndSet(true false)) { try { List<ThreadMetrics> threadMetricsList=getThreadMetrics(); for ( ThreadMetrics tm : threadMetricsList) { if (tm.isDead()) { tm.destroy(); threadMetricsMap.remove(tm.getThread()); } } monitoredMethodMetrics.calculateMethodMetrics(getMethodMetrics()); for ( ThreadMetrics threadMetrics : threadMetricsList) { threadMetrics.calculateMethodMetrics(); } } catch ( Throwable e) { LOG.warn(""Error during housekeeping due "" + e.getMessage() + "". This exception is ignored."" e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,enterMethod,public void  (Thread currentThread String fullMethodName boolean alwaysActive){ if (isInitialized()) { ThreadMetrics threadMetrics=threadMetricsMap.get(currentThread); if (threadMetrics == null) { threadMetrics=new ThreadMetrics(this currentThread); threadMetricsMap.put(currentThread threadMetrics); } threadMetrics.enter(fullMethodName alwaysActive); MethodMetrics methodMetrics=methodMetricsMap.get(fullMethodName); if (methodMetrics == null) { methodMetrics=new MethodMetrics(fullMethodName); methodMetrics.setActive(isMonitorByDefault()); methodMetricsMap.putIfAbsent(fullMethodName methodMetrics); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,exitMethod,public void  (Thread currentThread String methodName boolean alwaysActive){ if (isInitialized()) { ThreadMetrics threadMetrics=threadMetricsMap.get(currentThread); long elapsed=-1; if (threadMetrics != null) { elapsed=threadMetrics.exit(methodName alwaysActive); } if (elapsed >= 0) { MethodMetrics methodMetrics=methodMetricsMap.get(methodName); if (methodMetrics != null) { methodMetrics.update(elapsed); } } doHouseKeeping(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,getAllMethods,"public List<String>  (){ List<String> result=new ArrayList<>(); for ( ClassInfo classInfo : allMethods.values()) { for ( String methodName : classInfo.getAllMethodNames()) { result.add(classInfo.getClassName() + ""@"" + methodName); } } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,getClassInfo,public ClassInfo  (String className){ String key=className.replace('/' '.'); ClassInfo result=allMethods.get(key); if (result == null) { ClassInfo classInfo=new ClassInfo(); classInfo.setClassName(key); result=allMethods.putIfAbsent(key classInfo); if (result == null) { result=classInfo; } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,getConfiguration,public ApmConfiguration  (){ return configuration; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,getMBeanServer,private synchronized MBeanServer  (){ if (mBeanServer == null) { if (configuration.isUsePlatformMBeanServer()) { mBeanServer=ManagementFactory.getPlatformMBeanServer(); } else { mBeanServer=JolokiaMBeanServerUtil.getJolokiaMBeanServer(); } } return mBeanServer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,getMethodMetrics,public List<? extends MethodMetrics>  (){ return MethodMetrics.sortedMetrics(methodMetricsMap.values()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,getThreadMetrics,public List<ThreadMetrics>  (){ List<ThreadMetrics> result=new ArrayList<>(threadMetricsMap.values()); Collections.sort(result new Comparator<ThreadMetrics>(){ @Override public int compare( ThreadMetrics threadMetrics1  ThreadMetrics threadMetrics2){ return (int)(threadMetrics2.getCpuTime() - threadMetrics1.getCpuTime()); } } ); return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,getTransformedMethods,"public List<String>  (){ List<String> result=new ArrayList<>(); for ( ClassInfo classInfo : allMethods.values()) { for ( String methodName : classInfo.getAllTransformedMethodNames()) { result.add(classInfo.getClassName() + ""@"" + methodName); } } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,initialize,"public void  (){ if (initialized.compareAndSet(false true)) { try { agentObjectName=new ObjectName(DEFAULT_DOMAIN ""type"" ""apmAgent""); registerMBean(agentObjectName apmAgent); configurationObjectName=new ObjectName(DEFAULT_DOMAIN ""type"" ""configuration""); registerMBean(configurationObjectName configuration); } catch ( Throwable e) { LOG.warn(""Failed to register ApmAgent mbeans with mBeanServer due "" + e.getMessage() e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,isInitialized,public boolean  (){ return initialized.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,isMonitorByDefault,public boolean  (){ return monitorByDefault; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,methodMetricsDepthChanged,public void  (){ monitoredMethodMetrics.setMonitorSize(configuration.getMethodMetricDepth()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,registerMBean,protected ObjectInstance  (ObjectName objectName Object object) throws InstanceAlreadyExistsException  MBeanRegistrationException  NotCompliantMBeanException { MBeanServer server=getMBeanServer(); if (server != null && !server.isRegistered(objectName)) { return server.registerMBean(object objectName); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,registerMethodMetricsMBean,"void  (String threadName long threadId int rank MethodMetricsProxy threadMetrics){ try { String threadIdentity=threadName + ""["" + threadId+ ""]""; ObjectName objectName=new ObjectName(DEFAULT_DOMAIN + "":"" + ""type=ThreadContextMetrics""+ "" threadName=""+ ObjectName.quote(threadIdentity)+ "" rank=""+ ObjectName.quote(""rank"" + rank)); registerMBean(objectName threadMetrics); objectNameMap.put(threadMetrics objectName); } catch ( Throwable e) { LOG.warn(""Failed to register mbean "" + threadMetrics.toString() + "" due ""+ e.getMessage()+ "". This exception is ignored."" e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,remove,private void  (MethodDescription methodDescription){ methodMetricsMap.remove(methodDescription.getFullMethodName()); for ( ThreadMetrics threadMetrics : threadMetricsMap.values()) { threadMetrics.remove(methodDescription.getFullMethodName()); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,resetAll,public void  (ClassInfo classInfo){ Collection<MethodDescription> list=classInfo.getTransformedMethodDescriptions(); for ( MethodDescription methodDescription : list) { remove(methodDescription); } classInfo.resetTransformed(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,resetMethods,public void  (ClassInfo classInfo){ Collection<MethodDescription> list=classInfo.getTransformedMethodDescriptions(); for ( MethodDescription methodDescription : list) { if (!configuration.isAudit(classInfo.getClassName() methodDescription.getMethodName())) { remove(methodDescription); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,run,@Override public void  (){ while (started.get()) { try { Thread.sleep(HOUSE_KEEPING_TIME); doHouseKeeping.set(true); } catch ( Throwable e) { } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,setActive,public void  (String fullMethodName boolean flag){ if (isInitialized()) { for ( ThreadMetrics threadMetrics : threadMetricsMap.values()) { threadMetrics.setActive(fullMethodName flag); } MethodMetrics methodMetrics=methodMetricsMap.get(fullMethodName); if (methodMetrics != null) { methodMetrics.setActive(flag); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,setMonitorByDefault,public void  (boolean monitorByDefault){ this.monitorByDefault=monitorByDefault; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,shutDown,public void  (){ if (initialized.compareAndSet(true false)) { stop(); unregisterMBean(configurationObjectName); unregisterMBean(agentObjectName); if (jolokiaServer != null) { jolokiaServer.stop(); jolokiaServer=null; } mBeanServer=null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,start,"public void  (){ if (initialized.get()) { if (started.compareAndSet(false true)) { backgroundThread=new Thread(new Runnable(){ @Override public void run(){ while (started.get()) { try { Thread.sleep(HOUSE_KEEPING_TIME); doHouseKeeping.set(true); } catch ( Throwable e) { } } } }  ""Fabric8-ApmAgent-BackgroundThread""); backgroundThread.setDaemon(true); backgroundThread.start(); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,stop,public void  (){ if (initialized.get() && started.compareAndSet(true false)) { for ( ObjectName objectName : objectNameMap.values()) { unregisterMBean(objectName); } objectNameMap.clear(); methodMetricsMap.clear(); threadMetricsMap.clear(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,threadMetricsDepthChanged,public void  (){ for ( ThreadMetrics threadMetrics : threadMetricsMap.values()) { threadMetrics.setMonitorSize(configuration.getThreadMetricDepth()); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,unregisterMBean,"protected void  (ObjectName objectName){ MBeanServer beanServer=getMBeanServer(); if (objectName != null && beanServer != null && beanServer.isRegistered(objectName)) { try { beanServer.unregisterMBean(objectName); } catch ( Throwable e) { LOG.warn(""Failed to unregister "" + objectName + "" due ""+ e.getMessage()+ "". This exception is ignored."" e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ApmAgentContext.java,unregisterMethodMetricsMBean,void  (MethodMetricsProxy methodMetrics){ ObjectName objectName=objectNameMap.remove(methodMetrics); unregisterMBean(objectName); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,MethodDescription," (String className String methodName String description){ this.className=className.replace('/' '.'); this.methodName=methodName.replace('/' '.'); this.description=description; this.methodSignature=getMethodSignature(methodName description); this.fullMethodName=this.className + ""@"" + this.methodSignature; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get50thPercentile,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.get50thPercentile() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get75thPercentile,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.get75thPercentile() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get95thPercentile,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.get95thPercentile() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get98thPercentile,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.get98thPercentile() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get999thPercentile,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.get999thPercentile() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,get99thPercentile,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.get99thPercentile() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getCount,@Override public long  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getCount() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getFifteenMinuteRate,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getFifteenMinuteRate() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getFiveMinuteRate,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getFiveMinuteRate() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getLoad,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getLoad() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getMax,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getMax() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getMean,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getMean() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getMeanRate,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getMeanRate() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getMin,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getMin() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getName,"@Override public String  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getName() : """"; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getOneMinuteRate,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getOneMinuteRate() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getPercentage,@Override public int  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getPercentage() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,getStdDev,@Override public double  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.getStdDev() : 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,setMethodMetrics,void  (MethodMetrics methodMetrics){ this.methodMetrics=methodMetrics; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,toString,"@Override public String  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.toString() : ""EmptyMethodMetricsProxy""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetricsProxy.java,values,@Override public long[]  (){ MethodMetrics mm=this.methodMetrics; return mm != null ? mm.values() : new long[0]; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,getClassName,public String  (){ return className; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,getFullMethodName,public String  (){ return fullMethodName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,getMethodName,public String  (){ return methodName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\MethodDescription.java,getMethodSignature,public String  (){ return methodSignature; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,MethodMetrics,public  (String name){ this.name=name; this.timer=new Timer(); this.rateFactor=TimeUnit.SECONDS.toSeconds(1); this.durationFactor=1.0 / TimeUnit.MILLISECONDS.toNanos(1); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,compare,@Override public int  (MethodMetrics methodMetrics1 MethodMetrics methodMetrics2){ return (int)((int)methodMetrics2.getLoad() - (int)methodMetrics1.getLoad()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get50thPercentile,public double  (){ return timer.getSnapshot().getMedian() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get75thPercentile,public double  (){ return timer.getSnapshot().get75thPercentile() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get95thPercentile,public double  (){ return timer.getSnapshot().get95thPercentile() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get98thPercentile,public double  (){ return timer.getSnapshot().get98thPercentile() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get999thPercentile,public double  (){ return timer.getSnapshot().get999thPercentile() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,get99thPercentile,public double  (){ return timer.getSnapshot().get99thPercentile() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getCount,public long  (){ return timer.getCount(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getFifteenMinuteRate,public double  (){ return timer.getFifteenMinuteRate() * rateFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getFiveMinuteRate,public double  (){ return timer.getFiveMinuteRate() * rateFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getLoad,public double  (){ return timer.getSnapshot().size() * getMean(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getMax,public double  (){ return timer.getSnapshot().getMax() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getMean,public double  (){ return timer.getSnapshot().getMean() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getMeanRate,public double  (){ return timer.getMeanRate() * rateFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getMin,public double  (){ return timer.getSnapshot().getMin() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getOneMinuteRate,public double  (){ return timer.getOneMinuteRate() * rateFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getPercentage,public int  (){ return percentage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,getStdDev,public double  (){ return timer.getSnapshot().getStdDev() * durationFactor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,isActive,public boolean  (){ return active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,setActive,public void  (boolean active){ this.active=active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,setPercentage,public void  (int percentage){ this.percentage=percentage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,sortedMetrics,public static List<? extends MethodMetrics>  (Collection<? extends MethodMetrics> collection){ ArrayList<? extends MethodMetrics> list=new ArrayList<>(collection); Collections.sort(list new Comparator<MethodMetrics>(){ @Override public int compare( MethodMetrics methodMetrics1  MethodMetrics methodMetrics2){ return (int)((int)methodMetrics2.getLoad() - (int)methodMetrics1.getLoad()); } } ); int totalLoad=0; for ( MethodMetrics m : list) { totalLoad+=m.getLoad(); } for ( MethodMetrics m : list) { int percentage=(int)((m.getLoad() * 100) / totalLoad); m.setPercentage(percentage); } return list; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,toString,"public String  (){ return ""MethodMetrics:"" + getName(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,update,public void  (long elapsed){ if (elapsed >= 0) { timer.update(elapsed TimeUnit.NANOSECONDS); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MethodMetrics.java,values,public long[]  (){ return timer.getSnapshot().getValues(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredThreadMethodMetrics.java,MonitoredThreadMethodMetrics, (Thread thread ApmAgentContext apmAgentContext){ super(apmAgentContext); this.thread=thread; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredThreadMethodMetrics.java,createProxy,@Override protected ThreadContextMethodMetricsProxy  (int rank){ ThreadContextMethodMetricsProxy result=new ThreadContextMethodMetricsProxy(); result.setThread(thread); apmAgentContext.registerMethodMetricsMBean(thread.getName() thread.getId() rank result
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,MonitoredMethodMetrics, (ApmAgentContext apmAgentContext){ this.apmAgentContext=apmAgentContext; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,calculateMethodMetrics,public void  (List<? extends MethodMetrics> methodMetricsList){ if (methodMetricsList.size() < proxyList.size()) { setMonitorSize(methodMetricsList.size()); } if (methodMetricsList.size() > proxyList.size() && proxyList.size() < monitorSize) { int extra=monitorSize - proxyList.size(); if (extra > 0) { for (int i=0; i < extra; i++) { proxyList.add(createProxy(proxyList.size())); } } } for (int i=0; i < methodMetricsList.size() && i < proxyList.size(); i++) { MethodMetricsProxy methodMetricsProxy=proxyList.get(i); if (methodMetricsProxy != null) { methodMetricsProxy.setMethodMetrics(methodMetricsList.get(i)); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,createProxy,protected MethodMetricsProxy  (int rank){ MethodMetricsProxy result=new MethodMetricsProxy(); apmAgentContext.registerMethodMetricsMBean(rank result); return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,destroy,protected void  (){ for ( MethodMetricsProxy methodMetricsProxy : proxyList) { apmAgentContext.unregisterMethodMetricsMBean(methodMetricsProxy); } proxyList.clear(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,getMonitorSize,public int  (){ return monitorSize; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\MonitoredMethodMetrics.java,setMonitorSize,public synchronized void  (int monitorSize){ this.monitorSize=monitorSize; while (proxyList.size() > monitorSize) { MethodMetricsProxy methodMetricsProxy=proxyList.get(proxyList.size() - 1); proxyList.remove(proxyList.size() - 1); apmAgentContext.unregisterMethodMetricsMBean(methodMetricsProxy); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,ThreadContextMethodMetrics,public  (Thread thread AtomicReference<ThreadContextMethodMetricsStack> stackRef String name){ super(name); this.thread=thread; this.stackRef=stackRef; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,getThreadId,public long  (){ return thread.getId(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,getThreadName,public String  (){ return thread.getName(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,onEnter,public void  (){ timerContext=timer.time(); stackRef.get().push(this); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,onExit,public long  (){ long result=-1; ThreadContextMethodMetrics last=stackRef.get().pop(); if (last == this) { result=timerContext.stop(); } else { while (last != null && last != this) { result=last.timerContext.stop(); last=stackRef.get().pop(); } if (last == this) { result=timerContext.stop(); } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetrics.java,toString,"public String  (){ return ""ThreadContextMethodMetrics:"" + getName(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsProxy.java,getThread,public Thread  (){ return thread; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsProxy.java,getThreadId,@Override public long  (){ Thread t=thread; return t != null ? t.getId() : -1; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsProxy.java,getThreadName,"@Override public String  (){ Thread t=thread; return t != null ? t.getName() : "" NOT SET""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsProxy.java,setThread,public void  (Thread thread){ this.thread=thread; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,ThreadMetrics,public  (ApmAgentContext apmAgentContext Thread thread){ this.methodStackRef=new AtomicReference<>(new ThreadContextMethodMetricsStack()); this.apmAgentContext=apmAgentContext; this.threadMXBean=ManagementFactory.getThreadMXBean(); this.threadInfo=threadMXBean.getThreadInfo(thread.getId()); this.thread=thread; ApmConfiguration configuration=apmAgentContext.getConfiguration(); this.monitoredThreadMethodMetrics=new MonitoredThreadMethodMetrics(thread apmAgentContext); this.monitoredThreadMethodMetrics.setMonitorSize(configuration.getThreadMetricDepth()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,calculateMethodMetrics,public void  (){ List<ThreadContextMethodMetrics> list=(List<ThreadContextMethodMetrics>)MethodMetrics.sortedMetrics(this.methods.values()); monitoredThreadMethodMetrics.calculateMethodMetrics(list); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,destroy,public void  (){ monitoredThreadMethodMetrics.destroy(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,enter,public void  (String methodName boolean alwaysActive){ ThreadContextMethodMetrics threadContextMethodMetrics=methods.get(methodName); if (threadContextMethodMetrics == null) { threadContextMethodMetrics=new ThreadContextMethodMetrics(thread this.methodStackRef methodName); threadContextMethodMetrics.setActive(apmAgentContext.isMonitorByDefault()); methods.putIfAbsent(methodName threadContextMethodMetrics); } if (alwaysActive || threadContextMethodMetrics.isActive()) { threadContextMethodMetrics.onEnter(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,exit,public long  (String methodName boolean alwaysActive){ long result=-1; ThreadContextMethodMetrics threadContextMethodMetrics=methods.get(methodName); if (threadContextMethodMetrics != null) { if (alwaysActive || threadContextMethodMetrics.isActive()) { result=threadContextMethodMetrics.onExit(); } } else { methodStackRef.set(new ThreadContextMethodMetricsStack()); } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,getCpuTime,public long  (){ return threadMXBean.getThreadCpuTime(thread.getId()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,getName,"public String  (){ return thread.getName() + ""["" + thread.getId()+ ""]""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,getThread,Thread  (){ return thread; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,getThreadInfo,public ThreadInfo  (){ return threadInfo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,getUserTime,public long  (){ return threadMXBean.getThreadUserTime(thread.getId()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,isActive,public boolean  (String methodName){ ThreadContextMethodMetrics threadContextMethodMetrics=methods.get(methodName); return threadContextMethodMetrics != null ? threadContextMethodMetrics.isActive() : false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,isDead,public boolean  (){ return !thread.isAlive(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,remove,public ThreadContextMethodMetrics  (String fullMethodName){ ThreadContextMethodMetrics result=methods.remove(fullMethodName); return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,setActive,public void  (String methodName boolean flag){ ThreadContextMethodMetrics threadContextMethodMetrics=methods.get(methodName); if (threadContextMethodMetrics != null) { threadContextMethodMetrics.setActive(flag); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,setMonitorSize,public void  (int monitorSize){ monitoredThreadMethodMetrics.setMonitorSize(monitorSize); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadMetrics.java,toString,"public String  (){ return ""ThreadMetrics:"" + getName(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,ThreadContextMethodMetricsStack, (){ stack=new ThreadContextMethodMetrics[2]; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,pop,ThreadContextMethodMetrics  (){ final ThreadContextMethodMetrics result=stack[--pointer]; stack[pointer]=null; return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,push,ThreadContextMethodMetrics  (ThreadContextMethodMetrics value){ if (pointer + 1 >= stack.length) { resizeStack(stack.length * 2); } stack[pointer++]=value; return value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,resizeStack,private void  (int newCapacity){ ThreadContextMethodMetrics[] newStack=new ThreadContextMethodMetrics[newCapacity]; System.arraycopy(stack 0 newStack 0 Math.min(pointer newCapacity)); stack=newStack; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\metrics\ThreadContextMethodMetricsStack.java,toString,"public String  (){ StringBuilder result=new StringBuilder(""[""); for (int i=0; i < pointer; i++) { if (i > 0) { result.append(""  ""); } result.append(stack[i].getName()); } result.append(']'); return result.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,SamplingStrategy,public  (ApmAgentContext context){ this.context=context; this.configuration=context.getConfiguration(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,addMeasurement,private void  (Thread thread StackTraceElement[] stackTraceElements){ if (thread != null && thread.isAlive() && stackTraceElements != null && stackTraceElements.length > 0) { StackTraceElement topOfStack=stackTraceElements[0]; String currentMethod=getCurrentMethod(topOfStack); if (configuration.isAudit(topOfStack.getClassName() topOfStack.getMethodName())) { String lastMethod=currentMethods.put(thread.getId() currentMethod); if (lastMethod == null) { context.enterMethod(thread currentMethod true); } else if (!lastMethod.equals(currentMethod)) { context.exitMethod(thread lastMethod true); } else { } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,cleanup,private void  (){ List<ThreadInfo> removeList=null; ThreadMXBean threadMXBean=ManagementFactory.getThreadMXBean(); for ( Long id : currentMethods.keySet()) { ThreadInfo threadInfo=threadMXBean.getThreadInfo(id); if (threadInfo != null) { if (threadInfo.getThreadState() == Thread.State.TERMINATED) { if (removeList == null) { removeList=new ArrayList<>(); } removeList.add(threadInfo); } } } if (removeList != null) { for ( ThreadInfo threadInfo : removeList) { currentMethods.remove(threadInfo.getThreadId()); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,getCurrentMethod,"private String  (StackTraceElement topOfStack){ StringBuilder stringBuilder=new StringBuilder(topOfStack.getClassName().length() + topOfStack.getMethodName().length() + 1); stringBuilder.append(topOfStack.getClassName()).append(""."").append(topOfStack.getMethodName()); return stringBuilder.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,initialize,"@Override public void  () throws Exception { if (initialized.compareAndSet(false true)) { samplingThread=new Thread(this ""Fabric8-ApmAgent-SamplingStrategy""); samplingThread.setDaemon(true); configuration.addChangeListener(this); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,run,@Override public void  (){ long lastTime=0; while (started.get()) { try { for ( Map.Entry<Thread StackTraceElement[]> threadEntry : Thread.getAllStackTraces().entrySet()) { if (threadEntry.getKey() != Thread.currentThread()) { addMeasurement(threadEntry.g
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,shutDown,@Override public void  () throws Exception { if (initialized.compareAndSet(true false)) { configuration.removeChangeListener(this); samplingThread=null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,start,@Override public void  () throws Exception { if (started.compareAndSet(false true)) { initialize(); samplingThread.start(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\sampling\SamplingStrategy.java,stop,@Override public void  () throws Exception { if (started.compareAndSet(true false)) { } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,ApmClassVisitor,public  (TraceStrategy traceStrategy ClassVisitor cv ClassInfo classInfo){ super(ASM5 cv); this.traceStrategy=traceStrategy; this.classInfo=classInfo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,canProfileMethod,"private boolean  (String methodName String methodDescriptor){ if (methodDescriptor != null) { Type[] parameterTypes=Type.getArgumentTypes(methodDescriptor); if (methodName.equals(""<init>"") || methodName.equals(""<clinit>"")) { return false; } if (methodName.startsWith(""is"") || methodName.startsWith(""get"") && (parameterTypes == null || parameterTypes.length == 0)) { return false; } return !(methodName.startsWith(""set"") && parameterTypes != null && parameterTypes.length == 1); } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,getDescription,"private String  (String desc){ Type[] parameterTypes=Type.getArgumentTypes(desc); String result; if (parameterTypes == null || parameterTypes.length == 0) { result=""()""; } else { result=""(""; for (int i=0; i < parameterTypes.length; i++) { result+=parameterTypes[i].getClassName(); if ((i + 1) < parameterTypes.length) { result+="" ""; } } result+="")""; } Type type=Type.getReturnType(desc); if (type == null) { result+="" void""; } else { result+="" "" + type.getClassName(); } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,visit,public void  (int version int access String name String signature String superName String[] interfaces){ super.visit(version access name signature superName interfaces); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmClassVisitor.java,visitMethod,"public MethodVisitor  (int access String name String desc String signature String[] exceptions){ try { String methodDescription=getDescription(desc); classInfo.addMethod(name methodDescription); if (canProfileMethod(name desc) && traceStrategy.isAudit(classInfo.getClassName() name)) { MethodVisitor mv=super.visitMethod(access name desc signature exceptions); ApmMethodVisitor methodVisitor=new ApmMethodVisitor(mv classInfo.getClassName() name + methodDescription); classInfo.addTransformedMethod(name methodDescription); return methodVisitor; } } catch ( Throwable e) { e.printStackTrace(); LOG.error(""Failed to visitMethod "" + name e); } return super.visitMethod(access name desc signature exceptions); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,TraceStrategy,public  (ApmAgentContext context Instrumentation instrumentation){ this.context=context; this.configuration=context.getConfiguration(); this.instrumentation=instrumentation; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,configurationChanged,@Override public void  (){ if (started.get()) { if (configuration.isFilterChanged()) { List<ClassInfo> deltas=context.buildDeltaList(); if (deltas != null && !deltas.isEmpty()) { for ( ClassInfo classInfo : deltas) { if (configuration.isAsyncTransformatio
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,getContext,public ApmAgentContext  (){ return context; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,getInstrumentation,public Instrumentation  (){ return instrumentation; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,initialize,@Override public void  () throws Exception { if (initialized.compareAndSet(false true)) { configuration.addChangeListener(this); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,instrumentApplication,"private void  () throws FileNotFoundException  UnmodifiableClassException { if (!instrumentation.isRetransformClassesSupported()) { throw new UnmodifiableClassException(); } instrumentation.addTransformer(this true); for ( Class<?> c : instrumentation.getAllLoadedClasses()) { if (isInstrumentClass(c)) { if (configuration.isAsyncTransformation()) { try { blockingQueue.put(c); } catch ( InterruptedException e) { Thread.currentThread().interrupt(); break; } } else { try { instrumentation.retransformClasses(new Class[]{c}); } catch ( Throwable e) { LOG.error(""Could not transform "" + c.getName() e); } } } } if (configuration.isAsyncTransformation() && !blockingQueue.isEmpty()) { startTransformThread(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,isAudit,public boolean  (String className String methodName){ return configuration.isAudit(className methodName); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,isInstrumentClass,"private boolean  (Class c){ if (!instrumentation.isModifiableClass(c)) { LOG.trace(""NO INSTRUMENT: Class {} is not modifiable"" c.getName()); return false; } if (!configuration.isAudit(c.getName())) { LOG.trace(""NO INSTRUMENT: Class {} is blacklisted"" c.getName()); return false; } if (c.isArray() || c.isAnnotation() || c.isInterface()|| c.isPrimitive()|| c.isSynthetic()|| c.isEnum()) { LOG.trace(""NO INSTRUMENT: Class {} is an array  primitive  annotation or enum etc."" c.getName()); return false; } return true; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,run,@Override public void  (){ while (initialized.get() && !blockingQueue.isEmpty()) { try { Class<?> aClass=blockingQueue.take(); if (aClass != null) { if (isInstrumentClass(aClass)) { try { instrumentation.retransformClasses(new Class[]{aClass}); } catch ( 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,setContext,public void  (ApmAgentContext context){ this.context=context; this.configuration=context.getConfiguration(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,setInstrumentation,public void  (Instrumentation instrumentation){ this.instrumentation=instrumentation; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,shutDown,@Override public void  (){ if (initialized.compareAndSet(true false)) { stop(); configuration.removeChangeListener(this); instrumentation.removeTransformer(this); Thread t=transformThread; transformThread=null; if (t != null && !t.isInterrupted()) { t.int
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,start,@Override public void  () throws Exception { if (started.compareAndSet(false true)) { initialize(); instrumentApplication(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,startTransformThread,"private synchronized void  (){ if (configuration.isAsyncTransformation() && transformThread == null) { transformThread=new Thread(new Runnable(){ @Override public void run(){ while (initialized.get() && !blockingQueue.isEmpty()) { try { Class<?> aClass=blockingQueue.take(); if (aClass != null) { if (isInstrumentClass(aClass)) { try { instrumentation.retransformClasses(new Class[]{aClass}); } catch ( Throwable e) { LOG.error(""Could not transform "" + aClass.getName() e); } } } } catch ( InterruptedException e) { shutDown(); } } } } ); transformThread.setDaemon(true); transformThread.start(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,stop,@Override public void  (){ if (started.compareAndSet(true false)) { } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,transform,@Override public byte[]  (ClassLoader loader String className Class<?> classBeingRedefined ProtectionDomain protectionDomain byte[] classfileBuffer) throws IllegalClassFormatException { byte[] buffer=null; ClassInfo classInfo=context.getClassInfo(classNam
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\TraceStrategy.java,verifyClass,"private boolean  (String className byte[] transformed){ boolean result=true; if (configuration.isVerifyClasses()) { StringWriter sw=new StringWriter(); PrintWriter pw=new PrintWriter(sw); CheckClassAdapter.verify(new ClassReader(transformed) false pw); if (sw.toString().length() != 0) { result=false; LOG.error(""Failed to transform class: "" + className); LOG.error(sw.toString()); } } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmMethodVisitor.java,ApmMethodVisitor,"public  (MethodVisitor mv String className String methodName){ super(ASM5 mv); this.fullMethodName=className + ""@"" + methodName; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmMethodVisitor.java,visitCode,"@Override public void  (){ super.visitCode(); super.visitLdcInsn(fullMethodName); super.visitMethodInsn(INVOKESTATIC ""io/fabric8/apmagent/ApmAgent"" ""enterMethod"" ""(Ljava/lang/String;)V"" false); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\strategy\trace\ApmMethodVisitor.java,visitInsn,"@Override public void  (int opcode){ if ((opcode >= IRETURN && opcode <= RETURN) || opcode == ATHROW) { super.visitLdcInsn(fullMethodName); super.visitMethodInsn(INVOKESTATIC ""io/fabric8/apmagent/ApmAgent"" ""exitMethod"" ""(Ljava/lang/String;)V"" false); } su"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,addFields,private static void  (Object target Class startClass Class<Object> stopClass LinkedHashMap<String Object> map){ if (startClass != stopClass) { addFields(target startClass.getSuperclass() stopClass map); } Field[] fields=startClass.getDeclaredFields(); for ( Field field : fields) { if (Modifier.isStatic(field.getModifiers()) || Modifier.isTransient(field.getModifiers()) || Modifier.isPrivate(field.getModifiers())) { continue; } try { field.setAccessible(true); Object o=field.get(target); if (o != null && o.getClass().isArray()) { try { o=Arrays.asList((Object[])o); } catch ( Exception e) { } } map.put(field.getName() o); } catch ( Exception e) { e.printStackTrace(); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,convert,"private static Object  (Object value Class to){ if (value == null) { if (boolean.class.isAssignableFrom(to)) { return Boolean.FALSE; } return null; } if (to.isAssignableFrom(value.getClass())) { return to.cast(value); } if (to.isAssignableFrom(String[].class)) { return StringArrayConverter.convertToStringArray(value); } TypeConversionSupport.Converter converter=TypeConversionSupport.lookupConverter(value.getClass() to); if (converter != null) { return converter.convert(value); } else { throw new IllegalArgumentException(""Cannot convert from "" + value.getClass() + "" to ""+ to+ "" with value ""+ value); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,convertToString,"public static String  (Object value Class to){ if (value == null) { return null; } if (value instanceof String) { return (String)value; } if (String[].class.isInstance(value)) { String[] array=(String[])value; return StringArrayConverter.convertToString(array); } TypeConversionSupport.Converter converter=TypeConversionSupport.lookupConverter(value.getClass() String.class); if (converter != null) { return (String)converter.convert(value); } else { throw new IllegalArgumentException(""Cannot convert from "" + value.getClass() + "" to ""+ to+ "" with value ""+ value); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,extractProperties,"public static Map<String Object>  (Map props String optionPrefix){ if (props == null) { throw new IllegalArgumentException(""props was null.""); } HashMap<String Object> rc=new HashMap<String Object>(props.size()); for (Iterator<?> iter=props.keySet().iterator(); iter.hasNext(); ) { String name=(String)iter.next(); if (name.startsWith(optionPrefix)) { Object value=props.get(name); name=name.substring(optionPrefix.length()); rc.put(name value); iter.remove(); } } return rc; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,findSetterMethod,"private static Method  (Class clazz String name){ name=""set"" + Character.toUpperCase(name.charAt(0)) + name.substring(1); Method[] methods=clazz.getMethods(); for ( Method method : methods) { Class<?> params[]=method.getParameterTypes(); if (method.getName().equals(name) && params.length == 1) { return method; } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,getProperties,"public static boolean  (Object target Map props String optionPrefix){ boolean rc=false; if (target == null) { throw new IllegalArgumentException(""target was null.""); } if (props == null) { throw new IllegalArgumentException(""props was null.""); } if (optionPrefix == null) { optionPrefix=""""; } Class<?> clazz=target.getClass(); Method[] methods=clazz.getMethods(); for ( Method method : methods) { String name=method.getName(); Class<?> type=method.getReturnType(); Class<?> params[]=method.getParameterTypes(); if ((name.startsWith(""is"") || name.startsWith(""get"")) && params.length == 0 && type != null) { try { Object value=method.invoke(target); if (value == null) { continue; } String strValue=convertToString(value type); if (strValue == null) { continue; } if (name.startsWith(""get"")) { name=name.substring(3 4).toLowerCase(Locale.ENGLISH) + name.substring(4); } else { name=name.substring(2 3).toLowerCase(Locale.ENGLISH) + name.substring(3); } props.put(optionPrefix + name strValue); rc=true; } catch ( Exception ignore) { } } } return rc; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,setProperties,"public static boolean  (Object target Map props){ boolean rc=false; if (target == null) { throw new IllegalArgumentException(""target was null.""); } if (props == null) { throw new IllegalArgumentException(""props was null.""); } for (Iterator<?> iter=props.entrySet().iterator(); iter.hasNext(); ) { Map.Entry<? ?> entry=(Map.Entry<? ?>)iter.next(); if (setProperty(target (String)entry.getKey() entry.getValue())) { iter.remove(); rc=true; } } return rc; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,setProperty,public static boolean  (Object target String name Object value){ try { Class<?> clazz=target.getClass(); Method setter=findSetterMethod(clazz name); if (setter == null) { return false; } if (value == null || value.getClass() == setter.getParameterTypes()[0]) { setter.invoke(target value); } else { setter.invoke(target convert(value setter.getParameterTypes()[0])); } return true; } catch ( Exception e) { e.printStackTrace(); return false; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,simpleName,"public static String  (Class clazz){ String name=clazz.getName(); int p=name.lastIndexOf("".""); if (p >= 0) { name=name.substring(p + 1); } return name; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\PropertyUtils.java,toString,"public static String  (Object target Class stopClass Map<String Object> overrideFields){ LinkedHashMap<String Object> map=new LinkedHashMap<String Object>(); addFields(target target.getClass() stopClass map); if (overrideFields != null) { for ( String key : overrideFields.keySet()) { Object value=overrideFields.get(key); map.put(key value); } } StringBuffer buffer=new StringBuffer(simpleName(target.getClass())); buffer.append("" {""); Set<Map.Entry<String Object>> entrySet=map.entrySet(); boolean first=true; for ( Map.Entry<String Object> entry : entrySet) { Object value=entry.getValue(); Object key=entry.getKey(); if (first) { first=false; } else { buffer.append(""  ""); } buffer.append(key); buffer.append("" = ""); buffer.append(value); } buffer.append(""}""); return buffer.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\StringArrayConverter.java,convertToString,"public static String  (String[] value){ if (value == null || value.length == 0) { return null; } StringBuffer result=new StringBuffer(String.valueOf(value[0])); for (int i=1; i < value.length; i++) { result.append("" "").append(value[i]); } return result.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\StringArrayConverter.java,convertToStringArray,"public static String[]  (Object value){ if (value == null) { return null; } String text=value.toString(); if (text == null || text.length() == 0) { return null; } StringTokenizer stok=new StringTokenizer(text "" ""); final List<String> list=new ArrayList<String>(); while (stok.hasMoreTokens()) { list.add(stok.nextToken()); } String[] array=list.toArray(new String[list.size()]); return array; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\main\java\io\fabric8\apmagent\utils\TypeConversionSupport.java,ConversionKey,public  (Class<?> from Class<?> to){ this.from=from; this.to=to; this.hashCode=from.hashCode() ^ (to.hashCode() << 1); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestThreadFactory.java,TestThreadFactory,public  (String prefix){ this.prefix=prefix; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestThreadFactory.java,newThread,"@Override public Thread  (Runnable task){ String name=prefix + ""-"" + counter++; return new Thread(task name); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,TestLoad,public  (int maxIterations){ this.MAX_ITERATIONS=maxIterations; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,doSomethingElse,public void  (){ sleep(20); count2.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,getCount,public long  (){ return count.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,load,public void  (TestValues value){ load1(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,load1,public void  (TestValues value){ sleep(100); load2(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,load2,public void  (TestValues value){ sleep(10); count.incrementAndGet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,run,"public void  (){ for (int i=0; i < MAX_ITERATIONS; i++) { for ( TestValues value : TestValues.values()) { System.out.println(Thread.currentThread().getName() + "" running #"" + i); load(value); if (i % 2 == 0) { doSomethingElse(); } } } System.out.println(Thread.currentThread().getName() + "" done""); done.set(true); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestLoad.java,sleep,private void  (long sleepTime){ try { Thread.sleep(sleepTime); } catch ( InterruptedException e) { } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestApp.java,checkEnabledMetrics,"protected static void  (){ MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer(); if (mBeanServer != null) { if (mBeanServer.isRegistered(AGENT_MBEAN_NAME)) { if (enabledAgent.compareAndSet(false true)) { try { mBeanServer.invoke(AGENT_MBEAN_NAME ""startMetrics"" new Object[0] new String[0]); System.out.println(""Enabled agent metrics "" + AGENT_MBEAN_NAME); } catch ( Exception e) { System.out.println(""Failed to invoke the mbean: "" + AGENT_MBEAN_NAME); e.printStackTrace(); } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-apm\src\test\java\io\fabric8\testApp\TestApp.java,main,"public static void  (String args[]) throws Exception { try { System.err.println(""RUNNING ...""); checkEnabledMetrics(); final int COUNT=20; for (int i=0; i < COUNT; i++) { TestLoad testLoad=new TestLoad(); pool.submit(testLoad); } TestLoad testLoad=new TestLoad(1000); pool.submit(testLoad); } catch ( Throwable e) { e.printStackTrace(); } System.err.println(""WAITING FOR LOAD TO COMPLETE ...""); pool.awaitTermination(5 TimeUnit.MINUTES); System.err.println(""STOPPED""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionServicesAreReady.java,SessionServicesAreReady,public  (KubernetesClient kubernetesClient Session session Configuration configuration){ this.session=session; this.kubernetesClient=kubernetesClient; this.configuration=configuration; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionServicesAreReady.java,call,"@Override public Boolean  () throws Exception { boolean result=true; List<Service> services=kubernetesClient.services().inNamespace(session.getNamespace()).list().getItems(); if (services.isEmpty()) { result=false; session.getLogger().warn(""No services ar"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionServicesAreReady.java,filterServices,private List<Service>  (List<Service> services List<String> selectedIds){ if (selectedIds != null && !selectedIds.isEmpty()) { List<Service> result=new ArrayList<>(); for ( Service s : services) { String sid=getName(s); if (selectedIds.contains(sid)) { result.add(s); } } return result; } else { return services; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionServicesAreReady.java,isEndpointAvailable,"private boolean  (Service s){ String serviceStatus=null; boolean result=false; String sid=getName(s); String namespace=session.getNamespace(); Endpoints endpoints=kubernetesClient.endpoints().inNamespace(namespace).withName(sid).get(); ServiceSpec spec=s.getSpec(); if (endpoints != null && spec != null) { List<EndpointSubset> subsets=endpoints.getSubsets(); if (subsets != null) { for ( EndpointSubset subset : subsets) { List<EndpointAddress> addresses=subset.getAddresses(); if (addresses != null) { for ( EndpointAddress address : addresses) { String ip=address.getIp(); String addr=ip; List<ServicePort> ports=spec.getPorts(); for ( ServicePort port : ports) { Integer portNumber=port.getPort(); if (portNumber != null && portNumber > 0) { if (configuration.isWaitForServiceConnectionEnabled()) { try (Socket socket=new Socket()){ socket.connect(new InetSocketAddress(ip portNumber) (int)configuration.getWaitForServiceConnectionTimeout()); serviceStatus=""Service: "" + sid + "" is ready. Provider:""+ addr+ "".""; return true; } catch ( Exception e) { serviceStatus=""Service: "" + sid + "" is not ready! in namespace ""+ namespace+ "". Error: ""+ e.getMessage(); } finally { session.getLogger().warn(serviceStatus); } } else { serviceStatus=""Service: "" + sid + "" is ready. Not testing connecting to it!. Provider:""+ addr+ "".""; session.getLogger().warn(serviceStatus); return true; } } } } } } } } session.getLogger().warn(""Service: "" + sid + "" has no valid endpoints""); return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\WaitStrategy.java,WaitStrategy,public  (Callable<Boolean> condition long timeout long pollInterval){ this.condition=condition; this.timeout=timeout; this.pollInterval=pollInterval; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\WaitStrategy.java,await,public boolean  () throws Exception { long start=System.currentTimeMillis(); while (!Thread.interrupted() && System.currentTimeMillis() - start <= timeout) { try { if (condition.call()) { return true; } else { Thread.sleep(pollInterval); } } catch ( InterruptedException e) { Thread.currentThread().interrupt(); } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\CompositeCondition.java,CompositeCondition,public  (Callable<Boolean>... callables){ this.callableList=Arrays.asList(callables); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\CompositeCondition.java,call,@Override public Boolean  () throws Exception { boolean result=true; for (int i=0; i < callableList.size() && result; i++) { result=result && callableList.get(i).call(); } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionPodsAreReady.java,SessionPodsAreReady,public  (KubernetesClient kubernetesClient Session session){ this.session=session; this.kubernetesClient=kubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionPodsAreReady.java,call,"@Override public Boolean  () throws Exception { boolean result=true; List<Pod> pods=notNullList(kubernetesClient.pods().inNamespace(session.getNamespace()).list().getItems()); if (pods.isEmpty()) { result=false; session.getLogger().warn(""No pods are avail"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\await\SessionPodsAreReady.java,findLogFiles,private SortedMap<String File>  (File logDir String name){ SortedMap<String File> answer=new TreeMap<>(); File[] files=logDir.listFiles(); if (files != null) { for ( File file : files) { String fileName=file.getName(); if (fileName.endsWith(LogHelpers.LOG_FILE_POSTFIX)) { fileName=Strings.stripSuffix(fileName LogHelpers.LOG_FILE_POSTFIX); if (fileName.startsWith(name)) { answer.put(fileName file); } } } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,findConfigResource,"public static URL  (String resourceName){ return resourceName.startsWith(""/"") ? Configuration.class.getResource(resourceName) : Configuration.class.getResource(""/"" + resourceName); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,findNamespaceForEnvironment,"private static String  (String environment Map<String String> map KubernetesClient kubernetesClient String developNamespace boolean failOnMissingEnvironmentNamespace){ String namespace=null; if (!Strings.isNullOrBlank(environment)) { namespace=Environments.namespaceForEnvironment(kubernetesClient environment developNamespace); if (Strings.isNotBlank(namespace)) { return namespace; } String basedir=System.getProperty(""basedir"" "".""); File folder=new File(basedir); ProjectConfig projectConfig=ProjectConfigs.findFromFolder(folder); if (projectConfig != null) { LinkedHashMap<String String> environments=projectConfig.getEnvironments(); if (environments != null) { namespace=environments.get(environment); } } String key=environment.toLowerCase() + "".namespace""; if (Strings.isNullOrBlank(namespace)) { namespace=getStringProperty(key map null); } if (Strings.isNullOrBlank(namespace)) { if (failOnMissingEnvironmentNamespace) { throw new IllegalStateException(""A fabric8 environment '"" + environment + ""' has been specified  but no matching namespace was found in the fabric8.yml file or '""+ key+ ""' system property""); } else { return developNamespace; } } } return namespace; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,fromMap,"public static Configuration  (Map<String String> map KubernetesClient testKubernetesClient){ Configuration configuration=new Configuration(); try { configuration.masterUrl=getStringProperty(KUBERNETES_MASTER map FALLBACK_CONFIG.getMasterUrl()); configuration.environment=getStringProperty(FABRIC8_ENVIRONMENT map null); configuration.environmentInitEnabled=getBooleanProperty(ENVIRONMENT_INIT_ENABLED map true); configuration.environmentConfigUrl=getKubernetesConfigurationUrl(map); configuration.environmentDependencies=Strings.splitAndTrimAsList(getStringProperty(ENVIRONMENT_DEPENDENCIES map """") ""\\s+""); configuration.namespaceLazyCreateEnabled=getBooleanProperty(NAMESPACE_LAZY_CREATE_ENABLED map DEFAULT_NAMESPACE_LAZY_CREATE_ENABLED); configuration.properties=map; String existingNamespace=getStringProperty(NAMESPACE_TO_USE map null); configuration.sessionId=UUID.randomUUID().toString(); configuration.namespaceCleanupConfirmationEnabled=getBooleanProperty(NAMESPACE_CLEANUP_CONFIRM_ENABLED map false); configuration.deleteAllResourcesOnExit=getBooleanProperty(NAMESPACE_DELETE_ALL_RESOURCES_ON_EXIT map false); configuration.namespaceCleanupTimeout=getLongProperty(NAMESPACE_CLEANUP_TIMEOUT map DEFAULT_NAMESPACE_CLEANUP_TIMEOUT); configuration.waitTimeout=getLongProperty(WAIT_TIMEOUT map DEFAULT_WAIT_TIMEOUT); configuration.waitPollInterval=getLongProperty(WAIT_POLL_INTERVAL map DEFAULT_WAIT_POLL_INTERVAL); configuration.waitForServiceList=Strings.splitAndTrimAsList(getStringProperty(WAIT_FOR_SERVICE_LIST map """") ""\\s+""); configuration.waitForServiceConnectionEnabled=getBooleanProperty(WAIT_FOR_SERVICE_CONNECTION_ENABLED map DEFAULT_WAIT_FOR_SERVICE_CONNECTION_ENABLED); configuration.waitForServiceConnectionTimeout=getLongProperty(WAIT_FOR_SERVICE_CONNECTION_TIMEOUT map DEFAULT_NAMESPACE_CLEANUP_TIMEOUT); configuration.ansiLoggerEnabled=getBooleanProperty(ANSI_LOGGER_ENABLED map true); configuration.kubernetesDomain=getStringProperty(KUBERNETES_DOMAIN map """"); configuration.gofabric8Enabled=getBooleanProperty(GOFABRIC8_ENABLED map false); configuration.createNamespaceForTest=getBooleanProperty(CREATE_NAMESPACE_FOR_TEST map false); KubernetesClient kubernetesClient=getOrCreateKubernetesClient(configuration testKubernetesClient); boolean failOnMissingEnvironmentNamespace=getBooleanProperty(FAIL_ON_MISSING_ENVIRONMENT_NAMESPACE map false); String defaultDevelopNamespace=existingNamespace; if (Strings.isNullOrBlank(defaultDevelopNamespace)) { defaultDevelopNamespace=kubernetesClient.getNamespace(); } String developNamespace=getStringProperty(DEVELOPMENT_NAMESPACE map defaultDevelopNamespace); configuration.kubernetesClient=kubernetesClient; String environmentNamespace=findNamespaceForEnvironment(configuration.environment map kubernetesClient developNamespace failOnMissingEnvironmentNamespace); String providedNamespace=selectNamespace(environmentNamespace existingNamespace); if (configuration.createNamespaceForTest) { configuration.namespace=NAMESPACE_PREFIX + configuration.sessionId; } else { String namespace=Strings.isNotBlank(providedNamespace) ? providedNamespace : developNamespace; ; if (Strings.isNullOrBlank(namespace)) { namespace=kubernetesClient.getNamespace(); if (Strings.isNullOrBlank(namespace)) { namespace=KubernetesHelper.defaultNamespace(); } } configuration.namespace=namespace; } configuration.namespaceCleanupEnabled=getBooleanProperty(NAMESPACE_CLEANUP_ENABLED map Strings.isNullOrBlank(providedNamespace)); } catch ( Throwable t) { if (t instanceof RuntimeException) { throw (RuntimeException)t; } else { throw new RuntimeException(t); } } return configuration; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getBooleanProperty,private static Boolean  (String name Map<String String> map Boolean defaultValue){ if (map.containsKey(name)) { return Boolean.parseBoolean(map.get(name)); } else { return Utils.getSystemPropertyOrEnvVar(name defaultValue); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getEnvironment,public String  (){ return environment; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getEnvironmentConfigUrl,public URL  (){ return environmentConfigUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getEnvironmentDependencies,public List<String>  (){ return environmentDependencies; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getGofabric8Enabled,public Boolean  (){ return gofabric8Enabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getKubernetesClient,public KubernetesClient  (){ return kubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getKubernetesConfigurationUrl,"private static URL  (Map<String String> map) throws MalformedURLException { if (map.containsKey(ENVIRONMENT_CONFIG_URL)) { return new URL(map.get(ENVIRONMENT_CONFIG_URL)); } else if (map.containsKey(ENVIRONMENT_CONFIG_RESOURCE_NAME)) { String resourceName=map.get(ENVIRONMENT_CONFIG_RESOURCE_NAME); return findConfigResource(resourceName); } else if (Strings.isNotBlank(Utils.getSystemPropertyOrEnvVar(ENVIRONMENT_CONFIG_URL """"))) { return new URL(Utils.getSystemPropertyOrEnvVar(ENVIRONMENT_CONFIG_URL """")); } else { String defaultValue=""/"" + DEFAULT_CONFIG_FILE_NAME; String resourceName=Utils.getSystemPropertyOrEnvVar(ENVIRONMENT_CONFIG_RESOURCE_NAME defaultValue); URL answer=findConfigResource(resourceName); if (answer == null) { } return answer; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getKubernetesDomain,public String  (){ return kubernetesDomain; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getLongProperty,private static Long  (String name Map<String String> map Long defaultValue){ if (map.containsKey(name)) { return Long.parseLong(map.get(name)); } else { return Long.parseLong(Utils.getSystemPropertyOrEnvVar(name String.valueOf(defaultValue))); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getMasterUrl,public String  (){ return masterUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getNamespace,public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getNamespaceCleanupTimeout,public long  (){ return namespaceCleanupTimeout; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getOrCreateKubernetesClient,protected static KubernetesClient  (Configuration config KubernetesClient testKubernetesClient){ if (testKubernetesClient == null) { if (!Strings.isNullOrBlank(config.getMasterUrl())) { testKubernetesClient=new DefaultKubernetesClient(new ConfigBuilder().withMasterUrl(config.getMasterUrl()).withNamespace(config.getNamespace()).build()); } else { testKubernetesClient=new DefaultKubernetesClient(new ConfigBuilder().withNamespace(config.getNamespace()).build()); } } return testKubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getProperties,public Map<String String>  (){ return properties; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getSessionId,public String  (){ return sessionId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getStringProperty,private static String  (String name Map<String String> map String defaultValue){ if (map.containsKey(name)) { return map.get(name); } else { return Utils.getSystemPropertyOrEnvVar(name defaultValue); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getWaitForServiceConnectionTimeout,public long  (){ return waitForServiceConnectionTimeout; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getWaitForServiceList,public List<String>  (){ return waitForServiceList; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getWaitPollInterval,public long  (){ return waitPollInterval; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,getWaitTimeout,public long  (){ return waitTimeout; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isAnsiLoggerEnabled,public boolean  (){ return ansiLoggerEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isCreateNamespaceForTest,public boolean  (){ return createNamespaceForTest; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isDeleteAllResourcesOnExit,public boolean  (){ return deleteAllResourcesOnExit; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isEnvironmentInitEnabled,public boolean  (){ return environmentInitEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isNamespaceCleanupConfirmationEnabled,public boolean  (){ return namespaceCleanupConfirmationEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isNamespaceCleanupEnabled,public boolean  (){ return namespaceCleanupEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isNamespaceLazyCreateEnabled,public boolean  (){ return namespaceLazyCreateEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isUseGoFabric8,public boolean  (){ return gofabric8Enabled != null && gofabric8Enabled.booleanValue(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,isWaitForServiceConnectionEnabled,public boolean  (){ return waitForServiceConnectionEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,resetFallbackConfig,static void  (){ FALLBACK_CONFIG=new ConfigBuilder().build(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configuration.java,selectNamespace,"private static String  (String environment String explicit){ if (environment == null && explicit == null) { return null; } else if (environment != null && explicit == null) { return environment; } else if (environment == null && explicit != null) { return explicit; } else if (environment.equals(explicit)) { return environment; } else { throw new IllegalStateException(""Different namespace values have been specified via environment:"" + environment + "" and explicitly:""+ explicit+ "".""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\ClientCreator.java,createClient,public void  (@Observes Configuration config){ kubernetesProducer.set(config.getKubernetesClient()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configurer.java,configure,public void  (@Observes ArquillianDescriptor arquillianDescriptor){ Map<String String> config=arquillianDescriptor.extension(EXTENSION_NAME).getExtensionProperties(); configurationProducer.set(Configuration.fromMap(config null)); configureProtocolHandlers(config); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Configurer.java,configureProtocolHandlers,"private static void  (Map<String String> conf){ Set<String> handlers=new LinkedHashSet<>(); handlers.addAll(Strings.splitAndTrimAsList(System.getProperty(JAVA_PROTOCOL_HANDLER """") "" "")); handlers.addAll(Strings.splitAndTrimAsList(conf.containsKey(PROTOCOL_HANDLERS) ? conf.get(PROTOCOL_HANDLERS) : DEFAULT_MAVEN_PROTOCOL_HANDLER "" "")); System.setProperty(JAVA_PROTOCOL_HANDLER Strings.join(handlers "" "")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ClientResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return KubernetesClient.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ClientResourceProvider.java,lookup,"@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.kubernetesClient.get(); if (client == null) { throw new IllegalStateException(""Unable to inject Kubernetes client into test.""); } return client; "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ControllerResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return Controller.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ControllerResourceProvider.java,lookup,"@Override public Object  (ArquillianResource resource Annotation... qualifiers){ Controller controller=this.controllerInstance.get(); if (controller == null) { throw new IllegalStateException(""Unable to inject Kubernetes controller into test.""); } return "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\ControllerCreator.java,createController,public void  (@Observes KubernetesClient client){ kubernetesControllerProducer.set(new Controller(client)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\DependencyResolver.java,DependencyResolver,public  (String pathToPomFile boolean rethrowExcpetions){ this.pathToPomFile=pathToPomFile; this.rethrowExcpetions=rethrowExcpetions; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\DependencyResolver.java,hasKubernetesJson,private boolean  (File f) throws IOException { try (FileInputStream fis=new FileInputStream(f);JarInputStream jis=new JarInputStream(fis)){ for (JarEntry entry=jis.getNextJarEntry(); entry != null; entry=jis.getNextJarEntry()) { if (entry.getName().equals(DEFAULT_CONFIG_FILE_NAME)) { return true; } } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\DependencyResolver.java,resolve,"public List<String>  (Session session) throws IOException { List<String> dependencies=new ArrayList<>(); try { File[] files=Maven.resolver().loadPomFromFile(pathToPomFile).importTestDependencies().resolve().withoutTransitivity().asFile(); for ( File f : files) { if (f.getName().endsWith(""jar"") && hasKubernetesJson(f)) { Path dir=Files.createTempDirectory(session.getId()); try (FileInputStream fis=new FileInputStream(f);JarInputStream jis=new JarInputStream(fis)){ Zips.unzip(new FileInputStream(f) dir.toFile()); File jsonPath=dir.resolve(DEFAULT_CONFIG_FILE_NAME).toFile(); if (jsonPath.exists()) { dependencies.add(jsonPath.toURI().toString()); } } } else if (f.getName().endsWith("".json"")) { dependencies.add(f.toURI().toString()); } } } catch ( Exception e) { if (rethrowExcpetions) { throw e; } else { session.getLogger().warn(""Skipping maven project dependencies. Caused by:"" + e.getMessage()); } } return dependencies; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\JolokiaClientsProvider.java,canProvide,@Override public boolean  (Class<?> type){ return JolokiaClients.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\JolokiaClientsProvider.java,lookup,@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.clientInstance.get(); JolokiaClients jolokiaClients=new JolokiaClients(client); return jolokiaClients; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\J4pClientProvider.java,canProvide,@Override public boolean  (Class<?> type){ return J4pClient.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\J4pClientProvider.java,lookup,@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.clientInstance.get(); Session session=this.sessionInstance.get(); JolokiaClients jolokiaClients=new JolokiaClients(client); String serviceName=ge
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\EnricherUtils.java,getLabels,static Map<String String>  (Annotation... qualifiers){ HashMap<String String> rc=new HashMap<String String>(); for ( Annotation annotation : qualifiers) { if (annotation instanceof WithLabel) { WithLabel l=(WithLabel)annotation; rc.put(l.name() l.value()); } else if (annotation instanceof WithLabels) { WithLabels ls=(WithLabels)annotation; for ( WithLabel l : ls.value()) { rc.put(l.name() l.value()); } } } return rc; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\EnricherUtils.java,getPodName,static String  (Annotation... qualifiers){ for ( Annotation annotation : qualifiers) { if (annotation instanceof PodName) { return ((PodName)annotation).value(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\EnricherUtils.java,getReplicationControllerName,static String  (Annotation... qualifiers){ for ( Annotation annotation : qualifiers) { if (annotation instanceof ReplicationControllerName) { return ((ReplicationControllerName)annotation).value(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\EnricherUtils.java,getServiceName,static String  (Annotation... qualifiers){ for ( Annotation annotation : qualifiers) { if (annotation instanceof ServiceName) { return ((ServiceName)annotation).value(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\PodListResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return PodList.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\PodListResourceProvider.java,lookup,@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.clientInstance.get(); Session session=sessionInstance.get(); Map<String String> labels=getLabels(qualifiers); if (labels.isEmpty()) { return clie
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ReplicationControllerListResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return ReplicationControllerList.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ReplicationControllerListResourceProvider.java,lookup,@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.clientInstance.get(); Session session=sessionInstance.get(); Map<String String> labels=getLabels(qualifiers); if (labels.isEmpty()) { return clie
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ReplicationControllerResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return ReplicationController.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ReplicationControllerResourceProvider.java,lookup,@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.clientInstance.get(); Session session=sessionInstance.get(); String name=getReplicationControllerName(qualifiers); return client.replicationContr
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\PodResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return Pod.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\PodResourceProvider.java,lookup,@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.clientInstance.get(); Session session=sessionInstance.get(); String name=getPodName(qualifiers); if (name != null) { return client.pods().inNames
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ServiceListResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return ServiceList.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ServiceListResourceProvider.java,lookup,@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.clientInstance.get(); Session session=sessionInstance.get(); Map<String String> labels=getLabels(qualifiers); if (labels.isEmpty()) { return clie
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ServiceResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return Service.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\ServiceResourceProvider.java,lookup,@Override public Object  (ArquillianResource resource Annotation... qualifiers){ KubernetesClient client=this.clientInstance.get(); Session session=sessionInstance.get(); String name=getServiceName(qualifiers); return client.services().inNamespace(session
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\SessionResourceProvider.java,canProvide,@Override public boolean  (Class<?> type){ return Session.class.isAssignableFrom(type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\enricher\SessionResourceProvider.java,lookup,@Override public Object  (ArquillianResource arquillianResource Annotation... annotations){ return sessionInstance.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\event\Stop.java,Stop,public  (Session session){ super(session); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\event\Start.java,Start,public  (Session session){ super(session); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\AnsiLogger.java,error,@Override public void  (String msg){ System.out.println(ansi().fg(RED).a(msg).reset()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\AnsiLogger.java,info,@Override public void  (String msg){ System.out.println(msg); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\AnsiLogger.java,status,@Override public void  (String msg){ System.out.println(ansi().fg(GREEN).a(msg).reset()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\AnsiLogger.java,warn,@Override public void  (String msg){ System.out.println(ansi().fg(YELLOW).a(msg).reset()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\LoggerFactory.java,createLogger,public void  (@Observes Configuration configuration){ if (configuration.isAnsiLoggerEnabled()) { loggerPoducer.set(new AnsiLogger()); } else { loggerPoducer.set(new SimpleLogger()); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,Session,public  (String id String namespace Logger logger){ this.id=id; this.logger=logger; this.namespace=namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,destroy,"void  (){ logger.status(""Destroying Session:"" + id); System.out.flush(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,getBaseDir,"public File  (){ if (basedir == null) { basedir=new File(System.getProperty(""basedir"" ""."")); } return basedir; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,getFailed,public AtomicInteger  (){ return failed; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,getLogger,public Logger  (){ return logger; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,getNamespace,public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,getPassed,public AtomicInteger  (){ return passed; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,getSkiped,public AtomicInteger  (){ return skiped; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\Session.java,init,"void  (){ logger.status(""Initializing Session:"" + id); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\SimpleLogger.java,error,@Override public void  (String msg){ System.out.println(msg); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\SimpleLogger.java,info,@Override public void  (String msg){ System.out.println(msg); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\SimpleLogger.java,status,@Override public void  (String msg){ System.out.println(msg); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\log\SimpleLogger.java,warn,@Override public void  (String msg){ System.out.println(msg); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionEvent.java,getSession,public Session  (){ return session; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\ShutdownHook.java,ShutdownHook,public  (KubernetesClient client Controller controller Configuration configuration Session session List<KubernetesList> kubeConfigs){ this.client=client; this.controller=controller; this.configuration=configuration; this.session=session; this.kubeConfigs=kubeConfigs; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\ShutdownHook.java,run,"@Override public void  (){ session.getLogger().warn(""Shutdown hook cleaning up the integration test!""); try { cleanupSession(client controller configuration session kubeConfigs Constants.ABORTED_STATUS); } catch ( MultiException e) { session.getLogger().w"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\TestListener.java,start,"public void  (@Observes(precedence=Integer.MIN_VALUE) BeforeTestLifecycleEvent event KubernetesClient client Session session){ String pkg=event.getTestClass().getJavaClass().getPackage().getName(); String className=event.getTestClass().getJavaClass().getSimpleName(); String methodName=event.getTestMethod().getName(); ConfigMaps.updateConfigMapTestStatus(client session trimName(pkg className methodName) ""RUNNING""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\TestListener.java,stop,public void  (@Observes(precedence=Integer.MIN_VALUE) AfterTestLifecycleEvent event TestResult result KubernetesClient client Session session){ String pkg=event.getTestClass().getJavaClass().getPackage().getName(); String className=event.getTestClass().getJavaClass().getSimpleName(); String methodName=event.getTestMethod().getName(); ConfigMaps.updateConfigMapTestStatus(client session trimName(pkg className methodName) result.getStatus().name()); switch (result.getStatus()) { case PASSED: session.getPassed().incrementAndGet(); break; case FAILED: session.getFailed().incrementAndGet(); break; case SKIPPED: session.getSkiped().incrementAndGet(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\TestListener.java,trimName,"static String  (String packageName String className String methodName){ StringBuilder sb=new StringBuilder(); sb.append(trimPackage(packageName)).append(""."").append(className).append(""."").append(methodName); String result=sb.toString(); int prefixLength=Annotations.Tests.TEST_CASE_STATUS.length(); if (prefixLength + result.length() > MAX_ANNOTATION_KEY_LENGTH) { result=result.substring(prefixLength + result.length() - MAX_ANNOTATION_KEY_LENGTH); } if (result.charAt(0) == '.') { result=result.substring(1); } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\TestListener.java,trimPackage,"static String  (String pkg){ StringBuilder sb=new StringBuilder(); boolean first=true; for ( String part : pkg.split(""\\."")) { if (first) { first=false; } else { sb.append("".""); } sb.append(part.substring(0 1)); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,addConfig,"protected void  (List<KubernetesList> kubeConfigs Object dto Controller controller Configuration configuration Logger log String namespace String sourceName){ dto=expandTemplate(controller configuration log namespace sourceName dto); if (dto instanceof KubernetesList) { kubeConfigs.add((KubernetesList)dto); } else if (dto instanceof HasMetadata) { KubernetesList wrappedItem=new KubernetesListBuilder().withItems((HasMetadata)dto).build(); kubeConfigs.add(wrappedItem); } else { throw new IllegalArgumentException(""Unsupported object type in "" + sourceName + "". Class: ""+ (dto != null ? dto.getClass().getName() : ""null object"")); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,addRegistryToImageNameIfNotPresent,public void  (Iterable<HasMetadata> items String registry) throws Exception { if (items != null) { for ( HasMetadata item : items) { if (item instanceof KubernetesList) { KubernetesList list=(KubernetesList)item; addRegistryToImageNameIfNotPresent(list.getItems() registry); } else if (item instanceof Template) { Template template=(Template)item; addRegistryToImageNameIfNotPresent(template.getObjects() registry); } else if (item instanceof Pod) { List<Container> containers=((Pod)item).getSpec().getContainers(); prefixRegistryIfNotPresent(containers registry); } else if (item instanceof ReplicationController) { List<Container> containers=((ReplicationController)item).getSpec().getTemplate().getSpec().getContainers(); prefixRegistryIfNotPresent(containers registry); } else if (item instanceof ReplicaSet) { List<Container> containers=((ReplicaSet)item).getSpec().getTemplate().getSpec().getContainers(); prefixRegistryIfNotPresent(containers registry); } else if (item instanceof DeploymentConfig) { List<Container> containers=((DeploymentConfig)item).getSpec().getTemplate().getSpec().getContainers(); prefixRegistryIfNotPresent(containers registry); } else if (item instanceof Deployment) { List<Container> containers=((Deployment)item).getSpec().getTemplate().getSpec().getContainers(); prefixRegistryIfNotPresent(containers registry); } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,applyConfiguration,"private boolean  (KubernetesClient client Controller controller Configuration configuration Session session List<KubernetesList> kubeConfigs) throws Exception { Logger log=session.getLogger(); Map<Integer Callable<Boolean>> conditions=new TreeMap<>(); Callable<Boolean> sessionPodsReady=new SessionPodsAreReady(client session); Callable<Boolean> servicesReady=new SessionServicesAreReady(client session configuration); Set<HasMetadata> entities=new TreeSet<>(new HasMetadataComparator()); for ( KubernetesList c : kubeConfigs) { entities.addAll(enhance(session configuration c).getItems()); } if (containsImageStreamResources(entities)) { } else { String registry=getLocalDockerRegistry(); if (Strings.isNotBlank(registry)) { log.status(""Adapting resources to pull images from registry: "" + registry); addRegistryToImageNameIfNotPresent(entities registry); } else { log.status(""No local fabric8 docker registry found""); } } List<Object> items=new ArrayList<>(); items.addAll(entities); Collections.sort(items new Comparator<Object>(){ @Override public int compare( Object left  Object right){ if (left instanceof Service) { return -1; } else if (right instanceof Service) { return 1; } else { return 0; } } } ); boolean isOpenshift=client.isAdaptable(OpenShiftClient.class); String namespace=session.getNamespace(); String routeDomain=null; if (Strings.isNotBlank(configuration.getKubernetesDomain())) { routeDomain=configuration.getKubernetesDomain(); } preprocessEnvironment(client controller configuration session); Set<HasMetadata> extraEntities=new TreeSet<>(new HasMetadataComparator()); for ( Object entity : items) { if (entity instanceof Pod) { Pod pod=(Pod)entity; log.status(""Applying pod:"" + getName(pod)); Set<Secret> secrets=generateSecrets(client session pod.getMetadata()); String serviceAccountName=pod.getSpec().getServiceAccountName(); if (Strings.isNotBlank(serviceAccountName)) { generateServiceAccount(client session secrets serviceAccountName); } controller.applyPod(pod session.getId()); conditions.put(1 sessionPodsReady); } else if (entity instanceof Service) { Service service=(Service)entity; String serviceName=getName(service); log.status(""Applying service:"" + serviceName); controller.applyService(service session.getId()); conditions.put(2 servicesReady); if (isOpenshift) { Route route=Routes.createRouteForService(routeDomain namespace service log); if (route != null) { log.status(""Applying route for:"" + serviceName); controller.applyRoute(route ""route for "" + serviceName); extraEntities.add(route); } } } else if (entity instanceof ReplicationController) { ReplicationController replicationController=(ReplicationController)entity; log.status(""Applying replication controller:"" + getName(replicationController)); Set<Secret> secrets=generateSecrets(client session replicationController.getSpec().getTemplate().getMetadata()); String serviceAccountName=replicationController.getSpec().getTemplate().getSpec().getServiceAccountName(); if (Strings.isNotBlank(serviceAccountName)) { generateServiceAccount(client session secrets serviceAccountName); } controller.applyReplicationController(replicationController session.getId()); conditions.put(1 sessionPodsReady); } else if (entity instanceof ReplicaSet || entity instanceof Deployment || entity instanceof DeploymentConfig) { log.status(""Applying "" + entity.getClass().getSimpleName() + "".""); controller.apply(entity session.getId()); conditions.put(1 sessionPodsReady); } else if (entity instanceof OAuthClient) { OAuthClient oc=(OAuthClient)entity; ObjectMeta metadata=KubernetesHelper.getOrCreateMetadata(oc); String name=metadata.getName(); if (isOpenshift) { OpenShiftClient openShiftClient=client.adapt(OpenShiftClient.class); OAuthClient current=openShiftClient.oAuthClients().withName(name).get(); boolean create=false; if (current == null) { current=oc; create=true; } boolean updated=false; List<String> redirectURIs=current.getRedirectURIs(); String namespaceSuffix=""-"" + namespace; String redirectUri=""http://"" + name + namespaceSuffix; if (Strings.isNotBlank(routeDomain)) { redirectUri+=""."" + Strings.stripPrefix(routeDomain "".""); } if (!redirectURIs.contains(redirectUri)) { redirectURIs.add(redirectUri); updated=true; } current.setRedirectURIs(redirectURIs); log.status(""Applying OAuthClient:"" + name); controller.setSupportOAuthClients(true); if (create) { openShiftClient.oAuthClients().create(current); } else { if (updated) { openShiftClient.oAuthClients().withName(name).delete(); current.getMetadata().setResourceVersion(null); openShiftClient.oAuthClients().create(current); } } } } else if (entity instanceof HasMetadata) { log.status(""Applying "" + entity.getClass().getSimpleName() + "":""+ KubernetesHelper.getName((HasMetadata)entity)); controller.apply(entity session.getId()); } else if (entity != null) { log.status(""Applying "" + entity.getClass().getSimpleName() + "".""); controller.apply(entity session.getId()); } } entities.addAll(extraEntities); if (!conditions.isEmpty()) { Callable<Boolean> compositeCondition=new CompositeCondition(conditions.values()); WaitStrategy waitStrategy=new WaitStrategy(compositeCondition configuration.getWaitTimeout() configuration.getWaitPollInterval()); if (!waitStrategy.await()) { log.error(""Timed out waiting for pods/services!""); return false; } else { log.status(""All pods/services are currently 'running'!""); } } else { log.warn(""No pods/services/replication controllers defined in the configuration!""); } return true; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,call,@Override public URL  () throws Exception { return new URL(dependency); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,clearTestResultDirectories,"private void  (Session session){ Files.recursiveDelete(new File(session.getBaseDir() ""target/test-pod-status"")); Files.recursiveDelete(new File(session.getBaseDir() ""target/test-pod-logs"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,compare,@Override public int  (Object left Object right){ if (left instanceof Service) { return -1; } else if (right instanceof Service) { return 1; } else { return 0; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,containsImageStreamResources,private boolean  (Iterable<HasMetadata> entities){ if (entities != null) { for ( HasMetadata entity : entities) { if (entity instanceof ImageStream) { return true; } } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,createURL,protected URL  (final String dependency) throws Exception { return URLs.doWithMavenURLHandlerFactory(new Callable<URL>(){ @Override public URL call() throws Exception { return new URL(dependency); } } ); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,enhance,"private KubernetesList  (final Session session Configuration configuration KubernetesList kubernetesList){ if (configuration == null || configuration.getProperties() == null || !configuration.getProperties().containsKey(Constants.KUBERNETES_MODEL_PROCESSOR_CLASS)) { return kubernetesList; } String processorClassName=configuration.getProperties().get(Constants.KUBERNETES_MODEL_PROCESSOR_CLASS); try { final Object instance=SessionListener.class.getClassLoader().loadClass(processorClassName).newInstance(); KubernetesListBuilder builder=new KubernetesListBuilder(kubernetesList); ((Visitable)builder).accept(new Visitor(){ @Override public void visit( Object o){ for ( Method m : findMethods(instance o.getClass())) { Named named=m.getAnnotation(Named.class); if (named != null && !Strings.isNullOrBlank(named.value())) { String objectName=o instanceof ObjectMeta ? getName((ObjectMeta)o) : getName((HasMetadata)o); if (!named.value().equals(objectName)) { session.getLogger().warn(""Named method:"" + m.getName() + "" with name:""+ named.value()+ "" doesn't match: ""+ objectName+ ""  ignoring""); return; } } try { m.invoke(instance o); } catch ( IllegalAccessException e) { } catch ( InvocationTargetException e) { session.getLogger().error(""Error invoking visitor method:"" + m.getName() + "" on:""+ instance+ ""with argument:""+ o); } } } } ); return builder.build(); } catch ( Exception e) { session.getLogger().warn(""Failed to load processor class:"" + processorClassName + "". Ignoring""); return kubernetesList; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,expandTemplate,"protected Object  (Controller controller Configuration configuration Logger log String namespace String sourceName Object dto){ if (dto instanceof Template) { Template template=(Template)dto; KubernetesHelper.setNamespace(template namespace); String parameterNamePrefix=""""; overrideTemplateParameters(template configuration.getProperties() parameterNamePrefix); log.status(""Applying template in namespace "" + namespace); controller.installTemplate(template sourceName); dto=controller.processTemplate(template sourceName); if (dto == null) { throw new IllegalArgumentException(""Failed to process Template!""); } } return dto; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,findMethods,private static Set<Method>  (Object instance Class argumentType){ Set<Method> result=new LinkedHashSet<>(); for ( Method m : instance.getClass().getDeclaredMethods()) { if (m.getParameterTypes().length == 1 && m.getParameterTypes()[0].isAssignableFrom(argumentType)) { result.add(m); } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,generateSecrets,private Set<Secret>  (KubernetesClient client Session session ObjectMeta meta){ Set<Secret> secrets=new HashSet<>(); Map<String String> annotations=meta.getAnnotations(); if (annotations != null && !annotations.isEmpty()) { for ( Map.Entry<String String> entry : annotations.entrySet()) { String key=entry.getKey(); String value=entry.getValue(); if (SecretKeys.isSecretKey(key)) { SecretKeys keyType=SecretKeys.fromValue(key); for ( String name : Secrets.getNames(value)) { Map<String String> data=new HashMap<>(); Secret secret=null; try { secret=client.secrets().inNamespace(session.getNamespace()).withName(name).get(); } catch ( Exception e) { } if (secret == null) { for ( String c : Secrets.getContents(value name)) { data.put(c keyType.generate()); } secret=client.secrets().inNamespace(session.getNamespace()).createNew().withNewMetadata().withName(name).endMetadata().withData(data).done(); secrets.add(secret); } } } } } return secrets; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,generateServiceAccount,"private void  (KubernetesClient client Session session Set<Secret> secrets String serviceAccountName){ List<ObjectReference> secretRefs=new ArrayList<>(); for ( Secret secret : secrets) { secretRefs.add(new ObjectReferenceBuilder().withNamespace(session.getNamespace()).withName(KubernetesHelper.getName(secret)).build()); } SecurityContextConstraints securityContextConstraints=client.securityContextConstraints().withName(session.getNamespace()).get(); if (securityContextConstraints == null) { client.securityContextConstraints().createNew().withNewMetadata().withName(session.getNamespace()).endMetadata().withAllowHostDirVolumePlugin(true).withAllowPrivilegedContainer(true).withNewRunAsUser().withType(""RunAsAny"").endRunAsUser().withNewSeLinuxContext().withType(""RunAsAny"").endSeLinuxContext().withUsers(""system:serviceaccount:"" + session.getNamespace() + "":""+ serviceAccountName).done(); } ServiceAccount serviceAccount=client.serviceAccounts().inNamespace(session.getNamespace()).withName(serviceAccountName).get(); if (serviceAccount == null) { client.serviceAccounts().inNamespace(session.getNamespace()).createNew().withNewMetadata().withName(serviceAccountName).endMetadata().withSecrets(secretRefs).done(); } else { client.serviceAccounts().inNamespace(session.getNamespace()).withName(serviceAccountName).replace(new ServiceAccountBuilder(serviceAccount).withNewMetadata().withName(serviceAccountName).endMetadata().addToSecrets(secretRefs.toArray(new ObjectReference[secretRefs.size()])).build()); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,getLocalDockerRegistry,"private String  (){ if (Strings.isNotBlank(System.getenv(Constants.FABRIC8_DOCKER_REGISTRY_SERVICE_HOST))) { return System.getenv(Constants.FABRIC8_DOCKER_REGISTRY_SERVICE_HOST) + "":"" + System.getenv(Constants.FABRIC8_DOCKER_REGISTRY_SERVICE_PORT); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,hasRegistry,"public static boolean  (String imageName){ if (imageName == null) { throw new NullPointerException(""Image name must not be null""); } Pattern tagPattern=Pattern.compile(""^(.+?)(?::([^:/]+))?$""); Matcher matcher=tagPattern.matcher(imageName); if (!matcher.matches()) { throw new IllegalArgumentException(imageName + "" is not a proper image name ([registry/][repo][:port]""); } String rest=matcher.group(1); String[] parts=rest.split(""\\s*/\\s*""); String part=parts[0]; return part.contains(""."") || part.contains("":""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,loadDependency,"protected void  (Logger log List<KubernetesList> kubeConfigs File file Controller controller Configuration configuration Logger logger String namespace) throws IOException { if (file.isFile()) { log.info(""Loading file "" + file); Object content; if (file.getName().endsWith("".yaml"") || file.getName().endsWith("".yml"")) { content=loadYaml(file); } else { content=loadJson(file); } addConfig(kubeConfigs content controller configuration log namespace file.getPath()); } else { File[] children=file.listFiles(); if (children != null) { for ( File child : children) { String name=child.getName().toLowerCase(); if (name.endsWith("".json"") || name.endsWith("".yaml"") || name.endsWith("".yml"")) { loadDependency(log kubeConfigs child controller configuration log namespace); } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,prefixRegistryIfNotPresent,"private void  (List<Container> containers String registry){ for ( Container container : containers) { if (!hasRegistry(container.getImage())) { container.setImage(registry + ""/"" + container.getImage()); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,preprocessEnvironment,"protected void  (KubernetesClient client Controller controller Configuration configuration Session session){ if (configuration.isUseGoFabric8()) { Logger logger=session.getLogger(); Commands.assertCommand(logger ""oc"" ""project"" session.getNamespace()); Commands.assertCommand(logger ""gofabric8"" ""deploy"" ""-y"" ""--console=false"" ""--templates=false""); Commands.assertCommand(logger ""gofabric8"" ""secrets"" ""-y""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,start,"public void  (final @Observes Start event KubernetesClient client Controller controller Configuration configuration) throws Exception { Objects.requireNonNull(client ""KubernetesClient most not be null!""); Session session=event.getSession(); final Logger log=session.getLogger(); String namespace=session.getNamespace(); System.setProperty(Constants.KUBERNETES_NAMESPACE namespace); log.status(""Using Kubernetes at: "" + client.getMasterUrl()); log.status(""Creating kubernetes resources inside namespace: "" + namespace); log.info(""if you use OpenShift then type this switch namespaces: oc project "" + namespace); log.info(""if you use kubernetes then type this to switch namespaces: kubectl namespace "" + namespace); clearTestResultDirectories(session); controller.setNamespace(namespace); controller.setThrowExceptionOnError(true); controller.setRecreateMode(true); controller.setIgnoreRunningOAuthClients(true); if (configuration.isCreateNamespaceForTest()) { createNamespace(client controller session); } else { String namespaceToUse=configuration.getNamespace(); checkNamespace(client controller session configuration); updateConfigMapStatus(client session Constants.RUNNING_STATUS); namespace=namespaceToUse; controller.setNamespace(namespace); } List<KubernetesList> kubeConfigs=new LinkedList<>(); shutdownHook=new ShutdownHook(client controller configuration session kubeConfigs); Runtime.getRuntime().addShutdownHook(shutdownHook); try { URL configUrl=configuration.getEnvironmentConfigUrl(); List<String> dependencies=!configuration.getEnvironmentDependencies().isEmpty() ? configuration.getEnvironmentDependencies() : resolver.resolve(session); if (configuration.isEnvironmentInitEnabled()) { for ( String dependency : dependencies) { log.info(""Found dependency: "" + dependency); loadDependency(log kubeConfigs dependency controller configuration namespace); } OpenShiftClient openShiftClient=controller.getOpenShiftClientOrNull(); if (configUrl == null) { String resourceName=""kubernetes.yml""; if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.IMAGE) && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.ROUTE)) { resourceName=""openshift.yml""; } configUrl=findConfigResource(""/META-INF/fabric8/"" + resourceName); } if (configUrl != null) { log.status(""Applying kubernetes configuration from: "" + configUrl); String configText=readAsString(configUrl); Object dto=null; String configPath=configUrl.getPath(); if (configPath.endsWith("".yml"") || configPath.endsWith("".yaml"")) { dto=loadYaml(configText KubernetesResource.class); } else { dto=loadJson(configText); } dto=expandTemplate(controller configuration log namespace configUrl.toString() dto); KubernetesList kubeList=KubernetesHelper.asKubernetesList(dto); List<HasMetadata> items=kubeList.getItems(); kubeConfigs.add(kubeList); } if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.IMAGE)) { File targetDir=new File(System.getProperty(""basedir"" ""."") + ""/target""); if (targetDir.exists() && targetDir.isDirectory()) { File[] files=targetDir.listFiles(); if (files != null) { for ( File file : files) { if (file.getName().endsWith(""-is.yml"")) { loadDependency(log kubeConfigs file.toURI().toURL().toString() controller configuration namespace); } } } } } } if (!configuration.isEnvironmentInitEnabled() || applyConfiguration(client controller configuration session kubeConfigs)) { displaySessionStatus(client session); } else { throw new IllegalStateException(""Failed to apply kubernetes configuration.""); } } catch ( Exception e) { try { cleanupSession(client controller configuration session kubeConfigs Constants.ERROR_STATUS); } catch ( MultiException me) { throw e; } finally { if (shutdownHook != null) { Runtime.getRuntime().removeShutdownHook(shutdownHook); } } throw new RuntimeException(e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,stop,public void  (@Observes Stop event KubernetesClient client Controller controller Configuration configuration List<KubernetesList> kubeConfigs) throws Exception { try { Session session=event.getSession(); cleanupSession(client controller configuration session kubeConfigs Util.getSessionStatus(session)); } finally { if (shutdownHook != null) { Runtime.getRuntime().removeShutdownHook(shutdownHook); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SessionListener.java,visit,@Override public void  (Object o){ for ( Method m : findMethods(instance o.getClass())) { Named named=m.getAnnotation(Named.class); if (named != null && !Strings.isNullOrBlank(named.value())) { String objectName=o instanceof ObjectMeta ? getName((ObjectMe
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SuiteListener.java,start,public void  (@Observes(precedence=100) BeforeSuite event Configuration configuration Logger logger){ session=new Session(configuration.getSessionId() configuration.getNamespace() logger); session.init(); sessionProducer.set(session); controlEvent.fire(new Start(session)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\kubernetes\SuiteListener.java,stop,public void  (@Observes(precedence=-100) AfterSuite event Logger logger){ controlEvent.fire(new Stop(session)); session.destroy(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\KubernetesExtension.java,getClientCreator,private Class  (){ Class creatorClass=null; String creatorClassName=System.getProperty(Constants.CLIENT_CREATOR_CLASS_NAME); try { if (Strings.isNotBlank(creatorClassName)) creatorClass=KubernetesExtension.class.getClassLoader().loadClass(creatorClassName); } catch ( Throwable t) { } return creatorClass != null ? creatorClass : ClientCreator.class; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\KubernetesExtension.java,register,@Override public void  (ExtensionBuilder builder){ builder.observer(Configuration.class).observer(Configurer.class).observer(getClientCreator()).observer(ControllerCreator.class).observer(LoggerFactory.class).observer(SuiteListener.class).observer(TestLis
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\ConfigMaps.java,createConfigMapAnnotations,"private static Map<String String>  (Session session String status){ Map<String String> annotations=new HashMap<>(); File dir=Util.getProjectBaseDir(session); String gitUrl=Util.findGitUrl(session dir); annotations.put(Annotations.Tests.SESSION_ID session.getId()); annotations.put(Annotations.Tests.TEST_SESSION_STATUS status); if (Strings.isNotBlank(gitUrl)) { annotations.put(Annotations.Builds.GIT_URL gitUrl); } File pomProperties=new File(dir ""target/maven-archiver/pom.properties""); if (pomProperties.isFile()) { try { Properties properties=new Properties(); properties.load(new FileInputStream(pomProperties)); Map<String String> map=PropertiesHelper.toMap(properties); for ( Map.Entry<String String> entry : map.entrySet()) { String key=entry.getKey(); String value=entry.getValue(); if (Strings.isNotBlank(key) && Strings.isNotBlank(value)) { annotations.put(Annotations.Project.PREFIX + key value); } } } catch ( IOException e) { session.getLogger().warn(""Failed to load "" + pomProperties + "" file to annotate the namespace: ""+ e); } } return annotations; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\ConfigMaps.java,updateConfigMapStatus,"public static synchronized ConfigMap  (KubernetesClient client final Session session final String status){ try { ConfigMap configMap=new ConfigMapBuilder().withNewMetadata().withName(FABRIC8_ARQUILLIAN).addToAnnotations(createConfigMapAnnotations(session status)).endMetadata().build(); return client.configMaps().inNamespace(session.getNamespace()).withName(FABRIC8_ARQUILLIAN).createOrReplace(configMap); } catch ( Exception e) { LOG.warn(""failed to update ConfigMap "" + FABRIC8_ARQUILLIAN + "". ""+ e e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\ConfigMaps.java,updateConfigMapTestStatus,"public static synchronized ConfigMap  (KubernetesClient client final Session session final String test final String status){ try { return client.configMaps().inNamespace(session.getNamespace()).withName(FABRIC8_ARQUILLIAN).edit().addToData(test status).done(); } catch ( Exception e) { LOG.warn(""failed to update ConfigMap "" + FABRIC8_ARQUILLIAN + "". ""+ e e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Commands.java,assertCommand,"public static void  (Logger logger String... commandArray){ String commandText=Strings.join(Arrays.asList(commandArray) "" ""); logger.info(""Invoking command: "" + commandText); try { Process process=Runtime.getRuntime().exec(commandArray); processOutput(logger process.getInputStream() true); processOutput(logger process.getErrorStream() false); int status=process.waitFor(); assertEquals(""status code of: "" + commandText 0 status); } catch ( Exception e) { throw new AssertionError(""Failed to invoke: "" + commandText + ""\n""+ e e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Commands.java,processOutput,"protected static void  (Logger logger InputStream inputStream boolean error) throws IOException { BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream)); try { while (true) { String line=reader.readLine(); if (line == null) break; if (error) { logger.error(line); } else { logger.info(line); } } } catch ( Exception e) { logger.error(""Failed to process "" + (error ? ""stderr"" : ""stdout"") + "": ""+ e); throw e; } finally { Closeables.closeQuietly(reader); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Routes.java,createRouteForService,"public static Route  (String routeDomainPostfix String namespace Service service Logger log){ Route route=null; String id=KubernetesHelper.getName(service); if (Strings.isNotBlank(id) && shouldCreateRouteForService(log service id)) { route=new Route(); String routeId=id; KubernetesHelper.setName(route namespace routeId); RouteSpec routeSpec=new RouteSpec(); RouteTargetReference objectRef=new RouteTargetReferenceBuilder().withName(id).build(); routeSpec.setTo(objectRef); if (Strings.isNotBlank(routeDomainPostfix)) { String host=Strings.stripSuffix(Strings.stripSuffix(id ""-service"") "".""); String namespaceSuffix=""-"" + namespace; routeSpec.setHost(host + namespaceSuffix + "".""+ Strings.stripPrefix(routeDomainPostfix ""."")); } route.setSpec(routeSpec); String json=null; try { json=KubernetesHelper.toJson(route); } catch ( JsonProcessingException e) { json=e.getMessage() + "". object: "" + route; } } return route; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Routes.java,shouldCreateRouteForService,"protected static boolean  (Logger log Service service String id){ if (""kubernetes"".equals(id) || ""kubernetes-ro"".equals(id)) { return false; } Set<Integer> ports=KubernetesHelper.getPorts(service); if (ports.size() == 1) { return true; } else { log.info(""Not generating route for service "" + id + "" as only single port services are supported. Has ports: ""+ ports); return false; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Namespaces.java,checkNamespace,"public static void  (KubernetesClient client Controller controller final Session session Configuration configuration){ boolean exists=controller.checkNamespace(session.getNamespace()); if (exists) { return; } if (configuration.isNamespaceLazyCreateEnabled()) { createNamespace(client controller session); } else { throw new IllegalStateException(""Namespace "" + session.getNamespace() + "" doesn't exists""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Namespaces.java,createNamespace,"public static void  (KubernetesClient client Controller controller Session session){ String newNamespace=session.getNamespace(); Map<String String> labels=new HashMap<>(); labels.put(""project"" client.getNamespace()); labels.put(""provider"" ""fabric8""); labels.put(""component"" ""integrationTest""); labels.put(""framework"" ""arquillian""); controller.applyNamespace(newNamespace labels); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\SecretKeys.java,SecretKeys, (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\SecretKeys.java,fromValue,public static SecretKeys  (String v){ return map.get(v); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,createURLStreamHandler,@Override public URLStreamHandler  (String protocol){ URLStreamHandler answer=customFactory.createURLStreamHandler(protocol); if (answer == null && oldFactory != null) { answer=oldFactory.createURLStreamHandler(protocol); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,doWithCustomURLHandlerFactory,public static <T>T  (final URLStreamHandlerFactory customFactory Callable<T> block) throws Exception { final URLStreamHandlerFactory oldFactory=getURLStreamHandlerFactory(); try { URLStreamHandlerFactory newFactory=new URLStreamHandlerFactory(){ @Override public URLStreamHandler createURLStreamHandler( String protocol){ URLStreamHandler answer=customFactory.createURLStreamHandler(protocol); if (answer == null && oldFactory != null) { answer=oldFactory.createURLStreamHandler(protocol); } return answer; } } ; setURLStreamHandlerFactory(newFactory); return block.call(); } finally { setURLStreamHandlerFactory(oldFactory); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,doWithMavenURLHandlerFactory,"public static <T>T  (Callable<T> block) throws Exception { URLStreamHandlerFactory factory=new URLStreamHandlerFactory(){ @Override public URLStreamHandler createURLStreamHandler( String protocol){ if (protocol.equals(""mvn"")) { return new org.ops4j.pax.url.mvn.Handler(); } return null; } } ; return doWithCustomURLHandlerFactory(factory block); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,getURLStreamHandlerFactory,"static URLStreamHandlerFactory  (){ String fieldName=""factory""; Class<URL> clazz=URL.class; try { Field field=clazz.getDeclaredField(fieldName); field.setAccessible(true); return (URLStreamHandlerFactory)field.get(null); } catch ( NoSuchFieldException e) { LOG.error(""Could not find field "" + fieldName + "" in class ""+ clazz.getName()+ "". ""+ e e); } catch ( IllegalAccessException e) { LOG.error(""Could not access field "" + fieldName + "" in class ""+ clazz.getName()+ "". ""+ e e); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\URLs.java,setURLStreamHandlerFactory,"static void  (URLStreamHandlerFactory newFactory){ String fieldName=""factory""; Class<URL> clazz=URL.class; try { Field field=clazz.getDeclaredField(fieldName); field.setAccessible(true); URLStreamHandlerFactory oldValue=(URLStreamHandlerFactory)field.get(null); if (oldValue != null) { field.set(null null); } } catch ( NoSuchFieldException e) { LOG.error(""Could not find field "" + fieldName + "" in class ""+ clazz.getName()+ "". ""+ e e); } catch ( IllegalAccessException e) { LOG.error(""Could not access field "" + fieldName + "" in class ""+ clazz.getName()+ "". ""+ e e); } if (newFactory != null) { URL.setURLStreamHandlerFactory(newFactory); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Secrets.java,getContents,"public static List<String>  (String str String name){ List<String> result=new ArrayList<>(); Matcher matcher=FOLDER_PATTERN.matcher(str); while (matcher.find()) { String candidate=matcher.group(FOLDER_GROUP); if (name.equals(candidate)) { String content=matcher.group(CONTENT_GROUP); if (Strings.isNotBlank(content)) { for ( String s : content.split(""[  ]+"")) { result.add(s); } } } } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Secrets.java,getNames,public static List<String>  (String str){ Matcher matcher=FOLDER_PATTERN.matcher(str); List<String> result=new ArrayList<>(); while (matcher.find()) { result.add(matcher.group(FOLDER_GROUP)); } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,cleanupAllMatching,"public static void  (KubernetesClient client Session session List<Throwable> errors List<KubernetesList> kubeConfigs) throws MultiException { String sessionNamespace=session.getNamespace(); session.getLogger().info(""Removing provisioned resources in namespace "" + sessionNamespace); for (int i=0; i < 10; i++) { for ( KubernetesList list : kubeConfigs) { List<HasMetadata> items=list.getItems(); if (items != null) { for ( HasMetadata item : items) { cleanupItem(client session item errors); } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,cleanupAllResources,"public static void  (KubernetesClient client Session session List<Throwable> errors) throws MultiException { String sessionNamespace=session.getNamespace(); session.getLogger().info(""Removing all resources in namespace "" + sessionNamespace); for (int i=0; i < 10; i++) { OpenShiftClient openShiftClient=new Controller(client).getOpenShiftClientOrNull(); if (openShiftClient != null) { try { openShiftClient.deploymentConfigs().inNamespace(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } try { openShiftClient.routes().inNamespace(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } } try { client.extensions().deployments().inNamespace(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } try { client.extensions().replicaSets().inNamespace(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } try { client.replicationControllers().inNamespace(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } try { client.pods().inNamespace(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } try { client.extensions().ingresses().inNamespace(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } try { client.services().inNamespace(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } try { client.securityContextConstraints().withName(sessionNamespace).delete(); } catch ( KubernetesClientException e) { errors.add(e); } List<Pod> filteredPods=notNullList(client.pods().inNamespace(sessionNamespace).list().getItems()); if (filteredPods.isEmpty()) { return; } else { try { Thread.sleep(1000); } catch ( InterruptedException e) { e.printStackTrace(); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,cleanupItem,private static void  (KubernetesClient client Session session HasMetadata item List<Throwable> errors){ String sessionNamespace=session.getNamespace(); KubernetesHelper.getOrCreateMetadata(item).setNamespace(sessionNamespace); client.resource(item).inNamespace(sessionNamespace).cascading(true).delete(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,cleanupSession,"public static void  (KubernetesClient client Controller controller Configuration configuration Session session List<KubernetesList> kubeConfigs String status) throws MultiException { if (configuration.isNamespaceCleanupEnabled()) { waitUntilWeCanDestroyNamespace(session); List<Throwable> errors=new ArrayList<>(); if (configuration.isDeleteAllResourcesOnExit()) { cleanupAllResources(client session errors); } else { cleanupAllMatching(client session errors kubeConfigs); } if (configuration.isCreateNamespaceForTest()) { try { controller.deleteNamespace(session.getNamespace()); } catch ( Exception e) { errors.add(e); } } List<Throwable> exceptions=new ArrayList<>(); for ( Throwable exception : errors) { if (exception instanceof KubernetesClientException) { if (((KubernetesClientException)exception).getCode() == 403) { session.getLogger().warn(exception.getMessage()); continue; } } exceptions.add(exception); } if (!exceptions.isEmpty()) { throw new MultiException(""Error while cleaning up session."" exceptions); } } else { ConfigMaps.updateConfigMapStatus(client session status); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,displaySessionStatus,"public static void  (KubernetesClient client Session session) throws MultiException { if (client == null) { session.getLogger().warn(""No KubernetesClient for session: "" + session.getId()); return; } if (client.isAdaptable(OpenShiftClient.class)) { OpenShiftClient oClient=client.adapt(OpenShiftClient.class); List<DeploymentConfig> deploymentConfigs=oClient.deploymentConfigs().inNamespace(session.getNamespace()).list().getItems(); if (deploymentConfigs == null) { throw new MultiException(""No deployment configs found in namespace"" + session.getNamespace()); } for ( DeploymentConfig deploymentConfig : deploymentConfigs) { session.getLogger().info(""Deployment config:"" + KubernetesHelper.getName(deploymentConfig)); } } else { List<Deployment> deployments=client.extensions().deployments().inNamespace(session.getNamespace()).list().getItems(); if (deployments == null) { throw new MultiException(""No deployments found in namespace"" + session.getNamespace()); } for ( Deployment deployment : deployments) { session.getLogger().info(""Deployment:"" + KubernetesHelper.getName(deployment)); } } List<Pod> pods=client.pods().inNamespace(session.getNamespace()).list().getItems(); if (pods == null) { throw new MultiException(""No pods found in namespace"" + session.getNamespace()); } for ( Pod pod : pods) { session.getLogger().info(""Pod:"" + KubernetesHelper.getName(pod) + "" Status:""+ pod.getStatus()); } List<Service> svcs=client.services().inNamespace(session.getNamespace()).list().getItems(); if (svcs == null) { throw new MultiException(""No services found in namespace"" + session.getNamespace()); } for ( Service service : svcs) { session.getLogger().info(""Service:"" + KubernetesHelper.getName(service) + "" IP:""+ getPortalIP(service)+ "" Port:""+ getPorts(service)); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,findGitUrl,"public static String  (Session session File dir){ try { return GitHelpers.extractGitUrl(dir); } catch ( IOException e) { session.getLogger().warn(""Could not detect git url from directory: "" + dir + "". ""+ e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,getProjectBaseDir,"public static File  (Session session){ String basedir=System.getProperty(""basedir"" "".""); return new File(basedir); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,getSessionStatus,"public static String  (Session session){ if (session.getFailed().get() > 0) { return ""FAILED""; } else { return ""PASSED""; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,readAsString,public static String  (URL url){ try { return IOHelpers.readFully(url); } catch ( IOException e) { throw new RuntimeException(e); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\main\java\io\fabric8\arquillian\utils\Util.java,waitUntilWeCanDestroyNamespace,"protected static void  (Session session){ final Logger log=session.getLogger(); String confirmDestroy=Systems.getEnvVarOrSystemProperty(Constants.NAMESPACE_CLEANUP_CONFIRM_ENABLED ""false""); if (Objects.equal(confirmDestroy ""true"")) { showErrorsBeforePause(session); System.out.println(); System.out.println(""Waiting to destroy the namespace.""); System.out.println(""Please type: [Q] to terminate the namespace.""); while (true) { try { int ch=System.in.read(); if (ch < 0 || ch == 'Q') { System.out.println(""\nStopping...""); break; } else { System.out.println(""Found character: "" + Character.toString((char)ch)); } } catch ( IOException e) { log.warn(""Failed to read from input. "" + e); break; } } } else { String timeoutText=Systems.getEnvVarOrSystemProperty(Constants.NAMESPACE_CLEANUP_TIMEOUT ""0""); Long timeout=null; if (Strings.isNotBlank(timeoutText)) { try { timeout=Long.parseLong(timeoutText); } catch ( NumberFormatException e) { log.warn(""Failed to parse timeout value '"" + timeoutText + ""' for $Constants.NAMESPACE_CLEANUP_TIMEOUT. ""+ e); } } if (timeout != null && timeout > 0L) { showErrorsBeforePause(session); System.out.println(); System.out.println(""Sleeping for "" + timeout + "" seconds until destroying the namespace""); try { Thread.sleep(timeout * 1000); } catch ( InterruptedException e) { log.info(""Interupted sleeping to GC the namespace: "" + e); } } } System.out.println(""Now destroying the Fabric8 Arquillian test case namespace""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\DependencyResolverTest.java,testResolutionOfPomWithNoDeps,"@Test public void  () throws IOException { Session session=new Session(""test-session"" ""test-session-123"" new AnsiLogger()); DependencyResolver resolver=new DependencyResolver(DependencyResolver.class.getResource(""/test-pom.xml"").getFile() true); Assert.as"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ShowConfiguration.java,main,"public static void  (String[] args){ String environmentKey=""testing""; if (args.length > 0) { environmentKey=args[0]; } Map<String String> map=new HashMap<>(); map.put(FABRIC8_ENVIRONMENT environmentKey); Configuration configuration=Configuration.fromMap(map new DefaultKubernetesClient()); System.out.println(""Namespace: "" + configuration.getNamespace()); System.out.println(""isEnvironmentInitEnabled: "" + configuration.isEnvironmentInitEnabled()); System.out.println(""isNamespaceLazyCreateEnabled: "" + configuration.isNamespaceLazyCreateEnabled()); System.out.println(""isNamespaceCleanupEnabled: "" + configuration.isNamespaceCleanupEnabled()); System.out.println(""isCreateNamespaceForTest: "" + configuration.isCreateNamespaceForTest()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,getKubernetesClient,"public KubernetesClient  (){ if (kubernetesClient == null) { kubernetesClient=server.getKubernetesClient(); } assertNotNull(""No KubernetesClient was created by the mock!"" kubernetesClient); return kubernetesClient; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,setKubernetesClient,public void  (KubernetesClient kubernetesClient){ this.kubernetesClient=kubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,setUp,@Before public void  (){ System.getProperties().remove(KUBERNETES_MASTER); System.getProperties().remove(KUBERNETES_DOMAIN); System.getProperties().remove(KUBERNETES_NAMESPACE); System.getProperties().remove(FABRIC8_ENVIRONMENT); System.getProperties().re
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,tearDown,@After public void  (){ setUp(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testConfigWithSystemProperties,"@Test public void  (){ String expctedMaster=""http://expected.master:80""; String expectedNamespace=""expected.namespace""; String expectedDomain=""expected.domain""; String expectedConfigUrl=""http://expected.env.config/kubernetes.json""; System.setProperty(KUBE"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testConfigWithSystemPropertiesAndConfigMap,"@Test public void  (){ String expctedMaster=""http://expected.master:80""; String expectedNamespace=""expected.namespace""; String expectedDomain=""expected.domain""; String expectedConfigUrl=""http://expected.env.config/kubernetes.json""; System.setProperty(KUBE"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testEnvironmentKeyButNoConfigMap,"@Test public void  (){ String devNamespace=""myproject""; String environmentKey=""testing""; String testNamespace=devNamespace; Map<String String> data=new HashMap<>(); data.put(""staging"" "" name: Staging\n"" + "" namespace: myproject-staging\n"" + "" order: 0""); "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testEnvironmentKeyButNoConfigMapLocalOnly,"@Ignore public void  (){ String devNamespace=""myproject""; String environmentKey=""testing""; String testNamespace=devNamespace; Map<String String> data=new HashMap<>(); data.put(""staging"" "" name: Staging\n"" + "" namespace: myproject-staging\n"" + "" order: 0"")"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testFailIfEnvironmentNamespaceNotFoundFromConfigMap,"@Test(expected=IllegalStateException.class) public void  (){ String devNamespace=""myproject""; String environmentKey=""testing""; Map<String String> data=new HashMap<>(); data.put(""staging"" "" name: Staging\n"" + "" namespace: myproject-staging\n"" + "" order: 0"""
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testFallbackToClientsDefaults,"@Test public void  (){ String file=getClass().getResource(""/test-kubeconfig"").getFile(); System.setProperty(Config.KUBERNETES_KUBECONFIG_FILE file); Configuration.resetFallbackConfig(); Configuration config=Configuration.fromMap(new HashMap<String String>"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testMissingEnvironmentNamespace,"@Test(expected=IllegalStateException.class) public void  (){ Map<String String> map=new HashMap<>(); map.put(FABRIC8_ENVIRONMENT ""testing""); map.put(FAIL_ON_MISSING_ENVIRONMENT_NAMESPACE ""true""); Configuration.fromMap(map getKubernetesClient()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testNamespaceConflict,"@Test(expected=IllegalStateException.class) public void  (){ Map<String String> map=new HashMap<>(); map.put(NAMESPACE_TO_USE ""namesapce1""); map.put(FABRIC8_ENVIRONMENT ""testing""); map.put(""testing.namespace"" ""namespace2""); Configuration.fromMap(map getKu"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testNamespaceFoundFromConfigMap,"@Test public void  (){ String devNamespace=""myproject""; String environmentKey=""testing""; String testNamespace=""myproject-testing""; Map<String String> data=new HashMap<>(); data.put(environmentKey "" name: Testing\n"" + "" namespace: "" + testNamespace + ""\n""+"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testNamespaceNotFoundFromConfigMap,"@Ignore public void  (){ String devNamespace=""myproject""; String environmentKey=""testing""; String testNamespace=devNamespace; Map<String String> data=new HashMap<>(); data.put(""staging"" "" name: Staging\n"" + "" namespace: myproject-staging\n"" + "" order: 0"")"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\kubernetes\ConfigurationTest.java,testWithConfigMap,"@Test public void  (){ String expctedMaster=""http://expected.master:80""; String expectedNamespace=""expected.namespace""; String expectedDomain=""expected.domain""; String expectedConfigUrl=""http://expected.env.config/kubernetes.json""; Map<String String> map="
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\PodInjection.java,testPodListInjection,"@Test public void  (){ assertNotNull(podList); assertEquals(1 podList.getItems().size()); assertEquals(""test-pod"" podList.getItems().get(0).getMetadata().getName()); assertNotNull(pod); assertEquals(""test-pod"" pod.getMetadata().getName()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\ServiceInjection.java,testPodListInjection,"@Test public void  (){ assertNotNull(serviceList); assertEquals(1 serviceList.getItems().size()); assertEquals(""test-service"" serviceList.getItems().get(0).getMetadata().getName()); assertNotNull(service); assertEquals(""test-service"" service.getMetadata()"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\ReplicationControllerInjection.java,testPodListInjection,"@Test public void  (){ assertNotNull(controllerList); assertEquals(1 controllerList.getItems().size()); assertEquals(""test-controller"" controllerList.getItems().get(0).getMetadata().getName()); assertNotNull(controller); assertEquals(""test-controller"" con"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\server\mock\ServerMockTestSuite.java,setUpClass,"@BeforeClass public static void  () throws IOException { MOCK.expect().withPath(""/oapi/v1/projects"").andReturn(200 new ProjectListBuilder().withItems(new ProjectBuilder().withNewMetadata().withName(""arquillian"").and().build()).build()).always(); MOCK.expe"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\ResourceInjection.java,testCliettInjection,@Test public void  (){ assertNotNull(client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\ResourceInjection.java,testSessionInjection,@Test public void  (){ assertNotNull(session); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-arquillian\src\test\java\io\fabric8\arquillian\utils\SecretsTest.java,testGetNames,"@Test public void  (){ List<String> result=Secrets.getNames(""one two""); assertTrue(result.contains(""one"")); assertTrue(result.contains(""two"")); result=Secrets.getNames(""one  two""); assertTrue(result.contains(""one"")); assertTrue(result.contains(""two"")); re"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,BaseBean,public  (String name Type beanType Annotation... annotations){ this.name=name; this.beanType=beanType; Set<Type> allTypes=new LinkedHashSet<>(); allTypes.add(beanType); for (Type t=Types.superClassOf(beanType); !allTypes.contains(Object.class) && t != null; t=Types.superClassOf(t)) { allTypes.add(t); } types=Collections.unmodifiableSet(allTypes); qualifiers=Collections.unmodifiableSet(new HashSet<>(Arrays.asList(annotations))); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,getBeanClass,@Override public Class<?>  (){ return Types.asClass(beanType); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,getId,@Override public String  (){ return getName(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,getInjectionPoints,@Override public Set<InjectionPoint>  (){ return Collections.emptySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,getName,@Override public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,getQualifiers,@Override public Set<Annotation>  (){ return qualifiers; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,getScope,@Override public Class<? extends Annotation>  (){ return ApplicationScoped.class; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,getStereotypes,@Override public Set<Class<? extends Annotation>>  (){ return Collections.emptySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,getTypes,@Override public Set<Type>  (){ return types; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,isAlternative,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\BaseBean.java,isNullable,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,ProducerBean,public  (String name Type type Producer<X> producer Annotation... annotations){ super(name type annotations); this.producer=producer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,create,"@Override public X  (CreationalContext<X> creationalContext){ if (producer == null) { throw new IllegalStateException(""No producer has been specified""); } return producer.produce(creationalContext); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,destroy,@Override public void  (X instance CreationalContext<X> creationalContext){ producer.dispose(instance); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; ProducerBean that=(ProducerBean)o; if (getId() != null ? !getId().equals(that.getId()) : that.getId() != null) return false; if (g
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,getProducer,public Producer<X>  (){ return producer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,getScope,@Override public Class<? extends Annotation>  (){ return Dependent.class; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ProducerBean.java,hashCode,@Override public int  (){ int result=getId() != null ? getId().hashCode() : 0; result=31 * result + (getBeanClass() != null ? getBeanClass().hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\KubernetesClientBean.java,KubernetesClientBean,"public  (){ super(""kubernetesClient""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\KubernetesClientBean.java,create,@Override public KubernetesClient  (CreationalContext<KubernetesClient> creationalContext){ return new DefaultKubernetesClient(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceBean.java,Key,private  (String serviceName String serviceProtocol String servicePort String servicePath String serviceAlias Boolean serviceEndpoint Boolean serviceExternal Type type Producer producer){ this.serviceName=serviceName; this.serviceProtocol=serviceProtocol; this.servicePath=servicePath; this.serviceAlias=serviceAlias; this.servicePort=servicePort; this.serviceEndpoint=serviceEndpoint; this.serviceExternal=serviceExternal; this.type=type; this.producer=producer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceBean.java,ServiceBean,private  (String serviceName String serviceProtocol String servicePort String servicePath String serviceAlias Type type Producer<X> producer Boolean serviceEndpoint Boolean serviceExternal){ super(serviceAlias type producer Qualifiers.create(serviceName serviceProtocol servicePort servicePath serviceEndpoint serviceExternal)); this.serviceName=serviceName; this.serviceProtocol=serviceProtocol; this.servicePort=servicePort; this.servicePath=servicePath; this.serviceAlias=serviceAlias; this.serviceEndpoint=serviceEndpoint; this.serviceExternal=serviceExternal; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceBean.java,anyBean,public static <S>ServiceBean<S>  (String id String protocol String port String path Boolean endpoint Boolean external Type type){ for ( Map.Entry<Key ServiceBean> entry : BEANS.entrySet()) { Key key=entry.getKey(); if (Objects.equal(key.serviceName id) && Objects.equal(key.serviceProtocol protocol) && Objects.equal(key.servicePort port)&& Objects.equal(key.servicePath path)&& Objects.equal(key.serviceEndpoint endpoint)&& Objects.equal(key.serviceExternal external)&& Objects.equal(key.type type)) { return entry.getValue(); } } return getBean(id protocol port path null endpoint external type); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\KubernetesClientBean.java,destroy,@Override public void  (KubernetesClient instance CreationalContext<KubernetesClient> creationalContext){ instance.close(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,Key,private  (String serviceName String serviceProtocol String servicePort String servicePath String serviceAlias Boolean serviceEndpoint Boolean serviceExternal){ this.serviceName=serviceName; this.serviceProtocol=serviceProtocol; this.servicePort=servicePort; this.servicePath=servicePath; this.serviceAlias=serviceAlias; this.serviceEndpoint=serviceEndpoint; this.serviceExternal=serviceExternal; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,ServiceUrlBean,private  (String serviceName String serviceProtocol String servicePort String servicePath String serviceAlias Boolean serviceEndpoint Boolean serviceExternal){ super(serviceAlias String.class serviceEndpoint ? new FirstEndpointProducer(serviceName serviceProtocol servicePort) : new ServiceUrlProducer(serviceName serviceProtocol servicePort servicePath serviceExternal) Qualifiers.create(serviceName serviceProtocol servicePort servicePath serviceEndpoint serviceExternal)); this.serviceName=serviceName; this.serviceProtocol=serviceProtocol; this.servicePort=servicePort; this.servicePath=servicePath; this.serviceAlias=serviceAlias; this.serviceEndpoint=serviceEndpoint; this.serviceExternal=serviceExternal; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,anyBean,public static ServiceUrlBean  (String id String protocol String port String path Boolean endpoint Boolean external){ for ( Map.Entry<Key ServiceUrlBean> entry : BEANS.entrySet()) { Key key=entry.getKey(); if (Objects.equal(key.serviceName id) && Objects.equal(key.serviceProtocol protocol) && Objects.equal(key.servicePort port)&& Objects.equal(key.servicePath path)&& Objects.equal(key.serviceEndpoint endpoint)&& Objects.equal(key.serviceExternal external)) { return entry.getValue(); } } return getBean(id protocol port path null endpoint external); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Key key=(Key)o; if (serviceName != null ? !serviceName.equals(key.serviceName) : key.serviceName != null) return false; if (servic
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getBean,public static ServiceUrlBean  (String name String protocol String port String path String alias Boolean endpoint Boolean external){ String serviceAlias=alias != null ? alias : Utils.toAlias(name protocol port path endpoint external SUFFIX); Key key=new Key(name protocol port path serviceAlias endpoint external); if (BEANS.containsKey(key)) { return BEANS.get(key); } ServiceUrlBean bean=new ServiceUrlBean(name protocol port path serviceAlias endpoint external); BEANS.put(key bean); return bean; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getBeans,public static Collection<ServiceUrlBean>  (){ return BEANS.values(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getServiceAlias,public String  (){ return serviceAlias; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getServiceEndpoint,public Boolean  (){ return serviceEndpoint; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getServiceExternal,public Boolean  (){ return serviceExternal; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getServiceName,public String  (){ return serviceName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getServicePath,public String  (){ return servicePath; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getServicePort,public String  (){ return servicePort; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,getServiceProtocol,public String  (){ return serviceProtocol; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,hashCode,@Override public int  (){ int result=serviceName != null ? serviceName.hashCode() : 0; result=31 * result + (serviceProtocol != null ? serviceProtocol.hashCode() : 0); result=31 * result + (servicePort != null ? servicePort.hashCode() : 0); result=31 * re
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlBean.java,toString,"@Override public String  (){ return ""ServiceUrlBean["" + ""serviceName='"" + serviceName + '\''+ ""  serviceProtocol='""+ serviceProtocol+ '\''+ ""  servicePort='""+ servicePort+ '\''+ ']'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,ConfigurationBean,private  (String configurationId Type type){ super(configurationId + SUFFIX type new ConfigurationProducer(configurationId Types.asClass(type)) new ConfigurationQualifier(configurationId)); this.configurationId=configurationId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,Key,private  (String configurationId Type type){ this.configurationId=configurationId; this.type=type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Key key=(Key)o; if (configurationId != null ? !configurationId.equals(key.configurationId) : key.configurationId != null) return f
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,getBean,public static ConfigurationBean  (String configurationId Type type){ Key key=new Key(configurationId type); if (BEANS.containsKey(key)) { return BEANS.get(key); } ConfigurationBean bean=new ConfigurationBean(configurationId type); BEANS.put(key bean); return bean; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,getBeans,public static Collection<ConfigurationBean>  (){ return BEANS.values(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,getConfigurationId,public String  (){ return configurationId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ConfigurationBean.java,hashCode,@Override public int  (){ int result=configurationId != null ? configurationId.hashCode() : 0; result=31 * result + (type != null ? type.hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\eager\EagerCDIExtension.java,afterDeploymentValidation,public void  (@Observes AfterDeploymentValidation event BeanManager beanManager){ AnnotationLiteral<Eager> annotationLiteral=new AnnotationLiteral<Eager>(){ } ; Set<Bean<?>> beans=beanManager.getBeans(Object.class annotationLiteral); for ( Bean<?> bean : beans) { Class<?> beanClass=bean.getBeanClass(); if (beanClass.isAnnotationPresent(ApplicationScoped.class) || beanClass.isAnnotationPresent(Singleton.class)) { beanManager.getReference(bean bean.getBeanClass() beanManager.createCreationalContext(bean)).toString(); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,FactoryMethodContext,public  (Bean bean Type sourceType Type returnType AnnotatedMethod factoryMethod){ this.bean=bean; this.sourceType=sourceType; this.returnType=returnType; this.factoryMethod=factoryMethod; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,collectDependencies,private static Set<FactoryMethodContext>  (FactoryMethodContext item Set<FactoryMethodContext> all){ Set<FactoryMethodContext> dependencies=new LinkedHashSet<>(); for ( FactoryMethodContext candidate : all) { if (item.getSourceType().equals(candidate.getReturnType())) { dependencies.add(candidate); } } return dependencies; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,getBean,public Bean  (){ return bean; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,getFactoryMethod,public AnnotatedMethod  (){ return factoryMethod; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,getReturnType,public Type  (){ return returnType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,getSourceType,public Type  (){ return sourceType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,sort,public static Set<FactoryMethodContext>  (Set<FactoryMethodContext> items){ Set<FactoryMethodContext> sorted=new LinkedHashSet<>(); Set<FactoryMethodContext> visited=new LinkedHashSet<>(); for ( FactoryMethodContext e : items) { visit(e items visited sorted); } return sorted; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\FactoryMethodContext.java,visit,private static void  (FactoryMethodContext item Set<FactoryMethodContext> all Set<FactoryMethodContext> visited Set<FactoryMethodContext> sorted){ if (!visited.add(item)) { return; } for ( FactoryMethodContext t : collectDependencies(item all)) { visit(t all visited sorted); } sorted.add(item); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,DelegatingInjectionPoint,public  (InjectionPoint delegate){ this.delegate=delegate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,getAnnotated,public Annotated  (){ return delegate.getAnnotated(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,getBean,public Bean<?>  (){ return delegate.getBean(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,getMember,public Member  (){ return delegate.getMember(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,getQualifiers,public Set<Annotation>  (){ return delegate.getQualifiers(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,getType,public Type  (){ return delegate.getType(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,isDelegate,public boolean  (){ return delegate.isDelegate(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\DelegatingInjectionPoint.java,isTransient,public boolean  (){ return delegate.isTransient(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,Key,private  (String serviceId String serviceProtocol String servicePort String servicePath String serviceAlias Boolean serviceEndpoint Boolean serviceExternal Type serviceCollectionType){ this.serviceId=serviceId; this.serviceProtocol=serviceProtocol; this.servicePort=servicePort; this.servicePath=servicePath; this.serviceAlias=serviceAlias; this.serviceEndpoint=serviceEndpoint; this.serviceExternal=serviceExternal; this.serviceCollectionType=serviceCollectionType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,ServiceUrlCollectionBean,private  (String serviceName String serviceProtocol String servicePort String servicePath String serviceAlias Boolean serviceEndpoint Boolean serviceExternal Type serviceCollectionType){ super(serviceAlias serviceCollectionType new ServiceEndpointsProducer(serviceName serviceProtocol servicePort) Qualifiers.create(serviceName serviceProtocol servicePort servicePath serviceEndpoint serviceExternal)); this.serviceName=serviceName; this.serviceProtocol=serviceProtocol; this.servicePort=servicePort; this.servicePath=servicePath; this.serviceAlias=serviceAlias; this.serviceEndpoint=serviceEndpoint; this.serviceExternal=serviceExternal; this.serviceCollectionType=serviceCollectionType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,anyBean,public static ServiceUrlCollectionBean  (String id String protocol String port String path Boolean endpoint Boolean external Type collectionType){ for ( Map.Entry<Key ServiceUrlCollectionBean> entry : BEANS.entrySet()) { Key key=entry.getKey(); if (Objects.equal(key.serviceId id) && Objects.equal(key.serviceProtocol protocol) && Objects.equal(key.servicePort port)&& Objects.equal(key.servicePath path)&& Objects.equal(key.serviceEndpoint endpoint)&& Objects.equal(key.serviceExternal external)) { return entry.getValue(); } } return getBean(id protocol port path null endpoint external collectionType); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Key key=(Key)o; if (serviceId != null ? !serviceId.equals(key.serviceId) : key.serviceId != null) return false; if (serviceProtoco
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getBean,public static ServiceUrlCollectionBean  (String name String protocol String port String path String alias Boolean endpoint Boolean external Type collectionType){ String serviceAlias=alias != null ? alias : Utils.toAlias(name protocol port path endpoint external SUFFIX); Key key=new Key(name protocol port path serviceAlias endpoint external collectionType); if (BEANS.containsKey(key)) { return BEANS.get(key); } ServiceUrlCollectionBean bean=new ServiceUrlCollectionBean(name protocol port path serviceAlias endpoint external collectionType); BEANS.put(key bean); return bean; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getBeans,public static Collection<ServiceUrlCollectionBean>  (){ return BEANS.values(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getServiceAlias,public String  (){ return serviceAlias; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getServiceCollectionType,public Type  (){ return serviceCollectionType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getServiceEndpoint,public Boolean  (){ return serviceEndpoint; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getServiceExternal,public Boolean  (){ return serviceExternal; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getServiceName,public String  (){ return serviceName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getServicePath,public String  (){ return servicePath; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getServicePort,public String  (){ return servicePort; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,getServiceProtocol,public String  (){ return serviceProtocol; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,hashCode,@Override public int  (){ int result=serviceId != null ? serviceId.hashCode() : 0; result=31 * result + (serviceProtocol != null ? serviceProtocol.hashCode() : 0); result=31 * result + (servicePort != null ? servicePort.hashCode() : 0); result=31 * result
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,isServiceEndpoint,public Boolean  (){ return serviceEndpoint; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\bean\ServiceUrlCollectionBean.java,toString,"@Override public String  (){ return ""ServiceUrlBean["" + ""serviceName='"" + serviceName + '\''+ ""  serviceProtocol='""+ serviceProtocol+ '\''+ ""  servicePort='""+ servicePort+ '\''+ ']'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,afterDiscovery,public void  (final @Observes AfterBeanDiscovery event BeanManager beanManager){ KubernetesHolder.useBeanManager(beanManager); if (beanManager.getBeans(KubernetesClient.class).isEmpty()) { event.addBean(new KubernetesClientBean()); } List<FactoryMethodContext> reverseFactories=new ArrayList<>(FactoryMethodContext.sort(factories)); Collections.reverse(reverseFactories); for ( final FactoryMethodContext factoryMethodContext : reverseFactories) { ServiceBean.doWith(factoryMethodContext.getReturnType() new ServiceBean.Callback(){ @Override public ServiceBean apply( ServiceBean bean){ String serviceId=bean.getServiceName(); String serviceProtocol=or(bean.getServiceProtocol() getFactoryMethodProtocol(factoryMethodContext.getFactoryMethod().getJavaMember())); String servicePort=or(bean.getServicePort() getFactoryMethodPort(factoryMethodContext.getFactoryMethod().getJavaMember())); String servicePath=or(bean.getServicePath() getFactoryMethodPath(factoryMethodContext.getFactoryMethod().getJavaMember())); Boolean serviceExternal=bean.getServiceExternal(); Boolean serviceEndpoint=bean.getServiceEndpoint(); if (!String.class.equals(factoryMethodContext.getSourceType())) { ServiceBean.getBean(serviceId serviceProtocol servicePort servicePath null serviceEndpoint serviceExternal factoryMethodContext.getSourceType()); } return bean.withProducer(new FactoryMethodProducer(factoryMethodContext.getBean() factoryMethodContext.getFactoryMethod() serviceId serviceProtocol servicePort servicePath)); } } ); } for ( ServiceUrlBean bean : ServiceUrlBean.getBeans()) { event.addBean(bean); } for ( ServiceUrlCollectionBean bean : ServiceUrlCollectionBean.getBeans()) { event.addBean(bean); } for ( ServiceBean bean : ServiceBean.getBeans()) { if (bean.getProducer() != null) { event.addBean(bean); } } for ( ConfigurationBean b : ConfigurationBean.getBeans()) { event.addBean(b); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,apply,@Override public ServiceBean  (ServiceBean bean){ String serviceId=bean.getServiceName(); String serviceProtocol=or(bean.getServiceProtocol() getFactoryMethodProtocol(factoryMethodContext.getFactoryMethod().getJavaMember())); String servicePort=or(bean.ge
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,getQualifiers,@Override public Set<Annotation>  (){ Set<Annotation> qualifiers=new LinkedHashSet<>(super.getQualifiers()); qualifiers.add(new EndpointQualifier(false)); return Collections.unmodifiableSet(qualifiers); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,getSourceType,private static <T>Type  (AnnotatedMethod<T> method){ for ( AnnotatedParameter<T> parameter : method.getParameters()) { if (parameter.isAnnotationPresent(ServiceName.class)) { return parameter.getBaseType(); } } return String.class; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,isConfigurationInjectionPoint,private static boolean  (InjectionPoint injectionPoint){ Set<Annotation> qualifiers=injectionPoint.getQualifiers(); for ( Annotation annotation : qualifiers) { if (annotation.annotationType().isAssignableFrom(Configuration.class)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,isGenericOf,private static boolean  (Type type Type raw Type argument){ if (type instanceof ParameterizedType) { ParameterizedType p=(ParameterizedType)type; return p.getRawType() != null && p.getRawType().equals(raw) && p.getActualTypeArguments().length == 1 && (p.getActualTypeArguments()[0].equals(argument) || argument == null); } else if (type instanceof Class) { return argument == null && type.equals(raw); } else { return false; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,isServiceInjectionPoint,public static boolean  (InjectionPoint injectionPoint){ Set<Annotation> qualifiers=injectionPoint.getQualifiers(); for ( Annotation annotation : qualifiers) { if (annotation.annotationType().isAssignableFrom(ServiceName.class)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,onInjectionPoint,public <T X>void  (@Observes ProcessInjectionPoint<T X> event BeanManager beanManager){ final InjectionPoint injectionPoint=event.getInjectionPoint(); if (isServiceInjectionPoint(injectionPoint)) { Annotated annotated=injectionPoint.getAnnotated(); ServiceName name=annotated.getAnnotation(ServiceName.class); Protocol protocol=annotated.getAnnotation(Protocol.class); PortName port=annotated.getAnnotation(PortName.class); Path path=annotated.getAnnotation(Path.class); Alias alias=annotated.getAnnotation(Alias.class); Endpoint endpoint=annotated.getAnnotation(Endpoint.class); External external=annotated.getAnnotation(External.class); String serviceName=name.value(); String serviceProtocol=protocol != null ? protocol.value() : null; String servicePort=port != null ? port.value() : null; String servicePath=path != null ? path.value() : null; String serviceAlias=alias != null ? alias.value() : null; Boolean serviceExternal=external != null ? external.value() : false; Boolean serviceEndpoint=endpoint != null ? endpoint.value() : false; Type type=annotated.getBaseType(); if (type instanceof ParameterizedType && Instance.class.equals(((ParameterizedType)type).getRawType())) { type=((ParameterizedType)type).getActualTypeArguments()[0]; } if (type.equals(String.class)) { ServiceUrlBean.getBean(serviceName serviceProtocol servicePort servicePath serviceAlias serviceEndpoint serviceExternal); } else if (isGenericOf(type List.class String.class)) { ServiceUrlCollectionBean.getBean(serviceName serviceProtocol servicePort servicePath serviceAlias serviceEndpoint serviceExternal Types.LIST_OF_STRINGS); } else if (isGenericOf(type List.class null)) { } else if (isGenericOf(type Set.class String.class)) { ServiceUrlCollectionBean.getBean(serviceName serviceProtocol servicePort servicePath serviceAlias serviceEndpoint serviceExternal Types.SET_OF_STRINGS); } else if (isGenericOf(type Set.class null)) { } else if (type instanceof Class) { ServiceBean.getBean(serviceName serviceProtocol servicePort servicePath serviceAlias serviceEndpoint serviceExternal type); } else { throw new RuntimeException(String.format(INJECTION_POINT_UNKNOWN_TYPE injectionPoint.getBean().getBeanClass() type)); } if (protocol == null) { setDefaultProtocol(event); } if (port == null) { setDefaultPort(event); } if (path == null) { setDefaultPath(event); } if (endpoint == null) { setDefaultEndpoint(event); } if (external == null) { setDefaultExternal(event); } } else if (isConfigurationInjectionPoint(injectionPoint)) { Annotated annotated=injectionPoint.getAnnotated(); Configuration configuration=annotated.getAnnotation(Configuration.class); Type type=injectionPoint.getType(); String configurationId=configuration.value(); ConfigurationBean.getBean(configurationId type); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,onManagedBean,public <X>void  (final @Observes ProcessManagedBean<X> event){ for ( final AnnotatedMethod<?> method : event.getAnnotatedBeanClass().getMethods()) { final Factory factory=method.getAnnotation(Factory.class); if (factory != null) { final Type sourceType=getSourceType(method); final Type returnType=method.getJavaMember().getReturnType(); factories.add(new FactoryMethodContext(event.getBean() sourceType returnType method)); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,processAnnotatedType,public <R>void  (@Observes ProcessAnnotatedType<R> pat BeanManager beanManager){ AnnotatedType type=pat.getAnnotatedType(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,setDefaultEndpoint,private <T X>void  (ProcessInjectionPoint<T X> event){ event.setInjectionPoint(new DelegatingInjectionPoint(event.getInjectionPoint()){ @Override public Set<Annotation> getQualifiers(){ Set<Annotation> qualifiers=new LinkedHashSet<>(super.getQualifiers()); qualifiers.add(new EndpointQualifier(false)); return Collections.unmodifiableSet(qualifiers); } } ); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,setDefaultExternal,private <T X>void  (ProcessInjectionPoint<T X> event){ event.setInjectionPoint(new DelegatingInjectionPoint(event.getInjectionPoint()){ @Override public Set<Annotation> getQualifiers(){ Set<Annotation> qualifiers=new LinkedHashSet<>(super.getQualifiers()); qualifiers.add(new ExternalQualifier(false)); return Collections.unmodifiableSet(qualifiers); } } ); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,setDefaultPath,"private <T X>void  (ProcessInjectionPoint<T X> event){ event.setInjectionPoint(new DelegatingInjectionPoint(event.getInjectionPoint()){ @Override public Set<Annotation> getQualifiers(){ Set<Annotation> qualifiers=new LinkedHashSet<>(super.getQualifiers()); qualifiers.add(new PathQualifier("""")); return Collections.unmodifiableSet(qualifiers); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,setDefaultPort,"private <T X>void  (ProcessInjectionPoint<T X> event){ event.setInjectionPoint(new DelegatingInjectionPoint(event.getInjectionPoint()){ @Override public Set<Annotation> getQualifiers(){ Set<Annotation> qualifiers=new LinkedHashSet<>(super.getQualifiers()); qualifiers.add(new PortQualifier("""")); return Collections.unmodifiableSet(qualifiers); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Fabric8Extension.java,setDefaultProtocol,"private <T X>void  (ProcessInjectionPoint<T X> event){ event.setInjectionPoint(new DelegatingInjectionPoint(event.getInjectionPoint()){ @Override public Set<Annotation> getQualifiers(){ Set<Annotation> qualifiers=new LinkedHashSet<>(super.getQualifiers()); qualifiers.add(new ProtocolQualifier("""")); return Collections.unmodifiableSet(qualifiers); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,FactoryMethodProducer,public  (Bean<T> bean AnnotatedMethod<X> factoryMethod String pointName String pointProtocol String pointPort String pointPath){ this.bean=bean; this.factoryMethod=factoryMethod; this.pointName=pointName; this.pointProtocol=pointProtocol; this.pointPort=pointPort; this.pointPath=pointPath; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,getConfiguration,private static Object  (String serviceId Type type CreationalContext context){ try { return BeanProvider.getContextualReference(Types.asClass(type) new ConfigurationQualifier(serviceId)); } catch ( IllegalStateException e) { return ConfigurationBean.getBean(serviceId type).getProducer().produce(context); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,getEndpointList,"private static List<String>  (String serviceId String serviceProtocol String servicePort String servicePath Boolean serviceExternal CreationalContext context){ final Boolean serviceEndpoint=true; try { return BeanProvider.getContextualReference(List.class Qualifiers.create(serviceId serviceProtocol servicePort servicePath serviceEndpoint serviceExternal)); } catch ( IllegalStateException e) { Producer<String> producer=ServiceUrlBean.anyBean(serviceId serviceProtocol servicePort servicePath serviceEndpoint serviceExternal).getProducer(); if (producer != null) { return ServiceUrlCollectionBean.anyBean(serviceId serviceProtocol servicePort servicePath serviceEndpoint serviceExternal Types.LIST_OF_STRINGS).getProducer().produce(context); } else { throw new IllegalStateException(""Could not find producer for endpoints of service:"" + serviceId + "" protocol:""+ serviceProtocol); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,getInjectionPoints,@Override public Set<InjectionPoint>  (){ return Collections.emptySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,getServiceBean,"private static Object  (String serviceId String serviceProtocol String servicePort String servicePath Boolean serviceExternal Boolean serviceEndpoint Type serviceType CreationalContext context){ try { return BeanProvider.getContextualReference(Types.asClass(serviceType) Qualifiers.create(serviceId serviceProtocol servicePort servicePath serviceEndpoint serviceExternal)); } catch ( IllegalStateException e) { Producer producer=ServiceBean.anyBean(serviceId serviceProtocol servicePort servicePath serviceEndpoint serviceExternal serviceType).getProducer(); if (producer != null) { return producer.produce(context); } else { throw new IllegalStateException(""Could not find producer for service:"" + serviceId + "" type:""+ serviceType+ "" protocol:""+ serviceProtocol); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,getServiceUrl,"private static String  (String serviceId String serviceProtocol String servicePort String servicePath Boolean serviceEndpoint Boolean serviceExternal CreationalContext context){ try { return BeanProvider.getContextualReference(String.class Qualifiers.create(serviceId serviceProtocol servicePort servicePath serviceEndpoint serviceExternal)); } catch ( IllegalStateException e) { Producer<String> producer=ServiceUrlBean.anyBean(serviceId serviceProtocol servicePort servicePath serviceEndpoint serviceExternal).getProducer(); if (producer != null) { return ServiceUrlBean.anyBean(serviceId serviceProtocol servicePort servicePath serviceEndpoint serviceExternal).getProducer().produce(context); } else { throw new IllegalStateException(""Could not find producer for service:"" + serviceId + "" protocol:""+ serviceProtocol); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FactoryMethodProducer.java,produce,@Override public T  (CreationalContext<T> ctx){ List<Object> arguments=new ArrayList<>(); for ( AnnotatedParameter<X> parameter : factoryMethod.getParameters()) { Type type=parameter.getBaseType(); ServiceName parameterServiceName=parameter.getAnnotation(
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ConfigurationProducer.java,ConfigurationProducer,public  (String configurationId Class<T> type){ this.type=type; this.configurationId=configurationId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ConfigurationProducer.java,getInjectionPoints,@Override public Set<InjectionPoint>  (){ return Collections.emptySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ConfigurationProducer.java,produce,"@Override public T  (CreationalContext<T> ctx){ if (configurationId == null) { throw new IllegalArgumentException(""No service id has been specified.""); } try { T bean=type.newInstance(); for ( Field f : type.getDeclaredFields()) { ConfigProperty configPro"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ConfigurationProducer.java,toEnv,"private static String  (String str){ return str.toUpperCase().replaceAll(""-"" ""_""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\KubernetesHolder.java,getBeanManager,private static BeanManager  (){ try { return CDI.current().getBeanManager(); } catch ( Throwable t) { return BEAN_MANAGER.get(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\KubernetesHolder.java,getClient,"public synchronized static KubernetesClient  (){ if (client != null) { return client; } BeanManager beanManager=getBeanManager(); if (beanManager != null) { Set<Bean<?>> beans=beanManager.getBeans(KubernetesClient.class); if (beans.isEmpty()) { throw new IllegalStateException(""Could not find client beans!""); } else { CreationalContext ctx=beanManager.createCreationalContext(null); client=(KubernetesClient)beanManager.getReference(beans.iterator().next() KubernetesClient.class ctx); } } else { client=new DefaultKubernetesClient(); } return client; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\KubernetesHolder.java,useBeanManager,public static void  (BeanManager beanManager){ BEAN_MANAGER.set(beanManager); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FirstEndpointProducer.java,FirstEndpointProducer,public  (String serviceId String serviceProtocol String servicePort){ this.serviceId=serviceId; this.serviceProtocol=serviceProtocol; this.servicePort=servicePort; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FirstEndpointProducer.java,getInjectionPoints,@Override public Set<InjectionPoint>  (){ return Collections.emptySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\FirstEndpointProducer.java,produce,"@Override public String  (CreationalContext<String> ctx){ if (serviceId == null) { throw new IllegalArgumentException(""No service id has been specified.""); } List<String> endpoints=Services.toServiceEndpointUrl(serviceId serviceProtocol servicePort); if ("
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceEndpointsProducer.java,ServiceEndpointsProducer,public  (String serviceId String serviceProtocol String servicePort){ this.serviceId=serviceId; this.serviceProtocol=serviceProtocol; this.servicePort=servicePort; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceEndpointsProducer.java,getInjectionPoints,@Override public Set<InjectionPoint>  (){ return Collections.emptySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceEndpointsProducer.java,produce,"@Override public List<String>  (CreationalContext<List<String>> ctx){ if (serviceId == null) { throw new IllegalArgumentException(""No service id has been specified.""); } return Services.toServiceEndpointUrl(serviceId serviceProtocol servicePort); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceUrlProducer.java,ServiceUrlProducer,public  (String serviceId String serviceProtocol String servicePortName String servicePath Boolean serviceExternal){ this.serviceId=serviceId; this.serviceProtocol=serviceProtocol; this.servicePortName=servicePortName; this.servicePath=servicePath; this.serviceExternal=serviceExternal; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceUrlProducer.java,getInjectionPoints,@Override public Set<InjectionPoint>  (){ return Collections.emptySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\producers\ServiceUrlProducer.java,produce,"@Override public String  (CreationalContext<String> ctx){ if (serviceId == null) { throw new IllegalArgumentException(""No service id has been specified.""); } return Services.toServiceUrl(serviceId serviceProtocol servicePortName servicePath serviceExterna"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ConfigurationQualifier.java,ConfigurationQualifier,public  (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ConfigurationQualifier.java,value,@Override public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\EndpointQualifier.java,EndpointQualifier,public  (boolean value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\EndpointQualifier.java,value,@Override public boolean  (){ return value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\PortQualifier.java,PortQualifier,public  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\PortQualifier.java,value,@Override public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ExternalQualifier.java,ExternalQualifier,public  (boolean value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ExternalQualifier.java,value,@Override public boolean  (){ return value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ProtocolQualifier.java,ProtocolQualifier,public  (String id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ProtocolQualifier.java,value,@Override public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\PathQualifier.java,PathQualifier,public  (String id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\PathQualifier.java,value,@Override public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\Qualifiers.java,create,"public static Annotation[]  (String serviceId String protocol String port String path Boolean endpoint Boolean external){ if (serviceId == null) { throw new IllegalArgumentException(""Service Id cannot be null.""); } List<Annotation> qualifiers=new ArrayList<>(); qualifiers.add(new ServiceNameQualifier(serviceId)); if (!Strings.isNullOrBlank(protocol)) { qualifiers.add(new ProtocolQualifier(protocol)); } else { qualifiers.add(new ProtocolQualifier("""")); } if (!Strings.isNullOrBlank(port)) { qualifiers.add(new PortQualifier(port)); } else { qualifiers.add(new PortQualifier("""")); } if (!Strings.isNullOrBlank(path)) { qualifiers.add(new PathQualifier(path)); } else { qualifiers.add(new PathQualifier("""")); } qualifiers.add(new EndpointQualifier(endpoint)); qualifiers.add(new ExternalQualifier(external)); return qualifiers.toArray(new Annotation[qualifiers.size()]); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ServiceNameQualifier.java,ServiceNameQualifier,public  (String id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\qualifiers\ServiceNameQualifier.java,value,@Override public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,asClass,public static Class  (Type type){ if (type instanceof Class) { return ((Class)type); } else if (type instanceof ParameterizedType) { return asClass(((ParameterizedType)type).getRawType()); } else { return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,genericType,public static final Type  (final Type raw final Type... arguments){ return new ParameterizedType(){ @Override public Type[] getActualTypeArguments(){ return arguments; } @Override public Type getRawType(){ return raw; } @Override public Type getOwnerType(){ return null; } } ; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,getActualTypeArguments,@Override public Type[]  (){ return arguments; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,getOwnerType,@Override public Type  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,getRawType,@Override public Type  (){ return raw; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Types.java,superClassOf,public static Type  (Type type){ if (type instanceof Class) { return ((Class)type).getSuperclass(); } else if (type instanceof ParameterizedType) { return superClassOf(((ParameterizedType)type).getRawType()); } else { return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Services.java,toServiceEndpointUrl,"public static List<String>  (String serviceId String serviceProtocol String servicePort){ List<String> endpoints=new ArrayList<>(); KubernetesClient client=KubernetesHolder.getClient(); String namespace=client.getNamespace(); String actualProtocol=serviceProtocol != null ? serviceProtocol : DEFAULT_PROTO; Endpoints item=KubernetesHolder.getClient().endpoints().inNamespace(namespace).withName(serviceId).get(); if (item != null) { for ( EndpointSubset subset : item.getSubsets()) { for ( EndpointAddress address : subset.getAddresses()) { for ( EndpointPort endpointPort : subset.getPorts()) { if (servicePort == null || servicePort.equals(endpointPort.getName())) { endpoints.add(actualProtocol + ""://"" + address.getIp()+ "":""+ endpointPort.getPort()); } } } } } return endpoints; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Services.java,toServiceUrl,public static String  (String serviceName String serviceProtocol String servicePortName String servicePath boolean serviceExternal){ KubernetesClient client=KubernetesHolder.getClient(); String serviceNamespace=client.getNamespace(); String actualProtocol=Strings.isNullOrBlank(serviceProtocol) ? DEFAULT_PROTO : serviceProtocol; return URLUtils.pathJoin(KubernetesHelper.getServiceURL(client serviceName serviceNamespace actualProtocol servicePortName serviceExternal) servicePath); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,getFactoryMethodPath,static String  (Method method){ for ( Annotation[] annotations : method.getParameterAnnotations()) { Boolean hasServiceName=false; String path=null; for ( Annotation annotation : annotations) { if (annotation.annotationType().equals(ServiceName.class)) { hasServiceName=true; } else if (annotation.annotationType().equals(Path.class)) { path=readAnnotationValue(annotation.toString()); } if (hasServiceName && path != null) { return path; } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,getFactoryMethodPort,static String  (Method method){ for ( Annotation[] annotations : method.getParameterAnnotations()) { Boolean hasServiceName=false; String port=null; for ( Annotation annotation : annotations) { if (annotation.annotationType().equals(ServiceName.class)) { hasServiceName=true; } else if (annotation.annotationType().equals(PortName.class)) { port=readAnnotationValue(annotation.toString()); } if (hasServiceName && port != null) { return port; } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,getFactoryMethodProtocol,static String  (Method method){ for ( Annotation[] annotations : method.getParameterAnnotations()) { Boolean hasServiceName=false; String protocol=null; for ( Annotation annotation : annotations) { if (annotation.annotationType().equals(ServiceName.class)) { hasServiceName=true; } else if (annotation.annotationType().equals(Protocol.class)) { protocol=readAnnotationValue(annotation.toString()); } if (hasServiceName && protocol != null) { return protocol; } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,or,public static String  (String... candidates){ for ( String candidate : candidates) { if (Strings.isNotBlank(candidate)) { return candidate; } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,readAnnotationValue,"static String  (String annotation){ String result=annotation; try { result=result.substring(result.indexOf(""value="") + 6); result=result.substring(0 result.lastIndexOf("")"")); } catch ( Exception e) { return null; } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\main\java\io\fabric8\cdi\Utils.java,toAlias,"public static final String  (String serviceName String serviceProtocol String servicePort String servicePath Boolean endpoint Boolean external String suffix){ StringBuilder sb=new StringBuilder(); if (external) { sb.append(""external""); } else { sb.append(""internal""); } sb.append(""-""); if (endpoint) { sb.append(""endpoint""); } else { sb.append(""service""); } sb.append(""-"").append(serviceName); if (Strings.isNotBlank(serviceProtocol)) { sb.append(""-"").append(serviceProtocol); } else { sb.append(""-"").append(""tcp""); } if (Strings.isNotBlank(servicePort)) { sb.append(""-"").append(serviceProtocol); } else { sb.append(""-"").append(""single""); } if (Strings.isNotBlank(servicePath)) { sb.append(""-"").append(servicePath); } else { sb.append(""-"").append(""root""); } sb.append(""-"").append(suffix); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\deltaspike\DeltaspikeTestBase.java,createDeployment,"@Deployment public static WebArchive  (){ return ShrinkWrap.create(WebArchive.class).addAsWebInfResource(EmptyAsset.INSTANCE ArchivePaths.create(""beans.xml"")).addAsLibraries(Maven.resolver().loadPomFromFile(""pom.xml"").resolve(""org.apache.deltaspike.core:d"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\deltaspike\DeltaspikeTestBase.java,getDeltaSpikeHolders,public static Class[]  (){ return new Class<?>[]{WindowContextProducer.class WindowContextQuotaHandlerCache.class DefaultWindowContextQuotaHandler.class WindowContextQuotaHandler.class WindowBeanHolder.class WindowIdHolder.class ConversationBeanHolder.class ViewAccessBeanHolder.class ViewAccessBeanAccessHistory.class ViewAccessViewHistory.class}; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\MockConfigurer.java,configure,"public static void  (){ MOCK.expect().get().withPath(""/api/v1/namespaces/cdi/services/service1"").andReturn(200 new ServiceBuilder().withNewMetadata().withName(""service1"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(80).withNewTargetPort(9090).endPort().withClusterIP(""172.30.17.2"").endSpec().build()).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/cdi/services/service2"").andReturn(200 new ServiceBuilder().withNewMetadata().withName(""service2"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(80).withNewTargetPort(8080).endPort().withClusterIP(""172.30.17.2"").endSpec().build()).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/cdi/services/service3"").andReturn(200 new ServiceBuilder().withNewMetadata().withName(""service3"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(443).withNewTargetPort(443).endPort().withClusterIP(""172.30.17.2"").endSpec().build()).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/cdi/services/multiport"").andReturn(200 new ServiceBuilder().withNewMetadata().withName(""multiport"").endMetadata().withNewSpec().addNewPort().withName(""port1"").withProtocol(""TCP"").withPort(8081).withNewTargetPort(8081).endPort().addNewPort().withName(""port2"").withProtocol(""TCP"").withPort(8082).withNewTargetPort(8082).endPort().addNewPort().withName(""port3"").withProtocol(""TCP"").withPort(8083).withNewTargetPort(8083).endPort().withClusterIP(""172.30.17.2"").endSpec().build()).always(); Endpoints service1Endpoints=new EndpointsBuilder().withNewMetadata().withName(""service1"").withNamespace(""default"").endMetadata().addNewSubset().addNewPort().withName(""port"").withPort(8080).endPort().addNewAddress().withIp(""10.0.0.1"").endAddress().endSubset().addNewSubset().addNewPort().withName(""port"").withPort(8080).endPort().addNewAddress().withIp(""10.0.0.2"").endAddress().endSubset().build(); Endpoints service2EndpointsA=new EndpointsBuilder().withNewMetadata().withName(""service2"").withNamespace(""default"").endMetadata().addNewSubset().addNewPort().withName(""port"").withPort(8080).endPort().addNewAddress().withIp(""10.0.0.1"").endAddress().endSubset().addNewSubset().addNewPort().withName(""port"").withPort(8080).endPort().addNewAddress().withIp(""10.0.0.2"").endAddress().endSubset().build(); Endpoints service2EndpointsB=new EndpointsBuilder().withNewMetadata().withName(""service2"").withNamespace(""default"").endMetadata().addNewSubset().addNewPort().withName(""port"").withPort(8080).endPort().addNewAddress().withIp(""10.0.0.1"").endAddress().endSubset().build(); Endpoints multiPortEndpoint=new EndpointsBuilder().withNewMetadata().withName(""multiport"").withNamespace(""default"").endMetadata().addNewSubset().addNewAddress().withIp(""172.30.17.2"").endAddress().addNewPort(""port1"" 8081 ""TCP"").addNewPort(""port2"" 8082 ""TCP"").addNewPort(""port3"" 8083 ""TCP"").endSubset().build(); MOCK.expect().withPath(""/api/v1/namespaces/cdi/endpoints/service1"").andReturn(200 service1Endpoints).always(); MOCK.expect().withPath(""/api/v1/namespaces/cdi/endpoints/service2"").andReturn(200 service2EndpointsA).once(); MOCK.expect().withPath(""/api/v1/namespaces/cdi/endpoints/service2"").andReturn(200 service2EndpointsB).always(); MOCK.expect().withPath(""/api/v1/namespaces/cdi/endpoints/multiport"").andReturn(200 multiPortEndpoint).always(); String masterUrl=MOCK.getServer().url(""/"").toString(); System.setProperty(Config.KUBERNETES_MASTER_SYSTEM_PROPERTY masterUrl); System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY ""cdi""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\ConfigBean.java,getProperty,public String  (){ return property; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,createDeployment,@Deployment public static WebArchive  (){ return ShrinkWrap.create(WebArchive.class).addClasses(StringToURL.class URLToConnection.class NestingFactoryBean.class SimpleBean.class UrlBean.class).addClasses(DeltaspikeTestBase.getDeltaSpikeHolders()).addAsWeb
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,setUpClass,"@BeforeClass public static void  () throws Exception { System.setProperty(""CONFIG1_TEST"" ""value1""); System.setProperty(""CONFIG2_TEST"" ""value2""); System.setProperty(""SERVICE1_SOURCE_PROTOCOL"" ""http""); System.setProperty(""SERVICE1_TARGET_PROTOCOL"" ""https"");"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testAlias,"@Test public void  (){ Set<Bean<?>> beans=CDI.current().getBeanManager().getBeans(""cool-id""); Assert.assertNotNull(beans); Assert.assertEquals(1 beans.size()); Assert.assertEquals(URL.class beans.iterator().next().getBeanClass()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testClientInjection,@Test public void  (){ Assert.assertNotNull(client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testConfigInjection,"@Test public void  (){ Assert.assertNotNull(simpleBean); Assert.assertEquals(""value1"" simpleBean.getConfig1().getProperty()); Assert.assertEquals(""value2"" simpleBean.getConfig2().getProperty()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testFactory,"@Test public void  (){ Assert.assertNotNull(urlBean); Assert.assertNotNull(urlBean.getService3()); Assert.assertNotNull(urlBean.getService1()); Assert.assertTrue(urlBean.getService1().toString().startsWith(""http"")); Assert.assertTrue(urlBean.getService3()"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testMultiport,"@Test public void  (){ Assert.assertNotNull(simpleBean); Assert.assertTrue(simpleBean.getMultiportDefault().endsWith(""8081"")); Assert.assertTrue(simpleBean.getMultiport2().endsWith(""8082"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testNestingFactories,@Test public void  (){ Assert.assertNotNull(nestingFactoryBean); Assert.assertNotNull(nestingFactoryBean.getService1()); Assert.assertNotNull(nestingFactoryBean.getService2()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testProtocol,"@Test public void  (){ Assert.assertNotNull(simpleBean); Assert.assertTrue(simpleBean.getUrl().startsWith(""tcp://"")); Assert.assertTrue(simpleBean.getTestUrl().startsWith(""tst://"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testProtocolOveride,"@Test public void  (){ Assert.assertTrue(simpleBean.getTestUrl().startsWith(""tst"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testServiceInjection,@Test public void  (){ Assert.assertNotNull(simpleBean); Assert.assertNotNull(simpleBean.getOptionalUrl()); Assert.assertNotNull(simpleBean.getUrl()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\external\ExtensionExternalTest.java,testWithPath,"@Test public void  (){ Assert.assertTrue(simpleBean.getTestUrlWithPath().endsWith(""/somePath"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\brokenfactory\BrokenFactoryInternalTest.java,createInstance,void  (Class type){ WeldContainer weld=new Weld().disableDiscovery().extensions(new Fabric8Extension()).beanClasses(MyFactory.class MyBean.class).initialize(); CreationalContext ctx=weld.getBeanManager().createCreationalContext(null); for ( Bean bean : weld.getBeanManager().getBeans(type)) { weld.getBeanManager().getReference(bean type ctx); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\brokenfactory\BrokenFactoryInternalTest.java,setUpClass,@BeforeClass public static void  (){ MockConfigurer.configure(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\brokenfactory\BrokenFactoryInternalTest.java,testServiceInjection,"@Test public void  (){ expectedException.expect(ThrowableMessageMatcher.hasMessage(CoreMatchers.startsWith(""Failed to process @Factory annotated method""))); createInstance(MyBean.class); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\brokenfactory\MyFactory.java,create,@Factory @ServiceName private URI  (@ServiceName String url Object o1 Object o2) throws URISyntaxException { return new URI(url); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceInstanceWithEndpoint.java,getService,public String  (){ return service; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,cleanUp,@AfterClass public static void  (){ if (weld != null) { weld.shutdown(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,createInstance,static <T>T  (Class<T> type){ CreationalContext ctx=weld.getBeanManager().createCreationalContext(null); for ( Bean bean : weld.getBeanManager().getBeans(type)) { return (T)weld.getBeanManager().getReference(bean type ctx); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,setUpClass,@BeforeClass public static void  (){ MockConfigurer.configure(); weld=new Weld().disableDiscovery().extensions(new Fabric8Extension()).beanClasses(RandomEndpointToUrl.class ServiceListInstanceWithEndpoint.class ServiceInstanceWithEndpoint.class ServiceLis
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,testChangingEndpoints,"@Test public void  (){ ServiceListInstanceWithEndpoint2 obj=createInstance(ServiceListInstanceWithEndpoint2.class); List<String> endpoints=new ArrayList<>(obj.getService().get()); Assert.assertTrue(endpoints.contains(""tcp://10.0.0.1:8080"")); Assert.assert"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,testServiceInstanceWithEndpoint,"@Test public void  (){ ServiceInstanceWithEndpoint obj=createInstance(ServiceInstanceWithEndpoint.class); Assert.assertTrue(obj.getService().equals(""tcp://10.0.0.1:8080"") || obj.getService().contains(""tcp://10.0.0.2:8080"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,testServiceInstanceWithFactoryAndMultipleEndpoints,@Test public void  (){ ServiceInstanceUsingFactoryAndEndpoints obj=createInstance(ServiceInstanceUsingFactoryAndEndpoints.class); Assert.assertNotNull(obj.getService()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,testServiceInstanceWithMultiPortEndpoint,"@Test public void  (){ ServiceInstanceWithMultiPortEndpoint obj=createInstance(ServiceInstanceWithMultiPortEndpoint.class); Assert.assertEquals(""http://172.30.17.2:8082"" obj.getService()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceInstanceUsingFactoryAndEndpoints.java,getService,public URL  (){ return service; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,testServiceListInstanceWithEndpoint,"@Test public void  (){ ServiceListInstanceWithEndpoint obj=createInstance(ServiceListInstanceWithEndpoint.class); Assert.assertEquals(2 obj.getService().get().size()); Assert.assertTrue(obj.getService().get().contains(""tcp://10.0.0.1:8080"")); Assert.asser"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\EndpointsInternalTest.java,testServiceListWithoutEndpoint,"@Test public void  (){ ServiceListWithoutEndpoint obj=createInstance(ServiceListWithoutEndpoint.class); Assert.assertEquals(2 obj.getService().size()); Assert.assertTrue(obj.getService().contains(""tcp://10.0.0.1:8080"")); Assert.assertTrue(obj.getService()"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceListWithoutEndpoint.java,getService,public List<String>  (){ return service; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceListInstanceWithEndpoint.java,getService,public Instance<List<String>>  (){ return service; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceInstanceWithMultiPortEndpoint.java,getService,public String  (){ return service; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\NestingFactoryBean.java,getService1,public URLConnection  (){ return service1; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\NestingFactoryBean.java,getService2,public URLConnection  (){ return service2; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\endpoints\ServiceListInstanceWithEndpoint2.java,getService,public Instance<List<String>>  (){ return service; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,createDeployment,@Deployment public static WebArchive  (){ return ShrinkWrap.create(WebArchive.class).addClasses(StringToURL.class URLToConnection.class NestingFactoryBean.class SimpleBean.class UrlBean.class).addClasses(DeltaspikeTestBase.getDeltaSpikeHolders()).addAsWeb
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,setUpClass,"@BeforeClass public static void  () throws Exception { System.setProperty(""CONFIG1_TEST"" ""value1""); System.setProperty(""CONFIG2_TEST"" ""value2""); System.setProperty(""SERVICE1_SOURCE_PROTOCOL"" ""http""); System.setProperty(""SERVICE1_TARGET_PROTOCOL"" ""https"");"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testAlias,"@Test public void  (){ Set<Bean<?>> beans=CDI.current().getBeanManager().getBeans(""cool-id""); Assert.assertNotNull(beans); Assert.assertEquals(1 beans.size()); Assert.assertEquals(URL.class beans.iterator().next().getBeanClass()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testClientInjection,@Test public void  (){ Assert.assertNotNull(client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testConfigInjection,"@Test public void  (){ Assert.assertNotNull(simpleBean); Assert.assertEquals(""value1"" simpleBean.getConfig1().getProperty()); Assert.assertEquals(""value2"" simpleBean.getConfig2().getProperty()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testFactory,"@Test public void  (){ Assert.assertNotNull(urlBean); Assert.assertNotNull(urlBean.getService3()); Assert.assertNotNull(urlBean.getService1()); Assert.assertTrue(urlBean.getService1().toString().startsWith(""http"")); Assert.assertTrue(urlBean.getService3()"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testMultiport,"@Test public void  (){ Assert.assertNotNull(simpleBean); Assert.assertTrue(simpleBean.getMultiportDefault().endsWith(""8081"")); Assert.assertTrue(simpleBean.getMultiport2().endsWith(""8082"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testNestingFactories,@Test public void  (){ Assert.assertNotNull(nestingFactoryBean); Assert.assertNotNull(nestingFactoryBean.getService1()); Assert.assertNotNull(nestingFactoryBean.getService2()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testProtocol,"@Test public void  (){ Assert.assertNotNull(simpleBean); Assert.assertTrue(simpleBean.getUrl().startsWith(""tcp://"")); Assert.assertTrue(simpleBean.getTestUrl().startsWith(""tst://"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testProtocolOveride,"@Test public void  (){ Assert.assertTrue(simpleBean.getTestUrl().startsWith(""tst"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\internal\ExtensionInternalTest.java,testServiceInjection,@Test public void  (){ Assert.assertNotNull(simpleBean); Assert.assertNotNull(simpleBean.getOptionalUrl()); Assert.assertNotNull(simpleBean.getUrl()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,getConfig1,public ConfigBean  (){ return config1; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,getConfig2,public ConfigBean  (){ return config2; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,getMultiport2,public String  (){ return multiport2; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,getMultiportDefault,public String  (){ return multiportDefault; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,getOptionalUrl,public String  (){ return optionalUrl.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,getTestUrl,public String  (){ return testUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,getTestUrlWithPath,public String  (){ return testUrlWithPath; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\SimpleBean.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\nonamespace\NoNamespaceTest.java,createInstance,void  (Class type){ WeldContainer weld=new Weld().disableDiscovery().extensions(new Fabric8Extension()).beanClasses(MyBean.class).initialize(); CreationalContext ctx=weld.getBeanManager().createCreationalContext(null); for ( Bean bean : weld.getBeanManager().getBeans(type)) { weld.getBeanManager().getReference(bean type ctx); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\nonamespace\NoNamespaceTest.java,setUpClass,@BeforeClass public static void  (){ MockConfigurer.configure(); System.clearProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\nonamespace\NoNamespaceTest.java,testServiceInjection,"@Test public void  (){ KubernetesClient client=new DefaultKubernetesClient(); String namespace=client.getNamespace(); Assume.assumeTrue(Strings.isNullOrBlank(namespace)); expectedException.expect(ThrowableMessageMatcher.hasMessage(CoreMatchers.equalTo(""No"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\ProtocolConfig.java,getSourceProtocol,public String  (){ return sourceProtocol; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\ProtocolConfig.java,getTargetProtocol,public String  (){ return targetProtocol; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\URLToConnection.java,toUrlConnection,@Factory @ServiceName public URLConnection  (@ServiceName URL service) throws IOException { return service.openConnection(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,getConfig1,public ConfigBean  (){ return config1; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,getConfig2,public ConfigBean  (){ return config2; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,getService1,public URL  (){ return service1; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,getService3,public URL  (){ return service3; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,setConfig1,public void  (ConfigBean config1){ this.config1=config1; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\UrlBean.java,setConfig2,public void  (ConfigBean config2){ this.config2=config2; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\StringToURL.java,toUrl,"@Factory @ServiceName public URL  (@Protocol(""http"") @ServiceName String service @Configuration ProtocolConfig protocolConfig) throws MalformedURLException { return new URL(service); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\WeldJUnitRunner.java,WeldJUnitRunner,public  (final Class<Object> klass) throws InitializationError { super(klass); this.klass=klass; this.weld=new Weld(); this.container=weld.initialize(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cdi\src\test\java\io\fabric8\cdi\weld\WeldJUnitRunner.java,createTest,@Override protected Object  () throws Exception { return container.instance().select(klass).get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,BeanValidationAnnotationIntrospector,public  (TypeFactory typeFactory){ this.typeFactory=(typeFactory == null) ? TypeFactory.defaultInstance() : typeFactory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,findField,protected static Field  (String fieldName Class<?> declaringClass){ try { return declaringClass.getDeclaredField(fieldName); } catch ( NoSuchFieldException e) { Class<?> superclass=declaringClass.getSuperclass(); if (superclass != null && superclass != declaringClass) { return findField(fieldName superclass); } else { return null; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,hasIgnoreMarker,"@Override public boolean  (AnnotatedMember m){ Member member=m.getMember(); int modifiers=member.getModifiers(); if (Modifier.isTransient(modifiers)) { if (LOG.isLoggable(Level.FINE)) { LOG.fine(""Ignoring transient member "" + m); } return true; } else if "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,hasRequiredMarker,@Override public Boolean  (AnnotatedMember m){ NotNull annotation=m.getAnnotation(NotNull.class); if (annotation == null) { return null; } return Boolean.TRUE; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationIntrospector.java,version,"@Override public Version  (){ return new Version(1 1 0 """" ""cxf"" ""json-schema-mbean""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationModule.java,BeanValidationAnnotationModule,"public  (){ super(""bean-validation-annotations""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\BeanValidationAnnotationModule.java,setupModule,@Override public void  (SetupContext context){ BeanValidationAnnotationIntrospector introspector=new BeanValidationAnnotationIntrospector(context.getTypeFactory()); context.insertAnnotationIntrospector(introspector); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\EnableJMXFeature.java,initialize,@Override public void  (Bus bus){ List<Server> servers=new ArrayList<Server>(); ServerRegistry serverRegistry=bus.getExtension(ServerRegistry.class); servers.addAll(serverRegistry.getServers()); for (Iterator<Server> iter=servers.iterator(); iter.hasNext(
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\EnableJMXFeature.java,initializeProvider,@Override protected void  (InterceptorProvider provider Bus bus){ if (provider instanceof Endpoint) { EndpointImpl endpointImpl=(EndpointImpl)provider; List<Feature> features=endpointImpl.getActiveFeatures(); if (features == null) { features=new ArrayList
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\FourSpacePrettyPrinter.java,FourSpacePrettyPrinter,public  (){ _objectIndenter=Lf4SpacesIndenter.INSTANCE; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\FourSpacePrettyPrinter.java,isInline,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\FourSpacePrettyPrinter.java,writeIndentation,@Override public void  (JsonGenerator jg int level) throws IOException  JsonGenerationException { jg.writeRaw(SYS_LF); if (level > 0) { level=level * 4; while (level > spacecount) { jg.writeRaw(spaces 0 spacecount); level-=spaces.length; } jg.writeRaw(spa
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,IgnorePropertiesBackedByTransientFields,public  (VisibilityChecker<?> defaultChecker){ this.defaultChecker=defaultChecker; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,castToPropertiesBackedByTransientFields,"protected IgnorePropertiesBackedByTransientFields  (Object value){ if (value instanceof IgnorePropertiesBackedByTransientFields) { return (IgnorePropertiesBackedByTransientFields)value; } else { if (value != null) { if (value instanceof VisibilityChecker<?>) { return new IgnorePropertiesBackedByTransientFields((VisibilityChecker<?>)value); } LOG.warning(""Could not convert value to "" + ""IgnorePropertiesBackedByTransientFields as was "" + value.getClass().getName() + "" ""+ value); } return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,findField,protected static Field  (String fieldName Class<?> declaringClass){ try { return declaringClass.getDeclaredField(fieldName); } catch ( NoSuchFieldException e) { Class<?> superclass=declaringClass.getSuperclass(); if (superclass != null && superclass != declaringClass) { return findField(fieldName superclass); } else { return null; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,getGetterFieldName,protected String  (String methodName){ return Introspector.decapitalize(methodName.substring(3)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,getIsGetterFieldName,protected String  (String methodName){ return Introspector.decapitalize(methodName.substring(2)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,isCreatorVisible,@Override public boolean  (Member m){ return defaultChecker.isCreatorVisible(m); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,isFieldVisible,@Override public boolean  (Field f){ return defaultChecker.isFieldVisible(f); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,isGetterMethodRetItselfVisible,"protected boolean  (Method method Class<?> declaringClass){ if (method != null && method.getReturnType().getName().equals(declaringClass.getName())) { if (LOG.isLoggable(Level.FINE)) { LOG.fine(""Ignoring getter "" + method + "" due to return same type as declaringClass itself""); } return false; } return true; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,isGetterMethodWithFieldVisible,"protected boolean  (Object method String fieldName Class<?> declaringClass){ Field field=findField(fieldName declaringClass); if (field != null) { int fieldModifiers=field.getModifiers(); if (Modifier.isTransient(fieldModifiers)) { if (LOG.isLoggable(Level.FINE)) { LOG.fine(""Ignoring getter "" + method + "" due to transient field called ""+ fieldName); } return false; } } return true; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,isGetterVisible,@Override public boolean  (Method method){ boolean answer=defaultChecker.isGetterVisible(method); if (answer) { answer=isGetterMethodWithFieldVisible(method getGetterFieldName(method.getName()) method.getDeclaringClass()) && isGetterMethodRetItselfVisible
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,isIsGetterVisible,@Override public boolean  (Method method){ boolean answer=defaultChecker.isIsGetterVisible(method); if (answer) { answer=isGetterMethodWithFieldVisible(method getIsGetterFieldName(method.getName()) method.getDeclaringClass()) && isGetterMethodRetItselfVis
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,isSetterVisible,@Override public boolean  (Method m){ return defaultChecker.isSetterVisible(m); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,with,@Override public IgnorePropertiesBackedByTransientFields  (JsonAutoDetect.Visibility v){ return castToPropertiesBackedByTransientFields(defaultChecker.with(v)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,withCreatorVisibility,@Override public IgnorePropertiesBackedByTransientFields  (JsonAutoDetect.Visibility v){ return castToPropertiesBackedByTransientFields(defaultChecker.withCreatorVisibility(v)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,withFieldVisibility,@Override public IgnorePropertiesBackedByTransientFields  (JsonAutoDetect.Visibility v){ return castToPropertiesBackedByTransientFields(defaultChecker.withFieldVisibility(v)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,withGetterVisibility,@Override public IgnorePropertiesBackedByTransientFields  (JsonAutoDetect.Visibility v){ return castToPropertiesBackedByTransientFields(defaultChecker.withGetterVisibility(v)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,withIsGetterVisibility,@Override public IgnorePropertiesBackedByTransientFields  (JsonAutoDetect.Visibility v){ return castToPropertiesBackedByTransientFields(defaultChecker.withIsGetterVisibility(v)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,withSetterVisibility,@Override public IgnorePropertiesBackedByTransientFields  (JsonAutoDetect.Visibility v){ return castToPropertiesBackedByTransientFields(defaultChecker.withSetterVisibility(v)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\IgnorePropertiesBackedByTransientFields.java,withVisibility,@Override public IgnorePropertiesBackedByTransientFields  (PropertyAccessor method JsonAutoDetect.Visibility v){ return castToPropertiesBackedByTransientFields(defaultChecker.withVisibility(method v)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,getMapper,public ObjectMapper  (){ return mapper; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,getSchemaForClass,"public String  (Class<?> clazz){ LOG.info(""Looking up schema for "" + clazz.getCanonicalName()); String name=clazz.getName(); try { ObjectWriter writer=mapper.writer().with(new FourSpacePrettyPrinter()); JsonSchemaGenerator jsg=new JsonSchemaGenerator(mapper); JsonSchema jsonSchema=jsg.generateSchema(clazz); return writer.writeValueAsString(jsonSchema); } catch ( Exception e) { LOG.log(Level.FINEST ""Failed to generate JSON schema for class "" + name e); return """"; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,getSingleton,public static JsonSchemaLookup  (){ if (singleton == null) { new JsonSchemaLookup().init(); } return singleton; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApiFeature.java,handleEvent,@Override public void  (Event arg0 AbstractServiceFactoryBean arg1 Object... arg2){ if (arg0.equals(Event.SERVER_CREATED) && (arg2[0] instanceof Server)) { Server server=(Server)arg2[0]; initialize(server bus); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApiFeature.java,initialize,@Override public void  (final Bus bus){ FactoryBeanListenerManager factoryBeanListenerManager=bus.getExtension(FactoryBeanListenerManager.class); if (factoryBeanListenerManager == null) { factoryBeanListenerManager=new FactoryBeanListenerManager(bus); } f
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApiFeature.java,initializeProvider,@Override protected void  (InterceptorProvider provider final Bus bus){ if (provider instanceof Endpoint) { EndpointImpl endpointImpl=(EndpointImpl)provider; List<Feature> features=endpointImpl.getActiveFeatures(); if (features == null) { features=new Arr
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,init,"public void  (){ LOG.log(Level.INFO ""Creating JsonSchemaLookup instance""); try { if (mapper == null) { mapper=new ObjectMapper(); mapper.setVisibility(new IgnorePropertiesBackedByTransientFields(mapper.getVisibilityChecker())); JaxbAnnotationModule module1=new JaxbAnnotationModule(); mapper.registerModule(module1); BeanValidationAnnotationModule module2=new BeanValidationAnnotationModule(); mapper.registerModule(module2); } singleton=this; } catch ( Exception e) { LOG.log(Level.WARNING ""Exception during initialization: "" e); throw new RuntimeException(e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\JsonSchemaLookup.java,setMapper,public void  (ObjectMapper mapper){ this.mapper=mapper; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\SwaggerFeature.java,handleEvent,@Override public void  (Event arg0 AbstractServiceFactoryBean arg1 Object... arg2){ if (arg0.equals(Event.SERVER_CREATED) && (arg2[0] instanceof Server)) { Server server=(Server)arg2[0]; if (server.getEndpoint().getEndpointInfo().getBinding().getBindingId
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\SwaggerFeature.java,initializeProvider,@Override protected void  (InterceptorProvider provider final Bus bus){ if (!(provider instanceof Endpoint)) { FactoryBeanListenerManager factoryBeanListenerManager=bus.getExtension(FactoryBeanListenerManager.class); if (factoryBeanListenerManager == null
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,ManagedApi,public  (Bus b Endpoint ep Server s){ bus=b; endpoint=ep; server=s; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,findClass,"private Class<?>  (String clsName){ if (!isWSDL()) { Set<Class<?>> resourceTypes=getRESTResourceTypes(); if (resourceTypes != null) { try { for ( Class<?> cls : resourceTypes) { if (cls.getName().endsWith(clsName)) { return cls; } } } catch ( Throwable e) { LOG.log(Level.WARNING ""findClass failed."" e); } } } else { for ( ServiceInfo serviceInfo : endpoint.getService().getServiceInfos()) { for ( BindingInfo bindingInfo : serviceInfo.getBindings()) { for ( BindingOperationInfo boi : bindingInfo.getOperations()) { if (boi.getInput() != null && boi.getInput().getMessageParts() != null) { for ( MessagePartInfo mpi : boi.getInput().getMessageParts()) { Class<?> partClass=mpi.getTypeClass(); if (partClass != null && partClass.getName().endsWith(clsName)) { return partClass; } } } if (boi.getOutput() != null && boi.getOutput().getMessageParts() != null) { for ( MessagePartInfo mpi : boi.getOutput().getMessageParts()) { Class<?> partClass=mpi.getTypeClass(); if (partClass != null && partClass.getName().endsWith(clsName)) { return partClass; } } } } } } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getAddress,"@ManagedAttribute(description=""Address Attribute"" currencyTimeLimit=60) public String  (){ return endpoint.getEndpointInfo().getAddress(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getBeginIndentionWithReturn,"private String  (int n){ return ""{"" + getEol() + getIndention(n); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getBeginIndentionWithReturnForList,"private String  (int n){ return ""["" + getEol() + getIndention(n); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getConfigurationAdmin,"private ConfigurationAdmin  (){ try { if (isInOSGi() && (configurationAdmin == null)) { BundleContext bundleContext=FrameworkUtil.getBundle(ManagedApi.class).getBundleContext(); if (bundleContext != null) { ServiceReference serviceReference=bundleContext.getServiceReference(ConfigurationAdmin.class.getName()); if (serviceReference != null) { configurationAdmin=(ConfigurationAdmin)bundleContext.getService(serviceReference); } } } } catch ( Exception e) { LOG.log(Level.WARNING ""getConfigurationAdmin failed."" e); } return configurationAdmin; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getEndIndentionWithReturn,"private String  (int n){ return getEol() + getIndention(n) + ""}""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getEndIndentionWithReturnForList,"private String  (int n){ return getEol() + getIndention(n) + ""]""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getEol,"private String  (){ if (eol == null) { return ""\n""; } else { return this.eol; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getIndention,"private String  (int n){ String ret=""""; for (int i=0; i < n; i++) { ret=ret + INDENTION; } return ret; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getJSONSchema,"@ManagedOperation(description=""get the JSON schema from a given endpoint"" currencyTimeLimit=60) public String  (){ String ret=""""; if (!isWSDL()) { Set<Class<?>> resourceTypes=getRESTResourceTypes(); if (resourceTypes != null) { try { ret=ret + getBeginInd"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getJSONSchemaForClass,"@ManagedOperation(description=""get the JSON schema from a given class"" currencyTimeLimit=60) public String  (String clsName){ String ret=""""; if (!isWSDL()) { Set<Class<?>> resourceTypes=getRESTResourceTypes(); if (resourceTypes != null) { try { ret=ret + "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getJSONSchemaForOperation,"@ManagedOperation(description=""get the JSON schema from a given soap endpoint for a given operation"" currencyTimeLimit=60) public String  (String operationName){ if (!isWSDL()) { return null; } String ret=""""; for ( ServiceInfo serviceInfo : endpoint.getSe"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getObjectName,"public ObjectName  () throws JMException { String busId=bus.getId(); StringBuilder buffer=new StringBuilder(); buffer.append(DOMAIN_NAME).append(':'); buffer.append(ManagementConstants.BUS_ID_PROP).append('=').append(busId).append(' '); buffer.append(ManagementConstants.TYPE_PROP).append('=').append(""Bus.Service.Endpoint ""); String serviceName=(String)endpoint.get(SERVICE_NAME); if (StringUtils.isEmpty(serviceName)) { serviceName=endpoint.getService().getName().toString(); } serviceName=ObjectName.quote(serviceName); buffer.append(ManagementConstants.SERVICE_NAME_PROP).append('=').append(serviceName).append(' '); String endpointName=(String)endpoint.get(ENDPOINT_NAME); if (StringUtils.isEmpty(endpointName)) { endpointName=endpoint.getEndpointInfo().getName().getLocalPart(); } endpointName=ObjectName.quote(endpointName); buffer.append(ManagementConstants.PORT_NAME_PROP).append('=').append(endpointName).append(' '); buffer.append(ManagementConstants.INSTANCE_ID_PROP).append('=').append(endpoint.hashCode()); return new ObjectName(buffer.toString()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getPackageNameByNameSpaceURI,"@ManagedOperation(description=""get the package name for a given namespace URI"" currencyTimeLimit=60) public String  (String nameSpaceURI){ return PackageUtils.getPackageNameByNameSpaceURI(nameSpaceURI); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getRESTResourceTypes,private Set<Class<?>>  (){ JAXRSServiceFactoryBean serviceFactory=(JAXRSServiceFactoryBean)endpoint.get(JAXRSServiceFactoryBean.class.getName()); List<ClassResourceInfo> list=serviceFactory.getClassResourceInfo(); return ResourceUtils.getAllRequestResponseTypes(list false).getAllTypes().keySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getServletContext,"@ManagedAttribute(description=""The cxf servlet context"" currencyTimeLimit=60) public String  (){ if (!isInOSGi()) { LOG.log(Level.FINE ""Not In OSGi.""); return getSingletonCxfServletContext(); } String ret=""/cxf""; if (getConfigurationAdmin() != null) { try"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getSingletonCxfServletContext,"public static String  (){ if (singletonCxfServletContext == null) { singletonCxfServletContext=System.getenv(""CXF_SERVLET_CONTEXT""); if (singletonCxfServletContext == null) { singletonCxfServletContext=System.getProperty(""CXF_SERVLET_CONTEXT""); if (singletonCxfServletContext == null) { singletonCxfServletContext=""/cxf""; } } } return singletonCxfServletContext; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,getState,"@ManagedAttribute(description=""Server State"") public String  (){ return state.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,isInOSGi,private boolean  (){ if (FrameworkUtil.getBundle(ManagedApi.class) != null) { return true; } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,isSwagger,"@ManagedAttribute(description=""if the endpoint has swagger doc or not"" currencyTimeLimit=60) public boolean  (){ if (!isWADL()) { return false; } List<Feature> features=server.getEndpoint().getActiveFeatures(); if (features != null) { for ( Feature featur"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,isWADL,"@ManagedAttribute(description=""if the endpoint has WADL doc or not"" currencyTimeLimit=60) public boolean  (){ if (endpoint.getEndpointInfo().getBinding().getBindingId().equals(""http://apache.org/cxf/binding/jaxrs"")) { return true; } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,isWSDL,"@ManagedAttribute(description=""if the endpoint has wsdl doc or not"" currencyTimeLimit=60) public boolean  (){ return !isWADL(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,jsonToXml,"@ManagedOperation(description=""get xml payload from json payload"" currencyTimeLimit=60) public String  (String jsonText String pojoType){ ObjectMapper objectMapper=new ObjectMapper(); StringWriter sw=new StringWriter(); try { Object pojo=objectMapper.read"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,reformatIndent,"private String  (String input int startIndent){ String ret=""""; BufferedReader reader=new BufferedReader(new StringReader(input)); try { String oneLine; while ((oneLine=reader.readLine()) != null) { ret=ret + getIndention(startIndent) + oneLine+ getEol(); } } catch ( IOException e) { LOG.log(Level.WARNING ""reformatIndent failed."" e); } return ret; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,rollbackColon,"private String  (String input){ String ret=input; if (ret.endsWith("" "")) { ret=ret.substring(0 ret.length() - 1); } return ret; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,rollbackEol,private String  (String input){ String ret=input; if (ret.endsWith(getEol())) { ret=ret.substring(0 ret.length() - getEol().length()); } return ret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,setSingletonCxfServletContext,public static void  (String singletonCxfServletContext){ ManagedApi.singletonCxfServletContext=singletonCxfServletContext; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,startServer,public void  (Server s){ if (server.equals(s)) { state=State.STARTED; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\main\java\io\fabric8\cxf\endpoint\ManagedApi.java,stopServer,public void  (Server s){ if (server.equals(s)) { state=State.STOPPED; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,Book,public  (String name long id){ this.name=name; this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,cloneState,@PUT public void  (Book book){ id=book.getId(); name=book.getName(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,getId,public long  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,retrieveState,@GET public Book  (){ return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,setId,public void  (long i){ id=i; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book.java,setName,public void  (String n){ name=n; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,Book2,public  (String name long id){ this.name=name; this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,getBookid,public long  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,getBookname,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,getId,public long  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,initFromContext,"@GET @Path(""rc"") @Produces(""application/xml"") public Book2  (){ MultivaluedMap<String String> params=uriInfo.getQueryParameters(); id=Long.valueOf(params.getFirst(""bookid"")); name=params.getFirst(""bookname""); return this; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,initFromQueryBean,"@GET @Path(""rc/bean"") @Produces(""application/xml"") public Book2  (@BeanParam QueryBean bean){ id=bean.getBookid(); name=bean.getBookname(); return this; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,initFromQueryBean2,"@GET @Path(""rc/bean2"") @Produces(""application/xml"") public Book2  (){ id=queryBean.getBookid(); name=queryBean.getBookname(); return this; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,setBookid,"@QueryParam(""bookid"") public void  (long i){ this.id=i; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,setBookname,"@QueryParam(""bookname"") public void  (String bookname){ this.name=bookname; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,setId,public void  (long i){ id=i; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Book2.java,setName,public void  (String n){ name=n; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Books.java,Books,public  (Book b){ books.add(b); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\Books.java,getBook,public Book  (){ return books.size() == 0 ? null : books.get(0); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,BookStoreSpring,public  (){ init(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,convertBook,"@POST @Path(""books/convert"") @Consumes({""application/xml"" ""application/json"" ""application/vnd.example-com.foo+json""}) @Produces({""application/xml"" ""application/vnd.example-com.foo+json""}) public Book  (Book2 book){ Book b=new Book(); b.setId(book.getId())"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,convertBook2,"@PUT @Path(""books/convert2/{id}"") @Consumes({""application/xml"" ""application/json"" ""application/jettison""}) @Produces(""application/xml"") public Book  (Book2 book){ return convertBook(book); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,echoBook,"@POST @Path(""depth"") @Produces({""application/xml"" ""application/json""}) @Consumes({""application/xml"" ""application/json""}) public Book  (Book book){ return book; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookAegis,"@GET @Path(""books/aegis"") @Produces({""application/html;q=1.0"" ""application/xml;q=0.5"" ""application/json;q=0.5""}) public Book  (){ Book b=new Book(); b.setId(124); b.setName(""CXF in Action - 2""); return b; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookAsJsonList,"@GET @Path(""/books/list/{id}"") public Books  (@PathParam(""id"") Long id){ return new Books(books.get(id)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookByEncodedId,"@GET @Path(""id={id}"") public Book  (@PathParam(""id"") String id){ String[] values=id.split(""\\+""); StringBuilder b=new StringBuilder(); b.append(values[0]).append(values[1]); return books.get(Long.valueOf(b.toString())); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookById,"@GET @Path(""/books/{id}"") @Produces({""application/json"" ""application/vnd.example-com.foo+json""}) public Book  (@PathParam(""id"") Long id){ return books.get(id); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookByQuery,"@GET @Path(""/booksquery"") public Book  (@QueryParam(""id"") String id){ if (!postConstructCalled) { throw new RuntimeException(); } String[] values=id.split(""\\+""); StringBuilder b=new StringBuilder(); b.append(values[0]).append(values[1]); return books.get"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookByUriInfo,"@GET @Path(""/bookinfo"") public Book  () throws Exception { MultivaluedMap<String String> params=ui.getQueryParameters(); String id=params.getFirst(""param1"") + params.getFirst(""param2""); return books.get(Long.valueOf(id)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookWebEx,"@GET @Path(""/books/webex"") public Books  (){ throw new WebApplicationException(new RuntimeException(""Book web exception"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookWebEx2,"@GET @Path(""/books/webex2"") public Books  (){ throw new InternalServerErrorException(new RuntimeException(""Book web exception"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookWithSemicoln,"@GET @Path(""/semicolon{id}"") @Produces(""application/xml"") public Book  (@PathParam(""id"") String name){ return new Book(name 333L); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookWithSemicolnAndMatrixParam,"@GET @Path(""/semicolon2{id}"") @Produces(""application/xml"") public Book  (@PathParam(""id"") String name @MatrixParam(""a"") String matrixParam){ return new Book(name + matrixParam 333L); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookXSLT,"@GET @Path(""books/xslt/{id}"") @Produces({""text/html"" ""application/xhtml+xml"" ""application/xml""}) public Book  (@PathParam(""id"") long id @QueryParam(""name"") String name @MatrixParam(""name2"") String name2){ Book b=new Book(); b.setId(999); b.setName(""CXF in"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getBookXml,"@GET @Path(""/bookstore/books/{id}"") @Produces(""application/xml"") public Book  (@PathParam(""id"") Long id){ return books.get(id); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,getDefaultBook,@GET public Book  (){ return books.get(mainId); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,init,"final void  (){ Book book=new Book(); book.setId(mainId); book.setName(""CXF in Action""); books.put(book.getId() book); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,postConstruct,@PostConstruct public void  (){ postConstructCalled=true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,postDomBook,"@POST @Path(""depth-dom"") @Consumes({""application/xml""}) public void  (DOMSource source){ } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,postGetBookXsiType,"@POST @Path(""/books/xsitype"") @Produces(""application/xml"") @Consumes(""application/xml"") public Book  (Book book){ return book; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStoreSpring.java,postSourceBook,"@POST @Path(""depth-source"") @Consumes({""application/xml""}) public void  (Source source){ try { StaxUtils.copy(source new ByteArrayOutputStream()); } catch ( DepthExceededStaxException ex) { throw new WebApplicationException(413); } catch ( Exception ex) {"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,connectToMBserver,private void  () throws IOException { jmxServerURL=jmxServerURL == null ? DEFAULT_JMXSERVICE_URL : jmxServerURL; JMXServiceURL url=new JMXServiceURL(jmxServerURL); JMXConnector jmxc=JMXConnectorFactory.connect(url null); mbsc=jmxc.getMBeanServerConnection(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,getEndpointObjectName,"private ObjectName  () throws MalformedObjectNameException  NullPointerException { StringBuilder buffer=new StringBuilder(); String serviceName=""{http://jaxrs.endpoint.cxf.fabric8.io/}BookStore""; String portName=""BookStore""; buffer.append(ManagedApi.DOMAIN_NAME + "":type=Bus.Service.Endpoint ""); buffer.append(ManagementConstants.SERVICE_NAME_PROP + ""=\"""" + serviceName+ ""\"" ""); buffer.append(ManagementConstants.PORT_NAME_PROP + ""=\"""" + portName+ ""\"" *""); return new ObjectName(buffer.toString()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,invokeEndpoint,"private String  (String operation String operationPara) throws Exception { ObjectName endpointName=null; ObjectName queryEndpointName; String ret=""""; Object[] jmxPara=null; String[] jmxSig=null; if (operationPara != null) { jmxPara=new Object[]{operationPara}; jmxSig=new String[]{String.class.getName()}; } else { jmxPara=new Object[0]; jmxSig=new String[0]; } queryEndpointName=getEndpointObjectName(); Set<ObjectName> endpointNames=CastUtils.cast(mbsc.queryNames(queryEndpointName null)); Iterator<ObjectName> it=endpointNames.iterator(); if (it.hasNext()) { endpointName=it.next(); ret=(String)mbsc.invoke(endpointName operation jmxPara jmxSig); LOG.info(""invoke endpoint "" + endpointName + "" operation ""+ operation+ "" succeed!""); } return ret; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,parseJson,private void  (String json) throws Exception { JsonParser parser=new JsonFactory().createParser(json); while (parser.nextToken() != null) { } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,setUp,"@Before public void  (){ SpringBusFactory bf=new SpringBusFactory(); Bus bus=bf.createBus(""/io/fabric8/cxf/endpoint/jaxrs/jmx-enable.xml""); BusFactory.setDefaultBus(bus); JAXRSServerFactoryBean sf=new JAXRSServerFactoryBean(); sf.setResourceClasses(BookSt"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,tearDown,@After public void  (){ if (localServer != null) { localServer.stop(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\RestJsonSchemaJMXTest.java,testJsonSchema,"@Test public void  () throws Exception { String json=""""; try { connectToMBserver(); json=invokeEndpoint(""getJSONSchema"" null); parseJson(json); json=invokeEndpoint(""getJSONSchemaForClass"" ""io.fabric8.cxf.endpoint.jaxrs.Book""); parseJson(json); } catch ( T"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,BadBook,"public  (String s){ throw new RuntimeException(""The bad book""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,BookInfo,public  (Book b){ this.name=b.getName(); this.id=b.getId(); if (id == 0) { id=124; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,BookInfo2,public  (Book b){ super(b); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,BookNotReturnedException,public  (String errorMessage){ super(errorMessage); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,StreamingOutputImpl,public  (boolean failEarly){ this.failEarly=failEarly; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,addBinaryBook,"@POST @Path(""/binarybooks"") @Produces(""text/xml"") @Consumes(""application/octet-stream"") public Response  (long[] book){ return Response.ok(book).build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,addBook,"@POST @Path(""/booksinfo"") @Produces(""text/xml"") @Consumes(""application/xml"") public Response  (@XmlJavaTypeAdapter(BookInfoAdapter.class) BookInfo bookInfo){ return Response.ok(bookInfo.asBook()).build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,addBook2,"@POST @Path(""/books2"") @Produces(""text/xml"") @Consumes(""application/xml"") public Book  (Book book){ return new Book(""Book echo"" book.getId() + 1); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,addBookCustomFailure,"@POST @Path(""/books/customstatus"") @Produces(""application/xml"") @Consumes(""text/xml"") public Book  (Book book @Context HttpServletResponse response){ response.setStatus(233); response.addHeader(""CustomHeader"" ""CustomValue""); book.setId(888); return book; "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,asBook,public Book  (){ Book b=new Book(); b.setId(id); b.setName(name); return b; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,checkBook,"@GET @Path(""books/check/{id}"") @Produces(""text/plain"") public boolean  (@PathParam(""id"") Long id){ return books.containsKey(id); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,checkBook2,"@POST @Path(""books/check2"") @Produces(""text/plain"") @Consumes(""text/plain"") public Boolean  (Long id){ return books.containsKey(id); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,checkBookMalformedMT,"@GET @Path(""books/check/malformedmt/{id}"") @Produces(""text/plain"") public Response  (@PathParam(""id"") Long id @Context MessageContext mc){ mc.put(""org.apache.cxf.jaxrs.mediaTypeCheck.strict"" false); return Response.ok(books.containsKey(id)).type(""text"").b"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,createBook,"@PUT @Path(""/books/{id}"") public Response  (@PathParam(""id"") Long id){ Book b=books.get(id); Response r; if (b == null) { Book newBook=new Book(); newBook.setId(id); r=Response.ok(newBook).build(); } else { r=Response.notModified().build(); } return r; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,deleteBodyBook,"@DELETE @Path(""/deletebody"") @Produces(""application/xml"") @Consumes(""application/xml"") public Book  (Book book){ return book; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,deleteBook,"@DELETE @Path(""/books/{bookId}/"") public Response  (@PathParam(""bookId"") String id){ Book b=books.get(Long.parseLong(id)); Response r; if (b != null) { r=Response.ok().build(); } else { r=Response.notModified().build(); } return r; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,deleteWithQuery,"@DELETE @Path(""/books/id"") public Response  (@QueryParam(""value"") @DefaultValue(""-1"") int id){ if (id != 123) { throw new WebApplicationException(); } Book b=books.get(new Long(id)); Response r; if (b != null) { r=Response.ok().build(); } else { r=Respons"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echoBookId,"@POST @Path(""/booksplain"") @Consumes(""text/plain"") @Produces(""text/plain"") public Long  (long theBookId){ return new Long(theBookId); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echoBookNameAndHeader,"@POST @Path(""/booksecho"") @Consumes(""text/plain"") @Produces(""text/plain"") public Response  (@HeaderParam(""CustomHeader"") String headerValue String name){ return Response.ok().entity(name).header(""CustomHeader"" headerValue).build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echoBookNameAndHeader2,"@POST @Path(""/booksecho2"") @Consumes(""text/plain"") @Produces(""text/plain"") public Response  (String name){ return echoBookNameAndHeader(httpHeaders.getRequestHeader(""CustomHeader"").get(0) name); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echoBookNameAndHeader3,"@POST @Path(""/booksecho3"") @Consumes(""text/plain"") @Produces(""text/plain"") public Response  (String name){ return echoBookNameAndHeader(httpHeaders.getRequestHeader(""customheader"").get(0) name); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,echoThroughBookStoreSub,"@Path(""/bookstoresub"") public BookStore  (){ return this; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,emptypost,"@POST @Path("" "") public void emptypost(){ String uri=ui.getAbsolutePath().toString(); if (uri.endsWith(""/"")) { throw new WebApplicationException(400); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,emptypostNoPath,@POST public void  (){ emptypost(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,failEarlyInWrite,"@GET @Path(""/books/fail-early"") @Produces(""application/bar"") public StreamingOutput  (){ return new StreamingOutputImpl(true); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,get401WithText,"@POST @Path(""post401"") public Response  () throws Exception { return Response.status(401).entity(""This is 401"").build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBadlyQuotedHeader,"@GET @Path(""badlyquotedheaders"") public Response  (@QueryParam(""type"") int t){ Response.ResponseBuilder rb=Response.ok(); switch (t) { case 0: rb.header(""SomeHeader0"" ""\""some text""); break; case 1: rb.header(""SomeHeader1"" ""\""some text  some more text with"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBeanParamBook,"@GET @Path(""/beanparam/{id}"") @Produces(""application/xml"") public Book  (@BeanParam BookBean bean){ long id=bean.getId() + bean.getId2() + bean.getId3(); return books.get(id); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBeanParamBook2,"@GET @Path(""/beanparam2/{id}"") @Produces(""application/xml"") public Book  (){ return getBeanParamBook(theBookBean); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookArray,"@POST @Path(""/array"") @Produces(""application/xml"") @Consumes(""application/xml"") public Book[]  (Book[] bs) throws Exception { if (bs == null || bs.length != 2) { throw new RuntimeException(); } return bs; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookAsObject,"@GET @Path(""object"") public Object  (){ return new Book(""Book as Object"" 125L); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookCollection,"@GET @Path(""/collections"") @Produces({""application/xml"" ""application/json""}) public List<Book>  () throws Exception { return new ArrayList<Book>(books.values()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookDesciptionHttpResponse,"@GET @Path(""/httpresponse"") public void  (@Context HttpServletResponse response){ response.setContentType(""text/plain""); try { response.getOutputStream().write(""Good Book"".getBytes()); } catch ( IOException ex) { throw new WebApplicationException(ex); } }"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookFromQuery,"@GET @Path(""name-in-query"") @Produces(""application/xml"") @XMLInstruction(""<!DOCTYPE Something SYSTEM 'my.dtd'><?xmlstylesheet href='common.css' ?>"") @XSISchemaLocation(""book.xsd"") public Book  (@QueryParam(""name"") String name){ return new Book(name 321L);"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookIndexAsDoubleArray,"@GET @Path(""/bookindexdoublearray"") @Produces(""text/plain"") public double[]  (){ return new double[]{1 2 3}; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookIndexAsIntArray,"@GET @Path(""/bookindexintarray"") @Produces(""text/plain"") public int[]  (){ return new int[]{1 2 3}; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookListArray,"@GET @Path(""/booklist"") public List<String>  (){ return Collections.singletonList(""Good book""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookName123,"@GET @Path(""/booknames/123"") @Produces(""application/bar"") public byte[]  (){ Long l=Long.parseLong(""123""); return books.get(l).getName().getBytes(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookRedirect,"@GET @Path(""/redirect"") public Response  (@QueryParam(""redirect"") Boolean done @QueryParam(""sameuri"") Boolean sameuri){ if (done == null) { String uri=sameuri.equals(Boolean.TRUE) ? ui.getAbsolutePathBuilder().queryParam(""redirect"" ""true"").build().toStrin"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookRedirectRel,"@GET @Path(""/redirect/relative"") public Response  (@QueryParam(""redirect"") Boolean done @QueryParam(""loop"") boolean loop){ if (done == null) { if (loop) { return Response.status(303).header(""Location"" ""relative?loop=true"").build(); } else { return Respons"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookStringArray,"@GET @Path(""/bookarray"") public String[]  (){ return new String[]{""Good book""}; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookSubResourceInstanceRC,"@Path(""/booksubresource/instance/context"") public Book2  (@Context ResourceContext rc){ return ((ResourceContextImpl)rc).initResource(book2Sub); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBookSubResourceRC,"@Path(""/booksubresource/context"") public Book2  (){ return resourceContext.getResource(Book2.class); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getBufferedBook,"@GET @Path(""/books/buffer"") @Produces(""application/bar"") public InputStream  (){ return getClass().getResourceAsStream(""resources/expected_get_book123.txt""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getCustomBookTest,"@GET @Path(""/customtext"") @Produces(""text/custom"") public String  (){ return ""Good book""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getDefaultBook,"@GET @Path(""/default"") @Produces(""application/xml"") public Book  (){ return new Book(defaultName defaultId); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getEmptyBook,"@GET @Path(""emptybook"") @Produces({""application/xml"" ""application/json""}) public Book  (){ return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getEmptyBookNullable,"@GET @Path(""emptybook/nillable"") @Produces({""application/xml"" ""application/json""}) @Nullable public Book  (){ return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getId,public long  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getId2,public long  (){ return id2; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getId3,public long  (){ return id3; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getOptions,"@OPTIONS @Path(""/options"") public Response  () throws Exception { return Response.ok().header(""Allow"" ""POST"").header(""Allow"" ""PUT"").header(""Allow"" ""GET"").header(""Allow"" ""DELETE"").build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getQuotedHeader,"@GET @Path(""quotedheaders"") public Response  (){ return Response.ok().header(""SomeHeader1"" ""\""some text  some more text\"""").header(""SomeHeader2"" ""\""some text\"""").header(""SomeHeader2"" ""\""quoted text\"""").header(""SomeHeader2"" ""\""even more text\"""").header(""So"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getSize,public long  (Object arg0 Class<?> arg1 Type arg2 Annotation[] arg3 MediaType arg4){ return -1; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getTimetable,"@GET @Path(""timetable"") public Calendar  (){ return new GregorianCalendar(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,getWithComplexPath,"@GET @Path(""allCharsButA-B/:@!$&'()*+ ;=-._~"") public Book  (){ return new Book(""Encoded Path"" 125L); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,handleNullBook,"@POST @Path(""/books/null"") @Produces(""application/xml"") @Consumes(""application/xml"") public Book  (@Nullable Book book){ if (book != null) { throw new WebApplicationException(400); } return new Book(""Default Book"" 222L); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,infault,"@GET @Path("" "") public Response infault(){ throw new RuntimeException(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,infault2,"@GET @Path("" "") public Response infault2(){ throw new RuntimeException(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,isReadable,public boolean  (Class<?> arg0 Type arg1 Annotation[] arg2 MediaType arg3){ return double[].class.isAssignableFrom(arg0); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,isWriteable,public boolean  (Class<?> arg0 Type arg1 Annotation[] arg2 MediaType arg3){ return double[].class.isAssignableFrom(arg0); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,marshal,@Override public Book  (BookInfo v) throws Exception { return new Book(v.getName() v.getId()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,onewayRequest,"@POST @Path(""/oneway"") @Oneway public void  (){ if (!PhaseInterceptorChain.getCurrentMessage().getExchange().isOneWay()) { throw new WebApplicationException(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,outfault,"@GET @Path("" "") public Response outfault(){ return Response.ok().build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,postBookGetCollection,"@POST @Path(""/collectionBook"") @Produces({""application/xml"" ""application/json""}) @Consumes({""application/xml"" ""application/json""}) public List<Book>  (Book book) throws Exception { List<Book> list=new ArrayList<Book>(); list.add(book); return list; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,postCollectionGetBook,"@POST @Path(""/collections3"") @Produces({""application/xml"" ""application/json""}) @Consumes({""application/xml"" ""application/json""}) public Book  (List<Book> bs) throws Exception { if (bs == null || bs.size() != 2) { throw new RuntimeException(); } return bs."
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,postEmptyForm,"@POST @Path(""/emptyform"") @Produces(""text/plain"") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) public String  (javax.ws.rs.core.Form form){ if (!form.asMap().isEmpty()) { throw new WebApplicationException(400); } return ""empty form""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,readFrom,"public Object  (Class<Object> arg0 Type arg1 Annotation[] arg2 MediaType arg3 MultivaluedMap<String String> arg4 InputStream arg5) throws IOException  WebApplicationException { String[] stringArr=IOUtils.readStringFromStream(arg5).split("" ""); double[] intArr=new double[stringArr.length]; for (int i=0; i < stringArr.length; i++) { intArr[i]=Double.valueOf(stringArr[i]); } return intArr; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,setComplexCookies,"@GET @Path(""setcookies"") public Response  (){ return Response.ok().header(""Set-Cookie"" ""bar.com.anoncart=107894933471602436; Domain=.bar.com;"" + "" Expires=Thu  01-Oct-2020 23:44:22 GMT; Path=/"").build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,setId,"@PathParam(""id"") public void  (long id){ this.id=id; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,setId2,"@QueryParam(""id2"") public void  (long id2){ this.id2=id2; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,setTwoCookies,"@GET @Path(""setmanycookies"") public Response  (){ return Response.ok().header(""Set-Cookie"" ""JSESSIONID=0475F7F30A26E5B0C15D69; Path=/"").header(""Set-Cookie"" ""COOKIETWO=dummy; Expires=Sat  20-Nov-2010 19:11:32 GMT; Path=/"").header(""Set-Cookie"" ""COOKIETWO=du"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,setUriInfo,"@Context public void  (UriInfo ui){ String id3Value=ui.getQueryParameters().getFirst(""id3""); if (id3Value != null) { this.id3=Long.valueOf(id3Value); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,tempRedirectAndSetCookies,"@GET @Path(""tempredirect"") public Response  (){ URI uri=UriBuilder.fromPath(""whatever/redirection"").queryParam(""css1"" ""http://bar"").build(); return Response.temporaryRedirect(uri).header(""Set-Cookie"" ""a=b"").header(""Set-Cookie"" ""c=d"").build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,throwException,"@GET @Path(""webappexception"") public Book  (){ Response response=Response.serverError().entity(""This is a WebApplicationException"").build(); throw new WebApplicationException(response); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,throwExceptionXML,"@GET @Path(""webappexceptionXML"") public Book  (){ Response response=Response.status(406).type(""application/xml"").entity(""<Book><name>Exception</name><id>999</id></Book>"").build(); throw new WebApplicationException(response); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,unmarshal,@Override public BookInfo  (Book b) throws Exception { return new BookInfo(b); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,unsupportedContentType,"@POST @Path(""/unsupportedcontenttype"") @Consumes(""application/xml"") public String  (){ throw new IllegalStateException(""This op is not expected to be invoked""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,updateBook,"@PUT @Path(""/bookswithdom/"") public DOMSource  (DOMSource ds){ return ds; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,updateBookJSON,"@PUT @Path(""/bookswithjson/"") @Consumes(""application/json"") public Response  (Book book){ Book b=books.get(book.getId()); Response r; if (b != null) { r=Response.ok(book).build(); } else { r=Response.notModified().build(); } return r; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,write,"public void  (OutputStream output) throws IOException  WebApplicationException { if (failEarly) { throw new WebApplicationException(Response.status(410).header(""content-type"" ""text/plain"").entity(""This is supposed to go on the wire"").build()); } else { output.write(""This is not supposed to go on the wire"".getBytes()); throw new WebApplicationException(410); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,writeTo,"public void  (Object arg0 Class<?> arg1 Type arg2 Annotation[] arg3 MediaType arg4 MultivaluedMap<String Object> arg5 OutputStream arg6) throws IOException  WebApplicationException { double[] arr=(double[])arg0; StringBuilder sb=new StringBuilder(); for (int i=0; i < arr.length; i++) { sb.append(Double.toString(arr[i])); if (i + 1 < arr.length) { sb.append("" ""); } } arg6.write(sb.toString().getBytes()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,writeToStreamAndFail,"@GET @Path(""/books/fail-late"") @Produces(""application/bar"") public StreamingOutput  (){ return new StreamingOutputImpl(false); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxrs\BookStore.java,wrongParameterType,"@GET @Path(""exceptionduringconstruction"") public void  (@QueryParam(""p"") BadBook p){ throw new IllegalStateException(""This op is not expected to be invoked""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,connectToMBserver,private void  () throws IOException { jmxServerURL=jmxServerURL == null ? DEFAULT_JMXSERVICE_URL : jmxServerURL; JMXServiceURL url=new JMXServiceURL(jmxServerURL); JMXConnector jmxc=JMXConnectorFactory.connect(url null); mbsc=jmxc.getMBeanServerConnection(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,getEndpointObjectName,"private ObjectName  () throws MalformedObjectNameException  NullPointerException { StringBuilder buffer=new StringBuilder(); String serviceName=""{http://apache.org/hello_world/services}SOAPService""; String portName=""SoapPort""; buffer.append(ManagedApi.DOMAIN_NAME + "":type=Bus.Service.Endpoint ""); buffer.append(ManagementConstants.SERVICE_NAME_PROP + ""=\"""" + serviceName+ ""\"" ""); buffer.append(ManagementConstants.PORT_NAME_PROP + ""=\"""" + portName+ ""\"" *""); return new ObjectName(buffer.toString()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,invokeEndpoint,"private String  (String operation String operationPara) throws Exception { ObjectName endpointName=null; ObjectName queryEndpointName; String ret=""""; Object[] jmxPara=null; String[] jmxSig=null; if (operationPara != null) { jmxPara=new Object[]{operationPara}; jmxSig=new String[]{String.class.getName()}; } else { jmxPara=new Object[0]; jmxSig=new String[0]; } queryEndpointName=getEndpointObjectName(); Set<ObjectName> endpointNames=CastUtils.cast(mbsc.queryNames(queryEndpointName null)); Iterator<ObjectName> it=endpointNames.iterator(); if (it.hasNext()) { endpointName=it.next(); ret=(String)mbsc.invoke(endpointName operation jmxPara jmxSig); LOG.info(""invoke endpoint "" + endpointName + "" operation ""+ operation+ "" succeed!""); } return ret; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,parseJson,private void  (String json) throws Exception { JsonParser parser=new JsonFactory().createParser(json); while (parser.nextToken() != null) { } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf\src\test\java\io\fabric8\cxf\endpoint\jaxws\JsonSchemaJMXTest.java,testJMXGetJsonSchema,"@Test public void  () throws Exception { SpringBusFactory bf=new SpringBusFactory(); Bus bus=bf.createBus(""/io/fabric8/cxf/endpoint/jaxws/jmx-enable.xml""); BusFactory.setDefaultBus(bus); String json=""""; try { connectToMBserver(); json=invokeEndpoint(""getJ"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,addLink,public void  (String name String url){ if (links == null) { links=new TreeMap<>(); } links.put(name url); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getBuildName,public String  (){ return buildName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getBuildParameters,public Map<String String>  (){ return buildParameters; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getChatRoom,public String  (){ return chatRoom; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getCodeReview,public Boolean  (){ return codeReview; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getEnvironments,public LinkedHashMap<String String>  (){ return environments; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getIssueProjectName,public String  (){ return issueProjectName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getLink,public String  (String name){ if (links != null) { return links.get(name); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getLinks,public Map<String String>  (){ return links; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getPipeline,public String  (){ return pipeline; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,getUseLocalFlow,public Boolean  (){ return useLocalFlow; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,hasCodeReview,public boolean  (){ return codeReview != null && codeReview.booleanValue(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,isEmpty,@JsonIgnore public boolean  (){ return codeReview == null && Strings.isNullOrBlank(chatRoom) && Strings.isNullOrBlank(issueProjectName) && Strings.isNullOrBlank(pipeline) && Maps.isNullOrEmpty(buildParameters) && Maps.isNullOrEmpty(environments) && useLoc
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,isUseLocalFlow,public boolean  (){ return useLocalFlow != null && useLocalFlow.booleanValue(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setBuildName,public void  (String buildName){ this.buildName=buildName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setBuildParameters,public void  (Map<String String> buildParameters){ this.buildParameters=buildParameters; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setChatRoom,public void  (String chatRoom){ this.chatRoom=chatRoom; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setCodeReview,public void  (Boolean codeReview){ this.codeReview=codeReview; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setEnvironments,public void  (LinkedHashMap<String String> environments){ this.environments=environments; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setIssueProjectName,public void  (String issueProjectName){ this.issueProjectName=issueProjectName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setLinks,public void  (Map<String String> links){ this.links=links; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setPipeline,public void  (String pipeline){ this.pipeline=pipeline; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,setUseLocalFlow,public void  (Boolean useLocalFlow){ this.useLocalFlow=useLocalFlow; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfig.java,toString,"@Override public String  (){ return ""ProjectConfig{"" + ""flow="" + pipeline + ""  chatRoom='""+ chatRoom+ '\''+ ""  buildName='""+ buildName+ '\''+ ""  issueProjectName='""+ issueProjectName+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,execute,"public void  () throws MojoExecutionException { List<Class<?>> resourceClasses=loadResourceClasses(); List<Object> resourceObjects=new ArrayList<Object>(); for ( Class<?> resourceClass : resourceClasses) { try { resourceObjects.add(resourceClass.newInstance()); } catch ( InstantiationException e) { throw new MojoExecutionException(e.getMessage() e); } catch ( IllegalAccessException e) { throw new MojoExecutionException(e.getMessage() e); } } Thread.currentThread().setContextClassLoader(getClassLoader()); List<Feature> features=new ArrayList<Feature>(); features.add(new SwaggerFeature()); JAXRSServerFactoryBean serverFacBean=new JAXRSServerFactoryBean(); serverFacBean.setAddress(address); serverFacBean.setServiceBeans(resourceObjects); serverFacBean.setFeatures(features); Server server=serverFacBean.create(); InputStream in=null; try { String serverAddress=server.getEndpoint().getEndpointInfo().getAddress(); String apiDocs=serverAddress + ""/swagger.json""; URL url=new URL(apiDocs); in=url.openStream(); String res=getStringFromInputStream(in); generateJson(resourceClasses res); } catch ( Exception e) { throw new MojoExecutionException(e.getMessage() e); } finally { server.stop(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,generateJson,"private void  (List<Class<?>> resourceClasses String swagger) throws MojoExecutionException { if (outputFile == null && project != null) { String name=null; if (outputFileName != null) { name=outputFileName; } else if (resourceClasses.size() == 1) { name=resourceClasses.get(0).getSimpleName(); } else { name=""application""; } outputFile=(project.getBuild().getDirectory() + ""/generated/json/"" + name+ "".""+ outputFileExtension).replace(""/"" File.separator); } BufferedWriter writer=null; try { FileUtils.mkDir(new File(outputFile).getParentFile()); writer=new BufferedWriter(new FileWriter(outputFile)); writer.write(swagger); } catch ( IOException e) { throw new MojoExecutionException(e.getMessage() e); } finally { try { if (writer != null) { writer.close(); } } catch ( IOException e) { throw new MojoExecutionException(e.getMessage() e); } } if (attachSwagger && outputFile != null) { File jsonFile=new File(outputFile); if (jsonFile.exists()) { if (classifier != null) { projectHelper.attachArtifact(project ""json"" classifier jsonFile); } else { projectHelper.attachArtifact(project ""json"" jsonFile); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,getClassLoader,private ClassLoader  () throws MojoExecutionException { if (resourceClassLoader == null) { try { List<?> runtimeClasspathElements=project.getRuntimeClasspathElements(); URL[] runtimeUrls=new URL[runtimeClasspathElements.size()]; for (int i=0; i < runtimeClasspathElements.size(); i++) { String element=(String)runtimeClasspathElements.get(i); runtimeUrls[i]=new File(element).toURI().toURL(); } resourceClassLoader=new URLClassLoader(runtimeUrls Thread.currentThread().getContextClassLoader()); } catch ( Exception e) { throw new MojoExecutionException(e.getMessage() e); } } return resourceClassLoader; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,getStringFromInputStream,private static String  (InputStream in) throws Exception { ByteArrayOutputStream bos=new ByteArrayOutputStream(); int c=0; while ((c=in.read()) != -1) { bos.write(c); } in.close(); bos.close(); return bos.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-cxf-plugins\src\main\java\io\fabric8\cxf\maven\Java2SwaggerJsonMojo.java,loadResourceClasses,private List<Class<?>>  () throws MojoExecutionException { List<Class<?>> resourceClasses=new ArrayList<Class<?>>(classResourceNames.size()); for ( String className : classResourceNames) { try { resourceClasses.add(getClassLoader().loadClass(className)); } catch ( Exception e) { throw new MojoExecutionException(e.getMessage() e); } } return resourceClasses; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,configureProperties,"public static void  (ProjectConfig config Map map){ Class<? extends ProjectConfig> clazz=config.getClass(); BeanInfo beanInfo=null; try { beanInfo=Introspector.getBeanInfo(clazz); } catch ( IntrospectionException e) { LOG.warn(""Could not introspect "" + clazz.getName() + "". ""+ e e); } if (beanInfo != null) { PropertyDescriptor[] propertyDescriptors=beanInfo.getPropertyDescriptors(); for ( PropertyDescriptor descriptor : propertyDescriptors) { Method writeMethod=descriptor.getWriteMethod(); if (writeMethod != null) { String name=descriptor.getName(); Object value=map.get(name); if (value != null) { Object safeValue=null; Class<?> propertyType=descriptor.getPropertyType(); if (propertyType.isInstance(value)) { safeValue=value; } else { PropertyEditor editor=descriptor.createPropertyEditor(config); if (editor == null) { editor=PropertyEditorManager.findEditor(propertyType); } if (editor != null) { String text=value.toString(); editor.setAsText(text); safeValue=editor.getValue(); } else { LOG.warn(""Cannot update property "" + name + "" with value ""+ value+ "" of type ""+ propertyType.getName()+ "" on ""+ clazz.getName()); } } if (safeValue != null) { try { writeMethod.invoke(config safeValue); } catch ( Exception e) { LOG.warn(""Failed to set property "" + name + "" with value ""+ value+ "" on ""+ clazz.getName()+ "" ""+ config+ "". ""+ e e); } } } } } } String flow=null; Object flowValue=map.get(""pipeline""); if (flowValue == null) { flowValue=map.get(""flow""); } if (flowValue != null) { flow=flowValue.toString(); } config.setPipeline(flow); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,createObjectMapper,public static ObjectMapper  (){ return new ObjectMapper(new YAMLFactory()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,defaultEnvironments,"public static void  (ProjectConfig config String namespace){ if (config != null) { String buildName=config.getBuildName(); if (Strings.isNotBlank(buildName) && Maps.isNullOrEmpty(config.getEnvironments())) { String defaultEnvironmentsText=Systems.getEnvVarOrSystemProperty(""FABRIC8_DEFAULT_ENVIRONMENTS"" ""Testing=${namespace}-testing Staging=${namespace}-staging Production=${namespace}-prod""); String text=Strings.replaceAllWithoutRegex(defaultEnvironmentsText ""${buildName}"" buildName); text=Strings.replaceAllWithoutRegex(text ""${namespace}"" namespace); LinkedHashMap<String String> environments=Maps.parseMap(text); config.setEnvironments(environments); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,findFromFolder,public static ProjectConfig  (File folder){ if (folder.isDirectory()) { File projectConfigFile=new File(folder FILE_NAME); if (projectConfigFile != null && projectConfigFile.exists() && projectConfigFile.isFile()) { return loadFromFolder(folder); } File parentFile=folder.getParentFile(); if (parentFile != null) { return findFromFolder(parentFile); } } return new ProjectConfig(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,hasConfigFile,public static boolean  (File folder){ File projectConfigFile=new File(folder FILE_NAME); return projectConfigFile != null && projectConfigFile.exists() && projectConfigFile.isFile(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,loadFromFolder,"public static ProjectConfig  (File folder){ File projectConfigFile=new File(folder FILE_NAME); if (projectConfigFile != null && projectConfigFile.exists() && projectConfigFile.isFile()) { LOG.debug(""Parsing fabric8 devops project configuration from: "" + projectConfigFile.getName()); try { return ProjectConfigs.parseProjectConfig(projectConfigFile); } catch ( IOException e) { LOG.warn(""Failed to parse "" + projectConfigFile + "". ""+ e e); } } return new ProjectConfig(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,loadFromUrl,"public static ProjectConfig  (URL url){ InputStream input=null; try { input=url.openStream(); } catch ( FileNotFoundException e) { LOG.info(""No fabric8.yml at URL: "" + url); } catch ( IOException e) { LOG.warn(""Failed to open fabric8.yml file at URL: "" + url + "". ""+ e e); } if (input != null) { try { LOG.info(""Parsing "" + ProjectConfigs.FILE_NAME + "" from ""+ url); return ProjectConfigs.parseProjectConfig(input); } catch ( IOException e) { LOG.warn(""Failed to parse "" + ProjectConfigs.FILE_NAME + "" from ""+ url+ "". ""+ e e); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,parseProjectConfig,public static ProjectConfig  (String yaml) throws IOException { return parseYaml(yaml ProjectConfig.class); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,parseYaml,private static <T>T  (String yaml Class<T> clazz) throws IOException { ObjectMapper mapper=createObjectMapper(); return mapper.readValue(yaml clazz); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,parseYamlValues,static <T>List<T>  (File file Class<T> clazz) throws IOException { ObjectMapper mapper=createObjectMapper(); MappingIterator<T> iter=mapper.readerFor(clazz).readValues(file); List<T> answer=new ArrayList<>(); while (iter.hasNext()) { answer.add(iter.next()); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,saveConfig,public static boolean  (ProjectConfig config File file) throws IOException { createObjectMapper().writeValue(file config); return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,saveToFolder,"public static boolean  (File basedir ProjectConfig config boolean overwriteIfExists) throws IOException { File file=new File(basedir ProjectConfigs.FILE_NAME); if (file.exists()) { if (!overwriteIfExists) { LOG.warn(""Not generating "" + file + "" as it already exists""); return false; } } return saveConfig(config file); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectConfigs.java,toYaml,public static String  (Object dto) throws JsonProcessingException { ObjectMapper mapper=createObjectMapper(); return mapper.writeValueAsString(dto); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepositories.java,createBuildName,public static String  (String username String repoName){ return repoName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepositories.java,loadProjectRepositories,public static List<ProjectRepository>  (File yamlFile) throws IOException { if (yamlFile.exists() && yamlFile.isFile()) { return parseYamlValues(yamlFile ProjectRepository.class); } else { return new ArrayList<>(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\test\java\io\fabric8\devops\ConfigureTest.java,testConfiguration,"@Test public void  () throws Exception { ProjectConfig config=new ProjectConfig(); config.setCodeReview(true); Map map=new HashMap(); map.put(""codeReview"" false); ProjectConfigs.configureProperties(config map); assertThat(config.getCodeReview()).described"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\test\java\io\fabric8\devops\ProjectRepositoryTest.java,testParseYaml,"@Test public void  () throws Exception { String basedir=System.getProperty(""basedir"" "".""); File file=new File(basedir ""src/test/resources/projects.yml""); assertThat(file).exists(); List<ProjectRepository> projects=ProjectRepositories.loadProjectRepositori"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\test\java\io\fabric8\devops\YamlTest.java,testGenerateYaml,"@Test public void  () throws Exception { ProjectConfig config=new ProjectConfig(); config.setPipeline(""maven/Deploy.groovy""); config.setChatRoom(""myroom""); config.setCodeReview(true); config.setIssueProjectName(""THING""); config.addLink(""Room"" ""http://lets"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\test\java\io\fabric8\devops\YamlTest.java,testParseYaml,"@Test public void  () throws Exception { String basedir=System.getProperty(""basedir"" "".""); File file=new File(basedir ""src/test/resources/fabric8.yml""); assertThat(file).exists(); ProjectConfig config=ProjectConfigs.parseProjectConfig(file); System.out.pr"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,extractOrganisationAndUserFromUrl,"protected void  (){ if (Strings.isNotBlank(url)) { String text=Strings.stripSuffix(url ""./""); text=Strings.stripSuffix(text "".git""); text=Strings.stripSuffix(text ""/""); String[] split=text.split(""/""); if (split != null && split.length > 1) { if (Strings.isNullOrBlank(user)) { user=split[split.length - 2]; } if (Strings.isNullOrBlank(repoName)) { repoName=split[split.length - 1]; } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,getGitUrl,"public String  (){ if (Strings.isNullOrBlank(gitUrl) && Strings.isNotBlank(url)) { if (isGitHubProject()) { gitUrl=url + "".git""; } } return gitUrl; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,getKind,public String  (){ return kind; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,getRepoName,public String  (){ if (repoName == null) { extractOrganisationAndUserFromUrl(); } return repoName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,getUser,public String  (){ if (user == null) { extractOrganisationAndUserFromUrl(); } return user; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,isGitHubProject,public boolean  (){ return Objects.equals(getKind() Kinds.GITHUB); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,setGitUrl,public void  (String gitUrl){ this.gitUrl=gitUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,setKind,public void  (String kind){ this.kind=kind; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,setRepoName,public void  (String repoName){ this.repoName=repoName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,setUrl,public void  (String url){ this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,setUser,public void  (String user){ this.user=user; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops\src\main\java\io\fabric8\devops\ProjectRepository.java,toString,"@Override public String  (){ return ""ProjectRepository{"" + ""kind='"" + kind + '\''+ ""  user='""+ getUser()+ '\''+ ""  repoName='""+ getRepoName()+ '\''+ ""  url='""+ url+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnectors.java,createDevOpsConnector,"public static DevOpsConnector  (ProjectRepository project){ DevOpsConnector connector=new DevOpsConnector(); connector.setGitUrl(project.getGitUrl()); String repoName=project.getRepoName(); connector.setRepoName(repoName); String username=project.getUser(); connector.setUsername(username); String buildName=ProjectRepositories.createBuildName(username repoName); if (project.isGitHubProject()) { String url=project.getUrl(); if (Strings.isNotBlank(url)) { connector.setIssueTrackerUrl(URLUtils.pathJoin(url ""issues"")); connector.setTeamUrl(URLUtils.pathJoin(url ""graphs/contributors"")); connector.setReleasesUrl(URLUtils.pathJoin(url ""tags"")); connector.setRepositoryBrowseLink(url); } ProjectConfig config=ProjectConfigs.loadFromUrl(URLUtils.pathJoin(url ""blob/master/fabric8.yml"")); if (config == null) { config=new ProjectConfig(); config.setPipeline(""maven/Deploy.groovy""); } config.setBuildName(buildName); connector.setProjectConfig(config); connector.setRegisterWebHooks(false); System.out.println(""Created config "" + config.getBuildName() + "" with flow ""+ config.getPipeline()); } return connector; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\Environments.java,ensureEnvironmentAdded,"public static boolean  (ConfigMap environmentsConfigMap String key String label String namespace){ boolean answer=false; Map<String String> data=new LinkedHashMap<>(); Map<String String> oldData=environmentsConfigMap.getData(); if (oldData != null) { data.putAll(oldData); environmentsConfigMap.setData(data); } String yaml=data.get(key); if (Strings.isNullOrBlank(yaml)) { yaml=""name: "" + label + ""\nnamespace: ""+ namespace+ ""\norder: ""+ data.size(); data.put(key yaml); answer=true; } if (answer) { environmentsConfigMap.setData(data); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\Environments.java,getOrCreateEnvironments,"public static ConfigMap  (KubernetesClient client){ ConfigMap answer=null; try { answer=client.configMaps().inNamespace(client.getNamespace()).withName(ENVIRONMENTS_CONFIG_MAP_NAME).get(); } catch ( Exception e) { LOG.info(""Failed to find ConfigMap "" + client.getNamespace() + "".""+ ENVIRONMENTS_CONFIG_MAP_NAME+ "". ""+ e e); } if (answer == null || KubernetesHelper.getName(answer) == null) { answer=new ConfigMapBuilder().withNewMetadata().withName(ENVIRONMENTS_CONFIG_MAP_NAME).addToLabels(""kind"" ""environments"").addToLabels(""provider"" ""fabric8.io"").endMetadata().build(); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\WebHooks.java,createGogsWebhook,"public static boolean  (GitRepoClient repoClient Logger log String gogsUser String repoName String webhookUrl String webhookSecret) throws JsonProcessingException { if (repoClient == null) { log.info(""Cannot create Gogs webhooks as no Gogs service could be found or created""); return false; } String gogsAddress=repoClient.getAddress(); log.info(""Querying webhooks in gogs at address: "" + gogsAddress + "" for user ""+ gogsUser+ "" repoName: ""+ repoName); RepositoryDTO repository=repoClient.getRepository(gogsUser repoName); if (repository == null) { log.info(""No repository found for user: "" + gogsUser + "" repo: ""+ repoName+ "" so cannot create any web hooks""); } List<WebHookDTO> webhooks=repoClient.getWebhooks(gogsUser repoName); for ( WebHookDTO webhook : webhooks) { String url=null; WebhookConfig config=webhook.getConfig(); if (config != null) { url=config.getUrl(); if (Objects.equal(webhookUrl url)) { log.info(""Already has webhook for: "" + url + "" so not creating again""); return false; } log.info(""Ignoring webhook "" + url + "" from: ""+ toJson(config)); } } CreateWebhookDTO createWebhook=new CreateWebhookDTO(); createWebhook.setType(""gogs""); WebhookConfig config=createWebhook.getConfig(); config.setUrl(webhookUrl); config.setSecret(webhookSecret); WebHookDTO webhook=repoClient.createWebhook(gogsUser repoName createWebhook); if (log.isDebugEnabled()) { log.debug(""Got created web hook: "" + toJson(webhook)); } log.info(""Created webhook for "" + webhookUrl + "" for user: ""+ gogsUser+ "" repoName: ""+ repoName+ "" on gogs URL: ""+ gogsAddress); return true; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\test\java\io\fabric8\devops\connector\DevOpsConnectorExample.java,main,"public static void  (String[] args) throws Exception { DevOpsConnector devops=new DevOpsConnector(); devops.setBasedir(new File(""./"")); devops.setGitUrl(""someURL""); devops.execute(); System.out.println(""Finished""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\test\java\io\fabric8\devops\connector\RemoveBuildParameterTest.java,testRemoveBuildParameterTest,"@Test public void  () throws Exception { String template=loadJenkinsBuildTemplate(LOG); assertThat(template).isNotEmpty(); String transformed=removeBuildParameter(LOG template ""GIT_URL""); transformed=removeBuildParameter(LOG transformed ""VERSION_PREFIX"");"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\test\java\io\fabric8\devops\connector\UpdateEnviromentConfigMap.java,main,"public static void  (String... args){ try { KubernetesClient kube=new DefaultKubernetesClient(); System.out.println(""Using namespace "" + kube.getNamespace() + "" on master: ""+ kube.getMasterUrl()); Map<String String> environments=new HashMap<>(); environments.put(""Testing2"" ""default-testing""); environments.put(""Staging2"" ""default-staging""); DevOpsConnector connector=new DevOpsConnector(); String consoleUrl=""http://fabric8.vagrant.f8/""; Map<String String> annotations=new HashMap<>(); System.out.println(""Starting to create/update the environment ConfigMap with "" + environments); connector.updateEnvironmentConfigMap(environments kube annotations consoleUrl); System.out.println(""Now trying a second time!""); connector.updateEnvironmentConfigMap(environments kube annotations consoleUrl); System.out.println(""Worked!!!""); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,addBuildParameter,"public static String  (Logger log String template String parameterName String parameterValue String description){ try { Document doc=parseXmlText(template); Element rootElement=doc.getDocumentElement(); NodeList parameterDefs=rootElement.getElementsByTagName(""parameterDefinitions""); if (parameterDefs != null && parameterDefs.getLength() > 0) { Node paramDefNode=parameterDefs.item(0); Element stringParamDef=DomHelper.addChildElement(paramDefNode ""hudson.model.StringParameterDefinition""); DomHelper.addChildElement(stringParamDef ""name"" parameterName); DomHelper.addChildElement(stringParamDef ""defaultValue"" parameterValue); if (Strings.isNotBlank(description)) { DomHelper.addChildElement(stringParamDef ""description"" description); } return DomHelper.toXml(doc); } else { log.warn(""Could not find the <parameterDefinitions> to add the build parameter name "" + parameterName + "" with value: ""+ parameterValue); } } catch ( Exception e) { log.error(""Failed to add the build parameter from the Jenkins XML. "" + e e); } return template; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,addJenkinsScmTrigger,"protected void  (String jenkinsJobUrl){ if (Strings.isNullOrBlank(jenkinsJobTemplate)) { getLog().warn(""Cannot add SCM trigger to jenkins job at "" + jenkinsJobUrl + "" as there is no cached template""); } else if (!localJenkinsFlow) { getLog().info(""Not adding an SCM trigger to jenkins job at "" + jenkinsJobUrl + "" as it is not using a local Jenkinsfile""); } else { getLog().info(""Adding adding an SCM trigger to jenkins job at "" + jenkinsJobUrl); String template=null; try { template=jenkinsJobTemplate; Document doc=parseXmlText(template); Element rootElement=doc.getDocumentElement(); Element triggerElement=null; NodeList triggers=rootElement.getElementsByTagName(""triggers""); if (triggers == null || triggers.getLength() == 0) { triggerElement=DomHelper.addChildElement(rootElement ""triggers""); } else { triggerElement=(Element)triggers.item(0); } String hostName=GitUtils.getGitHostName(gitUrl); getLog().info(""using git host: "" + hostName); if (Objects.equal(""github.com"" hostName)) { Element githubTrigger=DomHelper.firstChild(triggerElement ""com.cloudbees.jenkins.GitHubPushTrigger""); if (githubTrigger == null) { githubTrigger=DomHelper.addChildElement(triggerElement ""com.cloudbees.jenkins.GitHubPushTrigger""); githubTrigger.setAttribute(""plugin"" ""github@1.14.0""); DomHelper.addChildElement(githubTrigger ""spec""); } } Element scmTrigger=DomHelper.addChildElement(triggerElement ""hudson.triggers.SCMTrigger""); DomHelper.addChildElement(scmTrigger ""spec"" ""* * * * * ""); DomHelper.addChildElement(scmTrigger ""ignorePostCommitHooks"" ""false""); template=DomHelper.toXml(doc); } catch ( Exception e) { getLog().warn(""Failed to add the SCM trigger to jenkins job at "" + jenkinsJobUrl + "". Reason: ""+ e e); template=null; } if (Strings.isNotBlank(template)) { postJenkinsBuild(jenkinsJobName template false); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,addLink,public void  (String label String url){ if (projectConfig == null) { projectConfig=new ProjectConfig(); } projectConfig.addLink(label url); modifiedConfig=true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,annotationLink,"protected boolean  (Map<String String> annotations String annotationPrefix String issueTrackerUrl String issueTrackerLabel){ if (Strings.isNotBlank(issueTrackerUrl)) { annotations.put(annotationPrefix + ""url"" issueTrackerUrl); annotations.put(annotationPrefix + ""label"" issueTrackerLabel); addLink(issueTrackerLabel issueTrackerUrl); return true; } else { return false; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,aroundReadFrom,@Override public Object  (ReaderInterceptorContext interceptorContext) throws IOException  WebApplicationException { InputStream in=interceptorContext.getInputStream(); BufferedReader reader=new BufferedReader(new InputStreamReader(in)); StringBuilder rec
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createController,protected Controller  (){ Controller controller=new Controller(getKubernetes()); controller.setNamespace(namespace); controller.setThrowExceptionOnError(true); controller.setRecreateMode(recreateMode); return controller; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createGerritRepo,"protected void  (String repoName String gerritUser String gerritPwd String gerritGitInitialCommit String gerritGitRepoDescription) throws Exception { if (Strings.isNullOrBlank(gerritUser)) { gerritUser=""admin""; } if (Strings.isNullOrBlank(gerritPwd)) { gerritPwd=""secret""; } log.info(""A Gerrit git repo will be created for this name : "" + repoName); String gerritAddress=KubernetesHelper.getServiceURL(kubernetes ServiceNames.GERRIT namespace ""http"" true); log.info(""Found gerrit address: "" + gerritAddress + "" for namespace: ""+ namespace+ "" on Kubernetes address: ""+ kubernetes.getMasterUrl()); if (Strings.isNullOrBlank(gerritAddress)) { throw new Exception(""No address for service "" + ServiceNames.GERRIT + "" in namespace: ""+ namespace+ "" on Kubernetes address: ""+ kubernetes.getMasterUrl()); } CloseableHttpClient httpclient=HttpClients.createDefault(); CloseableHttpClient httpclientPost=HttpClients.createDefault(); String GERRIT_URL=gerritAddress + ""/a/projects/"" + repoName; HttpGet httpget=new HttpGet(GERRIT_URL); System.out.println(""Requesting : "" + httpget.getURI()); try { HttpResponse response=httpclient.execute(httpget); System.out.println(response.getStatusLine()); if (response.getStatusLine().getStatusCode() == HttpStatus.SC_UNAUTHORIZED) { Header authHeader=response.getFirstHeader(AUTH.WWW_AUTH); System.out.println(""authHeader = "" + authHeader); DigestScheme digestScheme=new DigestScheme(); digestScheme.processChallenge(authHeader); UsernamePasswordCredentials creds=new UsernamePasswordCredentials(gerritUser gerritPwd); httpget.addHeader(digestScheme.authenticate(creds httpget null)); HttpPost httpPost=new HttpPost(GERRIT_URL); httpPost.addHeader(digestScheme.authenticate(creds httpPost null)); httpPost.addHeader(""Content-Type"" ""application/json""); CreateRepositoryDTO createRepoDTO=new CreateRepositoryDTO(); createRepoDTO.setDescription(gerritGitRepoDescription); createRepoDTO.setName(repoName); createRepoDTO.setCreate_empty_commit(Boolean.valueOf(gerritGitInitialCommit)); ObjectMapper mapper=new ObjectMapper(); String json=mapper.writeValueAsString(createRepoDTO); HttpEntity entity=new StringEntity(json); httpPost.setEntity(entity); ResponseHandler<String> responseHandler=new BasicResponseHandler(); String responseBody=httpclientPost.execute(httpPost responseHandler); System.out.println(""responseBody : "" + responseBody); } } catch ( MalformedChallengeException e) { e.printStackTrace(); } catch ( AuthenticationException e) { e.printStackTrace(); } catch ( ConnectException e) { System.out.println(""Gerrit Server is not responding""); } catch ( HttpResponseException e) { System.out.println(""Response from Gerrit Server : "" + e.getMessage()); throw new Exception(""Repository "" + repoName + "" already exists !""); } finally { httpclient.close(); httpclientPost.close(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createJenkinsJob,"protected String  (String buildName String jenkinsJobUrl){ String answer=null; if (projectConfig != null) { String flow=projectConfig.getPipeline(); String flowGitUrlValue=null; boolean localFlow=false; String projectGitUrl=this.gitUrl; if (Strings.isNotBlank(flow)) { flowGitUrlValue=this.flowGitUrl; } else if (projectConfig.isUseLocalFlow()) { flow=ProjectConfigs.LOCAL_FLOW_FILE_NAME; flowGitUrlValue=projectGitUrl; localFlow=true; } else { getLog().info(""Not creating Jenkins job as no pipeline defined for project configuration!""); } this.localJenkinsFlow=localFlow; String versionPrefix=Systems.getSystemPropertyOrEnvVar(""VERSION_PREFIX"" ""VERSION_PREFIX"" ""1.0""); if (Strings.isNotBlank(flow) && Strings.isNotBlank(projectGitUrl) && Strings.isNotBlank(flowGitUrlValue)) { String template=loadJenkinsBuildTemplate(getLog()); if (Strings.isNotBlank(template)) { if (Strings.isNotBlank(gitSourceSecretName)) { template=addBuildParameter(getLog() template ""SOURCE_SECRET"" gitSourceSecretName ""Name of the Kubernetes Secret required to clone the git repository""); } template=template.replace(""${FLOW_PATH}"" flow); template=template.replace(""${FLOW_GIT_URL}"" flowGitUrlValue); template=template.replace(""${GIT_URL}"" projectGitUrl); template=template.replace(""${VERSION_PREFIX}"" versionPrefix); if (localFlow) { template=removeBuildParameter(getLog() template ""GIT_URL""); } postJenkinsBuild(buildName template true); answer=template; } } addProjectSecret(); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createJenkinsWebhook,"protected void  (String jenkinsJobUrl){ if (Strings.isNotBlank(jenkinsJobUrl)) { String jenkinsWebHook=URLUtils.pathJoin(jenkinsJobUrl ""/build""); Map<String String> buildParameters=getBuildParameters(); if (!buildParameters.isEmpty()) { String postfix=""""; for ( Map.Entry<String String> entry : buildParameters.entrySet()) { if (postfix.length() > 0) { postfix+=""&""; } postfix+=entry.getKey() + ""="" + entry.getValue(); } jenkinsWebHook+=""WithParameters?"" + postfix; } boolean created=createWebhook(jenkinsWebHook this.secret); if (!created) { addJenkinsScmTrigger(jenkinsJobUrl); } if (triggerJenkinsJob || !created) { triggerJenkinsWebHook(jenkinsJobUrl jenkinsWebHook this.secret); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createLetsChat,"protected LetsChatClient  (){ if (!letschatEnabled) { return null; } KubernetesClient kubernetes=getKubernetes(); LetsChatClient letsChat=LetsChatKubernetes.createLetsChat(kubernetes); if (letsChat == null) { getLog().warn(""No letschat service availble n kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } if (!letsChat.isValid()) { getLog().warn(""No $"" + LetsChatKubernetes.LETSCHAT_HUBOT_TOKEN + "" environment variable defined so LetsChat support is disabled""); return null; } return letsChat; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createTaiga,protected TaigaClient  (){ if (!taigaEnabled) { return null; } TaigaClient taiga=TaigaKubernetes.createTaiga(getKubernetes() namespace); if (taiga != null) { taiga.setAutoCreateProjects(taigaAutoCreate); } return taiga; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createTaigaProject,"protected ProjectDTO  (TaigaClient taiga){ if (taiga != null) { if (Strings.isNullOrBlank(taigaProjectName)) { getLog().info(""Not creating Taiga project as no `fabric8.tagiaProjectName` property specified""); return null; } if (Strings.isNullOrBlank(taigaProjectSlug)) { getLog().info(""Not creating Taiga project as no `fabric8.taigaProjectSlug` property specified""); return null; } getLog().info(""About to create Taiga project "" + taigaProjectName + "" with slug: ""+ taigaProjectSlug); return taiga.getOrCreateProject(taigaProjectName taigaProjectSlug); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createTaigaWebhook,"protected void  (TaigaClient taiga ProjectDTO project){ if (taiga != null && project != null) { Long projectId=project.getId(); ModuleDTO module=taiga.moduleForProject(projectId TaigaModule.GOGS); if (module != null) { String webhookSecret=module.getSecret(); String webhook=taiga.getPublicWebhookUrl(module); if (Strings.isNotBlank(webhookSecret) && Strings.isNotBlank(webhook)) { createWebhook(webhook webhookSecret); } else { getLog().warn(""Could not create webhook for Taiga. Missing module data for url: "" + webhook + "" secret: ""+ webhookSecret); } } else { getLog().warn(""No module for gogs so cannot create Taiga webhook""); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,createWebhook,"protected boolean  (String url String webhookSecret){ try { GitRepoClient gitRepoClient=getGitRepoClient(); WebHooks.createGogsWebhook(gitRepoClient getLog() username repoName url webhookSecret); return true; } catch ( Exception e) { getLog().error(""Failed to create webhook "" + url + "" on repository ""+ repoName+ "". Reason: ""+ e e); return false; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,evaluateRoomExpression,"protected String  (String roomExpresion){ if (Strings.isNotBlank(roomExpresion)) { String namespace=KubernetesHelper.defaultNamespace(); String answer=roomExpresion; answer=replaceExpression(answer ""namespace"" namespace); answer=replaceExpression(answer ""repoName"" repoName); answer=replaceExpression(answer ""username"" username); return answer; } else { return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,execute,"public void  () throws Exception { loadConfigFile(); KubernetesClient kubernetes=getKubernetes(); String name=projectName; if (Strings.isNullOrBlank(name)) { if (projectConfig != null) { name=projectConfig.getBuildName(); } if (Strings.isNullOrBlank(name)) { name=jenkinsJob; } if (Strings.isNullOrBlank(name)) { name=ProjectRepositories.createBuildName(username repoName); if (projectConfig != null) { projectConfig.setBuildName(name); } } } if (Strings.isNullOrBlank(projectName)) { projectName=name; } Map<String String> labels=new HashMap<>(); labels.put(""user"" username); labels.put(""repo"" repoName); getLog().info(""build name "" + name); taiga=null; taigaProject=null; try { taiga=createTaiga(); taigaProject=createTaigaProject(taiga); } catch ( Exception e) { getLog().error(""Failed to load or lazily create the Taiga project: "" + e e); } getLog().info(""taiga "" + taiga); LetsChatClient letschat=null; try { letschat=createLetsChat(); } catch ( Exception e) { getLog().error(""Failed to load or lazily create the LetsChat client: "" + e e); } getLog().info(""letschat "" + letschat); if (projectConfig != null && projectConfig.hasCodeReview()) { try { createGerritRepo(repoName gerritUser gerritPwd gerritGitInitialCommit gerritGitRepoDesription); } catch ( Exception e) { getLog().error(""Failed to create GerritGit repo : "" + e e); } } Map<String String> annotations=new HashMap<>(); jenkinsJobUrl=null; String jenkinsUrl=null; try { jenkinsUrl=getJenkinsServiceUrl(true); if (Strings.isNotBlank(jenkinsUrl)) { if (Strings.isNotBlank(jenkinsMonitorView)) { String url=URLUtils.pathJoin(jenkinsUrl ""/view"" jenkinsMonitorView); annotationLink(annotations ""fabric8.link.jenkins.monitor/"" url ""Monitor""); } if (Strings.isNotBlank(jenkinsPipelineView)) { String url=URLUtils.pathJoin(jenkinsUrl ""/view"" jenkinsPipelineView); annotationLink(annotations ""fabric8.link.jenkins.pipeline/"" url ""Pipeline""); } if (Strings.isNotBlank(name)) { jenkinsJobUrl=URLUtils.pathJoin(jenkinsUrl ""/job"" name); annotationLink(annotations ""fabric8.link.jenkins.job/"" jenkinsJobUrl ""Job""); } } } catch ( Exception e) { getLog().warn(""Could not find the Jenkins URL!: "" + e e); } getLog().info(""jenkins "" + jenkinsUrl); if (!annotationLink(annotations ""fabric8.link.issues/"" issueTrackerUrl issueTrackerLabel)) { String taigaLink=getProjectPageLink(taiga taigaProject this.taigaProjectLinkPage); annotationLink(annotations ""fabric8.link.taiga/"" taigaLink taigaProjectLinkLabel); } if (!annotationLink(annotations ""fabric8.link.team/"" teamUrl teamLabel)) { String taigaTeamLink=getProjectPageLink(taiga taigaProject this.taigaTeamLinkPage); annotationLink(annotations ""fabric8.link.taiga.team/"" taigaTeamLink taigaTeamLinkLabel); } annotationLink(annotations ""fabric8.link.releases/"" releasesUrl releasesLabel); String chatRoomLink=getChatRoomLink(letschat); annotationLink(annotations ""fabric8.link.letschat.room/"" chatRoomLink letschatRoomLinkLabel); annotationLink(annotations ""fabric8.link.repository.browse/"" repositoryBrowseLink repositoryBrowseLabel); ProjectConfigs.defaultEnvironments(projectConfig namespace); String consoleUrl=getServiceUrl(ServiceNames.FABRIC8_CONSOLE namespace fabric8ConsoleNamespace); if (projectConfig != null) { Map<String String> environments=projectConfig.getEnvironments(); updateEnvironmentConfigMap(environments kubernetes annotations consoleUrl); } addLink(""Git"" getGitUrl()); Controller controller=createController(); OpenShiftClient openShiftClient=controller.getOpenShiftClientOrJenkinshift(); BuildConfig buildConfig=null; if (openShiftClient != null) { try { buildConfig=openShiftClient.buildConfigs().withName(projectName).get(); } catch ( Exception e) { log.error(""Failed to load build config for "" + namespace + ""/""+ projectName+ "". ""+ e e); } log.info(""Loaded build config for "" + namespace + ""/""+ projectName+ "" ""+ buildConfig); } boolean foundExistingGitUrl=false; if (buildConfig != null) { BuildConfigSpec spec=buildConfig.getSpec(); if (spec != null) { BuildSource source=spec.getSource(); if (source != null) { GitBuildSource git=source.getGit(); if (git != null) { gitUrl=git.getUri(); log.info(""Loaded existing BuildConfig git url: "" + gitUrl); foundExistingGitUrl=true; } LocalObjectReference sourceSecret=source.getSourceSecret(); if (sourceSecret != null) { gitSourceSecretName=sourceSecret.getName(); } } } if (!foundExistingGitUrl) { log.warn(""Could not find a git url in the loaded BuildConfig: "" + buildConfig); } log.info(""Loaded gitSourceSecretName: "" + gitSourceSecretName); } log.info(""gitUrl is: "" + gitUrl); if (buildConfig == null) { buildConfig=new BuildConfig(); } ObjectMeta metadata=getOrCreateMetadata(buildConfig); metadata.setName(projectName); metadata.setLabels(labels); putAnnotations(metadata annotations); Map<String String> currentAnnotations=metadata.getAnnotations(); if (!currentAnnotations.containsKey(Annotations.Builds.GIT_CLONE_URL)) { currentAnnotations.put(Annotations.Builds.GIT_CLONE_URL gitUrl); } String localGitUrl=getLocalGitUrl(); if (!currentAnnotations.containsKey(Annotations.Builds.LOCAL_GIT_CLONE_URL) && Strings.isNotBlank(localGitUrl)) { currentAnnotations.put(Annotations.Builds.LOCAL_GIT_CLONE_URL localGitUrl); } if (Strings.isNotBlank(localGitUrl)) { gitUrl=localGitUrl; } Builds.configureDefaultBuildConfig(buildConfig name gitUrl foundExistingGitUrl buildImageStream buildImageTag s2iCustomBuilderImage secret jenkinsUrl); try { getLog().info(""About to apply build config: "" + new JSONObject(KubernetesHelper.toJson(buildConfig)).toString(4)); controller.applyBuildConfig(buildConfig ""maven""); getLog().info(""Created build configuration for "" + name + "" in namespace: ""+ controller.getNamespace()+ "" at ""+ kubernetes.getMasterUrl()); } catch ( Exception e) { getLog().error(""Failed to create BuildConfig for "" + KubernetesHelper.toJson(buildConfig) + "". ""+ e e); } this.jenkinsJobName=name; if (isRegisterWebHooks()) { registerWebHooks(); getLog().info(""webhooks done""); } if (modifiedConfig) { if (basedir == null) { getLog().error(""Could not save updated "" + ProjectConfigs.FILE_NAME + "" due to missing basedir""); } else { try { ProjectConfigs.saveToFolder(basedir projectConfig true); getLog().info(""Updated "" + ProjectConfigs.FILE_NAME); } catch ( IOException e) { getLog().error(""Could not save updated "" + ProjectConfigs.FILE_NAME + "": ""+ e e); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,existsXmlURL,"protected boolean  (String urlText){ HttpURLConnection connection=null; try { URL url=new URL(urlText); connection=(HttpURLConnection)url.openConnection(); connection.setRequestMethod(""GET""); connection.setRequestProperty(""Accept"" ""application/xml""); int responseCode=connection.getResponseCode(); getLog().info(""Checking URL exists got response code "" + responseCode + "" on url ""+ urlText); if (responseCode >= 200 && responseCode < 300) { return true; } } catch ( Throwable e) { } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getBasedir,public File  (){ return basedir; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getBranch,public String  (){ return branch; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getBuildImageStream,public String  (){ return buildImageStream; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getBuildImageTag,public String  (){ return buildImageTag; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getBuildParameters,"protected Map<String String>  (){ Map<String String> answer=new HashMap<>(); if (projectConfig != null) { String flow=projectConfig.getPipeline(); if (flow != null && Strings.isNotBlank(gitUrl)) { answer.put(""GIT_URL"" gitUrl); } Map<String String> parameters=projectConfig.getBuildParameters(); if (parameters != null) { answer.putAll(parameters); } if (!answer.containsKey(""VERSION_PREFIX"")) { answer.put(""VERSION_PREFIX"" ""1.0""); } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getChatRoomLink,"protected String  (LetsChatClient letschat){ if (letschat != null) { try { String url=letschat.getAddress(); String slug=evaluateRoomExpression(letschatRoomExpression); if (Strings.isNotBlank(url) && Strings.isNotBlank(slug)) { RoomDTO room=letschat.getOrCreateRoom(slug); if (room != null) { String roomId=room.getId(); if (Strings.isNotBlank(roomId)) { return URLUtils.pathJoin(url ""/#!/room/"" + roomId); } } } } catch ( Exception e) { getLog().error(""Failed to get the link to the chat room: "" + e e); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getFabric8ConsoleNamespace,public String  (){ return fabric8ConsoleNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getFullName,public String  (){ return fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getGitRepoClient,public GitRepoClient  (){ if (gitRepoClient == null) { gitRepoClient=GitRepoKubernetes.createGitRepoClient(getKubernetes() username password); if (gitRepoClient != null) { if (Strings.isNullOrBlank(username)) { username=gitRepoClient.getUsername(); } if (Strings.isNullOrBlank(password)) { password=gitRepoClient.getPassword(); } } } return gitRepoClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getGitUrl,public String  (){ return gitUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getIssueTrackerLabel,public String  (){ return issueTrackerLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getIssueTrackerUrl,public String  (){ return issueTrackerUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getJenkinsJob,public String  (){ return jenkinsJob; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getJenkinsMonitorView,public String  (){ return jenkinsMonitorView; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getJenkinsNamespace,public String  (){ return jenkinsNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getJenkinsPipelineView,public String  (){ return jenkinsPipelineView; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getJenkinsServiceUrl,protected String  (boolean externalUrl){ return getServiceUrl(ServiceNames.JENKINS externalUrl namespace jenkinsNamespace); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getKubernetes,public KubernetesClient  (){ if (kubernetes == null) { Config config=new ConfigBuilder().withNamespace(namespace).build(); kubernetes=new DefaultKubernetesClient(config); } return kubernetes; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getLetschatRoomExpression,public String  (){ return letschatRoomExpression; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getLetschatRoomLinkLabel,public String  (){ return letschatRoomLinkLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getLocalGitUrl,protected String  (){ return localGitUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getLog,public Logger  (){ return log; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getNamespace,public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getPassword,public String  (){ return password; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getProjectConfig,public ProjectConfig  (){ return projectConfig; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getProjectName,public String  (){ return projectName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getProjectPageLink,"protected String  (TaigaClient taiga ProjectDTO taigaProject String projectRelativePage){ if (taiga != null && taigaProject != null) { try { String url=taiga.getAddress(); String slug=taigaProject.getSlug(); if (Strings.isNullOrBlank(slug)) { slug=taigaProjectSlug; } String userName=taiga.getUsername(); if (Strings.isNullOrBlank(slug)) { slug=userName + ""-"" + taigaProjectName; } if (Strings.isNotBlank(url) && Strings.isNotBlank(slug) && Strings.isNotBlank(projectRelativePage)) { return URLUtils.pathJoin(url ""/project/"" slug + ""/"" projectRelativePage); } } catch ( Exception e) { getLog().error(""Failed to get project page link for "" + projectRelativePage + "" : ""+ e e); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getReleasesLabel,public String  (){ return releasesLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getReleasesUrl,public String  (){ return releasesUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getRepoName,public String  (){ return repoName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getRepositoryBrowseLabel,public String  (){ return repositoryBrowseLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getRepositoryBrowseLink,public String  (){ return repositoryBrowseLink; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getSecret,public String  (){ return secret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getServiceUrl,"private String  (String serviceName boolean serviceExternal String... namespaces){ List<String> namespaceList=new ArrayList<>(Arrays.asList(namespaces)); String[] defaults={KubernetesHelper.defaultNamespace() ""default""}; for ( String defaultNamespace : defaults) { if (namespaceList.contains(defaultNamespace)) { namespaceList.add(defaultNamespace); } } for ( String namespace : namespaceList) { try { return KubernetesHelper.getServiceURL(getKubernetes() serviceName namespace ""http"" serviceExternal); } catch ( Exception e) { } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getTaigaProjectLinkLabel,public String  (){ return taigaProjectLinkLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getTaigaProjectLinkPage,public String  (){ return taigaProjectLinkPage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getTaigaProjectName,public String  (){ return taigaProjectName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getTaigaProjectSlug,public String  (){ return taigaProjectSlug; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getTaigaTeamLinkLabel,public String  (){ return taigaTeamLinkLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getTaigaTeamLinkPage,public String  (){ return taigaTeamLinkPage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getTeamLabel,public String  (){ return teamLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getTeamUrl,public String  (){ return teamUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,getUsername,public String  (){ return username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,isLetschatEnabled,public boolean  (){ return letschatEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,isRecreateMode,public boolean  (){ return recreateMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,isRegisterWebHooks,public boolean  (){ return registerWebHooks; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,isTaigaAutoCreate,public boolean  (){ return taigaAutoCreate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,isTaigaEnabled,public boolean  (){ return taigaEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,isTriggerJenkinsJob,public boolean  (){ return triggerJenkinsJob; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,isTryLoadConfigFileFromRemoteGit,public boolean  (){ return tryLoadConfigFileFromRemoteGit; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,loadConfigFile,"protected void  (){ if (projectConfig == null) { GitRepoClient gitRepo=getGitRepoClient(); boolean hasLocalConfig=false; if (basedir != null && basedir.isDirectory()) { projectConfig=ProjectConfigs.loadFromFolder(basedir); if (!projectConfig.isEmpty() || ProjectConfigs.hasConfigFile(basedir)) { hasLocalConfig=true; } } if (!hasLocalConfig && tryLoadConfigFileFromRemoteGit && Strings.isNotBlank(repoName)&& gitRepo != null) { try { InputStream input=gitRepo.getRawFile(username repoName branch ProjectConfigs.FILE_NAME); if (input != null) { try { getLog().info(""Parsing "" + ProjectConfigs.FILE_NAME + "" from the git repo ""+ repoName+ "" user ""+ username+ "" in branch ""+ branch); projectConfig=ProjectConfigs.parseProjectConfig(input); } catch ( IOException e) { getLog().warn(""Failed to parse "" + ProjectConfigs.FILE_NAME + "" from the repo ""+ repoName+ "" for user ""+ username+ "" branch: ""+ branch+ "". ""+ e e); } } } catch ( Exception e) { getLog().warn(""Failed to load "" + ProjectConfigs.FILE_NAME + "" from the repo ""+ repoName+ "" for user ""+ username+ "" branch: ""+ branch+ "". ""+ e e); } } } if (projectConfig != null) { String chatRoom=projectConfig.getChatRoom(); if (Strings.isNotBlank(chatRoom)) { getLog().info(""Found chat room: "" + chatRoom); letschatRoomExpression=chatRoom; } String issueProjectName=projectConfig.getIssueProjectName(); if (Strings.isNotBlank(issueProjectName)) { taigaProjectName=issueProjectName; } } else { getLog().info(""No fabric8.yml file found for "" + basedir); } if (Strings.isNullOrBlank(gitUrl)) { try { gitUrl=GitHelpers.extractGitUrl(basedir); } catch ( IOException e) { getLog().warn(""Could not load git URL from directory: "" + e e); } } if (Strings.isNullOrBlank(taigaProjectName)) { taigaProjectName=repoName; } if (Strings.isNullOrBlank(taigaProjectSlug)) { taigaProjectSlug=taigaProjectName; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,loadJenkinsBuildTemplate,"public static String  (Logger log){ String template=null; String templateName=""jenkinsBuildConfig.xml""; URL url=DevOpsConnector.class.getResource(templateName); if (url == null) { log.error(""Could not load "" + templateName + "" on the classpath!""); } else { try { template=IOHelpers.loadFully(url); } catch ( IOException e) { log.error(""Failed to load template "" + templateName + "" from ""+ url+ "". ""+ e e); } } return template; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,parseLastBuildJson,"protected JsonNode  (String urlText){ HttpURLConnection connection=null; String message=null; try { URL url=new URL(urlText); connection=(HttpURLConnection)url.openConnection(); connection.setRequestMethod(""GET""); connection.setRequestProperty(""Content-Type"" ""application/json""); int status=connection.getResponseCode(); message=connection.getResponseMessage(); getLog().info(""Got response code from URL: "" + url + "" ""+ status+ "" message: ""+ message); if (status != 200 || Strings.isNullOrBlank(message)) { getLog().debug(""Failed to load URL "" + url + "". Status: ""+ status+ "" message: ""+ message); } else { ObjectMapper objectMapper=new ObjectMapper(); return objectMapper.reader().readTree(message); } } catch ( Exception e) { getLog().debug(""Failed to load URL "" + urlText + "". ""+ e e); } finally { if (connection != null) { connection.disconnect(); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,parseXmlText,protected static Document  (String template) throws ParserConfigurationException  SAXException  IOException { DocumentBuilder documentBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder(); return documentBuilder.parse(new InputSource(new StringReader(template))); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,postJenkinsBuild,"protected void  (String jobName String xml boolean create){ String address=getServiceUrl(ServiceNames.JENKINS false namespace jenkinsNamespace); if (Strings.isNotBlank(address)) { String jobUrl=URLUtils.pathJoin(address ""/job"" jobName ""config.xml""); if (create && !existsXmlURL(jobUrl)) { jobUrl=URLUtils.pathJoin(address ""/createItem"") + ""?name="" + jobName; } getLog().info(""POSTING the jenkins job to: "" + jobUrl); getLog().debug(""Jenkins XML: "" + xml); HttpURLConnection connection=null; try { URL url=new URL(jobUrl); connection=(HttpURLConnection)url.openConnection(); connection.setRequestMethod(""POST""); connection.setRequestProperty(""Content-Type"" ""text/xml""); connection.setDoOutput(true); OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream()); out.write(xml); out.close(); int status=connection.getResponseCode(); String message=connection.getResponseMessage(); getLog().info(""Got response code from Jenkins: "" + status + "" message: ""+ message); if (status != 200) { getLog().error(""Failed to register job "" + jobName + "" on ""+ jobUrl+ "". Status: ""+ status+ "" message: ""+ message); } } catch ( Exception e) { getLog().error(""Failed to register jenkins on "" + jobUrl + "". ""+ e e); } finally { if (connection != null) { connection.disconnect(); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,putAnnotations,private void  (ObjectMeta metadata Map<String String> annotations){ Map<String String> current=metadata.getAnnotations(); if (current == null) { current=new HashMap<>(); } for ( Map.Entry<String String> entry : annotations.entrySet()) { String key=entry.getKey(); String value=entry.getValue(); current.put(key value); } metadata.setAnnotations(current); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,registerWebHooks,"public void  (){ if (Strings.isNotBlank(jenkinsJobName)) { jenkinsJobTemplate=createJenkinsJob(jenkinsJobName jenkinsJobUrl); getLog().info(""created jenkins job""); } if (Strings.isNotBlank(jenkinsJobUrl) && Strings.isNotBlank(jenkinsJobName)) { createJenkinsWebhook(jenkinsJobUrl); } if (taiga != null && taigaProject != null) { createTaigaWebhook(taiga taigaProject); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,removeBuildParameter,"public static String  (Logger log String template String parameterName){ try { Document doc=parseXmlText(template); Element rootElement=doc.getDocumentElement(); NodeList stringDefs=rootElement.getElementsByTagName(""hudson.model.StringParameterDefinition""); if (stringDefs != null) { for (int i=0  size=stringDefs.getLength(); i < size; i++) { Node item=stringDefs.item(i); if (item instanceof Element) { Element element=(Element)item; Element name=DomHelper.firstChild(element ""name""); if (name != null) { String textContent=name.getTextContent(); if (textContent != null) { if (parameterName.equals(textContent.trim())) { Node parameterDefinitions=item.getParentNode(); Node parametersDefinitionProperty=parameterDefinitions != null ? parameterDefinitions.getParentNode() : null; DomHelper.detach(item); if (DomHelper.firstChildElement(parameterDefinitions) == null) { DomHelper.detach(parameterDefinitions); } if (DomHelper.firstChildElement(parametersDefinitionProperty) == null) { DomHelper.detach(parametersDefinitionProperty); } return DomHelper.toXml(doc); } } } } } } } catch ( Exception e) { log.error(""Failed to remove the build parameter from the Jenkins XML. "" + e e); } return template; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,replaceExpression,"protected String  (String text String key String value){ if (Strings.isNotBlank(key) && Strings.isNotBlank(value)) { String replace=""${"" + key + ""}""; return text.replace(replace value); } else { return text; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setBasedir,public void  (File basedir){ this.basedir=basedir; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setBranch,public void  (String branch){ this.branch=branch; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setBuildImageStream,public void  (String buildImageStream){ this.buildImageStream=buildImageStream; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setBuildImageTag,public void  (String buildImageTag){ this.buildImageTag=buildImageTag; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setFabric8ConsoleNamespace,public void  (String fabric8ConsoleNamespace){ this.fabric8ConsoleNamespace=fabric8ConsoleNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setFullName,public void  (String fullName){ this.fullName=fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setGitRepoClient,public void  (GitRepoClient gitRepoClient){ this.gitRepoClient=gitRepoClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setGitUrl,public void  (String gitUrl){ this.gitUrl=gitUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setIssueTrackerLabel,public void  (String issueTrackerLabel){ this.issueTrackerLabel=issueTrackerLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setIssueTrackerUrl,public void  (String issueTrackerUrl){ this.issueTrackerUrl=issueTrackerUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setJenkinsJob,public void  (String jenkinsJob){ this.jenkinsJob=jenkinsJob; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setJenkinsMonitorView,public void  (String jenkinsMonitorView){ this.jenkinsMonitorView=jenkinsMonitorView; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setJenkinsNamespace,public void  (String jenkinsNamespace){ this.jenkinsNamespace=jenkinsNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setJenkinsPipelineView,public void  (String jenkinsPipelineView){ this.jenkinsPipelineView=jenkinsPipelineView; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setKubernetes,public void  (KubernetesClient kubernetes){ this.kubernetes=kubernetes; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setLetschatEnabled,public void  (boolean letschatEnabled){ this.letschatEnabled=letschatEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setLetschatRoomExpression,public void  (String letschatRoomExpression){ this.letschatRoomExpression=letschatRoomExpression; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setLetschatRoomLinkLabel,public void  (String letschatRoomLinkLabel){ this.letschatRoomLinkLabel=letschatRoomLinkLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setLocalGitUrl,public void  (String localGitUrl){ this.localGitUrl=localGitUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setLog,public void  (Logger log){ this.log=log; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setNamespace,public void  (String namespace){ this.namespace=namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setPassword,public void  (String password){ this.password=password; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setProjectConfig,public void  (ProjectConfig projectConfig){ this.projectConfig=projectConfig; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setProjectName,public void  (String projectName){ this.projectName=projectName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setRecreateMode,public void  (boolean recreateMode){ this.recreateMode=recreateMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setRegisterWebHooks,public void  (boolean registerWebHooks){ this.registerWebHooks=registerWebHooks; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setReleasesLabel,public void  (String releasesLabel){ this.releasesLabel=releasesLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setReleasesUrl,public void  (String releasesUrl){ this.releasesUrl=releasesUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setRepoName,public void  (String repoName){ this.repoName=repoName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setRepositoryBrowseLabel,public void  (String repositoryBrowseLabel){ this.repositoryBrowseLabel=repositoryBrowseLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setRepositoryBrowseLink,public void  (String repositoryBrowseLink){ this.repositoryBrowseLink=repositoryBrowseLink; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setSecret,public void  (String secret){ this.secret=secret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTaigaAutoCreate,public void  (boolean taigaAutoCreate){ this.taigaAutoCreate=taigaAutoCreate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTaigaEnabled,public void  (boolean taigaEnabled){ this.taigaEnabled=taigaEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTaigaProjectLinkLabel,public void  (String taigaProjectLinkLabel){ this.taigaProjectLinkLabel=taigaProjectLinkLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTaigaProjectLinkPage,public void  (String taigaProjectLinkPage){ this.taigaProjectLinkPage=taigaProjectLinkPage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTaigaProjectName,public void  (String taigaProjectName){ this.taigaProjectName=taigaProjectName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTaigaProjectSlug,public void  (String taigaProjectSlug){ this.taigaProjectSlug=taigaProjectSlug; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTaigaTeamLinkLabel,public void  (String taigaTeamLinkLabel){ this.taigaTeamLinkLabel=taigaTeamLinkLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTaigaTeamLinkPage,public void  (String taigaTeamLinkPage){ this.taigaTeamLinkPage=taigaTeamLinkPage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTeamLabel,public void  (String teamLabel){ this.teamLabel=teamLabel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTeamUrl,public void  (String teamUrl){ this.teamUrl=teamUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTriggerJenkinsJob,public void  (boolean triggerJenkinsJob){ this.triggerJenkinsJob=triggerJenkinsJob; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setTryLoadConfigFileFromRemoteGit,public void  (boolean tryLoadConfigFileFromRemoteGit){ this.tryLoadConfigFileFromRemoteGit=tryLoadConfigFileFromRemoteGit; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,setUsername,public void  (String username){ this.username=username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,toString,"@Override public String  (){ return ""DevOpsConnector{"" + ""gitUrl='"" + gitUrl + '\''+ ""  basedir=""+ basedir+ ""  username='""+ username+ '\''+ ""  branch='""+ branch+ '\''+ ""  repoName='""+ repoName+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,triggerJenkinsWebHook,"protected void  (String jobUrl String triggerUrl String secret){ String lastBuild=URLUtils.pathJoin(jobUrl ""/lastBuild/api/json""); JsonNode lastBuildJson=parseLastBuildJson(lastBuild); JsonNode building=null; if (lastBuildJson != null && lastBuildJson.isObject()) { building=lastBuildJson.get(""building""); if (building != null && building.isBoolean()) { if (building.booleanValue()) { getLog().info(""Build is already running so lets not trigger another one!""); return; } } } getLog().info(""Got last build JSON: "" + lastBuildJson + "" building: ""+ building); getLog().info(""Triggering Jenkins webhook: "" + triggerUrl); String json=""{}""; HttpURLConnection connection=null; try { URL url=new URL(triggerUrl); connection=(HttpURLConnection)url.openConnection(); connection.setRequestMethod(""POST""); connection.setRequestProperty(""Content-Type"" ""application/json""); connection.setDoOutput(true); OutputStreamWriter out=new OutputStreamWriter(connection.getOutputStream()); out.write(json); out.close(); int status=connection.getResponseCode(); String message=connection.getResponseMessage(); getLog().info(""Got response code from Jenkins: "" + status + "" message: ""+ message); if (status != 200) { getLog().error(""Failed to trigger job "" + triggerUrl + "". Status: ""+ status+ "" message: ""+ message); } } catch ( Exception e) { getLog().error(""Failed to trigger jenkins on "" + triggerUrl + "". ""+ e e); } finally { if (connection != null) { connection.disconnect(); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-devops-connector\src\main\java\io\fabric8\devops\connector\DevOpsConnector.java,updateEnvironmentConfigMap,"public void  (Map<String String> environments KubernetesClient kubernetes Map<String String> annotations String consoleUrl){ if (environments != null && !environments.isEmpty()) { String name=Environments.ENVIRONMENTS_CONFIG_MAP_NAME; getLog().info(""Ensuring ConfigMap "" + name + "" is populated with enviroments: ""+ environments); ConfigMap environmentsConfigMap=Environments.getOrCreateEnvironments(kubernetes); boolean updatedEnvConfigMap=false; for ( Map.Entry<String String> entry : environments.entrySet()) { String label=entry.getKey(); String value=entry.getValue(); String key=value; annotations.put(""fabric8.link.environment."" + key + ""/label"" label); if (Strings.isNotBlank(consoleUrl)) { String environmentLink=URLUtils.pathJoin(consoleUrl ""/kubernetes/pods?namespace="" + value); annotations.put(""fabric8.link.environment."" + key + ""/url"" environmentLink); addLink(label environmentLink); } String dataKey=label.toLowerCase().replace(' ' '-'); boolean updated=Environments.ensureEnvironmentAdded(environmentsConfigMap dataKey label value); updatedEnvConfigMap=updated || updatedEnvConfigMap; } if (updatedEnvConfigMap) { String ns=kubernetes.getNamespace(); getLog().info(""Updating ConfigMap "" + name + "" with data: ""+ environmentsConfigMap.getData()); if (KubernetesHelper.getResourceVersion(environmentsConfigMap) == null) { kubernetes.configMaps().inNamespace(ns).create(environmentsConfigMap); } else { try { kubernetes.configMaps().inNamespace(ns).withName(name).replace(environmentsConfigMap); } catch ( Exception e) { getLog().error(""Failed to update the Environment ConfigMap with data: "" + environments + "". Reason: ""+ e e); } } } else { getLog().info(""No need to update ConfigMap "" + name + "" as already has data: ""+ environmentsConfigMap.getData()); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,discoveryRequestReceived,public void  (Address sender String logical_name PhysicalAddress physical_addr){ super.discoveryRequestReceived(sender logical_name physical_addr); if (physical_addr != null) { if (!kubernetesHosts.contains(physical_addr)) dynamic_hosts.addIfAbsent(physical_addr); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,down,public Object  (Event evt){ Object retval=super.down(evt); switch (evt.getType()) { case Event.VIEW_CHANGE: for ( Address logical_addr : members) { PhysicalAddress physical_addr=(PhysicalAddress)down_prot.down(new Event(Event.GET_PHYSICAL_ADDRESS logical_addr)); if (physical_addr != null && !kubernetesHosts.contains(physical_addr)) { dynamic_hosts.addIfAbsent(physical_addr); } } break; case Event.SET_PHYSICAL_ADDRESS: Tuple<Address PhysicalAddress> tuple=(Tuple<Address PhysicalAddress>)evt.getArg(); PhysicalAddress physical_addr=tuple.getVal2(); if (physical_addr != null && !kubernetesHosts.contains(physical_addr)) dynamic_hosts.addIfAbsent(physical_addr); break; } return retval; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,filterPods,private static List<Pod>  (List<Pod> pods Filter<Pod> podFilter){ List<Pod> result=new ArrayList<>(); for ( Pod pod : pods) { if (podFilter.matches(pod)) { result.add(pod); } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,findKubernetesHosts,"public List<PhysicalAddress>  (){ List<PhysicalAddress> addresses=new ArrayList<>(); Map<String String> labels=Collections.singletonMap(Constants.JGROUPS_CLUSTER_NAME cluster_name); for ( Pod pod : client.pods().withLabels(labels).list().getItems()) { List<Container> containers=KubernetesHelper.getContainers(pod); for ( Container container : containers) { for ( ContainerPort port : container.getPorts()) { if (Constants.JGROUPS_TCP_PORT.equals(port.getName())) { try { String ip=pod.getStatus().getPodIP(); if (ip != null) { addresses.add(new IpAddress(ip port.getContainerPort())); } } catch ( Exception ex) { LOGGER.warn(""Failed to create Address {}."" pod.getStatus().getPodIP()); } } } } } return addresses; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,findMembers,@Override public void  (List<Address> members boolean initial_discovery Responses responses){ kubernetesHosts=findKubernetesHosts(); PhysicalAddress physical_addr=(PhysicalAddress)down(new Event(Event.GET_PHYSICAL_ADDRESS local_addr)); PingData data=new P
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,init,@Override public void  () throws Exception { super.init(); if (!Strings.isNullOrBlank(address)) { client=new DefaultKubernetesClient(new ConfigBuilder().withMasterUrl(address).build()); } else { client=new DefaultKubernetesClient(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-jgroups\src\main\java\io\fabric8\jgroups\KubernetesDiscovery.java,isDynamic,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,Check,public  (String name String longDescription){ this.name=name; this.longDescription=longDescription; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,getLongDescription,public String  (){ return longDescription; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,longDescription,public Check  (String longDescription){ this.longDescription=longDescription; return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,name,public Check  (String name){ this.name=name; return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,setLongDescription,public void  (String longDescription){ this.longDescription=longDescription; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\Check.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\AbstractChecker.java,AbstractChecker,public  (){ bundle=FrameworkUtil.getBundle(getClass()); bundleContext=bundle.getBundleContext(); systemBundle=bundleContext.getBundle(0); systemBundleContext=systemBundle.getBundleContext(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-blueprint\src\main\java\io\fabric8\karaf\blueprint\Fabric8PropertyEvaluator.java,Fabric8PropertyEvaluator,public  (){ resolver=new AtomicReference<>(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-blueprint\src\main\java\io\fabric8\karaf\blueprint\Fabric8PropertyEvaluator.java,bindResolver,protected void  (PlaceholderResolver resolver){ this.resolver.set(resolver); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-blueprint\src\main\java\io\fabric8\karaf\blueprint\Fabric8PropertyEvaluator.java,evaluate,@Override public String  (String key Dictionary<String String> dictionary){ PlaceholderResolver res=resolver.get(); String value=null; if (res != null) { value=res.resolve(key); } return value != null ? value : dictionary.get(key); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-blueprint\src\main\java\io\fabric8\karaf\blueprint\Fabric8PropertyEvaluator.java,unbindResolver,protected void  (PlaceholderResolver resolver){ this.resolver.compareAndSet(resolver null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BundleState.java,checkBundle,"@Override protected Check  (Bundle bundle){ if (!isActive(bundle) && !isFragment(bundle)) { return new Check(""bundle-state"" ""Bundle "" + bundle.getBundleId() + "" is not started""); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BlueprintState.java,BlueprintState,public  (){ bundleContext.registerService(BlueprintListener.class this null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BlueprintState.java,blueprintEvent,@Override public void  (BlueprintEvent event){ states.put(event.getBundle().getBundleId() event); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BlueprintState.java,checkBundle,"@Override public Check  (Bundle bundle){ BlueprintEvent event=states.get(bundle.getBundleId()); if (event != null && event.getType() != BlueprintEvent.CREATED && isActive(bundle)) { return new Check(""blueprint-state"" ""Blueprint bundle "" + bundle.getBundle"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BlueprintState.java,getState,"private String  (BlueprintEvent blueprintEvent){ switch (blueprintEvent.getType()) { case BlueprintEvent.CREATING: return ""CREATING""; case BlueprintEvent.CREATED: return ""CREATED""; case BlueprintEvent.DESTROYING: return ""DESTROYING""; case BlueprintEvent.DESTROYED: return ""DESTROYED""; case BlueprintEvent.FAILURE: return ""FAILURE""; case BlueprintEvent.GRACE_PERIOD: return ""GRACE_PERIOD""; case BlueprintEvent.WAITING: return ""WAITING""; default : return ""UNKNOWN""; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BootFeaturesState.java,bootFeaturesInstalled,"private boolean  (Bundle bundle){ if (bundle.getVersion().getMajor() < 4) { File file=bundle.getBundleContext().getDataFile(""FeaturesServiceState.properties""); if (!file.exists()) { return false; } Properties props=new Properties(); try (InputStream is=new FileInputStream(file)){ props.load(is); } catch ( IOException e) { return false; } return Boolean.parseBoolean((String)props.get(""bootFeaturesInstalled"")); } else { ServiceReference<?> ref=bundleContext.getServiceReference(""org.apache.karaf.features.BootFinished""); return ref != null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\BootFeaturesState.java,doCheck,"@Override protected List<Check>  (){ for ( Bundle bundle : systemBundleContext.getBundles()) { if (""org.apache.karaf.features.core"".equals(bundle.getSymbolicName())) { if (!bootFeaturesInstalled(bundle)) { return Collections.singletonList(new Check(""boot-"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\FrameworkState.java,doCheck,"@Override protected List<Check>  (){ int bsl=Integer.parseInt(System.getProperty(Constants.FRAMEWORK_BEGINNING_STARTLEVEL)); int sl=systemBundle.adapt(FrameworkStartLevel.class).getStartLevel(); if (sl < bsl) { return Collections.singletonList(new Check("""
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\CamelState.java,CamelState,public  (){ this.mbeanServer=new ServiceTracker<>(bundleContext MBeanServer.class null); this.mbeanServer.open(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\CamelState.java,doCheck,"@Override protected List<Check>  (){ MBeanServer server=this.mbeanServer.getService(); if (server != null) { try { List<Check> checks=new ArrayList<>(); Set<ObjectName> contexts=server.queryNames(new ObjectName(""org.apache.camel:type=context *"") null); fo"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\HealthCheckServlet.java,HealthCheckServlet,public  (CopyOnWriteArrayList<HealthChecker> checkers){ this.checkers=checkers; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\HealthCheckServlet.java,doGet,@Override protected void  (HttpServletRequest req HttpServletResponse resp) throws ServletException  IOException { List<Check> checks=new ArrayList<>(); for ( HealthChecker checker : checkers) { checks.addAll(checker.getFailingHealthChecks()); } if (check
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,ChecksService,public  (){ bind(new FrameworkState()); bind(new BundleState()); bind(new BootFeaturesState()); try { bind(new BlueprintState()); } catch ( Throwable t) { } try { bind(new ScrState()); } catch ( Throwable t) { } try { bind(new WarState()); } catch ( Throwable t) { } bind(new CamelState()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,activate,@Activate void  (Map<String ?> configuration) throws ServletException  NamespaceException { httpService.registerServlet(readinessCheckPath new ReadinessCheckServlet(readinessCheckers) null null); httpService.registerServlet(healthCheckPath new HealthCheck
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,bind,private void  (Object checker){ if (checker instanceof ReadinessChecker) { bindReadinessCheckers((ReadinessChecker)checker); } if (checker instanceof HealthChecker) { bindHealthCheckers((HealthChecker)checker); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,bindHealthCheckers,void  (HealthChecker value){ healthCheckers.add(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,bindHttpService,void  (HttpService httpService){ this.httpService=httpService; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,bindReadinessCheckers,void  (ReadinessChecker value){ readinessCheckers.add(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,deactivate,@Deactivate void  (){ httpService.unregister(readinessCheckPath); httpService.unregister(healthCheckPath); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,unbindHealthCheckers,void  (HealthChecker value){ healthCheckers.remove(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,unbindHttpService,void  (HttpService service){ this.httpService=null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ChecksService.java,unbindReadinessCheckers,void  (ReadinessChecker value){ readinessCheckers.remove(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ScrState.java,ScrState,public  (){ super(); tracker=new ServiceTracker<>(bundleContext ScrService.class null); tracker.open(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ScrState.java,checkBundle,"@Override protected Check  (Bundle bundle){ if (bundle.getHeaders().get(""Service-Component"") == null) { return null; } ScrService svc=tracker.getService(); if (svc == null) { return new Check(""scr-state"" ""No ScrService found""); } Component[] components=sv"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ScrState.java,getState,"private String  (int state){ switch (state) { case (Component.STATE_DISABLED): return ""disabled""; case (Component.STATE_ENABLING): return ""enabling""; case (Component.STATE_ENABLED): return ""enabled""; case (Component.STATE_UNSATISFIED): return ""unsatisfied""; case (Component.STATE_ACTIVATING): return ""activating""; case (Component.STATE_ACTIVE): return ""active""; case (Component.STATE_REGISTERED): return ""registered""; case (Component.STATE_FACTORY): return ""factory""; case (Component.STATE_DEACTIVATING): return ""deactivating""; case (Component.STATE_DISABLING): return ""disabling""; case (Component.STATE_DISPOSING): return ""disposing""; case (Component.STATE_DISPOSED): return ""disposed""; default : return ""unknown: "" + state; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ReadinessCheckServlet.java,ReadinessCheckServlet,public  (CopyOnWriteArrayList<ReadinessChecker> readinessCheckers){ this.checkers=readinessCheckers; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\ReadinessCheckServlet.java,doGet,@Override protected void  (HttpServletRequest req HttpServletResponse resp) throws ServletException  IOException { List<Check> checks=new ArrayList<>(); for ( ReadinessChecker checker : checkers) { checks.addAll(checker.getFailingReadinessChecks()); } if 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\WarState.java,WarState,public  (){ bundleContext.registerService(WebListener.class this null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\WarState.java,checkBundle,"@Override public Check  (Bundle bundle){ WebEvent event=states.get(bundle.getBundleId()); if (event != null && event.getType() != WebEvent.DEPLOYED && isActive(bundle)) { return new Check(""war-state"" ""War bundle "" + bundle.getBundleId() + "" is in state ""+"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\WarState.java,getState,"private String  (WebEvent webEvent){ switch (webEvent.getType()) { case WebEvent.DEPLOYED: return ""DEPLOYED""; case WebEvent.DEPLOYING: return ""DEPLOYING""; case WebEvent.FAILED: return ""FAILED""; case WebEvent.UNDEPLOYED: return ""UNDEPLOYED""; case WebEvent.UNDEPLOYING: return ""UNDEPLOYING""; case WebEvent.WAITING: return ""WAITING""; default : return ""UNKNOWN""; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-checks\src\main\java\io\fabric8\karaf\checks\internal\WarState.java,webEvent,@Override public void  (WebEvent event){ states.put(event.getBundle().getBundleId() event); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,KubernetesConfigAdminBridge,public  (){ this.enabled=FABRIC8_CM_BRIDGE_ENABLED_DEFAULT; this.lock=new Object(); this.configAdmin=new AtomicReference<>(); this.kubernetesClient=new AtomicReference<>(); this.configMerge=FABRIC8_CONFIG_MERGE_DEFAULT; this.configMeta=FABRIC8_CONFIG_META_DEFAULT; this.configWatch=FABRIC8_CONFIG_WATCH_DEFAULT; this.watch=null; this.pidLabel=FABRIC8_PID_LABEL_DEFAULT; this.filters=null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,activate,@Activate void  (){ enabled=getSystemPropertyOrEnvVar(FABRIC8_CM_BRIDGE_ENABLED enabled); pidLabel=getSystemPropertyOrEnvVar(FABRIC8_PID_LABEL pidLabel); configMerge=getSystemPropertyOrEnvVar(FABRIC8_CONFIG_MERGE configMerge); configMeta=getSystemProperty
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,bindConfigAdmin,protected void  (ConfigurationAdmin service){ this.configAdmin.set(service); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,bindKubernetesClient,protected void  (KubernetesClient service){ this.kubernetesClient.set(service); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,deactivate,@Deactivate void  (){ if (watch != null) { watch.close(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,deleteConfig,"private void  (ConfigMap map){ String pid=map.getMetadata().getLabels().get(pidLabel); String[] p=parsePid(pid); try { Map<String String> configMapData=map.getData(); Configuration config=getConfiguration(configAdmin.get() pid p[0] p[1]); if (configMapData != null) { boolean merge=configMapData.containsKey(FABRIC8_CONFIG_MERGE) ? Boolean.valueOf(configMapData.get(FABRIC8_CONFIG_MERGE)) : configMerge; if (!merge) { LOGGER.debug(""Delete configuration {}"" config.getPid()); config.delete(); } } } catch ( Exception e) { LOGGER.warn("""" e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,eventReceived,@Override public void  (Action action ConfigMap map){ synchronized (lock) { switch (action) { case ADDED: case MODIFIED: updateConfig(map); break; case DELETED: case ERROR: deleteConfig(map); break; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,getConfigMapList,private ConfigMapList  (){ KubernetesClient client=kubernetesClient.get(); if (client != null) { FilterWatchListDeletable<ConfigMap ConfigMapList Boolean Watch Watcher<ConfigMap>> configMapsSelector=client.configMaps().withLabel(pidLabel); for ( String key : filters.keySet()) { configMapsSelector.withLabelIn(key filters.get(key).toArray(new String[filters.get(key).size()])); } return configMapsSelector.list(); } else { return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,getConfiguration,"private Configuration  (ConfigurationAdmin configAdmin String fabric8pid String pid String factoryPid) throws Exception { String filter=""("" + FABRIC8_PID + ""=""+ fabric8pid+ "")""; Configuration[] oldConfiguration=configAdmin.listConfigurations(filter); if (oldConfiguration != null && oldConfiguration.length > 0) { return oldConfiguration[0]; } else { Configuration newConfiguration; if (factoryPid != null) { newConfiguration=configAdmin.createFactoryConfiguration(pid null); } else { newConfiguration=configAdmin.getConfiguration(pid null); newConfiguration.setBundleLocation(""?""); } return newConfiguration; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,parsePid,private String[]  (String pid){ String factoryPid=null; int n=pid.indexOf('-'); if (n > 0) { factoryPid=pid.substring(n + 1); pid=pid.substring(0 n); } return new String[]{pid factoryPid}; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,shouldUpdate,private boolean  (Hashtable<String Object> configAdmCfg Hashtable<String Object> configMapCfg){ if (configAdmCfg == null) { return true; } for ( Map.Entry<String Object> entry : configMapCfg.entrySet()) { if (FABRIC8_META_KEYS.contains(entry.getKey())) { continue; } Object value=configAdmCfg.get(entry.getKey()); if (value == null) { return true; } if (!value.equals(entry.getValue())) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,unbindConfigAdmin,protected void  (ConfigurationAdmin service){ this.configAdmin.compareAndSet(service null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,unbindKubernetesClient,protected void  (KubernetesClient service){ this.kubernetesClient.compareAndSet(service null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,updateConfig,"private void  (ConfigMap map){ Long ver=Long.parseLong(map.getMetadata().getResourceVersion()); String pid=map.getMetadata().getLabels().get(pidLabel); String[] p=parsePid(pid); try { final Configuration config=getConfiguration(configAdmin.get() pid p[0] p[1]); final Map<String String> configMapData=map.getData(); if (configMapData == null) { LOGGER.debug(""Ignoring configuration pid={}  (empty)"" config.getPid()); return; } final Dictionary<String Object> props=config.getProperties(); final Hashtable<String Object> configAdmCfg=props != null ? new Hashtable<String Object>() : null; Hashtable<String Object> configMapCfg=new Hashtable<>(); String pidCfg=configMapData.get(FABRIC8_CONFIG_PID_CFG); if (pidCfg == null) { pidCfg=pid + "".cfg""; } String cfgString=configMapData.get(pidCfg); if (Utils.isNotNullOrEmpty(cfgString)) { java.util.Properties cfg=new java.util.Properties(); cfg.load(new StringReader(cfgString)); for ( Map.Entry<Object Object> entry : cfg.entrySet()) { configMapCfg.put((String)entry.getKey() entry.getValue()); } } else { for ( Map.Entry<String String> entry : map.getData().entrySet()) { configMapCfg.put(entry.getKey() entry.getValue()); } } boolean meta=configMapData.containsKey(FABRIC8_CONFIG_META) ? Boolean.valueOf(configMapData.get(FABRIC8_CONFIG_META)) : configMeta; boolean merge=configMapData.containsKey(FABRIC8_CONFIG_MERGE) ? Boolean.valueOf(configMapData.get(FABRIC8_CONFIG_MERGE)) : configMerge; if (configAdmCfg != null) { Long oldVer=(Long)props.get(FABRIC8_K8S_META_RESOURCE_VERSION); if (oldVer != null && (oldVer >= ver)) { LOGGER.debug(""Ignoring configuration pid={}  oldVersion={} newVersion={} (no changes)"" config.getPid() oldVer ver); return; } for (Enumeration<String> e=props.keys(); e.hasMoreElements(); ) { String key=e.nextElement(); Object val=props.get(key); configAdmCfg.put(key val); } } if (shouldUpdate(configAdmCfg configMapCfg)) { LOGGER.debug(""Updating configuration pid={}"" config.getPid()); if (meta) { configMapCfg.put(FABRIC8_PID pid); configMapCfg.put(FABRIC8_K8S_META_RESOURCE_VERSION ver); configMapCfg.put(FABRIC8_K8S_META_NAME map.getMetadata().getName()); configMapCfg.put(FABRIC8_K8S_META_NAMESPACE map.getMetadata().getNamespace()); } if (merge && configAdmCfg != null) { for ( Map.Entry<String Object> entry : configMapCfg.entrySet()) { if (!CM_META_KEYS.contains(entry.getKey())) { configAdmCfg.put(entry.getKey() entry.getValue()); } } configMapCfg=configAdmCfg; } config.update(configMapCfg); } else { LOGGER.debug(""Ignoring configuration pid={} (no changes)"" config.getPid()); } } catch ( Exception e) { LOGGER.warn("""" e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridge.java,watchConfigMapList,"private void  (){ if (configWatch) { KubernetesClient client=kubernetesClient.get(); if (client != null) { FilterWatchListDeletable<ConfigMap ConfigMapList Boolean Watch Watcher<ConfigMap>> configMapsSelector=client.configMaps().withLabel(pidLabel); for ( String key : filters.keySet()) { configMapsSelector.withLabelIn(key filters.get(key).toArray(new String[filters.get(key).size()])); } watch=configMapsSelector.watch(this); } else { throw new RuntimeException(""KubernetesClient not set""); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\test\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridgeTest.java,testAand,"@Test public void  (){ System.setProperty(""fabric8.pid.filters"" ""appName=A database.name=my.oracle.datasource""); KubernetesMockServer plainServer=new KubernetesMockServer(false); plainServer.expect().get().withPath(""/api/v1/namespaces/test/configmaps?labe"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\test\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridgeTest.java,testAndOr,"@Test public void  (){ System.setProperty(""fabric8.pid.filters"" ""appName=A;B database.name=my.oracle.datasource""); KubernetesMockServer plainServer=new KubernetesMockServer(false); plainServer.expect().get().withPath(""/api/v1/namespaces/test/configmaps?la"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\test\java\io\fabric8\karaf\cm\KubernetesConfigAdminBridgeTest.java,testOr,"@Test public void  (){ System.setProperty(""fabric8.pid.filters"" ""appName=A;B""); KubernetesMockServer plainServer=new KubernetesMockServer(false); plainServer.expect().get().withPath(""/api/v1/namespaces/test/configmaps?labelSelector=karaf.pid appName%20in%"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,PlaceholderResolverConfigurationPlugin,public  (){ this.resolver=new AtomicReference<>(); this.enabled=FABRIC8_CONFIG_PLUGIN_ENABLED_DEFAULT; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,activate,"@Activate void  (){ enabled=getSystemPropertyOrEnvVar(FABRIC8_CONFIG_PLUGIN_ENABLED enabled); LOGGER.debug(""Configuration update is {}"" enabled ? ""ENABLED"" : ""DISABLED""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,bindResolver,protected void  (PlaceholderResolver resolver){ this.resolver.set(resolver); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,modifyConfiguration,@Override public void  (ServiceReference<?> reference Dictionary<String Object> dictionary){ PlaceholderResolver res=resolver.get(); if (enabled && res != null) { res.replaceAll(dictionary); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-cm\src\main\java\io\fabric8\karaf\cm\PlaceholderResolverConfigurationPlugin.java,unbindResolver,protected void  (PlaceholderResolver resolver){ this.resolver.compareAndSet(resolver null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,KubernetesPropertiesFunction,"public  (){ this.kubernetesClient=new AtomicReference<>(); this.kubernetesResources=new HashMap<>(); this.kubernetesResources.put(""secret"" KubernetesSupport.secretsResource()); this.kubernetesResources.put(""map"" KubernetesSupport.configMapResource()); this.kubernetesResources.put(""configmap"" KubernetesSupport.configMapResource()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,apply,"@Override public String  (String remainder){ String value=null; final String[] items=remainder.split("":""); final KubernetesClient client=kubernetesClient.get(); if (client != null && items.length == 2) { String[] tokens=items[1].split(""/""); if (tokens.len"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,bindKubernetesClient,protected void  (KubernetesClient kubernetesClient){ this.kubernetesClient.set(kubernetesClient); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,getName,@Override public String  (){ return FUNCTION_NAME; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesPropertiesFunction.java,unbindKubernetesClient,protected void  (KubernetesClient kubernetesClient){ this.kubernetesClient.compareAndSet(kubernetesClient null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\EnvPropertiesFunction.java,apply,"@Override public String  (String remainder){ String key=remainder; String defaultValue=null; if (remainder.contains("":"")) { key=Support.before(remainder "":""); defaultValue=Support.after(remainder "":""); } String value=System.getenv(key); return value != nu"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\EnvPropertiesFunction.java,getName,@Override public String  (){ return FUNCTION_NAME; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,SecretsResource,"public  (){ this.useApi=Utils.getSystemPropertyOrEnvVar(FABRIC8_K8S_SECRET_API_ENABLED false); this.paths=new ArrayList<>(); String secretPaths=Utils.getSystemPropertyOrEnvVar(FABRIC8_K8S_SECRET_PATHS); if (Utils.isNotNullOrEmpty(secretPaths)) { for ( String path : secretPaths.split("" "")) { this.paths.add(Paths.get(path)); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,configMapResource,public static Resource  (){ return new ConfigMapResource(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,get,@Override public String  (KubernetesClient client String name String key){ String value=null; for ( Path path : this.paths) { Path secretPath=path.resolve(name).resolve(key); if (Files.exists(secretPath) && Files.isRegularFile(secretPath)) { try { value=n
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,getData,@Override Map<String String>  (KubernetesClient client String name){ ConfigMap resource=client.configMaps().withName(name).get(); return (resource != null) ? resource.getData() : null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\KubernetesSupport.java,secretsResource,public static Resource  (){ return new SecretsResource(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServiceHostPropertiesFunction.java,apply,"@Override public String  (String remainder){ String key=remainder; String defaultValue=null; if (remainder.contains("":"")) { key=Support.before(remainder "":""); defaultValue=Support.after(remainder "":""); } if (key != null) { key=key.toUpperCase(Locale.ENGLI"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServiceHostPropertiesFunction.java,getName,@Override public String  (){ return FUNCTION_NAME; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\SysPropertiesFunction.java,apply,"@Override public String  (String remainder){ String key=remainder; String defaultValue=null; if (remainder.contains("":"")) { key=Support.before(remainder "":""); defaultValue=Support.after(remainder "":""); } String value=System.getProperty(key); return value "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\SysPropertiesFunction.java,getName,@Override public String  (){ return FUNCTION_NAME; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServicePropertiesFunction.java,apply,"@Override public String  (String remainder){ String key=remainder; String defaultValue=null; if (remainder.contains("":"")) { key=Support.before(remainder "":""); defaultValue=Support.after(remainder "":""); } if (key != null) { key=key.toUpperCase(Locale.ENGLI"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServicePropertiesFunction.java,getName,@Override public String  (){ return FUNCTION_NAME; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServicePortPropertiesFunction.java,apply,"@Override public String  (String remainder){ String key=remainder; String defaultValue=null; if (remainder.contains("":"")) { key=Support.before(remainder "":""); defaultValue=Support.after(remainder "":""); } if (key != null) { key=key.toUpperCase(Locale.ENGLI"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\function\ServicePortPropertiesFunction.java,getName,@Override public String  (){ return FUNCTION_NAME; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\Support.java,acquireStringBuilder,public static StringBuilder  (String value){ StringBuilder sb=acquireStringBuilder(); sb.setLength(0); sb.append(value); return sb; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\Support.java,after,public static String  (String text String after){ if (!text.contains(after)) { return null; } return text.substring(text.indexOf(after) + after.length()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\Support.java,before,public static String  (String text String before){ if (!text.contains(before)) { return null; } return text.substring(0 text.indexOf(before)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\Support.java,createStrSubstitutor,public static StrSubstitutor  (String prefix String suffix StrLookup<String> lookup){ StrSubstitutor substitutor=new StrSubstitutor(); substitutor.setEnableSubstitutionInVariables(true); substitutor.setVariablePrefix(prefix); substitutor.setVariableSuffix(suffix); substitutor.setVariableResolver(lookup); return substitutor; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,PlaceholderResolverImpl,public  (){ this.functions=new CopyOnWriteArrayList<>(); this.substitutor=Support.createStrSubstitutor(getSystemPropertyOrEnvVar(PLACEHOLDER_PREFIX DEFAULT_PLACEHOLDER_PREFIX) getSystemPropertyOrEnvVar(PLACEHOLDER_SUFFIX DEFAULT_PLACEHOLDER_SUFFIX) new StrLookup<String>(){ @Override public String lookup( String value){ return resolve(value); } } ); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,bindFunction,protected void  (PropertiesFunction function){ functions.addIfAbsent(function); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,findFunction,private PropertiesFunction  (String name){ for ( PropertiesFunction fun : functions) { if (name.equals(fun.getName())) { return fun; } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,lookup,@Override public String  (String value){ return resolve(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,replace,@Override public String  (String value){ return substitutor.replace(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,replaceAll,@Override public boolean  (Map<String Object> dictionary){ int replacedCount=0; for ( String key : dictionary.keySet()) { final Object val=dictionary.get(key); if (val instanceof String) { StringBuilder sb=Support.acquireStringBuilder((String)val); if (su
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,replaceIn,@Override public boolean  (StringBuilder value){ return substitutor.replaceIn(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,resolve,"@Override public String  (String value){ String[] resolvers=Support.before(value "":"").split(""\\+""); String remainder=Support.after(value "":""); for ( String resolver : resolvers) { PropertiesFunction function=findFunction(resolver); if (function == null) {"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\main\java\io\fabric8\karaf\core\properties\PlaceholderResolverImpl.java,unbindFunction,protected void  (PropertiesFunction function){ functions.remove(function); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\FeatureInstallationTest.java,config,"@Configuration public Option[]  () throws URISyntaxException  MalformedURLException { return new Option[]{karafDistributionConfiguration().frameworkUrl(getKarafMinimalUrl()).name(""Apache Karaf"").unpackDirectory(new File(""target/exam"")) configureSecurity()"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\FeatureInstallationTest.java,testFabric8KarafBlueprint,"@Test public void  () throws Exception { featuresService.addRepository(getFeaturesFile().toURI()); featuresService.installFeature(""fabric8-karaf-blueprint""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\FeatureInstallationTest.java,testFabric8KarafChecks,"@Test public void  () throws Exception { featuresService.addRepository(getFeaturesFile().toURI()); featuresService.installFeature(""fabric8-karaf-checks""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\FeatureInstallationTest.java,testFabric8KarafCm,"@Ignore @Test public void  () throws Exception { featuresService.addRepository(getFeaturesFile().toURI()); featuresService.installFeature(""fabric8-karaf-cm""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,Map1,"public  (){ map=new HashMap<>(); map.put(""prop1"" ""hello1""); map.put(""prop2"" ""world1""); map.put(""prop3"" ""10""); map.put(""prop4"" ""20""); map.put(""prop5"" ""nested""); map.put(""prop6"" ""$[map1:prop6]""); map.put(""prop7"" ""$[map1:prop8]""); map.put(""prop8"" ""$[map1:prop7]""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,Map2,"public  (){ map=new HashMap<>(); map.put(""prop1"" ""hello2""); map.put(""prop2"" ""world2""); map.put(""prop-nested"" ""hello nested world!""); map.put(""prop-recursive-1"" ""$[prop-recursive-2]""); map.put(""prop-recursive-2"" ""$[prop-recursive-3]""); map.put(""prop-recursive-3"" ""recursive-3""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,apply,@Override public String  (String remainder){ return map.get(remainder); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,getName,"public String  (){ return ""map2""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,setUp,@Before public void  (){ resolver=new PlaceholderResolverImpl(); resolver.bindFunction(new Map1()); resolver.bindFunction(new Map2()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,tesInfiniteLoopPingPong,"@Test(expected=IllegalStateException.class) public void  (){ resolver.replace(""$[map1:prop7]""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,tesInfiniteLoopSimple,"@Test(expected=IllegalStateException.class) public void  (){ resolver.replace(""$[map1:prop6]""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,testNoReplace,"@Test public void  (){ Assert.assertEquals(""$[map1:noReplace]"" resolver.replace(""$[map1:noReplace]"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,testReplace,"@Test public void  (){ Assert.assertEquals(""hello1 world2"" resolver.replace(""$[map1:prop1] $[map2:prop2]"")); Assert.assertEquals(""hello2 world1"" resolver.replace(""$[map2:prop1] $[map1:prop2]"")); Assert.assertEquals(""hello nested world!"" resolver.replace("""
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,testReplaceAll,"@Test public void  (){ Map<String Object> map=new HashMap<>(); map.put(""key1"" ""$[map1:prop1] $[map2:prop2]""); map.put(""key2"" ""$[map2:prop1] $[map1:prop2]""); map.put(""key3"" ""$[map2:prop-$[map1:prop5]]""); map.put(""key4"" 1); map.put(""key5"" ""no replace""); Ass"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-core\src\test\java\io\fabric8\karaf\core\properties\PlaceholderResolverTest.java,testResolve,"@Test public void  (){ Assert.assertEquals(""hello1"" resolver.resolve(""map1:prop1"")); Assert.assertEquals(""hello2"" resolver.resolve(""map2:prop1"")); Assert.assertNull(resolver.resolve(""map1:noReplace"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\ServiceTest.java,config,"@Configuration public Option[]  () throws URISyntaxException  MalformedURLException { return new Option[]{karafDistributionConfiguration().frameworkUrl(getKarafMinimalUrl()).name(""Apache Karaf"").unpackDirectory(new File(""target/exam"")) configureSecurity()"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\ServiceTest.java,probeConfiguration,"@ProbeBuilder public TestProbeBuilder  (TestProbeBuilder probe){ probe.setHeader(Constants.DYNAMICIMPORT_PACKAGE ""* org.apache.felix.service.*;status=provisional""); return probe; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\ServiceTest.java,testServiceAvailability,@Test public void  () throws Exception { Assert.assertNotNull(placeholderResolver); Assert.assertTrue(placeholderResolver instanceof PlaceholderResolverImpl); Assert.assertNotNull(propertyEvaluator); Assert.assertTrue(propertyEvaluator instanceof Fabric8P
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\TestBase.java,getFeaturesFile,static File  () throws URISyntaxException { String featuresXml=System.getProperty(FEATURES_XML); Assert.assertNotNull(featuresXml); File featuresFile=new File(featuresXml); Assert.assertNotNull(featuresFile.exists()); return featuresFile; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\TestBase.java,getFeaturesUrl,static URL  () throws URISyntaxException  MalformedURLException { return getFeaturesFile().toURI().toURL(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-karaf\fabric8-karaf-itests\src\test\java\io\fabric8\karaf\itests\TestBase.java,getKarafMinimalUrl,"static MavenArtifactUrlReference  (){ return CoreOptions.maven().groupId(""org.apache.karaf"").artifactId(""apache-karaf-minimal"").versionAsInProject().type(""tar.gz""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,merge,public static JsonNode  (JsonNode target JsonNode source){ if (target == null) { return source; } if (target.isArray() && source.isArray()) { ArrayNode copy=(ArrayNode)target.deepCopy(); for ( JsonNode n : source) { if ((n.isTextual() && DELETED.equals(n.textValue()))) { copy=JsonNodeFactory.instance.arrayNode(); } else { copy.add(n); } } return copy; } else if (target.isObject() && source.isObject()) { ObjectNode copy=(ObjectNode)target.deepCopy(); if (source.get(DELETED) != null) { copy=JsonNodeFactory.instance.objectNode(); } else { Iterator<String> iterator=source.fieldNames(); while (iterator.hasNext()) { String key=iterator.next(); if (!DELETED.equals(key)) { JsonNode value=source.get(key); if ((value.isTextual() && DELETED.equals(value.textValue()))) { copy.remove(key); } else { JsonNode original=target.get(key); value=merge(original value); copy.set(key value); } } } } return copy; } else { return source; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,readJsonFile,public static JsonNode  (Path path) throws IOException { try (InputStream is=Files.newInputStream(path)){ return JSON_MAPPER.readTree(is); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,readPropertiesFile,public static Properties  (Path path) throws IOException { Properties properties=new Properties(); try (InputStream is=Files.newInputStream(path)){ properties.load(is); } return properties; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,readYamlFile,public static JsonNode  (Path path) throws IOException { try (InputStream is=Files.newInputStream(path)){ return YAML_MAPPER.readTree(is); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,recusivelyCollectFileListing,public static void  (ArrayList<String> rc Path base Path directory) throws IOException { try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(directory)){ for ( Path path : directoryStream) { if (Files.isDirectory(path)) { recusivelyCollectFileListing(rc base path); } else { rc.add(base.relativize(path).toString()); } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,toBytes,public static byte[]  (Properties properties) throws IOException { try (ByteArrayOutputStream os=new ByteArrayOutputStream()){ properties.store(os null); return os.toByteArray(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,toJsonBytes,public static byte[]  (JsonNode yaml) throws IOException { return JSON_MAPPER.writeValueAsBytes(yaml); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\ProfilesHelpers.java,toYamlBytes,public static byte[]  (JsonNode yaml) throws IOException { return YAML_MAPPER.writeValueAsBytes(yaml); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,Profiles,public  (Path repository){ this.repository=repository; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,collectProfileNames,"private void  (ArrayList<String> target String profileName) throws IOException { if (target.contains(profileName)) { return; } Path path=getProfilePath(profileName); if (!Files.exists(path)) { throw new IOException(""Profile directory does not exists: "" + path); } Properties props=new Properties(); Path agentProperties=path.resolve(""io.fabric8.agent.properties""); if (Files.exists(agentProperties)) { props=readPropertiesFile(agentProperties); } String parents=props.getProperty(""attribute.parents"" ""default"".equals(profileName) ? """" : ""default""); for ( String parent : parents.split("" "")) { parent=parent.trim(); if (!parent.isEmpty()) { collectProfileNames(target parent); } } target.add(profileName); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,getProfilePath,"private Path  (String profileName){ return repository.resolve(profileName.replaceAll(""-"" ""/"") + "".profile""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,listFiles,private ArrayList<String>  (String profileName) throws IOException { ArrayList<String> rc=new ArrayList<>(); Path dir=getProfilePath(profileName); recusivelyCollectFileListing(rc dir dir); return rc; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,materialize,"public void  (Path target String... profileNames) throws IOException { ArrayList<String> profileSearchOrder=new ArrayList<>(); for ( String profileName : profileNames) { collectProfileNames(profileSearchOrder profileName); } HashSet<String> files=new HashSet<>(); for ( String profileName : profileSearchOrder) { files.addAll(listFiles(profileName)); } System.out.println(""profile search order"" + profileSearchOrder); System.out.println(""files: "" + files); for ( String file : files) { try (InputStream is=materializeFile(file profileSearchOrder)){ Files.copy(is target.resolve(file) StandardCopyOption.REPLACE_EXISTING); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\main\java\io\fabric8\profiles\Profiles.java,materializeFile,"private InputStream  (String fileName ArrayList<String> profileSearchOrder) throws IOException { if (fileName.endsWith("".properties"")) { Properties properties=new Properties(); for ( String profile : profileSearchOrder) { Path path=getProfilePath(profile).resolve(fileName); if (Files.exists(path)) { ProfilesHelpers.merge(properties readPropertiesFile(path)); } } return new ByteArrayInputStream(toBytes(properties)); } else if (fileName.endsWith("".json"")) { JsonNode node=null; for ( String profile : profileSearchOrder) { Path path=getProfilePath(profile).resolve(fileName); if (Files.exists(path)) { node=ProfilesHelpers.merge(node readJsonFile(path)); } } return new ByteArrayInputStream(toJsonBytes(node)); } else if (fileName.endsWith("".yml"")) { JsonNode node=null; for ( String profile : profileSearchOrder) { Path path=getProfilePath(profile).resolve(fileName); if (Files.exists(path)) { node=ProfilesHelpers.merge(node readYamlFile(path)); } } return new ByteArrayInputStream(toYamlBytes(node)); } else { Path last=null; for ( String profile : profileSearchOrder) { Path path=getProfilePath(profile).resolve(fileName); if (Files.exists(path)) { last=path; } } return Files.newInputStream(last); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\test\java\io\fabric8\profiles\TestHelpers.java,copy,public static void  (InputStream is OutputStream os) throws IOException { byte data[]=new byte[1024 * 4]; int c; while ((c=is.read(data)) >= 0) { os.write(data 0 c); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\test\java\io\fabric8\profiles\TestHelpers.java,readTextFile,public static String  (Path p) throws IOException { try (InputStream is=Files.newInputStream(p)){ try (ByteArrayOutputStream os=new ByteArrayOutputStream()){ copy(is os); return new String(os.toByteArray() StandardCharsets.UTF_8); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\test\java\io\fabric8\profiles\TestHelpers.java,recusiveDeleteIfExists,static void  (Path p) throws IOException { if (Files.isDirectory(p)) { try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(p)){ for ( Path path : directoryStream) { recusiveDeleteIfExists(path); } } } Files.deleteIfExists(p); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-profiles\src\test\java\io\fabric8\profiles\ProfilesTest.java,basicTest,"@Test public void  () throws IOException { Path target=PROJECT_BASE_DIR.resolve(""target/test-data/materialize1""); recusiveDeleteIfExists(target); Files.createDirectories(target); Path repository=PROJECT_BASE_DIR.resolve(""src/test/profiles""); new Profiles("
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\IniFileUtils.java,parseIniFile,"public static Map<String Properties>  (File file) throws IOException { Map<String Properties> answer=new HashMap<>(); String section=null; Properties properties=new Properties(); try (BufferedReader reader=new BufferedReader(new FileReader(file))){ while (true) { String line=reader.readLine(); if (line == null) { break; } if (line.trim().length() == 0) { continue; } if (line.startsWith(""["")) { line=line.trim(); if (!line.endsWith(""]"")) { LOG.warn(""Invalid section header in file: "" + file + "". Line: ""+ line); continue; } section=line.substring(1 line.length() - 1); properties=answer.get(section); if (properties == null) { properties=new Properties(); answer.put(section properties); } } else { String[] parts=line.split(""="" 2); if (parts == null && parts.length != 2) { LOG.warn(""Invalid property in section: "" + section + "" file: ""+ file+ "". Line: ""+ line); continue; } String key=parts[0].trim(); String value=parts[1].trim(); properties.setProperty(key value); } } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,CreateGitProjectResults,public  (BuildConfig buildConfig String fullName String htmlUrl String remoteUrl String cloneUrl){ this.buildConfig=buildConfig; this.fullName=fullName; this.htmlUrl=htmlUrl; this.remoteUrl=remoteUrl; this.cloneUrl=cloneUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,createAndApplyBuildConfig,"public static BuildConfig  (KubernetesClient kubernetesClient String namespace String projectName String cloneUrl Map<String String> annotations){ BuildConfig buildConfig=createBuildConfig(kubernetesClient namespace projectName cloneUrl annotations); Controller controller=new Controller(kubernetesClient); controller.setNamespace(namespace); controller.applyBuildConfig(buildConfig ""from project "" + projectName); return buildConfig; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,createBuildConfig,"public static BuildConfig  (KubernetesClient kubernetesClient String namespace String projectName String cloneUrl Map<String String> annotations){ LOG.info(""Creating a BuildConfig for namespace: "" + namespace + "" project: ""+ projectName); String jenkinsUrl=null; try { jenkinsUrl=getJenkinsServiceUrl(kubernetesClient namespace); } catch ( Exception e) { } BuildConfig buildConfig=Builds.createDefaultBuildConfig(projectName cloneUrl jenkinsUrl); Map<String String> currentAnnotations=KubernetesHelper.getOrCreateAnnotations(buildConfig); currentAnnotations.putAll(annotations); return buildConfig; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,getBuildConfig,public BuildConfig  (){ return buildConfig; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,getBuildConfigConsoleURL,"public static String  (KubernetesClient kubernetes String consoleNamespace BuildConfig buildConfig){ String name=getName(buildConfig); String namespace=getNamespace(buildConfig); if (Strings.isNullOrBlank(namespace)) { namespace=consoleNamespace; } String consoleURL=getFabric8ConsoleServiceUrl(kubernetes namespace); if (Strings.isNotBlank(consoleURL)) { if (Strings.isNotBlank(name)) { return URLUtils.pathJoin(consoleURL ""workspaces"" namespace ""projects"" name); } return URLUtils.pathJoin(consoleURL ""workspaces"" namespace); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,getCloneUrl,public String  (){ return cloneUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,getFabric8ConsoleServiceUrl,"private static String  (KubernetesClient kubernetes String namespace){ return KubernetesHelper.getServiceURL(kubernetes ServiceNames.FABRIC8_CONSOLE namespace ""http"" true); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,getFullName,public String  (){ return fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,getHtmlUrl,public String  (){ return htmlUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,getJenkinsServiceUrl,"private static String  (KubernetesClient kubernetes String namespace){ return KubernetesHelper.getServiceURL(kubernetes ServiceNames.JENKINS namespace ""http"" true); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,getRemoteUrl,public String  (){ return remoteUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,importNewGitProject,"public static CreateGitProjectResults  (KubernetesClient kubernetesClient UserDetails userDetails File basedir String namespace String projectName String origin String message boolean apply boolean useLocalGitAddress) throws GitAPIException  JsonProcessingException { GitUtils.disableSslCertificateChecks(); InitCommand initCommand=Git.init(); initCommand.setDirectory(basedir); Git git=initCommand.call(); LOG.info(""Initialised an empty git configuration repo at {}"" basedir.getAbsolutePath()); PersonIdent personIdent=userDetails.createPersonIdent(); String user=userDetails.getUser(); String address=userDetails.getAddress(); String internalAddress=userDetails.getInternalAddress(); String branch=userDetails.getBranch(); GitRepoClient repoClient=userDetails.createRepoClient(); CreateRepositoryDTO createRepository=new CreateRepositoryDTO(); createRepository.setName(projectName); String fullName=null; RepositoryDTO repository=repoClient.createRepository(createRepository); if (repository != null) { if (LOG.isDebugEnabled()) { LOG.debug(""Got repository: "" + toJson(repository)); } fullName=repository.getFullName(); } if (Strings.isNullOrBlank(fullName)) { fullName=user + ""/"" + projectName; } String htmlUrl=URLUtils.pathJoin(resolveToRoot(address) user projectName); String localCloneUrl=URLUtils.pathJoin(resolveToRoot(internalAddress) user projectName + "".git""); String cloneUrl=htmlUrl + "".git""; String defaultCloneUrl=cloneUrl; if (useLocalGitAddress && Strings.isNotBlank(internalAddress)) { defaultCloneUrl=localCloneUrl; } GitUtils.configureBranch(git branch origin defaultCloneUrl); GitUtils.addDummyFileToEmptyFolders(basedir); LOG.info(""About to git commit and push to: "" + defaultCloneUrl + "" and remote name ""+ origin); GitUtils.doAddCommitAndPushFiles(git userDetails personIdent branch origin message true); Map<String String> annotations=new HashMap<>(); annotations.put(Annotations.Builds.GIT_CLONE_URL cloneUrl); annotations.put(Annotations.Builds.LOCAL_GIT_CLONE_URL localCloneUrl); BuildConfig buildConfig; if (apply) { buildConfig=createAndApplyBuildConfig(kubernetesClient namespace projectName defaultCloneUrl annotations); } else { buildConfig=createBuildConfig(kubernetesClient namespace projectName defaultCloneUrl annotations); } return new CreateGitProjectResults(buildConfig fullName htmlUrl localCloneUrl cloneUrl); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,resolveToRoot,"protected static String  (String address){ if (address != null) { final Matcher matcher=GITHUB_API_URL_PATTERN.matcher(address); if (matcher.find()) { return String.format(""%s%s"" matcher.group(""proto"") matcher.group(""domain"")); } } return address; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\BuildConfigHelper.java,toString,"@Override public String  (){ return ""CreateGitProjectResults{"" + ""fullName='"" + fullName + '\''+ ""  htmlUrl='""+ htmlUrl+ '\''+ ""  remoteUrl='""+ remoteUrl+ '\''+ ""  cloneUrl='""+ cloneUrl+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,addDummyFileToEmptyFolders,"public static void  (File dir){ if (dir != null && dir.isDirectory()) { File[] children=dir.listFiles(); if (children == null || children.length == 0) { File dummyFile=new File(dir "".gitkeep""); try { IOHelpers.writeFully(dummyFile ""This file is only here to avoid git removing empty folders\nOnce there are files in this folder feel free to delete this file!""); } catch ( IOException e) { LOG.warn(""Failed to write file "" + dummyFile + "". ""+ e e); } } else { for ( File child : children) { if (child.isDirectory()) { addDummyFileToEmptyFolders(child); } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,addFiles,public static void  (Git git File... files) throws GitAPIException  IOException { File rootDir=getRootGitDirectory(git); for ( File file : files) { String relativePath=getFilePattern(rootDir file); git.add().addFilepattern(relativePath).call(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,buildHttpsFromSSHURL,"private static String  (String remoteURL){ Matcher matcher=GITHUB_GIT_URL_PATTERN.matcher(remoteURL); if (matcher.find()) { return remoteURL.replaceAll(GITSSH_REGEX ""https://$2/$3""); } else { return remoteURL; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,configure,"@Override protected void  (OpenSshConfig.Host host Session session){ session.setConfig(""StrictHostKeyChecking"" ""no""); UserInfo userInfo=new CredentialsProviderUserInfo(session provider); session.setUserInfo(userInfo); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,configureBranch,"public static void  (Git git String branch String origin String remoteRepository){ if (!Strings.isNullOrBlank(branch)) { StoredConfig config=git.getRepository().getConfig(); config.setString(""branch"" branch ""remote"" origin); config.setString(""branch"" branch ""merge"" ""refs/heads/"" + branch); config.setString(""remote"" origin ""url"" remoteRepository); config.setString(""remote"" origin ""fetch"" ""+refs/heads/*:refs/remotes/"" + origin + ""/*""); try { config.save(); } catch ( IOException e) { LOG.error(""Failed to save the git configuration to "" + git.getRepository().getDirectory() + "" with branch ""+ branch+ "" on ""+ origin+ "" remote repo: ""+ remoteRepository+ "" due: ""+ e.getMessage()+ "". This exception is ignored."" e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,configureCommand,"public static <C extends GitCommand>void  (TransportCommand<C ?> command CredentialsProvider credentialsProvider final File sshPrivateKey final File sshPublicKey){ LOG.info(""Using "" + credentialsProvider); if (sshPrivateKey != null) { final CredentialsProvider provider=credentialsProvider; command.setTransportConfigCallback(new TransportConfigCallback(){ @Override public void configure( Transport transport){ if (transport instanceof SshTransport) { SshTransport sshTransport=(SshTransport)transport; SshSessionFactory sshSessionFactory=new JschConfigSessionFactory(){ @Override protected void configure( OpenSshConfig.Host host  Session session){ session.setConfig(""StrictHostKeyChecking"" ""no""); UserInfo userInfo=new CredentialsProviderUserInfo(session provider); session.setUserInfo(userInfo); } @Override protected JSch createDefaultJSch( FS fs) throws JSchException { JSch jsch=super.createDefaultJSch(fs); jsch.removeAllIdentity(); String absolutePath=sshPrivateKey.getAbsolutePath(); if (LOG.isDebugEnabled()) { LOG.debug(""Adding identity privateKey: "" + sshPrivateKey + "" publicKey: ""+ sshPublicKey); } if (sshPublicKey != null) { jsch.addIdentity(absolutePath sshPublicKey.getAbsolutePath() null); } else { jsch.addIdentity(absolutePath); } return jsch; } } ; sshTransport.setSshSessionFactory(sshSessionFactory); } } } ); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,createDefaultJSch,"@Override protected JSch  (FS fs) throws JSchException { JSch jsch=super.createDefaultJSch(fs); jsch.removeAllIdentity(); String absolutePath=sshPrivateKey.getAbsolutePath(); if (LOG.isDebugEnabled()) { LOG.debug(""Adding identity privateKey: "" + sshPrivat"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,disableSslCertificateChecks,"public static void  (){ LOG.info(""Trusting all SSL certificates""); try { SSLContext context=SSLContext.getInstance(""TLS""); context.init(null new TrustManager[]{new TrustEverythingSSLTrustManager()} new java.security.SecureRandom()); HttpsURLConnection.setDefaultSSLSocketFactory(context.getSocketFactory()); HttpsURLConnection.setDefaultHostnameVerifier(new HostnameVerifier(){ public boolean verify( String s  SSLSession sslSession){ return true; } } ); } catch ( NoSuchAlgorithmException e) { LOG.warn(""Failed to bypass certificate check"" e); } catch ( KeyManagementException e) { LOG.warn(""Failed to bypass certificate check"" e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,doAddCommitAndPushFiles,"public static void  (Git git UserDetails userDetails PersonIdent personIdent String branch String origin String message boolean pushOnCommit int pushRetries) throws GitAPIException { git.add().addFilepattern(""."").call(); doCommitAndPush(git message userDetails personIdent branch origin pushOnCommit pushRetries); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,doCommitAndPush,"public static RevCommit  (Git git String message UserDetails userDetails PersonIdent author String branch String origin boolean pushOnCommit int pushRetries) throws GitAPIException { CommitCommand commit=git.commit().setAll(true).setMessage(message); if (author != null) { commit=commit.setAuthor(author); } RevCommit answer=commit.call(); if (LOG.isDebugEnabled()) { LOG.debug(""Committed "" + answer.getId() + "" ""+ answer.getFullMessage()); } if (pushOnCommit) { GitAPIException exception=null; for (int i=1; i <= pushRetries; i++) { try { if (i > 1) { try { Thread.sleep(700); } catch ( InterruptedException e) { } LOG.info(""Retrying git push attempt "" + i); } PushCommand push=git.push(); configureCommand(push userDetails); Iterable<PushResult> results=push.setRemote(origin).call(); for ( PushResult result : results) { if (LOG.isDebugEnabled()) { LOG.debug(""Pushed "" + result.getMessages() + "" ""+ result.getURI()+ "" branch: ""+ branch+ "" updates: ""+ toString(result.getRemoteUpdates())); } } return answer; } catch ( GitAPIException e) { if (exception == null) { exception=e; } LOG.error(""Failed to git push attempt "" + i + "" with ""+ e e); } } if (exception != null) { throw exception; } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,findRepository,public static Repository  (File baseDir) throws IOException { File gitFolder=io.fabric8.utils.GitHelpers.findGitFolder(baseDir); if (gitFolder == null) { return null; } FileRepositoryBuilder builder=new FileRepositoryBuilder(); Repository repository=builder.readEnvironment().setGitDir(gitFolder).build(); return repository; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,getCommitDate,public static Date  (RevCommit commit){ if (commit == null) { return new Date(0); } return new Date(commit.getCommitTime() * 1000L); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,getFilePattern,public static String  (File rootDir File file) throws IOException { String relativePath=Files.getRelativePath(rootDir file); if (relativePath.startsWith(File.separator)) { relativePath=relativePath.substring(1); } return relativePath.replace(File.separatorChar '/'); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,getGitHostName,"public static String  (String gitUrl){ try { URI uri=new URI(gitUrl); return uri.getHost(); } catch ( URISyntaxException e) { } String[] split=gitUrl.split("":""); if (split.length > 1) { String prefix=split[0]; int idx=prefix.indexOf('@'); if (idx >= 0) { return prefix.substring(idx + 1); } else { return prefix; } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,getGitProtocol,"public static String  (String gitUrl){ try { URI uri=new URI(gitUrl); return uri.getScheme(); } catch ( URISyntaxException e) { } String[] split=gitUrl.split("":""); if (split.length > 1) { String prefix=split[0]; int idx=prefix.indexOf('@'); if (idx >= 0) { return ""ssh""; } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,getRemoteAsHttpsURL,"public static String  (Repository repository String remoteName){ if (repository != null) { StoredConfig config=repository.getConfig(); if (config != null) { String remoteURL=config.getString(""remote"" remoteName ""url""); return buildHttpsFromSSHURL(remoteURL); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,getRemoteURL,"public static String  (Repository repository String remoteName){ if (repository != null) { StoredConfig config=repository.getConfig(); if (config != null) { String remoteURL=""""; return config.getString(""remote"" remoteName ""url""); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,getRootGitDirectory,public static File  (Git git){ return git.getRepository().getDirectory().getParentFile(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,parseGitConfig,"public static Map<String Properties>  () throws IOException { String homeDir=System.getProperty(""user.home"" "".""); File file=new File(homeDir "".gitconfig""); if (file.exists() && file.isFile()) { return IniFileUtils.parseIniFile(file); } else { return new HashMap<>(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,toString,"public static String  (Collection<RemoteRefUpdate> updates){ StringBuilder builder=new StringBuilder(); for ( RemoteRefUpdate update : updates) { if (builder.length() > 0) { builder.append("" ""); } builder.append(update.getMessage() + "" "" + update.getRemoteName()+ "" ""+ update.getNewObjectId()); } return builder.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\GitUtils.java,verify,public boolean  (String s SSLSession sslSession){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitHubCloneUrlTest.java,should_return_url_as_it_is,"@Test public void  (){ String expected=""https://gogs.vgrant.f8""; String address=""https://gogs.vgrant.f8""; String actual=BuildConfigHelper.resolveToRoot(address); assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitHubCloneUrlTest.java,should_return_url_without_api,"@Test public void  (){ String expected=""https://github.com""; String address=""https://api.github.com""; String actual=BuildConfigHelper.resolveToRoot(address); assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,UserDetails,public  (String address String internalAddress String user String password String email){ this.internalAddress=internalAddress; this.user=user; this.password=password; this.address=address; this.email=email; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,createAnonymousDetails,"public UserDetails  (){ String dummyPassword=""""; return new UserDetails(address internalAddress user dummyPassword email); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,createCredentialsProvider,"public CredentialsProvider  (){ return new UsernamePasswordCredentialsProvider(user password){ @Override public boolean isInteractive(){ return false; } @Override public String toString(){ return ""UsernamePasswordCredentialsProvider{user: "" + getUser() + ""  password length: ""+ (Strings.isNullOrBlank(password) ? 0 : password.length())+ ""}""; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,createPersonIdent,public PersonIdent  (){ return new PersonIdent(user email); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,createRepoClient,"public GitRepoClient  (){ LOG.info(""creating git repository client at: "" + internalAddress); return new GitRepoClient(internalAddress user password); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,getAddress,public String  (){ return address; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,getBranch,public String  (){ return branch; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,getEmail,public String  (){ return email; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,getInternalAddress,public String  (){ return internalAddress; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,getPassword,public String  (){ return password; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,getSshPrivateKey,public File  (){ return sshPrivateKey; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,getSshPublicKey,public File  (){ return sshPublicKey; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,getUser,public String  (){ return user; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,isInteractive,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,setAddress,public void  (String address){ this.address=address; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,setBranch,public void  (String branch){ this.branch=branch; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,setPassword,public void  (String password){ this.password=password; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,setSshPrivateKey,public void  (File sshPrivateKey){ this.sshPrivateKey=sshPrivateKey; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,setSshPublicKey,public void  (File sshPublicKey){ this.sshPublicKey=sshPublicKey; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,setUser,public void  (String user){ this.user=user; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\main\java\io\fabric8\project\support\UserDetails.java,toString,"@Override public String  (){ return ""UsernamePasswordCredentialsProvider{user: "" + getUser() + ""  password length: ""+ (Strings.isNullOrBlank(password) ? 0 : password.length())+ ""}""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,assertGitProtocol,"public static void  (String gitUrl String expected){ String actual=GitUtils.getGitProtocol(gitUrl); assertThat(actual).describedAs(""getGitProtocol: "" + gitUrl).isEqualTo(expected); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,assertHostName,"public static void  (String gitUrl String expectedHostName){ String actual=GitUtils.getGitHostName(gitUrl); assertThat(actual).describedAs(""getGitHostName: "" + gitUrl).isEqualTo(expectedHostName); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,assertRepos,"private Repository  () throws IOException { File basedir=new File(System.getProperty(""basedir"" ""."")); Repository repository=GitUtils.findRepository(basedir); assertNotNull(""Should find a repository"" repository); return repository; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,testGetRepositoryHttpsAsURLWithRemoteName,"@Test public void  () throws Exception { Pattern GITHUB_HTTPS_URL_PATTERN=Pattern.compile(""^https://github\\.com/(?<user>[a-z0-9](?:-?[a-z0-9]){0 38})/.*?$""); Repository repository=assertRepos(); String url=GitUtils.getRemoteAsHttpsURL(repository ""origin"""
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,testGetRepositoryHttpsURL,"@Test public void  () throws Exception { Pattern GITHUB_HTTPS_URL_PATTERN=Pattern.compile(""^https://github\\.com/(?<user>[a-z0-9](?:-?[a-z0-9]){0 38})/.*?$""); Repository repository=assertRepos(); String url=GitUtils.getRemoteAsHttpsURL(repository); System"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,testGetRepositoryURL,"@Test public void  () throws Exception { Repository repository=assertRepos(); String url=GitUtils.getRemoteURL(repository); System.out.println(""Found git repository URL: "" + url); assertThat(url).isNotEmpty().contains("".git""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,testGitHostName,"@Test public void  () throws Exception { assertHostName(""ssh://user@server/project.git"" ""server""); assertHostName(""user@cheese:project.git"" ""cheese""); assertHostName(""git@github.com:fabric8-quickstarts/spring-boot-webmvc.git"" ""github.com""); assertHostName"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\GitUtilsTest.java,testGitProtocol,"@Test public void  () throws Exception { assertGitProtocol(""ssh://user@server/project.git"" ""ssh""); assertGitProtocol(""user@cheese:project.git"" ""ssh""); assertGitProtocol(""git@github.com:fabric8-quickstarts/spring-boot-webmvc.git"" ""ssh""); assertGitProtocol("
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-project-utils\src\test\java\io\fabric8\project\support\IniFileUtilsTest.java,testParseGitConfig,"@Test public void  () throws Exception { File basedir=new File(System.getProperty(""basedir"" ""."")); File file=new File(basedir ""src/test/resources/sample.gitconfig""); assertThat(file).isFile().exists(); Map<String Properties> map=IniFileUtils.parseIniFile("
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,NewProjectFormData,public  (String named String archetypeFilter String jenkinsFileFilter){ this.named=named; this.archetypeFilter=archetypeFilter; this.jenkinsFileFilter=jenkinsFileFilter; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,getArchetypeFilter,public String  (){ return archetypeFilter; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,getJenkinsFileFilter,public String  (){ return jenkinsFileFilter; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,getNamed,public String  (){ return named; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,getType,public String  (){ return type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,setArchetypeFilter,public void  (String archetypeFilter){ this.archetypeFilter=archetypeFilter; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,setJenkinsFileFilter,public void  (String jenkinsFileFilter){ this.jenkinsFileFilter=jenkinsFileFilter; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,setNamed,public void  (String named){ this.named=named; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\NewProjectFormData.java,setType,public void  (String type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\ConsoleTests.java,waitUntilLoggedIn,"public static void  (WebDriverFacade facade String userName String password){ String namespace=facade.getNamespace(); facade.sleep(Millis.seconds(5)); for (int i=0; i < 5; i++) { try { facade.untilIsDisplayed(inputUsernameBy); } catch ( Throwable e) { facade.logWarn(""Trying to reload the browser!""); facade.getDriver().navigate().refresh(); } } facade.form().clearAndSendKeys(inputUsernameBy userName).clearAndSendKeys(inputPasswordBy password).submit(); facade.logInfo(""Logged in - waiting for the browser initialise the web app""); facade.sleep(Millis.seconds(5)); facade.logInfo(""Logged in!""); for (int i=0; i < 5; i++) { try { facade.untilIsEnabled(namespaceSelectBy); } catch ( Throwable e) { facade.logWarn(""Trying to reload the browser!""); facade.getDriver().navigate().refresh(); } } facade.untilSelectedByVisibleText(namespaceSelectBy namespace); facade.sleep(Millis.seconds(10)); facade.logInfo(""Viewing namespace: "" + namespace); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,FormFacade,public  (WebDriverFacade facade){ super(facade); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,apply,"@Override public Boolean  (WebDriver driver){ logWait("""" + inputValues + "" on ""+ driver.getCurrentUrl()); WebElement submitElement=null; for ( InputValue inputValue : inputValues) { submitElement=inputValue.doInput(); if (submitElement == null) { logInfo("
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,clearAndSendKeys,public FormFacade  (By by String value){ inputValues.add(new InputValue(getFacade() by value)); return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,completeComboBox,public FormFacade  (By by String value){ inputValues.add(new ComboCompleteInputValue(getFacade() by value)); return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,submit,"public void  (){ getFacade().until(""Form inputs: "" + inputValues new ExpectedCondition<Boolean>(){ @Override public Boolean apply( WebDriver driver){ logWait("""" + inputValues + "" on ""+ driver.getCurrentUrl()); WebElement submitElement=null; for ( InputValue inputValue : inputValues) { submitElement=inputValue.doInput(); if (submitElement == null) { logInfo(""Missing "" + inputValue + """"); return false; } } if (submitBy == null && submitElement == null) { fail(""No input fields submitted yet""); return false; } else { getFacade().sleep(Millis.seconds(5)); if (submitBy != null) { getFacade().untilIsEnabled(submitBy); submitElement=getFacade().findOptionalElement(submitBy); if (submitElement == null) { logWarn(""Could not find submit button "" + submitBy + """"); return false; } else { if (!submitElement.isDisplayed() || !submitElement.isEnabled()) { logWarn(""Submit button "" + submitBy + "" not enabled and visible""); return false; } logInfo(""Submitting form: "" + inputValues + "" on ""+ submitElement+ """"); submitElement.click(); } } else { logInfo(""Submitting form: "" + inputValues + "" on ""+ submitElement+ """"); submitElement.submit(); } return true; } } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\FormFacade.java,submitButton,public FormFacade  (By submitBy){ this.submitBy=submitBy; return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\ComboCompleteInputValue.java,ComboCompleteInputValue,public  (WebDriverFacade facade By by String value){ super(facade by value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\ComboCompleteInputValue.java,doInput,@Override public WebElement  (){ final WebDriverFacade facade=getFacade(); final By firstBy=getBy(); facade.sleep(Millis.seconds(2)); WebElement element=facade.findOptionalElement(firstBy); if (element == null) { return null; } super.doInputOnElement(elem
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\ComboCompleteInputValue.java,toString,"@Override public String  (){ return ""ComboCompleteInputValue{"" + ""by="" + getBy() + ""  value='""+ getValue()+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,ProjectsPage,"public  (WebDriverFacade facade){ super(facade); ConsoleTests.waitUntilLoggedIn(facade); startUrl=getDriver().getCurrentUrl(); buildConfigsUrl=relativeUrl(startUrl ""/kubernetes"" ""/kubernetes/buildConfigs""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,createProject,"public void  (NewProjectFormData form){ goToProjectsPage(); WebDriverFacade facade=getFacade(); facade.untilLinkClicked(createProjectBy); By nextButton=By.xpath(""//button[@ng-click='execute()']""); facade.setDefaultTimeoutInSeconds(60 * 9); String named=form.getNamed(); facade.form().clearAndSendKeys(By.xpath(""//input[@ng-model='entity.named']"") named).submitButton(nextButton).submit(); facade.form().completeComboBox(By.xpath(""//label[text() = 'Archetype']/following::input[@type='text']"") form.getArchetypeFilter()).submitButton(nextButton).submit(); untilNextWizardPage(facade nextButton); facade.form().submitButton(nextButton).submit(); untilNextWizardPage(facade nextButton); facade.form().completeComboBox(By.xpath(""//label[text() = 'Flow']/following::input[@type='text']"") form.getJenkinsFileFilter()).submitButton(nextButton).submit(); facade.untilIsDisplayed(By.xpath(""//a[@href='/forge/repos' and text()='Done']"")); logInfo(""Created project: "" + named); goToProjectsPage(); facade.untilIsDisplayed(By.partialLinkText(named)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,getCreateProjectBy,public By  (){ return createProjectBy; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,getGogsEmail,public String  (){ return gogsEmail; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,getGogsPassword,public String  (){ return gogsPassword; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,getGogsUserName,public String  (){ return gogsUserName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,getSignInBy,public By  (){ return signInBy; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,goToProjectsPage,"public void  (){ WebDriverFacade facade=getFacade(); facade.untilLinkClickedLoop(projectsLinkBy buildConfigsUrl); facade.untilOneOf(signInBy createProjectBy); WebElement signIn=facade.findOptionalElement(signInBy); if (signIn != null && signIn.isDisplayed()) { logInfo(""Waiting for signin button to be clicked""); facade.untilLinkClicked(signInBy); signIntoGogs(); } else { logInfo(""Sign in button not present""); } logWait(""button: "" + createProjectBy + """"); facade.untilIsEnabled(createProjectBy); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,relativeUrl,"protected String  (String url String trimPath String newPath){ int idx=url.indexOf(trimPath); if (idx < 0) { fail(""The URL `"" + url + ""` does not include path `""+ trimPath+ ""`""); } return url.substring(0 idx) + newPath; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,setGogsUserName,public void  (String gogsUserName){ this.gogsUserName=gogsUserName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,signIntoGogs,"protected void  (){ getFacade().form().clearAndSendKeys(By.id(""gitUsername"") gogsUserName).clearAndSendKeys(By.id(""gitPassword"") gogsPassword).clearAndSendKeys(By.id(""gitEmail"") gogsEmail).submitButton(By.xpath(""//button[@ng-click='doLogin()']"")).submit(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\forge\ProjectsPage.java,untilNextWizardPage,protected void  (WebDriverFacade facade By nextButton){ facade.sleep(Millis.seconds(5)); facade.untilIsEnabled(nextButton); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,InputValue,public  (WebDriverFacade facade By by String value){ super(facade); this.by=by; this.value=value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,doInput,"public WebElement  (){ WebElement element=getFacade().findOptionalElement(by); if (element != null) { for (int i=0; i < 10; i++) { try { doInputOnElement(element); return element; } catch ( StaleElementReferenceException e) { logWarn(""Caught: "" + e); getFacade().sleep(Millis.seconds(5)); } } logWarn(""Failed to perform input on "" + by + "" to due repeated StaleElementReferenceException!""); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,doInputOnElement,protected void  (WebElement element){ element.clear(); element.sendKeys(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,getBy,public By  (){ return by; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,getValue,public String  (){ return value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\inputs\InputValue.java,toString,"@Override public String  (){ return ""InputValue{"" + ""by="" + by + ""  value='""+ value+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,assertWebDriverForService,"public static <T>T  (KubernetesClient client String namespace String serviceName WebDriver driver Function<WebDriverFacade T> block) throws Exception { try { WebDriverFacade facade=new WebDriverFacade(driver client namespace); facade.navigateToService(serviceName); T apply=block.apply(facade); String property=Systems.getEnvVarOrSystemProperty(WAIT_AFTER_SELENIUM); if (property != null) { long millis=0; try { millis=Long.parseLong(property); } catch ( NumberFormatException e) { logWarn(""Env var / system property "" + WAIT_AFTER_SELENIUM + "" is not a long value: ""+ property+ "". ""+ e e); } if (millis > 0) { logInfo(""Sleeping for "" + millis + "" millis before tearning down the test case""); try { Thread.sleep(millis); } catch ( InterruptedException e) { } } } return apply; } catch ( Exception e) { logError(""Failed with exception: "" e); throw e; } finally { driver.quit(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,createWebDriver,"public static WebDriver  (){ WebDriver answer=doCreateWebDriver(); logInfo(""Using WebDriver implementation: "" + answer); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,doCreateWebDriver,"protected static WebDriver  (){ String driverName=Systems.getEnvVarOrSystemProperty(FABRIC8_WEBDRIVER_NAME); if (driverName != null) { driverName=driverName.toLowerCase(); if (driverName.equals(""chrome"")) { return new ChromeDriver(); } else if (driverName.equals(""edge"")) { return new EdgeDriver(); } else if (driverName.equals(""firefox"")) { return new FirefoxDriver(); } else if (driverName.equals(""htmlunit"")) { return new HtmlUnitDriver(); } else if (driverName.equals(""internetexplorer"") || driverName.equals(""ie"")) { return new InternetExplorerDriver(); } else if (driverName.equals(""opera"")) { return new OperaDriver(); } else if (driverName.equals(""phantomjs"")) { return new PhantomJSDriver(); } else if (driverName.equals(""safari"")) { return new SafariDriver(); } else if (driverName.equals(""htmlunit"")) { return new HtmlUnitDriver(); } } return new ChromeDriver(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,logClick,"public static void  (String message){ System.out.println(""CLICK: "" + message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,logError,"public static void  (String message Throwable e){ System.out.println(""ERROR: "" + message + e); e.printStackTrace(); Throwable cause=e.getCause(); if (cause != null && cause != e) { logError(""Caused by: "" cause); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,logInfo,"public static void  (String message){ System.out.println(""INFO: "" + message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,logInput,"public static void  (String message){ System.out.println(""INPUT: "" + message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,logSubmit,"public static void  (String message){ System.out.println(""SUBMIT: "" + message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,logWait,"public static void  (String message){ System.out.println(""WAITING: "" + message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\SeleniumTests.java,logWarn,"public static void  (String message Throwable e){ System.out.println(""WARN: "" + message + e); e.printStackTrace(); Throwable cause=e.getCause(); if (cause != null && cause != e) { logWarn(""Caused by: "" cause); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\LogSupport.java,LogSupport,public  (WebDriver driver){ this.driver=driver; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\LogSupport.java,getDriver,public WebDriver  (){ return driver; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\support\NameGenerator.java,generateName,public static String  (){ int charCount=chars.length(); long value=System.currentTimeMillis(); StringBuilder buffer=new StringBuilder(); while (value > 0L) { int digit=(int)(value % charCount); value=(value - digit) / charCount; buffer.append(chars.charAt(digit)); } return buffer.reverse().toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\PageSupport.java,PageSupport,public  (WebDriverFacade facade){ super(facade.getDriver()); this.facade=facade; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\PageSupport.java,getFacade,public WebDriverFacade  (){ return facade; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\support\Versions.java,getVersion,"public static String  (String name){ String answer=getVersions().getProperty(name); assertNotNull(""Missing version value in file "" + versionsFile.getPath() + "" for key `""+ name+ ""`"" name); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\support\Versions.java,getVersions,"public static Properties  (){ if (versions == null) { versions=new Properties(); String basedir=System.getProperty(""basedir"" "".""); versionsFile=new File(basedir ""target/test-classes/versions.properties""); assertTrue(""Versions file does not exist: "" + versionsFile.getPath() versionsFile.exists() && versionsFile.isFile()); try { versions.load(new FileInputStream(versionsFile)); } catch ( IOException e) { throw new AssertionError(""Failed to load "" + versionsFile.getPath() + "". ""+ e e); } } return versions; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\AbstractServiceRegistar.java,createAlias,"private static String  (String name Class type String protocol String port Boolean external){ StringBuilder sb=new StringBuilder(); sb.append(type.getName()).append(""-"").append(name); if (Strings.isNotBlank(protocol)) { sb.append(""-"").append(protocol); } if (Strings.isNotBlank(port)) { sb.append(""-"").append(port); } if (external) { sb.append(""-external""); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\AbstractServiceRegistar.java,createConverterBean,"private <S T>BeanDefinitionHolder  (Class type String methodName Class<S> sourceType Class<T> targetType){ BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(FactoryConverter.class); String beanName=type.getName() + ""."" + methodName; builder.addPropertyValue(""name"" methodName); builder.addPropertyValue(""type"" type.getCanonicalName()); builder.addPropertyValue(""sourceType"" sourceType.getCanonicalName()); builder.addPropertyValue(""targetType"" targetType.getCanonicalName()); builder.setAutowireMode(Autowire.BY_TYPE.value()); return new BeanDefinitionHolder(builder.getBeanDefinition() beanName); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\AbstractServiceRegistar.java,createServiceDefinition,"private BeanDefinitionHolder  (Service service String alias String protocol String port Class type){ BeanDefinitionBuilder builder=BeanDefinitionBuilder.genericBeanDefinition(KubernetesServiceFactoryBean.class); builder.addPropertyValue(""name"" alias); builder.addPropertyValue(""service"" service); builder.addPropertyValue(""port"" port); builder.addPropertyValue(""type"" type.getCanonicalName()); builder.setAutowireMode(Autowire.BY_TYPE.value()); builder.getBeanDefinition().addQualifier(new AutowireCandidateQualifier(ServiceName.class KubernetesHelper.getName(service))); builder.getBeanDefinition().addQualifier(new AutowireCandidateQualifier(Protocol.class protocol)); builder.getBeanDefinition().addQualifier(new AutowireCandidateQualifier(PortName.class port != null ? port : """")); return new BeanDefinitionHolder(builder.getBeanDefinition() alias); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\condition\OnInsideKubernetesCondition.java,getMatchOutcome,"@Override public ConditionOutcome  (ConditionContext context AnnotatedTypeMetadata metadata){ for ( String variable : REQUIRED_ENV_VARIABLES) { if (Strings.isNullOrBlank(System.getenv().get(variable))) { return ConditionOutcome.noMatch(""Environment variab"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,WebDriverFacade,public  (WebDriver driver KubernetesClient client String namespace){ super(driver); this.driver=driver; this.client=client; this.namespace=namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,apply,"@Override public Boolean  (WebDriver driver){ for ( By by : bys) { WebElement element=findOptionalElement(by); if (element != null && element.isDisplayed() && element.isEnabled()) { logInfo(""Found "" + element + "" for ""+ by+ """"); return true; } } logInfo("""
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,assertCurrentUrlStartsWith,"public void  (String expectedUrl){ String currentUrl=getDriver().getCurrentUrl(); boolean answer=currentUrl != null && currentUrl.startsWith(expectedUrl); if (!answer) { fail(""Current URL `"" + currentUrl + ""` does not start with `""+ expectedUrl+ ""`""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,clearAndSendKeys,public WebElement  (By by String text){ WebElement field=findOptionalElement(by); if (field != null) { field.clear(); field.sendKeys(text); } return field; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,currentUrlStartsWith,"public boolean  (String expectedUrl){ String currentUrl=getDriver().getCurrentUrl(); boolean answer=currentUrl != null && currentUrl.startsWith(expectedUrl); if (!answer) { logWarn(""Current URL `"" + currentUrl + ""` does not start with `""+ expectedUrl+ ""`""); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,findOptionalElement,"public WebElement  (WebElement element By by){ try { return element.findElement(by); } catch ( NoSuchElementException e) { return null; } catch ( Throwable e) { logError(""Failed to find "" + by e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,form,public FormFacade  (){ return new FormFacade(this); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,getClient,public KubernetesClient  (){ return client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,getDefaultTimeoutInSeconds,public long  (){ return defaultTimeoutInSeconds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,getFacade,@Override public WebDriverFacade  (){ return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,getNamespace,public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,getServiceUrl,"public String  (String serviceName){ String url=KubernetesHelper.getServiceURL(client serviceName namespace ""http"" true); assertNotNull(""No external Service URL could be found for namespace: "" + namespace + "" and name: ""+ serviceName url); assertTrue(""No external Service URL could be found for namespace: "" + namespace + "" and name: ""+ serviceName Strings.isNotBlank(url)); logInfo(""Service "" + serviceName + "" in namespace: ""+ namespace+ "" URL = ""+ url); return url; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,navigateToService,public String  (String serviceName){ String url=getServiceUrl(serviceName); WebDriver driver=getDriver(); driver.navigate().to(url); return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,setDefaultTimeoutInSeconds,public void  (long defaultTimeoutInSeconds){ this.defaultTimeoutInSeconds=defaultTimeoutInSeconds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,sleep,public void  (long millis){ try { Thread.sleep(millis); } catch ( InterruptedException e) { } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,toString,"@Override public String  (){ return ""element.isEnabled()""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,until,public boolean  (String message long timeoutInSeconds ExpectedCondition<Boolean> condition){ return new WebDriverWait(getDriver() timeoutInSeconds).withMessage(message).until(condition); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,untilElementPredicate,"public boolean  (long timeoutInSeconds final By by final Function<WebElement Boolean> elementPredicate){ String message="""" + by + "" matches ""+ elementPredicate; return until(message timeoutInSeconds new ExpectedCondition<Boolean>(){ public Boolean apply( WebDriver driver){ WebElement element=findOptionalElement(by); if (element == null) { logWait("""" + by + """"); return false; } else { Boolean value=elementPredicate.apply(element); if (value != null && value.booleanValue()) { logInfo("""" + by + "" matches ""+ elementPredicate+ """"); return true; } else { logWait("""" + by + "" matches ""+ elementPredicate+ """"); return false; } } } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,untilIsDisplayed,"public boolean  (long timeoutInSeconds final By by){ return untilElementPredicate(timeoutInSeconds by new Function<WebElement Boolean>(){ @Override public String toString(){ return ""element.isDisplayed()""; } @Override public Boolean apply( WebElement element){ return element.isDisplayed(); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,untilIsEnabled,"public boolean  (long timeoutInSeconds final By by){ return untilElementPredicate(timeoutInSeconds by new Function<WebElement Boolean>(){ @Override public String toString(){ return ""element.isEnabled()""; } @Override public Boolean apply( WebElement element){ return element.isEnabled(); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,untilLinkClicked,"public boolean  (long timeoutInSeconds final By by){ String message=""click link "" + by; return until(message timeoutInSeconds new ExpectedCondition<Boolean>(){ public Boolean apply( WebDriver driver){ WebElement link=findOptionalElement(by); if (link != null) { logInfo(""Clicking link: "" + by + """"); link.click(); logInfo(""Clicked link: "" + by + "" now""); return true; } else { logInfo(""Not found link "" + by + """"); return false; } } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,untilLinkClickedLoop,"public void  (By by String expectedUrl){ for (int i=0; i < 10; i++) { untilLinkClicked(by); sleep(Millis.seconds(10)); if (currentUrlStartsWith(expectedUrl)) { break; } else { logWarn(""lets try re-clicking link: "" + by); } } assertCurrentUrlStartsWith(expectedUrl); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,untilOneOf,"public void  (final By... bys){ final List<By> byList=Arrays.asList(bys); String message=""One of these is available: "" + byList; until(message defaultTimeoutInSeconds new ExpectedCondition<Boolean>(){ @Override public Boolean apply( WebDriver driver){ for ( By by : bys) { WebElement element=findOptionalElement(by); if (element != null && element.isDisplayed() && element.isEnabled()) { logInfo(""Found "" + element + "" for ""+ by+ """"); return true; } } logInfo(""Still not found any of "" + byList + """"); return false; } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-selenium\src\main\java\io\fabric8\selenium\WebDriverFacade.java,untilSelectedByVisibleText,"public boolean  (long timeoutInSeconds final By by final String value){ String message=""select "" + by + "" with value: ""+ value; return new WebDriverWait(getDriver() timeoutInSeconds).withMessage(message).until(new ExpectedCondition<Boolean>(){ @Override public Boolean apply( WebDriver webDriver){ WebElement element=findOptionalElement(by); if (element != null && element.isEnabled()) { Select select=new Select(element); try { select.selectByVisibleText(value); logInfo("""" + by + "" select ""+ select+ "" selected value: ""+ value); return true; } catch ( NoSuchElementException e) { logWait("""" + by + "" select ""+ select+ "" does not yet have value: ""+ value); return false; } } else { logWait("""" + by + "" not enabled""); return false; } } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,convert,@Override public Object  (Object o TypeDescriptor typeDescriptor TypeDescriptor typeDescriptor1){ try { final Object factory=beanFactory.getBean(type); final Method method=factory.getClass().getDeclaredMethod(name sourceType); return (T)method.invoke(fact
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,getConvertibleTypes,@Override public Set<ConvertiblePair>  (){ return Collections.singleton(new ConvertiblePair(sourceType targetType)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,getSourceType,public Class<S>  (){ return sourceType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,getTargetType,public Class<S>  (){ return targetType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,getType,public Class<?>  (){ return type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,setBeanFactory,@Override public void  (BeanFactory beanFactory) throws BeansException { this.beanFactory=beanFactory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,setSourceType,public void  (Class<S> sourceType){ this.sourceType=sourceType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,setTargetType,public void  (Class<S> targetType){ this.targetType=targetType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\FactoryConverter.java,setType,public void  (Class<?> type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\condition\OnKubernetesAvailableCondition.java,getMatchOutcome,"@Override public ConditionOutcome  (ConditionContext context AnnotatedTypeMetadata metadata){ ConditionOutcome outcome=inside.getMatchOutcome(context metadata); if (outcome.isMatch()) { return ConditionOutcome.noMatch(""Inside condition match.""); } else { "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\CoverterServiceConfiguration.java,conversionService,@Bean @ConditionalOnMissingBean(ConversionService.class) public ConversionService  (Set<GenericConverter> genericConverters){ ConversionServiceFactoryBean bean=new ConversionServiceFactoryBean(); bean.setConverters(genericConverters); bean.afterProperties
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\CoverterServiceConfiguration.java,serviceConverter,@Bean ServiceConverter  (KubernetesClient client){ ServiceConverter converter=new ServiceConverter(); converter.setKubernetesClient(client); return converter; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\external\ExternalServiceRegistrar.java,getService,@Override public Service  (String serviceName){ if (kubernetesClient == null) { kubernetesClient=beanFactory.getBean(KubernetesClient.class); } return kubernetesClient.services().withName(serviceName).get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\external\ExternalServiceRegistrar.java,setBeanFactory,@Override public void  (BeanFactory beanFactory) throws BeansException { this.beanFactory=beanFactory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,convert,@Override public Object  (Object o TypeDescriptor sourceType TypeDescriptor targetType){ Service source=(Service)o; String serviceProtocol=getProtocolOfService(source); String servicePort=getPortOfService(source); String str=getServiceURL(kubernetesClient
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,getConvertibleTypes,@Override public Set<ConvertiblePair>  (){ return new LinkedHashSet<>(Arrays.asList(new ConvertiblePair(Service.class String.class) new ConvertiblePair(Service.class URL.class))); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,getKubernetesClient,public KubernetesClient  (){ return kubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,getPortOfService,private String  (Service service){ String port=null; if (service.getAdditionalProperties().containsKey(PORT)) { Object portProperty=service.getAdditionalProperties().get(PORT); if (portProperty instanceof String) { port=(String)portProperty; } } return port; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,getProtocolOfService,private String  (Service service){ String protocol=DEFAULT_PROTOCOL; if (service.getAdditionalProperties().containsKey(PROTOCOL)) { Object protocolProperty=service.getAdditionalProperties().get(PROTOCOL); if (protocolProperty instanceof String) { protocol=(String)protocolProperty; } } return protocol; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,getServiceURL,"public String  (KubernetesClient client Service srv String serviceProtocol String servicePortName){ String serviceName=KubernetesHelper.getName(srv); String serviceProto=serviceProtocol != null ? serviceProtocol : KubernetesServices.serviceToProtocol(serviceName servicePortName); if (Strings.isNullOrBlank(servicePortName) && KubernetesHelper.isOpenShift(client)) { OpenShiftClient openShiftClient=client.adapt(OpenShiftClient.class); RouteList routeList=openShiftClient.routes().list(); for ( Route route : routeList.getItems()) { if (route.getSpec().getTo().getName().equals(serviceName)) { return (serviceProto + ""://"" + route.getSpec().getHost()).toLowerCase(); } } } ServicePort port=KubernetesHelper.findServicePortByName(srv servicePortName); if (port == null) { throw new RuntimeException(""Couldn't find port: "" + servicePortName + "" for service:""+ serviceName); } String clusterIP=srv.getSpec().getClusterIP(); if (""None"".equals(clusterIP)) { throw new IllegalStateException(""Service "" + serviceName + "" is head-less. Search for endpoints instead.""); } return (serviceProto + ""://"" + clusterIP+ "":""+ port.getPort()).toLowerCase(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,isServiceExternal,private Boolean  (Service service){ Boolean external=false; if (service.getAdditionalProperties().containsKey(EXTERNAL)) { Object externalProperty=service.getAdditionalProperties().get(EXTERNAL); if (externalProperty instanceof Boolean) { external=(Boolean)externalProperty; } } return external; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\converters\ServiceConverter.java,setKubernetesClient,public void  (KubernetesClient kubernetesClient){ this.kubernetesClient=kubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\Fabric8Application.java,main,public static void  (String[] args){ SpringApplication.run(Fabric8Application.class args); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesClientConfiguration.java,kubernetesClient,"@Bean public KubernetesClient  (){ LOGGER.debug(""Trying to init {} by auto-configuration."" KubernetesClient.class.getSimpleName()); return new DefaultKubernetesClient(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\external\ApplicationExternalTest.java,setUpClass,"@BeforeClass public static void  () throws Exception { System.setProperty(""SERVICE1_PROTOCOL"" ""https""); System.setProperty(""SERVICE2_PROTOCOL"" ""https""); System.setProperty(""SERVICE3_PROTOCOL"" ""https""); MockConfigurer.configure(); System.setProperty(Kubern"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\external\ApplicationExternalTest.java,testMultiport,"@Test public void  (){ Assert.assertNotNull(multiport); Assert.assertTrue(multiport.endsWith(""8081"")); Assert.assertNotNull(multiport2); Assert.assertTrue(multiport2.endsWith(""8082"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\external\ApplicationExternalTest.java,testSpringBoot,@Test public void  (){ Assert.assertNotNull(client); Assert.assertNotNull(service1); Assert.assertNotNull(service2); Assert.assertNotNull(service3); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,getConversionService,public ConversionService  (){ return conversionService; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,getObject,@Override public Object  () throws Exception { if (type.equals(Service.class)) { return service; } else { return conversionService.convert(service type); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,getObjectType,@Override public Class<?>  (){ return type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,getPort,public String  (){ return port; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,getService,public Service  (){ return service; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,getType,public Class<?>  (){ return type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,isSingleton,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,setConversionService,"@Autowired @Qualifier(""conversionService"") public void  (ConversionService conversionService){ this.conversionService=conversionService; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,setPort,public void  (String port){ this.port=port; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,setService,public void  (Service service){ this.service=service; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\KubernetesServiceFactoryBean.java,setType,public void  (Class<?> type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\main\java\io\fabric8\spring\boot\internal\InternalServiceRegistar.java,getService,@Override public Service  (String serviceName){ Map<String String> env=System.getenv(); String prefix=serviceName.toUpperCase(); String serviceHost=env.get(prefix + HOST_SUFFIX); String defaultPortName=prefix + SERVICE_PORT; String namedPortPrefix=default
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\internal\MockConfigurer.java,configure,"public static void  (){ Service service1=new ServiceBuilder().withNewMetadata().withName(""service1"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(80).withNewTargetPort(9090).endPort().endSpec().build(); Service service2=new ServiceBuilder().withNewMetadata().withName(""service2"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(80).withNewTargetPort(8080).endPort().endSpec().build(); Service service3=new ServiceBuilder().withNewMetadata().withName(""service3"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(443).withNewTargetPort(443).endPort().withClusterIP(""172.30.17.2"").endSpec().build(); Service multiport=new ServiceBuilder().withNewMetadata().withName(""multiport"").endMetadata().withNewSpec().addNewPort().withName(""port1"").withProtocol(""TCP"").withPort(8081).withNewTargetPort(8081).endPort().addNewPort().withName(""port2"").withProtocol(""TCP"").withPort(8082).withNewTargetPort(8082).endPort().addNewPort().withName(""port3"").withProtocol(""TCP"").withPort(8083).withNewTargetPort(8083).endPort().withClusterIP(""172.30.17.2"").endSpec().build(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/service1"").andReturn(200 service1).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/service2"").andReturn(200 service2).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/service3"").andReturn(200 service3).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/multiport"").andReturn(200 multiport).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services"").andReturn(200 new ServiceListBuilder().withItems(service1 service2 service3 multiport).build()).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/endpoints"").andReturn(200 new EndpointsListBuilder().build()).always(); MOCK.expect().get().withPath(""/oapi/v1/namespaces/default/routes"").andReturn(200 new RouteBuilder().build()).always(); String masterUrl=MOCK.getServer().url(""/"").toString(); System.setProperty(Config.KUBERNETES_MASTER_SYSTEM_PROPERTY masterUrl); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\external\MockConfigurer.java,configure,"public static void  (){ Service service1=new ServiceBuilder().withNewMetadata().withName(""service1"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(80).withNewTargetPort(9090).endPort().endSpec().build(); Service service2=new ServiceBuilder().withNewMetadata().withName(""service2"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(80).withNewTargetPort(8080).endPort().endSpec().build(); Service service3=new ServiceBuilder().withNewMetadata().withName(""service3"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(443).withNewTargetPort(443).endPort().withClusterIP(""172.30.17.2"").endSpec().build(); Service multiport=new ServiceBuilder().withNewMetadata().withName(""multiport"").endMetadata().withNewSpec().addNewPort().withName(""port1"").withProtocol(""TCP"").withPort(8081).withNewTargetPort(8081).endPort().addNewPort().withName(""port2"").withProtocol(""TCP"").withPort(8082).withNewTargetPort(8082).endPort().addNewPort().withName(""port3"").withProtocol(""TCP"").withPort(8083).withNewTargetPort(8083).endPort().withClusterIP(""172.30.17.2"").endSpec().build(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/service1"").andReturn(200 service1).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/service2"").andReturn(200 service2).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/service3"").andReturn(200 service3).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/multiport"").andReturn(200 multiport).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/services"").andReturn(200 new ServiceListBuilder().withItems(service1 service2 service3 multiport).build()).always(); MOCK.expect().get().withPath(""/api/v1/namespaces/default/endpoints"").andReturn(200 new EndpointsListBuilder().build()).always(); MOCK.expect().get().withPath(""/oapi/v1/namespaces/default/routes"").andReturn(200 new RouteBuilder().build()).always(); String masterUrl=MOCK.getServer().url(""/"").toString(); System.setProperty(Config.KUBERNETES_MASTER_SYSTEM_PROPERTY masterUrl); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\internal\ApplicationInternalTest.java,setUpClass,"@BeforeClass public static void  () throws Exception { System.setProperty(""SERVICE1_PROTOCOL"" ""https""); System.setProperty(""SERVICE2_PROTOCOL"" ""https""); System.setProperty(""SERVICE3_PROTOCOL"" ""https""); MockConfigurer.configure(); System.setProperty(Kubern"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\internal\ApplicationInternalTest.java,testMultiport,"@Test public void  (){ Assert.assertNotNull(multiport); Assert.assertTrue(multiport.endsWith(""8081"")); Assert.assertNotNull(multiport2); Assert.assertTrue(multiport2.endsWith(""8082"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\internal\ApplicationInternalTest.java,testSpringBoot,@Test public void  (){ Assert.assertNotNull(client); Assert.assertNotNull(service1); Assert.assertNotNull(service2); Assert.assertNotNull(service3); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-spring-boot\src\test\java\io\fabric8\spring\boot\URLToConnection.java,toUrlConnection,"@Factory @ServiceName public URLConnection  (@ServiceName Service srv) throws IOException { URL url=new URL(""http://"" + srv.getSpec().getClusterIP() + "":""+ srv.getSpec().getPorts().iterator().next().getPort()); return url.openConnection(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Arrays.java,join,public static String  (String separator Object... values){ StringBuilder builder=new StringBuilder(); boolean first=true; if (values != null) { for ( Object value : values) { if (first) { first=false; } else { builder.append(separator); } builder.append(value); } } return builder.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,assertAssertionError,"public static AssertionError  (Block block) throws Exception { AssertionError answer=null; try { block.invoke(); } catch ( AssertionError e) { answer=e; System.out.println(""Caught expected assertion failure: "" + e); } catch ( Exception e) { throw e; } if (answer == null) { throw new AssertionError(""Expected an assertion error from block: "" + block); } Asserts.LOG.info(""Caught expected assertion failure: "" + answer); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,assertException,"public static Exception  (Block block) throws Exception { Exception answer=null; try { block.invoke(); } catch ( Exception e) { answer=e; System.out.println(""Caught expected assertion failure: "" + e); } if (answer == null) { throw new AssertionError(""Expected an Exception from block: "" + block); } Asserts.LOG.info(""Caught expected assertion failure: "" + answer); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,assertForPeriod,public static void  (long timeoutMs Block block) throws Exception { long end=System.currentTimeMillis() + timeoutMs; while (true) { if (System.currentTimeMillis() > end) { break; } try { block.invoke(); } catch ( AssertionError e) { if (isVerboseWaitMessage()) { e.printStackTrace(); } throw e; } catch ( Throwable e) { if (isVerboseWaitMessage()) { e.printStackTrace(); } throw new AssertionError(e); } try { Thread.sleep(1000); } catch ( InterruptedException e) { e.printStackTrace(); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,assertWaitFor,public static void  (Block block) throws Exception { assertWaitFor(30 * 1000 block); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Asserts.java,isVerboseWaitMessage,"protected static boolean  (){ String value=System.getenv(""FABRIC8_VERBOSE_ASSERT""); return value != null && value.equalsIgnoreCase(""true""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\AvailablePortFinder.java,available,"public static boolean  (int port) throws IllegalArgumentException { if (port < currentMinPort.get() || port > MAX_PORT_NUMBER) { throw new IllegalArgumentException(""Invalid start currentMinPort: "" + port); } ServerSocket ss=null; DatagramSocket ds=null; try { ss=new ServerSocket(port); ss.setReuseAddress(true); ds=new DatagramSocket(port); ds.setReuseAddress(true); return true; } catch ( IOException e) { } finally { if (ds != null) { ds.close(); } if (ss != null) { try { ss.close(); } catch ( IOException e) { } } } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\AvailablePortFinder.java,getNextAvailable,"public static synchronized int  (int fromPort){ if (fromPort < currentMinPort.get() || fromPort > MAX_PORT_NUMBER) { throw new IllegalArgumentException(""From port number not in valid range: "" + fromPort); } for (int i=fromPort; i <= MAX_PORT_NUMBER; i++) { if (available(i)) { LOG.info(""getNextAvailable({}) -> {}"" fromPort i); return i; } } throw new NoSuchElementException(""Could not find an available port above "" + fromPort); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\AvailablePortFinder.java,run,public void  (){ try { LOCK.close(); } catch ( Exception ex) { } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Base64Encoder.java,decode,"public static byte[]  (byte[] eData){ if (eData == null) { throw new IllegalArgumentException(""Cannot decode null""); } byte[] cleanEData=eData.clone(); int cleanELength=0; for ( byte anEData : eData) { if (anEData < 256 && CODES[anEData] < 64) { cleanEData[cleanELength++]=anEData; } } int dLength=(cleanELength / 4) * 3; switch (cleanELength % 4) { case 3: dLength+=2; break; case 2: dLength++; break; } byte[] dData=new byte[dLength]; int dIndex=0; for (int i=0; i < eData.length; i+=4) { if ((i + 3) > eData.length) { throw new IllegalArgumentException(""byte array is not a valid com.sun.syndication.io.impl.Base64 encoding""); } int e1=CODES[cleanEData[i]]; int e2=CODES[cleanEData[i + 1]]; int e3=CODES[cleanEData[i + 2]]; int e4=CODES[cleanEData[i + 3]]; dData[dIndex++]=(byte)((e1 << 2) | (e2 >> 4)); if (dIndex < dData.length) { dData[dIndex++]=(byte)((e2 << 4) | (e3 >> 2)); } if (dIndex < dData.length) { dData[dIndex++]=(byte)((e3 << 6) | (e4)); } } return dData; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Base64Encoder.java,encode,"public static byte[]  (byte[] dData){ if (dData == null) { throw new IllegalArgumentException(""Cannot encode null""); } byte[] eData=new byte[((dData.length + 2) / 3) * 4]; int eIndex=0; for (int i=0; i < dData.length; i+=3) { int d1; int d2=0; int d3=0; int e1; int e2; int e3; int e4; int pad=0; d1=dData[i]; if ((i + 1) < dData.length) { d2=dData[i + 1]; if ((i + 2) < dData.length) { d3=dData[i + 2]; } else { pad=1; } } else { pad=2; } e1=ALPHASET[(d1 & I6O2) >> 2]; e2=ALPHASET[(d1 & O6I2) << 4 | (d2 & I4O4) >> 4]; e3=ALPHASET[(d2 & O4I4) << 2 | (d3 & I2O6) >> 6]; e4=ALPHASET[(d3 & O2I6)]; eData[eIndex++]=(byte)e1; eData[eIndex++]=(byte)e2; eData[eIndex++]=(pad < 2) ? (byte)e3 : (byte)'='; eData[eIndex++]=(pad < 1) ? (byte)e4 : (byte)'='; } return eData; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Base64Encoder.java,main,"public static void  (String[] args) throws Exception { String s=""\nPGRpdiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCI+V2UncmUgcHJvcG9zaW5nIDxhIGhy\n"" + ""ZWY9Imh0dHA6Ly93d3cuZ29vZ2xlLmNvbS9jb3Jwb3JhdGUvc29mdHdhcmVfcHJpbmNpcGxlcy5odG1sIj5z\n"" + ""b21lIGd1aWRlbGluZXMgPC9hPnRvIGhlbHAgY3VyYiB0aGUgcHJvYmxlbSBvZiBJbnRlcm5ldCBzb2Z0d2Fy\n""+ ""ZSB0aGF0IGluc3RhbGxzIGl0c2VsZiB3aXRob3V0IHRlbGxpbmcgeW91LCBvciBiZWhhdmVzIGJhZGx5IG9u\n""+ ""Y2UgaXQgZ2V0cyBvbiB5b3VyIGNvbXB1dGVyLiBXZSd2ZSBiZWVuIGhlYXJpbmcgYSBsb3Qgb2YgY29tcGxh\n""+ ""aW50cyBhYm91dCB0aGlzIGxhdGVseSBhbmQgaXQgc2VlbXMgdG8gYmUgZ2V0dGluZyB3b3JzZS4gV2UgdGhp\n""+ ""bmsgaXQncyBpbXBvcnRhbnQgdGhhdCB5b3UgcmV0YWluIGNvbnRyb2wgb2YgeW91ciBjb21wdXRlciBhbmQg\n""+ ""dGhhdCB0aGVyZSBiZSBzb21lIGNsZWFyIHN0YW5kYXJkcyBpbiBvdXIgaW5kdXN0cnkuIExldCB1cyBrbm93\n""+ ""IGlmIHlvdSB0aGluayB0aGVzZSBndWlkZWxpbmVzIGFyZSB1c2VmdWwgb3IgaWYgeW91IGhhdmUgc3VnZ2Vz\n""+ ""dGlvbnMgdG8gaW1wcm92ZSB0aGVtLgo8YnIgLz4KPGJyIC8+Sm9uYXRoYW4gUm9zZW5iZXJnCjxiciAvPgo8\n""+ ""L2Rpdj4K\n""; System.out.println(decode(s)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ChecksumUtils.java,checksum,public static long  (InputStream is) throws IOException { try { CRC32 crc=new CRC32(); byte[] buffer=new byte[8192]; int l; while ((l=is.read(buffer)) > 0) { crc.update(buffer 0 l); } return crc.getValue(); } finally { if (is != null) { try { is.close(); } catch ( IOException e) { } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ChecksumUtils.java,checksumFile,public static long  (File file) throws IOException { return checksum(new FileInputStream(file)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ChecksumUtils.java,loadInstalledChecksumCache,"public static Map<File Long>  (File dir){ Map<File Long> answer=new HashMap<File Long>(); File cacheFile=new File(dir FOLDER_CHECKSUM_CACHE); if (cacheFile.exists() && cacheFile.isFile()) { Properties properties=new Properties(); try { properties.load(new FileReader(cacheFile)); } catch ( IOException e) { LOG.warn(""Failed to load checksum cache file "" + cacheFile + "". ""+ e e); } Set<Map.Entry<Object Object>> entries=properties.entrySet(); for ( Map.Entry<Object Object> entry : entries) { Object key=entry.getKey(); if (key != null) { String keyText=key.toString(); Object value=entry.getValue(); if (value != null) { String valueText=value.toString(); try { long number=Long.parseLong(valueText); answer.put(new File(dir keyText) number); } catch ( NumberFormatException e) { LOG.warn(""Failed to parse checksum '"" + valueText + ""' in ""+ cacheFile+ "". ""+ e e); } } } } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ChecksumUtils.java,saveInstalledChecksumCache,"public static void  (File dir Map<File Long> checksums) throws IOException { File cacheFile=new File(dir FOLDER_CHECKSUM_CACHE); Properties properties=new Properties(); Set<Map.Entry<File Long>> entries=checksums.entrySet(); for ( Map.Entry<File Long> entry : entries) { properties.put(entry.getKey().getName() """" + entry.getValue()); } properties.store(new FileWriter(cacheFile) ""Updated on "" + new Date()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ClassLoaders.java,withContextClassLoader,public static <T>T  (ClassLoader classLoader Callable<T> callable) throws Exception { ClassLoader oldClassLoader=Thread.currentThread().getContextClassLoader(); try { Thread.currentThread().setContextClassLoader(classLoader); return callable.call(); } finally { Thread.currentThread().setContextClassLoader(oldClassLoader); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Closeables.java,closeQuietly,public static void  (Reader closeable){ if (closeable != null) { try { closeable.close(); } catch ( Exception ex) { } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Collectors.java,Collectors,public  (Collector<T>... collectors){ super(); this.collectors.addAll(Arrays.asList(collectors)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Collectors.java,addCollection,public void  (final Collection<T> items){ collectors.add(new Collector<T>(){ @Override public Collection<T> getCollection(){ return items; } } ); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Collectors.java,addCollector,public void  (Collector<T> collector){ collectors.add(collector); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Collectors.java,getCollection,@Override public Collection<T>  (){ return items; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Dictionaries.java,readString,public static String  (Dictionary dictionary String key String defaultValue){ Object obj=dictionary.get(key); if (obj == null) { return defaultValue; } else if (obj instanceof String) { return (String)obj; } else { return String.valueOf(obj); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CompositeFilter.java,CompositeFilter,public  (Collection<Filter<T>> filters){ this.filters=filters; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CompositeFilter.java,isEmpty,public boolean  (){ return filters.isEmpty(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CompositeFilter.java,matches,@Override public boolean  (T t){ for ( Filter<T> filter : filters) { if (filter.matches(t)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CompositeFilter.java,toString,"@Override public String  (){ return ""CompsiteFilter"" + filters; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,stripSuffix,public static String  (String value String suffix){ if (value.endsWith(suffix)) { return value.substring(0 value.length() - suffix.length()); } else { return value; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,substituteChecksum,"public static String  (String key){ InputStream is=null; try { URL url=new URL(key.substring(""checksum:"".length())); is=url.openStream(); return String.valueOf(ChecksumUtils.checksum(is)); } catch ( Exception ex) { return ""0""; } finally { Closeables.closeQuietly(is); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,substituteProfileProperty,"public static String  (String key Map<String Map<String String>> configs){ String pid=key.substring(""profile:"".length() key.indexOf(""/"")); String propertyKey=key.substring(key.indexOf(""/"") + 1); Map<String String> targetProps=configs.get(pid); if (targetProps != null && targetProps.containsKey(propertyKey)) { return targetProps.get(propertyKey); } else { return key; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,toBytes,public static byte[]  (Map<String String> source){ return toBytes(toProperties(source)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,toMap,public static Map<String String>  (byte[] source){ return toMap(toProperties(source)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,toProperties,"public static Properties  (String source){ Properties rc=new Properties(); try { rc.load(new StringReader(source)); } catch ( IOException ex) { throw new IllegalArgumentException(""Cannot load properties from: "" + source ex); } return rc; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,toString,"public static String  (Properties source){ StringWriter writer=new StringWriter(); try { source.store(writer null); } catch ( IOException ex) { throw new IllegalArgumentException(""Cannot store properties"" ex); } return writer.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DataStoreUtils.java,toStringProperties,public static Properties  (Map<String ?> source){ Properties rc=new Properties(); for ( Map.Entry<String ?> entry : source.entrySet()) { Object value=entry.getValue(); if (value != null) { rc.put(entry.getKey() value.toString()); } } return rc; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,count,public int  (String key){ Integer answer=keyToCount.get(key); return answer == null ? 0 : answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,decrement,public int  (String key){ int count=count(key) - 1; if (count <= 0) { keyToCount.remove(key); return 0; } else { setCount(key count); return count; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,decrementAll,public void  (List<String> keys){ for ( String key : keys) { decrement(key); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,increment,public int  (String key){ int count=count(key) + 1; setCount(key count); return count; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,incrementAll,public void  (Iterable<String> keys){ for ( String key : keys) { increment(key); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,keySet,public Set<String>  (){ return keyToCount.keySet(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,setCount,public void  (String key int value){ keyToCount.put(key value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,toString,"@Override public String  (){ return ""CountingMap{"" + keyToCount + '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\CountingMap.java,total,public int  (){ int answer=0; for ( Integer value : keyToCount.values()) { if (value != null) { answer+=value; } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,addChildElement,public static Element  (Node parent String elementName String textContent){ Element element=addChildElement(parent elementName); element.setTextContent(textContent); return element; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,detach,public static void  (Node node){ if (node != null) { Node parentNode=node.getParentNode(); if (parentNode != null) { parentNode.removeChild(node); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,firstChild,public static Element  (Element element String name){ NodeList nodes=element.getChildNodes(); if (nodes != null) { for (int i=0  size=nodes.getLength(); i < size; i++) { Node item=nodes.item(i); if (item instanceof Element) { Element childElement=(Element)item; if (name.equals(childElement.getTagName())) { return childElement; } } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,firstChildElement,public static Element  (Node node){ if (node != null) { NodeList nodes=node.getChildNodes(); for (int i=0  size=nodes.getLength(); i < size; i++) { Node item=nodes.item(i); if (item instanceof Element) { return (Element)item; } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,firstChildTextContent,public static String  (Element element String name){ Element child=DomHelper.firstChild(element name); if (child != null) { return child.getTextContent(); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,getTransformer,public static Transformer  () throws TransformerConfigurationException { if (transformer == null) { transformer=getTransformerFactory().newTransformer(); } return transformer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,getTransformerFactory,public static TransformerFactory  (){ if (transformerFactory == null) { transformerFactory=TransformerFactory.newInstance(); } return transformerFactory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,removeChildren,public static void  (Element element){ while (true) { Node child=element.getFirstChild(); if (child == null) { return; } element.removeChild(child); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,removeNextSiblingText,public static void  (Element element){ while (true) { Node sibling=element.getNextSibling(); if (sibling instanceof Text) { detach(sibling); } else { break; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,removePreviousSiblingText,public static void  (Element element){ while (true) { Node sibling=element.getPreviousSibling(); if (sibling instanceof Text) { detach(sibling); } else { break; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,replaceWith,public static void  (Node oldNode Node newNode){ Node parentNode=oldNode.getParentNode(); if (parentNode != null) { parentNode.replaceChild(newNode oldNode); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,save,public static void  (Document document File file) throws FileNotFoundException  TransformerException { Transformer transformer=getTransformer(); transformer.transform(new DOMSource(document) new StreamResult(new FileOutputStream(file))); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,setTransformer,public static void  (Transformer transformer){ DomHelper.transformer=transformer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,setTransformerFactory,public static void  (TransformerFactory transformerFactory){ DomHelper.transformerFactory=transformerFactory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\DomHelper.java,toXml,public static String  (Document document) throws TransformerException { Transformer transformer=getTransformer(); StringWriter buffer=new StringWriter(); transformer.transform(new DOMSource(document) new StreamResult(buffer)); return buffer.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ExecParseUtils.java,isDoubleQuoted,"protected static boolean  (String input){ if (input == null || input.trim().length() == 0) { return false; } return input.matches(""(^"" + QUOTE_CHAR + ""{2}([^""+ QUOTE_CHAR+ ""]+)""+ QUOTE_CHAR+ ""{2})""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ExecParseUtils.java,isSingleQuoted,"protected static boolean  (String input){ if (input == null || input.trim().length() == 0) { return false; } return input.matches(""(^"" + QUOTE_CHAR + ""{1}([^""+ QUOTE_CHAR+ ""]+)""+ QUOTE_CHAR+ ""{1})""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ExecParseUtils.java,splitToWhiteSpaceSeparatedTokens,"public static List<String>  (String input){ if (input == null) { return new ArrayList<String>(); } StringTokenizer tokenizer=new StringTokenizer(input.trim() QUOTE_CHAR + WHITESPACE true); List<String> tokens=new ArrayList<String>(); StringBuilder quotedText=new StringBuilder(); while (tokenizer.hasMoreTokens()) { String token=tokenizer.nextToken(); if (QUOTE_CHAR.equals(token)) { quotedText.append(QUOTE_CHAR); String buffer=quotedText.toString(); if (isSingleQuoted(buffer) || isDoubleQuoted(buffer)) { tokens.add(buffer.substring(1 buffer.length() - 1)); quotedText=new StringBuilder(); } } else if (WHITESPACE.equals(token)) { if (quotedText.length() > 0) { quotedText.append(WHITESPACE); } } else { if (quotedText.length() > 0) { quotedText.append(token); } else { tokens.add(token); } } } if (quotedText.length() > 0) { throw new IllegalArgumentException(""Invalid quoting found in args "" + quotedText); } return tokens; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricVersionUtils.java,getReleaseVersion,"public static synchronized String  (){ if (version != null) { return version; } InputStream is=null; try { Properties p=new Properties(); is=FabricVersionUtils.class.getResourceAsStream(""/META-INF/maven/io.fabric8/fabric-utils/pom.properties""); if (is != null) { p.load(is); version=p.getProperty(""version"" """"); } } catch ( Exception e) { } finally { if (is != null) { IOHelpers.close(is); } } if (version == null) { Package aPackage=FabricVersionUtils.class.getPackage(); if (aPackage != null) { version=aPackage.getImplementationVersion(); if (version == null) { version=aPackage.getSpecificationVersion(); } } } if (version == null) { version=""""; } return version; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,FileChangeInfo,public  (long length long checksum){ this.length=length; this.checksum=checksum; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,isValidContainerName,public static boolean  (String containerName){ return containerName != null && !containerName.isEmpty() && ALLOWED_CONTAINER_NAMES_PATTERN.matcher(containerName).matches(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,isValidName,@Deprecated public static boolean  (String containerName){ return isValidContainerName(containerName); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; FileChangeInfo that=(FileChangeInfo)o; if (checksum != that.checksum) return false; if (length != that.length) return false; retur
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,isValidProfileName,public static boolean  (String name){ return name != null && !name.isEmpty() && ALLOWED_PROFILE_NAMES_PATTERN.matcher(name).matches(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,getChecksum,public long  (){ return checksum; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,validateContainerName,"public static void  (String containerName){ if (!isValidContainerName(containerName)) { throw new IllegalArgumentException(""Container name '"" + containerName + ""' is invalid. Container name must be: lower-case letters  numbers  and _ or - characters""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,validateContainerNames,public static void  (List<String> containerNames){ if (containerNames != null && !containerNames.isEmpty()) { for ( String containerName : containerNames) { validateContainerName(containerName); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,validateProfileName,"public static void  (String profileName){ if (!isValidProfileName(profileName)) { throw new IllegalArgumentException(""Profile name '"" + profileName + ""' is invalid. Profile name must be: lower-case letters  numbers  and . _ or - characters""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FabricValidations.java,validateProfileNames,public static void  (Collection<String> profileNames){ if (profileNames != null && !profileNames.isEmpty()) { for ( String profileName : profileNames) validateProfileName(profileName); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,getLength,public long  (){ return length; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,hashCode,@Override public int  (){ int result=(int)(length ^ (length >>> 32)); result=31 * result + (int)(checksum ^ (checksum >>> 32)); return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\FileChangeInfo.java,newInstance,public static FileChangeInfo  (File file) throws IOException { if (file != null && file.isFile() && file.exists()) { long checksum=ChecksumUtils.checksumFile(file); return new FileChangeInfo(file.length() checksum); } else { return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,DownloadCycleException,public  (String s){ super(s); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,assertDirectoryExists,"public static void  (File file){ assertExists(file); if (!file.isDirectory()) { throw new IllegalArgumentException(file + "" is not a directory!""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,assertExists,"public static void  (File file){ if (!file.exists()) { throw new IllegalArgumentException(file + "" does not exist""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,assertFileExists,"public static void  (File file){ assertExists(file); if (!file.isFile()) { throw new IllegalArgumentException(file + "" is not a file!""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,copy,public static void  (InputStream is OutputStream os) throws IOException { try { byte[] buffer=new byte[BUFFER_SIZE]; int len; for (; ; ) { len=is.read(buffer); if (len > 0) { os.write(buffer 0 len); } else { break; } } } finally { Closeables.closeQuietly(is); Closeables.closeQuietly(os); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,createTempFile,"public static File  (String path) throws IOException { File dataDir=new File(path); File tmpDir=new File(dataDir ""tmp""); if (!tmpDir.exists() && !tmpDir.mkdirs()) { throw new IOException(""Failed to create tmp dir:"" + tmpDir.getAbsolutePath()); } return File.createTempFile(String.valueOf(lastTmpFileId.incrementAndGet()) "".tmp"" tmpDir); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,findRecursive,public static Set<File>  (File file Filter<File> filter){ Set<File> files=new HashSet<>(); findRecursive(file filter files); return files; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,getExtension,"public static String  (String filename){ if (filename == null) { return null; } int index=filename.lastIndexOf("".""); if (index == -1) { return """"; } else { return filename.substring(index + 1); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,getFileExtension,public static String  (File file){ String fileName=file.getName(); if (fileName != null) { int idx=fileName.lastIndexOf('.'); if (idx > 1) { String answer=fileName.substring(idx + 1); if (answer.length() > 0) { return answer; } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,getFileName,public static String  (String path){ if (path != null) { return new File(path).getName(); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,getRelativePath,public static String  (File rootDir File file) throws IOException { String rootPath=rootDir.getCanonicalPath(); String fullPath=file.getCanonicalPath(); if (fullPath.startsWith(rootPath)) { return fullPath.substring(rootPath.length()); } else { return fullPath; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,guessMediaType,"public static String  (String fileName){ if (fileName.endsWith("".xml"")) { return ""application/xml""; } if (fileName.endsWith("".wadl"")) { return ""application/wadl+xml""; } if (fileName.endsWith("".wsdl"")) { return ""application/wsdl+xml""; } if (fileName.endsWith("".xsd"")) { return ""application/xsd+xml""; } if (fileName.endsWith("".json"")) { return ""application/json""; } if (fileName.endsWith("".html"") || fileName.endsWith("".htm"")) { return ""application/html""; } if (fileName.endsWith("".properties"")) { return ""text/x-java-properties""; } if (fileName.endsWith("".jpg"") || fileName.endsWith("".jpeg"")) { return ""image/jpeg""; } if (fileName.endsWith("".png"")) { return ""image/png""; } if (fileName.endsWith("".gif"")) { return ""image/gif""; } if (fileName.endsWith("".svg"")) { return ""image/svg+xml""; } return ""text/plain""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,initWindowsOs,"private static boolean  (){ String osName=System.getProperty(""os.name"").toLowerCase(Locale.US); return osName.contains(""windows""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,isDirectory,public static boolean  (File file){ return file != null && file.exists() && file.isDirectory(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,isFile,public static boolean  (File file){ return file != null && file.exists() && file.isFile(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,isWindows,public static boolean  (){ return windowsOs; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,normalizePath,public static String  (String path char from char to){ return path.replace(from to); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,readBytes,"public static byte[]  (InputStream in) throws IOException { ByteArrayOutputStream bos=null; if (in == null) { throw new FileNotFoundException(""No InputStream specified""); } try { bos=new ByteArrayOutputStream(); byte[] buffer=new byte[BUFFER_SIZE]; int remaining; while ((remaining=in.read(buffer)) > 0) { bos.write(buffer 0 remaining); } return bos.toByteArray(); } finally { Closeables.closeQuietly(in); Closeables.closeQuietly(bos); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,readLines,public static List<String>  (File file) throws IOException { BufferedReader reader=new BufferedReader(new FileReader(file)); List<String> answer=new ArrayList<String>(); try { while (true) { String line=reader.readLine(); if (line != null) { answer.add(line); } else { break; } } } finally { reader.close(); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,recursiveDelete,public static void  (File file FileFilter filter){ if (filter == null || filter.accept(file)) { if (file.isDirectory()) { File[] files=file.listFiles(); if (files != null) { for ( File child : files) { recursiveDelete(child filter); } } files=file.listFiles(); if (files == null || files.length == 0) { file.delete(); } } else { file.delete(); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,recursiveList,public static Set<File>  (File root FilenameFilter filter){ Set<File> result=new HashSet<>(); if (root != null) { result.add(root); if (root.isDirectory()) { for ( File child : root.listFiles(filter)) { result.addAll(recursiveList(child filter)); } } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,stripLeadingSeparator,"public static String  (String name){ if (name == null) { return null; } while (name.startsWith(""/"") || name.startsWith(File.separator)) { name=name.substring(1); } return name; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,toString,public static String  (File file) throws IOException { return toString(file null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,urlToFile,"public static File  (URL url String tempFilePrefix String tempFilePostfix) throws IOException { LinkedHashSet<URL> original=ACTIVE_DOWNLOADS.get(); LinkedHashSet<URL> downloads=original; if (downloads == null) { downloads=new LinkedHashSet<URL>(); ACTIVE_DOWNLOADS.set(downloads); } try { if (downloads.contains(url)) { throw new DownloadCycleException(""Download cycle detected: "" + downloads); } downloads.add(url); try { String fileName=url.getFile(); File file=new File(fileName); if (!file.exists()) { file=File.createTempFile(tempFilePrefix tempFilePostfix); InputStream in=url.openStream(); IOHelpers.writeTo(file in); } return file; } finally { downloads.remove(url); } } finally { if (original == null) { ACTIVE_DOWNLOADS.remove(); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,writeLines,public static void  (File file List<String> lines) throws IOException { PrintWriter writer=new PrintWriter(new FileWriter(file)); try { for ( String line : lines) { writer.println(line); } } finally { writer.close(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Files.java,writeToFile,"public static void  (File file byte[] content) throws IOException { FileOutputStream fos=null; try { if (file == null) { throw new FileNotFoundException(""No file specified.""); } else if (!file.exists() && !file.getParentFile().exists() && !file.getParentFile().mkdirs()) { throw new FileNotFoundException(""Could not find or create file:"" + file.getName()); } fos=new FileOutputStream(file); fos.write(content); } finally { Closeables.closeQuietly(fos); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Functions.java,apply,@Override public T  (T value){ return value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Functions.java,chopLength,"public static Function<String String>  (final int maxLen){ return new Function<String String>(){ @Override public String toString(){ return ""chopLength("" + maxLen + "")""; } @Override public String apply( String value){ if (value == null) { return null; } if (value.length() > maxLen) { return value.substring(0 maxLen); } return value; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Functions.java,noop,"public static <T>Function<T T>  (){ return new Function<T T>(){ @Override public String toString(){ return ""noopFunction()""; } @Override public T apply( T value){ return value; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Functions.java,toString,"@Override public String  (){ return ""noopFunction()""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,compositeFilter,public static <T>Filter<T>  (List<Filter<T>> filters){ if (filters.size() == 0) { return falseFilter(); } else if (filters.size() == 1) { return filters.get(0); } else { return new CompositeFilter<T>(filters); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,containsAnyString,public static Filter<String>  (String... textValues){ List<Filter<String>> filters=new ArrayList<>(); for ( String text : textValues) { filters.add(containsString(text)); } return compositeFilter(filters); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,containsString,"public static Filter<String>  (final String text){ return new Filter<String>(){ public boolean matches( String t){ return t != null && t.indexOf(text) >= 0; } @Override public String toString(){ return ""Contains("" + text + "")""; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,createStringFilter,"public static Filter<String>  (final String text){ if (text.startsWith(""!"")) { String remaining=text.substring(1); return not(createStringFilter(remaining)); } else { if (text == null || text.length() == 0 || text.startsWith(""*"")) { return trueFilter(); } else { if (text.endsWith(""*"")) { final String prefix=text.substring(0 text.length() - 1); return new Filter<String>(){ public boolean matches( String s){ return s.startsWith(prefix); } @Override public String toString(){ return ""StartsWith("" + prefix + "")""; } } ; } else { return new Filter<String>(){ public boolean matches( String s){ return text.equals(s); } @Override public String toString(){ return ""Equals("" + text + "")""; } } ; } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,createStringFilters,public static Filter<String>  (Iterable<String> patterns){ List<Filter<String>> filters=new ArrayList<>(); for ( String pattern : patterns) { Filter<String> filter=createStringFilter(pattern); filters.add(filter); } return or(filters); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,falseFilter,"public static <T>Filter<T>  (){ return new Filter<T>(){ public boolean matches( T t){ return false; } @Override public String toString(){ return ""FalseFilter""; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,filter,public static <T>List<T>  (Iterable<T> values Filter<T> filter){ List<T> answer=new ArrayList<T>(); if (values != null) { for ( T value : values) { if (filter.matches(value)) { answer.add(value); } } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,isEmpty,public static <T>boolean  (Filter<T> filter){ boolean empty=false; if (filter instanceof CompositeFilter) { CompositeFilter<T> compositeFilter=(CompositeFilter<T>)filter; empty=compositeFilter.isEmpty(); } return empty; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,matchRandomElement,public static <T>T  (List<T> list){ int size=list.size(); if (size < 1) { return null; } else if (size == 1) { return list.get(0); } else { while (true) { int index=(int)Math.round(Math.random() * size); if (index >= 0 && index < size) { return list.get(index); } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,matches,public boolean  (String s){ return text.equals(s); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,not,"public static <T>Filter<T>  (final Filter<T> filter){ return new Filter<T>(){ public boolean matches( T t){ return !filter.matches(t); } @Override public String toString(){ return ""Not("" + filter + "")""; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,or,"public static <T>Filter<T>  (final List<Filter<T>> filters){ return new Filter<T>(){ public boolean matches( T t){ for ( Filter filter : filters) { if (filter != null && filter.matches(t)) { return true; } } return false; } @Override public String toString(){ return ""OrFilter"" + Arrays.asList(filters); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,toString,"@Override public String  (){ return ""Equals("" + text + "")""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Filters.java,trueFilter,"public static <T>Filter<T>  (){ return new Filter<T>(){ public boolean matches( T t){ return true; } @Override public String toString(){ return ""TrueFilter""; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\GitHelpers.java,extractGitUrl,"public static String  (String configText){ String remote=null; String lastUrl=null; String firstUrl=null; BufferedReader reader=new BufferedReader(new StringReader(configText)); Map<String String> remoteUrls=new HashMap<>(); while (true) { String line=null; try { line=reader.readLine(); } catch ( IOException e) { } if (line == null) { break; } if (line.startsWith(""[remote "")) { String[] parts=line.split(""\""""); if (parts.length > 1) { remote=parts[1]; } } else if (line.startsWith(""["")) { remote=null; } else if (remote != null && line.length() > 0 && Character.isWhitespace(line.charAt(0))) { String trimmed=line.trim(); if (trimmed.startsWith(""url "")) { String[] parts=trimmed.split(""="" 2); if (parts.length > 1) { lastUrl=parts[1].trim(); if (firstUrl == null) { firstUrl=lastUrl; } remoteUrls.put(remote lastUrl); } } } } String answer=null; if (remoteUrls.size() == 1) { return lastUrl; } else if (remoteUrls.size() > 1) { answer=remoteUrls.get(""origin""); if (answer == null) { answer=firstUrl; } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\GitHelpers.java,findGitFolder,"public static File  (File basedir){ File gitDir=new File(basedir "".git""); if (gitDir.exists() && gitDir.isDirectory()) { return gitDir; } File parent=basedir.getParentFile(); if (parent != null) { return findGitFolder(parent); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,chooseAddress,"private static InetAddress  (String preferred) throws UnknownHostException { Set<InetAddress> addresses=getAddresses(); if (preferred != null && !preferred.isEmpty()) { try { InetAddress preferredAddress=InetAddress.getByName(preferred); if (addresses != null && addresses.contains(preferredAddress)) { LOG.info(""preferred address is "" + preferredAddress.getHostAddress() + "" for host ""+ preferredAddress.getHostName()); return preferredAddress; } } catch ( UnknownHostException e) { } for ( InetAddress address : addresses) { if (preferred.equals(address.getHostName())) { return address; } } StringBuffer hostNameBuffer=new StringBuffer(); for ( InetAddress address : addresses) { if (hostNameBuffer.length() > 0) { hostNameBuffer.append(""  ""); } hostNameBuffer.append(address.getHostName() + ""/"" + address.getHostAddress()); } LOG.warn(""Could not find network address for preferred '"" + preferred + ""' when the addresses were: ""+ hostNameBuffer); } if (addresses.contains(InetAddress.getLocalHost())) { return InetAddress.getLocalHost(); } else if (addresses != null && !addresses.isEmpty()) { return addresses.toArray(new InetAddress[addresses.size()])[0]; } else { return InetAddress.getLocalHost(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,getAddresses,public static Set<InetAddress>  (){ Set<InetAddress> allAddresses=new LinkedHashSet<InetAddress>(); Map<String Set<InetAddress>> interfaceAddressMap=getNetworkInterfaceAddresses(); for ( Map.Entry<String Set<InetAddress>> entry : interfaceAddressMap.entrySet()) { Set<InetAddress> addresses=entry.getValue(); if (!addresses.isEmpty()) { for ( InetAddress address : addresses) { allAddresses.add(address); } } } return allAddresses; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,getLocalHostName,public static String  () throws UnknownHostException { String preffered=System.getProperty(PREFERED_ADDRESS_PROPERTY_NAME); return chooseAddress(preffered).getHostName(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,getLocalIp,public static String  () throws UnknownHostException { String preffered=System.getProperty(PREFERED_ADDRESS_PROPERTY_NAME); return chooseAddress(preffered).getHostAddress(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\HostUtils.java,getNetworkInterfaceAddresses,"public static Map<String Set<InetAddress>>  (){ Map<String Set<InetAddress>> interfaceAddressMap=new TreeMap<String Set<InetAddress>>(); try { Enumeration ifaces=NetworkInterface.getNetworkInterfaces(); while (ifaces.hasMoreElements()) { NetworkInterface iface=(NetworkInterface)ifaces.nextElement(); if (iface.isUp() && !iface.isLoopback()) { String name=iface.getName(); Enumeration<InetAddress> ifaceAdresses=iface.getInetAddresses(); while (ifaceAdresses.hasMoreElements()) { InetAddress ia=ifaceAdresses.nextElement(); if (!ia.isLoopbackAddress() && ia.getHostAddress().indexOf("":"") == -1) { Set<InetAddress> addresses=interfaceAddressMap.get(name); if (addresses == null) { addresses=new LinkedHashSet<InetAddress>(); } addresses.add(ia); interfaceAddressMap.put(name addresses); } } } } } catch ( SocketException ex) { } return interfaceAddressMap; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,close,public static void  (Closeable... closeables){ for ( Closeable c : closeables) { try { if (c != null) { c.close(); } } catch ( IOException e) { } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,copy,public static void  (Reader reader Writer writer) throws IOException { try { char[] buffer=new char[8192]; int len; for (; ; ) { len=reader.read(buffer); if (len > 0) { writer.write(buffer 0 len); } else { writer.flush(); break; } } } finally { close(reader writer); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,loadFully,public static String  (URL url) throws IOException { ByteArrayOutputStream baos=new ByteArrayOutputStream(); byte[] buf=new byte[4096]; int l; InputStream is=url.openStream(); try { while ((l=is.read(buf)) >= 0) { baos.write(buf 0 l); } } finally { is.close(); } return baos.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,readFully,public static String  (Reader r) throws IOException { StringWriter w=new StringWriter(); try { copy(r w); return w.toString(); } finally { close(r w); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,readLines,public static List<String>  (File file) throws IOException { List<String> overrides=new ArrayList<String>(); if (file.exists()) { InputStream is=new FileInputStream(file); try { BufferedReader reader=new BufferedReader(new InputStreamReader(is)); String line=null; while ((line=reader.readLine()) != null) { overrides.add(line); } } finally { is.close(); } } return overrides; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,writeFully,public static void  (File file String content) throws IOException { if (content == null) { file.delete(); } else { Reader r=new StringReader(content); Writer w=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file))); try { copy(r w); } finally { close(r w); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,writeLines,public static void  (File file List<String> lines) throws IOException { OutputStream os=new FileOutputStream(file); try { BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(os)); for ( String over : lines) { writer.write(over); writer.newLine(); } writer.close(); } finally { os.close(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\IOHelpers.java,writeTo,public static void  (OutputStream outputStream InputStream in int bufferSize boolean close) throws IOException { BufferedOutputStream out=new BufferedOutputStream(outputStream bufferSize); BufferedInputStream bufferedIn=new BufferedInputStream(in bufferSize); while (true) { int b=bufferedIn.read(); if (b >= 0) { out.write(b); } else { in.close(); if (close) { out.close(); } else { out.flush(); } return; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\JMXUtils.java,registerMBean,public static void  (Object bean MBeanServer mBeanServer ObjectName objectName) throws Exception { if (!mBeanServer.isRegistered(objectName)) { mBeanServer.registerMBean(bean objectName); } else { unregisterMBean(mBeanServer objectName); mBeanServer.registerMBean(bean objectName); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\JMXUtils.java,unregisterMBean,public static void  (MBeanServer mBeanServer ObjectName objectName) throws Exception { if (mBeanServer.isRegistered(objectName)) { mBeanServer.unregisterMBean(objectName); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServiceNotFoundException.java,KubernetesServiceNotFoundException,"public  (String serviceName String missingEnvironmentVariable){ super(""Service "" + serviceName + "" not found. Missing environment variable $""+ missingEnvironmentVariable); this.serviceName=serviceName; this.missingEnvironmentVariable=missingEnvironmentVariable; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServiceNotFoundException.java,getMissingEnvironmentVariable,public String  (){ return missingEnvironmentVariable; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServiceNotFoundException.java,getServiceName,public String  (){ return serviceName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,write,"public static void  (Writer writer Object value) throws IOException { if (value instanceof Map) { writeObject(writer (Map)value); } else if (value instanceof Collection) { writeArray(writer (Collection)value); } else if (value instanceof Number) { writeNumber(writer (Number)value); } else if (value instanceof String) { writeString(writer (String)value); } else if (value instanceof Boolean) { writeBoolean(writer (Boolean)value); } else if (value == null) { writeNull(writer); } else { throw new IllegalArgumentException(""Unsupported value: "" + value); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,writeArray,private static void  (Writer writer Collection<?> value) throws IOException { writer.append('['); boolean first=true; for ( Object obj : value) { if (!first) { writer.append(' '); } else { first=false; } write(writer obj); } writer.append(']'); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,writeBoolean,private static void  (Writer writer Boolean value) throws IOException { writer.append(Boolean.toString(value)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,writeNull,"private static void  (Writer writer) throws IOException { writer.append(""null""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,writeNumber,private static void  (Writer writer Number value) throws IOException { writer.append(value.toString()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,writeObject,private static void  (Writer writer Map<? ?> value) throws IOException { writer.append('{'); boolean first=true; for ( Map.Entry entry : value.entrySet()) { if (!first) { writer.append(' '); } else { first=false; } writeString(writer (String)entry.getKey()); writer.append(':'); write(writer entry.getValue()); } writer.append('}'); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonWriter.java,writeString,"private static void  (Writer writer String value) throws IOException { writer.append('""'); for (int i=0; i < value.length(); i++) { char c=value.charAt(i); switch (c) { case '\""': case '\\': case '\b': case '\f': case '\n': case '\r': case '\t': writer.append('\\'); writer.append(c); break; default : if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) { String s=Integer.toHexString(c); writer.append('\\'); writer.append('u'); for (int j=s.length(); j < 4; j++) { writer.append('0'); } writer.append(s); } else { writer.append(c); } break; } } writer.append('""'); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Lists.java,isNullOrEmpty,public static <T>boolean  (List<T> list){ return list == null || list.isEmpty(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Lists.java,mutableList,public static <T>List<T>  (List<T> optionalList){ if (optionalList == null) { return new ArrayList<>(); } else { return new ArrayList<>(optionalList); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Lists.java,newArrayList,public static <T>List<T>  (T... items){ List<T> answer=new ArrayList<>(items.length); for ( T item : items) { answer.add(item); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Lists.java,notNullList,public static <T>List<T>  (List<T> list){ if (list == null) { return Collections.EMPTY_LIST; } else { return list; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,JsonReader, (Reader reader){ this.reader=reader; recorder=new StringBuilder(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,endOfText,private boolean  (){ return current == -1; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,error,"private IOException  (String message){ return new IOException(message + "" at "" + line+ "":""+ column); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,expected,"private IOException  (String expected){ if (endOfText()) { return error(""Unexpected end of input""); } return error(""Expected "" + expected); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,isDigit,private static boolean  (int ch){ return ch >= '0' && ch <= '9'; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,isHexDigit,private static boolean  (int ch){ return ch >= '0' && ch <= '9' || ch >= 'a' && ch <= 'f' || ch >= 'A' && ch <= 'F'; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,isWhiteSpace,private static boolean  (int ch){ return ch == ' ' || ch == '\t' || ch == '\n' || ch == '\r'; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,parse,"public Object  () throws IOException { read(); skipWhiteSpace(); Object result=readValue(); skipWhiteSpace(); if (!endOfText()) { throw error(""Unexpected character""); } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,read,"private void  () throws IOException { if (endOfText()) { throw error(""Unexpected end of input""); } column++; if (current == '\n') { line++; column=0; } current=reader.read(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readAndAppendChar,private boolean  (char ch) throws IOException { if (current != ch) { return false; } recorder.append(ch); read(); return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readAndAppendDigit,private boolean  () throws IOException { if (!isDigit(current)) { return false; } recorder.append((char)current); read(); return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readArray,"private Collection<?>  () throws IOException { read(); Collection<Object> array=new ArrayList<Object>(); skipWhiteSpace(); if (readChar(']')) { return array; } do { skipWhiteSpace(); array.add(readValue()); skipWhiteSpace(); } while (readChar(' ')); if (!readChar(']')) { throw expected(""' ' or ']'""); } return array; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readChar,private boolean  (char ch) throws IOException { if (current != ch) { return false; } read(); return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,serviceToHost,"public static String  (String serviceName){ String hostEnvVar=toServiceHostEnvironmentVariable(serviceName); String answer=Systems.getEnvVarOrSystemProperty(hostEnvVar """"); if (Strings.isNullOrBlank(answer)) { throw new KubernetesServiceNotFoundException(serviceName hostEnvVar); } else { return answer; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,serviceToHostAndPort,"public static String  (String serviceName String portName){ String host=serviceToHost(serviceName); String port=serviceToPort(serviceName portName); return host + "":"" + port; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,serviceToHostOrBlank,"public static String  (String serviceName){ return Systems.getEnvVarOrSystemProperty(toServiceHostEnvironmentVariable(serviceName) """"); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,serviceToPort,"public static String  (String serviceName String portName){ String portEnvVar=toServicePortEnvironmentVariable(serviceName portName); String answer=Systems.getEnvVarOrSystemProperty(portEnvVar """"); if (Strings.isNullOrBlank(answer)) { throw new KubernetesServiceNotFoundException(serviceName portEnvVar); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,serviceToPortOrBlank,"public static String  (String serviceName String portName){ String envVarName=toServicePortEnvironmentVariable(serviceName portName); return Systems.getEnvVarOrSystemProperty(envVarName """"); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,serviceToProtocol,"public static String  (String serviceName String servicePort){ return Systems.getEnvVarOrSystemProperty(toEnvVariable(serviceName + PORT_SUFFIX + ""_""+ servicePort+ PROTO_SUFFIX) DEFAULT_PROTO); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,toEnvVariable,"public static String  (String serviceName){ return serviceName.toUpperCase().replaceAll(""-"" ""_""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,toServiceHostEnvironmentVariable,public static String  (String serviceName){ return toEnvVariable(serviceName + HOST_SUFFIX); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\KubernetesServices.java,toServicePortEnvironmentVariable,"public static String  (String serviceName String portName){ String name=serviceName + PORT_SUFFIX + (Strings.isNotBlank(portName) ? ""_"" + portName : """"); return toEnvVariable(name); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readEscape,"private void  () throws IOException { read(); switch (current) { case '""': case '/': case '\\': recorder.append((char)current); break; case 'b': recorder.append('\b'); break; case 'f': recorder.append('\f'); break; case 'n': recorder.append('\n'); break; case 'r': recorder.append('\r'); break; case 't': recorder.append('\t'); break; case 'u': char[] hexChars=new char[4]; for (int i=0; i < 4; i++) { read(); if (!isHexDigit(current)) { throw expected(""hexadecimal digit""); } hexChars[i]=(char)current; } recorder.append((char)Integer.parseInt(String.valueOf(hexChars) 16)); break; default : throw expected(""valid escape sequence""); } read(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readExponent,"private boolean  () throws IOException { if (!readAndAppendChar('e') && !readAndAppendChar('E')) { return false; } if (!readAndAppendChar('+')) { readAndAppendChar('-'); } if (!readAndAppendDigit()) { throw expected(""digit""); } while (readAndAppendDigit()) { } return true; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readFalse,private Boolean  () throws IOException { read(); readRequiredChar('a'); readRequiredChar('l'); readRequiredChar('s'); readRequiredChar('e'); return Boolean.FALSE; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readFraction,"private boolean  () throws IOException { if (!readAndAppendChar('.')) { return false; } if (!readAndAppendDigit()) { throw expected(""digit""); } while (readAndAppendDigit()) { } return true; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readName,"private String  () throws IOException { if (current != '""') { throw expected(""name""); } readString(); return recorder.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readNull,private Object  () throws IOException { read(); readRequiredChar('u'); readRequiredChar('l'); readRequiredChar('l'); return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readNumber,"private Number  () throws IOException { recorder.setLength(0); readAndAppendChar('-'); int firstDigit=current; if (!readAndAppendDigit()) { throw expected(""digit""); } if (firstDigit != '0') { while (readAndAppendDigit()) { } } readFraction(); readExponent(); return Double.parseDouble(recorder.toString()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readObject,"private Map<String Object>  () throws IOException { read(); Map<String Object> object=new HashMap<String Object>(); skipWhiteSpace(); if (readChar('}')) { return object; } do { skipWhiteSpace(); String name=readName(); skipWhiteSpace(); if (!readChar(':')) { throw expected(""':'""); } skipWhiteSpace(); object.put(name readValue()); skipWhiteSpace(); } while (readChar(' ')); if (!readChar('}')) { throw expected(""' ' or '}'""); } return object; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readRequiredChar,"private void  (char ch) throws IOException { if (!readChar(ch)) { throw expected(""'"" + ch + ""'""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readString,"private String  () throws IOException { read(); recorder.setLength(0); while (current != '""') { if (current == '\\') { readEscape(); } else if (current < 0x20) { throw expected(""valid string character""); } else { recorder.append((char)current); read(); } } read(); return recorder.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readTrue,private Boolean  () throws IOException { read(); readRequiredChar('r'); readRequiredChar('u'); readRequiredChar('e'); return Boolean.TRUE; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,readValue,"private Object  () throws IOException { switch (current) { case 'n': return readNull(); case 't': return readTrue(); case 'f': return readFalse(); case '""': return readString(); case '[': return readArray(); case '{': return readObject(); case '-': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': return readNumber(); default : throw expected(""value""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\json\JsonReader.java,skipWhiteSpace,private void  () throws IOException { while (isWhiteSpace(current) && !endOfText()) { read(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,LoggingOutputStream,public  (Logger logger){ this.logger=logger; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,close,public void  (){ flush(); closed=true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,createBuffer,protected ByteArrayOutputStream  (){ return new ByteArrayOutputStream(bufferSize); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,flush,public void  (){ byte[] bytes=buffer.toByteArray(); if (bytes.length > 0) { String text=new String(bytes); logMessage(text); buffer=createBuffer(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,logMessage,protected void  (String text){ if (text.length() > 0) { logger.info(text); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\LoggingOutputStream.java,write,"public void  (final int b) throws IOException { if (closed) { throw new IOException(""Stream is closed""); } char ch=(char)b; if (ch == '\n') { flush(); } else { buffer.write(b); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,MultiException,public  (String message Collection<Throwable> causes){ super(message); this.causes.addAll(causes); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,addCause,public void  (Throwable e){ causes.add(e); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,getCauses,public Throwable[]  (){ return causes.toArray(new Throwable[causes.size()]); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,printStackTrace,@Override public void  (PrintWriter out){ super.printStackTrace(out); for ( Throwable t : causes) { t.printStackTrace(out); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,throwIf,"public static void  (String message List<Throwable> throwables) throws MultiException { if (throwables != null && !throwables.isEmpty()) { StringBuilder sb=new StringBuilder(message); sb.append("":""); for ( Throwable t : throwables) { sb.append(""\n\t""); sb.append(t.getMessage()); } throw new MultiException(sb.toString() throwables); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\MultiException.java,throwIfCauses,public void  () throws MultiException { if (!causes.isEmpty()) { throw this; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,PROJECT_ATTRIBUTES, (String value){ this.value=value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,getManifest,public static Manifest  (File file) throws IOException { JarFile jar=new JarFile(file); try { return jar.getManifest(); } finally { jar.close(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,getManifestEntry,public static String  (Manifest manifest String attributeName) throws IOException { if (manifest != null) { return manifest.getMainAttributes().getValue(attributeName); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,getManifestEntryMap,"public static Map<Attribute String>  (Manifest manifest Class<? extends Attribute> attributeEnum){ Map<Attribute String> result=new HashMap<Attribute String>(); Attributes mainAttributes=manifest.getMainAttributes(); for ( Attribute attributeName : attributeEnum.getEnumConstants()) { if (mainAttributes.getValue(attributeName.value()) != null && !mainAttributes.getValue(attributeName.value()).contains(""${"")) { result.put(attributeName mainAttributes.getValue(attributeName.value())); } } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Manifests.java,getManifestFromCurrentJar,"public static Manifest  (Class<?> theClazz) throws IOException { String jarPath=theClazz.getProtectionDomain().getCodeSource().getLocation().getPath(); Manifest manifest=null; if (jarPath.endsWith(""/"")) { String manifestPath=jarPath + JarFile.MANIFEST_NAME; manifest=new Manifest(new File(manifestPath).toURI().toURL().openStream()); } else { manifest=Manifests.getManifest(new File(jarPath)); } return manifest; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Millis.java,days,public static long  (int value){ return value * 1000 * 60* 60* 24; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Millis.java,hours,public static long  (int value){ return value * 1000 * 60* 60; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Millis.java,minutes,public static long  (int value){ return value * 1000 * 60; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Millis.java,seconds,public static long  (int value){ return value * 1000; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\NullArgumentException.java,NullArgumentException,public  (String msg){ super(msg); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\NullArgumentException.java,validateNotEmpty,public static void  (Object[] arrayToCheck String argumentName) throws NullArgumentException { validateNotNull(arrayToCheck argumentName); if (arrayToCheck.length == 0) { throw new NullArgumentException(argumentName + IS_EMPTY); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\NullArgumentException.java,validateNotEmptyContent,"public static void  (String[] arrayToCheck boolean trim String argumentName) throws NullArgumentException { validateNotEmpty(arrayToCheck argumentName); for (int i=0; i < arrayToCheck.length; i++) { validateNotEmpty(arrayToCheck[i] arrayToCheck[i] + ""["" + i+ ""]""); if (trim) { validateNotEmpty(arrayToCheck[i].trim() arrayToCheck[i] + ""["" + i+ ""]""); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\NullArgumentException.java,validateNotNull,public static void  (Object obj String objectName) throws NullArgumentException { if (obj == null) { throw new NullArgumentException(objectName + IS_NULL); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,booleanValue,public static boolean  (Map<String ?> map String key boolean defaultValue){ Object obj=map.get(key); if (obj == null) { return defaultValue; } else if (obj instanceof Boolean) { Boolean value=(Boolean)obj; return value.booleanValue(); } else { String text=obj.toString(); return Boolean.parseBoolean(text); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,integerValue,public static Integer  (Map<String ?> map String key Integer defaultValue){ Object obj=map.get(key); if (obj instanceof Integer) { return (Integer)obj; } else if (obj instanceof Number) { Number number=(Number)obj; return number.intValue(); } else if (obj != null) { String text=obj.toString(); if (Strings.isNotBlank(text)) { return Integer.parseInt(text); } } return defaultValue; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,isNullOrEmpty,public static boolean  (Map map){ return map == null || map.isEmpty(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,listValue,public static List  (Map<String Object> map String key){ Object value=null; if (map != null) { value=map.get(key); } if (value instanceof List) { return (List)value; } else if (value instanceof Object[]) { return java.util.Arrays.asList((Object[])value); } else if (value != null) { List list=new ArrayList(); list.add(value); return list; } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,longValue,public static Long  (Map<String ?> map String key Long defaultValue){ Object obj=map.get(key); if (obj instanceof Long) { return (Long)obj; } else if (obj instanceof Number) { Number number=(Number)obj; return number.longValue(); } else if (obj != null) { String text=obj.toString(); if (Strings.isNotBlank(text)) { return Long.parseLong(text); } } return defaultValue; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,nestedValueAsString,public static String  (Map<String Object> map String... names){ int lastIdx=names.length - 1; for (int i=0; i < lastIdx; i++) { if (map == null) { return null; } map=(Map<String Object>)value(map names[i] null); } return valueAsString(map names[lastIdx]); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,parseMap,"public static LinkedHashMap<String String>  (String text){ LinkedHashMap<String String> answer=new LinkedHashMap<>(); if (Strings.isNotBlank(text)) { String[] entries=text.split("" ""); if (entries != null) { for ( String entry : entries) { String[] values=entry.split(""="" 2); if (values != null && values.length == 2) { answer.put(values[0] values[1]); } } } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,putAll,public static <K V>void  (Map<K V> output Map<K V> input K... keys){ for ( K key : keys) { V value=input.get(key); if (value != null) { output.put(key value); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,setStringValues,"public static void  (Map map String key String[] values){ if (values != null) { String text=Arrays.join("" "" values); map.put(key text); } else { map.remove(key); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,setValue,public static void  (Map map String key Object value){ if (value != null) { map.put(key value); } else { map.remove(key); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,stringValue,public static String  (Map map String key String defaultValue){ Object obj=map.get(key); if (obj == null) { return defaultValue; } else if (obj instanceof String) { return (String)obj; } else { return String.valueOf(obj); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,stringValues,"public static String[]  (Map map String key){ Object obj=map.get(key); if (obj instanceof String[]) { return (String[])obj; } else if (obj instanceof String) { String text=(String)obj; return text.split("" ""); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,value,public static Object  (Map<String Object> map String key Object defaultValue){ Object obj=map.get(key); if (obj == null) { return defaultValue; } else { return obj; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,valueAsString,public static String  (Map<String Object> map String key){ if (map != null) { Object value=valueOrNull(map key); if (value != null) { return value.toString(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Maps.java,valueOrNull,protected static Object  (Map<String Object> map String key){ return value(map key null); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,assertNotNull,"public static void  (Object value String name){ if (value == null) { throw new AssertionError(name + "" must be specified""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,compare,public static <T extends Comparable<T>>int  (List<T> a List<T> b){ if (a == b) { return 0; } else if (a == null) { return -1; } else if (b == null) { return 1; } int size=a.size(); int answer=size - b.size(); if (answer == 0) { for (int i=0; i < size; i++) { answer=compare(a.get(i) b.get(i)); if (answer != 0) { break; } } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,equal,public static boolean  (Object a Object b){ if (a == b) { return true; } else { return a != null && b != null && a.equals(b); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,hashCode,public static int  (Object... objects){ int answer=SEED; for ( Object object : objects) { answer*=ODD_PRIME_NUMBER; int objectHash=(object != null) ? object.hashCode() : 0; answer+=objectHash; } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Objects.java,notNull,"public static void  (Object value String name){ if (value == null) { throw new IllegalArgumentException(name + "" must be specified""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ObjectUtils.java,toBytes,"public static byte[]  (Object object){ byte[] result=null; if (object instanceof byte[]) { return (byte[])object; } ByteArrayOutputStream baos=new ByteArrayOutputStream(); ObjectOutputStream oos=null; try { oos=new ObjectOutputStream(baos); oos.writeObject(object); result=baos.toByteArray(); } catch ( IOException e) { LOGGER.error(""Failed to serialize object {}."" object e); } finally { if (oos != null) { try { oos.close(); } catch ( IOException e) { } } if (baos != null) { try { baos.close(); } catch ( IOException e) { } } } return result; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,Pair,public  (A first B second){ this.first=first; this.second=second; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,equals,@Override public boolean  (Object o){ if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; Pair pair=(Pair)o; if (first != null ? !first.equals(pair.first) : pair.first != null) return false; if (second != null ? !second.
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,getFirst,public A  (){ return first; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,getSecond,public B  (){ return second; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,hashCode,@Override public int  (){ int result=first != null ? first.hashCode() : 0; result=31 * result + (second != null ? second.hashCode() : 0); return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Pair.java,toString,"@Override public String  (){ return ""Pair("" + first + ""  ""+ second+ "")""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PasswordEncoder.java,decode,public static String  (String s) throws IllegalArgumentException { return shouldDecodePassword(s) ? Base64Encoder.decode(s.substring(PREFIX.length())) : s; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PasswordEncoder.java,encode,public static String  (String s){ return shouldEncodePassword(s) ? PREFIX + Base64Encoder.encode(s) : s; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PasswordEncoder.java,shouldDecodePassword,"private static boolean  (String s){ if (Boolean.parseBoolean(System.getProperty(""zookeeper.password.encode"" ""true""))) { return s.startsWith(PREFIX); } else { return false; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PasswordEncoder.java,shouldEncodePassword,"private static boolean  (String s){ if (Boolean.parseBoolean(System.getProperty(""zookeeper.password.encode"" ""true""))) { return !s.startsWith(PREFIX); } else { return false; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PatchUtils.java,appendVersionRange,public static String  (String url String range){ return url + OVERRIDE_RANGE + range; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PatchUtils.java,extractUrl,public static String  (String override){ return override.split(OVERRIDE_RANGE)[0]; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PatchUtils.java,extractVersionRange,public static String  (String override){ return override.contains(OVERRIDE_RANGE) ? override.split(OVERRIDE_RANGE)[1] : null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,extractPort,public static int  (String address){ Pattern p=Pattern.compile(PORT_PATTERN); Matcher m=p.matcher(address); if (m.find()) { String match=m.group().substring(1); return Integer.parseInt(match); } return 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,findFreeLocalPort,"public static int  (Set<Integer> usedPorts int fromPort int toPort boolean checkIfAvailable){ for (int port=fromPort; port < toPort; port++) { if (checkIfAvailable && !isPortFree(port)) { continue; } else if (!usedPorts.contains(port)) { return port; } } throw new RuntimeException(""No port available within range""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,findPort,public static int  (Map<String List<Integer>> usedPorts String ip int port){ List<Integer> ports=usedPorts.get(ip); if (ports == null) { ports=new ArrayList<Integer>(); usedPorts.put(ip ports); } for (; ; ) { if (!ports.contains(port)) { ports.add(port); return port; } port++; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,findUsedPorts,public static Set<Integer>  (int fromPort int toPort){ Set<Integer> usedPorts=new HashSet<Integer>(); for (int port=fromPort; port <= toPort; port++) { if (!isPortFree(port)) { usedPorts.add(port); } } return usedPorts; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,isPortFree,"public static boolean  (int port){ if (port < MIN_PORT_NUMBER || port > MAX_PORT_NUMBER) { throw new IllegalArgumentException(""Invalid start port: "" + port); } ServerSocket ss=null; DatagramSocket ds=null; try { ss=new ServerSocket(port); ss.setReuseAddress(true); ds=new DatagramSocket(port); ds.setReuseAddress(true); return true; } catch ( IOException e) { } finally { if (ds != null) { ds.close(); } if (ss != null) { try { ss.close(); } catch ( IOException e) { } } } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Ports.java,mapPortToRange,public static int  (int port String minimumPort String maximumPort){ int min=0; int max=0; if (minimumPort != null) { try { min=Integer.parseInt(minimumPort); } catch ( NumberFormatException e) { min=0; } } if (maximumPort != null) { try { max=Integer.parseInt(maximumPort); } catch ( NumberFormatException e) { max=0; } } return mapPortToRange(port min max); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,SerialExecutorService,public  (Executor target String label){ this.target=target; this.label=label; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,awaitTermination,@Override public boolean  (long timeout TimeUnit unit) throws InterruptedException { return terminatedLatch.await(timeout unit); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,drain,synchronized public void  (){ draining.set(Boolean.TRUE); try { boolean drained=false; while (!drained) { Runnable runnable=localQueue.poll(); if (runnable == null) { runnable=externalQueue.poll(); } if (runnable == null) { drained=true; } else { try { runnable.run(); } catch ( Throwable e) { Thread thread=Thread.currentThread(); thread.getUncaughtExceptionHandler().uncaughtException(thread e); } } } } finally { draining.remove(); triggered.set(false); if (!externalQueue.isEmpty()) { triggerDrain(); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,execute,"@Override public void  (Runnable runnable){ if (runnable == null) throw new NullPointerException(""runnable cannot be null""); if (shutdown.get()) throw new RejectedExecutionException(""shutdown""); if (isDraining()) { localQueue.add(runnable); } else { exter"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,executeAndDrain,"public void  (Runnable runnable){ if (runnable == null) throw new NullPointerException(""runnable cannot be null""); if (shutdown.get()) throw new RejectedExecutionException(""shutdown""); if (isDraining()) { runnable.run(); } else { externalQueue.add(runnable); drain(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,getLabel,public String  (){ return label; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,getTarget,public Executor  (){ return target; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PublicPortMapper.java,OpenShiftSPI,"public  (){ Map<String String> envs=System.getenv(); for ( Map.Entry<String String> entry : envs.entrySet()) { String key=entry.getKey(); String publicPort=entry.getValue(); if (key.startsWith(""OPENSHIFT_"") && key.endsWith(""_PROXY_PORT"")) { String prefix=Strings.stripSuffix(key ""_PROXY_PORT""); String privatePort=envs.get(prefix + ""_PORT""); if (privatePort == null) { privatePort=envs.get(prefix); } if (privatePort != null) { try { ports.put(new Integer(privatePort) new Integer(publicPort)); } catch ( NumberFormatException ignore) { } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,isDraining,public boolean  (){ return draining.get() == Boolean.TRUE; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,isShutdown,@Override public boolean  (){ return shutdown.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,isTerminated,@Override public boolean  (){ return terminated.get(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PublicPortMapper.java,create,"private static SPI  (){ Class mapperClass=DefaultSPI.class; String mapperClassName=System.getProperty(PublicPortMapper.class.getName()); try { if (mapperClassName != null) { mapperClassName=mapperClassName.trim(); if (mapperClassName.equals(""default"")) { mapperClassName=DefaultSPI.class.getName(); } if (mapperClassName.equals(""openshift"")) { mapperClassName=OpenShiftSPI.class.getName(); } try { mapperClass=PublicPortMapper.class.getClassLoader().loadClass(mapperClassName); } catch ( ClassNotFoundException e) { mapperClass=Thread.currentThread().getContextClassLoader().loadClass(mapperClassName); } } return (SPI)mapperClass.newInstance(); } catch ( Exception e) { throw new RuntimeException(e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PublicPortMapper.java,getPublicPort,static public int  (int localPort){ return create().getPublicPort(localPort); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,run,@Override public void  (){ terminated.set(true); terminatedLatch.countDown(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,setLabel,public void  (String label){ this.label=label; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,setTarget,public void  (Executor target){ this.target=target; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,shutdown,@Override public void  (){ if (shutdown.compareAndSet(false true)) { externalQueue.add(new Runnable(){ @Override public void run(){ terminated.set(true); terminatedLatch.countDown(); } } ); triggerDrain(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,shutdownNow,@Override public List<Runnable>  (){ shutdown(); return Collections.EMPTY_LIST; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,toString,@Override public String  (){ return label; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\SerialExecutorService.java,triggerDrain,protected void  (){ if (triggered.compareAndSet(false true)) { target.execute(drainTask); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,findPropertiesWithPrefix,public static Map<String String>  (Properties properties String prefix Function<String String> keyTransformer){ Map<String String> answer=new HashMap<>(); Set<Map.Entry<Object Object>> entries=properties.entrySet(); for ( Map.Entry<Object Object> entry : entries) { Object value=entry.getValue(); Object key=entry.getKey(); if (key instanceof String && value != null) { String keyText=key.toString(); if (keyText.startsWith(prefix)) { String newKey=keyText.substring(prefix.length()); if (keyTransformer != null) { newKey=keyTransformer.apply(newKey); } answer.put(newKey value.toString()); } } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,getInteger,public static Integer  (Properties properties String key Integer defaultValue){ Object value=properties.get(key); if (value instanceof String) { return Integer.parseInt(value.toString()); } else if (value instanceof Long) { return (Integer)value; } else if (value instanceof Number) { Number number=(Number)value; return number.intValue(); } return defaultValue; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,getIntegerValue,public static int  (Map<String String> map String key int defaultValue){ Properties properties=new Properties(); properties.putAll(map); return getInteger(properties key defaultValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,getLong,public static Long  (Properties properties String key Long defaultValue){ Object value=properties.get(key); if (value instanceof String) { return Long.parseLong(value.toString()); } else if (value instanceof Long) { return (Long)value; } else if (value instanceof Number) { Number number=(Number)value; return number.longValue(); } return defaultValue; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,getLongValue,public static long  (Map<String String> map String key long defaultValue){ Properties properties=new Properties(); properties.putAll(map); return getLong(properties key defaultValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\PropertiesHelper.java,toMap,public static Map<String String>  (Properties properties){ Map<String String> answer=new HashMap<>(); if (properties != null) { Set<Map.Entry<Object Object>> entries=properties.entrySet(); for ( Map.Entry<Object Object> entry : entries) { Object value=entry.getValue(); Object key=entry.getKey(); if (key != null && value != null) { answer.put(key.toString() value.toString()); } } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,apply,"@Override public Void  (String line){ LOG.debug(""Error "" + prefix + message+ "": ""+ line); return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,getDockerContainerIds,"public static List<String>  (){ String commands=""docker ps -q""; String message=""output of command: "" + commands; LOG.debug(""Executing commands: "" + message); final List<String> answer=new ArrayList<>(); try { Process process=Runtime.getRuntime().exec(commands); Function<String Void> fn=new Function<String Void>(){ @Override public Void apply( String line){ if (Strings.isNotBlank(line)) { answer.add(line.trim()); } return null; } } ; processOutput(process.getInputStream() fn message); processErrors(process.getErrorStream() message); } catch ( Exception e) { LOG.error(""Failed to execute process "" + ""stdin"" + "" for "" + message + "": ""+ e e); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,getJavaProcessIds,"public static List<Long>  (String... classNameFilter){ String commands=""jps -l""; String message=commands; LOG.debug(""Executing commands: "" + message); List<Long> answer=new ArrayList<Long>(); Filter<String> filter=Filters.containsAnyString(classNameFilter); try { Process process=Runtime.getRuntime().exec(commands); parseProcesses(process.getInputStream() answer message filter null); processErrors(process.getErrorStream() message); } catch ( Exception e) { LOG.error(""Failed to execute process "" + ""stdin"" + "" for "" + message + "": ""+ e e); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,getProcessIds,public static List<Long>  (){ if (isWindows) { return getProcessIdsWindows(); } else { return getProcessIdsUnix(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,getProcessIdsUnix,"private static List<Long>  (){ String commands=""ps -e""; String message=commands; LOG.debug(""Executing commands: "" + message); List<Long> answer=new ArrayList<Long>(); try { Process process=Runtime.getRuntime().exec(commands); parseProcesses(process.getInputStream() answer message Filters.<String>trueFilter() null); processErrors(process.getErrorStream() message); } catch ( Exception e) { LOG.error(""Failed to execute process "" + ""stdin"" + "" for "" + message + "": ""+ e e); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,getProcessIdsWindows,"private static List<Long>  (){ String commands=""tasklist /NH""; String message=commands; LOG.debug(""Executing commands: "" + message); List<Long> answer=new ArrayList<Long>(); try { Process process=Runtime.getRuntime().exec(commands); parseProcesses(process.getInputStream() answer message Filters.<String>trueFilter() Functions.chopLength(50)); processErrors(process.getErrorStream() message); } catch ( Exception e) { LOG.error(""Failed to execute process "" + ""stdin"" + "" for "" + message + "": ""+ e e); } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,isProcessAlive,public static boolean  (long pid){ List<Long> processIds=getProcessIds(); if (processIds.isEmpty()) { return true; } return processIds.contains(pid); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,killDockerContainer,"public static int  (String containerId){ System.out.println(""Killing Docker container "" + containerId); LOG.warn(""WARNING: Killing Docker container "" + containerId); String commands=""docker kill "" + containerId; String message=commands; LOG.debug(""Executing commands: "" + message); final List<String> answer=new ArrayList<>(); Process process=null; try { process=Runtime.getRuntime().exec(commands); processInput(process.getInputStream() commands); processErrors(process.getErrorStream() commands); } catch ( Exception e) { LOG.error(""Failed to execute process "" + ""stdin"" + "" for "" + message + "": ""+ e e); } return process != null ? process.exitValue() : -1; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,killDockerContainers,public static void  (){ new Thread(new Runnable(){ @Override public void run(){ int count=0; List<String> ids=getDockerContainerIds(); for ( String id : ids) { if (killDockerContainer(id) == 0) { count++; } } } } ).run(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,killJavaProcesses,"public static int  (String... classNameFilters){ int count=0; List<Long> javaProcessIds=getJavaProcessIds(classNameFilters); for ( Long processId : javaProcessIds) { System.out.println(""WARNING: Killing Java process "" + processId); LOG.warn(""Killing Java process "" + processId); killProcess(processId ""-9""); count++; } return count; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,killProcess,"public static int  (Long pid String params){ if (pid == null || !isProcessAlive(pid)) { return 0; } if (isWindows) { if (""-9"".equals(params)) { params=""/F""; } return killProcessWindows(pid params); } else { return killProcessUnix(pid params); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,killProcessUnix,"protected static int  (Long pid String params){ String commands=""kill "" + (params != null ? params + "" "" : """") + pid; Process process=null; Runtime runtime=Runtime.getRuntime(); LOG.debug(""Executing commands: "" + commands); try { process=runtime.exec(commands); processInput(process.getInputStream() commands); processErrors(process.getErrorStream() commands); } catch ( Exception e) { LOG.error(""Failed to execute process "" + ""stdin"" + "" for "" + commands + "": ""+ e e); } try { return process != null ? process.waitFor() : 1; } catch ( InterruptedException e) { String message=format(""Interrupted while waiting for 'kill %d ' command to finish"" pid); throw new RuntimeException(message e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,killProcessWindows,"protected static int  (Long pid String params){ String commands=""taskkill "" + (params != null ? params + "" "" : """") + ""/PID ""+ pid; Process process=null; Runtime runtime=Runtime.getRuntime(); LOG.debug(""Executing commands: "" + commands); try { process=runtime.exec(commands); processInput(process.getInputStream() commands); processErrors(process.getErrorStream() commands); } catch ( Exception e) { LOG.error(""Failed to execute process "" + ""stdin"" + "" for "" + commands + "": ""+ e e); } try { return process != null ? process.waitFor() : 1; } catch ( InterruptedException e) { String message=format(""Interrupted while waiting for 'taskkill /PID %d ' command to finish"" pid); throw new RuntimeException(message e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,parseProcesses,"protected static void  (InputStream inputStream List<Long> answer String message Filter<String> lineFilter Function<String String> preFunction) throws Exception { BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream)); try { while (true) { String line=reader.readLine(); if (line == null) break; if (preFunction != null) { line=preFunction.apply(line); } if (lineFilter.matches(line)) { StringTokenizer tokenizer=new StringTokenizer(line); boolean found=false; while (tokenizer.hasMoreTokens() && !found) { String pidText=tokenizer.nextToken(); try { long pid=Long.parseLong(pidText); answer.add(pid); found=true; } catch ( NumberFormatException e) { LOG.debug(""Could not parse pid "" + pidText + "" from command: ""+ message); } } } } } catch ( Exception e) { LOG.debug(""Failed to process stdin for "" + message + "": ""+ e e); throw e; } finally { Closeables.closeQuietly(reader); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,processErrors,"protected static void  (InputStream inputStream String message) throws Exception { readProcessOutput(inputStream ""stderr for "" message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,processInput,"protected static void  (InputStream inputStream String message) throws Exception { readProcessOutput(inputStream ""stdout for "" message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,processOutput,"protected static void  (InputStream inputStream Function<String Void> function String errrorMessage) throws IOException { BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream)); try { while (true) { String line=reader.readLine(); if (line == null) break; function.apply(line); } } catch ( Exception e) { LOG.error(""Failed to process "" + errrorMessage + "": ""+ e e); throw e; } finally { Closeables.closeQuietly(reader); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,readProcessOutput,"protected static void  (InputStream inputStream final String prefix final String message) throws Exception { Function<String Void> function=new Function<String Void>(){ @Override public Void apply( String line){ LOG.debug(""Error "" + prefix + message+ "": ""+ line); return null; } } ; processOutput(inputStream function prefix + message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Processes.java,run,@Override public void  (){ int count=0; List<String> ids=getDockerContainerIds(); for ( String id : ids) { if (killDockerContainer(id) == 0) { count++; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\AllCertificatesTrustManager.java,getAcceptedIssuers,public X509Certificate[]  (){ return EMPTY_CERTS; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,attemptRetain,public boolean  (){ if (retained.getAndIncrement() == 0 || stopping.get()) { retained.getAndDecrement(); return false; } else { return true; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,invoke,@Override public Object  (Object proxy Method method Object[] args) throws Throwable { retain(); try { return method.invoke(target args); } catch ( InvocationTargetException e) { throw e.getCause(); } finally { release(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,mbeanProxy,"public StandardMBean  (Object target) throws NotCompliantMBeanException { Class<?> targetClass=target.getClass(); String targetClassName=targetClass.getSimpleName(); for ( Class clazz : targetClass.getInterfaces()) { if (clazz.getSimpleName().equals(targetClassName + ""MBean"") || clazz.getSimpleName().equals(targetClassName + ""MXBean"")) { return new StandardMBean(proxy(target) clazz); } } throw new NotCompliantMBeanException(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,proxy,public Object  (final Object target){ Class<?> targetClass=target.getClass(); return Proxy.newProxyInstance(targetClass.getClassLoader() targetClass.getInterfaces() new InvocationHandler(){ @Override public Object invoke( Object proxy  Method method  Object[] args) throws Throwable { retain(); try { return method.invoke(target args); } catch ( InvocationTargetException e) { throw e.getCause(); } finally { release(); } } } ); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,release,"public void  (){ if (retained.decrementAndGet() == 0) { if (!stopping.get()) { throw new IllegalStateException(""Unbalanced calls to release detected.""); } else { if (onStopCallback != null) { onStopCallback.run(); onStopCallback=null; } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,retain,public void  (){ if (!attemptRetain()) { throw new ShutdownException(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,run,@Override public void  (){ latch.countDown(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,shutdown,public void  (Runnable onStopCallback) throws ShutdownException { if (stopping.compareAndSet(false true)) { this.onStopCallback=onStopCallback; release(); } else { throw new ShutdownException(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,stop,public void  () throws ShutdownException  InterruptedException { final CountDownLatch latch=new CountDownLatch(1); shutdown(new Runnable(){ @Override public void run(){ latch.countDown(); } } ); latch.await(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ShutdownTracker.java,use,public <T>T  (Callable<T> callable) throws Exception { retain(); try { return callable.call(); } finally { retained.decrementAndGet(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,getAcceptedIssuers,public java.security.cert.X509Certificate[]  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,getTrustingSSLSocketFactory,"public synchronized static SSLSocketFactory  (){ if (socketFactory != null) return socketFactory; TrustManager[] trustManagers=new TrustManager[]{new TrustEverythingSSLTrustManager()}; SSLContext sc; try { sc=SSLContext.getInstance(""SSL""); sc.init(null trustManagers null); } catch ( GeneralSecurityException e) { throw new RuntimeException(""This is a BUG"" e); } socketFactory=sc.getSocketFactory(); return socketFactory; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,trustAllSSLCertificates,public static void  (HttpsURLConnection connection){ getTrustingSSLSocketFactory(); connection.setSSLSocketFactory(socketFactory); connection.setHostnameVerifier(new HostnameVerifier(){ public boolean verify( String s  SSLSession sslSession){ return true; } } ); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,trustAllSSLCertificatesUniversally,public static void  (){ getTrustingSSLSocketFactory(); HttpsURLConnection.setDefaultSSLSocketFactory(socketFactory); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ssl\TrustEverythingSSLTrustManager.java,verify,public boolean  (String s SSLSession sslSession){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,apply,@Override public String  (String key){ if (key != null) { return key.replace('.' '_').replace(' ' '_'); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,convertToCamelCase,public static String  (String text String separator){ StringBuffer buffer=new StringBuffer(); String[] words=text.split(separator); boolean first=true; for ( String word : words) { if (first) { buffer.append(word); first=false; } else { if (word.length() > 0) { buffer.append(Character.toUpperCase(word.charAt(0))); if (word.length() > 1) { buffer.append(word.substring(1)); } } } } return buffer.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,defaultIfEmpty,public static String  (String value String defaultValue){ return notEmpty(value) ? value : defaultValue; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,emptyIfNull,"public static String  (String value){ if (value == null) { return """"; } else { return value; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,firstNonBlank,public static String  (String... values){ for ( String value : values) { if (notEmpty(value)) { return value; } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,isNotBlank,public static boolean  (String text){ return !isNullOrBlank(text); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,isNullOrBlank,public static boolean  (String value){ return value == null || value.length() == 0 || value.trim().length() == 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,join,public static String  (final String separator Object... objects){ StringBuffer buffer=new StringBuffer(); boolean first=true; for ( Object object : objects) { if (first) { first=false; } else { buffer.append(separator); } buffer.append(object); } return buffer.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,joinNotNull,public static String  (final String separator Object... objects){ StringBuffer buffer=new StringBuffer(); boolean first=true; for ( Object object : objects) { if (object == null) continue; if (first) { first=false; } else { buffer.append(separator); } buffer.append(object); } return buffer.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,notEmpty,public static boolean  (String text){ return text != null && text.length() > 0; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,nullIfEmpty,public static String  (String value){ if (value == null || value.length() == 0) { return null; } else { return value; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,parseDelimitedString,"public static List<String>  (String value String delim boolean trim){ if (value == null) { value=""""; } List<String> list=new ArrayList(); int CHAR=1; int DELIMITER=2; int STARTQUOTE=4; int ENDQUOTE=8; StringBuffer sb=new StringBuffer(); int expecting=(CHAR | DELIMITER | STARTQUOTE); boolean isEscaped=false; for (int i=0; i < value.length(); i++) { char c=value.charAt(i); boolean isDelimiter=(delim.indexOf(c) >= 0); if (!isEscaped && (c == '\\')) { isEscaped=true; continue; } if (isEscaped) { sb.append(c); } else if (isDelimiter && ((expecting & DELIMITER) > 0)) { if (trim) { list.add(sb.toString().trim()); } else { list.add(sb.toString()); } sb.delete(0 sb.length()); expecting=(CHAR | DELIMITER | STARTQUOTE); } else if ((c == '""') && ((expecting & STARTQUOTE) > 0)) { sb.append(c); expecting=CHAR | ENDQUOTE; } else if ((c == '""') && ((expecting & ENDQUOTE) > 0)) { sb.append(c); expecting=(CHAR | STARTQUOTE | DELIMITER); } else if ((expecting & CHAR) > 0) { sb.append(c); } else { throw new IllegalArgumentException(""Invalid delimited string: "" + value); } isEscaped=false; } if (sb.length() > 0) { if (trim) { list.add(sb.toString().trim()); } else { list.add(sb.toString()); } } return list; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,replaceAllWithoutRegex,public static String  (String text String from String to){ if (text == null) { return null; } int idx=0; while (true) { idx=text.indexOf(from idx); if (idx >= 0) { text=text.substring(0 idx) + to + text.substring(idx + from.length()); idx+=to.length(); } else { break; } } return text; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,rpad,public static String  (String delimiter String str int max){ for (int i=1; i <= max; i++) { str=str.concat(delimiter); } return str; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,rpadByMaxSize,public static String  (String delimiter String str int max){ int len=max - str.length(); for (int i=1; i <= len; i++) { str=str.concat(delimiter); } return str; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,splitAndTrimAsList,public static List<String>  (String text String sep){ ArrayList<String> answer=new ArrayList<String>(); if (text != null && text.length() > 0) { for ( String v : text.split(sep)) { String trim=v.trim(); if (trim.length() > 0) { answer.add(trim); } } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,splitAsList,public static List<String>  (String text String delimiter){ List<String> answer=new ArrayList<String>(); if (text != null && text.length() > 0) { answer.addAll(Arrays.asList(text.split(delimiter))); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,splitCamelCase,public static String  (String text String separator){ StringBuilder buffer=new StringBuilder(); char last='A'; for ( char c : text.toCharArray()) { if (Character.isLowerCase(last) && Character.isUpperCase(c)) { buffer.append(separator); } buffer.append(c); last=c; } return buffer.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,stripPrefix,public static String  (String value String suffix){ if (!value.startsWith(suffix)) { return value; } else { return value.substring(suffix.length()); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,stripSuffix,public static String  (String value String suffix){ if (!value.endsWith(suffix)) { return value; } else { return value.substring(0 value.length() - suffix.length()); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,toEnvironmentVariableFunction,"public static Function<String String>  (){ return new Function<String String>(){ @Override public String toString(){ return ""toEnvironmentVariableFunction()""; } @Override public String apply( String key){ if (key != null) { return key.replace('.' '_').replace(' ' '_'); } return null; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,toLowerCaseFunction,"public static Function<String String>  (){ return new Function<String String>(){ @Override public String toString(){ return ""toLowerCaseFunction()""; } @Override public String apply( String value){ if (value != null) { return value.toLowerCase(); } return null; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,toString,"@Override public String  (){ return ""toEnvironmentVariableFunction()""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,toUpperCaseFunction,"public static Function<String String>  (){ return new Function<String String>(){ @Override public String toString(){ return ""toUpperCaseFunction()""; } @Override public String apply( String value){ if (value != null) { return value.toUpperCase(); } return null; } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Strings.java,unquote,"public static String  (String text){ if (text != null && text.startsWith(""\"""") && text.endsWith(""\"""")) { return text.substring(1 text.length() - 1); } else { return text; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,getEnvVar,"public static String  (String envVarName String defaultValue){ String envVar=null; try { envVar=System.getenv(envVarName); } catch ( Exception e) { LOG.warn(""Failed to look up environment variable $"" + envVarName + "". ""+ e e); } if (Strings.isNotBlank(envVar)) { return envVar; } else { return defaultValue; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,getEnvVarOrSystemProperty,public static Boolean  (final String name final Boolean defaultValue){ String result=getEnvVarOrSystemProperty(name defaultValue.toString()); return Boolean.parseBoolean(result); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,getServiceEnvVarPrefix,"protected static String  (String serviceName){ return serviceName.toUpperCase().replace('-' '_') + ""_SERVICE""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,getServiceHostAndPort,"public static String  (String serviceName String defaultHost String defaultPort){ String serviceEnvVarPrefix=getServiceEnvVarPrefix(serviceName); String hostEnvVar=serviceEnvVarPrefix + ""_HOST""; String portEnvVar=serviceEnvVarPrefix + ""_PORT""; String host=Systems.getEnvVarOrSystemProperty(hostEnvVar hostEnvVar defaultHost); String port=Systems.getEnvVarOrSystemProperty(portEnvVar portEnvVar defaultPort); String answer=host + "":"" + port; LOG.info(""Connecting to service "" + serviceName + "" on ""+ answer+ "" from $""+ hostEnvVar+ "" and $""+ portEnvVar); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,getSystemPropertyOrEnvVar,"public static String  (String systemProperty String envVarName String defaultValue){ String answer=null; try { answer=System.getProperty(systemProperty); } catch ( Exception e) { LOG.warn(""Failed to look up environment variable $"" + envVarName + "". ""+ e e); } if (Strings.isNullOrBlank(answer)) { answer=System.getenv(envVarName); } if (Strings.isNotBlank(answer)) { return answer; } else { return defaultValue; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Systems.java,hasEnvVarOrSystemProperty,public static boolean  (String envVarName){ return getEnvVarOrSystemProperty(envVarName) != null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,Column,"public  (String header){ this.header=header; this.headerText=""["" + header + ""]""; ensureWidth(headerText.length()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,asText,public String  (){ ByteArrayOutputStream out=new ByteArrayOutputStream(); print(new PrintStream(out)); return new String(out.toByteArray()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,asTextLines,"public List<String>  (){ String text=asText(); List<String> list=new ArrayList<>(); StringTokenizer iter=new StringTokenizer(text ""\n""); while (iter.hasMoreTokens()) { list.add(iter.nextToken()); } return list; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,column,"public Column  (int index){ if (index < 0) { throw new IllegalArgumentException(""index must be >= 0""); } synchronized (columns) { Column answer=null; if (index < columns.size()) { answer=columns.get(index); } if (answer == null) { answer=new Column(""""); columns.add(answer); } return answer; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,columns,public void  (String... headers){ for ( String header : headers) { column(header); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,ensureWidth,public void  (int length){ if (length > width) { width=length; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,getHeader,public String  (){ return header; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,getHeaderFlags,public String  (){ return headerFlags; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,getRowFlags,public String  (){ return rowFlags; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\TablePrinter.java,getWidth,public int  (){ return width; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,decode,"public static String  (String url){ if (url == null) { return null; } StringBuilder decoded=new StringBuilder(); int pos=0; while (pos < url.length()) { char ch=url.charAt(pos); if (ch == '%') { if (pos + 2 < url.length()) { String hexStr=url.substring(pos + 1 pos + 3); char hexChar=(char)Integer.parseInt(hexStr 16); decoded.append(hexChar); pos+=3; } else { throw new IllegalStateException(""'%' escape must be followed by two hex digits""); } } else { decoded.append(ch); pos++; } } return decoded.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,pathJoin,"public static String  (String... strings){ StringBuilder buffer=new StringBuilder(); for ( String string : strings) { if (string == null) { continue; } if (buffer.length() > 0) { boolean bufferEndsWithSeparator=buffer.toString().endsWith(""/""); boolean stringStartsWithSeparator=string.startsWith(""/""); if (bufferEndsWithSeparator) { if (stringStartsWithSeparator) { string=string.substring(1); } } else { if (!stringStartsWithSeparator) { buffer.append(""/""); } } } buffer.append(string); } return buffer.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,prepareForAuthentication,"public static URLConnection  (final URLConnection connection){ NullArgumentException.validateNotNull(connection ""url connection cannot be null""); if (connection.getURL().getUserInfo() != null) { String decodedUserInfo=decode(connection.getURL().getUserInfo()); String base64Encoded=io.fabric8.utils.Base64Encoder.encode(decodedUserInfo); base64Encoded=base64Encoded.replaceAll(""\n"" """"); connection.setRequestProperty(""Authorization"" ""Basic "" + base64Encoded); } return connection; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,prepareForSSL,"public static URLConnection  (final URLConnection connection){ NullArgumentException.validateNotNull(connection ""url connection cannot be null""); URLConnection conn=connection; if (conn instanceof JarURLConnection) { try { conn=((JarURLConnection)connection).getJarFileURL().openConnection(); conn.connect(); } catch ( IOException e) { throw new RuntimeException(""Could not prepare connection for HTTPS."" e); } } if (conn instanceof HttpsURLConnection) { try { SSLContext ctx=SSLContext.getInstance(""SSLv3""); ctx.init(null new TrustManager[]{new AllCertificatesTrustManager()} null); ((HttpsURLConnection)conn).setSSLSocketFactory(ctx.getSocketFactory()); } catch ( KeyManagementException e) { throw new RuntimeException(""Could not prepare connection for HTTPS."" e); } catch ( NoSuchAlgorithmException e) { throw new RuntimeException(""Could not prepare connection for HTTPS."" e); } } return connection; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,prepareInputStream,public static InputStream  (final URL url final boolean acceptAnyCertificate) throws IOException { final URLConnection conn=url.openConnection(); prepareForAuthentication(conn); if (acceptAnyCertificate) { prepareForSSL(conn); } return conn.getInputStream(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\URLUtils.java,urlPathJoin,"public static String  (String first String second){ if (Strings.isNullOrBlank(second)) { return first; } if (first.endsWith(""/"")) { if (second.startsWith(""/"")) { return first + second.substring(1); } else { return first + second; } } else { if (second.startsWith(""/"")) { return first + second; } else { return first + ""/"" + second; } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ThreadFactory.java,ThreadFactory,public  (final String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\ThreadFactory.java,newThread,"@Override public Thread  (Runnable r){ return new Thread(r name + "" #"" + counter.incrementAndGet()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,getChildElements,public static List<Element>  (final Element element){ final List<Element> elements=new ArrayList<Element>(); final NodeList childs=element.getChildNodes(); for (int i=0; i < childs.getLength(); i++) { Node child=childs.item(i); if (child instanceof Element) { elements.add((Element)child); } } return elements; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,getElement,"public static Element  (final Element element final String path){ NullArgumentException.validateNotNull(element ""Element ""); NullArgumentException.validateNotNull(path ""Element path""); Element current=element; StringTokenizer st=new StringTokenizer(path ""/"" false); while (st.hasMoreTokens() && current != null) { final String token=st.nextToken(); final NodeList childs=current.getChildNodes(); current=null; for (int i=0; i < childs.getLength(); i++) { final Node child=childs.item(i); if (child instanceof Element && child.getNodeName().equals(token)) { current=(Element)child; } } } return current; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,getElements,"public static List<Element>  (final Element element final String path){ NullArgumentException.validateNotNull(element ""Element""); NullArgumentException.validateNotNull(path ""Element path""); String lastElement; Element parent; if (path.contains(""/"")) { parent=getElement(element path.substring(0 path.lastIndexOf(""/""))); lastElement=path.substring(path.lastIndexOf(""/"") + 1); } else { parent=element; lastElement=path; } List<Element> elements=null; if (parent != null) { NodeList nodeList=parent.getElementsByTagName(lastElement); if (nodeList != null) { elements=new ArrayList<Element>(); for (int i=0; i < nodeList.getLength(); i++) { elements.add((Element)nodeList.item(i)); } } } return elements; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,getTextContent,public static String  (final Node node){ switch (node.getNodeType()) { case Node.ELEMENT_NODE: case Node.ATTRIBUTE_NODE: case Node.ENTITY_NODE: case Node.ENTITY_REFERENCE_NODE: case Node.DOCUMENT_FRAGMENT_NODE: return mergeTextContent(node.getChildNodes()); case Node.TEXT_NODE: case Node.CDATA_SECTION_NODE: case Node.COMMENT_NODE: case Node.PROCESSING_INSTRUCTION_NODE: return node.getNodeValue(); case Node.DOCUMENT_NODE: case Node.DOCUMENT_TYPE_NODE: case Node.NOTATION_NODE: default : return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,getTextContentOfElement,"public static String  (final Element element final String path){ NullArgumentException.validateNotNull(element ""Element""); NullArgumentException.validateNotNull(""Element path"" path); StringTokenizer st=new StringTokenizer(path ""/"" false); Element currentElement=element; while (st.hasMoreTokens()) { final String childName=st.nextToken(); if (childName.endsWith(""]"")) { int startPos=childName.indexOf(""[""); int endPos=childName.indexOf(""]""); NodeList children=currentElement.getElementsByTagName(childName.substring(0 startPos)); int numChildren=children.getLength(); int index; String numbers=childName.substring(startPos + 1 endPos); if (""last"".equals(numbers)) { index=numChildren - 1; } else { index=Integer.parseInt(numbers); } if (index > numChildren) { throw new IllegalArgumentException(""index of "" + index + "" is larger than the number of child nodes (""+ numChildren+ "")""); } currentElement=(Element)children.item(index); } else { final NodeList parent=currentElement.getElementsByTagName(childName); if (parent != null) { currentElement=(Element)parent.item(0); } } if (null == currentElement) { return null; } } return getTextContent(currentElement); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,mergeTextContent,private static String  (final NodeList nodes){ StringBuffer buf=new StringBuffer(); for (int i=0; i < nodes.getLength(); i++) { Node n=nodes.item(i); final String text; switch (n.getNodeType()) { case Node.COMMENT_NODE: case Node.PROCESSING_INSTRUCTION_NODE: text=null; break; default : text=getTextContent(n); break; } if (text != null) { buf.append(text); } } return buf.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlUtils.java,parseDoc,"public static Document  (final InputStream is) throws ParserConfigurationException  SAXException  IOException { try { BufferedInputStream in=new BufferedInputStream(is); DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance(); factory.setFeature(""http://xml.org/sax/features/external-general-entities"" false); factory.setFeature(""http://xml.org/sax/features/external-parameter-entities"" false); factory.setFeature(""http://apache.org/xml/features/disallow-doctype-decl"" true); DocumentBuilder builder=factory.newDocumentBuilder(); InputSource source=new InputSource(in); return builder.parse(source); } finally { is.close(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,getXPath,public XPath  (){ if (xpath == null) { xpath=getXPathFactory().newXPath(); } return xpath; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,getXPathFactory,public XPathFactory  (){ if (xpathFactory == null) { xpathFactory=XPathFactory.newInstance(); } return xpathFactory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,setXPath,public void  (XPath xpath){ this.xpath=xpath; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,setXPathFactory,public void  (XPathFactory xpathFactory){ this.xpathFactory=xpathFactory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathBuilder.java,xpath,public XPathFacade  (String xpath) throws XPathExpressionException { XPathExpression expression=getXPath().compile(xpath); return new XPathFacade(this xpath expression); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,createNamespaceFinder,protected static XmlNamespaceFinder  (){ XmlNamespaceFinder finder=new XmlNamespaceFinder(); if (factory != null) { finder.setFactory(factory); } return finder; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,getFactory,public static SAXParserFactory  (){ return factory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,getNamespaces,public static Set<String>  (InputSource source) throws ParserConfigurationException  SAXException  IOException { XmlNamespaceFinder finder=createNamespaceFinder(); Set<String> answer=finder.parseContents(source); if (factory == null) { factory=finder.getFactory(); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,hasNamespace,public static boolean  (Set<String> namespaces String... namespaceURis){ if (namespaces != null) { for ( String namespaceURi : namespaceURis) { if (namespaces.contains(namespaceURi)) { return true; } } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlHelper.java,setFactory,public static void  (SAXParserFactory factory){ XmlHelper.factory=factory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,copy,static void  (InputStream is OutputStream os) throws IOException { try { byte[] b=new byte[4096]; int l=is.read(b); while (l >= 0) { os.write(b 0 l); l=is.read(b); } } finally { Closeables.closeQuietly(os); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,createZipFile,"public static void  (Logger log File sourceDir File outputZipFile FileFilter filter) throws IOException { outputZipFile.getParentFile().mkdirs(); OutputStream os=new FileOutputStream(outputZipFile); ZipOutputStream zos=new ZipOutputStream(os); try { String path=""""; zipDirectory(log sourceDir zos path filter); } finally { Closeables.closeQuietly(zos); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,matches,protected static boolean  (FileFilter filter File f){ return filter == null || filter.accept(f); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,unzip,public static void  (InputStream in File toDir) throws IOException { ZipInputStream zis=new ZipInputStream(new BufferedInputStream(in)); try { ZipEntry entry=zis.getNextEntry(); while (entry != null) { if (!entry.isDirectory()) { String entryName=entry.getName(); File toFile=new File(toDir entryName); toFile.getParentFile().mkdirs(); OutputStream os=new FileOutputStream(toFile); try { try { copy(zis os); } finally { zis.closeEntry(); } } finally { Closeables.closeQuietly(os); } } entry=zis.getNextEntry(); } } finally { closeQuietly(zis); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\Zips.java,zipDirectory,"public static void  (Logger log File directory ZipOutputStream zos String path FileFilter filter) throws IOException { File[] dirList=directory.listFiles(); byte[] readBuffer=new byte[8192]; int bytesIn=0; if (dirList != null) { for ( File f : dirList) { if (f.isDirectory()) { String prefix=path + f.getName() + ""/""; if (matches(filter f)) { zos.putNextEntry(new ZipEntry(prefix)); zipDirectory(log f zos prefix filter); } } else { String entry=path + f.getName(); if (matches(filter f)) { FileInputStream fis=new FileInputStream(f); try { ZipEntry anEntry=new ZipEntry(entry); zos.putNextEntry(anEntry); bytesIn=fis.read(readBuffer); while (bytesIn != -1) { zos.write(readBuffer 0 bytesIn); bytesIn=fis.read(readBuffer); } } finally { fis.close(); } if (log.isDebugEnabled()) { log.debug(""zipping file "" + entry); } } } zos.closeEntry(); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,createParser,"protected final SAXParser  (SAXParserFactory parserFactory) throws ParserConfigurationException  SAXException { parserFactory.setNamespaceAware(true); final SAXParser parser=parserFactory.newSAXParser(); final XMLReader reader=parser.getXMLReader(); try { reader.setFeature(""http://xml.org/sax/features/validation"" false); reader.setFeature(""http://apache.org/xml/features/nonvalidating/load-external-dtd"" false); } catch ( SAXNotRecognizedException e) { } catch ( SAXNotSupportedException e) { } return parser; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,getFactory,public SAXParserFactory  (){ return factory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,getNamespaces,public Set<String>  (){ return namespaces; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,parseContents,"public Set<String>  (InputSource contents) throws IOException  ParserConfigurationException  SAXException { namespaces.clear(); if (factory == null) { factory=SAXParserFactory.newInstance(); } if (factory != null) { SAXParser parser=createParser(factory); contents.setSystemId(""/""); parser.parse(contents this); } return namespaces; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,setFactory,public void  (SAXParserFactory factory){ this.factory=factory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XmlNamespaceFinder.java,startElement,@Override public void  (String uri String localName String qName Attributes attributes) throws SAXException { super.startElement(uri localName qName attributes); if (!namespaceFound) { if (uri != null && uri.length() > 0) { namespaces.add(uri); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,XPathFacade,public  (XPathBuilder builder String xpathText XPathExpression expression){ this.builder=builder; this.xpathText=xpathText; this.expression=expression; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,element,public Element  (Object item) throws XPathExpressionException { Node node=node(item); if (node instanceof Element) { return (Element)node; } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,elementTextContent,public String  (Object item) throws XPathExpressionException { Element element=element(item); if (element != null) { return element.getTextContent(); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,elements,public List<Element>  (Object item) throws XPathExpressionException { List<Element> answer=new ArrayList<Element>(); Object value=expression.evaluate(item XPathConstants.NODESET); if (value instanceof NodeList) { NodeList nodeList=(NodeList)value; for (int i=0  size=nodeList.getLength(); i < size; i++) { Node node=nodeList.item(i); if (node instanceof Element) { answer.add((Element)node); } } } else if (value instanceof Element) { answer.add((Element)value); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,getBuilder,public XPathBuilder  (){ return builder; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,getExpression,public XPathExpression  (){ return expression; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,getXpathText,public String  (){ return xpathText; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,node,public Node  (Object item) throws XPathExpressionException { Object answer=expression.evaluate(item XPathConstants.NODE); if (answer instanceof Node) { return (Node)answer; } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,nodes,public List<Node>  (Object item) throws XPathExpressionException { List<Node> answer=new ArrayList<Node>(); Object value=expression.evaluate(item XPathConstants.NODESET); if (value instanceof NodeList) { NodeList nodeList=(NodeList)value; for (int i=0  size=nodeList.getLength(); i < size; i++) { Node node=nodeList.item(i); if (node != null) { answer.add(node); } } } else if (value instanceof Node) { answer.add((Node)value); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\main\java\io\fabric8\utils\XPathFacade.java,toString,"@Override public String  (){ return ""XPathFacade("" + xpathText + "")""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\Base64EncoderTest.java,decodeTest,"@Test public void  (){ Assert.assertEquals("""" Base64Encoder.decode("""")); Assert.assertEquals(""f"" Base64Encoder.decode(""Zg=="")); Assert.assertEquals(""fo"" Base64Encoder.decode(""Zm8="")); Assert.assertEquals(""foo"" Base64Encoder.decode(""Zm9v"")); Assert.assertE"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\Base64EncoderTest.java,encodeTest,"@Test public void  (){ Assert.assertEquals("""" Base64Encoder.encode("""")); Assert.assertEquals(""Zg=="" Base64Encoder.encode(""f"")); Assert.assertEquals(""Zm8="" Base64Encoder.encode(""fo"")); Assert.assertEquals(""Zm9v"" Base64Encoder.encode(""foo"")); Assert.assertE"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\ChecksumUtilsTest.java,checksumTest,"@Test public void  () throws IOException { InputStream stream=new ByteArrayInputStream(""The quick brown fox jumps over the lazy dog"".getBytes(""UTF-8"")); Assert.assertEquals(0x414fa339 ChecksumUtils.checksum(stream)); stream=new ByteArrayInputStream("""".get"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\ArraysTest.java,joinTest,"@Test public void  (){ Assert.assertEquals(""A B C D E"" Arrays.join("" "" ""A"" ""B"" ""C"" ""D"" ""E"")); Assert.assertEquals(""1:2:3:4:5"" Arrays.join("":"" 1 2 3 4 5)); Assert.assertEquals(""1.1;2;C;4;5.5"" Arrays.join("";"" 1.1d 2 ""C"" 4 5.5f)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,assertCollectionContains,private void  (Collection<String> collection String... expected){ assertNotNull(collection); assertEquals(expected.length collection.size()); for ( String element : expected) { assertTrue(collection.contains(element)); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,createCollector,private Collector<String>  (final String... elements){ return new Collector<String>(){ @Override public Collection<String> getCollection(){ return Arrays.asList(elements); } } ; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,getCollection,@Override public Collection<String>  (){ return Arrays.asList(elements); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,testAddCollection,"@Test public void  (){ Collectors<String> collectors=new Collectors<String>(); collectors.addCollection(Arrays.asList(""a"" ""b"" ""c"")); collectors.addCollection(Arrays.asList(""b"" ""d"" ""e"")); Collection<String> result=collectors.getCollection(); assertCollecti"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\CollectorsTest.java,testGetCollection,"@Test public void  (){ Collectors<String> collectors=new Collectors<String>(createCollector(""a"" ""b"" ""c"") createCollector(""b"" ""d"" ""e"")); Collection<String> result=collectors.getCollection(); assertCollectionContains(result ""a"" ""b"" ""c"" ""d"" ""e""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,testContainerWithInvalidPrefix,"@Test(expected=IllegalArgumentException.class) public void  (){ validateContainerName(""--container""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,testContainerWithInvalidPrefix2,"@Test(expected=IllegalArgumentException.class) public void  (){ validateContainerName(""_container""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,testContainerWithUpperCase,"@Test(expected=IllegalArgumentException.class) public void  (){ validateContainerName(""MyContainer""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,testProfileWithInvalidPrefix,"@Test(expected=IllegalArgumentException.class) public void  (){ validateProfileName(""--profile""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,testProfileWithInvalidPrefix2,"@Test(expected=IllegalArgumentException.class) public void  (){ validateProfileName(""_profile""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,testProfileWithUpperCase,"@Test(expected=IllegalArgumentException.class) public void  (){ validateProfileName(""MyProfile""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,testValidContainerNames,"@Test public void  (){ assertTrue(isValidContainerName(""c"")); assertTrue(isValidContainerName(""c1"")); assertTrue(isValidContainerName(""c-1"")); assertTrue(isValidContainerName(""c_1"")); assertTrue(isValidContainerName(""1container"")); assertTrue(isValidConta"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FabricValidationsTest.java,testValidProfileNames,"@Test public void  (){ assertTrue(isValidProfileName(""c"")); assertTrue(isValidProfileName(""c1"")); assertTrue(isValidProfileName(""c-1"")); assertTrue(isValidProfileName(""c_1"")); assertTrue(isValidProfileName(""1container"")); assertTrue(isValidProfileName(""co"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FilesTest.java,normalizePathTest,"@Test public void  (){ Assert.assertEquals(""/some/path"" Files.normalizePath(""\\some\\path"" '\\' '/')); Assert.assertEquals(""/some/path"" Files.normalizePath(""/some/path"" '\\' '/')); Assert.assertEquals(""\\some\\path"" Files.normalizePath(""/some/path"" '/' '\"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\FilesTest.java,toStringTest,"@Test public void  () throws IOException { final String testString=""This is a test string""; final InputStream stream=new ByteArrayInputStream(testString.getBytes(""UTF-8"")); Assert.assertEquals(testString Files.toString(stream)); stream.reset(); Assert.ass"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\KubernetesServicesTest.java,findServiceHostAndPort,"@Test public void  () throws Exception { String expectedHost=""dummy.acme.com""; String expectedPort=""8080""; setEnvVarSystemProperty(KubernetesServices.toServiceHostEnvironmentVariable(serviceName) expectedHost); setEnvVarSystemProperty(KubernetesServices.t"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\KubernetesServicesTest.java,returDefaultValueWhenNotFound,"@Test public void  () throws Exception { String defaultValue=""wine:beer""; String actual=KubernetesServices.serviceToHostAndPort(serviceNotExistName servicePort defaultValue); assertThat(actual).isEqualTo(defaultValue); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\KubernetesServicesTest.java,setEnvVarSystemProperty,protected void  (String name String value){ System.setProperty(name value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\KubernetesServicesTest.java,throwExceptionWhenNotFound,"@Test public void  () throws Exception { try { String actual=KubernetesServices.serviceToHostAndPort(serviceNotExistName servicePort); fail(""Should have thrown KubernetesServiceNotFoundException as we should not have found a host and port: "" + actual); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\MapTest.java,testStringValues,"@Test public void  () throws Exception { Map map=new HashMap(); map.put(""foo"" ""a b c""); assertArrayEquals(null Maps.stringValues(map ""doesNotExist"")); assertArrayEquals(new String[]{""a"" ""b"" ""c""} Maps.stringValues(map ""foo"")); Maps.setStringValues(map ""doe"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PasswordEncoderTest.java,testDecode,"@Test public void  (){ assertEquals(""UXdlcnR5"" PasswordEncoder.decode(""UXdlcnR5"")); assertEquals(""Qwerty"" PasswordEncoder.decode(PasswordEncoder.PREFIX + ""UXdlcnR5"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PasswordEncoderTest.java,testDisablePwEncoder,"@Test public void  (){ System.setProperty(""zookeeper.password.encode"" ""false""); assertEquals(""UXdlcnR5"" PasswordEncoder.decode(""UXdlcnR5"")); assertEquals(PasswordEncoder.PREFIX + ""UXdlcnR5"" PasswordEncoder.decode(PasswordEncoder.PREFIX + ""UXdlcnR5"")); ass"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PasswordEncoderTest.java,testEncode,"@Test public void  (){ assertEquals(PasswordEncoder.PREFIX + ""UXdlcnR5"" PasswordEncoder.encode(""Qwerty"")); assertEquals(PasswordEncoder.PREFIX + ""Qwerty"" PasswordEncoder.encode(PasswordEncoder.PREFIX + ""Qwerty"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PatchUtilsTest.java,doAssertExtract,"private void  (String override String url String range){ assertEquals(""Should extract URL"" url extractUrl(override)); assertEquals(""Should extract version range"" range extractVersionRange(override)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PatchUtilsTest.java,testExtractUrlAndRange,"@Test public void  (){ String url=appendVersionRange(""mvn:io.fabric8.test/test/1.0.0"" ""[1.0.0 1.1.0)""); assertEquals(""mvn:io.fabric8.test/test/1.0.0;range=[1.0.0 1.1.0)"" url); doAssertExtract(url ""mvn:io.fabric8.test/test/1.0.0"" ""[1.0.0 1.1.0)""); doAssert"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PathJoinTest.java,assertJoinPaths,"private void  (String expected String... strings){ String actual=URLUtils.pathJoin(strings); assertEquals(""Join strings: "" + Arrays.asList(strings) expected actual); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PathJoinTest.java,testJoinPaths,"@Test public void  () throws Exception { assertJoinPaths(""http://localhost:8080/job/cheese/12/wfapi/describe"" ""http://localhost:8080/"" ""job/cheese/12/"" ""/wfapi/describe""); assertJoinPaths(""http://localhost:8080/job/cheese/12/wfapi/describe"" ""http://localh"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,testExtractSshUrl,"@Test public void  (){ Assert.assertEquals(2181 Ports.extractPort(""istation:2181"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,testPortInRange,@Test public void  (){ Assert.assertEquals(8080 Ports.mapPortToRange(8080 8000 9000)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,testPortMapWithGreaterMaximum,@Test public void  (){ Assert.assertEquals(8080 Ports.mapPortToRange(8080 0 9000)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,testPortMapWithLowerMinimum,@Test public void  (){ Assert.assertEquals(8080 Ports.mapPortToRange(8080 8000 0)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,testPortMapWithNoRange,@Test public void  (){ Assert.assertEquals(8080 Ports.mapPortToRange(8080 0 0)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,testPortOutOfNarrowRange,@Test public void  (){ Assert.assertEquals(13080 Ports.mapPortToRange(8080 10000 15000)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,testPortOutOfRange,@Test public void  (){ Assert.assertEquals(18080 Ports.mapPortToRange(8080 10000 19000)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PortsTest.java,testPortOutOfRangeWithNoUpperLimit,@Test public void  (){ Assert.assertEquals(18080 Ports.mapPortToRange(8080 10000 0)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PropertiesHelperTest.java,getLongTest,"@Test public void  (){ Assert.assertTrue(PropertiesHelper.getLong(properties ""STRING_VALUE"" 1l) == 1234567890l); Assert.assertTrue(PropertiesHelper.getLong(properties ""LONG_VALUE"" 1l) == 1234567891l); Assert.assertTrue(PropertiesHelper.getLong(properties "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PropertiesHelperTest.java,getLongValueTest,"@Test public void  (){ Assert.assertTrue(PropertiesHelper.getLongValue(properties ""STRING_VALUE"" 1l) == 1234567890l); Assert.assertTrue(PropertiesHelper.getLongValue(properties ""LONG_VALUE"" 1l) == 1234567891l); Assert.assertTrue(PropertiesHelper.getLongVa"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PropertiesHelperTest.java,getLongValueTest2,"@Test public void  (){ final Map<String String> map=new HashMap<String String>(); map.put(""STRING_VALUE"" ""1234567890""); Assert.assertTrue(PropertiesHelper.getLongValue(map ""STRING_VALUE"" 1l) == 1234567890l); Assert.assertTrue(PropertiesHelper.getLongValue"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\SerialExecutorServiceTest.java,run,@Override public void  (){ data[0]++; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\PropertiesHelperTest.java,init,"@Before public void  (){ properties=new Properties(); properties.put(""STRING_VALUE"" ""1234567890""); properties.put(""INT_VALUE"" 1234567890); properties.put(""DOUBLE_VALUE"" 1234567895.4d); properties.put(""LONG_VALUE"" 1234567891l); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\SerialExecutorServiceTest.java,testBasicUsage,@Test public void  () throws InterruptedException { SerialExecutorService executor=new SerialExecutorService(); final long data[]=new long[]{0}; for (int i=0; i < 10000; i++) { final int id=i; executor.execute(new Runnable(){ @Override public void run(){ 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\URLUtilsTest.java,testUrlPathJoin,"@Test public void  () throws Exception { assertEquals(""http://foo.com/bar"" URLUtils.urlPathJoin(""http://foo.com/"" ""bar"")); assertEquals(""http://foo.com/bar"" URLUtils.urlPathJoin(""http://foo.com"" ""bar"")); assertEquals(""http://foo.com/bar"" URLUtils.urlPathJ"
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\GitApi.java,createRepository,"@POST @Path(""projects/{repo}"") public RepositoryDTO  (@PathParam(""repo"") String repo CreateRepositoryDTO dto); "
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\GitApi.java,getRepository,"@GET @Path(""projects/{repo}"") public ProjectInfoDTO  (@PathParam(""repo"") String repo); "
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,isCreate_empty_commit,public boolean  (){ return create_empty_commit; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,setCreate_empty_commit,public void  (boolean create_empty_commit){ this.create_empty_commit=create_empty_commit; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\CreateRepositoryDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,defaultIfEmptyTest,"@Test public void  (){ assertEquals(""Some text"" Strings.defaultIfEmpty(""Some text"" ""default"")); assertEquals("" "" Strings.defaultIfEmpty("" "" ""default"")); assertEquals(""default"" Strings.defaultIfEmpty("""" ""default"")); assertEquals(""default"" Strings.defaultIf"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,emptyIfNullTest,"@Test public void  (){ assertEquals(""Some text"" Strings.emptyIfNull(""Some text"")); assertEquals("" "" Strings.emptyIfNull("" "")); assertEquals("""" Strings.emptyIfNull("""")); assertEquals("""" Strings.emptyIfNull(null)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,isNotBlankTest,"@Test public void  (){ Assert.assertFalse(Strings.isNotBlank(null)); Assert.assertFalse(Strings.isNotBlank("""")); Assert.assertFalse(Strings.isNotBlank("" "")); Assert.assertFalse(Strings.isNotBlank("" "")); Assert.assertTrue(Strings.isNotBlank(""foobar"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,isNullOrBlankTest,"@Test public void  (){ Assert.assertTrue(Strings.isNullOrBlank(null)); Assert.assertTrue(Strings.isNullOrBlank("""")); Assert.assertTrue(Strings.isNullOrBlank("" "")); Assert.assertTrue(Strings.isNullOrBlank("" "")); Assert.assertFalse(Strings.isNullOrBlank(""fo"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,joinNotNullTest,"@Test public void  (){ assertEquals(""a b 3 d 1.2 f"" Strings.joinNotNull("" "" ""a"" ""b"" 3 ""d"" 1.2d ""f"" null)); assertEquals(""a b 3d1.2f"" Strings.joinNotNull("""" ""a"" "" b "" 3 ""d"" 1.2d ""f"" null)); assertEquals("""" Strings.joinNotNull("""")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,joinTest,"@Test public void  (){ assertEquals(""a b 3 d 1.2 f null"" Strings.join("" "" ""a"" ""b"" 3 ""d"" 1.2d ""f"" null)); assertEquals(""a b 3d1.2fnull"" Strings.join("""" ""a"" "" b "" 3 ""d"" 1.2d ""f"" null)); assertEquals("""" Strings.join("""")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,notEmptyTest,"@Test public void  (){ Assert.assertTrue(Strings.notEmpty(""Some text"")); Assert.assertTrue(Strings.notEmpty("" "")); Assert.assertFalse(Strings.notEmpty("""")); Assert.assertFalse(Strings.notEmpty(null)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,nullIfEmptyTest,"@Test public void  (){ Assert.assertNotNull(Strings.nullIfEmpty(""Some text"")); Assert.assertNotNull(Strings.nullIfEmpty("" "")); Assert.assertNull(Strings.nullIfEmpty("""")); Assert.assertNull(Strings.nullIfEmpty(null)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,parseDelimitedStringTest,"@Test public void  (){ List<String> list=Strings.parseDelimitedString(""a b 3  d  some space  f"" "" ""); Assert.assertTrue(list.size() == 6); assertEquals(""a"" list.get(0)); assertEquals(""b"" list.get(1)); assertEquals(""3"" list.get(2)); assertEquals(""d"" list.g"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,splitAndTrimAsListTest,"@Test public void  (){ List<String> list=Strings.splitAndTrimAsList("" a   b   c   d "" "" ""); Assert.assertTrue(list.size() == 4); assertEquals(""a"" list.get(0)); assertEquals(""b"" list.get(1)); assertEquals(""c"" list.get(2)); assertEquals(""d"" list.get(3)); li"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,splitAsListTest,"@Test public void  (){ List<String> list=Strings.splitAsList(""a b  c  d"" "" ""); Assert.assertTrue(list.size() == 4); assertEquals(""a"" list.get(0)); assertEquals(""b"" list.get(1)); assertEquals("" c "" list.get(2)); assertEquals(""d"" list.get(3)); list=Strings."
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,testCamelCase,"@Test public void  () throws Exception { assertEquals(""fooBarWhatnot"" Strings.convertToCamelCase(""foo-bar-whatnot"" ""-"")); assertEquals(""fooBarWhatnot"" Strings.convertToCamelCase(""foo--bar-whatnot"" ""-"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,testReplaceAllWithoutRegex,"@Test public void  () throws Exception { assertEquals(""bar-123-bar-bar"" Strings.replaceAllWithoutRegex(""foo-123-foo-foo"" ""foo"" ""bar"")); assertEquals(""-barbar-"" Strings.replaceAllWithoutRegex(""-foofoo-"" ""foo"" ""bar"")); assertEquals(""foo {{'{{'}} bar {{'{{'}"
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,toStringTest,"@Test public void  (){ assertEquals(""foobar"" Strings.toString(""foobar"")); assertEquals(""12345"" Strings.toString(12345)); assertEquals(""null"" Strings.toString(null)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\fabric8-utils\src\test\java\io\fabric8\utils\StringsTest.java,unquoteTest,"@Test public void  (){ assertEquals(""foobar"" Strings.unquote(""\""foobar\"""")); assertEquals(""\""foobar\"""" Strings.unquote(""\""\""foobar\""\"""")); assertEquals(""'foobar'"" Strings.unquote(""'foobar'"")); Assert.assertNull(Strings.unquote(null)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,getBranches,public Map<String String>  (){ return branches; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,getParent,public String  (){ return parent; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,getState,public ProjectState  (){ return state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,getWebLinks,public List<WebLinkInfo>  (){ return webLinks; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,setBranches,public void  (Map<String String> branches){ this.branches=branches; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,setId,public void  (String id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,setParent,public void  (String parent){ this.parent=parent; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,setState,public void  (ProjectState state){ this.state=state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\ProjectInfoDTO.java,setWebLinks,public void  (List<WebLinkInfo> webLinks){ this.webLinks=webLinks; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\WebLinkInfo.java,WebLinkInfo,public  (String name String url){ this.name=name; this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,getParent,public String  (){ return parent; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,getState,public String  (){ return state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,setId,public void  (String id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,setParent,public void  (String parent){ this.parent=parent; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gerrit-api\src\main\java\io\fabric8\gerrit\RepositoryDTO.java,setState,public void  (String state){ this.state=state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,getActive,public Boolean  (){ return active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,getConfig,public WebhookConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,getEvents,public List<String>  (){ return events; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,getType,public String  (){ return type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,setActive,public void  (Boolean active){ this.active=active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,setConfig,public void  (WebhookConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,setEvents,public void  (List<String> events){ this.events=events; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateWebhookDTO.java,setType,public void  (String type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getAutoInit,public Boolean  (){ return autoInit; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getGitignoreTemplate,public String  (){ return gitignoreTemplate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getHasDownloads,public Boolean  (){ return hasDownloads; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getHasIssues,public Boolean  (){ return hasIssues; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getHasWiki,public Boolean  (){ return hasWiki; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getHomepage,public String  (){ return homepage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getLicenseTemplate,public String  (){ return licenseTemplate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getPrivateRepository,public Boolean  (){ return privateRepository; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,getTeamId,public Number  (){ return teamId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setAutoInit,public void  (Boolean autoInit){ this.autoInit=autoInit; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setGitignoreTemplate,public void  (String gitignoreTemplate){ this.gitignoreTemplate=gitignoreTemplate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setHasDownloads,public void  (Boolean hasDownloads){ this.hasDownloads=hasDownloads; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setHasIssues,public void  (Boolean hasIssues){ this.hasIssues=hasIssues; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setHasWiki,public void  (Boolean hasWiki){ this.hasWiki=hasWiki; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setHomepage,public void  (String homepage){ this.homepage=homepage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setLicenseTemplate,public void  (String licenseTemplate){ this.licenseTemplate=licenseTemplate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setPrivateRepository,public void  (Boolean privateRepository){ this.privateRepository=privateRepository; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\CreateRepositoryDTO.java,setTeamId,public void  (Number teamId){ this.teamId=teamId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\EntitySupport.java,getId,public Long  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\EntitySupport.java,setId,public void  (Long id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\DtoSupport.java,getAdditionalProperties,@JsonAnyGetter public Map<String Object>  (){ return this.additionalProperties; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\DtoSupport.java,setAdditionalProperty,@JsonAnySetter public void  (String name Object value){ this.additionalProperties.put(name value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClientSupport.java,GitRepoClientSupport,public  (String address String username){ this.username=username; this.address=address; this.password=null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClientSupport.java,call,@Override public RepositoryDTO  () throws Exception { return getApi().getOrganisationRepository(organisation repo); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClientSupport.java,createRepository,public RepositoryDTO  (CreateRepositoryDTO createRepository){ return getApi().createRepository(createRepository); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClient.java,GitRepoClient,public  (String address String username String password){ super(address username password); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoClient.java,createWebClient,@Override protected <T>T  (Class<T> clientType){ List<Object> providers=WebClients.createProviders(); WebClient webClient=WebClient.create(address providers); disableSslChecks(webClient); configureUserAndPassword(webClient username password); return JAXRS
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoTokenClient.java,GitRepoTokenClient,public  (String address String username String authorizationType String authorization){ super(address username); this.authorizationType=authorizationType; this.authorization=authorization; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoTokenClient.java,createWebClient,@Override protected <T>T  (Class<T> clientType){ List<Object> providers=WebClients.createProviders(); WebClient webClient=WebClient.create(address providers); disableSslChecks(webClient); configureAuthorization(webClient username authorizationType authori
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\GitRepoKubernetes.java,createGitRepoClient,"public static GitRepoClient  (KubernetesClient kubernetes String userName String password){ if (Strings.isNullOrBlank(userName)) { userName=Systems.getEnvVarOrSystemProperty(JENKINS_GOGS_USER ""gogsadmin""); } if (Strings.isNullOrBlank(password)) { password=Systems.getEnvVarOrSystemProperty(JENKINS_GOGS_PASSWORD ""RedHat$1""); } String namespace=KubernetesHelper.defaultNamespace(); String address; try { address=KubernetesHelper.getServiceURL(kubernetes ServiceNames.GOGS namespace ""http"" true); if (Strings.isNullOrBlank(address)) { LOG.warn(""No Gogs service could be found in kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } } catch ( IllegalArgumentException e) { LOG.warn(""No Gogs service could be found in kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } LOG.info(""Logging into Gogs at "" + address + "" as user ""+ userName); return new GitRepoClient(address userName password); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,getAdmin,public Boolean  (){ return admin; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,getPull,public Boolean  (){ return pull; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,getPush,public Boolean  (){ return push; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,setAdmin,public void  (Boolean admin){ this.admin=admin; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,setPull,public void  (Boolean pull){ this.pull=pull; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\PermissionsDTO.java,setPush,public void  (Boolean push){ this.push=push; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,getAvatarUrl,public String  (){ return avatarUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,getLogin,public String  (){ return login; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,setAvatarUrl,public void  (String avatarUrl){ this.avatarUrl=avatarUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,setLogin,public void  (String login){ this.login=login; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OrganisationDTO.java,setUrl,public void  (String url){ this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getAvatarUrl,public String  (){ return avatarUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getEmail,public String  (){ return email; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getEventsUrl,public String  (){ return eventsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getFollowersUrl,public String  (){ return followersUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getFollowingsUrl,public String  (){ return followingsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getFullName,public String  (){ return fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getGistsUrl,public String  (){ return gistsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getGravatarId,public String  (){ return gravatarId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getHtmlUrl,public String  (){ return htmlUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getLogin,public String  (){ return login; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getOrganisationssUrl,public String  (){ return organisationssUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getReceivedEventsUrl,public String  (){ return receivedEventsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getReposUrl,public String  (){ return reposUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getSiteAdmin,public Boolean  (){ return siteAdmin; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getStarredUrl,public String  (){ return starredUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getSubscriptionsUrl,public String  (){ return subscriptionsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getType,public String  (){ return type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,getUsername,public String  (){ return username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setAvatarUrl,public void  (String avatarUrl){ this.avatarUrl=avatarUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setEmail,public void  (String email){ this.email=email; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setEventsUrl,public void  (String eventsUrl){ this.eventsUrl=eventsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setFollowersUrl,public void  (String followersUrl){ this.followersUrl=followersUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setFollowingsUrl,public void  (String followingsUrl){ this.followingsUrl=followingsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setFullName,public void  (String fullName){ this.fullName=fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setGistsUrl,public void  (String gistsUrl){ this.gistsUrl=gistsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setGravatarId,public void  (String gravatarId){ this.gravatarId=gravatarId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setHtmlUrl,public void  (String htmlUrl){ this.htmlUrl=htmlUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setLogin,public void  (String login){ this.login=login; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setOrganisationssUrl,public void  (String organisationssUrl){ this.organisationssUrl=organisationssUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setReceivedEventsUrl,public void  (String receivedEventsUrl){ this.receivedEventsUrl=receivedEventsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setReposUrl,public void  (String reposUrl){ this.reposUrl=reposUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setSiteAdmin,public void  (Boolean siteAdmin){ this.siteAdmin=siteAdmin; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setStarredUrl,public void  (String starredUrl){ this.starredUrl=starredUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setSubscriptionsUrl,public void  (String subscriptionsUrl){ this.subscriptionsUrl=subscriptionsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setType,public void  (String type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setUrl,public void  (String url){ this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\OwnerDTO.java,setUsername,public void  (String username){ this.username=username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,getContentType,public String  (){ return contentType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,getSecret,public String  (){ return secret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,setContentType,public void  (String contentType){ this.contentType=contentType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,setSecret,public void  (String secret){ this.secret=secret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebhookConfig.java,setUrl,public void  (String url){ this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getCloneUrl,public String  (){ return cloneUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getFork,public Boolean  (){ return fork; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getFullName,public String  (){ return fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getHtmlUrl,public String  (){ return htmlUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getOwner,public OwnerDTO  (){ return owner; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getPermissions,public PermissionsDTO  (){ return permissions; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getPrivateRepository,public Boolean  (){ return privateRepository; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getSshUrl,public String  (){ return sshUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setCloneUrl,public void  (String cloneUrl){ this.cloneUrl=cloneUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setFork,public void  (Boolean fork){ this.fork=fork; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setFullName,public void  (String fullName){ this.fullName=fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setHtmlUrl,public void  (String htmlUrl){ this.htmlUrl=htmlUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setOwner,public void  (OwnerDTO owner){ this.owner=owner; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setPermissions,public void  (PermissionsDTO permissions){ this.permissions=permissions; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setPrivateRepository,public void  (Boolean privateRepository){ this.privateRepository=privateRepository; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setSshUrl,public void  (String sshUrl){ this.sshUrl=sshUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\RepositoryDTO.java,setUrl,public void  (String url){ this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getActive,public Boolean  (){ return active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getConfig,public WebhookConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getCreatedAt,public String  (){ return createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getEvents,public List<String>  (){ return events; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getPingUrl,public String  (){ return pingUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getTestUrl,public String  (){ return testUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getUpdatedAt,public String  (){ return updatedAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setActive,public void  (Boolean active){ this.active=active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setConfig,public void  (WebhookConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setCreatedAt,public void  (String createdAt){ this.createdAt=createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setEvents,public void  (List<String> events){ this.events=events; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setPingUrl,public void  (String pingUrl){ this.pingUrl=pingUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setTestUrl,public void  (String testUrl){ this.testUrl=testUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setUpdatedAt,public void  (String updatedAt){ this.updatedAt=updatedAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,setUrl,public void  (String url){ this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\git\WebHookDTO.java,toString,"@Override public String  (){ return ""WebHookDTO{"" + ""url='"" + url + '\''+ ""  testUrl='""+ testUrl+ '\''+ ""  pingUrl='""+ pingUrl+ '\''+ ""  name='""+ name+ '\''+ ""  createdAt='""+ createdAt+ '\''+ ""  config=""+ config+ ""  active=""+ active+ ""  events=""+ events+ "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,getActive,public Boolean  (){ return active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,getConfig,public WebhookConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,getEvents,public List<String>  (){ return events; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,getType,public String  (){ return type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,setActive,public void  (Boolean active){ this.active=active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,setConfig,public void  (WebhookConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,setEvents,public void  (List<String> events){ this.events=events; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateWebhookDTO.java,setType,public void  (String type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,getLfsEnabled,public Boolean  (){ return lfsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,getRequestAccessEnabled,public Boolean  (){ return requestAccessEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,getVisibilityLevel,public Integer  (){ return visibilityLevel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,setLfsEnabled,public void  (Boolean lfsEnabled){ this.lfsEnabled=lfsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,setPath,public void  (String path){ this.path=path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,setRequestAccessEnabled,public void  (Boolean requestAccessEnabled){ this.requestAccessEnabled=requestAccessEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,setVisibilityLevel,public void  (Integer visibilityLevel){ this.visibilityLevel=visibilityLevel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateGroupDTO.java,toString,"@Override public String  (){ return ""CreateGroupDTO{"" + ""name='"" + name + '\''+ ""  path='""+ path+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,GitlabClient,public  (String address String username String password){ super(address username password); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,createGroup,"@POST @Path(""group"") public GroupDTO  (CreateGroupDTO dto){ return getApi().createGroup(dto); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,createWebClient,@Override protected <T>T  (Class<T> clientType){ List<Object> providers=WebClients.createProviders(); if (Strings.isNotBlank(privateToken)) { providers.add(createPrivateTokenFilter(privateToken)); } WebClient webClient=WebClient.create(address providers);
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,getGroupIssues,"@GET @Path(""groups/{groupId}/issues"") public List<IssueDTO>  (Long groupId){ return getApi().getGroupIssues(groupId); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,getGroups,"@GET @Path(""groups"") public List<GroupDTO>  (){ return getApi().getGroups(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,getIssues,"@GET @Path(""issues"") public List<IssueDTO>  (){ return getApi().getIssues(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,getNamespaces,"@GET @Path(""namespaces"") public List<NamespaceDTO>  (){ return getApi().getNamespaces(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,getProject,"@GET @Path(""projects/{projectId}"") public List<ProjectDTO>  (Long projectId){ return getApi().getProject(projectId); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,getProjectIssue,"@GET @Path(""projects/{projectId}/issues"") public List<IssueDTO>  (Long projectId){ return getApi().getProjectIssue(projectId); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClient.java,getProjects,"@GET @Path(""projects"") public List<ProjectDTO>  (){ return getApi().getProjects(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,CreateProjectDTO,public  (int userId String name){ this.userId=userId; this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getBuildsEnabled,public Boolean  (){ return buildsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getContainerRegistryEnabled,public Boolean  (){ return containerRegistryEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getImportUrl,public String  (){ return importUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getIssuesEnabled,public Boolean  (){ return issuesEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getLfsEnabled,public Boolean  (){ return lfsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getMergeRequestsEnabled,public Boolean  (){ return mergeRequestsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getNamespaceId,public int  (){ return namespaceId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getOnlyAllowMergeIfAllDiscussionsAreResolved,public Boolean  (){ return onlyAllowMergeIfAllDiscussionsAreResolved; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getOnlyAllowMergeIfBuildSucceeds,public Boolean  (){ return onlyAllowMergeIfBuildSucceeds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getPublicBuilds,public Boolean  (){ return publicBuilds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getPublicProject,public Boolean  (){ return publicProject; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getRequestAccessEnabled,public Boolean  (){ return requestAccessEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getSharedRunnersEnabled,public Boolean  (){ return sharedRunnersEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getSnippetsEnabled,public Boolean  (){ return snippetsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getUserId,public int  (){ return userId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getVisibilityLevel,public Integer  (){ return visibilityLevel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,getWikiEnabled,public Boolean  (){ return wikiEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setBuildsEnabled,public void  (Boolean buildsEnabled){ this.buildsEnabled=buildsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setContainerRegistryEnabled,public void  (Boolean containerRegistryEnabled){ this.containerRegistryEnabled=containerRegistryEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setImportUrl,public void  (String importUrl){ this.importUrl=importUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setIssuesEnabled,public void  (Boolean issuesEnabled){ this.issuesEnabled=issuesEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setLfsEnabled,public void  (Boolean lfsEnabled){ this.lfsEnabled=lfsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setMergeRequestsEnabled,public void  (Boolean mergeRequestsEnabled){ this.mergeRequestsEnabled=mergeRequestsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setNamespaceId,public void  (int namespaceId){ this.namespaceId=namespaceId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setOnlyAllowMergeIfAllDiscussionsAreResolved,public void  (Boolean onlyAllowMergeIfAllDiscussionsAreResolved){ this.onlyAllowMergeIfAllDiscussionsAreResolved=onlyAllowMergeIfAllDiscussionsAreResolved; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setOnlyAllowMergeIfBuildSucceeds,public void  (Boolean onlyAllowMergeIfBuildSucceeds){ this.onlyAllowMergeIfBuildSucceeds=onlyAllowMergeIfBuildSucceeds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setPath,public void  (String path){ this.path=path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setPublicBuilds,public void  (Boolean publicBuilds){ this.publicBuilds=publicBuilds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setPublicProject,public void  (Boolean publicProject){ this.publicProject=publicProject; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setRequestAccessEnabled,public void  (Boolean requestAccessEnabled){ this.requestAccessEnabled=requestAccessEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setSharedRunnersEnabled,public void  (Boolean sharedRunnersEnabled){ this.sharedRunnersEnabled=sharedRunnersEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setSnippetsEnabled,public void  (Boolean snippetsEnabled){ this.snippetsEnabled=snippetsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setUserId,public void  (int userId){ this.userId=userId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setVisibilityLevel,public void  (Integer visibilityLevel){ this.visibilityLevel=visibilityLevel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,setWikiEnabled,public void  (Boolean wikiEnabled){ this.wikiEnabled=wikiEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\CreateProjectDTO.java,toString,"@Override public String  (){ return ""CreateProjectDTO{"" + ""userId="" + userId + ""  name='""+ name+ '\''+ ""  namespaceId=""+ namespaceId+ ""  description='""+ description+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabClientSupport.java,GitlabClientSupport,public  (String address String username){ this.username=username; this.address=address; this.password=null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,setPath,public void  (String path){ this.path=path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GroupDTO.java,toString,"@Override public String  (){ return ""GroupDTO{"" + ""path='"" + path + '\''+ ""  name='""+ name+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabKubernetes.java,createGitRepoClient,"public static GitlabClient  (KubernetesClient kubernetes String userName String password){ if (Strings.isNullOrBlank(userName)) { userName=Systems.getEnvVarOrSystemProperty(JENKINS_GOGS_USER ""gogsadmin""); } if (Strings.isNullOrBlank(password)) { password=Systems.getEnvVarOrSystemProperty(JENKINS_GOGS_PASSWORD ""RedHat$1""); } String namespace=KubernetesHelper.defaultNamespace(); String address; try { address=KubernetesHelper.getServiceURL(kubernetes ServiceNames.GITLAB namespace ""http"" true); if (Strings.isNullOrBlank(address)) { LOG.warn(""No Gitlab service could be found in kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } } catch ( IllegalArgumentException e) { LOG.warn(""No Gitlab service could be found in kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } LOG.info(""Logging into Gitlab at "" + address + "" as user ""+ userName); return new GitlabClient(address userName password); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabTokenClient.java,GitlabTokenClient,public  (String address String username String authorizationType String authorization){ super(address username); this.authorizationType=authorizationType; this.authorization=authorization; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\GitlabTokenClient.java,createWebClient,@Override protected <T>T  (Class<T> clientType){ List<Object> providers=WebClients.createProviders(); WebClient webClient=WebClient.create(address providers); disableSslChecks(webClient); configureAuthorization(webClient username authorizationType authori
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,getKind,public String  (){ return kind; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,isGroup,"@JsonIgnore public boolean  (){ return Objects.equal(""group"" kind); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,isUser,"@JsonIgnore public boolean  (){ return Objects.equal(""user"" kind); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,setKind,public void  (String kind){ this.kind=kind; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,setPath,public void  (String path){ this.path=path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\NamespaceDTO.java,toString,"@Override public String  (){ return ""NamespaceDTO{"" + ""path='"" + path + '\''+ ""  kind='""+ kind+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,getCreatedAt,public Date  (){ return createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,getDueDate,public Date  (){ return dueDate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,getIid,public Integer  (){ return iid; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,getProjectId,public Integer  (){ return projectId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,getState,public String  (){ return state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,getTitle,public String  (){ return title; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,getUpdatedAt,public Date  (){ return updatedAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,setCreatedAt,public void  (Date createdAt){ this.createdAt=createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,setDueDate,public void  (Date dueDate){ this.dueDate=dueDate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,setIid,public void  (Integer iid){ this.iid=iid; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,setProjectId,public void  (Integer projectId){ this.projectId=projectId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,setState,public void  (String state){ this.state=state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,setTitle,public void  (String title){ this.title=title; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,setUpdatedAt,public void  (Date updatedAt){ this.updatedAt=updatedAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\MilestoneDTO.java,toString,"@Override public String  (){ return ""MilestoneDTO{"" + ""iid="" + iid + ""  state='""+ state+ '\''+ ""  title='""+ title+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getAssignee,public UserDTO  (){ return assignee; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getAuthor,public UserDTO  (){ return author; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getConfidential,public Boolean  (){ return confidential; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getCreatedAt,public Date  (){ return createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getDueDate,public Date  (){ return dueDate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getIid,public Integer  (){ return iid; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getLabels,public String[]  (){ return labels; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getMilestone,public MilestoneDTO  (){ return milestone; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getProjectId,public Integer  (){ return projectId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getState,public String  (){ return state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getSubscribed,public Boolean  (){ return subscribed; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getTitle,public String  (){ return title; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getUpdatedAt,public Date  (){ return updatedAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,getWebUrl,public String  (){ return webUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setAssignee,public void  (UserDTO assignee){ this.assignee=assignee; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setAuthor,public void  (UserDTO author){ this.author=author; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setConfidential,public void  (Boolean confidential){ this.confidential=confidential; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setCreatedAt,public void  (Date createdAt){ this.createdAt=createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setDueDate,public void  (Date dueDate){ this.dueDate=dueDate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setIid,public void  (Integer iid){ this.iid=iid; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setLabels,public void  (String[] labels){ this.labels=labels; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setMilestone,public void  (MilestoneDTO milestone){ this.milestone=milestone; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setProjectId,public void  (Integer projectId){ this.projectId=projectId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setState,public void  (String state){ this.state=state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setSubscribed,public void  (Boolean subscribed){ this.subscribed=subscribed; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setTitle,public void  (String title){ this.title=title; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setUpdatedAt,public void  (Date updatedAt){ this.updatedAt=updatedAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,setWebUrl,public void  (String webUrl){ this.webUrl=webUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\IssueDTO.java,toString,"@Override public String  (){ return ""IssueDTO{"" + ""iid="" + iid + ""  title='""+ title+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getArchived,public Boolean  (){ return archived; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getAvatarUrl,public String  (){ return avatarUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getBuildsEnabled,public Boolean  (){ return buildsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getContainerRegistryEnabled,public Boolean  (){ return containerRegistryEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getCreatedAt,public Date  (){ return createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getCreatorId,public Integer  (){ return creatorId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getDefaultBranch,public String  (){ return defaultBranch; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getForksCount,public Integer  (){ return forksCount; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getHttpUrlToRepo,public String  (){ return httpUrlToRepo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getIssuesEnabled,public Boolean  (){ return issuesEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getLastActivityAt,public Date  (){ return lastActivityAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getMergeRequestsEnabled,public Boolean  (){ return mergeRequestsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getNameWithNamespace,public String  (){ return nameWithNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getNamespace,public NamespaceDTO  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getOnlyAllowMergeIfAllDiscussionsAreResolved,public Boolean  (){ return onlyAllowMergeIfAllDiscussionsAreResolved; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getOnlyAllowMergeIfBuildSucceeds,public Boolean  (){ return onlyAllowMergeIfBuildSucceeds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getOpenIssuesCount,public Integer  (){ return openIssuesCount; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getOwner,public UserDTO  (){ return owner; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getPath,public String  (){ return path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getPathWithNamespace,public String  (){ return pathWithNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getPublicBuilds,public Boolean  (){ return publicBuilds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getPublicRepo,public Boolean  (){ return publicRepo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getRequestAccessEnabled,public Boolean  (){ return requestAccessEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getRunnersToken,public String  (){ return runnersToken; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getSharedRunnersEnabled,public Boolean  (){ return sharedRunnersEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getSharedWithGroups,public String[]  (){ return sharedWithGroups; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getSnippetsEnabled,public Boolean  (){ return snippetsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getSshUrlToRepo,public String  (){ return sshUrlToRepo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getStarCount,public Integer  (){ return starCount; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getTagList,public String[]  (){ return tagList; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getVisibilityLevel,public Integer  (){ return visibilityLevel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getWebUrl,public String  (){ return webUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,getWikiEnabled,public Boolean  (){ return wikiEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setArchived,public void  (Boolean archived){ this.archived=archived; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setAvatarUrl,public void  (String avatarUrl){ this.avatarUrl=avatarUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setBuildsEnabled,public void  (Boolean buildsEnabled){ this.buildsEnabled=buildsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setContainerRegistryEnabled,public void  (Boolean containerRegistryEnabled){ this.containerRegistryEnabled=containerRegistryEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setCreatedAt,public void  (Date createdAt){ this.createdAt=createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setCreatorId,public void  (Integer creatorId){ this.creatorId=creatorId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setDefaultBranch,public void  (String defaultBranch){ this.defaultBranch=defaultBranch; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setForksCount,public void  (Integer forksCount){ this.forksCount=forksCount; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setHttpUrlToRepo,public void  (String httpUrlToRepo){ this.httpUrlToRepo=httpUrlToRepo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setIssuesEnabled,public void  (Boolean issuesEnabled){ this.issuesEnabled=issuesEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setLastActivityAt,public void  (Date lastActivityAt){ this.lastActivityAt=lastActivityAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setMergeRequestsEnabled,public void  (Boolean mergeRequestsEnabled){ this.mergeRequestsEnabled=mergeRequestsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setNameWithNamespace,public void  (String nameWithNamespace){ this.nameWithNamespace=nameWithNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setNamespace,public void  (NamespaceDTO namespace){ this.namespace=namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setOnlyAllowMergeIfAllDiscussionsAreResolved,public void  (Boolean onlyAllowMergeIfAllDiscussionsAreResolved){ this.onlyAllowMergeIfAllDiscussionsAreResolved=onlyAllowMergeIfAllDiscussionsAreResolved; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setOnlyAllowMergeIfBuildSucceeds,public void  (Boolean onlyAllowMergeIfBuildSucceeds){ this.onlyAllowMergeIfBuildSucceeds=onlyAllowMergeIfBuildSucceeds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setOpenIssuesCount,public void  (Integer openIssuesCount){ this.openIssuesCount=openIssuesCount; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setOwner,public void  (UserDTO owner){ this.owner=owner; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setPath,public void  (String path){ this.path=path; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setPathWithNamespace,public void  (String pathWithNamespace){ this.pathWithNamespace=pathWithNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setPublicBuilds,public void  (Boolean publicBuilds){ this.publicBuilds=publicBuilds; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setPublicRepo,public void  (Boolean publicRepo){ this.publicRepo=publicRepo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setRequestAccessEnabled,public void  (Boolean requestAccessEnabled){ this.requestAccessEnabled=requestAccessEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setRunnersToken,public void  (String runnersToken){ this.runnersToken=runnersToken; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setSharedRunnersEnabled,public void  (Boolean sharedRunnersEnabled){ this.sharedRunnersEnabled=sharedRunnersEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setSharedWithGroups,public void  (String[] sharedWithGroups){ this.sharedWithGroups=sharedWithGroups; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setSnippetsEnabled,public void  (Boolean snippetsEnabled){ this.snippetsEnabled=snippetsEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setSshUrlToRepo,public void  (String sshUrlToRepo){ this.sshUrlToRepo=sshUrlToRepo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setStarCount,public void  (Integer starCount){ this.starCount=starCount; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setTagList,public void  (String[] tagList){ this.tagList=tagList; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setVisibilityLevel,public void  (Integer visibilityLevel){ this.visibilityLevel=visibilityLevel; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setWebUrl,public void  (String webUrl){ this.webUrl=webUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,setWikiEnabled,public void  (Boolean wikiEnabled){ this.wikiEnabled=wikiEnabled; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\ProjectDTO.java,toString,"@Override public String  (){ return ""ProjectDTO{"" + ""path='"" + path + '\''+ ""  name='""+ name+ '\''+ ""  webUrl='""+ webUrl+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,getContentType,public String  (){ return contentType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,getSecret,public String  (){ return secret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,setContentType,public void  (String contentType){ this.contentType=contentType; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,setSecret,public void  (String secret){ this.secret=secret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebhookConfig.java,setUrl,public void  (String url){ this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,getAvatarUrl,public String  (){ return avatarUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,getState,public String  (){ return state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,getUsername,public String  (){ return username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,getWebUrl,public String  (){ return webUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,setAvatarUrl,public void  (String avatarUrl){ this.avatarUrl=avatarUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,setState,public void  (String state){ this.state=state; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,setUsername,public void  (String username){ this.username=username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,setWebUrl,public void  (String webUrl){ this.webUrl=webUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\UserDTO.java,toString,"@Override public String  (){ return ""UserDTO{"" + ""username='"" + username + '\''+ ""  name='""+ name+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getActive,public Boolean  (){ return active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getConfig,public WebhookConfig  (){ return config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getCreatedAt,public String  (){ return createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getEvents,public List<String>  (){ return events; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getPingUrl,public String  (){ return pingUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getTestUrl,public String  (){ return testUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getUpdatedAt,public String  (){ return updatedAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,getUrl,public String  (){ return url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setActive,public void  (Boolean active){ this.active=active; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setConfig,public void  (WebhookConfig config){ this.config=config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setCreatedAt,public void  (String createdAt){ this.createdAt=createdAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setEvents,public void  (List<String> events){ this.events=events; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setPingUrl,public void  (String pingUrl){ this.pingUrl=pingUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setTestUrl,public void  (String testUrl){ this.testUrl=testUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setUpdatedAt,public void  (String updatedAt){ this.updatedAt=updatedAt; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,setUrl,public void  (String url){ this.url=url; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\main\java\io\fabric8\repo\gitlab\WebHookDTO.java,toString,"@Override public String  (){ return ""WebHookDTO{"" + ""url='"" + url + '\''+ ""  testUrl='""+ testUrl+ '\''+ ""  pingUrl='""+ pingUrl+ '\''+ ""  name='""+ name+ '\''+ ""  createdAt='""+ createdAt+ '\''+ ""  config=""+ config+ ""  active=""+ active+ ""  events=""+ events+ "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\test\java\io\fabric8\repo\git\Example.java,main,"public static void  (String[] args){ if (args.length < 3) { System.out.println(""Usage: address userName password""); return; } String address=args[0]; String userName=args[1]; String password=args[2]; try { GitRepoClient client=new GitRepoClient(address userName password); List<RepositoryDTO> repositoryDTOs=client.listRepositories(); System.out.println(""Got repositories: "" + toJson(repositoryDTOs)); } catch ( Exception e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\test\java\io\fabric8\repo\git\GetFileFromGit.java,main,"public static void  (String[] args){ if (args.length < 4) { System.out.println(""Usage: userName password repo file [branch]""); return; } String address=""http://"" + Systems.getEnvVarOrSystemProperty(""GOGS_SERVICE_HOST"" ""gogs.vagrant.f8""); String userName=args[0]; String password=args[1]; String repo=args[2]; String path=args[3]; String branch=""master""; if (args.length > 4) { branch=args[4]; } try { System.out.println(""Logging into git repo at "" + address + "" with user ""+ userName+ "" to find file: ""+ path); GitRepoClient client=new GitRepoClient(address userName password); InputStream input=client.getRawFile(userName repo branch path); if (input == null) { System.out.println(""No such file: "" + path + "" in branch ""+ branch+ "" for user: ""+ userName); } else { String text=IOHelpers.readFully(input); System.out.println(""File found!""); System.out.println(); System.out.println(text); System.out.println(); } path=""DoesNotExist.garbage""; System.out.println(""Now trying file that does not exist: "" + path); input=client.getRawFile(userName repo branch path); if (input == null) { System.out.println(""Correctly found no file!""); } else { System.out.println(""WHOAH found content: "" + IOHelpers.readFully(input)); } } catch ( Exception e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\test\java\io\fabric8\repo\git\JsonTest.java,testCreateRepository,"@Test public void  () throws Exception { CreateRepositoryDTO dto=new CreateRepositoryDTO(); dto.setName(""foo""); dto.setDescription(""some description""); dto.setTeamId(1234); dto.setHasWiki(true); dto.setPrivateRepository(true); dto.setLicenseTemplate(""some"
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-api\src\test\java\io\fabric8\repo\gitlab\Example.java,main,"public static void  (String[] args){ if (args.length < 3) { System.out.println(""Usage: address userName privateToken""); return; } String address=args[0]; String userName=args[1]; String privateToken=args[2]; try { GitlabClient client=new GitlabClient(address userName); client.setPrivateToken(privateToken); List<GroupDTO> groups=client.getGroups(); System.out.println(""Found "" + groups.size() + "" group(s)""); for ( GroupDTO group : groups) { System.out.println("""" + group); } List<ProjectDTO> projects=client.getProjects(); System.out.println(""Found "" + groups.size() + "" group(s)""); for ( ProjectDTO project : projects) { System.out.println("""" + project); } if (projects.size() > 0) { ProjectDTO project=projects.get(0); Long id=project.getId(); if (id != null) { } } } catch ( Exception e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\test\java\io\fabric8\repo\git\resteasy\Example.java,createObjectMapper,public static ObjectMapper  (){ ObjectMapper mapper=new ObjectMapper(); mapper.enable(SerializationFeature.INDENT_OUTPUT); return mapper; } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\test\java\io\fabric8\repo\git\resteasy\Example.java,main,"public static void  (String[] args){ if (args.length < 3) { System.out.println(""Usage: address userName password""); return; } String address=args[0]; String userName=args[1]; String password=args[2]; try { ResteasyGitRepoClient client=new ResteasyGitRepoClient(address userName password); List<RepositoryDTO> repositoryDTOs=client.listRepositories(); System.out.println(""Got repositories: "" + toJson(repositoryDTOs)); } catch ( Exception e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\test\java\io\fabric8\repo\git\resteasy\Example.java,toJson,public static String  (Object dto) throws JsonProcessingException { ObjectMapper mapper=createObjectMapper(); return mapper.writeValueAsString(dto); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,ResteasyGitRepoClient,public  (String address String username String password){ super(address username password); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,createWebClient,protected <T>T  (Class<T> clientType){ String address=getAddress(); ResteasyProviderFactory providerFactory=ResteasyProviderFactory.getInstance(); providerFactory.register(ResteasyJackson2Provider.class); providerFactory.register(Jackson2JsonpInterceptor.class); providerFactory.register(StringTextStar.class); providerFactory.register(DefaultTextPlain.class); providerFactory.register(FileProvider.class); providerFactory.register(InputStreamProvider.class); providerFactory.register(new Authenticator()); providerFactory.register(clientType); ResteasyClientBuilder builder=new ResteasyClientBuilder(); builder.providerFactory(providerFactory); builder.connectionPoolSize(3); Client client=builder.build(); ResteasyWebTarget target=(ResteasyWebTarget)client.target(address); return target.proxy(clientType); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,createWithContextClassLoader,public static ResteasyGitRepoClient  (String address String username String password){ Thread.currentThread().setContextClassLoader(ResteasyGitRepoClient.class.getClassLoader()); return new ResteasyGitRepoClient(address username password); } 
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,filter,"public void  (ClientRequestContext requestContext) throws IOException { MultivaluedMap<String Object> headers=requestContext.getHeaders(); final String basicAuthentication=getBasicAuthentication(); headers.add(""Authorization"" basicAuthentication); } "
C:\Users\User\Desktop\Thesis\fabric8\components\gitrepo-resteasy\src\main\java\io\fabric8\repo\git\resteasy\ResteasyGitRepoClient.java,getBasicAuthentication,"private String  (){ String token=getUsername() + "":"" + getPassword(); try { return ""Basic "" + DatatypeConverter.printBase64Binary(token.getBytes(""UTF-8"")); } catch ( UnsupportedEncodingException ex) { throw new IllegalStateException(""Cannot encode with UTF-8"" ex); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\NoopHubotRestApi.java,notify,"@Override public String  (String room @FormParam(""message"") String message){ return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,HubotNotifier,public  (String hubotUrl String username String password String roomExpression){ this.hubotUrl=hubotUrl; this.username=username; this.password=password; this.roomExpression=roomExpression; } 
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,createWebClient,protected <T>T  (Class<T> clientType String hubotUrl){ List<Object> providers=createProviders(); WebClient webClient=WebClient.create(hubotUrl providers); disableSslChecks(webClient); configureUserAndPassword(webClient username password); return JAXRSClientFactory.fromClient(webClient clientType); } 
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,getHubotRestApi,protected HubotRestApi  (){ if (api == null) { String url=getHubotUrl(); if (Strings.isNotBlank(url)) { api=createWebClient(HubotRestApi.class url); } else { api=new NoopHubotRestApi(); } } return api; } 
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,getHubotUrl,"public String  (){ if (!initalised) { initalised=true; if (hubotUrl == null && hubotUrlHolder != null) { hubotUrl=hubotUrlHolder.get(); } if (Strings.isNotBlank(hubotUrl)) { LOG.info(""Starting HubotNotifier using address: "" + hubotUrl); } else { LOG.warn(""No kubernetes service found for "" + HUBOT_SERVICE_NAME + "" so chat messages just going to logs instead""); } } return hubotUrl; } "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,notifyBuild,"public void  (String namespace String buildConfig String message){ String room=roomExpression.replace(""${namespace}"" namespace).replace(""${buildConfig}"" buildConfig); notifyRoom(room message); } "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotNotifier.java,notifyRoom,"public void  (String room String message){ logMessages.notify(room message); try { getHubotRestApi().notify(room message); } catch ( Throwable e) { LOG.error(""Failed to notify hubot room: "" + room + "" with message: ""+ message+ "". Reason: ""+ e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\LoggingHubotRestApi.java,notify,"@Override public String  (String room @FormParam(""message"") String message){ String category=""hubot."" + room; Logger logger=LoggerFactory.getLogger(category); logger.info(message); return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\main\java\io\fabric8\hubot\HubotRestApi.java,notify,"@POST @Path(""/hubot/ /{room}"") @Consumes(""application/x-www-form-urlencoded"") String notify(@PathParam(""room"") String room @FormParam(""message"") String message); "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\MockConfigurer.java,configure,"public static void  (){ MOCK.expect().get().withPath(""/api/v1/namespaces/default/services/hubot"").andReturn(200 new ServiceBuilder().withNewMetadata().withName(""hubot"").endMetadata().withNewSpec().addNewPort().withProtocol(""TCP"").withPort(80).withNewTargetPort(8080).endPort().withClusterIP(""172.30.17.2"").endSpec().build()).always(); String masterUrl=MOCK.getServer().url(""/"").toString(); System.setProperty(Config.KUBERNETES_MASTER_SYSTEM_PROPERTY masterUrl); System.setProperty(Config.KUBERNETES_NAMESPACE_SYSTEM_PROPERTY ""cdi""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\HubotTest.java,createDeployment,"@Deployment public static WebArchive  (){ return DeltaspikeTestBase.createDeployment().addClasses(DeltaspikeTestBase.getDeltaSpikeHolders()).addClasses(HubotRestApi.class HubotNotifier.class DefaultConfigPropertyProducer.class).addAsWebInfResource(""META-I"
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\HubotTest.java,setUp,@BeforeClass public static void  (){ MockConfigurer.configure(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\HubotTest.java,testServiceInjection,@Test public void  (){ Assert.assertNotNull(notifier); } 
C:\Users\User\Desktop\Thesis\fabric8\components\hubot-api\src\test\java\io\fabric8\hubot\Main.java,main,"public static void  (String[] args){ if (args.length < 2) { System.out.println(""Usage: room messages""); return; } String room=args[0]; StringBuilder buffer=new StringBuilder(); for (int i=1; i < args.length; i++) { String arg=args[i]; if (i > 1) { buffer.append("" ""); } buffer.append(arg); } String message=buffer.toString(); try { String hubotUrl=Systems.getServiceHostAndPort(HubotNotifier.HUBOT_SERVICE_NAME ""hubot-webhook.fabric8.local"" ""80""); String username=Systems.getEnvVarOrSystemProperty(""HUBOT_USERNAME"" """"); String password=Systems.getEnvVarOrSystemProperty(""HUBOT_PASSWORD"" """"); String roomExpression=Systems.getEnvVarOrSystemProperty(""HUBOT_BUILD_ROOM"" HubotNotifier.DEFAULT_ROOM_EXPRESSION); System.out.println(""Logging into hubot web hook with user "" + username + "" at URL: ""+ hubotUrl); HubotNotifier notifier=new HubotNotifier(hubotUrl username password roomExpression); notifier.notifyRoom(room message); } catch ( Exception e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\JAXRSClients.java,handle404ByReturningNull,public static <T>T  (Callable<T> callable){ try { return callable.call(); } catch ( WebApplicationException e) { if (e.getResponse().getStatus() == 404) { return null; } else { throw e; } } catch ( Exception e) { throw new WebApplicationException(e); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\AuthorizationHeaderFilter.java,filter,"@Override public void  (ClientRequestContext requestContext) throws IOException { if (Strings.isNotBlank(authorizationHeader)) { MultivaluedMap<String Object> headers=requestContext.getHeaders(); headers.put(""Authorization"" Collections.<Object>singletonLi"
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\AuthorizationHeaderFilter.java,getAuthorizationHeader,public String  (){ return authorizationHeader; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\AuthorizationHeaderFilter.java,setAuthorizationHeader,public void  (String authorizationHeader){ this.authorizationHeader=authorizationHeader; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\JsonHelper.java,createObjectMapper,public static ObjectMapper  (){ ObjectMapper mapper=new ObjectMapper(); mapper.enable(SerializationFeature.INDENT_OUTPUT); return mapper; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jaxrs-utils\src\main\java\io\fabric8\utils\jaxrs\JsonHelper.java,toJson,public static String  (Object dto) throws JsonProcessingException { ObjectMapper mapper=createObjectMapper(); return mapper.writeValueAsString(dto); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertCreateJenkinsJob,"public static void  (JenkinsServer jenkinsServer String xml String jobName){ try { jenkinsServer.createJob(jobName xml); } catch ( IOException e) { fail(""Failed to create Jenkins job "" + jobName + "" for XML `""+ xml+ ""`. ""+ e e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertJobExists,"public static JobWithDetails  (JenkinsServer jenkins String jobName){ JobWithDetails job=tryFindJob(jenkins jobName); if (job != null) { return job; } fail(""No job found called `"" + jobName + ""` for jenkins at ""+ jenkins); return job; } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertJobHasBuild,"public static Build  (JenkinsServer jenkins String jobName){ JobWithDetails job=assertJobExists(jenkins jobName); Build lastBuild=job.getLastBuild(); assertNotNull(""No lastBuild for job `"" + jobName + ""`"" lastBuild); return lastBuild; } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertJobLastBuildIsSuccessful,"public static void  (long timeMillis final JenkinsServer jenkins final String jobName) throws Exception { Asserts.assertWaitFor(timeMillis new Block(){ @Override public void invoke() throws Exception { JobWithDetails job=assertJobExists(jenkins jobName); Build lastBuild=job.getLastBuild(); assertNotNull(""No lastBuild for job `"" + jobName + ""`"" lastBuild); System.out.println(""Last build of `"" + jobName + ""` at ""+ lastBuild.getUrl()); Build lastSuccessfulBuild=job.getLastSuccessfulBuild(); assertNotNull(""No lastSuccessfulBuild for job `"" + jobName + ""` at: ""+ lastBuild.getUrl() lastSuccessfulBuild); assertEquals(""Last successful build number was not the last build number: "" + lastBuild.getUrl() lastBuild.getNumber() lastSuccessfulBuild.getNumber()); System.out.println(""Successful build of `"" + jobName + ""` at ""+ lastSuccessfulBuild.getUrl()); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertJobPathExists,"public static JobWithDetails  (JenkinsServer jenkins String... jobPath) throws IOException { JobWithDetails job=findJobPath(jenkins jobPath); assertNotNull(""Could not find Jenkins Job: "" + fullJobPath(jobPath) job); LOG.info(""Found job "" + job.getUrl()); return job; } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertJobXml,"public static String  (JenkinsServer jenkinsServer String jobName){ try { return jenkinsServer.getJobXml(jobName); } catch ( IOException e) { fail(""Failed to find XML for Jenkins job "" + jobName + "". ""+ e e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertJobXmlDocument,"public static Document  (JenkinsServer jenkins String jobName){ JenkinsAsserts.assertJobExists(jenkins jobName); String xml; try { xml=jenkins.getJobXml(jobName); } catch ( IOException e) { throw new AssertionError(""Failed to load job XML for "" + jobName + "" due to ""+ e e); } try { return XmlUtils.parseDoc(xml); } catch ( Exception e) { throw new AssertionError(""Failed to load parse XML for "" + jobName + "" due to ""+ e e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertTriggerJobPath,"public static QueueReference  (JenkinsServer jenkins String... jobPath) throws IOException { JobWithDetails jobWithDetails=assertJobPathExists(jenkins jobPath); QueueReference build=jobWithDetails.build(true); assertNotNull(""No build reference for job "" + fullJobPath(jobPath) build != null); return build; } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertWaitForJobPathExists,"public static JobWithDetails  (final JenkinsServer jenkins long timeMillis String... jobPath) throws Exception { final AtomicReference<JobWithDetails> holder=new AtomicReference<>(null); LOG.info(""Waiting for Jenkins job "" + fullJobPath(jobPath)); Asserts.assertWaitFor(timeMillis new Block(){ @Override public void invoke() throws Exception { holder.set(assertJobPathExists(jenkins jobPath)); } } ); return holder.get(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertWaitForJobPathNotExist,"public static void  (final JenkinsServer jenkins long timeMillis String... jobPath) throws Exception { final String fullPath=fullJobPath(jobPath); LOG.info(""Waiting for Jenkins job to no longer exist "" + fullPath); Asserts.assertWaitFor(timeMillis new Block(){ @Override public void invoke() throws Exception { assertTrue(""Jenkins job "" + fullPath + "" should not exist"" findJobPath(jenkins jobPath) == null); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,assertWaitForNoRunningBuilds,"public static void  (JenkinsServer jenkins long timeMillis) throws Exception { LOG.info(""Waiting for no running Jenkins jobs""); Asserts.assertWaitFor(timeMillis new Block(){ @Override public void invoke() throws Exception { List<QueueItem> items=jenkins.getQueue().getItems(); assertTrue(""Waiting for build queue to be empty but has "" + items.size() items.isEmpty()); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,createJenkinsPipelineJobXml,"public static String  (String jenkinsfile){ return ""<?xml version=\""1.0\"" encoding=\""UTF-8\""?><org.jenkinsci.plugins.workflow.job.WorkflowJob plugin=\""workflow-job@1.15\"">\n"" + "" <keepDependencies>false</keepDependencies>\n"" + "" <properties/>\n""+ "" <definition class=\""org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition\"" plugin=\""workflow-cps@1.15\"">\n""+ "" <script>"" + jenkinsfile + ""</script>\n""+ "" <sandbox>false</sandbox>\n""+ "" </definition>\n""+ "" <triggers/>\n""+ ""</org.jenkinsci.plugins.workflow.job.WorkflowJob>""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,createJenkinsServer,public static JenkinsServer  (String url) throws URISyntaxException { return new JenkinsServer(new URI(url)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,deleteAllCurrentJobs,"public static void  (JenkinsServer jenkins) throws IOException { int numberOfAttempts=2; for (int i=1; i < numberOfAttempts; i++) { if (i > 1) { try { Thread.sleep(2000); } catch ( InterruptedException e) { } } Map<String Job> jobs=jenkins.getJobs(); Set<Map.Entry<String Job>> entries=jobs.entrySet(); for ( Map.Entry<String Job> entry : entries) { String jobName=entry.getKey(); Job job=entry.getValue(); LOG.info(""Deleting job "" + jobName); try { jenkins.deleteJob(jobName true); } catch ( IOException e) { LOG.warn(""Failed to delete job: "" + jobName + "". ""+ e e); } } if (numberOfJobs(jenkins) == 0) { return; } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,displayJobs,"public static void  (JenkinsServer jenkins Map<String Job> jobs String indent) throws IOException { Set<Map.Entry<String Job>> entries=jobs.entrySet(); for ( Map.Entry<String Job> entry : entries) { String jobName=entry.getKey(); Job job=entry.getValue(); String suffix=""""; JobWithDetails details=job.details(); if (details != null) { Build lastBuild=details.getLastBuild(); if (lastBuild != null) { BuildWithDetails buildDetails=lastBuild.details(); if (buildDetails != null) { String buildId=buildDetails.getId(); if (buildId != null) { suffix="": #"" + buildId; } } } } System.out.println(indent + jobName + suffix); Optional<FolderJob> optional=jenkins.getFolderJob(job); if (optional.isPresent()) { FolderJob folderJob=optional.get(); Map<String Job> children=folderJob.getJobs(); displayJobs(jenkins children indent + INDENT); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,findJobPath,public static JobWithDetails  (JenkinsServer jenkins String... jobPath) throws IOException { FolderJob folder=null; for (int i=0  size=jobPath.length; i < size; i++) { String path=jobPath[i]; if (size == 1 && i == 0) { return jenkins.getJob(path); } if (folder == null) { JobWithDetails jobDetails=jenkins.getJob(path); if (jobDetails == null) { return null; } Job job=new Job(jobDetails.getName() jobDetails.getUrl()); Optional<FolderJob> optional=jenkins.getFolderJob(job); if (!optional.isPresent()) { return null; } folder=optional.get(); continue; } Job job=folder.getJob(path); if (job == null) { return null; } if (i == size - 1) { return job.details(); } else { Optional<FolderJob> optional=jenkins.getFolderJob(job); if (!optional.isPresent()) { return null; } folder=optional.get(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,fullJobPath,"public static String  (String[] jobPath){ return Strings.join(""/"" jobPath); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,invoke,"@Override public void  () throws Exception { assertTrue(""Jenkins job "" + fullPath + "" should not exist"" findJobPath(jenkins jobPath) == null); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,numberOfJobs,public static int  (JenkinsServer jenkins) throws IOException { return jenkins.getJobs().size(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsAsserts.java,tryFindJob,"protected static JobWithDetails  (JenkinsServer jenkins String jobName){ for (int i=0; i < 15; i++) { try { return jenkins.getJob(jobName); } catch ( IOException e) { LOG.info(""Caught: "" + e e); try { Thread.sleep(2000); } catch ( InterruptedException e1) { } } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsTestMain.java,logError,"public static void  (String message Throwable e){ System.out.println(""ERROR: "" + message + e); e.printStackTrace(); Throwable cause=e.getCause(); if (cause != null && cause != e) { logError(""Caused by: "" cause); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jenkins-assertions\src\main\java\io\fabric8\testing\jenkins\JenkinsTestMain.java,main,"public static void  (String[] args){ if (args.length == 0) { System.out.println(""Usage: [jenkinsServerUrl] [jobName]""); return; } String jenkinsUrl=""http://jenkins.vagrant.f8/""; String job=null; if (args.length > 0) { jenkinsUrl=args[0]; } if (args.length > 1) { job=args[1]; } try { JenkinsServer jenkins=JenkinsAsserts.createJenkinsServer(jenkinsUrl); Map<String Job> jobs=jenkins.getJobs(); Set<Map.Entry<String Job>> entries=jobs.entrySet(); for ( Map.Entry<String Job> entry : entries) { System.out.println(""Job "" + entry.getKey() + "" = ""+ entry.getValue()); } if (job != null) { JenkinsAsserts.assertJobLastBuildIsSuccessful(jenkins job); } } catch ( Exception e) { logError(e.getMessage() e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,asInstanceOf,public static <T>T  (Object value Class<T> clazz){ assertThat(value).isInstanceOf(clazz); return clazz.cast(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertBigDecimal,public static BigDecimalAssert  (Object value){ BigDecimal typedValue=asInstanceOf(value BigDecimal.class); return (BigDecimalAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertBoolean,public static BooleanAssert  (Object value){ Boolean typedValue=asInstanceOf(value Boolean.class); return (BooleanAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertByte,public static ByteAssert  (Object value){ Byte typedValue=asInstanceOf(value Byte.class); return (ByteAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertCharacter,public static CharacterAssert  (Object value){ Character typedValue=asInstanceOf(value Character.class); return (CharacterAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertDate,public static DateAssert  (Object value){ Date typedValue=asInstanceOf(value Date.class); return (DateAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertDouble,public static DoubleAssert  (Object value){ Double typedValue=asInstanceOf(value Double.class); return (DoubleAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertFloat,public static FloatAssert  (Object value){ Float typedValue=asInstanceOf(value Float.class); return (FloatAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertInteger,public static IntegerAssert  (Object value){ Integer typedValue=asInstanceOf(value Integer.class); return (IntegerAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertJSONArray,public static JSONArrayAssert  (Object value){ JSONArray typedValue=asInstanceOf(value JSONArray.class); return new JSONArrayAssert(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertJSONObject,public static JSONObjectAssert  (Object value){ JSONObject typedValue=asInstanceOf(value JSONObject.class); return new JSONObjectAssert(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertList,public static ListAssert  (Object value){ List typedValue=asInstanceOf(value List.class); return (ListAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertLong,public static LongAssert  (Object value){ Long typedValue=asInstanceOf(value Long.class); return (LongAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertMap,public static MapAssert  (Object value){ Map typedValue=asInstanceOf(value Map.class); return (MapAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertShort,public static ShortAssert  (Object value){ Short typedValue=asInstanceOf(value Short.class); return (ShortAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertString,public static StringAssert  (Object value){ String typedValue=asInstanceOf(value String.class); return (StringAssert)assertThat(typedValue); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\Assertions.java,assertThat,public static JolokiaAssert  (J4pClient client){ return new JolokiaAssert(client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaHelpers.java,asNumber,protected static Number  (Object value){ if (value instanceof Number) { return (Number)value; } else { return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaHelpers.java,convertJolokiaToJavaType,public static Object  (Class<?> clazz Object value) throws IOException { if (clazz.isArray()) { if (value instanceof JSONArray) { JSONArray jsonArray=(JSONArray)value; Object[] javaArray=(Object[])Array.newInstance(clazz.getComponentType() jsonArray.size()); int idx=0; for ( Object element : jsonArray) { Array.set(javaArray idx++ convertJolokiaToJavaType(clazz.getComponentType() element)); } return javaArray; } else { return null; } } else if (String.class.equals(clazz)) { return (value != null) ? value.toString() : null; } else if (clazz.equals(Byte.class) || clazz.equals(byte.class)) { Number number=asNumber(value); return number != null ? number.byteValue() : null; } else if (clazz.equals(Short.class) || clazz.equals(short.class)) { Number number=asNumber(value); return number != null ? number.shortValue() : null; } else if (clazz.equals(Integer.class) || clazz.equals(int.class)) { Number number=asNumber(value); return number != null ? number.intValue() : null; } else if (clazz.equals(Long.class) || clazz.equals(long.class)) { Number number=asNumber(value); return number != null ? number.longValue() : null; } else if (clazz.equals(Float.class) || clazz.equals(float.class)) { Number number=asNumber(value); return number != null ? number.floatValue() : null; } else if (clazz.equals(Double.class) || clazz.equals(double.class)) { Number number=asNumber(value); return number != null ? number.doubleValue() : null; } else if (value instanceof JSONObject) { JSONObject jsonObject=(JSONObject)value; if (!JSONObject.class.isAssignableFrom(clazz)) { String json=jsonObject.toJSONString(); return getObjectMapper().readerFor(clazz).readValue(json); } } return value; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaHelpers.java,getObjectMapper,public static ObjectMapper  (){ return objectMapper; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaHelpers.java,setObjectMapper,public static void  (ObjectMapper objectMapper){ JolokiaHelpers.objectMapper=objectMapper; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,JSONArrayAssert,public  (JSONArray actual){ super(actual); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertBigDecimal,public BigDecimalAssert  (int index){ Object value=value(index); return Assertions.assertBigDecimal(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertBoolean,public BooleanAssert  (int index){ Object value=value(index); return Assertions.assertBoolean(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertByte,public ByteAssert  (int index){ Object value=value(index); return Assertions.assertByte(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertDate,public DateAssert  (int index){ Object value=value(index); return Assertions.assertDate(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertDouble,public DoubleAssert  (int index){ Object value=value(index); return Assertions.assertDouble(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertFloat,public FloatAssert  (int index){ Object value=value(index); return Assertions.assertFloat(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertInteger,public IntegerAssert  (int index){ Object value=value(index); return Assertions.assertInteger(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertJSONArray,public JSONArrayAssert  (int index){ Object value=value(index); return Assertions.assertJSONArray(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertJSONObject,public JSONObjectAssert  (int index){ Object value=value(index); return Assertions.assertJSONObject(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertList,public ListAssert  (int index){ Object value=value(index); return Assertions.assertList(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertLong,public LongAssert  (int index){ Object value=value(index); return Assertions.assertLong(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertMap,public MapAssert  (int index){ Object value=value(index); return Assertions.assertMap(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertObject,public ObjectAssert  (int index){ Object value=value(index); return (ObjectAssert)assertThat(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertShort,public ShortAssert  (int index){ Object value=value(index); return Assertions.assertShort(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertSize,"public IntegerAssert  (){ return (IntegerAssert)assertThat(get().size()).as(""size""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,assertString,public StringAssert  (int index){ Object value=value(index); return Assertions.assertString(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,get,public JSONArray  (){ return (JSONArray)actual; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONArrayAssert.java,value,"public Object  (int index){ JSONArray array=get(); assertThat(array.size()).as(""size of array"").isGreaterThan(index); return array.get(index); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,JSONObjectAssert,public  (JSONObject actual){ super(actual); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertBigDecimal,public BigDecimalAssert  (String key){ Object value=value(key); return Assertions.assertBigDecimal(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertBoolean,public BooleanAssert  (String key){ Object value=value(key); return Assertions.assertBoolean(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertByte,public ByteAssert  (String key){ Object value=value(key); return Assertions.assertByte(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertCharacter,public CharacterAssert  (String key){ Object value=value(key); return Assertions.assertCharacter(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertDate,public DateAssert  (String key){ Object value=value(key); return Assertions.assertDate(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertDouble,public DoubleAssert  (String key){ Object value=value(key); return Assertions.assertDouble(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertFloat,public FloatAssert  (String key){ Object value=value(key); return Assertions.assertFloat(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertInteger,public IntegerAssert  (String key){ Object value=value(key); return Assertions.assertInteger(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertJSONArray,public JSONArrayAssert  (String key){ Object value=value(key); return Assertions.assertJSONArray(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertJSONObject,public JSONObjectAssert  (String key){ Object value=value(key); return Assertions.assertJSONObject(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertList,public ListAssert  (String key){ Object value=value(key); return Assertions.assertList(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertLong,public LongAssert  (String key){ Object value=value(key); return Assertions.assertLong(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertMap,public MapAssert  (String key){ Object value=value(key); return Assertions.assertMap(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertObject,public ObjectAssert  (String key){ Object value=value(key); return (ObjectAssert)assertThat(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertShort,public ShortAssert  (String key){ Object value=value(key); return Assertions.assertShort(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertSize,"public IntegerAssert  (){ return (IntegerAssert)assertThat(get().size()).as(""size""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,assertString,public StringAssert  (String key){ Object value=value(key); return Assertions.assertString(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,get,public JSONObject  (){ return actual; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JSONObjectAssert.java,value,public Object  (String key){ JSONObject value=get(); assertThat(value.size()).isGreaterThan(0); return value.get(key); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,JolokiaAssert,public  (J4pClient client){ super(client JolokiaAssert.class); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,attribute,public ObjectAssert<?>  (String mbean String attribute) throws J4pException  MalformedObjectNameException { Object value=attributeValue(mbean attribute); return (ObjectAssert<?>)assertThat(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,attributeValue,public Object  (String mbean String attribute) throws MalformedObjectNameException  J4pException { ObjectName objectName=new ObjectName(mbean); J4pResponse<J4pReadRequest> results=client.execute(new J4pReadRequest(objectName attribute)); return results.getValue(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,bigDecimalAttribute,public BigDecimalAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertBigDecimal(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,bigDecimalOperation,public BigDecimalAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertBigDecimal(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,booleanAttribute,public BooleanAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertBoolean(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,booleanOperation,public BooleanAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertBoolean(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,byteAttribute,public ByteAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertByte(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,byteOperation,public ByteAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertByte(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,characterAttribute,public CharacterAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertCharacter(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,characterOperation,public CharacterAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertCharacter(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,dateAttribute,public DateAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertDate(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,dateOperation,public DateAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertDate(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,doubleAttribute,public DoubleAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertDouble(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,doubleOperation,public DoubleAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertDouble(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,floatAttribute,public FloatAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertFloat(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,floatOperation,public FloatAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertFloat(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,integerAttribute,public IntegerAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertInteger(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,integerOperation,public IntegerAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertInteger(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,jsonArrayAttribute,public JSONArrayAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertJSONArray(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,jsonArrayOperation,public JSONArrayAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertJSONArray(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,jsonObjectAttribute,public JSONObjectAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertJSONObject(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,jsonObjectOperation,public JSONObjectAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertJSONObject(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,listAttribute,public ListAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertList(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,listOperation,public ListAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertList(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,longAttribute,public LongAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertLong(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,longOperation,public LongAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertLong(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,mapAttribute,public MapAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertMap(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,mapOperation,public MapAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertMap(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,operation,public ObjectAssert<?>  (String mbean String operation Object... arguments) throws J4pException  MalformedObjectNameException { Object value=operationResult(mbean operation arguments); return (ObjectAssert<?>)assertThat(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,operationResult,protected Object  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { ObjectName objectName=new ObjectName(mbean); J4pResponse<J4pExecRequest> results=client.execute(new J4pExecRequest(objectName operation arguments)); return results.getValue(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,shortAttribute,public ShortAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertShort(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,shortOperation,public ShortAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertShort(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,stringAttribute,public StringAssert  (String mbean String attribute) throws MalformedObjectNameException  J4pException { Object value=attributeValue(mbean attribute); return Assertions.assertString(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\assertions\JolokiaAssert.java,stringOperation,public StringAssert  (String mbean String operation Object... arguments) throws MalformedObjectNameException  J4pException { Object value=operationResult(mbean operation arguments); return Assertions.assertString(value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,init,"@Before public void  (){ JvmAgent.agentmain("""" null); client=J4pClient.url(""http://localhost:8778/jolokia"").connectionTimeout(3000).build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,invoke,@Override public void  () throws Exception { dumpAllThreads.assertJSONObject(badIndex); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,testDoubleAttribute,"@Test public void  () throws Exception { assertThat(client).doubleAttribute(""java.lang:type=OperatingSystem"" ""SystemCpuLoad"").isGreaterThanOrEqualTo(0.0); assertAssertionError(new Block(){ @Override public void invoke() throws Exception { assertThat(clien"
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,testJsonArrayOperation,"@Test public void  () throws Exception { final JSONArrayAssert dumpAllThreads=assertThat(client).jsonArrayOperation(""java.lang:type=Threading"" ""dumpAllThreads"" true true); dumpAllThreads.assertSize().isGreaterThan(1); int size=dumpAllThreads.get().size();"
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,testOperationNotNullResult,"@Test public void  () throws Exception { assertThat(client).operation(""java.lang:type=Threading"" ""dumpAllThreads"" true true).isNotNull(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\test\java\io\fabric8\jolokia\assertions\ExampleTest.java,testOperationNullResult,"@Test public void  () throws Exception { assertThat(client).operation(""java.util.logging:type=Logging"" ""getLoggerLevel"" ""io.fabric8.jolokia.assertions"").isNull(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,JolokiaInvocationHandler,public  (J4pClient jolokia ObjectName objectName Class<?> interfaceClass){ this.jolokia=jolokia; this.objectName=objectName; this.interfaceClass=interfaceClass; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,executeMethodName,"protected String  (Method method){ String name=method.getName(); Class<?>[] parameterTypes=method.getParameterTypes(); if (methodCount(interfaceClass name) > 1) { StringBuilder buffer=new StringBuilder(name); buffer.append(""(""); boolean first=true; for ( Class<?> parameterType : parameterTypes) { if (first) { first=false; } else { buffer.append("" ""); } buffer.append(parameterType.getCanonicalName()); } buffer.append("")""); return buffer.toString(); } return name; } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,getterAttributeName,"protected String  (Method method){ String name=method.getName(); int length=name.length(); Class<?>[] parameterTypes=method.getParameterTypes(); Class<?> returnType=method.getReturnType(); if (parameterTypes.length == 0 && !Void.class.equals(returnType)) { boolean returnsBool=returnType.equals(Boolean.class) || returnType.equals(boolean.class); if (name.startsWith(""get"") && length > 3) { return name.substring(3); } else if (returnsBool && name.startsWith(""is"") && length > 2) { return name.substring(2); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,invoke,"public Object  (Object proxy Method method Object[] args) throws Throwable { String name=method.getName(); String attribute; AbtractJ4pMBeanRequest request; if ((attribute=getterAttributeName(method)) != null) { request=new J4pReadRequest(objectName attribute); } else if ((attribute=setterAttributeName(method)) != null) { request=new J4pWriteRequest(objectName attribute args[0]); } else { name=executeMethodName(method); if (args == null | method.getParameterTypes().length == 0) { request=new J4pExecRequest(objectName name); } else { request=new J4pExecRequest(objectName name args); } } try { request.setPreferredHttpMethod(""POST""); J4pResponse response=jolokia.execute(request); Object value=response.getValue(); return JolokiaHelpers.convertJolokiaToJavaType(method.getReturnType() value); } catch ( J4pException e) { List<Object> argsList=args == null ? null : Arrays.asList(args); LOG.warn(""Failed to invoke "" + objectName + "" method: ""+ name+ "" with arguments: ""+ argsList+ "". ""+ e e); throw e; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,methodCount,protected static int  (Class<?> clazz String name){ int answer=0; Method[] declaredMethods=clazz.getDeclaredMethods(); for ( Method method : declaredMethods) { if (name.equals(method.getName())) { answer++; } } if (!clazz.equals(Object.class)) { Class<?> superclass=clazz.getSuperclass(); if (superclass != null && !superclass.equals(Object.class)) { answer+=methodCount(superclass name); } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,newProxyInstance,public static <T>T  (J4pClient jolokia ObjectName objectName Class<T> interfaceClass){ return (T)Proxy.newProxyInstance(interfaceClass.getClassLoader() new Class[]{interfaceClass} new JolokiaInvocationHandler(jolokia objectName interfaceClass)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\jolokia-assertions\src\main\java\io\fabric8\jolokia\support\JolokiaInvocationHandler.java,setterAttributeName,"protected String  (Method method){ Class<?>[] parameterTypes=method.getParameterTypes(); if (parameterTypes.length == 1) { String name=method.getName(); int nameLength=name.length(); if (name.startsWith(""set"") && nameLength > 3) { return name.substring(3); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builders\ListEnvVarBuilder.java,build,public List<EnvVar>  (){ return envVars; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,BuildFinishedEvent,public  (String uid Build build boolean loading String buildLink){ this.uid=uid; this.build=build; this.loading=loading; this.buildLink=buildLink; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,getBuild,public Build  (){ return build; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,getBuildLink,public String  (){ return buildLink; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builders\ListEnvVarBuilder.java,withEnvVar,public void  (String name String value){ if (Strings.isNotBlank(name) && value != null) { EnvVar envVar=new EnvVar(); envVar.setName(name); envVar.setValue(value); envVars.add(envVar); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,getConfigName,public String  (){ return Builds.getBuildConfigName(build); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,getNamespace,public String  (){ return Builds.getNamespace(build); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,getStatus,public String  (){ return build.getStatus().getPhase(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,getUid,public String  (){ return uid; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildFinishedEvent.java,isLoading,public boolean  (){ return loading; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,configureDefaultBuildConfig,"public static BuildConfig  (BuildConfig buildConfig String name String gitUrl boolean foundExistingGitUrl String buildImageStream String buildImageTag String s2iCustomBuilderImage String secret String jenkinsUrl){ BuildConfigSpec spec=buildConfig.getSpec(); if (spec == null) { spec=new BuildConfigSpec(); buildConfig.setSpec(spec); } if (!foundExistingGitUrl && Strings.isNotBlank(gitUrl)) { BuildSource source=spec.getSource(); if (source == null) { source=new BuildSource(); spec.setSource(source); } source.setType(""Git""); GitBuildSource git=source.getGit(); if (git == null) { git=new GitBuildSource(); source.setGit(git); } git.setUri(gitUrl); } if (Strings.isNotBlank(buildImageStream) && Strings.isNotBlank(buildImageTag)) { BuildStrategy strategy=spec.getStrategy(); if (strategy == null) { strategy=new BuildStrategy(); spec.setStrategy(strategy); } strategy.setType(""JenkinsPipeline""); JenkinsPipelineBuildStrategy buildStrategy=strategy.getJenkinsPipelineStrategy(); if (buildStrategy == null) { buildStrategy=new JenkinsPipelineBuildStrategy(); strategy.setJenkinsPipelineStrategy(buildStrategy); } ListEnvVarBuilder envBuilder=new ListEnvVarBuilder(); if (Strings.isNotBlank(jenkinsUrl)) { envBuilder.withEnvVar(""BASE_URI"" jenkinsUrl); } buildStrategy.setJenkinsfilePath(""Jenkinsfile""); } List<BuildTriggerPolicy> triggers=spec.getTriggers(); if (triggers == null) { triggers=new ArrayList<>(); } if (triggers.isEmpty()) { triggers.add(new BuildTriggerPolicyBuilder().withType(""GitHub"").withNewGithub().withSecret(secret).endGithub().build()); triggers.add(new BuildTriggerPolicyBuilder().withType(""Generic"").withNewGeneric().withSecret(secret).endGeneric().build()); spec.setTriggers(triggers); } return buildConfig; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,createConsoleBuildLink,"public static String  (String fabricConsoleExternalUrl String buildName){ return URLUtils.pathJoin(fabricConsoleExternalUrl ""kubernetes/builds"" buildName); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,createDefaultBuildConfig,public static BuildConfig  (String name String gitUrl String jenkinsUrl){ BuildConfig buildConfig=new BuildConfig(); getOrCreateMetadata(buildConfig).setName(name); boolean foundExistingGitUrl=false; return configureDefaultBuildConfig(buildConfig name gitUrl foundExistingGitUrl jenkinsUrl); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,getBuildConfigName,"public static String  (Build build){ if (build != null) { Map<String Object> metadata=getMetadata(build); Object labels=metadata.get(""labels""); if (labels instanceof Map) { Map<String Object> labelMap=(Map<String Object>)labels; return getString(labelMap ""buildconfig""); } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,getCreationTimestamp,public static String  (Build build){ String answer=null; if (build != null) { ObjectMeta metadata=build.getMetadata(); if (metadata != null) { return metadata.getCreationTimestamp(); } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,getCreationTimestampDate,public static Date  (Build build){ String time=getCreationTimestamp(build); if (time != null) { return KubernetesHelper.parseDate(time); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,getMetadata,"public static Map<String Object>  (BuildConfig build){ if (build != null) { Map<String Object> additionalProperties=build.getAdditionalProperties(); if (additionalProperties != null) { Object metadata=additionalProperties.get(""metadata""); if (metadata instanceof Map) { return (Map<String Object>)metadata; } } } return Collections.EMPTY_MAP; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,getName,"public static String  (Build build){ String answer=null; if (build != null) { Map<String Object> metadata=getMetadata(build); answer=getString(metadata ""name""); if (Strings.isNullOrBlank(answer)) { answer=build.getMetadata().getName(); } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,getNamespace,"public static String  (Build build){ String answer=null; if (build != null) { Map<String Object> metadata=getMetadata(build); answer=getString(metadata ""namespace""); if (Strings.isNullOrBlank(answer)) { answer=build.getMetadata().getNamespace(); } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,getString,protected static String  (Map<String Object> metadata String name){ Object answer=metadata.get(name); if (answer != null) { return answer.toString(); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,getUid,"public static String  (Build build){ String answer=null; if (build != null) { answer=build.getMetadata().getUid(); if (Strings.isNullOrBlank(answer)) { Map<String Object> metadata=getMetadata(build); answer=getString(metadata ""uid""); if (Strings.isNullOrBlank(answer)) { answer=getString(metadata ""id""); } if (Strings.isNullOrBlank(answer)) { answer=getString(metadata ""name""); } } if (Strings.isNullOrBlank(answer)) { answer=build.getMetadata().getName(); } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,isCancelled,public static boolean  (String status){ return Objects.equal(Status.CANCELLED status); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,isCompleted,public static boolean  (String status){ return Objects.equal(Status.COMPLETE status); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,isFailed,public static boolean  (String status){ if (status != null) { return status.startsWith(Status.FAIL) || status.startsWith(Status.ERROR); } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Builds.java,isFinished,public static boolean  (String status){ return isCompleted(status) || isFailed(status) || isCancelled(status); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\Links.java,getFabric8ConsoleLink,"public static String  (){ String answer=System.getenv(""FABRIC8_CONSOLE""); if (Strings.isNullOrBlank(answer)) { answer=DEFAULT_FABRIC8_CONSOLE; } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,BuildWatcher,public  (OpenShiftClient client BuildListener buildListener String namespace String fabric8ConsoleLink){ this.client=client; this.buildListener=buildListener; this.namespace=namespace; this.fabric8ConsoleLink=fabric8ConsoleLink; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,buildPolled,"protected void  (Build build){ String status=build.getStatus().getPhase(); if (status != null) { if (Builds.isFinished(status)) { String uid=Builds.getUid(build); if (Strings.isNullOrBlank(uid)) { LOG.warn(""Ignoring bad build which has no UID: "" + build); } else { if (seenBuildIds.add(uid)) { String name=Builds.getName(build); String buildLink=Builds.createConsoleBuildLink(this.fabric8ConsoleLink name); BuildFinishedEvent event=new BuildFinishedEvent(uid build loading buildLink); buildListener.onBuildFinished(event); } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,join,public void  (){ Object lock=new Object(); while (true) { synchronized (lock) { try { lock.wait(); } catch ( InterruptedException e) { } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,poll,public void  (){ boolean foundBuild=false; BuildList buildList=client.builds().inNamespace(namespace).list(); if (buildList != null) { List<Build> items=buildList.getItems(); if (items != null) { for ( Build build : items) { buildPolled(build); foundBuild=true; } } } if (foundBuild) { loading=false; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,run,@Override public void  (){ poll(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\builds\BuildWatcher.java,schedule,public TimerTask  (Timer timer long delay){ TimerTask task=new TimerTask(){ @Override public void run(){ poll(); } } ; timer.schedule(task delay delay); return task; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,Environments,public  (String namespace Map<String Environment> environments){ this.namespace=namespace; this.environments=environments; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,findSpaceNamespace,"public static String  (KubernetesClient kubernetesClient String namespace){ try { ConfigMap configMap=kubernetesClient.configMaps().inNamespace(namespace).withName(SPACE_LINK_CONFIGMAP_NAME).get(); if (configMap != null) { Map<String String> data=configMap.getData(); if (data != null) { String answer=data.get(""space""); if (Strings.isNotBlank(answer)) { return answer; } } } } catch ( Exception e) { LOG.warn(""Failed to lookup Space Link ConfigMap "" + namespace + ""/""+ SPACE_LINK_CONFIGMAP_NAME+ "". ""+ e e); } int idx=namespace.lastIndexOf('-'); if (idx > 0) { return namespace.substring(0 idx); } return namespace; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,getDefaultNamespace,protected static String  (KubernetesClient kubernetesClient String namespace){ if (Strings.isNullOrBlank(namespace)) { namespace=kubernetesClient.getNamespace(); if (Strings.isNullOrBlank(namespace)) { namespace=KubernetesHelper.defaultNamespace(); } } return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,getEnvironment,public Environment  (String environmentKey){ return environments.get(environmentKey); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,getEnvironmentSet,public SortedSet<Environment>  (){ return new TreeSet<>(environments.values()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,getEnvironments,public Map<String Environment>  (){ return environments; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,getNamespace,public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,load,private static Environments  (ConfigMap configMap String namespace){ Map<String Environment> environmentMap=new HashMap<>(); if (configMap != null) { Map<String String> data=configMap.getData(); if (data != null) { Set<Map.Entry<String String>> entries=data.entrySet(); for ( Map.Entry<String String> entry : entries) { String key=entry.getKey(); String yaml=entry.getValue(); Environment environment=parseEnvironment(key yaml); if (environment != null) { environmentMap.put(key environment); } } } } return new Environments(namespace environmentMap); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,namespaceForEnvironment,public static String  (KubernetesClient kubernetesClient String environmentKey String namespace){ Environments environments=Environments.load(kubernetesClient namespace); Environment environment=environments.getEnvironment(environmentKey); if (environment == null) { environment=environments.getEnvironment(environmentKey.toLowerCase()); } String answer=null; if (environment != null) { answer=environment.getNamespace(); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environments.java,parseEnvironment,"private static Environment  (String key String yaml){ try { return KubernetesHelper.loadYaml(yaml Environment.class); } catch ( IOException e) { LOG.warn(""Failed to parse environment YAML for "" + key + "". Reason: ""+ e+ "". YAML: ""+ yaml e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,compareTo,@Override public int  (Environment that){ int answer=this.order() - that.order(); if (answer == 0) { answer=this.name.compareTo(that.name); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,getClusterAPiServer,public String  (){ return clusterAPiServer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,getKey,public String  (){ return key; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,getNamespace,public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,getOrder,public Integer  (){ return order; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,order,public int  (){ return order != null ? order.intValue() : Integer.MAX_VALUE; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,setClusterAPiServer,public void  (String clusterAPiServer){ this.clusterAPiServer=clusterAPiServer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,setKey,public void  (String key){ this.key=key; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,setNamespace,public void  (String namespace){ this.namespace=namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,setOrder,public void  (Integer order){ this.order=order; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\environments\Environment.java,toString,"@Override public String  (){ return ""Environment{"" + ""name='"" + name + '\''+ ""  namespace='""+ namespace+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,currentUserName,"public static String  (){ Config config=parseConfigs(); if (config != null) { Context context=getCurrentContext(config); if (context != null) { String user=context.getUser(); if (user != null) { String[] parts=user.split(""/""); if (parts != null && parts.length > 0) { return parts[0]; } return user; } } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,getCluster,public static Cluster  (Config config Context context){ Cluster cluster=null; if (config != null && context != null) { String clusterName=context.getCluster(); if (clusterName != null) { List<NamedCluster> clusters=config.getClusters(); if (clusters != null) { for ( NamedCluster namedCluster : clusters) { if (Objects.equal(clusterName namedCluster.getName())) { cluster=namedCluster.getCluster(); } } } } } return cluster; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,getCurrentContext,public static Context  (Config config){ String contextName=config.getCurrentContext(); if (contextName != null) { List<NamedContext> contexts=config.getContexts(); if (contexts != null) { for ( NamedContext context : contexts) { if (Objects.equal(contextName context.getName())) { return context.getContext(); } } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,getKubernetesConfigFile,"public static File  (){ String file=System.getProperty(KUBERNETES_CONFIG_FILE_PROPERTY); if (file != null) { return new File(file); } file=System.getenv(KUBERNETES_CONFIG_FILE_ENV_VAR); if (file != null) { return new File(file); } String homeDir=System.getProperty(""user.home"" "".""); return new File(homeDir "".kube/config""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,getUserAuthInfo,public static AuthInfo  (Config config Context context){ AuthInfo authInfo=null; if (config != null && context != null) { String user=context.getUser(); if (user != null) { List<NamedAuthInfo> users=config.getUsers(); if (users != null) { for ( NamedAuthInfo namedAuthInfo : users) { if (Objects.equal(user namedAuthInfo.getName())) { authInfo=namedAuthInfo.getUser(); } } } } } return authInfo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,getUserToken,public static String  (Config config Context context){ AuthInfo authInfo=getUserAuthInfo(config context); if (authInfo != null) { return authInfo.getToken(); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Configs.java,parseConfigs,public static Config  (){ File file=getKubernetesConfigFile(); if (file.exists() && file.isFile()) { try { return KubernetesHelper.loadYaml(file Config.class); } catch ( IOException e) { e.printStackTrace(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesNames.java,convertToKubernetesName,public static String  (String text boolean allowDots){ String lower=text.toLowerCase(); StringBuilder builder=new StringBuilder(); boolean started=false; char lastCh=' '; for (int i=0  last=lower.length() - 1; i <= last; i++) { char ch=lower.charAt(i); boolean digit=ch >= '0' && ch <= '9'; if (digit && builder.length() == 0) { builder.append(DIGIT_PREFIX); } if (!(ch >= 'a' && ch <= 'z') && !digit) { if (ch == '/') { ch='.'; } else if (ch != '.' && ch != '-') { ch='-'; } if (!allowDots && ch == '.') { ch='-'; } if (!started || lastCh == '-' || lastCh == '.' || i == last) { continue; } } builder.append(ch); started=true; lastCh=ch; } return builder.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,addTemplateObject,public static void  (Template template HasMetadata object){ List<HasMetadata> objects=template.getObjects(); objects.add(object); template.setObjects(objects); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,combineParameters,protected static void  (List<Parameter> parameters List<Parameter> otherParameters){ if (otherParameters != null && otherParameters.size() > 0) { Map<String Parameter> map=new HashMap<>(); for ( Parameter parameter : parameters) { map.put(parameter.getName() parameter); } for ( Parameter otherParameter : otherParameters) { String name=otherParameter.getName(); Parameter original=map.get(name); if (original == null) { parameters.add(otherParameter); } else { if (Strings.isNotBlank(original.getValue())) { original.setValue(otherParameter.getValue()); } } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,combineTemplates,public static Object  (KubernetesList kubernetesList List<HasMetadata> items){ Template template=null; for ( HasMetadata item : items) { if (item instanceof Template) { Template aTemplate=(Template)item; if (template == null) { template=aTemplate; } else { template=combineTemplates(template aTemplate); } } } if (template != null) { for ( HasMetadata item : items) { if (!(item instanceof Template)) { addTemplateObject(template item); } } List<HasMetadata> objects=template.getObjects(); return template; } else { return kubernetesList; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,overrideTemplateParameters,"public static void  (Template template Map<String String> properties String propertyNamePrefix){ List<Parameter> parameters=template.getParameters(); if (parameters != null && properties != null) { boolean missingProperty=false; for ( Parameter parameter : parameters) { String parameterName=parameter.getName(); String name=propertyNamePrefix + parameterName; String propertyValue=properties.get(name); if (Strings.isNotBlank(propertyValue)) { LOG.info(""Overriding template parameter "" + name + "" with value: ""+ propertyValue); parameter.setValue(propertyValue); } else { missingProperty=true; LOG.info(""No property defined for template parameter: "" + name); } } if (missingProperty) { LOG.debug(""current properties "" + new TreeSet<>(properties.keySet())); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\extensions\Templates.java,processTemplatesLocally,"public static KubernetesList  (Template entity boolean failOnMissingParameterValue) throws IOException { List<HasMetadata> objects=null; if (entity != null) { objects=entity.getObjects(); if (objects == null || objects.isEmpty()) { return null; } } List<Parameter> parameters=entity != null ? entity.getParameters() : null; if (parameters != null && !parameters.isEmpty()) { String json=""{\""kind\"": \""List\""  \""apiVersion\"": \"""" + KubernetesHelper.defaultApiVersion + ""\"" \n""+ "" \""items\"": ""+ KubernetesHelper.toJson(objects)+ "" }""; for (int i=0; i < 5; i++) { for ( Parameter parameter : parameters) { String name=parameter.getName(); String regex=""${"" + name + ""}""; String value=parameter.getValue(); if (Strings.isNullOrBlank(value)) { if (failOnMissingParameterValue) { throw new IllegalArgumentException(""No value available for parameter name: "" + name); } else { value=""""; } } json=Strings.replaceAllWithoutRegex(json regex value); } } return OBJECT_MAPPER.readerFor(KubernetesList.class).readValue(json); } else { KubernetesList answer=new KubernetesList(); answer.setItems(objects); return answer; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,Controller,public  (KubernetesClient kubernetesClient){ this.kubernetesClient=kubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,apply,"public void  (Object dto String sourceName) throws Exception { if (dto instanceof List) { List list=(List)dto; for ( Object element : list) { if (dto == element) { LOG.warn(""Found recursive nested object for "" + dto + "" of class: ""+ dto.getClass().getName()); continue; } apply(element sourceName); } } else if (dto instanceof KubernetesList) { applyList((KubernetesList)dto sourceName); } else if (dto != null) { applyEntity(dto sourceName); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyBuildConfig,"public void  (BuildConfig entity String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrJenkinshift(); if (openShiftClient != null) { String id=getName(entity); Objects.notNull(id ""No name for "" + entity + "" ""+ sourceName); String namespace=KubernetesHelper.getNamespace(entity); if (Strings.isNullOrBlank(namespace)) { namespace=getNamespace(); } applyNamespace(namespace); BuildConfig old=openShiftClient.buildConfigs().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(entity old)) { LOG.info(""BuildConfig has not changed so not doing anything""); } else { if (isRecreateMode()) { LOG.info(""Deleting BuildConfig: "" + id); openShiftClient.buildConfigs().inNamespace(namespace).withName(id).delete(); doCreateBuildConfig(entity namespace sourceName); } else { LOG.info(""Updating BuildConfig from "" + sourceName); try { String resourceVersion=KubernetesHelper.getResourceVersion(old); ObjectMeta metadata=KubernetesHelper.getOrCreateMetadata(entity); metadata.setNamespace(namespace); metadata.setResourceVersion(resourceVersion); Object answer=openShiftClient.buildConfigs().inNamespace(namespace).withName(id).replace(entity); logGeneratedEntity(""Updated BuildConfig: "" namespace entity answer); } catch ( Exception e) { onApplyError(""Failed to update BuildConfig from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating BuildConfig from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(entity)); } else { doCreateBuildConfig(entity namespace sourceName); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyEntity,"public void  (Object dto String sourceName) throws Exception { if (dto instanceof Pod) { applyPod((Pod)dto sourceName); } else if (dto instanceof ReplicationController) { applyReplicationController((ReplicationController)dto sourceName); } else if (dto instanceof Service) { applyService((Service)dto sourceName); } else if (dto instanceof Namespace) { applyNamespace((Namespace)dto); } else if (dto instanceof Route) { applyRoute((Route)dto sourceName); } else if (dto instanceof BuildConfig) { applyBuildConfig((BuildConfig)dto sourceName); } else if (dto instanceof DeploymentConfig) { DeploymentConfig resource=(DeploymentConfig)dto; OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.APPS)) { applyResource(resource sourceName openShiftClient.deploymentConfigs()); } else { LOG.warn(""Not connected to OpenShift cluster so cannot apply entity "" + dto); } } else if (dto instanceof PolicyBinding) { applyPolicyBinding((PolicyBinding)dto sourceName); } else if (dto instanceof RoleBinding) { applyRoleBinding((RoleBinding)dto sourceName); } else if (dto instanceof Role) { Role resource=(Role)dto; OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.AUTHORIZATION)) { applyResource(resource sourceName openShiftClient.roles()); } else { LOG.warn(""Not connected to OpenShift cluster so cannot apply entity "" + dto); } } else if (dto instanceof ImageStream) { applyImageStream((ImageStream)dto sourceName); } else if (dto instanceof OAuthClient) { applyOAuthClient((OAuthClient)dto sourceName); } else if (dto instanceof Template) { applyTemplate((Template)dto sourceName); } else if (dto instanceof ServiceAccount) { applyServiceAccount((ServiceAccount)dto sourceName); } else if (dto instanceof Secret) { applySecret((Secret)dto sourceName); } else if (dto instanceof ConfigMap) { applyResource((ConfigMap)dto sourceName kubernetesClient.configMaps()); } else if (dto instanceof DaemonSet) { applyResource((DaemonSet)dto sourceName kubernetesClient.extensions().daemonSets()); } else if (dto instanceof Deployment) { applyResource((Deployment)dto sourceName kubernetesClient.extensions().deployments()); } else if (dto instanceof ReplicaSet) { applyResource((ReplicaSet)dto sourceName kubernetesClient.extensions().replicaSets()); } else if (dto instanceof StatefulSet) { applyResource((StatefulSet)dto sourceName kubernetesClient.apps().statefulSets()); } else if (dto instanceof Ingress) { applyResource((Ingress)dto sourceName kubernetesClient.extensions().ingresses()); } else if (dto instanceof PersistentVolumeClaim) { applyPersistentVolumeClaim((PersistentVolumeClaim)dto sourceName); } else if (dto instanceof HasMetadata) { HasMetadata entity=(HasMetadata)dto; try { String namespace=getNamespace(); String resourceNamespace=getNamespace(entity); if (Strings.isNotBlank(namespace) && Strings.isNullOrBlank(resourceNamespace)) { getOrCreateMetadata(entity).setNamespace(namespace); } LOG.info(""Applying "" + getKind(entity) + "" ""+ getName(entity)+ "" from ""+ sourceName); kubernetesClient.resource(entity).inNamespace(namespace).createOrReplace(); } catch ( Exception e) { onApplyError(""Failed to create "" + getKind(entity) + "" from ""+ sourceName+ "". ""+ e e); } } else { throw new IllegalArgumentException(""Unknown entity type "" + dto); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyImageStream,"public void  (ImageStream entity String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.IMAGE)) { String kind=getKind(entity); String name=getName(entity); String namespace=getNamespace(); try { Resource<ImageStream DoneableImageStream> resource=openShiftClient.imageStreams().inNamespace(namespace).withName(name); ImageStream old=resource.get(); if (old == null) { LOG.info(""Creating "" + kind + "" ""+ name+ "" from ""+ sourceName); resource.create(entity); } else { LOG.info(""Updating "" + kind + "" ""+ name+ "" from ""+ sourceName); copyAllImageStreamTags(entity old); resource.replace(old); } openShiftClient.resource(entity).inNamespace(namespace).apply(); } catch ( Exception e) { onApplyError(""Failed to create "" + kind + "" from ""+ sourceName+ "". ""+ e e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyJson,"public String  (InputStream json) throws Exception { Object dto=loadJson(json); apply(dto ""REST call""); return """"; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyList,public void  (KubernetesList list String sourceName) throws Exception { List<HasMetadata> entities=list.getItems(); if (entities != null) { for ( Object entity : entities) { applyEntity(entity sourceName); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyNamespace,"public boolean  (Namespace entity){ String namespace=getOrCreateMetadata(entity).getName(); LOG.info(""Using namespace: "" + namespace); String name=getName(entity); Objects.notNull(name ""No name for "" + entity); Namespace old=kubernetesClient.namespaces().withName(name).get(); if (!isRunning(old)) { try { Object answer=kubernetesClient.namespaces().create(entity); logGeneratedEntity(""Created namespace: "" namespace entity answer); return true; } catch ( Exception e) { onApplyError(""Failed to create namespace: "" + name + "" due ""+ e.getMessage() e); } } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyOAuthClient,"public void  (OAuthClient entity String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.OAUTH)) { if (supportOAuthClients) { String id=getName(entity); Objects.notNull(id ""No name for "" + entity + "" ""+ sourceName); if (isServicesOnlyMode()) { LOG.debug(""Only processing Services right now so ignoring OAuthClient: "" + id); return; } OAuthClient old=openShiftClient.oAuthClients().withName(id).get(); if (isRunning(old)) { if (isIgnoreRunningOAuthClients()) { LOG.info(""Not updating the OAuthClient which are shared across namespaces as its already running""); return; } if (UserConfigurationCompare.configEqual(entity old)) { LOG.info(""OAuthClient has not changed so not doing anything""); } else { if (isRecreateMode()) { openShiftClient.oAuthClients().withName(id).delete(); doCreateOAuthClient(entity sourceName); } else { try { Object answer=openShiftClient.oAuthClients().withName(id).replace(entity); LOG.info(""Updated OAuthClient result: "" + answer); } catch ( Exception e) { onApplyError(""Failed to update OAuthClient from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating an OAuthClient from "" + sourceName + "" name ""+ getName(entity)); } else { doCreateOAuthClient(entity sourceName); } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyPersistentVolumeClaim,"public void  (PersistentVolumeClaim entity String sourceName) throws Exception { boolean alwaysRecreate=true; String namespace=getNamespace(); String id=getName(entity); Objects.notNull(id ""No name for "" + entity + "" ""+ sourceName); if (isServicesOnlyMode()) { LOG.debug(""Only processing Services right now so ignoring PersistentVolumeClaim: "" + id); return; } PersistentVolumeClaim old=kubernetesClient.persistentVolumeClaims().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(entity old)) { LOG.info(""PersistentVolumeClaim has not changed so not doing anything""); } else { if (alwaysRecreate || isRecreateMode()) { if (!isRecreateMode() && isIgnoreBoundPersistentVolumeClaims() && isBound(old)) { LOG.warn(""PersistentVolumeClaim "" + id + "" in namespace ""+ namespace+ "" is already bound and will not be replaced with the new one from ""+ sourceName); } else { LOG.info(""Deleting PersistentVolumeClaim from namespace "" + namespace + "" with name ""+ id); kubernetesClient.persistentVolumeClaims().inNamespace(namespace).withName(id).delete(); LOG.info(""Deleted PersistentVolumeClaim from namespace "" + namespace + "" with name ""+ id); doCreatePersistentVolumeClaim(entity namespace sourceName); } } else { LOG.info(""Updating a PersistentVolumeClaim from "" + sourceName); try { Object answer=kubernetesClient.persistentVolumeClaims().inNamespace(namespace).withName(id).replace(entity); logGeneratedEntity(""Updated PersistentVolumeClaim: "" namespace entity answer); } catch ( Exception e) { onApplyError(""Failed to update PersistentVolumeClaim from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating a PersistentVolumeClaim from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(entity)); } else { doCreatePersistentVolumeClaim(entity namespace sourceName); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyPod,"public void  (Pod pod String sourceName) throws Exception { String namespace=getNamespace(); String id=getName(pod); Objects.notNull(id ""No name for "" + pod + "" ""+ sourceName); if (isServicesOnlyMode()) { LOG.debug(""Only processing Services right now so ignoring Pod: "" + namespace + "":""+ id); return; } Pod old=kubernetesClient.pods().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(pod old)) { LOG.info(""Pod has not changed so not doing anything""); } else { if (isRecreateMode()) { LOG.info(""Deleting Pod: "" + id); kubernetesClient.pods().inNamespace(namespace).withName(id).delete(); doCreatePod(pod namespace sourceName); } else { LOG.info(""Updating a Pod from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(pod)); try { Object answer=kubernetesClient.pods().inNamespace(namespace).withName(id).replace(pod); LOG.info(""Updated Pod result: "" + answer); } catch ( Exception e) { onApplyError(""Failed to update Pod from "" + sourceName + "". ""+ e+ "". ""+ pod e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating a pod from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(pod)); } else { doCreatePod(pod namespace sourceName); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyPolicyBinding,"public void  (PolicyBinding entity String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrJenkinshift(); if (openShiftClient != null) { String id=getName(entity); Objects.notNull(id ""No name for "" + entity + "" ""+ sourceName); String namespace=KubernetesHelper.getNamespace(entity); if (Strings.isNullOrBlank(namespace)) { namespace=getNamespace(); } applyNamespace(namespace); PolicyBinding old=openShiftClient.policyBindings().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(entity old)) { LOG.info(""PolicyBinding has not changed so not doing anything""); } else { if (isRecreateMode()) { LOG.info(""Deleting PolicyBinding: "" + id); openShiftClient.policyBindings().inNamespace(namespace).withName(id).delete(); doCreatePolicyBinding(entity namespace sourceName); } else { LOG.info(""Updating PolicyBinding from "" + sourceName); try { String resourceVersion=KubernetesHelper.getResourceVersion(old); ObjectMeta metadata=KubernetesHelper.getOrCreateMetadata(entity); metadata.setNamespace(namespace); metadata.setResourceVersion(resourceVersion); Object answer=openShiftClient.policyBindings().inNamespace(namespace).withName(id).replace(entity); logGeneratedEntity(""Updated PolicyBinding: "" namespace entity answer); } catch ( Exception e) { onApplyError(""Failed to update PolicyBinding from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating PolicyBinding from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(entity)); } else { doCreatePolicyBinding(entity namespace sourceName); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyProjectRequest,"public boolean  (ProjectRequest entity){ String namespace=getOrCreateMetadata(entity).getName(); LOG.info(""Using project: "" + namespace); String name=getName(entity); Objects.notNull(name ""No name for "" + entity); OpenShiftClient openshiftClient=getOpenShiftClientOrNull(); if (openshiftClient == null || !openshiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.PROJECT)) { LOG.warn(""Cannot check for Project "" + namespace + "" as not running against OpenShift!""); return false; } boolean exists=checkNamespace(name); if (!exists) { try { Object answer=openshiftClient.projectrequests().create(entity); logGeneratedEntity(""Created ProjectRequest: "" namespace entity answer); return true; } catch ( Exception e) { onApplyError(""Failed to create ProjectRequest: "" + name + "" due ""+ e.getMessage() e); } } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyReplicationController,"public void  (ReplicationController replicationController String sourceName) throws Exception { String namespace=getNamespace(); String id=getName(replicationController); Objects.notNull(id ""No name for "" + replicationController + "" ""+ sourceName); if (isServicesOnlyMode()) { LOG.debug(""Only processing Services right now so ignoring ReplicationController: "" + namespace + "":""+ id); return; } ReplicationController old=kubernetesClient.replicationControllers().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(replicationController old)) { LOG.info(""ReplicationController has not changed so not doing anything""); } else { ReplicationControllerSpec newSpec=replicationController.getSpec(); ReplicationControllerSpec oldSpec=old.getSpec(); if (rollingUpgrade) { LOG.info(""Rolling upgrade of the ReplicationController: "" + namespace + ""/""+ id); if (rollingUpgradePreserveScale && newSpec != null && oldSpec != null) { Integer replicas=oldSpec.getReplicas(); if (replicas != null) { newSpec.setReplicas(replicas); } } LOG.info(""rollingUpgradePreserveScale "" + rollingUpgradePreserveScale + "" new replicas is ""+ (newSpec != null ? newSpec.getReplicas() : ""<null>"")); kubernetesClient.replicationControllers().inNamespace(namespace).withName(id).rolling().replace(replicationController); } else if (isRecreateMode()) { LOG.info(""Deleting ReplicationController: "" + id); kubernetesClient.replicationControllers().inNamespace(namespace).withName(id).delete(); doCreateReplicationController(replicationController namespace sourceName); } else { LOG.info(""Updating ReplicationController from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(replicationController)); try { Object answer=kubernetesClient.replicationControllers().inNamespace(namespace).withName(id).replace(replicationController); logGeneratedEntity(""Updated replicationController: "" namespace replicationController answer); if (deletePodsOnReplicationControllerUpdate) { kubernetesClient.pods().inNamespace(namespace).withLabels(newSpec.getSelector()).delete(); LOG.info(""Deleting any pods for the replication controller to ensure they use the new configuration""); } else { LOG.info(""Warning not deleted any pods so they could well be running with the old configuration!""); } } catch ( Exception e) { onApplyError(""Failed to update ReplicationController from "" + sourceName + "". ""+ e+ "". ""+ replicationController e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating a ReplicationController from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(replicationController)); } else { doCreateReplicationController(replicationController namespace sourceName); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyResource,"public <T extends HasMetadata L D>void  (T resource String sourceName MixedOperation<T L D ? extends Resource<T D>> resources) throws Exception { String namespace=getNamespace(); String resourceNamespace=getNamespace(resource); if (Strings.isNotBlank(namespace) && Strings.isNullOrBlank(resourceNamespace)) { getOrCreateMetadata(resource).setNamespace(namespace); } String id=getName(resource); String kind=getKind(resource); Objects.notNull(id ""No name for "" + resource + "" ""+ sourceName); if (isServicesOnlyMode()) { LOG.debug(""Ignoring "" + kind + "": ""+ namespace+ "":""+ id); return; } T old=resources.inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(resource old)) { LOG.info(kind + "" has not changed so not doing anything""); } else { if (isRecreateMode()) { LOG.info(""Deleting "" + kind + "": ""+ id); resources.inNamespace(namespace).withName(id).delete(); doCreateResource(resource namespace sourceName resources); } else { LOG.info(""Updating "" + kind + "" from ""+ sourceName); try { Object answer=resources.inNamespace(namespace).withName(id).replace(resource); logGeneratedEntity(""Updated "" + kind + "": "" namespace resource answer); } catch ( Exception e) { onApplyError(""Failed to update "" + kind + "" from ""+ sourceName+ "". ""+ e+ "". ""+ resource e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating a "" + kind + "" from ""+ sourceName+ "" namespace ""+ namespace+ "" name ""+ getName(resource)); } else { doCreateResource(resource namespace sourceName resources); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyRoleBinding,"public void  (RoleBinding entity String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrJenkinshift(); if (openShiftClient != null) { String id=getName(entity); Objects.notNull(id ""No name for "" + entity + "" ""+ sourceName); String namespace=KubernetesHelper.getNamespace(entity); if (Strings.isNullOrBlank(namespace)) { namespace=getNamespace(); } applyNamespace(namespace); RoleBinding old=openShiftClient.roleBindings().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(entity old)) { LOG.info(""RoleBinding has not changed so not doing anything""); } else { if (isRecreateMode()) { LOG.info(""Deleting RoleBinding: "" + id); openShiftClient.roleBindings().inNamespace(namespace).withName(id).delete(); doCreateRoleBinding(entity namespace sourceName); } else { LOG.info(""Updating RoleBinding from "" + sourceName); try { String resourceVersion=KubernetesHelper.getResourceVersion(old); ObjectMeta metadata=KubernetesHelper.getOrCreateMetadata(entity); metadata.setNamespace(namespace); metadata.setResourceVersion(resourceVersion); Object answer=openShiftClient.roleBindings().inNamespace(namespace).withName(id).replace(entity); logGeneratedEntity(""Updated RoleBinding: "" namespace entity answer); } catch ( Exception e) { onApplyError(""Failed to update RoleBinding from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating RoleBinding from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(entity)); } else { doCreateRoleBinding(entity namespace sourceName); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyRoute,"public void  (Route entity String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.ROUTE)) { String id=getName(entity); Objects.notNull(id ""No name for "" + entity + "" ""+ sourceName); String namespace=KubernetesHelper.getNamespace(entity); if (Strings.isNullOrBlank(namespace)) { namespace=getNamespace(); } Route route=openShiftClient.routes().inNamespace(namespace).withName(id).get(); if (route == null) { try { LOG.info(""Creating Route "" + namespace + "":""+ id+ "" ""+ KubernetesHelper.summaryText(entity)); openShiftClient.routes().inNamespace(namespace).create(entity); } catch ( Exception e) { onApplyError(""Failed to create Route from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applySecret,"public void  (Secret secret String sourceName) throws Exception { String namespace=getNamespace(secret); String id=getName(secret); Objects.notNull(id ""No name for "" + secret + "" ""+ sourceName); if (isServicesOnlyMode()) { LOG.debug(""Only processing Services right now so ignoring Secrets: "" + id); return; } Secret old=kubernetesClient.secrets().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(secret old)) { LOG.info(""Secret has not changed so not doing anything""); return; } else { if (isRecreateMode()) { kubernetesClient.secrets().inNamespace(namespace).withName(id).delete(); doCreateSecret(secret namespace sourceName); } else { LOG.info(""Updating a Secret from "" + sourceName); try { Object answer=kubernetesClient.secrets().inNamespace(namespace).withName(id).replace(secret); logGeneratedEntity(""Updated Secret:"" namespace secret answer); } catch ( Exception e) { onApplyError(""Failed to update secret from "" + sourceName + "". ""+ e+ "". ""+ secret e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating a Secret from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(secret)); } else { doCreateSecret(secret namespace sourceName); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyService,"public void  (Service service String sourceName) throws Exception { String namespace=getNamespace(); String id=getName(service); Objects.notNull(id ""No name for "" + service + "" ""+ sourceName); if (isIgnoreServiceMode()) { LOG.debug(""Ignoring Service: "" + namespace + "":""+ id); return; } Service old=kubernetesClient.services().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(service old)) { LOG.info(""Service has not changed so not doing anything""); } else { if (isRecreateMode()) { LOG.info(""Deleting Service: "" + id); kubernetesClient.services().inNamespace(namespace).withName(id).delete(); doCreateService(service namespace sourceName); } else { LOG.info(""Updating a Service from "" + sourceName); try { Object answer=kubernetesClient.services().inNamespace(namespace).withName(id).replace(service); logGeneratedEntity(""Updated Service: "" namespace service answer); } catch ( Exception e) { onApplyError(""Failed to update Service from "" + sourceName + "". ""+ e+ "". ""+ service e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating a Service from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(service)); } else { doCreateService(service namespace sourceName); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyServiceAccount,"public void  (ServiceAccount serviceAccount String sourceName) throws Exception { String namespace=getNamespace(); String id=getName(serviceAccount); Objects.notNull(id ""No name for "" + serviceAccount + "" ""+ sourceName); if (isServicesOnlyMode()) { LOG.debug(""Only processing Services right now so ignoring ServiceAccount: "" + id); return; } ServiceAccount old=kubernetesClient.serviceAccounts().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(serviceAccount old)) { LOG.info(""ServiceAccount has not changed so not doing anything""); } else { if (isRecreateMode()) { kubernetesClient.serviceAccounts().inNamespace(namespace).withName(id).delete(); doCreateServiceAccount(serviceAccount namespace sourceName); } else { LOG.info(""Updating a ServiceAccount from "" + sourceName); try { Object answer=kubernetesClient.serviceAccounts().inNamespace(namespace).withName(id).replace(serviceAccount); logGeneratedEntity(""Updated ServiceAccount: "" namespace serviceAccount answer); } catch ( Exception e) { onApplyError(""Failed to update ServiceAccount from "" + sourceName + "". ""+ e+ "". ""+ serviceAccount e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating a ServiceAccount from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(serviceAccount)); } else { doCreateServiceAccount(serviceAccount namespace sourceName); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyTemplate,public Object  (Template entity String sourceName) throws Exception { installTemplate(entity sourceName); return processTemplate(entity sourceName); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,applyYaml,"public String  (File yaml) throws Exception { String json=convertYamlToJson(yaml); Object dto=loadJson(json); apply(dto ""REST call""); return """"; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,checkNamespace,public boolean  (String namespaceName){ if (Strings.isNullOrBlank(namespaceName)) { return false; } OpenShiftClient openshiftClient=getOpenShiftClientOrNull(); if (openshiftClient != null && openshiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.PROJECT)) { return openshiftClient.projects().list().getItems().stream().map(project -> project.getMetadata().getName()).anyMatch(Predicate.isEqual(namespaceName)); } else { return kubernetesClient.namespaces().withName(namespaceName).get() != null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,convertYamlToJson,private String  (File yamlFile) throws FileNotFoundException { Yaml yaml=new Yaml(); FileInputStream fstream=new FileInputStream(yamlFile); Map<String Object> map=(Map<String Object>)yaml.load(fstream); JSONObject jsonObject=new JSONObject(map); return jsonObject.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,copyAllImageStreamTags,protected void  (ImageStream from ImageStream to){ ImageStreamSpec toSpec=to.getSpec(); if (toSpec == null) { toSpec=new ImageStreamSpec(); to.setSpec(toSpec); } List<TagReference> toTags=toSpec.getTags(); if (toTags == null) { toTags=new ArrayList<>(); toSpec.setTags(toTags); } ImageStreamSpec fromSpec=from.getSpec(); if (fromSpec != null) { List<TagReference> fromTags=fromSpec.getTags(); if (fromTags != null) { for ( TagReference tag : fromTags) { removeTagByName(toTags tag.getName()); } for ( TagReference tag : fromTags) { toTags.add(tag); } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,deleteNamespace,public boolean  (String namespaceName){ if (!checkNamespace(namespaceName)) { return false; } OpenShiftClient openshiftClient=getOpenShiftClientOrNull(); if (openshiftClient != null && openshiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.PROJECT)) { return openshiftClient.projects().withName(namespaceName).delete(); } else { return kubernetesClient.namespaces().withName(namespaceName).delete(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateBuildConfig,"public void  (BuildConfig entity String namespace String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrJenkinshift(); if (openShiftClient != null) { try { openShiftClient.buildConfigs().inNamespace(namespace).create(entity); } catch ( Exception e) { onApplyError(""Failed to create BuildConfig from "" + sourceName + "". ""+ e e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateOAuthClient,"protected void  (OAuthClient entity String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.OAUTH)) { Object result=null; try { result=openShiftClient.oAuthClients().create(entity); } catch ( Exception e) { onApplyError(""Failed to create OAuthClient from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreatePersistentVolumeClaim,"protected void  (PersistentVolumeClaim entity String namespace String sourceName){ LOG.info(""Creating a PersistentVolumeClaim from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(entity)); try { Object answer; if (Strings.isNotBlank(namespace)) { answer=kubernetesClient.persistentVolumeClaims().inNamespace(namespace).create(entity); } else { answer=kubernetesClient.persistentVolumeClaims().inNamespace(getNamespace()).create(entity); } logGeneratedEntity(""Created PersistentVolumeClaim: "" namespace entity answer); } catch ( Exception e) { onApplyError(""Failed to create PersistentVolumeClaim from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreatePod,"protected void  (Pod pod String namespace String sourceName){ LOG.info(""Creating a Pod from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(pod)); try { PodSpec podSpec=pod.getSpec(); if (podSpec != null) { validatePodSpec(podSpec namespace); } Object answer; if (Strings.isNotBlank(namespace)) { answer=kubernetesClient.pods().inNamespace(namespace).create(pod); } else { answer=kubernetesClient.pods().inNamespace(getNamespace()).create(pod); } LOG.info(""Created Pod result: "" + answer); } catch ( Exception e) { onApplyError(""Failed to create Pod from "" + sourceName + "". ""+ e+ "". ""+ pod e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreatePolicyBinding,"public void  (PolicyBinding entity String namespace String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrJenkinshift(); if (openShiftClient != null) { try { openShiftClient.policyBindings().inNamespace(namespace).create(entity); } catch ( Exception e) { onApplyError(""Failed to create PolicyBinding from "" + sourceName + "". ""+ e e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateReplicationController,"protected void  (ReplicationController replicationController String namespace String sourceName){ LOG.info(""Creating a ReplicationController from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(replicationController)); try { ReplicationControllerSpec spec=replicationController.getSpec(); if (spec != null) { PodTemplateSpec template=spec.getTemplate(); if (template != null) { PodSpec podSpec=template.getSpec(); validatePodSpec(podSpec namespace); } } Object answer; if (Strings.isNotBlank(namespace)) { answer=kubernetesClient.replicationControllers().inNamespace(namespace).create(replicationController); } else { answer=kubernetesClient.replicationControllers().inNamespace(getNamespace()).create(replicationController); } logGeneratedEntity(""Created ReplicationController: "" namespace replicationController answer); } catch ( Exception e) { onApplyError(""Failed to create ReplicationController from "" + sourceName + "". ""+ e+ "". ""+ replicationController e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateResource,"protected <T extends HasMetadata L D>void  (T resource String namespace String sourceName MixedOperation<T L D ? extends Resource<T D>> resources) throws Exception { String kind=getKind(resource); LOG.info(""Creating a "" + kind + "" from ""+ sourceName+ "" namespace ""+ namespace+ "" name ""+ getName(resource)); try { Object answer; if (Strings.isNotBlank(namespace)) { answer=resources.inNamespace(namespace).create(resource); } else { answer=resources.inNamespace(getNamespace()).create(resource); } logGeneratedEntity(""Created "" + kind + "": "" namespace resource answer); } catch ( Exception e) { onApplyError(""Failed to create "" + kind + "" from ""+ sourceName+ "". ""+ e+ "". ""+ resource e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateRoleBinding,"public void  (RoleBinding entity String namespace String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrJenkinshift(); if (openShiftClient != null) { try { openShiftClient.roleBindings().inNamespace(namespace).create(entity); } catch ( Exception e) { onApplyError(""Failed to create RoleBinding from "" + sourceName + "". ""+ e e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateSecret,"protected void  (Secret secret String namespace String sourceName){ LOG.info(""Creating a Secret from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(secret)); try { Object answer; if (Strings.isNotBlank(namespace)) { answer=kubernetesClient.secrets().inNamespace(namespace).create(secret); } else { answer=kubernetesClient.secrets().inNamespace(getNamespace()).create(secret); } logGeneratedEntity(""Created Secret: "" namespace secret answer); } catch ( Exception e) { onApplyError(""Failed to create Secret from "" + sourceName + "". ""+ e+ "". ""+ secret e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateService,"protected void  (Service service String namespace String sourceName){ LOG.info(""Creating a Service from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(service)); try { Object answer; if (Strings.isNotBlank(namespace)) { answer=kubernetesClient.services().inNamespace(namespace).create(service); } else { answer=kubernetesClient.services().inNamespace(getNamespace()).create(service); } logGeneratedEntity(""Created Service: "" namespace service answer); } catch ( Exception e) { onApplyError(""Failed to create Service from "" + sourceName + "". ""+ e+ "". ""+ service e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateServiceAccount,"protected void  (ServiceAccount serviceAccount String namespace String sourceName){ LOG.info(""Creating a ServiceAccount from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(serviceAccount)); try { Object answer; if (Strings.isNotBlank(namespace)) { answer=kubernetesClient.serviceAccounts().inNamespace(namespace).create(serviceAccount); } else { answer=kubernetesClient.serviceAccounts().inNamespace(getNamespace()).create(serviceAccount); } logGeneratedEntity(""Created ServiceAccount: "" namespace serviceAccount answer); } catch ( Exception e) { onApplyError(""Failed to create ServiceAccount from "" + sourceName + "". ""+ e+ "". ""+ serviceAccount e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,doCreateTemplate,"protected void  (Template entity String namespace String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.TEMPLATE)) { LOG.info(""Creating a Template from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(entity)); try { Object answer=openShiftClient.templates().inNamespace(namespace).create(entity); logGeneratedEntity(""Created Template: "" namespace entity answer); } catch ( Exception e) { onApplyError(""Failed to Template entity from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,getBasedir,public File  (){ return basedir; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,getLogJsonDir,public File  (){ return logJsonDir; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,getNamespace,protected String  (HasMetadata entity){ String answer=KubernetesHelper.getNamespace(entity); if (Strings.isNullOrBlank(answer)) { answer=getNamespace(); } applyNamespace(answer); return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,getOpenShiftClientOrJenkinshift,"public OpenShiftClient  (){ OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient == null) { String jenkinshiftUrl=Systems.getEnvVar(""JENKINSHIFT_URL"" ""http://jenkinshift/""); LOG.debug(""Using jenknshift URL: "" + jenkinshiftUrl); openShiftClient=KubernetesHelper.createJenkinshiftOpenShiftClient(jenkinshiftUrl); } return openShiftClient; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,getOpenShiftClientOrNull,public OpenShiftClient  (){ OpenShiftClient openShiftClient=null; if (kubernetesClient instanceof OpenShiftClient) { openShiftClient=(OpenShiftClient)kubernetesClient; } if (openShiftClient == null) { try { openShiftClient=kubernetesClient.adapt(OpenShiftClient.class); } catch ( KubernetesClientException e) { } catch ( OpenShiftNotAvailableException e) { } } return openShiftClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,installTemplate,"public void  (Template entity String sourceName){ OpenShiftClient openShiftClient=getOpenShiftClientOrNull(); if (openShiftClient == null || !openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.TEMPLATE)) { return; } if (!isProcessTemplatesLocally()) { String namespace=getNamespace(); String id=getName(entity); Objects.notNull(id ""No name for "" + entity + "" ""+ sourceName); Template old=openShiftClient.templates().inNamespace(namespace).withName(id).get(); if (isRunning(old)) { if (UserConfigurationCompare.configEqual(entity old)) { LOG.info(""Template has not changed so not doing anything""); } else { boolean recreateMode=isRecreateMode(); recreateMode=true; if (recreateMode) { openShiftClient.templates().inNamespace(namespace).withName(id).delete(); doCreateTemplate(entity namespace sourceName); } else { LOG.info(""Updating a Template from "" + sourceName); try { Object answer=openShiftClient.templates().inNamespace(namespace).withName(id).replace(entity); LOG.info(""Updated Template: "" + answer); } catch ( Exception e) { onApplyError(""Failed to update Template from "" + sourceName + "". ""+ e+ "". ""+ entity e); } } } } else { if (!isAllowCreate()) { LOG.warn(""Creation disabled so not creating a Template from "" + sourceName + "" namespace ""+ namespace+ "" name ""+ getName(entity)); } else { doCreateTemplate(entity namespace sourceName); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isAllowCreate,public boolean  (){ return allowCreate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isBound,"protected boolean  (PersistentVolumeClaim claim){ return claim != null && claim.getStatus() != null && ""Bound"".equals(claim.getStatus().getPhase()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isDeletePodsOnReplicationControllerUpdate,public boolean  (){ return deletePodsOnReplicationControllerUpdate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isFailOnMissingParameterValue,public boolean  (){ return failOnMissingParameterValue; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isIgnoreBoundPersistentVolumeClaims,public boolean  (){ return ignoreBoundPersistentVolumeClaims; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isIgnoreRunningOAuthClients,public boolean  (){ return ignoreRunningOAuthClients; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isIgnoreServiceMode,public boolean  (){ return ignoreServiceMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isProcessTemplatesLocally,public boolean  (){ return processTemplatesLocally; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isRecreateMode,public boolean  (){ return recreateMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isRequireSecretsCreatedBeforeReplicationControllers,public boolean  (){ return requireSecretsCreatedBeforeReplicationControllers; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isRollingUpgrade,public boolean  (){ return rollingUpgrade; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isRollingUpgradePreserveScale,public boolean  (){ return rollingUpgradePreserveScale; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isRunning,protected boolean  (HasMetadata entity){ return entity != null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isServicesOnlyMode,public boolean  (){ return servicesOnlyMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isSupportOAuthClients,public boolean  (){ return supportOAuthClients; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,isThrowExceptionOnError,public boolean  (){ return throwExceptionOnError; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,logGeneratedEntity,"protected void  (String message String namespace HasMetadata entity Object result){ if (logJsonDir != null) { File namespaceDir=new File(logJsonDir namespace); namespaceDir.mkdirs(); String kind=getKind(entity); String name=KubernetesHelper.getName(entity); if (Strings.isNotBlank(kind)) { name=kind.toLowerCase() + ""-"" + name; } if (Strings.isNullOrBlank(name)) { LOG.warn(""No name for the entity "" + entity); } else { String fileName=name + "".json""; File file=new File(namespaceDir fileName); if (file.exists()) { int idx=1; while (true) { fileName=name + ""-"" + idx+++ "".json""; file=new File(namespaceDir fileName); if (!file.exists()) { break; } } } String text; if (result instanceof String) { text=result.toString(); } else { try { text=KubernetesHelper.toJson(result); } catch ( JsonProcessingException e) { LOG.warn(""Cannot convert "" + result + "" to JSON: ""+ e e); if (result != null) { text=result.toString(); } else { text=""null""; } } } try { IOHelpers.writeFully(file text); Object fileLocation=file; if (basedir != null) { String path=Files.getRelativePath(basedir file); if (path != null) { fileLocation=Strings.stripPrefix(path ""/""); } } LOG.info(message + fileLocation); } catch ( IOException e) { LOG.warn(""Failed to write to file "" + file + "". ""+ e e); } return; } } LOG.info(message + result); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,onApplyError,protected void  (String message Exception e){ LOG.error(message e); if (throwExceptionOnError) { throw new RuntimeException(message e); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,printSummary,"protected void  (Object kubeResource) throws IOException { if (kubeResource != null) { LOG.debug("" "" + kubeResource.getClass().getSimpleName() + "" ""+ kubeResource); } if (kubeResource instanceof Template) { Template template=(Template)kubeResource; String id=getName(template); LOG.info("" Template "" + id + "" ""+ summaryText(template)); printSummary(template.getObjects()); return; } List<HasMetadata> list=toItemList(kubeResource); for ( HasMetadata object : list) { if (object != null) { if (object == list) { LOG.debug(""Ignoring recursive list "" + list); continue; } else if (object instanceof List) { printSummary(object); } else { String kind=object.getClass().getSimpleName(); String id=getObjectId(object); LOG.info("" "" + kind + "" ""+ id+ "" ""+ summaryText(object)); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,processTemplate,"public Object  (Template entity String sourceName){ try { return Templates.processTemplatesLocally(entity failOnMissingParameterValue); } catch ( IOException e) { onApplyError(""Failed to process template "" + sourceName + "". ""+ e+ "". ""+ entity e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,removeTagByName,private int  (List<TagReference> tags String tagName){ List<TagReference> removeTags=new ArrayList<>(); for ( TagReference tag : tags) { if (Objects.equal(tagName tag.getName())) { removeTags.add(tag); } } tags.removeAll(removeTags); return removeTags.size(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setAllowCreate,public void  (boolean allowCreate){ this.allowCreate=allowCreate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setBasedir,public void  (File basedir){ this.basedir=basedir; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setDeletePodsOnReplicationControllerUpdate,public void  (boolean deletePodsOnReplicationControllerUpdate){ this.deletePodsOnReplicationControllerUpdate=deletePodsOnReplicationControllerUpdate; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setFailOnMissingParameterValue,public void  (boolean failOnMissingParameterValue){ this.failOnMissingParameterValue=failOnMissingParameterValue; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setIgnoreBoundPersistentVolumeClaims,public void  (boolean ignoreBoundPersistentVolumeClaims){ this.ignoreBoundPersistentVolumeClaims=ignoreBoundPersistentVolumeClaims; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setIgnoreRunningOAuthClients,public void  (boolean ignoreRunningOAuthClients){ this.ignoreRunningOAuthClients=ignoreRunningOAuthClients; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setIgnoreServiceMode,public void  (boolean ignoreServiceMode){ this.ignoreServiceMode=ignoreServiceMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setLogJsonDir,public void  (File logJsonDir){ this.logJsonDir=logJsonDir; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setNamespace,public void  (String namespace){ this.namesapce=namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setProcessTemplatesLocally,public void  (boolean processTemplatesLocally){ this.processTemplatesLocally=processTemplatesLocally; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setRecreateMode,public void  (boolean recreateMode){ this.recreateMode=recreateMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setRequireSecretsCreatedBeforeReplicationControllers,public void  (boolean requireSecretsCreatedBeforeReplicationControllers){ this.requireSecretsCreatedBeforeReplicationControllers=requireSecretsCreatedBeforeReplicationControllers; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setRollingUpgrade,public void  (boolean rollingUpgrade){ this.rollingUpgrade=rollingUpgrade; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setRollingUpgradePreserveScale,public void  (boolean rollingUpgradePreserveScale){ this.rollingUpgradePreserveScale=rollingUpgradePreserveScale; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setServicesOnlyMode,public void  (boolean servicesOnlyMode){ this.servicesOnlyMode=servicesOnlyMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setSupportOAuthClients,public void  (boolean supportOAuthClients){ this.supportOAuthClients=supportOAuthClients; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,setThrowExceptionOnError,public void  (boolean throwExceptionOnError){ this.throwExceptionOnError=throwExceptionOnError; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\Controller.java,validatePodSpec,protected void  (PodSpec podSpec String namespace){ if (requireSecretsCreatedBeforeReplicationControllers) { List<Volume> volumes=podSpec.getVolumes(); if (volumes != null) { for ( Volume volume : volumes) { SecretVolumeSource secret=volume.getSecret(); if (secret != null) { String secretName=secret.getSecretName(); if (Strings.isNotBlank(secretName)) { KubernetesHelper.validateSecretExists(kubernetesClient namespace secretName); } } } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,Pipeline,public  (PipelineKind kind String jobName){ this.kind=kind; this.jobName=jobName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,getConfiguration,public PipelineConfiguration  (){ if (configuration == null) { configuration=new PipelineConfiguration(); } return configuration; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,getJobName,public String  (){ return jobName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,getKind,public PipelineKind  (){ return kind; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,isCd,public boolean  (){ return kind == PipelineKind.CD; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,isCi,public boolean  (){ return kind == PipelineKind.CI; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,isDeveloper,public boolean  (){ return kind == PipelineKind.Developer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipeline.java,setConfiguration,public void  (PipelineConfiguration configuration){ this.configuration=configuration; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,create,"public static JobEnvironment  (Map<String String> map) throws IntrospectionException { JobEnvironment answer=new JobEnvironment(); BeanInfo beanInfo=Introspector.getBeanInfo(JobEnvironment.class); PropertyDescriptor[] propertyDescriptors=beanInfo.getPropertyDescriptors(); if (propertyDescriptors != null) { for ( PropertyDescriptor propertyDescriptor : propertyDescriptors) { String name=propertyDescriptor.getName(); String envVarName=propertyNameToEnvironmentVariableName(name); String value=map.get(envVarName); if (value == null) { continue; } PropertyEditor propertyEditor=propertyDescriptor.createPropertyEditor(answer); if (propertyEditor == null) { Method writeMethod=propertyDescriptor.getWriteMethod(); if (writeMethod == null) { LOG.warn(""No PropertyEditor or WriteMethod for property: "" + name); continue; } Class<?>[] parameterTypes=writeMethod.getParameterTypes(); if (parameterTypes.length == 0 || !parameterTypes[0].equals(String.class)) { LOG.warn(""WriteMethod for property: "" + name + "" does not take a String and there is no PropertyEditor!""); continue; } try { writeMethod.invoke(answer value); } catch ( Exception e) { LOG.warn(""Failed to set property "" + name + "" due to: ""+ e e); } } else { propertyEditor.setAsText(value); } } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getBranchName,public String  (){ return branchName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getBuildDisplayName,public String  (){ return buildDisplayName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getBuildId,public String  (){ return buildId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getBuildNumber,public String  (){ return buildNumber; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getBuildTag,public String  (){ return buildTag; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getBuildUrl,public String  (){ return buildUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getGitUrl,public String  (){ return gitUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getJenkinsUrl,public String  (){ return jenkinsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getJobBaseName,public String  (){ return jobBaseName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getJobDisplayUrl,public String  (){ return jobDisplayUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getJobName,public String  (){ return jobName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,getJobUrl,public String  (){ return jobUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,propertyNameToEnvironmentVariableName,"private static String  (String name){ return Strings.splitCamelCase(name ""_"").toUpperCase(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setBranchName,public void  (String branchName){ this.branchName=branchName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setBuildDisplayName,public void  (String buildDisplayName){ this.buildDisplayName=buildDisplayName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setBuildId,public void  (String buildId){ this.buildId=buildId; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setBuildNumber,public void  (String buildNumber){ this.buildNumber=buildNumber; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setBuildTag,public void  (String buildTag){ this.buildTag=buildTag; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setBuildUrl,public void  (String buildUrl){ this.buildUrl=buildUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setGitUrl,public void  (String gitUrl){ this.gitUrl=gitUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setJenkinsUrl,public void  (String jenkinsUrl){ this.jenkinsUrl=jenkinsUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setJobBaseName,public void  (String jobBaseName){ this.jobBaseName=jobBaseName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setJobDisplayUrl,public void  (String jobDisplayUrl){ this.jobDisplayUrl=jobDisplayUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setJobName,public void  (String jobName){ this.jobName=jobName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,setJobUrl,public void  (String jobUrl){ this.jobUrl=jobUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\JobEnvironment.java,toString,"@Override public String  (){ return ""JobEnvironment{"" + ""buildId='"" + buildId + '\''+ ""  jobName='""+ jobName+ '\''+ ""  gitUrl='""+ gitUrl+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,JenkinShiftClient,public  (Config config) throws KubernetesClientException { super(config); updateHttpClient(config); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,addObjectsToItemArray,"@SuppressWarnings(""unchecked"") protected static void  (List destinationList Object object) throws IOException { if (object instanceof KubernetesList) { KubernetesList kubernetesList=(KubernetesList)object; List<HasMetadata> items=kubernetesList.getItems()"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,appendSummaryText,"protected static void  (StringBuilder buffer PodSpec podSpec){ if (podSpec != null) { List<Container> containers=podSpec.getContainers(); if (containers != null) { for ( Container container : containers) { String image=container.getImage(); appendText(buffer ""image: "" + image); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,appendText,"protected static void  (StringBuilder buffer String text){ if (buffer.length() > 0) { buffer.append(""  ""); } buffer.append(text); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,asKubernetesList,public static KubernetesList  (Object dto) throws IOException { if (dto instanceof KubernetesList) { return (KubernetesList)dto; } else { KubernetesList answer=new KubernetesList(); List<HasMetadata> items=toItemList(dto); answer.setItems(items); return answer; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,combineJson,public static Object  (Object... objects) throws IOException { KubernetesList list=findOrCreateList(objects); List<HasMetadata> items=list.getItems(); if (items == null) { items=new ArrayList<>(); list.setItems(items); } for ( Object object : objects) { if (object != list) { addObjectsToItemArray(items object); } } KubernetesList fullList=new KubernetesList(); fullList.setItems(items); moveServicesToFrontOfArray(items); removeDuplicates(items); Object answer=Templates.combineTemplates(fullList); items=toItemList(answer); removeDuplicates(items); return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,compare,@Override public int  (SRVRecord a SRVRecord b){ int ret=Integer.compare(b.getPriority() a.getPriority()); if (ret == 0) { ret=Integer.compare(b.getWeight() a.getWeight()); } return ret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,containerNameToPodId,public static String  (String containerName){ return containerName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createHttpClient,"private OkHttpClient  (final Config config){ try { OkHttpClient.Builder httpClientBuilder=new OkHttpClient.Builder(); httpClientBuilder.followRedirects(true); httpClientBuilder.followSslRedirects(true); if (config.isTrustCerts()) { httpClientBuilder.hostnameVerifier(new HostnameVerifier(){ @Override public boolean verify( String s  SSLSession sslSession){ return true; } } ); } if (isNotNullOrEmpty(config.getUsername()) && isNotNullOrEmpty(config.getPassword())) { httpClientBuilder.addInterceptor(new Interceptor(){ @Override public Response intercept( Chain chain) throws IOException { Request authReq=chain.request().newBuilder().addHeader(""Authorization"" Credentials.basic(config.getUsername() config.getPassword())).build(); return chain.proceed(authReq); } } ); } else if (config.getOauthToken() != null) { httpClientBuilder.addInterceptor(new Interceptor(){ @Override public Response intercept( Chain chain) throws IOException { Request authReq=chain.request().newBuilder().addHeader(""Authorization"" ""Bearer "" + config.getOauthToken()).build(); return chain.proceed(authReq); } } ); } Logger reqLogger=LoggerFactory.getLogger(HttpLoggingInterceptor.class); if (reqLogger.isTraceEnabled()) { HttpLoggingInterceptor loggingInterceptor=new HttpLoggingInterceptor(); loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY); httpClientBuilder.addNetworkInterceptor(loggingInterceptor); } if (config.getConnectionTimeout() > 0) { httpClientBuilder.connectTimeout(config.getConnectionTimeout() TimeUnit.MILLISECONDS); } if (config.getRequestTimeout() > 0) { httpClientBuilder.readTimeout(config.getRequestTimeout() TimeUnit.MILLISECONDS); } if (config.getUserAgent() != null && !config.getUserAgent().isEmpty()) { httpClientBuilder.addNetworkInterceptor(new Interceptor(){ @Override public Response intercept( Chain chain) throws IOException { Request agent=chain.request().newBuilder().header(""User-Agent"" config.getUserAgent()).build(); return chain.proceed(agent); } } ); } return httpClientBuilder.build(); } catch ( Exception e) { throw KubernetesClientException.launderThrowable(e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createIntOrString,public static IntOrString  (String nameOrNumber){ if (isNullOrBlank(nameOrNumber)) { return null; } else { IntOrString answer=new IntOrString(); Integer intVal=null; try { intVal=Integer.parseInt(nameOrNumber); } catch ( Exception e) { } if (intVal != null) { answer.setIntVal(intVal); answer.setKind(INTORSTRING_KIND_INT); } else { answer.setStrVal(nameOrNumber); answer.setKind(INTORSTRING_KIND_STRING); } return answer; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createJenkinshiftConfig,private static Config  (String jenkinshiftUrl){ Config config=new Config(); config.setMasterUrl(jenkinshiftUrl); return config; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createJenkinshiftOpenShiftClient,public static OpenShiftClient  (String jenkinshiftUrl){ Config config=createJenkinshiftConfig(jenkinshiftUrl); JenkinShiftClient jenkinShiftClient=new JenkinShiftClient(config); jenkinShiftClient.updateHttpClient(config); return jenkinShiftClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\Pipelines.java,getPipeline,public static Pipeline  (KubernetesClient kubernetesClient String namespace JobEnvironment jobEnvironment) throws IntrospectionException { PipelineConfiguration configuration=PipelineConfiguration.loadPipelineConfiguration(kubernetesClient namespace); return configuration.getPipeline(jobEnvironment); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createNamespaceServiceFilter,"public static Filter<Service>  (final String namespace){ if (isNullOrBlank(namespace)) { return Filters.<Service>trueFilter(); } else { return new Filter<Service>(){ public String toString(){ return ""NamespaceServiceFilter("" + namespace + "")""; } public boolean matches( Service entity){ return Objects.equal(namespace getNamespace(entity.getMetadata())); } } ; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createPodAnnotationFilter,"public static Filter<Pod>  (final Map<String String> annotationSelector){ if (annotationSelector == null || annotationSelector.isEmpty()) { return Filters.<Pod>trueFilter(); } else { return new Filter<Pod>(){ public String toString(){ return ""PodAnnotationFilter("" + annotationSelector + "")""; } public boolean matches( Pod entity){ return filterLabels(annotationSelector entity.getMetadata().getAnnotations()); } } ; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createPodFilter,"public static Filter<Pod>  (final Map<String String> labelSelector){ if (labelSelector == null || labelSelector.isEmpty()) { return Filters.<Pod>trueFilter(); } else { return new Filter<Pod>(){ public String toString(){ return ""PodFilter("" + labelSelector + "")""; } public boolean matches( Pod entity){ return filterLabels(labelSelector entity.getMetadata().getLabels()); } } ; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createReplicationControllerFilter,"public static Filter<ReplicationController>  (final Map<String String> labelSelector){ if (labelSelector == null || labelSelector.isEmpty()) { return Filters.<ReplicationController>trueFilter(); } else { return new Filter<ReplicationController>(){ public String toString(){ return ""ReplicationControllerFilter("" + labelSelector + "")""; } public boolean matches( ReplicationController entity){ return filterLabels(labelSelector entity.getMetadata().getLabels()); } } ; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createServiceFilter,"public static Filter<Service>  (final Map<String String> labelSelector){ if (labelSelector == null || labelSelector.isEmpty()) { return Filters.<Service>trueFilter(); } else { return new Filter<Service>(){ public String toString(){ return ""ServiceFilter("" + labelSelector + "")""; } public boolean matches( Service entity){ return filterLabels(labelSelector entity.getMetadata().getLabels()); } } ; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,createYamlObjectMapper,public static ObjectMapper  (){ ObjectMapper objectMapper=new ObjectMapper(new YAMLFactory()); objectMapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY); return objectMapper; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,defaultNamespace,public static String  (){ return CONFIG.getNamespace(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,filterLabels,public static boolean  (Map<String String> filterLabels Map<String String> labels){ if (labels == null) { return false; } Set<Map.Entry<String String>> entries=filterLabels.entrySet(); for ( Map.Entry<String String> entry : entries) { String key=entry.getKey(); String expectedValue=entry.getValue(); String actualValue=labels.get(key); if (!Objects.equal(expectedValue actualValue)) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,filterMatchesIdOrLabels,public static boolean  (String textFilter String id Map<String String> labels){ String text=toLabelsString(labels); boolean result=(text != null && text.contains(textFilter)) || (id != null && id.contains(textFilter)); if (!result) { Map<String String> selectorMap=toLabelsMap(textFilter); if (!selectorMap.isEmpty() && labels != null && !labels.isEmpty()) { result=true; for ( Map.Entry<String String> entry : selectorMap.entrySet()) { String value=labels.get(entry.getKey()); if (value == null || !value.matches(entry.getValue())) { result=false; break; } } } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,findConfigResource,private static URL  (String resourceName){ return KubernetesHelper.class.getResource(resourceName); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,findContainerPort,public static ContainerPort  (Pod pod Integer portNumber){ List<Container> containers=KubernetesHelper.getContainers(pod); for ( Container container : containers) { List<ContainerPort> ports=container.getPorts(); for ( ContainerPort port : ports) { if (Objects.equal(portNumber port.getContainerPort())) { return port; } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,findContainerPortByName,public static ContainerPort  (Pod pod String name){ List<Container> containers=KubernetesHelper.getContainers(pod); for ( Container container : containers) { List<ContainerPort> ports=container.getPorts(); for ( ContainerPort port : ports) { if (Objects.equal(name port.getName())) { return port; } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,findContainerPortByNumberOrName,public static ContainerPort  (Pod pod String numberOrName){ Integer portNumber=toOptionalNumber(numberOrName); if (portNumber != null) { return findContainerPort(pod portNumber); } else { return findContainerPortByName(pod numberOrName); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,findKubernetesResourcesOnClasspath,"public static List<HasMetadata>  (Controller controller) throws IOException { String resourceName=""kubernetes.yml""; OpenShiftClient openShiftClient=controller.getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.IMAGE) && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.ROUTE)) { resourceName=""openshift.yml""; } URL configUrl=findConfigResource(""/META-INF/fabric8/"" + resourceName); if (configUrl == null) { configUrl=findConfigResource(""kubernetes.json""); } if (configUrl != null) { String configText=IOHelpers.loadFully(configUrl); Object dto=null; String configPath=configUrl.getPath(); if (configPath.endsWith("".yml"") || configPath.endsWith("".yaml"")) { dto=loadYaml(configText KubernetesResource.class); } else { dto=loadJson(configText); } KubernetesList kubeList=KubernetesHelper.asKubernetesList(dto); List<HasMetadata> items=kubeList.getItems(); return items; } else { return new ArrayList<>(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,findOrCreateList,protected static KubernetesList  (Object[] objects){ KubernetesList list=null; for ( Object object : objects) { if (object instanceof KubernetesList) { list=(KubernetesList)object; break; } } if (list == null) { list=new KubernetesList(); } return list; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,findServicePortByName,public static ServicePort  (Service service String portName){ if (Strings.isNullOrBlank(portName)) { return service.getSpec().getPorts().iterator().next(); } for ( ServicePort servicePort : service.getSpec().getPorts()) { if (Objects.equal(servicePort.getName() portName)) { return servicePort; } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getAdditionalPropertyMap,"@SuppressWarnings(""unchecked"") protected static Map<String Object>  (Map<String Object> additionalProperties String name){ if (additionalProperties != null) { Object value=additionalProperties.get(name); if (value instanceof Map) { return (Map<String Obje"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getAdditionalPropertyText,protected static String  (Map<String Object> additionalProperties String name){ if (additionalProperties != null) { Object value=additionalProperties.get(name); if (value != null) { return value.toString(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getContainerEnvVar,public static String  (Container container String envVarName){ if (container != null) { List<EnvVar> env=container.getEnv(); if (env != null) { for ( EnvVar envVar : env) { if (Objects.equal(envVarName envVar.getName())) { return envVar.getValue(); } } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getContainerPorts,"@SuppressWarnings(""unchecked"") public static Set<Integer>  (Service service){ Set<Integer> answer=Collections.EMPTY_SET; String id=getName(service); ServiceSpec spec=service.getSpec(); if (spec != null) { List<ServicePort> servicePorts=spec.getPorts(); Ob"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getContainerPortsStrings,"@SuppressWarnings(""unchecked"") public static Set<String>  (Service service){ Set<String> answer=Collections.EMPTY_SET; String id=getName(service); ServiceSpec spec=service.getSpec(); if (spec != null) { List<ServicePort> servicePorts=spec.getPorts(); Obje"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getContainers,"@SuppressWarnings(""unchecked"") public static List<Container>  (PodTemplateSpec podTemplateSpec){ if (podTemplateSpec != null) { return getContainers(podTemplateSpec.getSpec()); } return Collections.EMPTY_LIST; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getCurrentContainers,"@SuppressWarnings(""unchecked"") public static Map<String ContainerStatus>  (PodStatus podStatus){ if (podStatus != null) { List<ContainerStatus> containerStatuses=podStatus.getContainerStatuses(); Map<String ContainerStatus> info=new Hashtable<>(containerS"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getDockerIp,"public static String  (){ String url=resolveDockerHost(); int idx=url.indexOf(""://""); if (idx > 0) { url=url.substring(idx + 3); } idx=url.indexOf("":""); if (idx > 0) { url=url.substring(0 idx); } return url; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getFilteredPodMap,public static Map<String Pod>  (KubernetesClient kubernetes String namespace Filter<Pod> filter){ return toFilteredPodMap(kubernetes.pods().inNamespace(namespace).list() filter); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getHost,public static String  (Pod pod){ if (pod != null) { PodStatus currentState=pod.getStatus(); if (currentState != null) { return currentState.getHostIP(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getKind,"public static String  (HasMetadata entity){ if (entity != null) { if (entity instanceof KubernetesList) { return ""List""; } else { return entity.getClass().getSimpleName(); } } else { return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getLabels,"@SuppressWarnings(""unchecked"") public static Map<String String>  (HasMetadata entity){ if (entity != null) { return getLabels(entity.getMetadata()); } return Collections.EMPTY_MAP; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getMetadata,"protected static Map<String Object>  (Map<String Object> additionalProperties boolean create){ Map<String Object> answer=getAdditionalPropertyMap(additionalProperties ""metadata""); if (answer == null) { answer=new LinkedHashMap<>(); if (create) { additionalProperties.put(""metadata"" answer); } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getName,public static String  (HasMetadata entity){ if (entity != null) { return getName(entity.getMetadata()); } else { return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getNamespace,public static String  (KubernetesClient kubernetesClient){ String answer=kubernetesClient.getNamespace(); if (Strings.isNullOrBlank(answer)) { answer=defaultNamespace(); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getObjectId,public static String  (Object object){ if (object instanceof HasMetadata) { return getName((HasMetadata)object); } else { return object != null ? object.toString() : null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getOrCreateAnnotations,public static Map<String String>  (HasMetadata entity){ ObjectMeta metadata=getOrCreateMetadata(entity); Map<String String> answer=metadata.getAnnotations(); if (answer == null) { answer=new LinkedHashMap<>(); metadata.setAnnotations(answer); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getOrCreateLabels,public static Map<String String>  (HasMetadata entity){ ObjectMeta metadata=getOrCreateMetadata(entity); Map<String String> answer=metadata.getLabels(); if (answer == null) { answer=new LinkedHashMap<>(); metadata.setLabels(answer); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getOrCreateMetadata,public static ObjectMeta  (HasMetadata entity){ ObjectMeta metadata=entity.getMetadata(); if (metadata == null) { metadata=new ObjectMeta(); entity.setMetadata(metadata); } return metadata; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getOrCreateSpec,public static ServiceSpec  (Service entity){ ServiceSpec spec=entity.getSpec(); if (spec == null) { spec=new ServiceSpec(); entity.setSpec(spec); } return spec; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getPodEnvVar,public static String  (Pod pod String envVarName){ if (pod != null) { PodSpec spec=pod.getSpec(); if (spec != null) { List<Container> containers=spec.getContainers(); if (containers != null) { for ( Container container : containers) { String answer=getContainerEnvVar(container envVarName); if (Strings.isNotBlank(answer)) { return answer; } } } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getPodMap,public static Map<String Pod>  (KubernetesClient kubernetes String namespace){ PodList pods=null; try { pods=kubernetes.pods().inNamespace(namespace).list(); } catch ( KubernetesClientException e) { if (e.getCode() == 404) { } else { throw e; } } return toPodMap(pods); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getPodStatus,"public static PodStatusType  (Pod pod){ String text=getPodStatusText(pod); if (Strings.isNotBlank(text)) { text=text.toLowerCase(); if (text.startsWith(""run"")) { return PodStatusType.OK; } else if (text.startsWith(""wait"")) { return PodStatusType.WAIT; } else { return PodStatusType.ERROR; } } return PodStatusType.WAIT; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getPodStatusText,public static String  (Pod pod){ if (pod != null) { PodStatus podStatus=pod.getStatus(); if (podStatus != null) { return podStatus.getPhase(); } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getPodsForReplicationController,"@SuppressWarnings(""unchecked"") public static List<Pod>  (ReplicationController replicationController Iterable<Pod> pods){ ReplicationControllerSpec replicationControllerSpec=replicationController.getSpec(); if (replicationControllerSpec == null) { LOG.war"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getPodsForService,public static List<Pod>  (Service service Iterable<Pod> pods){ Map<String String> selector=getSelector(service); Filter<Pod> podFilter=KubernetesHelper.createPodFilter(selector); return Filters.filter(pods podFilter); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getPortalIP,public static String  (Service entity){ String answer=null; if (entity != null) { ServiceSpec spec=getOrCreateSpec(entity); return spec.getClusterIP(); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getPorts,public static Set<Integer>  (Service entity){ Set<Integer> answer=new HashSet<>(); if (entity != null) { ServiceSpec spec=getOrCreateSpec(entity); for ( ServicePort port : spec.getPorts()) { answer.add(port.getPort()); } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getQualifiedName,"public static String  (HasMetadata entity){ if (entity != null) { return """" + getNamespace(entity) + ""/""+ getName(entity); } else { return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getReplicationControllerMap,public static Map<String ReplicationController>  (KubernetesClient kubernetes String namespace){ return toReplicationControllerMap(kubernetes.replicationControllers().inNamespace(namespace).list()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getResourceVersion,public static String  (HasMetadata entity){ if (entity != null) { ObjectMeta metadata=entity.getMetadata(); if (metadata != null) { String resourceVersion=metadata.getResourceVersion(); if (Strings.isNotBlank(resourceVersion)) { return resourceVersion; } } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getSelectedPodMap,public static Map<String Pod>  (KubernetesClient kubernetes String namespace String selector){ return getFilteredPodMap(kubernetes namespace createPodFilter(selector)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getSelectedReplicationControllerMap,public static Map<String ReplicationController>  (KubernetesClient kubernetes String namespace String selector){ return toReplicationControllerMap(kubernetes.replicationControllers().inNamespace(namespace).withLabels(toLabelsMap(selector)).list()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getSelector,"@SuppressWarnings(""unchecked"") public static Map<String String>  (Service entity){ Map<String String> answer=null; if (entity != null) { ServiceSpec spec=getOrCreateSpec(entity); answer=spec.getSelector(); } return answer != null ? answer : Collections.EM"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getServiceMap,public static Map<String Service>  (KubernetesClient kubernetes String namespace){ return toServiceMap(kubernetes.services().inNamespace(namespace).list()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getServiceURL,"public static String  (KubernetesClient client String serviceName String serviceNamespace String serviceProtocol String servicePortName boolean serviceExternal){ Service srv=null; String serviceHost=KubernetesServices.serviceToHostOrBlank(serviceName); String servicePort=KubernetesServices.serviceToPortOrBlank(serviceName servicePortName); String serviceProto=serviceProtocol != null ? serviceProtocol : KubernetesServices.serviceToProtocol(serviceName servicePort); String actualNamespace=Strings.isNotBlank(serviceNamespace) ? serviceNamespace : client.getNamespace(); if (!serviceExternal && Strings.isNotBlank(serviceHost) && Strings.isNotBlank(servicePort)&& Strings.isNotBlank(serviceProtocol)) { return serviceProtocol + ""://"" + serviceHost+ "":""+ servicePort; } else if (Strings.isNotBlank(actualNamespace)) { try { srv=client.services().inNamespace(actualNamespace).withName(serviceName).get(); } catch ( Exception e) { LOGGER.warn(""Could not lookup service:"" + serviceName + "" in namespace:""+ actualNamespace+ ""  due to: ""+ e.getMessage()); } } if (srv == null) { String hostAndPort=Systems.getServiceHostAndPort(serviceName """" """"); if (!hostAndPort.startsWith("":"")) { return serviceProto + ""://"" + hostAndPort; } } if (srv == null) { throw new IllegalArgumentException(""No kubernetes service could be found for name: "" + serviceName + "" in namespace: ""+ actualNamespace); } String answer=getOrCreateAnnotations(srv).get(Annotations.Service.EXPOSE_URL); if (Strings.isNotBlank(answer)) { return answer; } try { if (Strings.isNullOrBlank(servicePortName) && isOpenShift(client)) { OpenShiftClient openShiftClient=client.adapt(OpenShiftClient.class); Route route=openShiftClient.routes().inNamespace(actualNamespace).withName(serviceName).get(); if (route != null) { return (serviceProto + ""://"" + route.getSpec().getHost()).toLowerCase(); } } } catch ( KubernetesClientException e) { if (e.getCode() == 403) { LOGGER.warn(""Could not lookup route:"" + serviceName + "" in namespace:""+ actualNamespace+ ""  due to: ""+ e.getMessage()); } else { throw e; } } ServicePort port=findServicePortByName(srv servicePortName); if (port == null) { throw new RuntimeException(""Couldn't find port: "" + servicePortName + "" for service:""+ serviceName); } String clusterIP=srv.getSpec().getClusterIP(); if (""None"".equals(clusterIP)) { throw new IllegalStateException(""Service: "" + serviceName + "" in namespace:""+ serviceNamespace+ ""is head-less. Search for endpoints instead.""); } Integer portNumber=port.getPort(); if (Strings.isNullOrBlank(clusterIP)) { IngressList ingresses=client.extensions().ingresses().inNamespace(serviceNamespace).list(); if (ingresses != null) { List<Ingress> items=ingresses.getItems(); if (items != null) { for ( Ingress item : items) { String ns=getNamespace(item); if (Objects.equal(serviceNamespace ns)) { IngressSpec spec=item.getSpec(); if (spec != null) { List<IngressRule> rules=spec.getRules(); List<IngressTLS> tls=spec.getTls(); if (rules != null) { for ( IngressRule rule : rules) { HTTPIngressRuleValue http=rule.getHttp(); if (http != null) { List<HTTPIngressPath> paths=http.getPaths(); if (paths != null) { for ( HTTPIngressPath path : paths) { IngressBackend backend=path.getBackend(); if (backend != null) { String backendServiceName=backend.getServiceName(); if (serviceName.equals(backendServiceName) && portsMatch(port backend.getServicePort())) { String pathPostfix=path.getPath(); if (tls != null) { for ( IngressTLS tlsHost : tls) { List<String> hosts=tlsHost.getHosts(); if (hosts != null) { for ( String host : hosts) { if (Strings.isNotBlank(host)) { if (Strings.isNullOrBlank(pathPostfix)) { pathPostfix=""/""; } return ""https://"" + URLUtils.pathJoin(host pathPostfix); } } } } } answer=rule.getHost(); if (Strings.isNotBlank(answer)) { if (Strings.isNullOrBlank(pathPostfix)) { pathPostfix=""/""; } return ""http://"" + URLUtils.pathJoin(answer pathPostfix); } } } } } } } } } } } } } ServiceStatus status=srv.getStatus(); if (status != null) { LoadBalancerStatus loadBalancerStatus=status.getLoadBalancer(); if (loadBalancerStatus != null) { List<LoadBalancerIngress> loadBalancerIngresses=loadBalancerStatus.getIngress(); if (loadBalancerIngresses != null) { for ( LoadBalancerIngress loadBalancerIngress : loadBalancerIngresses) { String ip=loadBalancerIngress.getIp(); if (Strings.isNotBlank(ip)) { clusterIP=ip; break; } } } } } } if (Strings.isNullOrBlank(clusterIP)) { boolean found=false; Integer nodePort=port.getNodePort(); if (nodePort != null) { try { NodeList nodeList=client.nodes().list(); if (nodeList != null) { List<Node> items=nodeList.getItems(); if (items != null) { for ( Node item : items) { NodeStatus status=item.getStatus(); if (!found && status != null) { List<NodeAddress> addresses=status.getAddresses(); if (addresses != null) { for ( NodeAddress address : addresses) { String ip=address.getAddress(); if (Strings.isNotBlank(ip)) { clusterIP=ip; portNumber=nodePort; found=true; break; } } } } if (!found) { NodeSpec spec=item.getSpec(); if (spec != null) { clusterIP=spec.getExternalID(); if (Strings.isNotBlank(clusterIP)) { portNumber=nodePort; break; } } } } } } } catch ( Exception e) { LOG.warn(""Could not find a node!: "" + e e); } } } return (serviceProto + ""://"" + clusterIP+ "":""+ portNumber).toLowerCase(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getServiceURLInCurrentNamespace,"public static String  (KubernetesClient client String serviceName String serviceProtocol String servicePortName boolean serviceExternal){ Service srv=null; String serviceHost=KubernetesServices.serviceToHostOrBlank(serviceName); String servicePort=KubernetesServices.serviceToPortOrBlank(serviceName servicePortName); String serviceProto=serviceProtocol != null ? serviceProtocol : KubernetesServices.serviceToProtocol(serviceName servicePort); if (!serviceExternal && Strings.isNotBlank(serviceHost) && Strings.isNotBlank(servicePort)&& Strings.isNotBlank(serviceProtocol)) { return serviceProtocol + ""://"" + serviceHost+ "":""+ servicePort; } else { srv=client.services().withName(serviceName).get(); } if (srv == null) { throw new IllegalArgumentException(""No kubernetes service could be found for name: "" + serviceName); } if (Strings.isNullOrBlank(servicePortName) && isOpenShift(client)) { OpenShiftClient openShiftClient=client.adapt(OpenShiftClient.class); RouteList routeList=openShiftClient.routes().list(); for ( Route route : routeList.getItems()) { if (route.getSpec().getTo().getName().equals(serviceName)) { return (serviceProto + ""://"" + route.getSpec().getHost()).toLowerCase(); } } } ServicePort port=findServicePortByName(srv servicePortName); if (port == null) { throw new RuntimeException(""Couldn't find port: "" + servicePortName + "" for service:""+ serviceName); } String clusterIP=srv.getSpec().getClusterIP(); if (""None"".equals(clusterIP)) { throw new IllegalStateException(""Service: "" + serviceName + "" in current namespace is head-less. Search for endpoints instead.""); } return (serviceProto + ""://"" + clusterIP+ "":""+ port.getPort()).toLowerCase(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,getStatusText,public static String  (PodStatus podStatus){ String status; List<String> statusList=new ArrayList<>(); List<ContainerStatus> containerStatuses=podStatus.getContainerStatuses(); for ( ContainerStatus containerStatus : containerStatuses) { ContainerState state=containerStatus.getState(); String statusText=summaryText(state); if (statusText != null) { statusList.add(statusText); } } if (statusList.size() == 1) { status=statusList.get(0); } else { status=statusList.toString(); } return status; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,hasResourceVersion,public static boolean  (HasMetadata entity){ return getResourceVersion(entity) != null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,intOrStringToInteger,"public static Integer  (IntOrString intOrStringValue String message){ Integer intValue=intOrStringValue.getIntVal(); if (intValue == null) { String containerPortText=intOrStringValue.getStrVal(); if (Strings.isNullOrBlank(containerPortText)) { throw new IllegalArgumentException(""No port for "" + message); } try { intValue=Integer.parseInt(containerPortText); } catch ( NumberFormatException e) { throw new IllegalStateException(""Invalid servicePorts expression "" + containerPortText + "" for ""+ message+ "". ""+ e e); } } return intValue; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,intercept,"@Override public Response  (Chain chain) throws IOException { Request agent=chain.request().newBuilder().header(""User-Agent"" config.getUserAgent()).build(); return chain.proceed(agent); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,isEmptyValue,private static boolean  (JsonNode value){ if (value.isArray()) { int size=value.size(); return size == 0; } if (value.isTextual()) { String text=value.textValue(); return isNullOrBlank(text); } if (value.isObject()) { removeNullOrEmptyValues(value); Iterator<String> iter=value.fieldNames(); int count=0; while (iter.hasNext()) { iter.next(); count++; } return count == 0; } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,isOpenShift,"public static boolean  (KubernetesClient client){ URL masterUrl=client.getMasterUrl(); if (IS_OPENSHIFT.containsKey(masterUrl)) { return IS_OPENSHIFT.get(masterUrl); } else { RootPaths rootPaths=client.rootPaths(); if (rootPaths != null) { List<String> paths=rootPaths.getPaths(); if (paths != null) { for ( String path : paths) { if (java.util.Objects.equals(""/oapi"" path) || java.util.Objects.equals(""oapi"" path)) { IS_OPENSHIFT.putIfAbsent(masterUrl true); return true; } } } } } IS_OPENSHIFT.putIfAbsent(masterUrl false); return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,isPodReady,"public static boolean  (Pod pod){ if (!isPodRunning(pod)) { return false; } PodStatus podStatus=pod.getStatus(); if (podStatus == null) { return true; } List<PodCondition> conditions=podStatus.getConditions(); if (conditions == null || conditions.isEmpty()) { return true; } for ( PodCondition condition : conditions) { if (""ready"".equalsIgnoreCase(condition.getType())) { return Boolean.parseBoolean(condition.getStatus()); } } return true; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,isPodRunning,public static boolean  (Pod pod){ PodStatusType status=getPodStatus(pod); return Objects.equal(status PodStatusType.OK); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,isPureKubernetes,"public static boolean  (HasMetadata item){ if (item != null) { String name=item.getClass().getName(); return name.startsWith(""io.fabric8.kubernetes""); } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,isServiceSsl,"public static boolean  (String host int port boolean trustAllCerts){ try { LOG.info(""Checking if a service is SSL on "" + host + "":""+ port); SSLSocketFactory sslsocketfactory; if (trustAllCerts) { sslsocketfactory=TrustEverythingSSLTrustManager.getTrustingSSLSocketFactory(); } else { sslsocketfactory=(SSLSocketFactory)SSLSocketFactory.getDefault(); } Socket socket=sslsocketfactory.createSocket(); socket.connect(new InetSocketAddress(host port) 1 * 1000); try { InputStream in=socket.getInputStream(); OutputStream out=socket.getOutputStream(); out.write(1); while (in.available() > 0) { System.out.print(in.read()); } return true; } finally { LOG.info(""Checked if a service is SSL on "" + host + "":""+ port); socket.close(); } } catch ( SSLHandshakeException e) { LOG.error(""SSL handshake failed - this probably means that you need to trust the kubernetes root SSL certificate or set the environment variable "" + Utils.convertSystemPropertyNameToEnvVar(io.fabric8.kubernetes.client.Config.KUBERNETES_TRUST_CERT_SYSTEM_PROPERTY) e); } catch ( SSLProtocolException e) { LOG.error(""SSL protocol error"" e); } catch ( SSLKeyException e) { LOG.error(""Bad SSL key"" e); } catch ( SSLPeerUnverifiedException e) { LOG.error(""Could not verify server"" e); } catch ( SSLException e) { LOG.debug(""Address does not appear to be SSL-enabled - falling back to http"" e); } catch ( IOException e) { LOG.debug(""Failed to validate service"" e); } return false; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,loadJson,public static Object  (byte[] json) throws IOException { if (json != null && json.length > 0) { return OBJECT_MAPPER.readerFor(KubernetesResource.class).readValue(json); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,loadYaml,public static <T>T  (byte[] data Class<T> clazz) throws IOException { ObjectMapper mapper=createYamlObjectMapper(); return mapper.readValue(data clazz); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,lookupServiceEndpointsInDns,"public static List<String>  (String serviceName) throws IllegalArgumentException  UnknownHostException { try { Lookup l=new Lookup(serviceName Type.SRV); Record[] records=l.run(); if (l.getResult() == Lookup.SUCCESSFUL) { SRVRecord[] srvRecords=Arrays.copyOf(records records.length SRVRecord[].class); Arrays.sort(srvRecords new Comparator<SRVRecord>(){ @Override public int compare( SRVRecord a  SRVRecord b){ int ret=Integer.compare(b.getPriority() a.getPriority()); if (ret == 0) { ret=Integer.compare(b.getWeight() a.getWeight()); } return ret; } } ); List<String> endpointAddresses=new ArrayList<>(srvRecords.length); for ( SRVRecord srvRecord : srvRecords) { endpointAddresses.add(srvRecord.getTarget().toString(true).concat("":"").concat(String.valueOf(srvRecord.getPort()))); } return endpointAddresses; } else { LOG.warn(""Lookup {} result: {}"" serviceName l.getErrorString()); } } catch ( TextParseException e) { LOG.error(""Unparseable service name: {}"" serviceName e); } catch ( ClassCastException e) { LOG.error(""Invalid response from DNS server - should have been A records"" e); } return Collections.EMPTY_LIST; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,lookupServiceInDns,"public static Set<String>  (String serviceName) throws IllegalArgumentException  UnknownHostException { try { Lookup l=new Lookup(serviceName); Record[] records=l.run(); if (l.getResult() == Lookup.SUCCESSFUL) { Set<String> endpointAddresses=new HashSet<>(records.length); for (int i=0; i < records.length; i++) { ARecord aRecord=(ARecord)records[i]; endpointAddresses.add(aRecord.getAddress().getHostAddress()); } return endpointAddresses; } else { LOG.warn(""Lookup {} result: {}"" serviceName l.getErrorString()); } } catch ( TextParseException e) { LOG.error(""Unparseable service name: {}"" serviceName e); } catch ( ClassCastException e) { LOG.error(""Invalid response from DNS server - should have been A records"" e); } return Collections.EMPTY_SET; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,matches,public boolean  (ReplicationController entity){ return filterLabels(labelSelector entity.getMetadata().getLabels()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,moveServicesToFrontOfArray,public static void  (List<HasMetadata> list){ int size=list.size(); int lastNonService=-1; for (int i=0; i < size; i++) { HasMetadata item=list.get(i); if (item instanceof Service) { if (lastNonService >= 0) { HasMetadata nonService=list.get(lastNonService); list.set(i nonService); list.set(lastNonService item); lastNonService++; } } else if (lastNonService < 0) { lastNonService=i; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,parseDate,"public static Date  (String text){ try { return new SimpleDateFormat(DATE_TIME_FORMAT).parse(text); } catch ( ParseException e) { LOG.warn(""Failed to parse date: "" + text + "". Reason: ""+ e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,portsMatch,private static boolean  (ServicePort servicePort IntOrString intOrString){ if (intOrString != null) { Integer port=servicePort.getPort(); Integer intVal=intOrString.getIntVal(); String strVal=intOrString.getStrVal(); if (intVal != null) { if (port != null) { return port.intValue() == intVal.intValue(); } else { } } else if (strVal != null) { return Objects.equal(strVal servicePort.getName()); } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,removeDuplicates,"protected static void  (List<HasMetadata> itemArray){ int size=itemArray.size(); int lastNonService=-1; Set<String> keys=new HashSet<>(); for (int i=0; i < size; i++) { HasMetadata item=itemArray.get(i); if (item == null) { itemArray.remove(i); i--; size--; } else { String id=getObjectId(item); String kind=item.getClass().getSimpleName(); if (Strings.isNotBlank(id)) { String key=kind + "":"" + id; if (!keys.add(key)) { itemArray.remove(i); i--; size--; } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,removeEmptyPods,public static void  (PodList podSchema){ List<Pod> list=notNullList(podSchema.getItems()); List<Pod> removeItems=new ArrayList<Pod>(); for ( Pod pod : list) { if (Strings.isNullOrBlank(getName(pod))) { removeItems.add(pod); } } list.removeAll(removeItems); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,removeNullOrEmptyValues,private static void  (JsonNode jsonNode){ if (jsonNode instanceof ObjectNode) { List<String> removeFields=new ArrayList<>(); ObjectNode object=(ObjectNode)jsonNode; for (Iterator<String> iter=object.fieldNames(); iter.hasNext(); ) { String field=iter.next(); JsonNode value=object.get(field); if (isEmptyValue(value)) { removeFields.add(field); } else { removeNullOrEmptyValues(value); ; } } for ( String field : removeFields) { object.remove(field); } } else if (jsonNode instanceof ArrayNode) { ArrayNode arrayNode=(ArrayNode)jsonNode; for (int i=0  size=arrayNode.size(); i < size; i++) { JsonNode value=arrayNode.get(i); removeNullOrEmptyValues(value); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,resolveDockerHost,"public static String  (){ String dockerHost=System.getenv(""DOCKER_HOST""); if (isNullOrBlank(dockerHost)) { dockerHost=System.getProperty(""docker.host""); } if (isNullOrBlank(dockerHost)) { return DEFAULT_DOCKER_HOST; } else { return dockerHost; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,saveJson,public static void  (File json Object object) throws IOException { OBJECT_MAPPER.writer().withDefaultPrettyPrinter().writeValue(json object); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,saveYaml,public static void  (Object data FileObject fileObject) throws IOException { ObjectMapper mapper=createYamlObjectMapper(); try (Writer writer=fileObject.openWriter()){ mapper.writeValue(writer data); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,saveYamlNotEmpty,public static void  (HasMetadata entity File outFile) throws IOException { String yaml=toYaml(entity); ObjectMapper objectMapper=createYamlObjectMapper(); JsonNode jsonNode=objectMapper.readTree(yaml); removeNullOrEmptyValues(jsonNode); objectMapper.writeValue(outFile jsonNode); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,setName,public static void  (HasMetadata entity String namespace String name){ ObjectMeta metadata=getOrCreateMetadata(entity); metadata.setNamespace(namespace); metadata.setName(name); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,setNamespace,public static void  (HasMetadata entity String namespace){ getOrCreateMetadata(entity).setNamespace(namespace); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,setSelector,public static void  (Service entity Map<String String> labels){ ServiceSpec spec=getOrCreateSpec(entity); spec.setSelector(labels); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,summaryText,public static String  (Pod entity){ StringBuilder buffer=new StringBuilder(); PodSpec podSpec=entity.getSpec(); appendSummaryText(buffer podSpec); return buffer.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toFilteredPodMap,protected static Map<String Pod>  (PodList podSchema Filter<Pod> filter){ List<Pod> list=podSchema != null ? podSchema.getItems() : null; List<Pod> filteredList=Filters.filter(list filter); return toPodMap(filteredList); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toFilteredReplicationControllerMap,protected static Map<String ReplicationController>  (ReplicationControllerList replicationControllerSchema Filter<ReplicationController> filter){ List<ReplicationController> list=replicationControllerSchema != null ? replicationControllerSchema.getItems() : null; List<ReplicationController> filteredList=Filters.filter(list filter); return toReplicationControllerMap(filteredList); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toFilteredServiceMap,public static Map<String Service>  (ServiceList serviceList Filter<Service> filter){ List<Service> list=serviceList != null ? serviceList.getItems() : null; List<Service> filteredList=Filters.filter(list filter); return toServiceMap(filteredList); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toItemList,"@SuppressWarnings(""unchecked"") public static List<HasMetadata>  (Object entity) throws IOException { if (entity instanceof List) { return (List<HasMetadata>)entity; } else if (entity instanceof HasMetadata[]) { HasMetadata[] array=(HasMetadata[])entity; r"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toJson,"public static String  (Object dto) throws JsonProcessingException { if (dto == null) { return ""null""; } Class<?> clazz=dto.getClass(); return OBJECT_MAPPER.writerFor(clazz).writeValueAsString(dto); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toLabelsMap,"public static Map<String String>  (String labels){ Map<String String> map=new HashMap<>(); if (labels != null && !labels.isEmpty()) { String[] elements=labels.split("" ""); if (elements.length > 0) { for ( String str : elements) { String[] keyValue=str.split(""=""); if (keyValue.length == 2) { String key=keyValue[0]; String value=keyValue[1]; if (key != null && value != null) { map.put(key.trim() value.trim()); } } } } } return map; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toLabelsString,"public static String  (Map<String String> labelMap){ StringBuilder buffer=new StringBuilder(); if (labelMap != null) { Set<Map.Entry<String String>> entries=labelMap.entrySet(); for ( Map.Entry<String String> entry : entries) { if (buffer.length() > 0) { buffer.append("" ""); } buffer.append(entry.getKey()); buffer.append(""=""); buffer.append(entry.getValue()); } } return buffer.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toOptionalNumber,protected static Integer  (String text){ if (Strings.isNotBlank(text)) { try { return Integer.parseInt(text); } catch ( NumberFormatException e) { } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toPodMap,public static Map<String Pod>  (List<Pod> pods){ List<Pod> list=notNullList(pods); Map<String Pod> answer=new HashMap<>(); for ( Pod pod : list) { String id=getName(pod); if (Strings.isNotBlank(id)) { answer.put(id pod); } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toPositiveNonZeroText,"public static String  (Integer port){ if (port != null) { int value=port; if (value > 0) { return """" + value; } } return """"; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toPrettyJson,"public static String  (Object dto) throws JsonProcessingException { if (dto == null) { return ""null""; } Class<?> clazz=dto.getClass(); ObjectMapper objectMapper=new ObjectMapper(); objectMapper.enable(SerializationFeature.INDENT_OUTPUT); return objectMapper.writerFor(clazz).writeValueAsString(dto); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toReplicationControllerMap,public static Map<String ReplicationController>  (List<ReplicationController> replicationControllers){ List<ReplicationController> list=notNullList(replicationControllers); Map<String ReplicationController> answer=new HashMap<>(); for ( ReplicationController replicationControllerSchema : list) { String id=getName(replicationControllerSchema); if (Strings.isNotBlank(id)) { answer.put(id replicationControllerSchema); } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toServiceMap,public static Map<String Service>  (List<Service> services){ List<Service> list=notNullList(services); Map<String Service> answer=new HashMap<>(); for ( Service service : list) { String id=getName(service); if (Strings.isNotBlank(id)) { answer.put(id service); } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toString,"public String  (){ return ""ReplicationControllerFilter("" + labelSelector + "")""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,toYaml,public static String  (Object data) throws IOException { ObjectMapper mapper=createYamlObjectMapper(); return mapper.writeValueAsString(data); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,updateHttpClient,protected void  (Config config){ this.httpClient=createHttpClient(config); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,validateKubernetesId,"public static String  (String currentValue String description) throws IllegalArgumentException { if (isNullOrBlank(currentValue)) { throw new IllegalArgumentException(""No "" + description + "" is specified!""); } int size=currentValue.length(); for (int i=0; i < size; i++) { char ch=currentValue.charAt(i); if (Character.isUpperCase(ch)) { throw new IllegalArgumentException(""Invalid upper case letter '"" + ch + ""' at index ""+ i+ "" for ""+ description+ "" value: ""+ currentValue); } } return currentValue; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,validateSecretExists,"public static Secret  (KubernetesClient kubernetes String namespace String secretName){ Secret secret=null; try { secret=kubernetes.secrets().inNamespace(namespace).withName(secretName).get(); } catch ( KubernetesClientException e) { if (e.getCode() == 404 || e.getCode() == 403) { } else { throw e; } } if (secret == null) { throw new IllegalArgumentException(""No secret named: "" + secretName + "" for namespace ""+ namespace+ "" is available on Kubernetes""+ "". For how to create secrets see: http://fabric8.io/guide/fabric8OnOpenShift.html#requirements ""); } else { return secret; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\KubernetesHelper.java,verify,@Override public boolean  (String s SSLSession sslSession){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,compareTo,@Override public int  (Space that){ int answer=this.order() - that.order(); if (answer == 0) { answer=this.name.compareTo(that.name); } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,getCreator,public String  (){ return creator; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,getOrder,public Integer  (){ return order; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,getVersion,public String  (){ return version; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,order,public int  (){ return order != null ? order.intValue() : Integer.MAX_VALUE; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,setCreator,public void  (String creator){ this.creator=creator; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,setId,public void  (String id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,setOrder,public void  (Integer order){ this.order=order; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Space.java,setVersion,public void  (String version){ this.version=version; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,PipelineConfiguration,"public  (Map<String String> configMapData){ this.data=configMapData; this.ciBranchPatterns=loadYamlListOfStrings(configMapData CI_BRANCH_PATTERNS); this.cdBranchPatterns=loadYamlListOfStrings(configMapData CD_BRANCH_PATTERNS); this.disableITestsCD=loadYamlBoolean(configMapData DISABLE_CD_ITESTS false); this.disableITestsCI=loadYamlBoolean(configMapData DISABLE_CI_ITESTS false); this.useDockerSocketFlag=loadYamlBooleanOptional(configMapData USE_DOCKER_SOCKET null); Map<Object Object> orgBranchMap=loadYamlMap(configMapData ORGANISATION_BRANCH_PATTERNS); for ( Map.Entry<Object Object> entry : orgBranchMap.entrySet()) { Object key=entry.getKey(); Object value=entry.getValue(); if (key instanceof String) { String keyText=(String)key; List<String> list=null; if (value instanceof List) { list=(List<String>)value; } else if (value != null) { String valueText=value.toString(); list=new ArrayList<>(); list.add(valueText); } if (list != null) { cdGitHostAndOrganisationToBranchPatterns.put(keyText list); } else { LOG.warn(""Could not find List for "" + ORGANISATION_BRANCH_PATTERNS + "" key ""+ key+ "" value: ""+ value); } } } Map<Object Object> jobNameMap=loadYamlMap(configMapData JOB_NAME_TO_KIND); for ( Map.Entry<Object Object> entry : jobNameMap.entrySet()) { Object key=entry.getKey(); Object value=entry.getValue(); if (key != null && value != null) { String keyText=key.toString(); String valueText=value.toString(); try { PipelineKind pipelineKind=PipelineKind.valueOf(valueText); jobNameToKindMap.put(keyText pipelineKind); } catch ( IllegalArgumentException e) { LOG.warn(""Ignoring "" + JOB_NAME_TO_KIND + "" key ""+ key+ "" with value: ""+ value+ "". Values are: ""+ Arrays.asList(PipelineKind.values())+ "". ""+ e e); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,asYaml,"private String  (Object value){ if (value != null) { try { return KubernetesHelper.toYaml(value); } catch ( IOException e) { LOG.warn(""Error trying to convert "" + value + "" to YAML: ""+ e e); } } return """"; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,createConfigMap,"public ConfigMap  (){ Map<String String> data=new HashMap<>(); data.put(JOB_NAME_TO_KIND asYaml(jobNameToKindMap)); data.put(CI_BRANCH_PATTERNS asYaml(ciBranchPatterns)); data.put(CD_BRANCH_PATTERNS asYaml(cdBranchPatterns)); data.put(ORGANISATION_BRANCH_PATTERNS asYaml(cdGitHostAndOrganisationToBranchPatterns)); return new ConfigMapBuilder().withNewMetadata().withName(FABRIC8_PIPELINES).addToLabels(""provider"" ""fabric8"").endMetadata().withData(data).build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,createDefault,"public static PipelineConfiguration  (){ PipelineConfiguration configuration=new PipelineConfiguration(); configuration.getCiBranchPatterns().add(""PR-.*""); return configuration; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getCdBranchPatterns,public List<String>  (){ return cdBranchPatterns; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getCdGitHostAndOrganisationToBranchPatterns,public Map<String List<String>>  (){ return cdGitHostAndOrganisationToBranchPatterns; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getCiBranchPatterns,public List<String>  (){ return ciBranchPatterns; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getData,public Map<String String>  (){ return data; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getGitHostOrganisationString,"public static String  (String gitUrl){ if (Strings.isNullOrBlank(gitUrl)) { return null; } String prefix=""git@""; if (gitUrl.startsWith(prefix)) { String text=gitUrl.substring(prefix.length()); int idx=text.indexOf('/'); if (idx > 0) { return text.substring(0 idx).replace(':' '/'); } } String schemeSuffix=""://""; int idx=gitUrl.indexOf(schemeSuffix); if (idx > 0) { String text=gitUrl.substring(idx + schemeSuffix.length()); idx=text.indexOf(""/""); if (idx > 0) { idx=text.indexOf(""/"" idx + 1); if (idx > 0) { return text.substring(0 idx); } } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getJobNameToKindMap,public Map<String PipelineKind>  (){ return jobNameToKindMap; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getPipeline,"public Pipeline  (JobEnvironment jobEnvironment){ String jobName=jobEnvironment.getJobName(); PipelineKind kind=jobNameToKindMap.get(jobName); if (kind != null) { return new Pipeline(kind jobName); } String branchName=jobEnvironment.getBranchName(); kind=PipelineKind.Developer; if (Strings.isNullOrBlank(branchName)) { LOG.warn(""No BranchName from the environment so cannot detect CI / PR jobs!""); } else { String gitUrl=jobEnvironment.getGitUrl(); if (Strings.isNotBlank(gitUrl)) { String hostOrganisation=getGitHostOrganisationString(gitUrl); if (Strings.isNotBlank(hostOrganisation)) { List<String> branchPatterns=cdGitHostAndOrganisationToBranchPatterns.get(hostOrganisation); if (branchPatterns != null && matchesPattern(branchName branchPatterns)) { return new Pipeline(PipelineKind.CD jobName); } } } if (matchesPattern(branchName ciBranchPatterns)) { kind=PipelineKind.CI; } else if (matchesPattern(branchName cdBranchPatterns)) { kind=PipelineKind.CD; } } return new Pipeline(kind jobName); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getPipelineConfiguration,public static PipelineConfiguration  (ConfigMap configMap){ Map<String String> data=configMap.getData(); if (data == null) { data=new HashMap<>(); } return new PipelineConfiguration(data); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getSpaceNamespace,public String  (){ return spaceNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,getUseDockerSocketFlag,public Boolean  (){ return useDockerSocketFlag; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,isDisableITestsCD,public boolean  (){ return disableITestsCD; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,isDisableITestsCI,public boolean  (){ return disableITestsCI; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,isUseDockerSocket,public boolean  (){ return useDockerSocketFlag != null && useDockerSocketFlag.booleanValue(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,loadPipelineConfiguration,public static PipelineConfiguration  (KubernetesClient kubernetesClient String namespace){ ConfigMap configMap=kubernetesClient.configMaps().inNamespace(namespace).withName(FABRIC8_PIPELINES).get(); PipelineConfiguration configuration; if (configMap != null) { configuration=getPipelineConfiguration(configMap); } else { configuration=createDefault(); } configuration.setSpaceNamespace(namespace); return configuration; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,loadYamlBoolean,"private boolean  (Map<String String> configMapData String key boolean defaultValue){ String text=configMapData.get(key); if (Strings.isNotBlank(text)) { return text.equalsIgnoreCase(""true""); } return defaultValue; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,loadYamlBooleanOptional,"private Boolean  (Map<String String> configMapData String key Boolean defaultValue){ String text=configMapData.get(key); if (Strings.isNotBlank(text)) { return text.equalsIgnoreCase(""true""); } return defaultValue; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,loadYamlListOfStrings,"private List<String>  (Map<String String> configMapData String key){ List<String> answer=new ArrayList<>(); String text=configMapData.get(key); if (Strings.isNotBlank(text)) { try { List list=KubernetesHelper.loadYaml(text List.class); for ( Object value : list) { if (value instanceof String) { String textValue=(String)value; answer.add(textValue); } } } catch ( IOException e) { LOG.warn(""Failed to read key "" + key + "" with text ""+ text+ "" due to: ""+ e e); } } return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,loadYamlMap,"private Map<Object Object>  (Map<String String> configMapData String key){ String text=configMapData.get(key); if (Strings.isNotBlank(text)) { try { return KubernetesHelper.loadYaml(text Map.class); } catch ( IOException e) { LOG.warn(""Failed to read key "" + key + "" with text ""+ text+ "" due to: ""+ e e); } } return Collections.EMPTY_MAP; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,matchesPattern,protected boolean  (String text List<String> listOfPatterns){ for ( String pattern : listOfPatterns) { if (text.matches(pattern)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,savePipelineConfiguration,public static void  (KubernetesClient kubernetesClient String namespace PipelineConfiguration configuration){ ConfigMap configMap=configuration.createConfigMap(); kubernetesClient.configMaps().inNamespace(namespace).withName(FABRIC8_PIPELINES).createOrReplace(configMap); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setCDGitOrganisation,"public PipelineConfiguration  (String gitHostAndOrganisation List<String> branchPatterns){ if (branchPatterns.isEmpty()) { throw new IllegalArgumentException(""You must specify at least one branch pattern for github host and organisation: "" + gitHostAndOrganisation); } cdGitHostAndOrganisationToBranchPatterns.put(gitHostAndOrganisation branchPatterns); return this; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setCdBranchPatterns,public void  (List<String> cdBranchPatterns){ this.cdBranchPatterns=cdBranchPatterns; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setCdGitHostAndOrganisationToBranchPatterns,public void  (Map<String List<String>> cdGitHostAndOrganisationToBranchPatterns){ this.cdGitHostAndOrganisationToBranchPatterns=cdGitHostAndOrganisationToBranchPatterns; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setCiBranchPatterns,public void  (List<String> ciBranchPatterns){ this.ciBranchPatterns=ciBranchPatterns; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setData,public void  (Map<String String> data){ this.data=data; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setDisableITestsCD,public void  (boolean disableITestsCD){ this.disableITestsCD=disableITestsCD; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setDisableITestsCI,public void  (boolean disableITestsCI){ this.disableITestsCI=disableITestsCI; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setJobNameToKindMap,public void  (Map<String PipelineKind> jobNameToKindMap){ this.jobNameToKindMap=jobNameToKindMap; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setJobNamesCD,public PipelineConfiguration  (String... names){ return setJobNamesKind(PipelineKind.CD names); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setJobNamesCI,public PipelineConfiguration  (String... names){ return setJobNamesKind(PipelineKind.CI names); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setJobNamesDeveloper,public PipelineConfiguration  (String... names){ return setJobNamesKind(PipelineKind.Developer names); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setJobNamesKind,public PipelineConfiguration  (PipelineKind kind String... names){ for ( String name : names) { jobNameToKindMap.put(name kind); } return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setSpaceNamespace,public void  (String spaceNamespace){ this.spaceNamespace=spaceNamespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,setUseDockerSocketFlag,public void  (Boolean useDockerSocket){ this.useDockerSocketFlag=useDockerSocket; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\pipelines\PipelineConfiguration.java,toString,"@Override public String  (){ return ""PipelineConfiguration{"" + ""jobNameToKindMap="" + jobNameToKindMap + ""  ciBranchPatterns=""+ ciBranchPatterns+ ""  cdBranchPatterns=""+ cdBranchPatterns+ ""  cdGitHostAndOrganisationToBranchPatterns=""+ cdGitHostAndOrganisati"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,castTo,"protected static <T>T  (Class<T> clazz Object entity){ if (clazz.isInstance(entity)) { return clazz.cast(entity); } else { if (entity != null) { LOG.warn(""Invalid class "" + entity.getClass().getName() + "" when expecting ""+ clazz.getName()+ "" for instance: ""+ entity); } return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,collectionsEqual,static <L R>boolean  (Collection<L> left Collection<R> right){ return subCollection(left right) && subCollection(right left); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,configEqual,"public static boolean  (Object entity1 Object entity2){ if (entity1 == entity2) { return true; } else if (entity1 == null || entity2 == null) { return false; } else if (entity1 instanceof Map) { return configEqualMap((Map)entity1 castTo(Map.class entity2)); } else if (entity2 instanceof Map) { return configEqualMap((Map)entity1 castTo(Map.class entity2)); } else if (entity2 instanceof ObjectMeta) { return configEqualObjectMeta((ObjectMeta)entity1 castTo(ObjectMeta.class entity2)); } else if (entity1 instanceof Collection && entity2 instanceof Collection) { return collectionsEqual((Collection)entity1 (Collection)entity2); } else { Class<?> aClass=getCommonDenominator(entity1.getClass() entity2.getClass()); if (aClass != null) { Object castEntity2=castTo(aClass entity2); if (castEntity2 == null) { return false; } else if (aClass.getPackage().getName().startsWith(""io.fabric8"")) { return configEqualKubernetesDTO(entity1 entity2 aClass); } } return Objects.equal(entity1 entity2); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,configEqualKubernetesDTO,"protected static boolean  (@NotNull Object entity1 @NotNull Object entity2 @NotNull Class<?> clazz){ BeanInfo beanInfo=null; try { beanInfo=Introspector.getBeanInfo(clazz); } catch ( IntrospectionException e) { LOG.warn(""Failed to get beanInfo for "" + clazz.getName() + "". ""+ e e); return false; } try { PropertyDescriptor[] propertyDescriptors=beanInfo.getPropertyDescriptors(); for ( PropertyDescriptor propertyDescriptor : propertyDescriptors) { String name=propertyDescriptor.getName(); if (ignoredProperties.contains(name)) { continue; } Method readMethod=propertyDescriptor.getReadMethod(); if (readMethod != null) { Object value1=invokeMethod(entity1 readMethod); Object value2=invokeMethod(entity2 readMethod); if (!configEqual(value1 value2)) { return false; } } } return true; } catch ( Exception e) { return false; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,configEqualList,protected static boolean  (List v1 List v2){ int size1=size(v1); int size2=size(v2); if (size1 != size2) { return false; } int idx=0; for ( Object value : v1) { Object value2=v2.get(idx++); if (!configEqual(value value2)) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,configEqualMap,protected static boolean  (Map entity1 Map entity2){ if (entity1 == entity2) { return true; } else if (entity1 == null || entity2 == null) { return false; } int size1=size(entity1); int size2=size(entity2); if (size1 != size2) { return false; } Set<Map.Entry> entries=entity1.entrySet(); for ( Map.Entry entry : entries) { Object key=entry.getKey(); Object value=entry.getValue(); Object value2=entity2.get(key); if (!configEqual(value value2)) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,configEqualObjectMeta,protected static boolean  (ObjectMeta entity1 ObjectMeta entity2){ if (entity1 == entity2) { return true; } else if (entity1 == null || entity2 == null) { return false; } return Objects.equal(entity1.getName() entity2.getName()) && Objects.equal(entity1.getNamespace() entity2.getNamespace()) && configEqualMap(entity1.getLabels() entity2.getLabels())&& configEqualMap(entity1.getAnnotations() entity2.getAnnotations()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,getCommonDenominator,static Class  (Class left Class right){ if (left.equals(right)) { return left; } else if (left.isAssignableFrom(right)) { return getCommonDenominator(left right.getSuperclass()); } else if (right.isAssignableFrom(left)) { return getCommonDenominator(left.getSuperclass() right); } else { return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,invokeMethod,"protected static Object  (@NotNull Object entity Method readMethod) throws InvocationTargetException  IllegalAccessException { try { return readMethod.invoke(entity); } catch ( Exception e) { LOG.warn(""Failed to invoke method "" + readMethod + "" on ""+ entity+ "". ""+ e e); throw e; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,itemExists,static <L R>boolean  (L item Collection<R> collection){ for ( R candidate : collection) { if (configEqual(item candidate)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,size,protected static int  (Collection coll){ return (coll == null) ? 0 : coll.size(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\UserConfigurationCompare.java,subCollection,static <L R>boolean  (Collection<L> left Collection<R> right){ for ( L candidate : left) { if (!itemExists(candidate right)) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,Spaces,public  (Map<String Space> environments){ this.environments=environments; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,getDefaultNamespace,protected static String  (KubernetesClient kubernetesClient String namespace){ if (Strings.isNullOrBlank(namespace)) { namespace=kubernetesClient.getNamespace(); if (Strings.isNullOrBlank(namespace)) { namespace=KubernetesHelper.defaultNamespace(); } } return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,getSpace,public Space  (String key){ return environments.get(key); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,getSpaceSet,public SortedSet<Space>  (){ return new TreeSet<>(environments.values()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,getSpaces,public Map<String Space>  (){ return environments; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,load,private static Spaces  (ConfigMap configMap){ Map<String Space> environmentMap=new HashMap<>(); if (configMap != null) { Map<String String> data=configMap.getData(); if (data != null) { Set<Map.Entry<String String>> entries=data.entrySet(); for ( Map.Entry<String String> entry : entries) { String key=entry.getKey(); String yaml=entry.getValue(); Space environment=parseSpace(key yaml); if (environment != null) { environmentMap.put(key environment); } } } } return new Spaces(environmentMap); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\spaces\Spaces.java,parseSpace,"private static Space  (String key String yaml){ try { return KubernetesHelper.loadYaml(yaml Space.class); } catch ( IOException e) { LOG.warn(""Failed to parse space YAML for "" + key + "". Reason: ""+ e+ "". YAML: ""+ yaml e); return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\main\java\io\fabric8\kubernetes\api\support\KindToClassMapping.java,getKindToClassMap,public static Map<String Class<?>>  (){ return map; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Apply.java,main,"public static void  (String... args){ if (args.length < 1) { System.out.println(""Usage jsonFileToApply""); return; } try { KubernetesClient kube=new DefaultKubernetesClient(); File file=new File(args[0]); System.out.println(""Applying file: "" + file); if (!file.exists() || !file.isFile()) { System.out.println(""File does not exist! "" + file.getAbsolutePath()); return; } Controller controller=new Controller(kube); String answer=controller.apply(file); System.out.println(""Applied!: "" + answer); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,testPodsAnnotationsNotEqual,"@Test public void  () throws Exception { Pod entity1=new PodBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").addToAnnotations(""podAnnotation1"" ""podAnnValue1"").endMetadata().withNewSpec().addNewConta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,testPodsContainerEnvEqual,"@Test public void  () throws Exception { Pod entity1=new PodBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").addToAnnotations(""podAnnotation1"" ""podAnnValue1"").endMetadata().withNewSpec().addNewConta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,testPodsEqual,"@Test public void  () throws Exception { Pod entity1=new PodBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").addToAnnotations(""podAnnotation1"" ""podAnnValue1"").endMetadata().withNewSpec().addNewConta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,testPodsEqualWithDifferentStatus,"@Test public void  () throws Exception { Pod entity1=new PodBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").addToAnnotations(""podAnnotation1"" ""podAnnValue1"").endMetadata().withNewSpec().addNewConta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,testPodsImageEqual,"@Test public void  () throws Exception { Pod entity1=new PodBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").addToAnnotations(""podAnnotation1"" ""podAnnValue1"").endMetadata().withNewSpec().addNewConta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigComparePodTest.java,testPodsLabelsNotEqual,"@Test public void  () throws Exception { Pod entity1=new PodBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").addToAnnotations(""podAnnotation1"" ""podAnnValue1"").endMetadata().withNewSpec().addNewConta"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,assertCompareConfig,"public static void  (Object entity1 Object entity2 boolean expected){ boolean actual=UserConfigurationCompare.configEqual(entity1 entity2); assertEquals(""Configuration compare for "" + entity1 + "" and ""+ entity2 expected actual); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,testServicesContainerPortNotEqual,"@Test public void  () throws Exception { Service entity1=new ServiceBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""value1"").addToSelector(""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,testServicesEqual,"@Test public void  () throws Exception { Service entity1=new ServiceBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""value1"").addToSelector(""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,testServicesEqualWithStatusDifferences,"@Test public void  () throws Exception { Service entity1=new ServiceBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").withResourceVersion(""1"").endMetadata().withNewSpec().addToSelector(""label1"" ""valu"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,testServicesLabelsNotEqual,"@Test public void  () throws Exception { Service entity1=new ServiceBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""value1"").addToSelector(""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,testServicesPortNotEqual,"@Test public void  () throws Exception { Service entity1=new ServiceBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""value1"").addToSelector(""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareServiceTest.java,testServicesSelectorNotEqual,"@Test public void  () throws Exception { Service entity1=new ServiceBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""value1"").addToSelector(""label"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersAddVolumeNotEqual,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersAnnotationsNotEqual,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersContainerEnvEqual,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersEqual,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersEqualWithDifferentStatus,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersImageEqual,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersLabelsNotEqual,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersReplicasNotEqual,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigCompareReplicationControllerTest.java,testReplicationControllersSelectorNotEqual,"@Test public void  () throws Exception { ReplicationController entity1=new ReplicationControllerBuilder().withNewMetadata().withName(""foo"").addToLabels(""label1"" ""value1"").addToLabels(""label2"" ""value2"").endMetadata().withNewSpec().addToSelector(""label1"" ""v"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigFileParseTest.java,setKubernetesConfigFileProperty,"public static void  (){ String basedir=System.getProperty(""basedir"" "".""); String configFile=basedir + ""/src/test/resources/config.yml""; System.setProperty(Configs.KUBERNETES_CONFIG_FILE_PROPERTY configFile); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ConfigFileParseTest.java,testParseConfig,@Test public void  () throws Exception { setKubernetesConfigFileProperty(); File file=getKubernetesConfigFile(); assertThat(file).isFile().exists(); Config config=Configs.parseConfigs(); assertThat(config).isNotNull(); String currentContextName=config.get
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\CreateBuildConfig.java,main,"public static void  (String... args){ if (args.length < 1) { System.out.println(""Usage nameOfBuildConfig""); return; } try { KubernetesClient kube=new DefaultKubernetesClient(); String name=args[0]; String namespace=kube.getNamespace(); if (Strings.isNullOrBlank(namespace)) { namespace=KubernetesHelper.defaultNamespace(); } if (Strings.isNullOrBlank(namespace)) { namespace=""default""; } System.out.println(""Creating a BuildConfig for name: "" + name + "" in namespace: ""+ namespace); BuildConfig buildConfig=new BuildConfigBuilder().withNewMetadata().withName(name).withNamespace(namespace).endMetadata().withNewSpec().withNewSource().withType(""Git"").withNewGit().withUri(""http://gogs.vagrant.f8/gogsadmin/"" + name + "".git"").endGit().endSource().endSpec().build(); System.out.println(""Creating BuildConfig: "" + buildConfig); Controller controller=new Controller(kube); if (controller.getNamespace() == null) { controller.setNamespace(namespace); } controller.applyBuildConfig(buildConfig ""Generated!""); System.out.println(""Applied!: "" + name); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\DeleteBuildConfig.java,main,"public static void  (String... args){ if (args.length < 1) { System.out.println(""Usage nameOfBuildConfig""); return; } try { String name=args[0]; System.out.println(""Deleting BuildConfig: "" + name); KubernetesClient kube=new DefaultKubernetesClient(); String namespace=kube.getNamespace(); System.out.println(""Using namespace: "" + namespace); Controller controller=new Controller(kube); OpenShiftClient openshift=controller.getOpenShiftClientOrJenkinshift(); if (openshift == null) { System.err.println(""Cannot connect to OpenShift or Jenkinshift!""); return; } BuildConfig buildConfig=openshift.buildConfigs().withName(name).get(); if (buildConfig != null) { System.out.println(""Managed to load BuildConfig with resourceVersion "" + KubernetesHelper.getResourceVersion(buildConfig)); } else { System.err.println(""Could not find BuildConfig called: "" + name); return; } Boolean result=openshift.buildConfigs().withName(name).delete(); System.out.println(""Deleted BuildConfig with name "" + name + "" result: ""+ result); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\environments\ListEnvironments.java,main,"public static void  (String[] args){ KubernetesClient kubernetesClient=new DefaultKubernetesClient(); Environments environments; if (args.length > 0) { String namespace=args[0]; System.out.println(""Listing environments for namespace: "" + namespace); environments=Environments.load(namespace); } else { environments=Environments.load(); } String environmentKey=""testing""; if (args.length > 1) { environmentKey=args[1]; } System.out.println(""Space namespace: "" + environments.getNamespace()); SortedSet<Environment> set=environments.getEnvironmentSet(); for ( Environment environment : set) { String onCluster=""""; String clusterAPiServer=environment.getClusterAPiServer(); if (Strings.isNotBlank(clusterAPiServer)) { onCluster+="" on API server: "" + clusterAPiServer; } System.out.println(""Environment "" + environment.getName() + "" maps to namespace: ""+ environment.getNamespace()+ onCluster); } System.out.println(""Namespace for environment key: "" + environmentKey + "" is ""+ Environments.namespaceForEnvironment(environmentKey)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\IsOpenShift.java,main,"public static void  (String... args){ KubernetesClient client=new DefaultKubernetesClient(); try { boolean openShift=KubernetesHelper.isOpenShift(client); System.out.println(""OpenShift: "" + openShift); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\GetServiceURL.java,main,"public static void  (String... args){ if (args.length < 1) { System.out.println(""Usage nameOfService""); return; } try { String name=args[0]; KubernetesClient kube=new DefaultKubernetesClient(); String namespace=kube.getNamespace(); if (Strings.isNullOrBlank(namespace)) { namespace=""default""; } String url=KubernetesHelper.getServiceURL(kube name namespace ""http"" true); System.out.println(""Service "" + name + "" has external URL: ""+ url); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,listEndpoints,"protected static void  (KubernetesClient kube){ System.out.println(""\n\nLooking up endpoints""); System.out.println(""=========================================================================""); EndpointsList endpoints=kube.endpoints().list(); List<Endpoints> endpointItems=endpoints.getItems(); for ( Endpoints endpoint : endpointItems) { System.out.println(""Endpoint "" + KubernetesHelper.getName(endpoint) + "" labels: ""+ endpoint.getMetadata().getLabels()); } System.out.println(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,listPods,"protected static void  (KubernetesClient kube){ System.out.println(""\n\nLooking up pods""); System.out.println(""=========================================================================""); PodList pods=kube.pods().list(); List<Pod> items=pods.getItems(); for ( Pod item : items) { System.out.println(""Pod "" + KubernetesHelper.getName(item) + "" with ip: ""+ item.getStatus().getPodIP()+ "" created: ""+ item.getMetadata().getCreationTimestamp()); PodSpec spec=item.getSpec(); if (spec != null) { List<Container> containers=spec.getContainers(); if (containers != null) { for ( Container container : containers) { System.out.println(""Container "" + container.getImage() + "" ""+ container.getCommand()+ "" ports: ""+ container.getPorts()); } } } Map<String ContainerStatus> currentContainers=KubernetesHelper.getCurrentContainers(item); System.out.println(""Has "" + currentContainers.size() + "" container(s)""); Set<Map.Entry<String ContainerStatus>> entries=currentContainers.entrySet(); for ( Map.Entry<String ContainerStatus> entry : entries) { String id=entry.getKey(); ContainerStatus info=entry.getValue(); System.out.println(""Current container: "" + id + "" info: ""+ info); } } System.out.println(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,listReplicationControllers,"protected static void  (KubernetesClient kube){ System.out.println(""\n\nLooking up replicationControllers""); System.out.println(""=========================================================================""); ReplicationControllerList replicationControllers=kube.replicationControllers().list(); List<ReplicationController> items=replicationControllers.getItems(); for ( ReplicationController item : items) { ReplicationControllerSpec replicationControllerSpec=item.getSpec(); if (replicationControllerSpec != null) { System.out.println(""ReplicationController "" + KubernetesHelper.getName(item) + "" labels: ""+ item.getMetadata().getLabels()+ "" replicas: ""+ replicationControllerSpec.getReplicas()+ "" replicatorSelector: ""+ replicationControllerSpec.getSelector()+ "" podTemplate: ""+ replicationControllerSpec.getTemplate()); } else { System.out.println(""ReplicationController "" + KubernetesHelper.getName(item) + "" labels: ""+ item.getMetadata().getLabels()+ "" no replicationControllerSpec""); } } System.out.println(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,listServiceAccounts,"protected static void  (KubernetesClient kube){ System.out.println(""\n\nLooking up service accounts""); System.out.println(""=========================================================================""); ServiceAccountList serviceAccounts=kube.serviceAccounts().list(); List<ServiceAccount> serviceAccountItems=serviceAccounts.getItems(); for ( ServiceAccount serviceAccount : serviceAccountItems) { System.out.println(""Service Account "" + KubernetesHelper.getName(serviceAccount) + "" labels: ""+ serviceAccount.getMetadata().getLabels()); } System.out.println(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,listServices,"protected static void  (KubernetesClient kube){ System.out.println(""\n\nLooking up services""); System.out.println(""=========================================================================""); ServiceList services=kube.services().list(); List<Service> serviceItems=services.getItems(); for ( Service service : serviceItems) { System.out.println(""Service "" + KubernetesHelper.getName(service) + "" labels: ""+ service.getMetadata().getLabels()+ "" selector: ""+ getSelector(service)+ "" ports: ""+ getPorts(service)); } System.out.println(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\Example.java,main,"public static void  (String... args){ System.out.println(""\n\nfabric8 Kubernetes-api example""); KubernetesClient kube=new DefaultKubernetesClient(); System.out.println(""=========================================================================""); try { listPods(kube); listReplicationControllers(kube); listServices(kube); listServiceAccounts(kube); listEndpoints(kube); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } finally { kube.close(); } System.out.println(""=========================================================================""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\KubernetesHelperTest.java,testRemoveEmptyPods,"@Test public void  () throws Exception { Pod pod1=new Pod(); pod1.setMetadata(new ObjectMeta()); pod1.getMetadata().setName(""test1""); Pod pod2=new Pod(); pod2.setMetadata(new ObjectMeta()); PodList podSchema=new PodList(); podSchema.getItems().add(pod1); "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\KubernetesHelperTest.java,testfilterMatchesIdOrLabels,"@Test public void  () throws Exception { String text=""container=java name=foo food=cheese""; String id=""foo""; HashMap<String String> map=new HashMap<>(); map.put(""container"" ""java""); map.put(""name"" ""foo""); map.put(""food"" ""cheese""); assertTrue(text + "" shou"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\KubernetesHelperTest.java,testfilterMatchesIdOrLabelsNoLabels,"@Test public void  () throws Exception { String text=""container=java name=foo food=cheese""; String id=""foo""; HashMap<String String> map=null; assertFalse(text + "" should not = "" + map KubernetesHelper.filterMatchesIdOrLabels(text id map)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseDateTimeTest.java,testParseDateTime,"@Test public void  () throws Exception { Date date=KubernetesHelper.parseDate(""2015-03-26T17:11:55Z""); assertThat(date).isNotNull(); System.out.println(""Parsed date: "" + date); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,assertNotEmpty,"public static void  (String name Collection collection){ assertNotNull(name + "" is null!"" collection); assertFalse(name + "" should not be empty!"" collection.isEmpty()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,assertParseExampleFile,"public static <T>T  (String fileName Class<T> clazz) throws Exception { File exampleFile=new File(getKubernetesExamplesDir() fileName); assertFileExists(exampleFile); T answer=OBJECT_MAPPER.readerFor(clazz).readValue(exampleFile); assertNotNull(""Null returned while unmarshalling "" + exampleFile answer); LOG.info(""Parsed: "" + fileName + "" as: ""+ answer); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,getKubernetesExamplesDir,"public static File  (){ File answer=new File(getKubernetesSourceDir() ""api/examples""); assertDirectoryExists(answer); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,getKubernetesSourceDir,"public static File  (){ String basedir=System.getProperty(""basedir"" "".""); String kubeSourceDir=basedir + ""/src/main/kubernetes""; String path=System.getProperty(SYSTEM_PROPERTY_KUBE_DIR kubeSourceDir); File kubeDir=new File(path); assertTrue(""Kube directory "" + kubeDir + "" does not exist! Please supply the correct value in the ""+ SYSTEM_PROPERTY_KUBE_DIR+ "" system property value"" kubeDir.exists()); return kubeDir; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,testParsePod,"@Test public void  () throws Exception { assertParseExampleFile(""pod.json"" Pod.class); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,testParsePodList,"@Test public void  () throws Exception { KubernetesList podList=assertParseExampleFile(""pod-list.json"" KubernetesList.class); List<HasMetadata> items=podList.getItems(); assertNotEmpty(""items"" items); Pod pod=(Pod)items.get(0); assertNotNull(""pod1"" pod); "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,testParsePodListEmptyResults,"@Test public void  () throws Exception { PodList podList=assertParseExampleFile(""pod-list-empty-results.json"" PodList.class); List<Pod> items=podList.getItems(); assertNotEmpty(""items"" items); Pod pod=items.get(0); assertNotNull(""pod1"" pod); assertEquals("
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseExamplesTest.java,testParseService,"@Test public void  () throws Exception { Service service=assertParseExampleFile(""service.json"" Service.class); assertEquals(""Service"" service.getKind()); Integer expectedPort=9090; assertEquals(expectedPort getContainerPorts(service).iterator().next()); }"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseServiceTest.java,assertParseTestFile,"public <T>T  (String relativePath Class<T> clazz) throws IOException { String baseDirPath=System.getProperty(""basedir"" "".""); File baseDir=new File(baseDirPath); File json=new File(baseDirPath ""target/test-classes/"" + relativePath); assertFileExists(json); Object answer=KubernetesHelper.loadJson(json); assertNotNull(""Null returned while unmarshalling "" + json answer); LOG.info(""Parsed: "" + json + "" as: ""+ answer); assertTrue(""Result "" + answer + "" is not an instance of ""+ clazz.getName()+ "" but was ""+ (answer == null ? ""null"" : answer.getClass().getName()) clazz.isInstance(answer)); return clazz.cast(answer); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseServiceTest.java,testParseFabric8MQService,"@Test public void  () throws Exception { Service service=assertParseTestFile(""fmq-service.json"" Service.class); Set<Integer> ports=getPorts(service); assertNotNull(""ports"" ports); Set<Integer> containerPorts=getContainerPorts(service); assertTrue(""contain"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\GitHostOrganisationTest.java,assertParseGitHostOrganisation,"private void  (String uri String expectedHostOrganisation){ String actual=PipelineConfiguration.getGitHostOrganisationString(uri); assertEquals(""Git Host and Organisation for "" + uri expectedHostOrganisation actual); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\GitHostOrganisationTest.java,testParseGitHostOrganisation,"@Test public void  () throws Exception { assertParseGitHostOrganisation(""https://github.com/fabric8io/foo.git"" ""github.com/fabric8io""); assertParseGitHostOrganisation(""git@github.com:bar/foo.git"" ""github.com/bar""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\JobEnvironmentTest.java,testLoadJobEnvironment,"@Test public void  () throws Exception { Map<String String> env=new HashMap<>(); env.put(""BRANCH_NAME"" ""master""); env.put(""BUILD_ID"" ""2""); env.put(""JOB_NAME"" ""rawlingsj/spring-boot-webmvc/master""); env.put(""GIT_URL"" ""https://github.com/jstrachan/demo230.g"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,assertParseExampleFile,"public static <T>T  (String fileName Class<T> clazz) throws Exception { File exampleFile=new File(getKubernetesExamplesDir() fileName); assertFileExists(exampleFile); Object answer=OBJECT_MAPPER.readerFor(clazz).readValue(exampleFile); assertNotNull(""Null returned while unmarshalling "" + exampleFile answer); LOG.info(""Parsed: "" + fileName + "" as: ""+ answer); assertTrue(""Is not an instance of "" + clazz.getSimpleName() + "" was: ""+ answer.getClass().getName() clazz.isInstance(answer)); return clazz.cast(answer); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,getKubernetesExamplesDir,"public static File  (){ File answer=new File(getKubernetesSourceDir() ""api/examples""); assertDirectoryExists(answer); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,getKubernetesSourceDir,"public static File  (){ String basedir=System.getProperty(""basedir"" "".""); String kubeSourceDir=basedir + ""/src/main/kubernetes""; String path=System.getProperty(SYSTEM_PROPERTY_KUBE_DIR kubeSourceDir); File kubeDir=new File(path); assertTrue(""Kube directory "" + kubeDir + "" does not exist! Please supply the correct value in the ""+ SYSTEM_PROPERTY_KUBE_DIR+ "" system property value"" kubeDir.exists()); return kubeDir; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,testParseList,"@Test public void  () throws Exception { KubernetesList list=assertParseExampleFile(""list.json"" KubernetesList.class); List<HasMetadata> objects=list.getItems(); assertNotEmpty(""objects"" objects); assertEquals(""size"" 2 objects.size()); Object service=obje"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,testParsePod,"@Test public void  () throws Exception { assertParseExampleFile(""pod.json"" Pod.class); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,testParsePodList,"@Test public void  () throws Exception { KubernetesList podList=assertParseExampleFile(""pod-list.json"" KubernetesList.class); List<HasMetadata> items=podList.getItems(); assertNotEmpty(""items"" items); Pod pod=(Pod)items.get(0); assertNotNull(""pod1"" pod); "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,testParsePodListEmptyResults,"@Test public void  () throws Exception { PodList podList=assertParseExampleFile(""pod-list-empty-results.json"" PodList.class); List<Pod> items=podList.getItems(); assertNotEmpty(""items"" items); Pod pod=items.get(0); assertNotNull(""pod1"" pod); assertEquals("
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,testParseService,"@Test public void  () throws Exception { Service service=assertParseExampleFile(""service.json"" Service.class); assertEquals(""Service"" service.getKind()); Integer expectedPort=9090; assertEquals(expectedPort getContainerPorts(service).iterator().next()); }"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ParseTest.java,testParseTemplate,"@Test public void  () throws Exception { Template template=assertParseExampleFile(""template.json"" Template.class); List<HasMetadata> objects=template.getObjects(); assertNotEmpty(""objects"" objects); assertTrue(""size is "" + objects.size() objects.size() =="
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,getKubernetesClient,"public KubernetesClient  (){ if (kubernetesClient == null) { kubernetesClient=server.getKubernetesClient(); } assertNotNull(""No KubernetesClient was created by the mock!"" kubernetesClient); return kubernetesClient; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,setKubernetesClient,public void  (KubernetesClient kubernetesClient){ this.kubernetesClient=kubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,testPipelinesFromConfigMap,"@Test public void  () throws Exception { String namespace=""myproject""; final ConfigMap configMap=loadTestConfigMap(); server.expect().withPath(""/api/v1/namespaces/"" + namespace + ""/configmaps/""+ FABRIC8_PIPELINES).andReturn(200 configMap).once(); Pipeline"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,testPipelinesFromConfigMapWithCaching,"@Test public void  () throws Exception { String namespace=""myproject""; final ConfigMap configMap=loadTestConfigMap(); server.expect().withPath(""/api/v1/namespaces/"" + namespace + ""/configmaps/""+ FABRIC8_PIPELINES).andReturn(200 configMap).once(); Map<Stri"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\OpenShiftPipelineTest.java,testPipelinesWithNoConfigMap,"@Test public void  () throws Exception { String namespace=""myproject""; PipelineConfiguration configuration=PipelineConfiguration.loadPipelineConfiguration(getKubernetesClient() namespace); assertJobName(configuration ""whatnot"" ""master"" PipelineKind.Develo"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelineConfigurationParseTest.java,loadTestConfigMap,"public static ConfigMap  () throws IOException { String path=FABRIC8_PIPELINES + "".yml""; URL resource=PipelineConfigurationParseTest.class.getClassLoader().getResource(path); assertNotNull(""Could not load resource: "" + path resource); try (InputStream in=resource.openStream()){ assertNotNull(""Could not open stream for resource: "" + resource in); ConfigMap configMap=KubernetesHelper.loadYaml(in ConfigMap.class); assertNotNull(""Should have loaded "" + resource configMap); return configMap; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelineConfigurationParseTest.java,testLoadMutateAndLoadPipelineConfiguration,"@Test public void  () throws Exception { ConfigMap configMap=loadTestConfigMap(); PipelineConfiguration pipelineConfiguration=PipelineConfiguration.getPipelineConfiguration(configMap); pipelineConfiguration.setCdBranchPatterns(Arrays.asList(""cd-1"" ""cd-2"")"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelineConfigurationParseTest.java,testParsePipelineConfiguration,"@Test public void  () throws Exception { ConfigMap configMap=loadTestConfigMap(); PipelineConfiguration pipelineConfiguration=PipelineConfiguration.getPipelineConfiguration(configMap); System.out.println(""Loaded: "" + pipelineConfiguration); assertThat(pip"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\ViewPipelineConfiguration.java,main,"public static void  (String[] args){ try { PipelineConfiguration pipeline; if (args.length > 0) { pipeline=PipelineConfiguration.loadPipelineConfiguration(args[0]); } else { pipeline=PipelineConfiguration.loadPipelineConfiguration(); } System.out.println(""Main namespace: "" + pipeline.getSpaceNamespace()); System.out.println(""Job Name to kind map: "" + pipeline.getJobNameToKindMap()); System.out.println(""CI branch patterns: "" + pipeline.getCiBranchPatterns()); System.out.println(""CD branch patterns: "" + pipeline.getCdBranchPatterns()); System.out.println(""CD git organisation branch patterns: "" + pipeline.getCdGitHostAndOrganisationToBranchPatterns()); System.out.println(""Disable ITests for CD: "" + pipeline.isDisableITestsCD()); System.out.println(""Disable ITests for CI: "" + pipeline.isDisableITestsCI()); } catch ( Exception e) { System.out.println(""Failed with: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,assertJobName,public static void  (PipelineConfiguration configuration String jobName String branchName String gitUrl PipelineKind expectedKind){ JobEnvironment jobEnvironment=createJobEnvironment(jobName branchName gitUrl); assertJobName(configuration jobEnvironment jobName expectedKind); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,createJobEnvironment,public static JobEnvironment  (String jobName String branchName){ JobEnvironment answer=new JobEnvironment(); answer.setJobName(jobName); answer.setBranchName(branchName); return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,testEnableCDBuildsForOrganisation,"@Test public void  () throws Exception { PipelineConfiguration configuration=PipelineConfiguration.createDefault().setCDGitOrganisation(""github.com/fabric8io"" ""master"").setJobNamesDeveloper(""whatnot""); assertJobName(configuration ""foo"" ""master"" ""git@githu"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,testEnableCDOnNamedBuilds,"@Test public void  () throws Exception { PipelineConfiguration configuration=PipelineConfiguration.createDefault().setJobNamesCD(""foo"" ""bar""); assertJobName(configuration ""foo"" ""master"" PipelineKind.CD); assertJobName(configuration ""bar"" ""master"" Pipeline"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\PipelinesTest.java,testNotCDBuildsByDefault,"@Test public void  () throws Exception { PipelineConfiguration configuration=PipelineConfiguration.createDefault(); assertJobName(configuration ""whatnot"" ""master"" PipelineKind.Developer); assertJobName(configuration ""whatnot"" null PipelineKind.Developer);"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ProcessTemplateLocallyTest.java,testProcessTemplateLocally,"@Test public void  () throws Exception { Template template=assertParseExampleFile(""template.json"" Template.class); List<HasMetadata> objects=template.getObjects(); assertNotEmpty(""objects"" objects); KubernetesList list=Templates.processTemplatesLocally(te"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\PodIdToReplicationControllerIDExample.java,main,"public static void  (String[] args){ if (args.length < 3) { System.out.println(""Arguments: kuberneteMasterUrl namespace podID""); return; } String kuberneteMasterUrl=args[0]; String namespace=args[1]; String podID=args[2]; System.out.println(""Looking up ReplicationController for pod ID: "" + podID); KubernetesClient client=new DefaultKubernetesClient(new ConfigBuilder().withMasterUrl(kuberneteMasterUrl).build()); Pod pod=(Pod)client.pods().inNamespace(namespace).withName(podID); pod.getMetadata().getLabels(); List<ReplicationController> replicationControllers=client.replicationControllers().inNamespace(namespace).withLabels(pod.getMetadata().getLabels()).list().getItems(); if (replicationControllers.size() == 1) { ReplicationController replicationController=replicationControllers.get(0); String id=KubernetesHelper.getName(replicationController); System.out.println(""Found replication controller: "" + id); } else { System.out.println(""Could not find replication controller!""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\pipelines\ViewPipeline.java,main,"public static void  (String[] args){ if (args.length == 0) { System.err.println(""Usage: ViewPipeline jobName [branchName] [gitUrl]""); return; } String jobName=args[0]; String branchName=""master""; String gitUrl=null; if (args.length > 1) { branchName=args[1]; } if (args.length > 2) { gitUrl=args[2]; } try { JobEnvironment environment=new JobEnvironment(); environment.setJobName(jobName); environment.setBranchName(branchName); environment.setGitUrl(gitUrl); KubernetesClient kubernetesClient=new DefaultKubernetesClient(); String namespace=kubernetesClient.getNamespace(); if (Strings.isNullOrBlank(namespace)) { namespace=KubernetesHelper.defaultNamespace(); } Pipeline pipeline=Pipelines.getPipeline(kubernetesClient namespace environment); System.out.println(""Found pipeline for job: "" + pipeline.getJobName() + "" of kind: ""+ pipeline.getKind()); } catch ( IntrospectionException e) { System.out.println(""Failed with: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ShowConfig.java,main,"public static void  (String... args){ try { System.out.println(""Current username: "" + currentUserName()); Config config=Configs.parseConfigs(); if (config == null) { System.out.println(""No Config loaded!""); } else { Context context=Configs.getCurrentContext(config); if (context != null) { System.out.println(""context: "" + config.getCurrentContext()); System.out.println(""cluster: "" + context.getCluster()); System.out.println(""user: "" + context.getUser()); System.out.println(""namespace: "" + context.getNamespace()); } else { System.out.println(""No current context!""); } } } catch ( Exception e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\spaces\ListSpaces.java,main,"public static void  (String[] args){ String namespace=null; if (args.length > 0) { namespace=args[0]; } KubernetesClient kubernetesClient=new DefaultKubernetesClient(); Spaces spaces=Spaces.load(kubernetesClient namespace); SortedSet<Space> set=spaces.getSpaceSet(); for ( Space space : set) { System.out.println(""Space "" + space.getName() + "" = ""+ space); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\spaces\SpacesTest.java,getKubernetesClient,"public KubernetesClient  (){ if (kubernetesClient == null) { kubernetesClient=server.getKubernetesClient(); } assertNotNull(""No KubernetesClient was created by the mock!"" kubernetesClient); return kubernetesClient; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\spaces\SpacesTest.java,setKubernetesClient,public void  (KubernetesClient kubernetesClient){ this.kubernetesClient=kubernetesClient; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\spaces\SpacesTest.java,testLoadSpaces,"@Test public void  (){ String namespace=""myproject""; String resourceName=""fabric8-spaces.yml""; KubernetesClient client=getKubernetesClient(); URL resource=getClass().getClassLoader().getResource(resourceName); assertNotNull(""Failed to load resource from c"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\SafeKubernetesNameTest.java,assertSafeKubernetesName,"public static void  (String text String expected boolean allowDots){ String actual=KubernetesNames.convertToKubernetesName(text allowDots); assertEquals(""Safe name for `"" + text + ""`"" expected actual); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\SafeKubernetesNameTest.java,testSafeNamesStartingWithDigits,"@Test public void  () throws Exception { assertSafeKubernetesName(""1bar"" ""n1bar"" false); assertSafeKubernetesName(""9-Foo"" ""n9-foo"" false); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\SafeKubernetesNameTest.java,testSafeNamesWithDots,"@Test public void  () throws Exception { assertSafeKubernetesName(""Foo.Bar"" ""foo.bar"" true); assertSafeKubernetesName(""Foo-Bar"" ""foo-bar"" true); assertSafeKubernetesName(""-Foo-Bar"" ""foo-bar"" true); assertSafeKubernetesName("".-Foo-Bar"" ""foo-bar"" true); ass"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\SafeKubernetesNameTest.java,testSafeNamesWithoutDots,"@Test public void  () throws Exception { assertSafeKubernetesName(""Foo.Bar"" ""foo-bar"" false); assertSafeKubernetesName(""Foo-Bar"" ""foo-bar"" false); assertSafeKubernetesName(""-Foo-Bar"" ""foo-bar"" false); assertSafeKubernetesName("".-Foo-Bar"" ""foo-bar"" false);"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\TemplatesTest.java,testCombineResourcesIntoTemplate,"@Test public void  () throws Exception { Service templateService=new ServiceBuilder().withNewMetadata().withName(""templateService"").endMetadata().build(); KubernetesList list=new KubernetesListBuilder().addNewServiceItem().withNewMetadata().withName(""serv"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewEndpoints.java,display,"protected static void  (Endpoints endpoints){ if (endpoints != null) { String name=endpoints.getMetadata().getName(); String namespace=endpoints.getMetadata().getNamespace(); List<String> urls=new ArrayList<>(); List<EndpointSubset> endpointsSubsets=endpoints.getSubsets(); for ( EndpointSubset endpointSubset : endpointsSubsets) { for ( EndpointAddress endpointAddress : endpointSubset.getAddresses()) { for ( EndpointPort endpointPort : endpointSubset.getPorts()) { urls.add(endpointAddress.getIp() + "":"" + endpointPort.getPort()); } } } System.out.println(""Service: "" + name + "" namespace: ""+ namespace+ "" urls: ""+ urls); } else { System.out.println(""null endpoints""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewEndpoints.java,listEndpoints,protected static void  (KubernetesClient client String service String namespace) throws Exception { if (service != null) { Endpoints endpoints=client.endpoints().inNamespace(namespace).withName(service).get(); display(endpoints); } else { EndpointsList endpointsList=client.endpoints().list(); if (endpointsList != null) { List<Endpoints> items=notNullList(endpointsList.getItems()); for ( Endpoints item : items) { display(item); } } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewEndpoints.java,main,"public static void  (String... args){ System.out.println(""Usage: [serviceId] [namespace]""); KubernetesClient client=new DefaultKubernetesClient(); try { String service=null; String namespace=null; if (args.length > 0) { service=args[0]; } if (args.length > 1) { namespace=args[1]; } listEndpoints(client service namespace); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\UserConfigurationCompareTest.java,testCommonDenominator,@Test public void  (){ assertEquals(null UserConfigurationCompare.getCommonDenominator(ReplicationController.class Pod.class)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\TriggerBuild.java,main,"public static void  (String... args){ if (args.length < 1) { System.out.println(""Usage: buildConfigName namespace secret type""); return; } String name=args[0]; String namespace=""default""; if (args.length > 1) { namespace=args[1]; } OpenShiftClient client=new DefaultOpenShiftClient(); try { client.buildConfigs().inNamespace(namespace).withName(name).trigger(new WebHookTrigger(true null)); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuildsExample.java,eventReceived,"@Override public void  (Action action Build build){ System.out.println(action + "": "" + build); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewServiceIPs.java,main,"public static void  (String... args){ System.out.println(""Usage: [serviceName]""); try { String service=null; if (args.length > 0) { service=args[0]; } Set<String> addresses=KubernetesHelper.lookupServiceInDns(service); if (addresses != null) { System.out.println(""addresses: "" + addresses); } else { System.out.println(""null addresses""); } } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuildsExample.java,main,"public static void  (String... args) throws Exception { OpenShiftClient client=new DefaultOpenShiftClient(); client.builds().watch(new Watcher<Build>(){ @Override public void eventReceived( Action action  Build build){ System.out.println(action + "": "" + build); } @Override public void onClose( KubernetesClientException e){ System.out.println(""Closed: "" + e); } } ); client.close(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuildsExample.java,onClose,"@Override public void  (KubernetesClientException e){ System.out.println(""Closed: "" + e); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuilds.java,main,"public static void  (String... args){ String namespace=null; if (args.length > 0) { namespace=args[0]; } String consoleLink=Links.getFabric8ConsoleLink(); OpenShiftClient client=new DefaultOpenShiftClient(); BuildListener buildListener=new BuildListener(){ @Override public void onBuildFinished( BuildFinishedEvent event){ System.out.println(""Build: "" + event.getUid() + "" for config: ""+ event.getConfigName()+ "" finished. Status: ""+ event.getStatus()+ "" link: ""+ event.getBuildLink()); } } ; BuildWatcher watcher=new BuildWatcher(client buildListener namespace consoleLink); long pollTime=3000; watcher.schedule(pollTime); watcher.join(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchBuilds.java,onBuildFinished,"@Override public void  (BuildFinishedEvent event){ System.out.println(""Build: "" + event.getUid() + "" for config: ""+ event.getConfigName()+ "" finished. Status: ""+ event.getStatus()+ "" link: ""+ event.getBuildLink()); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchServicesExample.java,eventReceived,"@Override public void  (Action action Service service){ System.out.println(action + "": "" + service); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchServicesExample.java,main,"public static void  (String... args) throws Exception { KubernetesClient client=new DefaultKubernetesClient(); client.services().watch(new io.fabric8.kubernetes.client.Watcher<Service>(){ @Override public void eventReceived( Action action  Service service){ System.out.println(action + "": "" + service); } @Override public void onClose( KubernetesClientException e){ System.out.println(""Closed: "" + e); } } ); client.close(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchServicesExample.java,onClose,"@Override public void  (KubernetesClientException e){ System.out.println(""Closed: "" + e); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchPodsExample.java,eventReceived,"@Override public void  (Action action Pod pod){ System.out.println(action + "": "" + pod); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\YamlSerialiseTest.java,testSerialiseYaml,"@Test public void  () throws Exception { Deployment deployment=new DeploymentBuilder().withNewMetadata().withName(""foo"").endMetadata().withNewSpec().withReplicas(1).withNewTemplate().withNewSpec().addNewContainer().withImage(""cheese"").endContainer().endSp"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchPodsExample.java,main,"public static void  (String... args) throws Exception { KubernetesClient client=new DefaultKubernetesClient(); client.pods().watch(new io.fabric8.kubernetes.client.Watcher<Pod>(){ @Override public void eventReceived( Action action  Pod pod){ System.out.println(action + "": "" + pod); } @Override public void onClose( KubernetesClientException e){ System.out.println(""Closed: "" + e); } } ); client.close(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\WatchPodsExample.java,onClose,"@Override public void  (KubernetesClientException e){ System.out.println(""Closed: "" + e); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewNodes.java,display,"protected static void  (Node node){ if (node != null) { String id=node.getMetadata().getName(); System.out.println(""Node: "" + id + "" resources: ""+ node.getStatus().getCapacity()); } else { System.out.println(""null node""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewNodes.java,listMinions,protected static void  (KubernetesClient client) throws Exception { NodeList nodeList=client.nodes().list(); if (nodeList != null) { List<Node> items=notNullList(nodeList.getItems()); for ( Node item : items) { display(item); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-api\src\test\java\io\fabric8\kubernetes\api\ViewNodes.java,main,"public static void  (String... args){ KubernetesClient client=new DefaultKubernetesClient(); try { listMinions(client); } catch ( Exception e) { System.out.println(""FAILED: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\AbstractPodSelectionAssert.java,getDefaultNotReadyTimeoutMs,public static long  (){ return parseLongValue(Systems.getEnvVarOrSystemProperty(PROPERTY_ASSERT_NOT_READY_TIMEOUT_MILLIS) DEFAULT_NOT_READY_TIMEOUT_MS); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\AbstractPodSelectionAssert.java,getDefaultReadyPeriodMs,public static long  (){ return parseLongValue(Systems.getEnvVarOrSystemProperty(PROPERTY_ASSERT_READY_PERIOD_MILLIS) DEFAULT_READY_PERIOD_MS); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,errorStatus,public static Condition<Pod>  (){ return status(PodStatusType.ERROR); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,hasLabel,"public static <T extends HasMetadata>Condition<T>  (final String key final String value){ return new Condition<T>(){ @Override public String toString(){ return ""hasLabel("" + key + "" = ""+ value+ "")""; } @Override public boolean matches( T resource){ return matchesLabel(resource.getMetadata().getLabels() key value); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,hasName,"public static <T extends HasMetadata>Condition<T>  (final String name){ return new Condition<T>(){ @Override public String toString(){ return ""hasName("" + name + "")""; } @Override public boolean matches( T resource){ return Objects.equals(name resource.getMetadata().getName()); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,hasNamespace,"public static <T extends HasMetadata>Condition<T>  (final String namespace){ return new Condition<T>(){ @Override public String toString(){ return ""hasNamespace("" + namespace + "")""; } @Override public boolean matches( T resource){ return Objects.equals(namespace resource.getMetadata().getNamespace()); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,matches,@Override public boolean  (Service service){ return matchesLabel(service.getMetadata().getLabels() key value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,matchesLabel,public static boolean  (Map<String String> labels String key String value){ if (labels != null) { String actual=labels.get(key); return Objects.equals(value actual); } else { return false; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,podLabel,"public static Condition<Pod>  (final String key final String value){ return new Condition<Pod>(){ @Override public String toString(){ return ""podLabel("" + key + "" = ""+ value+ "")""; } @Override public boolean matches( Pod pod){ return matchesLabel(pod.getMetadata().getLabels() key value); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,podNamespace,"public static Condition<Pod>  (final String namespace){ return new Condition<Pod>(){ @Override public String toString(){ return ""podNamespace("" + namespace + "")""; } @Override public boolean matches( Pod pod){ return Objects.equals(namespace pod.getMetadata().getNamespace()); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,replicationControllerLabel,"public static Condition<ReplicationController>  (final String key final String value){ return new Condition<ReplicationController>(){ @Override public String toString(){ return ""replicationControllerLabel("" + key + "" = ""+ value+ "")""; } @Override public boolean matches( ReplicationController replicationControllerSchema){ return matchesLabel(replicationControllerSchema.getMetadata().getLabels() key value); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,runningStatus,public static Condition<Pod>  (){ return status(PodStatusType.OK); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,serviceLabel,"public static Condition<Service>  (final String key final String value){ return new Condition<Service>(){ @Override public String toString(){ return ""serviceLabel("" + key + "" = ""+ value+ "")""; } @Override public boolean matches( Service service){ return matchesLabel(service.getMetadata().getLabels() key value); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,status,"public static Condition<Pod>  (final PodStatusType status){ return new Condition<Pod>(){ @Override public String toString(){ return ""podStatus("" + status + "")""; } @Override public boolean matches( Pod pod){ return Objects.equals(status KubernetesHelper.getPodStatus(pod)); } } ; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,toString,"@Override public String  (){ return ""serviceLabel("" + key + "" = ""+ value+ "")""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Conditions.java,waitingStatus,public static Condition<Pod>  (){ return status(PodStatusType.WAIT); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Assertions.java,assertThat,public static KubernetesNamespaceAssert  (KubernetesClient kubernetesClient String namespace){ return assertThat(kubernetesClient).namespace(namespace); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\DeploymentConfigPodsAssert.java,pods,"public PodSelectionAssert  (){ spec().isNotNull().selector().isNotNull(); DeploymentConfigSpec spec=this.actual.getSpec(); Integer replicas=spec.getReplicas(); Map<String String> matchLabels=spec.getSelector(); List<LabelSelectorRequirement> matchExpressions=new ArrayList<>(); return new PodSelectionAssert(client replicas matchLabels matchExpressions ""DeploymentConfig "" + KubernetesHelper.getName(actual)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\Assertions.java,joinDescription,"public static String  (AbstractAssert asserter String propertyName){ String text=asserter.descriptionText(); if (text == null || text.length() == 0) { text=asserter.getClass().getSimpleName(); String postfix=""Assert""; if (text.endsWith(postfix)) { text=text.substring(0 text.length() - postfix.length()); } } return text + ""."" + propertyName; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\DeploymentPodsAssert.java,DeploymentPodsAssert,public  (KubernetesClient client Deployment deployment){ super(deployment); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\DeploymentPodsAssert.java,pods,@Override public PodSelectionAssert  (){ spec().isNotNull().selector().isNotNull(); DeploymentSpec spec=this.actual.getSpec(); Integer replicas=spec.getReplicas(); LabelSelector selector=spec.getSelector(); Map<String String> matchLabels=selector.getMatch
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesNamespaceAssert.java,KubernetesNamespaceAssert,public  (KubernetesClient client String namespace){ super(client); this.client=client; this.namespace=namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesNamespaceAssert.java,namespace,@Override public String  (){ return namespace; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\HasMetadatasAssert.java,HasMetadatasAssert,public  (List<R> actual){ super(actual); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\HasMetadatasAssert.java,assertSize,"public IntegerAssert  (){ return (IntegerAssert)org.assertj.core.api.Assertions.assertThat(get().size()).as(""size""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\HasMetadatasAssert.java,assertThat,protected AI  (Iterable<R> result){ List<R> list=Lists.newArrayList(result); return createListAssert(list); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,KubernetesAssert,public  (KubernetesClient client){ super(client KubernetesAssert.class); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,createPodSelectionAssert,protected HasPodSelectionAssert  (HasMetadata resource){ if (resource instanceof DeploymentConfig) { DeploymentConfig deployment=(DeploymentConfig)resource; return new DeploymentConfigPodsAssert(client deployment); } else if (resource instanceof Deployment) { Deployment deployment=(Deployment)resource; return new DeploymentPodsAssert(client deployment); } else if (resource instanceof ReplicaSet) { ReplicaSet replica=(ReplicaSet)resource; return new ReplicaSetPodsAssert(client replica); } else if (resource instanceof ReplicationController) { ReplicationController replica=(ReplicationController)resource; return new ReplicationControllerPodsAssert(client replica); } else { return null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,deployment,"public HasPodSelectionAssert  (String deploymentName){ String namespace=namespace(); String qualifiedName=namespace + ""."" + deploymentName; OpenShiftClient openShiftClient=new Controller(client).getOpenShiftClientOrNull(); if (openShiftClient != null && openShiftClient.supportsOpenShiftAPIGroup(OpenShiftAPIGroups.APPS)) { DeploymentConfig deployment=openShiftClient.deploymentConfigs().inNamespace(namespace).withName(deploymentName).get(); assertThat(deployment).describedAs(""DeploymentConfig: "" + qualifiedName).isNotNull().metadata().name().isEqualTo(deploymentName); return new DeploymentConfigPodsAssert(client deployment); } else { Deployment deployment=client.extensions().deployments().inNamespace(namespace).withName(deploymentName).get(); assertThat(deployment).describedAs(""Deployment: "" + qualifiedName).isNotNull().metadata().name().isEqualTo(deploymentName); return new DeploymentPodsAssert(client deployment); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,deployments,"public HasPodSelectionAssert  (){ List<HasPodSelectionAssert> asserters=new ArrayList<>(); List<HasMetadata> resources=new ArrayList<>(); try { resources=KubernetesHelper.findKubernetesResourcesOnClasspath(new Controller(client)); } catch ( IOException e) { fail(""Failed to load kubernetes resources on the classpath: "" + e e); } for ( HasMetadata resource : resources) { HasPodSelectionAssert asserter=createPodSelectionAssert(resource); if (asserter != null) { asserters.add(asserter); } } String message=""No pod selection kinds found on the classpath such as Deployment  DeploymentConfig  ReplicaSet  ReplicationController""; assertThat(asserters).describedAs(message).isNotEmpty(); if (asserters.size() == 1) { return asserters.get(0); } return new MultiHasPodSelectionAssert(asserters); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,getPod,"protected Pod  (String podId String namespace){ assertThat(podId).isNotNull(); Pod pod=null; try { pod=client.pods().inNamespace(namespace).withName(podId).get(); } catch ( Exception e) { fail(""Could not find pod for '"" + podId + ""'""); } assertThat(pod).isNotNull(); return pod; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,getPods,protected List<Pod>  (String namespace){ PodList podList=client.pods().inNamespace(namespace).list(); assertThat(podList).isNotNull(); List<Pod> pods=podList.getItems(); podList(pods).isNotNull(); return pods; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,getReplicationController,"protected ReplicationController  (String replicationControllerId String namespace){ assertThat(replicationControllerId).isNotNull(); ReplicationController replicationController=null; try { replicationController=client.replicationControllers().inNamespace(namespace).withName(replicationControllerId).get(); } catch ( Exception e) { fail(""Could not find replicationController for '"" + replicationControllerId + ""'""); } assertThat(replicationController).isNotNull(); return replicationController; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,MultiHasPodSelectionAssert,public  (List<HasPodSelectionAssert> asserters){ this.asserters=asserters; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,getPods,@Override public List<Pod>  (){ List<Pod> rc=new ArrayList<>(); for ( HasPodSelectionAssert asserter : asserters) { for ( Pod pod : asserter.pods().getPods()) { rc.add(pod); } } return rc; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,isPodReadyForPeriod,@Override public MultiPodSelectionAssert  (final long notReadyTimeoutMS final long readyPeriodMS){ final AtomicReference<Throwable> failure=new AtomicReference<>(); ArrayList<Thread> threads=new ArrayList<>(asserters.size()); for ( HasPodSelectionAssert a
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,pods,@Override public AbstractPodSelectionAssert  (){ return new MultiPodSelectionAssert(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\MultiHasPodSelectionAssert.java,run,@Override public void  (){ try { asserter.pods().isPodReadyForPeriod(notReadyTimeoutMS readyPeriodMS); } catch ( Throwable e) { failure.set(e); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,NavigationListAssert,public  (List<? extends T> actual AssertFactory<T EA> assertFactory){ super(actual); this.assertFactory=assertFactory; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,first,"public EA  (){ isNotEmpty(); return toAssert(actual.get(0) Assertions.joinDescription(this ""first()"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,item,"public EA  (int index){ isNotEmpty(); assertThat(index).describedAs(Assertions.joinDescription(this ""index"")).isGreaterThanOrEqualTo(0).isLessThan(actual.size()); return toAssert(actual.get(index) Assertions.joinDescription(this ""index("" + index + "")"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,last,"public EA  (){ isNotEmpty(); return toAssert(actual.get(actual.size() - 1) Assertions.joinDescription(this ""last()"")); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\NavigationListAssert.java,toAssert,protected EA  (T value String description){ return (EA)assertFactory.createAssert(value).describedAs(description); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,getService,"protected Service  (String serviceId String namespace){ assertThat(serviceId).isNotNull(); Service service=null; try { service=client.services().inNamespace(namespace).withName(serviceId).get(); } catch ( Exception e) { fail(""Could not find service for '"" + serviceId + ""'""); } assertThat(service).isNotNull(); return service; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,getServiceSpec,protected ServiceSpec  (String serviceId String namespace){ Service service=getService(serviceId namespace); ServiceSpec spec=service.getSpec(); assertThat(spec).isNotNull(); return spec; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,hasServicePort,"public void  (String serviceId int port){ ServiceSpec spec=getServiceSpec(serviceId namespace()); boolean found=false; List<ServicePort> ports=spec.getPorts(); List<Integer> portNumbers=new ArrayList<>(); if (ports != null) { for ( ServicePort servicePort : ports) { Integer aPort=servicePort.getPort(); if (aPort != null) { if (aPort == port) { found=true; break; } else { portNumbers.add(aPort); } } } } assertThat(found).describedAs(""No port found for "" + port + "" but found ports: ""+ portNumbers).isTrue(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,namespace,public String  (){ return client.getNamespace(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,pod,public PodAssert  (String podName){ return assertThat(getPod(podName namespace())); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,podList,public PodsAssert  (List<Pod> pods){ assertThat(pods).isNotNull(); return new PodsAssert(pods client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,pods,public PodsAssert  (){ List<Pod> pods=getPods(namespace()); return podList(pods); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,podsForReplicationController,public PodsAssert  (ReplicationController replicationController){ List<Pod> allPods=getPods(replicationController.getMetadata().getNamespace()); List<Pod> pods=KubernetesHelper.getPodsForReplicationController(replicationController allPods); return podList(pods); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,podsForService,public PodsAssert  (Service service){ List<Pod> allPods=getPods(service.getMetadata().getNamespace()); List<Pod> pods=KubernetesHelper.getPodsForService(service allPods); return podList(pods); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,replicas,"public HasPodSelectionAssert  (String replicaName){ String namespace=namespace(); String qualifiedName=namespace + ""."" + replicaName; ReplicaSet replicasSet=client.extensions().replicaSets().withName(replicaName).get(); if (replicasSet != null) { assertThat(replicasSet).describedAs(""ReplicaSet: "" + qualifiedName).metadata().name().isEqualTo(replicaName); return new ReplicaSetPodsAssert(client replicasSet); } else { ReplicationController replicationController=client.replicationControllers().withName(replicaName).get(); assertThat(replicationController).describedAs(""No ReplicaSet or ReplicationController called: "" + qualifiedName).isNotNull(); assertThat(replicationController).describedAs(""ReplicationController: "" + qualifiedName).metadata().name().isEqualTo(replicaName); return new ReplicationControllerPodsAssert(client replicationController); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,replicationController,public ReplicationControllerAssert  (String replicationControllerName){ return assertThat(getReplicationController(replicationControllerName namespace())); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,replicationControllerList,public ReplicationControllerListAssert  (){ ReplicationControllerList replicationControllers=client.replicationControllers().list(); return assertThat(replicationControllers).isNotNull(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,replicationControllers,public ListAssert<ReplicationController>  (){ ReplicationControllerList replicationControllerList=client.replicationControllers().inNamespace(namespace()).list(); assertThat(replicationControllerList).isNotNull(); List<ReplicationController> replicationControllers=replicationControllerList.getItems(); return (ListAssert<ReplicationController>)assertThat(replicationControllers); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,service,"public ServicePodsAssert  (String serviceName){ Service service=client.services().inNamespace(namespace()).withName(serviceName).get(); assertThat(service).describedAs(""No service exists for name: "" + serviceName).isNotNull(); return new ServicePodsAssert(client service); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,serviceList,public ServiceListAssert  (){ ServiceList serviceList=client.services().inNamespace(namespace()).list(); return assertThat(serviceList).isNotNull(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,serviceSpec,public ServiceSpecAssert  (String serviceName){ return assertThat(getServiceSpec(serviceName namespace())); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\KubernetesAssert.java,services,public ServicesAssert  (){ ServiceList serviceList=client.services().inNamespace(namespace()).list(); assertThat(serviceList).isNotNull(); List<Service> services=serviceList.getItems(); return new ServicesAssert(client services); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,PodLogsAssert,public  (Map<String String> actual String containerName Map<String String> logPrefixes){ super(actual); this.containerName=containerName; this.logPrefixes=logPrefixes; writeLogs(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,afterText,public PodLogsAssert  (String startText){ Map<String String> newLogs=new HashMap<>(); Map<String String> prefixes=new HashMap<>(); Set<Map.Entry<String String>> entries=actual.entrySet(); for ( Map.Entry<String String> entry : entries) { String podName=entry.getKey(); String value=entry.getValue(); File file=podLogFileName(podName); int idx=value.indexOf(startText); if (idx >= 0) { int splitIdx=idx + startText.length(); String remaining=value.substring(splitIdx); String prefix=value.substring(0 splitIdx); newLogs.put(podName remaining); prefixes.put(podName prefix); } } return new PodLogsAssert(newLogs containerName prefixes); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,containsText,"public void  (String... texts){ for ( String text : texts) { Set<Map.Entry<String String>> entries=actual.entrySet(); for ( Map.Entry<String String> entry : entries) { String podName=entry.getKey(); String value=entry.getValue(); File file=podLogFileName(podName); int idx=value.indexOf(text); if (idx < 0) { Fail.fail(""Log of pod "" + podName + "" in file: ""+ file+ "" does not contains text `""+ text+ ""` last log: ""+ lastLineOf(file)); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,doesNotContainText,"public void  (String... texts){ for ( String text : texts) { Set<Map.Entry<String String>> entries=actual.entrySet(); for ( Map.Entry<String String> entry : entries) { String podName=entry.getKey(); String value=entry.getValue(); File file=podLogFileName(podName); int idx=value.indexOf(text); if (idx >= 0) { Fail.fail(""Log of pod "" + podName + "" in file: ""+ file+ "" contains text `""+ text+ ""` at ""+ logFileCoords(podName value idx)); } else { LOG.debug(""does not contain '"" + text + ""' in Log of pod ""+ podName+ "" in file: ""+ file); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,doesNotContainTextCount,"public void  (int count String... texts){ if (count == 1) { doesNotContainText(texts); } for ( String text : texts) { Set<Map.Entry<String String>> entries=actual.entrySet(); for ( Map.Entry<String String> entry : entries) { String podName=entry.getKey(); String value=entry.getValue(); File file=podLogFileName(podName); int idx=0; for (int i=0; idx >= 0 && i < count; i++) { int next=value.indexOf(text idx); if (next >= 0) { idx=next + 1; } else { idx=next; } } if (idx >= 0) { String logText=fullLogText(podName value.substring(0 idx - 1)); Fail.fail(""Log of pod "" + podName + "" in file: ""+ file+ "" contains text `""+ text+ ""` ""+ count+ "" times with the last at at ""+ textCoords(logText)); } else { LOG.debug(""does not contain '"" + text + ""' in Log of pod ""+ podName+ "" in file: ""+ file+ "" ""+ count+ "" times""); } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,fullLogText,protected String  (String podName String text){ String logText=text; String logPrefix=logPrefixes.get(podName); if (logPrefix != null) { logText=logPrefix + logText; } return logText; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,lastLineOf,"protected String  (File file){ try { List<String> lines=IOHelpers.readLines(file); int size=lines.size(); if (size > 0) { return lines.get(size - 1); } } catch ( IOException e) { LOG.debug(""Failed to load: "" + file + "". ""+ e e); } return """"; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,logFileCoords,"protected String  (String podName String value int idx){ String prefix=""""; if (value != null && value.length() > 0 && idx > 0) { prefix=value.substring(0 idx); } String logText=fullLogText(podName prefix); return textCoords(logText); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,podLogFileName,"protected File  (String podName){ String basedir=System.getProperty(""basedir"" "".""); File dir=new File(basedir ""target/fabric8/systest/logs""); String name=podName; if (containerName != null) { name+=""."" + containerName; } name+="".log""; File answer=new File(dir name); answer.getParentFile().mkdirs(); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,textCoords,"public static String  (String text){ int line=1; int idx=0; while (true) { int next=text.indexOf('\n' idx); if (next < 0) { break; } idx=next + 1; line+=1; } int column=1 + text.length() - idx; return """" + line + "":""+ column; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodLogsAssert.java,writeLogs,"private void  (){ Set<Map.Entry<String String>> entries=actual.entrySet(); for ( Map.Entry<String String> entry : entries) { String podName=entry.getKey(); String value=entry.getValue(); String logText=fullLogText(podName value); File file=podLogFileName(podName); try { IOHelpers.writeFully(file logText); } catch ( IOException e) { LOG.error(""Failed to write log of pod "" + podName + "" container:""+ containerName+ "" to file: ""+ file+ "". ""+ e e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ReplicaSetPodsAssert.java,ReplicaSetPodsAssert,public  (KubernetesClient client ReplicaSet replicasSet){ super(replicasSet); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ReplicaSetPodsAssert.java,pods,@Override public PodSelectionAssert  (){ spec().isNotNull().selector().isNotNull(); ReplicaSetSpec spec=this.actual.getSpec(); Integer replicas=spec.getReplicas(); LabelSelector selector=spec.getSelector(); Map<String String> matchLabels=selector.getMatch
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ReplicationControllerPodsAssert.java,ReplicationControllerPodsAssert,public  (KubernetesClient client ReplicationController replicationController){ super(replicationController); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ReplicationControllerPodsAssert.java,pods,"public PodSelectionAssert  (){ spec().isNotNull().selector().isNotNull(); ReplicationControllerSpec spec=this.actual.getSpec(); Integer replicas=spec.getReplicas(); Map<String String> matchLabels=spec.getSelector(); List<LabelSelectorRequirement> matchExpressions=new ArrayList<>(); return new PodSelectionAssert(client replicas matchLabels matchExpressions ""ReplicationController "" + KubernetesHelper.getName(actual)); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicePodsAssert.java,ServicePodsAssert,public  (KubernetesClient client Service actual){ super(actual); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicePodsAssert.java,hasEndpointOrReadyPod,public ServicePodsAssert  (long notReadyTimeoutMS long readyPeriodMS){ EndpointsList list=client.endpoints().withLabels(getLabels(actual)).list(); if (list != null) { List<Endpoints> items=list.getItems(); if (items.size() > 0) { return this; } } pods().isPodReadyForPeriod(notReadyTimeoutMS readyPeriodMS); return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicePodsAssert.java,pods,@Override public PodSelectionAssert  (){ spec().isNotNull().selector().isNotNull(); ServiceSpec spec=this.actual.getSpec(); int replicas=1; LabelSelector selector=null; Map<String String> matchLabels=spec.getSelector(); List<LabelSelectorRequirement> matc
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,PodsAssert,public  (List<Pod> actual KubernetesClient client){ super(actual); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,createListAssert,@Override protected PodsAssert  (List<Pod> list){ return new PodsAssert(list client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,errorStatus,public PodsAssert  (){ return filter(Conditions.errorStatus()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,logs,"public PodLogsAssert  (String containerName){ Map<String String> logs=new HashMap<>(); List<Pod> pods=get(); for ( Pod pod : pods) { ObjectMeta metadata=pod.getMetadata(); if (metadata != null) { String name=metadata.getName(); String namespace=metadata.getNamespace(); String key=name; if (Strings.isNotBlank(namespace)) { key=namespace + ""/"" + name; } String log=client.pods().inNamespace(namespace).withName(name).getLog(true); if (log != null) { logs.put(key log); } } } return new PodLogsAssert(logs containerName); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,runningStatus,public PodsAssert  (){ return filter(Conditions.runningStatus()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodsAssert.java,waitingStatus,public PodsAssert  (){ return filter(Conditions.waitingStatus()); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,PodSelectionAssert,public  (KubernetesClient client Integer replicas Map<String String> matchLabels List<LabelSelectorRequirement> matchExpressions String description){ this.client=client; this.replicas=replicas; this.matchLabels=matchLabels; this.matchExpressions=matchExpressions; this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,getClient,public KubernetesClient  (){ return client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,getMatchExpressions,public List<LabelSelectorRequirement>  (){ return matchExpressions; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,getMatchLabels,public Map<String String>  (){ return matchLabels; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,getPods,"public List<Pod>  (){ PodList list=getClient().pods().withLabels(getMatchLabels()).list(); assertThat(list).describedAs(getDescription() + "" pods"").isNotNull(); return list.getItems(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,getReplicas,public Integer  (){ return replicas; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\PodSelectionAssert.java,isPodReadyForPeriod,"public PodSelectionAssert  (long notReadyTimeoutMS long readyPeriodMS){ if (replicas.intValue() <= 0) { LOG.warn(""Not that the pod selection for: "" + description + "" has no replicas defined so we cannot assert there is a pod ready""); return this; } try (PodWatcher podWatcher=new PodWatcher(this notReadyTimeoutMS readyPeriodMS);Watch watch=client.pods().withLabels(matchLabels).watch(podWatcher)){ podWatcher.loadCurrentPods(); podWatcher.waitForPodReady(); } return this; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicesAssert.java,ServicesAssert,public  (KubernetesClient client List<? extends Service> actual){ super(actual); this.client=client; this.actual=actual; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicesAssert.java,assertAllServicesHaveEndpointOrReadyPod,public ServicesAssert  (){ for ( Service service : actual) { ServicePodsAssert asserter=new ServicePodsAssert(client service); asserter.hasEndpointOrReadyPod(); } return this; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\ServicesAssert.java,service,"public ServicePodsAssert  (String serviceName){ Service service=null; for ( Service aService : actual) { String name=getName(aService); if (Objects.equals(name serviceName)) { service=aService; } } assertThat(service).describedAs(""No service could be found for name: "" + serviceName).isNotNull(); return new ServicePodsAssert(client service); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,PodAsserter,public  (PodWatcher watcher String name Pod pod){ this.watcher=watcher; this.name=name; this.pod=pod; updated(pod); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,cancelTimer,protected void  (){ if (timer != null) { timer.cancel(); timer=null; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,close,public void  (){ cancelTimer(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,run,@Override public void  (){ watcher.podIsReadyForEntireDuration(name pod); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodAsserter.java,updated,"public void  (Pod pod){ String statusText=KubernetesHelper.getPodStatusText(pod); boolean ready=KubernetesHelper.isPodReady(pod); String message=""Pod "" + name + "" has status: ""+ statusText+ "" isReady: ""+ ready; LOG.info(ansi().fg(YELLOW).a(message).reset().toString()); if (ready) { watcher.podIsReady(name pod); if (timer == null) { timer=new Timer(watcher.getDescription()); timer.schedule(task watcher.getReadyPeriodMS()); } } else { cancelTimer(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\LogHelpers.java,getLogFileName,"public static File  (File baseDir String podName Container container int restartCount){ File logDir=new File(baseDir ""target/test-pod-logs/""); String containerName=container.getName(); String restartCountText=""""; if (restartCount > 0) { restartCountText=""-"" + restartCount; } String logFileName=podName + ""-"" + containerName+ restartCountText+ LOG_FILE_POSTFIX; File logFile=new File(logDir logFileName); logFile.getParentFile().mkdirs(); return logFile; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\LogHelpers.java,getRestartCount,public static int  (Pod pod){ int restartCount=0; PodStatus podStatus=pod.getStatus(); if (podStatus != null) { List<ContainerStatus> containerStatuses=podStatus.getContainerStatuses(); for ( ContainerStatus containerStatus : containerStatuses) { if (restartCount == 0) { Integer restartCountValue=containerStatus.getRestartCount(); if (restartCountValue != null) { restartCount=restartCountValue.intValue(); } } } } return restartCount; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\Assertions.java,assertThat,public static OpenShiftAssert  (OpenShiftClient client){ return new OpenShiftAssert(client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodLogWatcher.java,PodLogWatcher,public  (PodWatcher podWatcher String name Pod pod String containerName File logFile) throws FileNotFoundException { KubernetesClient client=podWatcher.getClient(); ObjectMeta metadata=pod.getMetadata(); logFile.getParentFile().mkdirs(); PodSpec spec=pod.getSpec(); this.logWatch=client.pods().inNamespace(metadata.getNamespace()).withName(name).inContainer(containerName).watchLog(new FileOutputStream(logFile)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodLogWatcher.java,close,@Override public void  () throws IOException { if (logWatch != null) { logWatch.close(); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\BuildConfigsAssert.java,BuildConfigsAssert,public  (List<BuildConfig> actual OpenShiftClient client){ super(actual); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\BuildConfigsAssert.java,createListAssert,@Override protected BuildConfigsAssert  (List<BuildConfig> list){ return new BuildConfigsAssert(list client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,PodWatcher,public  (PodSelectionAssert podSelectionAssert long readyTimeoutMS long readyPeriodMS){ this.podSelectionAssert=podSelectionAssert; this.readyTimeoutMS=readyTimeoutMS; this.readyPeriodMS=readyPeriodMS; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,close,public void  (){ closeAllClosers(podAsserts); closeAllClosers(podLogWatchers); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,closeAllClosers,protected void  (Map<String ? extends Closeable> closers){ while (!closers.isEmpty()) { Set<String> keys=closers.keySet(); for ( String key : keys) { closeCloser(key closers); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,closeCloser,"private void  (String name Map<String ? extends Closeable> closers){ Closeable closer=closers.remove(name); if (closer != null) { try { closer.close(); } catch ( Exception e) { LOG.warn(""Failed to close "" + closer + "". ""+ e e); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,eventReceived,"@Override public void  (Action action Pod pod){ String name=getName(pod); if (action.equals(Action.ERROR)) { LOG.warn(""Got error for pod "" + name); } else if (action.equals(Action.DELETED)) { closeCloser(name this.podAsserts); closeCloser(name this.podLog"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,getBaseDir,"public File  (){ if (basedir == null) { basedir=new File(System.getProperty(""basedir"" ""."")); } return basedir; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,getClient,public KubernetesClient  (){ return podSelectionAssert.getClient(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,getDescription,public String  (){ return podSelectionAssert.getDescription(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,getReadyPeriodMS,public long  (){ return readyPeriodMS; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,getReadyTimeoutMS,public long  (){ return readyTimeoutMS; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,loadCurrentPods,public void  (){ List<Pod> pods=podSelectionAssert.getPods(); for ( Pod pod : pods) { String name=getName(pod); if (!podAsserts.containsKey(name)) { onPod(name pod); } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,onClose,"@Override public void  (KubernetesClientException e){ LOG.info(""onClose: "" + e); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,onPod,"protected void  (String name Pod pod){ PodAsserter asserter=podAsserts.get(name); if (asserter == null) { asserter=new PodAsserter(this name pod); podAsserts.put(name asserter); } else { asserter.updated(pod); } int restartCount=getRestartCount(pod); PodSpec spec=pod.getSpec(); if (spec != null) { if (KubernetesHelper.isPodRunning(pod)) { List<Container> containers=spec.getContainers(); for ( Container container : containers) { File logFileName=LogHelpers.getLogFileName(getBaseDir() name container restartCount); String key=logFileName.getName(); PodLogWatcher logWatcher=podLogWatchers.get(key); if (logWatcher == null) { try { String containerName=container.getName(); logWatcher=new PodLogWatcher(this name pod containerName logFileName); podLogWatchers.put(key logWatcher); LOG.info(""Watching pod "" + name + "" container ""+ containerName+ "" log at file: ""+ logFileName.getAbsolutePath()); } catch ( Exception e) { LOG.warn(""Failed to create PodLogWatcher: "" + e e); } } } } } File yamlFile=new File(getBaseDir() ""target/test-pod-status/"" + name + "".yml""); yamlFile.getParentFile().mkdirs(); try { KubernetesHelper.saveYaml(pod yamlFile); } catch ( IOException e) { LOG.warn(""Failed to write "" + yamlFile + "". ""+ e e); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,podIsReady,"public void  (String name Pod pod){ if (podReady.getCount() > 0) { String message=""Pod "" + name + "" is Ready!""; LOG.info(ansi().fg(GREEN).a(message).reset().toString()); podReady.countDown(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,podIsReadyForEntireDuration,"public void  (String name Pod pod){ String message=""Pod "" + name + "" has been Ready now for ""+ getReadyPeriodMS()+ "" millis!""; LOG.info(ansi().fg(GREEN).a(message).reset().toString()); podReadyForEntireDuration.countDown(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,setBasedir,public void  (File basedir){ this.basedir=basedir; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\kubernetes\assertions\support\PodWatcher.java,waitForPodReady,"public void  (){ boolean ready=false; try { ready=podReady.await(readyTimeoutMS TimeUnit.MILLISECONDS); } catch ( InterruptedException e) { LOG.warn(""Interupted waiting for podReady: "" + e); ready=podReady.getCount() == 0L; } if (!ready) { fail(podSelectionAssert.getDescription() + "" did not have a pod become Ready within "" + readyTimeoutMS+ "" millis""); } try { ready=podReadyForEntireDuration.await(readyPeriodMS * 2 TimeUnit.MILLISECONDS); } catch ( InterruptedException e) { LOG.warn(""Interupted waiting for podReadyForEntireDuration: "" + e); ready=podReadyForEntireDuration.getCount() == 0L; } if (!ready) { fail(podSelectionAssert.getDescription() + "" did not have a pod Ready for a duration of "" + readyPeriodMS+ "" millis""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\BuildsAssert.java,BuildsAssert,public  (List<Build> actual OpenShiftClient client){ super(actual); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\BuildsAssert.java,createListAssert,@Override protected BuildsAssert  (List<Build> list){ return new BuildsAssert(list client); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\OpenShiftAssert.java,OpenShiftAssert,public  (OpenShiftClient client){ super(client OpenShiftAssert.class); this.client=client; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\OpenShiftAssert.java,buildConfigs,"public BuildConfigsAssert  (){ BuildConfigList listObject=client.buildConfigs().list(); assertThat(listObject).describedAs(""No BuildConfigsList found!"").isNotNull(); List<BuildConfig> list=listObject.getItems(); assertThat(list).describedAs(""No BuildConfig Items found!"").isNotNull(); return new BuildConfigsAssert(list client); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\main\java\io\fabric8\openshift\assertions\OpenShiftAssert.java,builds,"public BuildsAssert  (){ BuildList listObject=client.builds().list(); assertThat(listObject).describedAs(""No BuildList found!"").isNotNull(); List<Build> list=listObject.getItems(); assertThat(list).describedAs(""No Build Items found!"").isNotNull(); return new BuildsAssert(list client); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\Example.java,invoke,"@Override public void  () throws Exception { try { assertThat(client).pods().runningStatus().filterLabel(""component"" ""doesNotExist"").hasSize(1); } catch ( KubernetesClientException e) { if (e.getCode() != 404) { throw e; } else { throw new AssertionError("
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\Example.java,main,"public static void  (String[] args){ try { final KubernetesClient client=new DefaultKubernetesClient(); assertThat(client).pods().runningStatus().hasSize(6); assertThat(client).pods().runningStatus().filterLabel(""provider"" ""fabric8"").assertSize().isGreaterThan(0); assertThat(client.services().inNamespace(""default"").withName(""fabric8"").get().getMetadata()).name().isEqualTo(""fabric8""); Map<String String> consoleLabels=new HashMap<>(); consoleLabels.put(""component"" ""console""); consoleLabels.put(""provider"" ""fabric8""); assertThat(client).podsForService(""fabric8"").runningStatus().extracting(""metadata"").extracting(""labels"").contains(consoleLabels); assertThat(client).podsForService(""fabric8"").runningStatus().hasSize(1).extracting(""metadata"").extracting(""labels"").contains(consoleLabels); assertThat(client).podsForService(""fabric8"").logs().doesNotContainText(""Exception"" ""Error""); assertThat(client).pods().logs().doesNotContainText(""Exception"" ""Error""); assertAssertionError(new Block(){ @Override public void invoke() throws Exception { try { assertThat(client.services().inNamespace(""default"").withName(""doesNotExist"").get().getMetadata()).name().isEqualTo(""fabric8-console-controller""); } catch ( KubernetesClientException e) { if (e.getCode() != 404) { throw e; } else { throw new AssertionError(e); } } } } ); assertAssertionError(new Block(){ @Override public void invoke() throws Exception { try { assertThat(client).pods().runningStatus().filterLabel(""component"" ""doesNotExist"").hasSize(1); } catch ( KubernetesClientException e) { if (e.getCode() != 404) { throw e; } else { throw new AssertionError(e); } } } } ); System.out.println(""Done!""); } catch ( Throwable e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,invoke,"@Override public void  () throws Exception { assertThat(podList).describedAs(""podListWith2Items"").items().first().metadata().name().isEqualTo(""shouldNotMatch""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\TextCoordsTest.java,assertTextCoords,"public static void  (String text String expected){ String actual=PodLogsAssert.textCoords(text); assertEquals(""textCoords("" + text + "")"" expected actual); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\TextCoordsTest.java,testCoords,"@Test public void  () throws Exception { assertTextCoords(""a"" ""1:2""); assertTextCoords(""a\n"" ""2:1""); assertTextCoords(""a\nabc\ndef"" ""3:4""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,testNavigationAssertions,"@Test public void  () throws Exception { String expectedId=""abc""; Map<String String> expectedLabels=new HashMap<>(); expectedLabels.put(""foo"" ""bar""); final Pod pod=new Pod(); pod.setMetadata(new ObjectMeta()); pod.getMetadata().setName(expectedId); pod.ge"
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,testNavigationListAssertions,"@Test public void  () throws Exception { final String id1=""abc""; final String id2=""def""; Map<String String> labels1=new HashMap<>(); labels1.put(""foo"" ""bar""); Map<String String> labels2=new HashMap<>(); labels2.put(""whatnot"" ""cheese""); final Pod pod1=new "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,testNullNavigationOnPod,"@Test public void  () throws Exception { final Pod pod=new Pod(); pod.setMetadata(null); assertAssertionError(new Block(){ @Override public void invoke() throws Exception { assertThat(pod).metadata().name().isEqualTo(""cheese""); } } ); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-assertions\src\test\java\io\fabric8\kubernetes\assertions\ExampleTest.java,testNullNavigationOnRC,@Test public void  () throws Exception { final ReplicationController rc=new ReplicationController(); assertAssertionError(new Block(){ @Override public void invoke() throws Exception { assertThat(rc).spec().template().spec().containers().first().image().i
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,determineExtension,"public static FileExtension  (String extension){ if (""json"".equals(extension)) { return JSON; } else if (""yaml"".equals(extension) || ""yml"".equals(extension)) { return YAML; } else { return UNDEFINED; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,generateJson,"void  (String fileName KubernetesResource resource){ try { FileObject fileObject=getFileObject(fileName); try (Writer writer=fileObject.openWriter()){ MAPPER.writeValue(writer resource); } } catch ( IOException e) { processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR ""Error generating json "" + fileName); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,generateYaml,"void  (String fileName KubernetesResource resource){ try { FileObject fileObject=getFileObject(fileName); KubernetesHelper.saveYaml(resource fileObject); } catch ( IOException e) { processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR ""Error generating json "" + fileName); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,getClassElement,"TypeElement  (Element element){ if (element instanceof PackageElement) { throw new IllegalArgumentException(""Invalid element. A package element can't be used to retrieve a class element""); } else if (element instanceof TypeElement && element.getEnclosingElement() instanceof PackageElement) { return (TypeElement)element; } else { return getClassElement(element.getEnclosingElement()); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,getFileObject,"private FileObject  (String fileName) throws IOException { FileObject fileObject=processingEnv.getFiler().getResource(StandardLocation.CLASS_OUTPUT """" fileName); Path path=Paths.get(fileObject.toUri()); File file=path.toFile(); if (file.exists() && !file.delete()) { throw new IOException(""Failed to delete old kubernetes json file: "" + fileName); } fileObject=processingEnv.getFiler().createResource(StandardLocation.CLASS_OUTPUT """" fileName); return fileObject; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,getPackageElement,PackageElement  (Element element){ if (element instanceof PackageElement) { return (PackageElement)element; } else { return getPackageElement(element.getEnclosingElement()); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\AbstractKubernetesAnnotationProcessor.java,readJson,"KubernetesResource  (String fileName){ try { FileObject fileObject=processingEnv.getFiler().getResource(StandardLocation.CLASS_OUTPUT """" (fileName == null ? KUBERNETES_JSON : fileName)); try (Reader reader=fileObject.openReader(false)){ return MAPPER.readValue(reader KubernetesResource.class); } } catch ( IOException e) { processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR fileName + "" JSON not found.""); } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,CompilationTaskFactory,public  (ProcessingEnvironment processingEnvironment){ this.processingEnvironment=processingEnvironment; this.fileManager=createFileManager(processingEnvironment); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,create,"public JavaCompiler.CompilationTask  (Iterable<TypeElement> elements Writer writer) throws IOException { Set<String> options=new LinkedHashSet<>(); Set<JavaFileObject> javaFileObjects=new LinkedHashSet<>(); ClassLoader classLoader=getClass().getClassLoader(); if (classLoader instanceof URLClassLoader) { String classPath=createClassPath(((URLClassLoader)classLoader).getURLs()); options.add(DISABLE_ANNOTATION_PROCESSORS_OPT); options.add(CLASSPATH_OPT); options.add(classPath); } for ( TypeElement element : elements) { JavaFileObject source=fileManager.getJavaFileForInput(StandardLocation.SOURCE_PATH element.getQualifiedName().toString() JavaFileObject.Kind.SOURCE); if (source == null) { throw new IOException(""Unable to find class: "" + element.getQualifiedName().toString()); } javaFileObjects.add(source); } return compiler.getTask(writer fileManager diagnosticListener options new ArrayList<String>() javaFileObjects); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,createClassPath,"private static String  (URL[] urls){ StringBuilder sb=new StringBuilder(); boolean first=true; for ( URL url : urls) { if (first) { first=false; } else { sb.append(File.pathSeparator); } sb.append(url.toExternalForm().replaceFirst(FILE_URL_PREFIX """")); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,createFileManager,static JavaFileManager  (ProcessingEnvironment processingEnvironment){ Filer filer=processingEnvironment.getFiler(); try { Field field=filer.getClass().getDeclaredField(FILE_MANAGER_FIELD_NAME); field.setAccessible(true); return (JavaFileManager)field.get(filer); } catch ( Throwable t) { throw new RuntimeException(t); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\CompilationTaskFactory.java,getCompileDiagnostics,public List<Diagnostic>  (){ return ((DiagnosticCollector)diagnosticListener).getDiagnostics(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,findMethods,private static Set<Method>  (Object instance String methodName Class argumentType){ Set<Method> result=new LinkedHashSet<>(); for ( Method m : instance.getClass().getDeclaredMethods()) { if (m.getName().equals(methodName) && m.getParameterTypes().length == 1 && m.getParameterTypes()[0].isAssignableFrom(argumentType)) { result.add(m); } } return result; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,getAdditionalProperties,"public static <T>Map<String Object>  (T obj){ return getWithReflection(obj Map.class ""getAdditionalProperties""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,getName,"public static <T>String  (T entity){ if (entity != null) { Map<String Object> additionalProperties=getAdditionalProperties(entity); return Strings.firstNonBlank(getWithReflection(entity String.class ""getName"") getName(getObjectMeta(entity)) Maps.nestedValueAsString(additionalProperties ""metadata"" ""id"") Maps.nestedValueAsString(additionalProperties ""metadata"" ""name"") additionalProperties != null ? String.valueOf(additionalProperties.get(""id"")) : null getUuid(entity)); } else { return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,getObjectMeta,"public static <T>ObjectMeta  (T obj){ return getWithReflection(obj ObjectMeta.class ""getMetadata""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,getUuid,"public static <T>String  (T obj){ return getWithReflection(obj String.class ""getUid""); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,getWithReflection,private static <T V>V  (T object Class<V> clazz String methodNamed){ if (object == null) { return null; } else { try { Method method=object.getClass().getMethod(methodNamed); return clazz.cast(method.invoke(object)); } catch ( Exception e) { return null; } } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,printCompileErrors,"private void  (CompilationTaskFactory compilationTaskFactory){ if (compilationTaskFactory.getCompileDiagnostics().size() > 0) { for ( Diagnostic diag : compilationTaskFactory.getCompileDiagnostics()) { processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR ""Compile error: "" + diag.toString()); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,process,@Override public boolean  (Set<? extends TypeElement> annotations RoundEnvironment roundEnv){ CompilationTaskFactory compilationTaskFactory=new CompilationTaskFactory(processingEnv); Set<TypeElement> processors=new HashSet<>(); for ( Element element : rou
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesModelProcessorProcessor.java,visit,@Override public void  (Object o){ for ( Method m : findMethods(instance methodName o.getClass())) { Named named=m.getAnnotation(Named.class); if (named != null && !Strings.isNullOrBlank(named.value())) { String objectName=getName(o); if (!named.value().e
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\BearerTokenAuthenticator.java,PreemptiveBearerInterceptor,public  (String token){ this.token=token; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\BearerTokenAuthenticator.java,authenticate,public void  (HttpClientBuilder pBuilder String pUser String pPassword){ pBuilder.addInterceptorFirst(new PreemptiveBearerInterceptor(pUser)); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\BearerTokenAuthenticator.java,process,"public void  (final HttpRequest request final HttpContext context) throws HttpException  IOException { request.addHeader(""Authorization"" ""Bearer "" + token); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\test\java\io\fabric8\kubernetes\jolokia\Example.java,findPods,"public void  (String selector){ Map<String Pod> podMap=KubernetesHelper.getSelectedPodMap(kubernetes selector); Collection<Pod> pods=podMap.values(); for ( Pod pod : pods) { String host=KubernetesHelper.getHost(pod); List<Container> containers=KubernetesHelper.getContainers(pod); for ( Container container : containers) { System.out.println(""pod "" + KubernetesHelper.getName(pod) + "" container: ""+ container.getName()+ "" image: ""+ container.getImage()); J4pClient jolokia=clients.clientForContainer(host container pod); if (jolokia != null) { System.out.println("" has jolokia client: "" + jolokia + "" from host: ""+ host+ "" URL: ""+ jolokia.getUri()); try { ObjectName objectName=new ObjectName(""java.lang:type=OperatingSystem""); J4pResponse<J4pReadRequest> results=jolokia.execute(new J4pReadRequest(objectName ""SystemCpuLoad"")); Object value=results.getValue(); System.out.println("" System CPU Load: "" + value); } catch ( Exception e) { LOG.error(""Failed to look up attribute. "" + e e); } } } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\test\java\io\fabric8\kubernetes\jolokia\Example.java,findReplicationControllers,"public void  (String selector){ Map<String ReplicationController> replicationControllerMap=KubernetesHelper.getSelectedReplicationControllerMap(kubernetes selector); Collection<ReplicationController> replicationControllers=replicationControllerMap.values(); for ( ReplicationController replicationController : replicationControllers) { System.out.println("""" + KubernetesHelper.getName(replicationController)); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\test\java\io\fabric8\kubernetes\jolokia\Example.java,main,public static void  (String[] args){ String selector=null; if (args.length > 0) { selector=args[0]; } Example example=new Example(); example.findReplicationControllers(selector); example.findPods(selector); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesProviderProcessor.java,generateKubernetesManifest,"private void  (String fileName KubernetesResource resource){ FileExtension ext=FileExtension.determineExtension(Files.getFileExtension(new File(fileName))); switch (ext) { case JSON: generateJson(fileName resource); break; case YAML: generateYaml(fileName resource); break; case UNDEFINED: processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR ""could not determine file extension for "" + fileName + "". Is it .json  .yaml  or .yml?""); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesProviderProcessor.java,getProvidedSet,private Set  (Map<String Set> providedMap Element element){ KubernetesProvider providerAnnotation=element.getAnnotation(KubernetesProvider.class); String kubernetesFile=providerAnnotation.value().trim(); if (providedMap.containsKey(kubernetesFile)) { return providedMap.get(kubernetesFile); } LinkedHashSet rc=new LinkedHashSet(); providedMap.put(kubernetesFile rc); return rc; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-generator\src\main\java\io\fabric8\kubernetes\generator\processor\KubernetesProviderProcessor.java,process,@Override public boolean  (Set<? extends TypeElement> annotations RoundEnvironment roundEnv){ CompilationTaskFactory compilationTaskFactory=new CompilationTaskFactory(processingEnv); Set<TypeElement> providers=new HashSet<>(); for ( Element element : roun
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,JolokiaClients,"public  (KubernetesClient kubernetes){ this.kubernetes=kubernetes; if (Systems.hasEnvVarOrSystemProperty(""JOLOKIA_AUTHENTICATION_MODE"")) { authenticationMode=AuthenticationMode.valueOf(Systems.getEnvVarOrSystemProperty(""JOLOKIA_AUTHENTICATION_MODE"")); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,assertClientForReplicationController,"public J4pClient  (String replicationControllerName String namespace){ J4pClient client=clientForReplicationController(replicationControllerName namespace); assertNotNull(client ""No client for replicationController: "" + replicationControllerName); return client; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,assertClientForService,"public J4pClient  (String serviceName String namespace){ J4pClient client=clientForService(serviceName namespace); assertNotNull(client ""No client for service: "" + serviceName); return client; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clientForContainer,"public J4pClient  (String host Container container Pod pod){ if (container != null) { List<ContainerPort> ports=container.getPorts(); for ( ContainerPort port : ports) { Integer containerPort=port.getContainerPort(); if (containerPort != null) { String name=port.getName(); if (containerPort == 8778 || (Objects.equals(""jolokia"" name) && containerPort.intValue() > 0)) { if (useKubeProxy) { URL masterUrl=getKubernetes().getMasterUrl(); ObjectMeta metadata=pod.getMetadata(); String namespace=metadata.getNamespace(); String podName=metadata.getName(); String jolokiaUrl=URLUtils.join(masterUrl.toString() ""/api/v1/namespaces/"" + namespace + ""/pods/""+ locateJolokiaProtocol()+ "":""+ podName+ "":8778/proxy/jolokia/""); LOG.info(""Using jolokia URL: "" + jolokiaUrl); return createJolokiaClient(container jolokiaUrl); } PodStatus currentState=pod.getStatus(); String podIP=currentState.getPodIP(); if (Strings.isNotBlank(podIP)) { return createJolokiaClientFromHostAndPort(container podIP containerPort); } Integer hostPort=port.getHostPort(); if (hostPort != null && hasDocker(pod)) { if (host.equals(""localhost"") || host.equals(""127.0.0.1"")) { String dockerIp=getDockerIp(); if (Strings.isNotBlank(dockerIp)) { host=dockerIp; } } } if (Strings.isNotBlank(host)) { return createJolokiaClientFromHostAndPort(container host hostPort); } } } } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clientForPod,public J4pClient  (Pod pod){ String host=KubernetesHelper.getHost(pod); List<Container> containers=KubernetesHelper.getContainers(pod); for ( Container container : containers) { J4pClient jolokia=clientForContainer(host container pod); if (jolokia != null) { return jolokia; } } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clientForReplicationController,"public J4pClient  (String replicationControllerName){ ReplicationController replicationController=kubernetes.replicationControllers().withName(replicationControllerName).get(); Objects.requireNonNull(replicationController ""No ReplicationController found for name: "" + replicationControllerName); return clientForReplicationController(replicationController); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clientForService,public J4pClient  (Service service){ List<Pod> pods=KubernetesHelper.getPodsForService(service kubernetes.pods().inNamespace(service.getMetadata().getNamespace()).list().getItems()); return clientForPod(pods); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clientsForPod,public List<J4pClient>  (Iterable<Pod> pods){ List<J4pClient> answer=new ArrayList<>(); for ( Pod pod : pods) { if (KubernetesHelper.isPodRunning(pod) && filterPod(pod)) { J4pClient client=clientForPod(pod); if (client != null) { answer.add(client); } } } return answer; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clientsForReplicationController,public List<J4pClient>  (String replicationControllerName String namespace){ ReplicationController replicationController=requireReplicationController(replicationControllerName namespace); List<Pod> pods=KubernetesHelper.getPodsForReplicationController(replicationController kubernetes.pods().inNamespace(namespace).list().getItems()); return clientsForPod(pods); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,clientsForService,public List<J4pClient>  (Service service){ List<Pod> pods=KubernetesHelper.getPodsForService(service kubernetes.pods().inNamespace(service.getMetadata().getNamespace()).list().getItems()); return clientsForPod(pods); } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,createJolokiaClient,"protected J4pClient  (Container container String jolokiaUrl){ String name=container.getName(); LOG.debug(""Creating jolokia client for : "" + name + "" at URL: ""+ jolokiaUrl); J4pClientBuilder builder=J4pClient.url(jolokiaUrl); if (useKubeProxy) { URL masterUrl=getKubernetes().getMasterUrl(); if (masterUrl != null && masterUrl.toString().startsWith(""https"")) { try { SSLContext sslCtx=SSLUtils.sslContext(kubernetes.getConfiguration()); ConnectionSocketFactory factory=new SSLConnectionSocketFactory(sslCtx); builder=builder.sslConnectionSocketFactory(factory); } catch ( Exception e) { LOG.warn(""Unable to inject the Kubernetes SSL context into the Jolokia client. Using the default context"" e); } } } AuthenticationMode mode=locateAuthenticationMode(); switch (mode) { case BEARER: builder=builder.authenticator(new BearerTokenAuthenticator()); String token=kubernetes.getConfiguration().getOauthToken(); builder=builder.user(token); break; case BASIC: builder=builder.authenticator(new BasicAuthenticator()); if (Strings.isNotBlank(user)) { builder=builder.user(user); } if (Strings.isNotBlank(password)) { builder=builder.password(password); } break; default : throw new IllegalStateException(""Unsupported authentication mode: "" + mode); } return builder.build(); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,createJolokiaClientFromHostAndPort,"protected J4pClient  (Container container String host Integer hostPort){ String jolokiaUrl=locateJolokiaProtocol() + ""://"" + host+ "":""+ hostPort+ ""/jolokia/""; return createJolokiaClient(container jolokiaUrl); } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,filterPod,protected boolean  (Pod pod){ if (podFilter != null) { return podFilter.matches(pod); } else { return true; } } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,getAuthenticationMode,public AuthenticationMode  (){ return authenticationMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,getKubernetes,public KubernetesClient  (){ return kubernetes; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,getPassword,public String  (){ return password; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,getPodFilter,public Filter<Pod>  (){ return podFilter; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,getProtocol,public String  (){ return protocol; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,getUser,public String  (){ return user; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,hasDocker,protected boolean  (Pod pod){ PodStatus currentState=pod.getStatus(); if (currentState != null) { List<ContainerStatus> containerStatuses=currentState.getContainerStatuses(); } return false; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,isUseKubeProxy,public boolean  (){ return useKubeProxy; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,locateAuthenticationMode,protected AuthenticationMode  (){ if (this.authenticationMode != null) { return this.authenticationMode; } if (KubernetesHelper.isOpenShift(kubernetes)) { return AuthenticationMode.BEARER; } return AuthenticationMode.BASIC; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,locateJolokiaProtocol,"protected String  (){ if (this.protocol != null) { return protocol; } if (KubernetesHelper.isOpenShift(kubernetes)) { return ""https""; } return ""http""; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,requireReplicationController,"protected ReplicationController  (String replicationControllerName String namespace){ ReplicationController answer=kubernetes.replicationControllers().inNamespace(namespace).withName(replicationControllerName).get(); Objects.requireNonNull(answer ""No ReplicationController found for namespace: "" + namespace + "" name: ""+ replicationControllerName); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,requireService,"protected Service  (String serviceName String namespace){ Service answer=kubernetes.services().inNamespace(namespace).withName(serviceName).get(); Objects.requireNonNull(answer ""No Service found for namespace: "" + namespace + "" name: ""+ serviceName); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,setAuthenticationMode,public void  (AuthenticationMode authenticationMode){ this.authenticationMode=authenticationMode; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,setPassword,public void  (String password){ this.password=password; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,setPodFilter,public void  (Filter<Pod> podFilter){ this.podFilter=podFilter; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,setProtocol,public void  (String protocol){ this.protocol=protocol; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,setUseKubeProxy,public void  (boolean useKubeProxy){ this.useKubeProxy=useKubeProxy; } 
C:\Users\User\Desktop\Thesis\fabric8\components\kubernetes-jolokia\src\main\java\io\fabric8\kubernetes\jolokia\JolokiaClients.java,setUser,public void  (String user){ this.user=user; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\EntitySupport.java,getId,public String  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\EntitySupport.java,setId,public void  (String id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\DtoSupport.java,getAdditionalProperties,@JsonAnyGetter public Map<String Object>  (){ return this.additionalProperties; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\DtoSupport.java,setAdditionalProperty,@JsonAnySetter public void  (String name Object value){ this.additionalProperties.put(name value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClient.java,LetsChatClient,public  (String address String username String password String authToken){ super(address username password authToken); } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClient.java,createWebClient,@Override protected <T>T  (Class<T> clientType){ List<Object> providers=WebClients.createProviders(); providers.add(new Authenticator()); WebClient webClient=WebClient.create(address providers); disableSslChecks(webClient); return JAXRSClientFactory.fromC
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClient.java,filter,"public void  (ClientRequestContext requestContext) throws IOException { MultivaluedMap<String Object> headers=requestContext.getHeaders(); String authenticationHeader=getAuthenticationHeader(); if (Strings.isNotBlank(authenticationHeader)) { headers.add(""Authorization"" authenticationHeader); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClient.java,getAuthenticationHeader,"private String  (){ String token=getAuthToken(); if (Strings.isNotBlank(token)) { return ""Bearer "" + token; } else { String userPassword=getUsername() + "":"" + getPassword(); try { return ""Basic "" + DatatypeConverter.printBase64Binary(userPassword.getBytes(""UTF-8"")); } catch ( UnsupportedEncodingException ex) { throw new IllegalStateException(""Cannot encode with UTF-8"" ex); } } } "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatKubernetes.java,createLetsChat,"public static LetsChatClient  (KubernetesClient kubernetes){ String userName=Systems.getEnvVarOrSystemProperty(LETSCHAT_HUBOT_USERNAME ""fabric8""); String password=Systems.getEnvVarOrSystemProperty(LETSCHAT_HUBOT_PASSWORD ""RedHat$1""); String token=Systems.getEnvVarOrSystemProperty(LETSCHAT_HUBOT_TOKEN); String namespace=KubernetesHelper.defaultNamespace(); String address; try { address=KubernetesHelper.getServiceURL(kubernetes ServiceNames.LETSCHAT namespace ""http"" true); if (Strings.isNullOrBlank(address)) { LOG.warn(""No LetsChat service could be found in kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } } catch ( Exception e) { LOG.warn(""No LetsChat service could be found in kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } LOG.info(""Logging into LetsChat at "" + address + "" as user ""+ userName); return new LetsChatClient(address userName password token); } "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClientSupport.java,LetsChatClientSupport,public  (String address String username String password String authToken){ this.address=address; this.username=username; this.password=password; this.authToken=authToken; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClientSupport.java,call,@Override public List<UserDTO>  () throws Exception { return getApi().getRoomUsers(idOrSlug); } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\LetsChatClientSupport.java,createRoom,"@POST @Path(""rooms"") public RoomDTO  (RoomDTO dto){ return getApi().createRoom(dto); } "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,getCreated,public Date  (){ return created; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,getLastActive,public Date  (){ return lastActive; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,getOwner,public String  (){ return owner; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,getSlug,public String  (){ return slug; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,setCreated,public void  (Date created){ this.created=created; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,setLastActive,public void  (Date lastActive){ this.lastActive=lastActive; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,setOwner,public void  (String owner){ this.owner=owner; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,setSlug,public void  (String slug){ this.slug=slug; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\RoomDTO.java,toString,"@Override public String  (){ return ""RoomDTO{"" + ""slug='"" + slug + '\''+ ""  name='""+ name+ '\''+ ""  owner='""+ owner+ '\''+ ""  description='""+ description+ '\''+ ""  created=""+ created+ ""  lastActive=""+ lastActive+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,getOwner,public UserDTO  (){ return owner; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,getPosted,public Date  (){ return posted; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,getRoom,public RoomDTO  (){ return room; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,getText,public String  (){ return text; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,setOwner,public void  (UserDTO owner){ this.owner=owner; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,setPosted,public void  (Date posted){ this.posted=posted; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,setRoom,public void  (RoomDTO room){ this.room=room; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,setText,public void  (String text){ this.text=text; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\MessageDTO.java,toString,"@Override public String  (){ return ""MessageDTO{"" + ""owner="" + owner + ""  room=""+ room+ ""  text='""+ text+ '\''+ ""  posted=""+ posted+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\Rooms.java,setOwner,public static void  (RoomDTO room UserDTO account){ if (room != null && account != null) { room.setOwner(account.getId()); } } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,getAvatar,public String  (){ return avatar; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,getDisplayName,public String  (){ return displayName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,getFirstName,public String  (){ return firstName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,getLastName,public String  (){ return lastName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,getUsername,public String  (){ return username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,setAvatar,public void  (String avatar){ this.avatar=avatar; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,setDisplayName,public void  (String displayName){ this.displayName=displayName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,setFirstName,public void  (String firstName){ this.firstName=firstName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,setLastName,public void  (String lastName){ this.lastName=lastName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\UserDTO.java,setUsername,public void  (String username){ this.username=username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,getMessage,public String  (){ return message; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,getStatus,public String  (){ return status; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,getToken,public String  (){ return token; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,setMessage,public void  (String message){ this.message=message; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,setStatus,public void  (String status){ this.status=status; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,setToken,public void  (String token){ this.token=token; } 
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\main\java\io\fabric8\letschat\TokenDTO.java,toString,"@Override public String  (){ return ""TokenDTO{"" + ""message='"" + message + '\''+ ""  status='""+ status+ '\''+ ""  token='""+ token+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\test\java\io\fabric8\letschat\Example.java,main,"public static void  (String[] args){ String roomName=""fabric8_default""; if (args.length > 0) { roomName=args[0]; } try { KubernetesClient kubernetes=new DefaultKubernetesClient(); LetsChatClient letschat=LetsChatKubernetes.createLetsChat(kubernetes); System.out.println(""Connecting to letschat on: "" + letschat.getAddress()); List<RoomDTO> rooms=letschat.getRooms(); for ( RoomDTO room : rooms) { System.out.println(""Room "" + room.getId() + "" has slug: ""+ room.getSlug()+ "" name ""+ room.getName()); } RoomDTO myRoom=letschat.getRoom(roomName); System.out.println(""Found room: "" + myRoom + "" by slug: ""+ roomName); RoomDTO notExist=letschat.getRoom(""does-not-exist""); System.out.println(""Found non existing room: "" + notExist); RoomDTO newRoom=letschat.getOrCreateRoom(""my_new_room_slug""); System.out.println(""Found/created room: "" + newRoom); } catch ( Exception e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\letschat-api\src\test\java\io\fabric8\letschat\JsonTest.java,testRoom,"@Test public void  () throws Exception { RoomDTO dto=new RoomDTO(); dto.setName(""foo""); dto.setDescription(""some description""); dto.setId(""abcd""); dto.setOwner(""someUUID""); String json=JsonHelper.toJson(dto); System.out.println(""DTO "" + dto + "" is json: """
C:\Users\User\Desktop\Thesis\fabric8\components\rest-utils\src\main\java\io\fabric8\rest\utils\RestCorsFilter.java,doFilter,@Override public void  (ServletRequest request ServletResponse response FilterChain chain) throws IOException  ServletException { if (response instanceof HttpServletResponse) { HttpServletResponse httpResponse=(HttpServletResponse)response; httpResponse.s
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-annotator\src\main\java\io\fabric8\swagger\annotator\SwaggerAnnotator.java,SwaggerAnnotator,public  (GenerationConfig generationConfig){ super(generationConfig); } 
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-annotator\src\main\java\io\fabric8\swagger\annotator\SwaggerAnnotator.java,isAdditionalPropertiesSupported,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-annotator\src\main\java\io\fabric8\swagger\annotator\SwaggerAnnotator.java,propertyOrder,@Override public void  (JDefinedClass clazz JsonNode propertiesNode){ clazz.annotate(ToString.class); clazz.annotate(EqualsAndHashCode.class); } 
C:\Users\User\Desktop\Thesis\fabric8\components\rest-utils\src\main\java\io\fabric8\rest\utils\Servers.java,startServer,"public static Server  (String appName Function<ServletContextHandler Void> contextCallback String defaultPort) throws Exception { String port=Systems.getEnvVarOrSystemProperty(""HTTP_PORT"" ""HTTP_PORT"" defaultPort); Integer num=Integer.parseInt(port); String service=Systems.getEnvVarOrSystemProperty(""WEB_CONTEXT_PATH"" ""WEB_CONTEXT_PATH"" """"); String servicesPath=""cxf/servicesList""; String servletContextPath=""/"" + service; ManagedApi.setSingletonCxfServletContext(servletContextPath); String url=""http://localhost:"" + port + servletContextPath; if (!url.endsWith(""/"")) { url+=""/""; } System.out.println(); System.out.println(""-------------------------------------------------------------""); System.out.println(appName + "" is now running at: "" + url); System.out.println(""-------------------------------------------------------------""); System.out.println(); final Server server=new Server(num); final ServletHolder servletHolder=new ServletHolder(new CXFCdiServlet()); servletHolder.setInitParameter(""service-list-path"" ""/"" + servicesPath); final ServletContextHandler context=new ServletContextHandler(); context.setContextPath(""/""); context.addEventListener(new Listener()); context.addEventListener(new BeanManagerResourceBindingListener()); String servletPath=""/*""; if (Strings.isNotBlank(service)) { servletPath=servletContextPath + ""/*""; } context.addServlet(servletHolder servletPath); server.setHandler(context); EnumSet<DispatcherType> dispatches=EnumSet.allOf(DispatcherType.class); context.addFilter(RestCorsFilter.class ""/*"" dispatches); if (contextCallback != null) { contextCallback.apply(context); } server.start(); return server; } "
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\main\java\io\fabric8\swagger\SwaggerHelper.java,createObjectMapper,public static ObjectMapper  (){ ObjectMapper mapper=new ObjectMapper(); mapper.enable(SerializationFeature.INDENT_OUTPUT); return mapper; } 
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\main\java\io\fabric8\swagger\SwaggerHelper.java,toJson,public static String  (Object dto) throws JsonProcessingException { Class<?> clazz=dto.getClass(); return objectMapper.writerFor(clazz).writeValueAsString(dto); } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDetailDTO.java,getAuthToken,public String  (){ return authToken; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDetailDTO.java,setAuthToken,public void  (String authToken){ this.authToken=authToken; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDetailDTO.java,toString,"@Override public String  (){ return ""AuthDetailDTO{"" + ""authToken='"" + authToken + '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\DtoSupport.java,getAdditionalProperties,@JsonAnyGetter public Map<String Object>  (){ return this.additionalProperties; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\DtoSupport.java,setAdditionalProperty,@JsonAnySetter public void  (String name Object value){ this.additionalProperties.put(name value); } 
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\test\java\io\fabric8\swagger\model\ParseTest.java,assertParseExampleFile,"public static <T>T  (String fileName Class<T> clazz) throws Exception { ObjectMapper mapper=SwaggerHelper.createObjectMapper(); File exampleFile=new File(getExamplesDir() fileName); assertFileExists(exampleFile); T answer=mapper.readerFor(clazz).readValue(exampleFile); assertNotNull(""Null returned while unmarshalling "" + exampleFile answer); LOG.info(""Parsed: "" + fileName + "" as: ""+ answer); return answer; } "
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\test\java\io\fabric8\swagger\model\ParseTest.java,getExamplesDir,"public static File  (){ String basedir=System.getProperty(""basedir"" "".""); String path=basedir + ""/src/test/resources""; File dir=new File(path); assertTrue(""Kube directory "" + dir + "" does not exist! Please supply the correct value in the ""+ SYSTEM_PROPERTY_KUBE_DIR+ "" system property value"" dir.exists()); return dir; } "
C:\Users\User\Desktop\Thesis\fabric8\components\swagger-model\src\test\java\io\fabric8\swagger\model\ParseTest.java,testParseExample,"@Test public void  () throws Exception { ApiDeclaration apiDeclaration=assertParseExampleFile(""example.json"" ApiDeclaration.class); System.out.println(""Got resource listing: "" + apiDeclaration); String json=SwaggerHelper.toJson(apiDeclaration); LOG.info("""
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,getPassword,public String  (){ return password; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,getType,public String  (){ return type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,getUsername,public String  (){ return username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,setPassword,public void  (String password){ this.password=password; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,setType,public void  (String type){ this.type=type; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\AuthDTO.java,setUsername,public void  (String username){ this.username=username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\EntitySupport.java,getId,public Long  (){ return id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\EntitySupport.java,setId,public void  (Long id){ this.id=id; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,getSecret,public String  (){ return secret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,getWebhooksUrl,public String  (){ return webhooksUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,setSecret,public void  (String secret){ this.secret=secret; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,setWebhooksUrl,public void  (String webhooksUrl){ this.webhooksUrl=webhooksUrl; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ModuleDTO.java,toString,"@Override public String  (){ return ""ModuleDTO{"" + ""secret='"" + secret + '\''+ ""  webhooksUrl='""+ webhooksUrl+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,getDescription,public String  (){ return description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,getName,public String  (){ return name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,getSlug,public String  (){ return slug; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,getUsers,public List<UserDTO>  (){ return users; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,isBacklogActivated,public boolean  (){ return isBacklogActivated; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,isIssuesActivated,public boolean  (){ return isIssuesActivated; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,isKanbanActivated,public boolean  (){ return isKanbanActivated; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,isWikiActivated,public boolean  (){ return isWikiActivated; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,setDescription,public void  (String description){ this.description=description; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,setIsBacklogActivated,public void  (boolean isBacklogActivated){ this.isBacklogActivated=isBacklogActivated; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,setIsIssuesActivated,public void  (boolean isIssuesActivated){ this.isIssuesActivated=isIssuesActivated; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,setIsKanbanActivated,public void  (boolean isKanbanActivated){ this.isKanbanActivated=isKanbanActivated; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,setIsWikiActivated,public void  (boolean isWikiActivated){ this.isWikiActivated=isWikiActivated; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,setName,public void  (String name){ this.name=name; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,setSlug,public void  (String slug){ this.slug=slug; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,setUsers,public void  (List<UserDTO> users){ this.users=users; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\ProjectDTO.java,toString,"@Override public String  (){ return ""ProjectDTO{"" + ""name='"" + name + '\''+ ""  slug='""+ slug+ '\''+ ""  description='""+ description+ '\''+ '}'; } "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\Projects.java,addUser,"public static void  (ProjectDTO project UserDTO user){ if (user != null) { Objects.notNull(project ""project""); List<UserDTO> users=project.getUsers(); if (users == null) { users=new ArrayList<>(); } users.add(user); project.setUsers(users); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClient.java,TaigaClient,public  (String address String username String password){ super(address username password); } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClient.java,createWebClient,@Override protected <T>T  (Class<T> clientType){ List<Object> providers=WebClients.createProviders(); providers.add(new Authenticator()); WebClient webClient=WebClient.create(address providers); disableSslChecks(webClient); return JAXRSClientFactory.fromC
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClient.java,filter,"public void  (ClientRequestContext requestContext) throws IOException { MultivaluedMap<String Object> headers=requestContext.getHeaders(); String authenticationHeader=getAuthenticationHeader(); if (Strings.isNotBlank(authenticationHeader)) { headers.add(""Authorization"" authenticationHeader); } } "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClient.java,getAuthenticationHeader,"private String  (){ String token=getAuthToken(); if (Strings.isNotBlank(token)) { return ""Bearer "" + token; } else { return null; } } "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaModule.java,toModuleKey,public String  (){ return this.toString().toLowerCase(); } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaKubernetes.java,createTaiga,"public static TaigaClient  (KubernetesClient kubernetes String namespace){ String userName=Systems.getEnvVarOrSystemProperty(""TAIGA_USERNAME"" ""admin""); String password=Systems.getEnvVarOrSystemProperty(""TAIGA_PASSWORD"" ""123123""); String address=null; try { address=KubernetesHelper.getServiceURL(kubernetes ServiceNames.TAIGA namespace ""http"" true); if (Strings.isNullOrBlank(address)) { LOG.warn(""No Taiga service could be found in kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } } catch ( Exception e) { LOG.warn(""No Taiga service could be found in kubernetes "" + namespace + "" on address: ""+ kubernetes.getMasterUrl()); return null; } LOG.info(""Logging into Taiga at "" + address + "" as user ""+ userName); return new TaigaClient(address userName password); } "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getBigPhoto,public String  (){ return bigPhoto; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getBio,public String  (){ return bio; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getColor,public String  (){ return color; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getDefaultLanguage,public String  (){ return defaultLanguage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getDefaultTimezone,public String  (){ return defaultTimezone; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getFullName,public String  (){ return fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getFullNameDisplay,public String  (){ return fullNameDisplay; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getPhoto,public String  (){ return photo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,getUsername,public String  (){ return username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,isActive,public boolean  (){ return isActive; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setBigPhoto,public void  (String bigPhoto){ this.bigPhoto=bigPhoto; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setBio,public void  (String bio){ this.bio=bio; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setColor,public void  (String color){ this.color=color; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setDefaultLanguage,public void  (String defaultLanguage){ this.defaultLanguage=defaultLanguage; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setDefaultTimezone,public void  (String defaultTimezone){ this.defaultTimezone=defaultTimezone; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setFullName,public void  (String fullName){ this.fullName=fullName; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setFullNameDisplay,public void  (String fullNameDisplay){ this.fullNameDisplay=fullNameDisplay; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setIsActive,public void  (boolean isActive){ this.isActive=isActive; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setPhoto,public void  (String photo){ this.photo=photo; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\UserDTO.java,setUsername,public void  (String username){ this.username=username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClientSupport.java,TaigaClientSupport,public  (String address String username String password){ this.address=address; this.password=password; this.username=username; } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClientSupport.java,call,@Override public Map<String ModuleDTO>  () throws Exception { return getApi().getModulesForProject(id); } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\main\java\io\fabric8\taiga\TaigaClientSupport.java,createProject,public ProjectDTO  (ProjectDTO dto){ return getApi().createProject(dto); } 
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\test\java\io\fabric8\taiga\JsonTest.java,testProject,"@Test public void  () throws Exception { ProjectDTO dto=new ProjectDTO(); dto.setName(""foo""); dto.setDescription(""some description""); dto.setId(1234L); String json=JsonHelper.toJson(dto); System.out.println(""DTO "" + dto + "" is json: ""+ json); } "
C:\Users\User\Desktop\Thesis\fabric8\components\taiga-api\src\test\java\io\fabric8\taiga\Example.java,main,"public static void  (String[] args){ String projectName=""admin-beer""; if (args.length > 0) { projectName=args[0]; } try { KubernetesClient kubernetes=new DefaultKubernetesClient(); TaigaClient taiga=TaigaKubernetes.createTaiga(kubernetes KubernetesHelper.defaultNamespace()); System.out.println(""Connecting to taiga on: "" + taiga.getAddress()); ProjectDTO myProject=taiga.getProjectBySlug(projectName); System.out.println(""Found project: "" + myProject + "" by slug: ""+ projectName); System.out.println(""Project id for slug: "" + myProject + "" is: ""+ taiga.getProjectIdForSlug(projectName)); ProjectDTO notExist=taiga.getProjectBySlug(""does-not-exist""); System.out.println(""Found non existing project: "" + notExist); Map<String ModuleDTO> modules=taiga.getModulesForProject(projectName); System.out.println(""Available modules for "" + projectName + "" are: ""+ modules.keySet()); ModuleDTO gogsModule=taiga.moduleForProject(projectName TaigaModule.GOGS); System.out.println(""Gogs module for "" + projectName + "" is ""+ gogsModule); ProjectDTO autoCreateProject=taiga.getOrCreateProject(""thingy""); System.out.println(""getOrCreateProject: "" + autoCreateProject); List<ProjectDTO> projects=taiga.getProjects(); for ( ProjectDTO project : projects) { System.out.println(""Project "" + project.getId() + "" has slug: ""+ project.getSlug()+ "" name ""+ project.getName()); } } catch ( Exception e) { System.out.println(""Caught: "" + e); e.printStackTrace(); } } "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,error,protected void  (String message){ processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR message); } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,getElements,public Elements  (){ Elements elementUtils=null; if (processingEnv != null) { elementUtils=processingEnv.getElementUtils(); } return elementUtils; } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,javaTypeName,protected static String  (Element element){ TypeMirror typeMirror=element.asType(); return typeMirror.toString(); } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,log,protected void  (Throwable e){ processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR e.getMessage()); StringWriter buffer=new StringWriter(); PrintWriter writer=new PrintWriter(buffer); e.printStackTrace(writer); writer.close(); processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR buffer.toString()); } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,warning,protected void  (String message){ processingEnv.getMessager().printMessage(Diagnostic.Kind.WARNING message); } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\AbstractAnnotationProcessor.java,writeFile,"protected void  (String packageName String fileName String text){ Writer writer=null; try { Writer out; Filer filer=processingEnv.getFiler(); FileObject resource; try { resource=filer.getResource(StandardLocation.CLASS_OUTPUT packageName fileName); } catch ( Throwable e) { resource=filer.createResource(StandardLocation.CLASS_OUTPUT packageName fileName); } URI uri=resource.toUri(); File file=null; if (uri != null) { try { file=new File(uri.getPath()); } catch ( Exception e) { warning(""Could not convert output directory resource URI to a file "" + e); } } if (file == null) { warning(""No class output directory could be found!""); } else { file.getParentFile().mkdirs(); log(""Generating file "" + file); writer=new FileWriter(file); writer.write(text); } } catch ( IOException e) { log(e); } finally { IOHelper.close(writer); } } "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\IOHelper.java,close,public static void  (Closeable... closeables){ for ( Closeable closeable : closeables) { if (closeable != null) { try { closeable.close(); } catch ( IOException e) { } } } } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\ConfigPropertyAnnotationProcessor.java,process,"public boolean  (Set<? extends TypeElement> annotations final RoundEnvironment roundEnv){ if (roundEnv.processingOver()) { return true; } Set<? extends Element> elements=roundEnv.getElementsAnnotatedWith(ConfigProperty.class); if (!elements.isEmpty()) { StringBuilder buffer=new StringBuilder(""{""); buffer.append(""\n \""type\"": \""object\"" ""); log(""options: "" + processingEnv.getOptions()); buffer.append(""\n \""properties\"": {""); boolean first=true; for ( Element element : elements) { processEndpointClass(roundEnv element buffer first); first=false; } buffer.append(""\n }""); buffer.append(""\n}""); buffer.append(""\n""); String text=buffer.toString(); writeFile(""io.fabric8.environment"" ""schema.json"" text); } return true; } "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\ConfigPropertyAnnotationProcessor.java,processEndpointClass,"protected void  (final RoundEnvironment roundEnv final Element element StringBuilder buffer boolean first){ final ConfigProperty property=element.getAnnotation(ConfigProperty.class); if (property != null) { String defaultValue=property.defaultValue(); if (""org.apache.deltaspike.NullValueMarker"".equals(defaultValue)) { defaultValue=null; } String name=property.name(); String description=JavaDocs.getJavaDoc(getElements() element); String javaTypeName=javaTypeName(element); String jsonType=JsonSchemaTypes.getJsonSchemaTypeName(javaTypeName); if (!first) { buffer.append("" ""); } buffer.append(""\n \"""").append(name).append(""\"": {""); buffer.append(""\n \""type\"": \"""").append(jsonType).append(""\"" ""); if (defaultValue != null) { buffer.append(""\n \""default\"": \"""").append(defaultValue).append(""\"" ""); } if (description != null) { description=description.trim(); if (description.length() > 0) { buffer.append(""\n \""description\"": \"""").append(description).append(""\"" ""); } } buffer.append(""\n \""javaType\"": \"""").append(javaTypeName).append(""\""""); buffer.append(""\n }""); } } "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\JavaDocs.java,findParameterJavaDoc,"public static String  (String javadoc String parameterName){ Pattern regex=Pattern.compile("".*\\s+@param\\s+"" + parameterName + ""\\s+(.*)""); Matcher matcher=regex.matcher(javadoc); if (matcher.find()) { String prefix=matcher.group(1); if (!Strings.isNullOrEmpty(prefix)) { Pattern nextTag=Pattern.compile(""\\s+(@param|@return|@exception|@throws|@serialData|@see|@since|@deprecated)""); Matcher endMatcher=nextTag.matcher(prefix); if (endMatcher.find()) { int start=endMatcher.start(); return prefix.substring(0 start).trim(); } else { return prefix; } } } return null; } "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\JavaDocs.java,getJavaDoc,public static String  (Elements elementUtils Element element){ if (elementUtils != null) { String description=elementUtils.getDocComment(element); if (Strings.isNullOrEmpty(description) && element.getKind() == ElementKind.PARAMETER) { String parentDoc=getJavaDoc(elementUtils element.getEnclosingElement()); if (!Strings.isNullOrEmpty(parentDoc)) { return findParameterJavaDoc(parentDoc element.getSimpleName().toString()); } } return description; } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\JsonSchemaTypes.java,addTypeAliases,protected static void  (String jsonSchemaType String... javaTypeNames){ for ( String javaTypeName : javaTypeNames) { javaToJsonSchemaTypes.put(javaTypeName jsonSchemaType); } } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\JsonSchemaTypes.java,getJsonSchemaTypeName,public static String  (String javaTypeName){ String answer=javaToJsonSchemaTypes.get(javaTypeName); return answer != null ? answer : javaTypeName; } 
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\test\java\io\fabric8\tools\apt\ExtractParameterJavaDocTest.java,assertParamJavaDoc,"public static void  (String paramName String javadoc String expected){ String actual=JavaDocs.findParameterJavaDoc(javadoc paramName); assertEquals(""javadoc: "" + javadoc expected actual); } "
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\test\java\io\fabric8\tools\apt\ExtractParameterJavaDocTest.java,testFindingParameterJavaDoc,"@Test public void  () throws Exception { assertParamJavaDoc(""foo"" ""blah @param foo something here @param another thing"" ""something here""); assertParamJavaDoc(""foo"" ""blah @param foo something here"" ""something here""); assertParamJavaDoc(""foo"" ""blah @param c"
C:\Users\User\Desktop\Thesis\fabric8\fabric8-apt\src\main\java\io\fabric8\tools\apt\Strings.java,isNullOrEmpty,"public static boolean  (String text){ return text == null || text.length() == 0 || ""null"".equals(text); } "
C:\Users\User\Desktop\Thesis\fabric8\itests\src\test\java\io\fabric8\itests\BrokerProducerConsumerIT.java,invoke,@Override public void  () throws Exception { J4pClient brokerClient=jolokiaClients.assertClientForReplicationController(brokerReplicationControllerId); J4pClient consumerClient=jolokiaClients.assertClientForReplicationController(consumerReplicationControl
C:\Users\User\Desktop\Thesis\fabric8\itests\src\test\java\io\fabric8\itests\BrokerProducerConsumerIT.java,matches,@Override public boolean  (Pod podSchema){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\itests\src\test\java\io\fabric8\itests\BrokerProducerConsumerIT.java,testMQConsumer,@Test public void  () throws Exception { assertThat(client).replicationController(brokerReplicationControllerId).isNotNull(); assertThat(client).replicationController(consumerReplicationControllerId).isNotNull(); assertThat(client).pods().runningStatus().
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,artifactEquals,private boolean  (Artifact a1 Artifact a2){ if (a1 == a2) { return true; } if (!a1.getGroupId().equals(a2.getGroupId())) { return false; } else if (!a1.getArtifactId().equals(a2.getArtifactId())) { return false; } else if (!a1.getVersion().equals(a2.getVersion())) { return false; } else if (!a1.getType().equals(a2.getType())) { return false; } if (a1.getClassifier() == null || a1.getClassifier().isEmpty()) { return a2.getClassifier() == null || a2.getClassifier().isEmpty(); } return a1.getClassifier().equals(a2.getClassifier()); } 
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,artifactsToString,"private String  (List<Artifact> artifacts){ StringBuilder sb=new StringBuilder(); for ( Artifact art : artifacts) { sb.append("" "").append(art.toString()).append(System.getProperty(""line.separator"")); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,chmodExecutable,"private void  (File file){ try { Files.setPosixFilePermissions(file.toPath() PosixFilePermissions.fromString(""rwxr-xr-x"")); } catch ( Throwable ignore) { } } "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,collectClassPath,private ArrayList<Artifact>  () throws DependencyGraphBuilderException { ArtifactFilter filter=new ScopeArtifactFilter(scope); DependencyNode rootNode=dependencyGraphBuilder.buildDependencyGraph(project filter); final ArrayList<Artifact> artifacts=new ArrayList<>(); rootNode.accept(new DependencyNodeVisitor(){ @Override public boolean visit( DependencyNode dependencyNode){ artifacts.add(dependencyNode.getArtifact()); return true; } @Override public boolean endVisit( DependencyNode dependencyNode){ return true; } } ); return artifacts; } 
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,copyResource,"private void  (String source File target HashMap<String String> interpolations boolean unixLinedEndings) throws MojoExecutionException { try { String content=loadTextResource(getClass().getResource(source)); if (interpolations != null) { content=StringUtils.interpolate(content interpolations); } if (unixLinedEndings) { content=content.replaceAll(""\\r?\\n"" Matcher.quoteReplacement(""\n"")); } else { content=content.replaceAll(""\\r?\\n"" Matcher.quoteReplacement(""\r\n"")); } FileUtils.fileWrite(target content); } catch ( IOException e) { throw new MojoExecutionException(""Could create the "" + target + "" file"" e); } } "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,endVisit,@Override public boolean  (DependencyNode dependencyNode){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,execute,"public void  () throws MojoExecutionException  MojoFailureException { File libDir=new File(assembly ""lib""); libDir.mkdirs(); File binDir=new File(assembly ""bin""); binDir.mkdirs(); ArrayList<String> classpath=new ArrayList<String>(); ArrayList<Artifact> artifacts=null; try { artifacts=collectClassPath(); } catch ( DependencyGraphBuilderException e) { throw new MojoExecutionException(""Could not get classpath"" e); } getLog().debug(""Classpath for "" + scope + "":\n""+ artifactsToString(artifacts)); if (project.getArtifact().getFile() != null) { File target=new File(libDir project.getArtifact().getFile().getName()); classpath.add(target.getName()); try { FileUtils.copyFile(project.getArtifact().getFile() target); } catch ( IOException e) { throw new MojoExecutionException(""Could not copy artifact to lib dir"" e); } } Map artifactMap=getArtifactMap(); for ( Artifact x : artifacts) { Artifact artifact=(Artifact)artifactMap.get(versionlessKey(x)); if (artifact == null || artifact.getFile() == null || !artifactEquals(artifact x)) { continue; } getLog().debug(""Copying "" + artifact.toString()); File file=artifact.getFile().getAbsoluteFile(); try { File target=new File(libDir file.getName()); int dupCounter=1; while (classpath.contains(target.getName())) { target=new File(libDir ""dup"" + dupCounter + ""-""+ file.getName()); dupCounter++; } classpath.add(target.getName()); FileUtils.copyFile(artifact.getFile() target); } catch ( IOException e) { throw new MojoExecutionException(""Could not copy artifact to lib dir"" e); } } try { String classpathTxt=StringUtils.join(classpath.iterator() ""\n"") + ""\n""; FileUtils.fileWrite(new File(libDir ""classpath"") classpathTxt); } catch ( IOException e) { throw new MojoExecutionException(""Could create the classpath file"" e); } HashMap<String String> interpolations=new HashMap<String String>(); interpolations.put(""hawtapp.mvn.main.property"" javaMainClass != null ? javaMainClass : """"); File targetRun=new File(binDir ""run.sh""); copyResource(""bin/run.sh"" targetRun interpolations true); chmodExecutable(targetRun); File targetRunCmd=new File(binDir ""run.cmd""); copyResource(""bin/run.cmd"" targetRunCmd interpolations false); if (source != null && source.exists()) { try { FileUtils.copyDirectoryStructure(source assembly); } catch ( IOException e) { throw new MojoExecutionException(""Could copy the hawt-app resources"" e); } } Archiver archiver; String archiveExtension; if (archive.getName().endsWith("".tar"")) { archiver=tarArchiver; archiveExtension=""tar""; } else if (archive.getName().endsWith("".tar.gz"")) { ((TarArchiver)tarArchiver).setCompression(TarArchiver.TarCompressionMethod.gzip); archiver=tarArchiver; archiveExtension=""tar.gz""; } else if (archive.getName().endsWith("".zip"")) { archiver=zipArchiver; archiveExtension=""zip""; } else { throw new MojoExecutionException(""Invalid archive extension. Should be zip | tar | tar.gz""); } archiver.setDestFile(archive); archiver.addFileSet(fileSet(assembly).prefixed(archivePrefix).includeExclude(null new String[]{""bin/*""}).includeEmptyDirs(true)); archiver.setFileMode(0755); archiver.addFileSet(fileSet(assembly).prefixed(archivePrefix).includeExclude(new String[]{""bin/*""} null).includeEmptyDirs(true)); try { archiver.createArchive(); } catch ( IOException e) { throw new MojoExecutionException(""Could not create the "" + archive + "" file"" e); } projectHelper.attachArtifact(project archiveExtension archiveClassifier archive); } "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,getArtifactMap,private Map  (){ Set<Artifact> artifacts=project.getArtifacts(); LinkedHashMap artifactMap=new LinkedHashMap(); if (project.getArtifacts() != null) { Iterator i$=artifacts.iterator(); while (i$.hasNext()) { Artifact artifact=(Artifact)i$.next(); artifactMap.put(versionlessKey(artifact) artifact); } } return artifactMap; } 
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,loadTextResource,"private String  (URL resource) throws IOException { InputStream is=resource.openStream(); try { return IOUtil.toString(is ""UTF-8""); } finally { IOUtil.close(is); } } "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,versionlessKey,"private String  (Artifact artifact){ String groupId=artifact.getGroupId(); String artifactId=artifact.getArtifactId(); String type=artifact.getType(); String classifier=artifact.getClassifier(); if (groupId == null) { throw new NullPointerException(""groupId is null""); } else if (artifactId == null) { throw new NullPointerException(""artifactId is null""); } else if (type == null) { throw new NullPointerException(""type is null""); } if (classifier == null || classifier.isEmpty()) { return groupId + "":"" + artifactId+ "":""+ type; } return groupId + "":"" + artifactId+ "":""+ type+ "":""+ classifier; } "
C:\Users\User\Desktop\Thesis\fabric8\hawt-app-maven-plugin\src\main\java\io\fabric8\maven\hawt\app\BuildMojo.java,visit,@Override public boolean  (DependencyNode dependencyNode){ artifacts.add(dependencyNode.getArtifact()); return true; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,FabricGitProfileFileAttributes,private  (String type long size){ this.type=type; this.size=size; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,FabricProfileFileSystem,public  (FabricProfileFileSystemProvider fileSystemProvider Map<String Object> contents){ this.fileSystemProvider=fileSystemProvider; this.contents=contents; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,creationTime,@Override public FileTime  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,fileKey,@Override public Object  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,getDirectory,"@SuppressWarnings(""unchecked"") private List<String>  (Path dir) throws IOException { final Object content=loadContent(dir.toAbsolutePath().toString()); if (!(content instanceof List)) { throw new IOException(""Is not a directory""); } return (List<String>)c"
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,getFile,"@SuppressWarnings(""unchecked"") private byte[]  (Path dir) throws IOException { final Object content=loadContent(dir.toAbsolutePath().toString()); if (!(content instanceof byte[])) { throw new IOException(""Is not a file""); } return (byte[])content; } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,getFileStores,@Override public Iterable<FileStore>  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,afterAll,@AfterClass public static void  () throws Exception { final int[] resultPointer=new int[1]; StringWriter sw=new StringWriter(); Set<String> modules=new HashSet<String>(); for ( final String outDir : outDirs) { String module=new File(outDir).getName(); if 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,getPath,@Override public Path  (String first String... more){ String path; if (more.length == 0) { path=first; } else { StringBuilder sb=new StringBuilder(); sb.append(first); for ( String segment : more) { if (segment.length() > 0) { if (sb.length() > 0) { sb.ap
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,assertArchetypeCreated,"private void  (String artifactId String groupId String version File archetypejar) throws Exception { File outDir=new File(basedir ""target/"" + artifactId + ""-output""); System.out.println(""Creating Archetype "" + groupId + "":""+ artifactId+ "":""+ version); Map<String String> properties=new ArchetypeHelper(archetypejar outDir groupId artifactId version null null).parseProperties(); System.out.println(""Has preferred properties: "" + properties); ArchetypeHelper helper=new ArchetypeHelper(archetypejar outDir groupId artifactId version null null); helper.setPackageName(packageName); HashMap<String String> overrideProperties=new HashMap<String String>(); overrideProperties.put(""scheme"" ""mycomponent""); helper.setOverrideProperties(overrideProperties); helper.execute(); File pom=new File(outDir ""pom.xml""); assertFileExists(pom); String pomText=IOUtils.toString(new FileReader(pom)); String badText=""${camel-""; if (pomText.contains(badText)) { if (verbose) { System.out.println(pomText); } fail("""" + pom + "" contains ""+ badText); } outDirs.add(outDir.getPath()); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,assertFileExists,"protected void  (File file){ assertTrue(""file should exist: "" + file file.exists()); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,getPathMatcher,"@Override public PathMatcher  (String syntaxAndPattern){ int colonIndex=syntaxAndPattern.indexOf(':'); if (colonIndex <= 0 || colonIndex == syntaxAndPattern.length() - 1) { throw new IllegalArgumentException(""syntaxAndPattern must have form \""syntax:patte"
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,run,"@Override public void  (){ System.out.println(""Invoking projects in "" + outDir); MavenCli maven=new MavenCli(); resultPointer[0]=maven.doMain(new String[]{""clean"" ""package"" ""-f"" ""archetypes-test-pom.xml""} outDir System.out System.out); System.out.println("
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,testGenerateActiveMQArchetype,"@Test public void  () throws Exception { assertArchetypeCreated(""camel-archetype-activemq""); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,testGenerateComponentArchetype,"@Test public void  () throws Exception { assertArchetypeCreated(""camel-archetype-component"" ""org.apache.camel.archetypes"" camelVersion); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,testGenerateDataformatArchetype,"@Test public void  () throws Exception { assertArchetypeCreated(""camel-archetype-dataformat""); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,getRootDirectories,@Override public Iterable<Path>  (){ return Collections.<Path>singleton(new FabricProfilePath(this new byte[]{'/'})); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,getSeparator,"@Override public String  (){ return ""/""; } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,testGenerateDroolsArchetype,"@Test @Ignore public void  () throws Exception { String artifactId=""karaf-camel-drools-archetype""; assertArchetypeCreated(artifactId ""io.fabric8"" projectVersion new File(basedir ""../archetypes/"" + artifactId + ""/target/""+ artifactId+ ""-""+ projectVersion+ "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,getUserPrincipalLookupService,@Override public UserPrincipalLookupService  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,testGenerateJavaArchetype,"@Test public void  () throws Exception { assertArchetypeCreated(""camel-archetype-java""); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,testGenerateQuickstartArchetypes,"@Test public void  () throws Exception { String[] dirs=new File(basedir ""../archetypes"").list(new FilenameFilter(){ @Override public boolean accept( File dir  String name){ return new File(dir name).isDirectory() && !EXCLUDED_ARCHETYPES.contains(name); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\archetype-itests\src\test\java\io\fabric8\tooling\archetype\generator\ArchetypeTest.java,testGenerateSpringArchetype,"@Test public void  () throws Exception { assertArchetypeCreated(""camel-archetype-spring""); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,globToRegex,"private String  (String pattern){ StringBuilder sb=new StringBuilder(pattern.length()); int inGroup=0; int inClass=0; int firstIndexInClass=-1; char[] arr=pattern.toCharArray(); for (int i=0; i < arr.length; i++) { char ch=arr[i]; switch (ch) { case '\\': if (++i >= arr.length) { sb.append('\\'); } else { char next=arr[i]; switch (next) { case ' ': break; case 'Q': case 'E': sb.append('\\'); default : sb.append('\\'); } sb.append(next); } break; case '*': if (inClass == 0) sb.append("".*""); else sb.append('*'); break; case '?': if (inClass == 0) sb.append('.'); else sb.append('?'); break; case '[': inClass++; firstIndexInClass=i + 1; sb.append('['); break; case ']': inClass--; sb.append(']'); break; case '.': case '(': case ')': case '+': case '|': case '^': case '$': case '@': case '%': if (inClass == 0 || (firstIndexInClass == i && ch == '^')) sb.append('\\'); sb.append(ch); break; case '!': if (firstIndexInClass == i) sb.append('^'); else sb.append('!'); break; case '{': inGroup++; sb.append('('); break; case '}': inGroup--; sb.append(')'); break; case ' ': if (inGroup > 0) sb.append('|'); else sb.append(' '); break; default : sb.append(ch); } } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,hasNext,@Override public boolean  (){ return delegate.hasNext(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,isDirectory,"@Override public boolean  (){ return ""directory"".equals(type); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,isOpen,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,isOther,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,isReadOnly,@Override public boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,isRegularFile,"@Override public boolean  (){ return ""file"".equals(type); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,isSymbolicLink,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,iterator,@Override public Iterator<Path>  (){ return new Iterator<Path>(){ final Iterator<String> delegate=directory.iterator(); @Override public boolean hasNext(){ return delegate.hasNext(); } @Override public Path next(){ String val=delegate.next(); return new F
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,lastAccessTime,@Override public FileTime  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,lastModifiedTime,@Override public FileTime  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,loadContent,private Object  (String path) throws IOException { return contents.get(path); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,matches,@Override public boolean  (Path path){ return regex.matcher(path.toString()).matches(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,newByteChannel,public <A extends BasicFileAttributes>SeekableByteChannel  (Path path Set<? extends OpenOption> options FileAttribute<?>[] attrs) throws IOException { final byte[] data=getFile(path); return new SeekableByteChannel(){ long position; @Override public int read( ByteBuffer dst) throws IOException { int l=(int)Math.min(dst.remaining() size() - position); dst.put(data (int)position l); position+=l; return l; } @Override public int write( ByteBuffer src) throws IOException { throw new UnsupportedOperationException(); } @Override public long position() throws IOException { return position; } @Override public SeekableByteChannel position( long newPosition) throws IOException { position=newPosition; return this; } @Override public long size() throws IOException { return data.length; } @Override public SeekableByteChannel truncate( long size) throws IOException { throw new UnsupportedOperationException(); } @Override public boolean isOpen(){ return true; } @Override public void close() throws IOException { } } ; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,newDirectoryStream,public DirectoryStream<Path>  (final Path dir DirectoryStream.Filter<? super Path> filter) throws IOException { final List<String> directory=getDirectory(dir); return new DirectoryStream<Path>(){ @Override public Iterator<Path> iterator(){ return new Iterator<Path>(){ final Iterator<String> delegate=directory.iterator(); @Override public boolean hasNext(){ return delegate.hasNext(); } @Override public Path next(){ String val=delegate.next(); return new FabricProfilePath(FabricProfileFileSystem.this val.getBytes(StandardCharsets.UTF_8)); } @Override public void remove(){ throw new UnsupportedOperationException(); } } ; } @Override public void close() throws IOException { } } ; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,newInputStream,public InputStream  (Path path OpenOption[] options) throws IOException { byte[] data=getFile(path); return new ByteArrayInputStream(data); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,newWatchService,@Override public WatchService  () throws IOException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,next,@Override public Path  (){ String val=delegate.next(); return new FabricProfilePath(FabricProfileFileSystem.this val.getBytes(StandardCharsets.UTF_8)); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,position,@Override public SeekableByteChannel  (long newPosition) throws IOException { position=newPosition; return this; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,provider,@Override public FileSystemProvider  (){ return fileSystemProvider; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,read,@Override public int  (ByteBuffer dst) throws IOException { int l=(int)Math.min(dst.remaining() size() - position); dst.put(data (int)position l); position+=l; return l; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,readAttributes,"public <A extends BasicFileAttributes>A  (Path path Class<A> clazz LinkOption... options) throws IOException { if (clazz != BasicFileAttributes.class) { throw new UnsupportedOperationException(); } Path absolute=path.toAbsolutePath(); Object desc=contents.get(absolute.toString()); if (desc == null) { throw new FileNotFoundException(path.toString()); } String type; long size; if (desc instanceof List) { type=""directory""; size=0; } else if (desc instanceof byte[]) { type=""file""; size=((byte[])desc).length; } else { throw new IllegalStateException(); } return (A)new FabricGitProfileFileAttributes(type size); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,remove,@Override public void  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,size,@Override public long  (){ return size; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,supportedFileAttributeViews,@Override public Set<String>  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,truncate,@Override public SeekableByteChannel  (long size) throws IOException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystem.java,write,@Override public int  (ByteBuffer src) throws IOException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,addChild,"private void  (Path child Object content){ String par=""/"" + path.relativize(child.getParent()).toString(); String str=""/"" + path.relativize(child).toString(); if (!""/"".equals(str)) { if (str.endsWith(""/"")) { str=str.substring(0 str.length() - 1); } ((List<String>)contents.get(par)).add(str); } contents.put(str content); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,buildFileSystem,"private FabricProfileFileSystem  (final Path path) throws IOException { final Map<String Object> contents=new HashMap<>(); Files.walkFileTree(path new SimpleFileVisitor<Path>(){ @Override public FileVisitResult preVisitDirectory( Path dir  BasicFileAttributes attrs) throws IOException { addChild(dir new ArrayList<String>()); return FileVisitResult.CONTINUE; } @Override public FileVisitResult visitFile( Path file  BasicFileAttributes attrs) throws IOException { byte[] content=Files.readAllBytes(file); if (file.getFileName().toString().equals(""io.fabric8.agent.properties"")) { file=file.resolveSibling(""profile.cfg""); } else if (file.getFileName().toString().contains("".properties"")) { file=file.resolveSibling(file.getFileName().toString().replace("".properties"" "".cfg"")); } if (file.getFileName().toString().contains("".cfg"")) { Properties props=new Properties(false); props.load(new ByteArrayInputStream(content)); for ( Map.Entry<String String> entry : props.entrySet()) { String val=entry.getValue(); val=val.replace(""${profile:io.fabric8.agent/"" ""${profile:profile/""); val=val.replace(""${version:"" ""${profile:io.fabric8.version/""); val=val.replace(""${runtime."" ""${karaf.""); Matcher matcher=Pattern.compile("".*\\$\\{(.*?):.*?\\}.*"").matcher(val); if (matcher.matches()) { String scheme=matcher.group(1); if (!""profile"".equals(scheme)) { System.out.println(""Unsupported scheme: "" + entry.getKey() + "" = ""+ val+ "" in ""+ path.relativize(file)); } } entry.setValue(val); } ByteArrayOutputStream baos=new ByteArrayOutputStream(); props.save(baos); baos.flush(); content=baos.toByteArray(); } addChild(file content); return FileVisitResult.CONTINUE; } private void addChild( Path child  Object content){ String par=""/"" + path.relativize(child.getParent()).toString(); String str=""/"" + path.relativize(child).toString(); if (!""/"".equals(str)) { if (str.endsWith(""/"")) { str=str.substring(0 str.length() - 1); } ((List<String>)contents.get(par)).add(str); } contents.put(str content); } } ); return new FabricProfileFileSystem(this contents); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,copy,@Override public void  (Path source Path target CopyOption... options) throws IOException { throw new ReadOnlyFileSystemException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,createDirectory,@Override public void  (Path dir FileAttribute<?>... attrs) throws IOException { throw new ReadOnlyFileSystemException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,delete,@Override public void  (Path path) throws IOException { throw new ReadOnlyFileSystemException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,getFileAttributeView,@Override public <V extends FileAttributeView>V  (Path path Class<V> type LinkOption... options){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,getFileStore,@Override public FileStore  (Path path) throws IOException { return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,getFileSystem,@Override public FabricProfileFileSystem  (URI uri){ synchronized (fileSystems) { FabricProfileFileSystem fileSystem=null; try { fileSystem=fileSystems.get(uriToPath(uri).toRealPath()); } catch ( IOException ignore) { } if (fileSystem == null) { throw new
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,getPath,"@Override public Path  (URI uri){ String str=uri.getSchemeSpecificPart(); int i=str.lastIndexOf(""!/""); if (i == -1) { throw new IllegalArgumentException(""URI: "" + uri + "" does not contain path info ex. github:apache/karaf#master!/""); } return getFileSyste"
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,getScheme,"@Override public String  (){ return ""fabric-profile""; } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,isHidden,@Override public boolean  (Path path) throws IOException { return false; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,isSameFile,@Override public boolean  (Path path Path path2) throws IOException { return path.toAbsolutePath().equals(path2.toAbsolutePath()); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,move,@Override public void  (Path source Path target CopyOption... options) throws IOException { throw new ReadOnlyFileSystemException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,newByteChannel,@Override public SeekableByteChannel  (Path path Set<? extends OpenOption> options FileAttribute<?>... attrs) throws IOException { if (!(path instanceof FabricProfilePath)) { throw new ProviderMismatchException(); } return ((FabricProfilePath)path).getFil
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,newDirectoryStream,@Override public DirectoryStream<Path>  (Path dir DirectoryStream.Filter<? super Path> filter) throws IOException { if (!(dir instanceof FabricProfilePath)) { throw new ProviderMismatchException(); } return ((FabricProfilePath)dir).getFileSystem().newDire
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,newFileSystem,public FabricProfileFileSystem  (Path path Map<String ?> env) throws IOException { if (!Files.isDirectory(path)) { throw new UnsupportedOperationException(); } synchronized (fileSystems) { Path localPath=path.toRealPath(); if (this.fileSystems.containsKey(localPath)) { throw new FileSystemAlreadyExistsException(); } FabricProfileFileSystem fileSystem=buildFileSystem(path); fileSystems.put(localPath fileSystem); return fileSystem; } } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,newInputStream,@Override public InputStream  (Path path OpenOption... options) throws IOException { if (!(path instanceof FabricProfilePath)) { throw new ProviderMismatchException(); } return ((FabricProfilePath)path).getFileSystem().newInputStream(path options); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,preVisitDirectory,@Override public FileVisitResult  (Path dir BasicFileAttributes attrs) throws IOException { addChild(dir new ArrayList<String>()); return FileVisitResult.CONTINUE; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,readAttributes,@Override public Map<String Object>  (Path path String attributes LinkOption... options) throws IOException { return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,setAttribute,@Override public void  (Path path String attribute Object value LinkOption... options) throws IOException { throw new ReadOnlyFileSystemException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,uriToPath,"protected Path  (URI uri){ String scheme=uri.getScheme(); if ((scheme == null) || (!scheme.equalsIgnoreCase(getScheme()))) { throw new IllegalArgumentException(""URI scheme is not '"" + getScheme() + ""'""); } try { String root=uri.getRawSchemeSpecificPart(); int i=root.lastIndexOf(""!/""); if (i != -1) { root=root.substring(0 i); } URI rootUri=new URI(root); try { return Paths.get(rootUri).toAbsolutePath(); } catch ( FileSystemNotFoundException e) { try { FileSystem fs=FileSystems.newFileSystem(rootUri new HashMap<String Object>() FabricProfileFileSystemProvider.class.getClassLoader()); return fs.provider().getPath(rootUri).toAbsolutePath(); } catch ( IOException e2) { e.addSuppressed(e2); throw e; } } } catch ( URISyntaxException e) { throw new IllegalArgumentException(e.getMessage() e); } } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProvider.java,visitFile,"@Override public FileVisitResult  (Path file BasicFileAttributes attrs) throws IOException { byte[] content=Files.readAllBytes(file); if (file.getFileName().toString().equals(""io.fabric8.agent.properties"")) { file=file.resolveSibling(""profile.cfg""); } els"
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,FabricProfilePath,public  (FabricProfileFileSystem fileSystem byte[] path boolean normalized){ this.fileSystem=fileSystem; if (normalized) { this.path=path; } else { this.path=normalize(path); } } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,checkPath,private FabricProfilePath  (Path paramPath){ if (paramPath == null) { throw new NullPointerException(); } if (!(paramPath instanceof FabricProfilePath)) { throw new ProviderMismatchException(); } return (FabricProfilePath)paramPath; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,compareTo,public int  (Path paramPath){ FabricProfilePath p1=this; FabricProfilePath p2=checkPath(paramPath); byte[] a1=p1.path; byte[] a2=p2.path; int l1=a1.length; int l2=a2.length; for (int i=0  l=Math.min(l1 l2); i < l; i++) { int b1=a1[i] & 0xFF; int b2=a2[i] & 0xFF; if (b1 != b2) { return b1 - b2; } } return l1 - l2; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,doGetResolved,private static byte[]  (FabricProfilePath p){ int nc=p.getNameCount(); byte[] path=p.path; int[] offsets=p.offsets; byte[] to=new byte[path.length]; int[] lastM=new int[nc]; int lastMOff=-1; int m=0; for (int i=0; i < nc; i++) { int n=offsets[i]; int len=(i == offsets.length - 1) ? (path.length - n) : (offsets[i + 1] - n - 1); if (len == 1 && path[n] == (byte)'.') { if (m == 0 && path[0] == '/') to[m++]='/'; continue; } if (len == 2 && path[n] == '.' && path[n + 1] == '.') { if (lastMOff >= 0) { m=lastM[lastMOff--]; continue; } if (path[0] == '/') { if (m == 0) to[m++]='/'; } else { if (m != 0 && to[m - 1] != '/') to[m++]='/'; while (len-- > 0) to[m++]=path[n++]; } continue; } if (m == 0 && path[0] == '/' || m != 0 && to[m - 1] != '/') { to[m++]='/'; } lastM[++lastMOff]=m; while (len-- > 0) to[m++]=path[n++]; } if (m > 1 && to[m - 1] == '/') m--; return (m == to.length) ? to : Arrays.copyOf(to m); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,endsWith,public boolean  (String other){ return endsWith(getFileSystem().getPath(other)); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,equals,@Override public boolean  (Object obj){ return obj instanceof FabricProfilePath && ((FabricProfilePath)obj).fileSystem == fileSystem && compareTo((FabricProfilePath)obj) == 0; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,equalsNameAt,private static boolean  (FabricProfilePath p1 FabricProfilePath p2 int index){ int beg1=p1.offsets[index]; int len1; if (index == p1.offsets.length - 1) { len1=p1.path.length - beg1; } else { len1=p1.offsets[index + 1] - beg1 - 1; } int beg2=p2.offsets[index]; int len2; if (index == p2.offsets.length - 1) { len2=p2.path.length - beg2; } else { len2=p2.offsets[index + 1] - beg2 - 1; } if (len1 != len2) { return false; } for (int n=0; n < len1; n++) { if (p1.path[beg1 + n] != p2.path[beg2 + n]) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,getFileName,public FabricProfilePath  (){ initOffsets(); int nbOffsets=offsets.length; if (nbOffsets == 0) { return null; } if (nbOffsets == 1 && path[0] != '/') { return this; } int offset=offsets[nbOffsets - 1]; int length=path.length - offset; byte[] path=new byte[length]; System.arraycopy(this.path offset path 0 length); return new FabricProfilePath(fileSystem path); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,getFileSystem,public FabricProfileFileSystem  (){ return fileSystem; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,getName,public FabricProfilePath  (int index){ initOffsets(); if (index < 0 || index >= offsets.length) { throw new IllegalArgumentException(); } int offset=this.offsets[index]; int length; if (index == offsets.length - 1) { length=path.length - offset; } else { length=offsets[index + 1] - offset - 1; } byte[] path=new byte[length]; System.arraycopy(this.path offset path 0 length); return new FabricProfilePath(fileSystem path); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,getNameCount,public int  (){ initOffsets(); return offsets.length; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,getParent,public FabricProfilePath  (){ initOffsets(); int nbOffsets=offsets.length; if (nbOffsets == 0) { return null; } int length=offsets[nbOffsets - 1] - 1; if (length <= 0) { return getRoot(); } byte[] path=new byte[length]; System.arraycopy(this.path 0 path 0 length); return new FabricProfilePath(fileSystem path); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,getResolved,private byte[]  (){ if (path.length == 0) { return path; } for ( byte c : path) { if (c == '.') { return doGetResolved(this); } } return path; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,getResolvedPath,byte[]  (){ byte[] r=resolved; if (r == null) { r=resolved=isAbsolute() ? getResolved() : toAbsolutePath().getResolvedPath(); } return r; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,getRoot,public FabricProfilePath  (){ if (isAbsolute()) { return new FabricProfilePath(fileSystem new byte[]{this.path[0]}); } return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,hasNext,public boolean  (){ return index < getNameCount(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,hashCode,@Override public int  (){ int h=hash; if (h == 0) { h=hash=Arrays.hashCode(path); } return h; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,initOffsets,private void  (){ if (this.offsets == null) { int count=0; int index=0; while (index < path.length) { byte c=path[index++]; if (c != '/') { count++; while (index < path.length && path[index] != '/') { index++; } } } int[] result=new int[count]; count=0; index=0; while (index < path.length) { int m=path[index]; if (m == '/') { index++; } else { result[count++]=index++; while (index < path.length && path[index] != '/') { index++; } } } synchronized (this) { if (offsets == null) { offsets=result; } } } } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,isAbsolute,public boolean  (){ return (path.length > 0) && (path[0] == '/'); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,iterator,public Iterator<Path>  (){ return new Iterator<Path>(){ private int index=0; public boolean hasNext(){ return index < getNameCount(); } public Path next(){ if (index < getNameCount()) { FabricProfilePath name=getName(index); index++; return name; } throw new NoSuchElementException(); } public void remove(){ throw new UnsupportedOperationException(); } } ; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,next,public Path  (){ if (index < getNameCount()) { FabricProfilePath name=getName(index); index++; return name; } throw new NoSuchElementException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,normalize,"private byte[]  (byte[] path int index){ byte[] arrayOfByte=new byte[path.length]; int i=0; while (i < index) { arrayOfByte[i]=path[i]; i++; } int j=i; int k=0; while (i < path.length) { int m=path[i++]; if (m == '\\') { m='/'; } if ((m != '/') || (k != '/')) { if (m == 0) { throw new InvalidPathException(new String(path StandardCharsets.UTF_8) ""Path: nul character not allowed""); } arrayOfByte[j++]=(byte)m; k=m; } } if ((j > 1) && (arrayOfByte[j - 1] == '/')) { j--; } return j == arrayOfByte.length ? arrayOfByte : Arrays.copyOf(arrayOfByte j); } "
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,register,public WatchKey  (WatchService watcher WatchEvent.Kind<?>... events) throws IOException { throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,relativize,public FabricProfilePath  (Path other){ FabricProfilePath p1=this; FabricProfilePath p2=checkPath(other); if (p2.equals(p1)) { return new FabricProfilePath(fileSystem new byte[0] true); } if (p1.isAbsolute() != p2.isAbsolute()) { throw new IllegalArgumentException(); } int nbNames1=p1.getNameCount(); int nbNames2=p2.getNameCount(); int l=Math.min(nbNames1 nbNames2); int nbCommon=0; while (nbCommon < l && equalsNameAt(p1 p2 nbCommon)) { nbCommon++; } int nbUp=nbNames1 - nbCommon; int length=nbUp * 3 - 1; if (nbCommon < nbNames2) { length+=p2.path.length - p2.offsets[nbCommon] + 1; } byte[] result=new byte[length]; int idx=0; while (nbUp-- > 0) { result[idx++]='.'; result[idx++]='.'; if (idx < length) { result[idx++]='/'; } } if (nbCommon < nbNames2) { System.arraycopy(p2.path p2.offsets[nbCommon] result idx p2.path.length - p2.offsets[nbCommon]); } return new FabricProfilePath(fileSystem result); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,remove,public void  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,resolve,public FabricProfilePath  (String other){ return resolve(getFileSystem().getPath(other)); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,resolveSibling,public Path  (String other){ return resolveSibling(getFileSystem().getPath(other)); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,startsWith,public boolean  (String other){ return startsWith(getFileSystem().getPath(other)); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,subpath,public FabricProfilePath  (int beginIndex int endIndex){ initOffsets(); if ((beginIndex < 0) || (beginIndex >= this.offsets.length) || (endIndex > this.offsets.length)|| (beginIndex >= endIndex)) { throw new IllegalArgumentException(); } int offset=this.offsets[beginIndex]; int length; if (endIndex == this.offsets.length) { length=this.path.length - offset; } else { length=this.offsets[endIndex] - offset - 1; } byte[] path=new byte[length]; System.arraycopy(this.path offset path 0 length); return new FabricProfilePath(fileSystem path); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,toAbsolutePath,public FabricProfilePath  (){ if (isAbsolute()) { return this; } byte[] result=new byte[path.length + 1]; result[0]='/'; System.arraycopy(path 0 result 1 path.length); return new FabricProfilePath(fileSystem result true); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,toFile,public File  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,toRealPath,public FabricProfilePath  (LinkOption... options) throws IOException { FabricProfilePath absolute=new FabricProfilePath(fileSystem getResolvedPath()).toAbsolutePath(); fileSystem.provider().checkAccess(absolute); return absolute; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,toString,@Override public String  (){ return new String(path StandardCharsets.UTF_8); } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\main\java\io\fabric8\tooling\migration\profile\FabricProfilePath.java,toUri,public URI  (){ return null; } 
C:\Users\User\Desktop\Thesis\fabric8\tooling\migration\src\test\java\io\fabric8\tooling\migration\profile\FabricProfileFileSystemProviderTest.java,testFileSystem,"@Test public void  () throws Exception { URL readme=getClass().getClassLoader().getResource(""profiles/ReadMe.md""); Path fsRoot=new File(readme.toURI()).getParentFile().toPath(); Path profileRoot=FileSystems.newFileSystem(fsRoot null).getPath(""/""); Map<Str"
