ProjectName,methodName,methodBody
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\Device.java,getConsistentDeviceId,"public static String  (Context context){ final String deviceId; try { TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE); if (tm == null) { return null; } deviceId=tm.getDeviceId(); if (deviceId == null) { return null; } } catch ( Exception e) { LogUtils.d(Logging.LOG_TAG ""Error in TelephonyManager.getDeviceId(): "" + e.getMessage()); return null; } return Utility.getSmallHash(deviceId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\Device.java,getDeviceId,static public synchronized String  (Context context) throws IOException { if (sDeviceId == null) { sDeviceId=getDeviceIdInternal(context); } return sDeviceId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\Device.java,getDeviceIdInternal,"static private String  (Context context) throws IOException { if (context == null) { throw new IllegalStateException(""getDeviceId requires a Context""); } File f=context.getFileStreamPath(""deviceName""); BufferedReader rdr=null; String id; if (f.exists()) { if (f.canRead()) { rdr=new BufferedReader(new FileReader(f) 128); id=rdr.readLine(); rdr.close(); if (id == null) { if (!f.delete()) { LogUtils.e(Logging.LOG_TAG ""Can't delete null deviceName file; try overwrite.""); } } else { return id; } } else { LogUtils.w(Logging.LOG_TAG f.getAbsolutePath() + "": File exists  but can't read?"" + "" Trying to remove.""); if (!f.delete()) { LogUtils.w(Logging.LOG_TAG ""Remove failed. Tring to overwrite.""); } } } BufferedWriter w=new BufferedWriter(new FileWriter(f) 128); final String consistentDeviceId=getConsistentDeviceId(context); if (consistentDeviceId != null) { id=""androidc"" + consistentDeviceId; } else { id=""android"" + System.currentTimeMillis(); } w.write(id); w.close(); return id; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,buildBodyText,static String[]  (Body body boolean useSmartReply){ if (body == null) { return new String[2]; } final String[] messageBody=new String[]{body.mTextContent body.mHtmlContent}; final int pos=body.mQuotedTextStartPos; if (useSmartReply && pos > 0) { if (messageBody[0] != null) { if (pos < messageBody[0].length()) { messageBody[0]=messageBody[0].substring(0 pos); } } else if (messageBody[1] != null) { if (pos < messageBody[1].length()) { messageBody[1]=messageBody[1].substring(0 pos); } } } return messageBody; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,getHtmlBody,static String  (String html){ final Matcher match=BODY_PATTERN.matcher(html); if (match.find()) { return match.group(BODY_PATTERN_GROUP); } else { return html; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,getNextBoundary,"static String  (){ final StringBuilder boundary=new StringBuilder(); boundary.append(""--_com.android.email_"").append(System.nanoTime()); synchronized (Rfc822Output.class) { boundary.append(sBoundaryDigit); sBoundaryDigit=(byte)((sBoundaryDigit + 1) % 10); } return boundary.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,writeAddressHeader,"private static void  (Writer writer String name String value) throws IOException { if (value != null && value.length() > 0) { writer.append(name); writer.append("": ""); writer.append(MimeUtility.fold(Address.reformatToHeader(value) name.length() + 2)); writer.append(""\r\n""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,writeBoundary,"private static void  (Writer writer String boundary boolean end) throws IOException { writer.append(""--""); writer.append(boundary); if (end) { writer.append(""--""); } writer.append(""\r\n""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,writeEncodedHeader,"private static void  (Writer writer String name String value) throws IOException { if (value != null && value.length() > 0) { writer.append(name); writer.append("": ""); writer.append(MimeUtility.foldAndEncode2(value name.length() + 2)); writer.append(""\r\n""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,writeHeader,"private static void  (Writer writer String name String value) throws IOException { if (value != null && value.length() > 0) { writer.append(name); writer.append("": ""); writer.append(value); writer.append(""\r\n""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,writeOneAttachment,"private static void  (Context context Writer writer OutputStream out Attachment attachment) throws IOException  MessagingException { writeHeader(writer ""Content-Type"" attachment.mMimeType + "";\n name=\"""" + attachment.mFileName+ ""\""""); writeHeader(writer ""Content-Transfer-Encoding"" ""base64""); if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) { writeHeader(writer ""Content-Disposition"" ""attachment;"" + ""\n filename=\"""" + attachment.mFileName + ""\"";""+ ""\n size=""+ Long.toString(attachment.mSize)); } if (attachment.mContentId != null) { writeHeader(writer ""Content-ID"" attachment.mContentId); } writer.append(""\r\n""); InputStream inStream=null; try { if (attachment.mContentBytes != null) { inStream=new ByteArrayInputStream(attachment.mContentBytes); } else { final String cachedFile=attachment.getCachedFileUri(); if (!TextUtils.isEmpty(cachedFile)) { final Uri cachedFileUri=Uri.parse(cachedFile); try { inStream=context.getContentResolver().openInputStream(cachedFileUri); } catch ( FileNotFoundException e) { inStream=null; LogUtils.d(TAG ""Rfc822Output#writeOneAttachment()  failed to load"" + ""cached file  falling back to: %s"" attachment.getContentUri()); } } if (inStream == null) { final Uri fileUri=Uri.parse(attachment.getContentUri()); inStream=context.getContentResolver().openInputStream(fileUri); } } writer.flush(); Base64OutputStream base64Out=new Base64OutputStream(out Base64.CRLF | Base64.NO_CLOSE); IOUtils.copy(inStream base64Out); base64Out.close(); out.write('\r'); out.write('\n'); out.flush(); } catch ( FileNotFoundException fnfe) { LogUtils.e(TAG fnfe ""Rfc822Output#writeOneAttachment()  FileNotFoundException"" + ""when sending attachment""); } catch ( IOException ioe) { LogUtils.e(TAG ioe ""Rfc822Output#writeOneAttachment()  IOException"" + ""when sending attachment""); throw new MessagingException(""Invalid attachment."" ioe); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,writeTextWithHeaders,"private static void  (Writer writer OutputStream out String[] bodyText) throws IOException { boolean html=false; String text=bodyText[INDEX_BODY_TEXT]; if (TextUtils.isEmpty(text)) { text=bodyText[INDEX_BODY_HTML]; html=true; } if (TextUtils.isEmpty(text)) { writer.write(""\r\n""); } else { final String mimeType=""text/"" + (html ? ""html"" : ""plain""); writeHeader(writer ""Content-Type"" mimeType + ""; charset=utf-8""); writeHeader(writer ""Content-Transfer-Encoding"" ""base64""); writer.write(""\r\n""); final byte[] textBytes=text.getBytes(""UTF-8""); writer.flush(); out.write(Base64.encode(textBytes Base64.CRLF)); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\internet\Rfc822Output.java,writeTo,"public static void  (Context context Message message OutputStream out boolean useSmartReply boolean sendBcc List<Attachment> attachments) throws IOException  MessagingException { if (message == null) { return; } final OutputStream stream=new BufferedOutputStream(out 1024); final Writer writer=new OutputStreamWriter(stream); final String date=DATE_FORMAT.format(new Date(message.mTimeStamp)); writeHeader(writer ""Date"" date); writeEncodedHeader(writer ""Subject"" message.mSubject); writeHeader(writer ""Message-ID"" message.mMessageId); writeAddressHeader(writer ""From"" message.mFrom); writeAddressHeader(writer ""To"" message.mTo); writeAddressHeader(writer ""Cc"" message.mCc); if (sendBcc) { writeAddressHeader(writer ""Bcc"" message.mBcc); } writeAddressHeader(writer ""Reply-To"" message.mReplyTo); writeHeader(writer ""MIME-Version"" ""1.0""); final Body body=Body.restoreBodyWithMessageId(context message.mId); final String[] bodyText=buildBodyText(body useSmartReply); if (attachments == null) { attachments=Arrays.asList(Attachment.restoreAttachmentsWithMessageId(context message.mId)); } final boolean multipart=attachments.size() > 0; if (!multipart) { writeTextWithHeaders(writer stream bodyText); } else { final String multipartBoundary=getNextBoundary(); String multipartType=""mixed""; if (attachments.size() == 1) { final int flags=attachments.get(0).mFlags; if ((flags & Attachment.FLAG_ICS_ALTERNATIVE_PART) != 0) { multipartType=""alternative""; } } writeHeader(writer ""Content-Type"" ""multipart/"" + multipartType + ""; boundary=\""""+ multipartBoundary+ ""\""""); writer.write(""\r\n""); if (bodyText[INDEX_BODY_TEXT] != null || bodyText[INDEX_BODY_HTML] != null) { writeBoundary(writer multipartBoundary false); writeTextWithHeaders(writer stream bodyText); } for ( final Attachment att : attachments) { writeBoundary(writer multipartBoundary false); writeOneAttachment(context writer stream att); writer.write(""\r\n""); } writeBoundary(writer multipartBoundary true); } writer.flush(); out.flush(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,HostAuth,public  (Parcel in){ mBaseUri=CONTENT_URI; mId=in.readLong(); mProtocol=in.readString(); mAddress=in.readString(); mPort=in.readInt(); mFlags=in.readInt(); mLogin=in.readString(); mPassword=in.readString(); mDomain=in.readString(); mClientCertAlias=in.readString(); if ((mFlags & FLAG_OAUTH) != 0) { mCredentialKey=in.readLong(); mCredential=new Credential(in); if (mCredential.equals(Credential.EMPTY)) { mCredential=null; } } else { mCredentialKey=-1; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,createFromParcel,@Override public HostAuth  (Parcel in){ return new HostAuth(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,describeContents,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,ensureLoaded,public void  (final Context context){ getCredential(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,equals,@Override public boolean  (Object o){ if (!(o instanceof HostAuth)) { return false; } HostAuth that=(HostAuth)o; return mPort == that.mPort && mId == that.mId && mFlags == that.mFlags && TextUtils.equals(mProtocol that.mProtocol) && TextUtils.equals(mAddr
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,fromJson,"protected static HostAuth  (final JSONObject json){ try { final HostAuth h=new HostAuth(); h.mProtocol=json.getString(HostAuthColumns.PROTOCOL); h.mAddress=json.getString(HostAuthColumns.ADDRESS); h.mPort=json.getInt(HostAuthColumns.PORT); h.mFlags=json.getInt(HostAuthColumns.FLAGS); h.mLogin=json.getString(HostAuthColumns.LOGIN); h.mPassword=json.optString(HostAuthColumns.PASSWORD); h.mDomain=json.optString(HostAuthColumns.DOMAIN); h.mClientCertAlias=json.optString(HostAuthColumns.CLIENT_CERT_ALIAS); final JSONObject credJson=json.optJSONObject(JSON_TAG_CREDENTIAL); if (credJson != null) { h.mCredential=Credential.fromJson(credJson); } return h; } catch ( final JSONException e) { LogUtils.d(LogUtils.TAG e ""Exception while deserializing HostAuth""); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,getCredential,public Credential  (Context context){ if (mCredential == null) { if (mCredentialKey >= 0) { mCredential=Credential.restoreCredentialsWithId(context mCredentialKey); } } return mCredential; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,getLogin,public String[]  (){ String trimUser=(mLogin != null) ? mLogin.trim() : null; return new String[]{trimUser mPassword}; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,getOrCreateCredential,public Credential  (Context context){ mFlags|=FLAG_OAUTH; if (mCredential == null) { if (mCredentialKey >= 0) { mCredential=Credential.restoreCredentialsWithId(context mCredentialKey); } else { mCredential=new Credential(); } } return mCredential; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,getProtocolFromString,"public static String  (String uriString){ final Uri uri=Uri.parse(uriString); final String scheme=uri.getScheme(); final String[] schemeParts=scheme.split(""\\+""); return schemeParts[0]; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,getSchemeFlags,"public static int  (String scheme){ String[] schemeParts=scheme.split(""\\+""); int flags=HostAuth.FLAG_NONE; if (schemeParts.length >= 2) { String part1=schemeParts[1]; if (""ssl"".equals(part1)) { flags|=HostAuth.FLAG_SSL; } else if (""tls"".equals(part1)) { flags|=HostAuth.FLAG_TLS; } if (schemeParts.length >= 3) { String part2=schemeParts[2]; if (SCHEME_TRUST_ALL_CERTS.equals(part2)) { flags|=HostAuth.FLAG_TRUST_ALL; } } } return flags; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,getSchemeString,"@SuppressWarnings(""unused"") public static String  (String protocol int flags String clientAlias){ String security=""""; switch (flags & USER_CONFIG_MASK) { case FLAG_SSL: security=""+ssl+""; break; case FLAG_SSL | FLAG_TRUST_ALL: security=""+ssl+trustallcerts"""
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,hashCode,@Override public int  (){ int hashCode=29; if (mPassword != null) { hashCode+=mPassword.hashCode(); } if (mClientCertAlias != null) { hashCode+=(mClientCertAlias.hashCode() << 8); } return (hashCode << 8) + mFlags; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,initHostAuth,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/hostauth""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,newArray,@Override public HostAuth[]  (int size){ return new HostAuth[size]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,removeCredential,public void  (){ mCredential=null; mCredentialKey=-1; mFlags&=~FLAG_OAUTH; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,restore,@Override public void  (Cursor cursor){ mBaseUri=CONTENT_URI; mId=cursor.getLong(CONTENT_ID_COLUMN); mProtocol=cursor.getString(CONTENT_PROTOCOL_COLUMN); mAddress=cursor.getString(CONTENT_ADDRESS_COLUMN); mPort=cursor.getInt(CONTENT_PORT_COLUMN); mFlags=c
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,restoreHostAuthWithId,public static HostAuth  (Context context long id){ return EmailContent.restoreContentWithId(context HostAuth.class HostAuth.CONTENT_URI HostAuth.CONTENT_PROJECTION id); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,setConnection,"public void  (String scheme String host int port){ String[] schemeParts=scheme.split(""\\+""); String protocol=schemeParts[0]; String clientCertAlias=null; int flags=getSchemeFlags(scheme); if (schemeParts.length > 3) { clientCertAlias=schemeParts[3]; } else if (schemeParts.length > 2) { if (!SCHEME_TRUST_ALL_CERTS.equals(schemeParts[2])) { mClientCertAlias=schemeParts[2]; } } setConnection(protocol host port flags clientCertAlias); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,setHostAuthFromString,public void  (String uriString) throws URISyntaxException { URI uri=new URI(uriString); String path=uri.getPath(); String domain=null; if (!TextUtils.isEmpty(path)) { domain=path.substring(1); } mDomain=domain; setLogin(uri.getUserInfo()); String scheme=uri.getScheme(); setConnection(scheme uri.getHost() uri.getPort()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,setLogin,public void  (String userName String userPassword){ mLogin=userName; mPassword=userPassword; if (TextUtils.isEmpty(mLogin)) { mFlags&=~FLAG_AUTHENTICATE; } else { mFlags|=FLAG_AUTHENTICATE; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,setUserName,public void  (final String userName){ mLogin=userName; if (TextUtils.isEmpty(mLogin)) { mFlags&=~FLAG_AUTHENTICATE; } else { mFlags|=FLAG_AUTHENTICATE; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,shouldTrustAllServerCerts,public boolean  (){ return (mFlags & FLAG_TRUST_ALL) != 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,shouldUseSsl,public boolean  (){ return (mFlags & FLAG_SSL) != 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,toContentValues,@Override public ContentValues  (){ ContentValues values=new ContentValues(); values.put(HostAuthColumns.PROTOCOL mProtocol); values.put(HostAuthColumns.ADDRESS mAddress); values.put(HostAuthColumns.PORT mPort); values.put(HostAuthColumns.FLAGS mFlags); v
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,toJson,"protected JSONObject  (){ try { final JSONObject json=new JSONObject(); json.put(HostAuthColumns.PROTOCOL mProtocol); json.put(HostAuthColumns.ADDRESS mAddress); json.put(HostAuthColumns.PORT mPort); json.put(HostAuthColumns.FLAGS mFlags); json.put(HostAuthColumns.LOGIN mLogin); json.putOpt(HostAuthColumns.PASSWORD mPassword); json.putOpt(HostAuthColumns.DOMAIN mDomain); json.putOpt(HostAuthColumns.CLIENT_CERT_ALIAS mClientCertAlias); if (mCredential != null) { json.putOpt(JSON_TAG_CREDENTIAL mCredential.toJson()); } return json; } catch ( final JSONException e) { LogUtils.d(LogUtils.TAG e ""Exception while serializing HostAuth""); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,toString,"@Override public String  (){ return ""[protocol "" + mProtocol + ""]""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\HostAuth.java,writeToParcel,@Override public void  (Parcel dest int flags){ dest.writeLong(mId); dest.writeString(mProtocol); dest.writeString(mAddress); dest.writeInt(mPort); dest.writeInt(mFlags); dest.writeString(mLogin); dest.writeString(mPassword); dest.writeString(mDomain); de
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,Credential,public  (Parcel in){ mBaseUri=CONTENT_URI; mId=in.readLong(); mProviderId=in.readString(); mAccessToken=in.readString(); mRefreshToken=in.readString(); mExpiration=in.readLong(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,createFromParcel,@Override public Credential  (Parcel in){ return new Credential(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,describeContents,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,equals,@Override public boolean  (Object o){ if (!(o instanceof Credential)) { return false; } Credential that=(Credential)o; return TextUtils.equals(mProviderId that.mProviderId) && TextUtils.equals(mAccessToken that.mAccessToken) && TextUtils.equals(mRefreshTo
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,fromJson,"protected static Credential  (final JSONObject json){ try { final Credential c=new Credential(); c.mProviderId=json.getString(PROVIDER_COLUMN); c.mAccessToken=json.optString(ACCESS_TOKEN_COLUMN); c.mRefreshToken=json.optString(REFRESH_TOKEN_COLUMN); c.mExpiration=json.optInt(EXPIRATION_COLUMN 0); return c; } catch ( final JSONException e) { LogUtils.d(LogUtils.TAG e ""Exception while deserializing Credential""); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,hashCode,@Override public int  (){ return Objects.hashCode(mAccessToken mRefreshToken mExpiration); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,initCredential,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/credential""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,newArray,@Override public Credential[]  (int size){ return new Credential[size]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,restore,@Override public void  (Cursor cursor){ mBaseUri=CONTENT_URI; mId=cursor.getLong(CredentialQuery.ID_COLUMN_INDEX); mProviderId=cursor.getString(CredentialQuery.PROVIDER_COLUMN_INDEX); mAccessToken=cursor.getString(CredentialQuery.ACCESS_TOKEN_COLUMN_INDEX
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,restoreCredentialsWithId,public static Credential  (Context context long id){ return EmailContent.restoreContentWithId(context Credential.class Credential.CONTENT_URI CredentialQuery.PROJECTION id); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,toContentValues,"@Override public ContentValues  (){ ContentValues values=new ContentValues(); if (TextUtils.isEmpty(mProviderId)) { LogUtils.wtf(LogUtils.TAG ""Credential being saved with no provider""); } values.put(PROVIDER_COLUMN mProviderId); values.put(ACCESS_TOKEN_CO"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,toJson,"protected JSONObject  (){ try { final JSONObject json=new JSONObject(); json.put(PROVIDER_COLUMN mProviderId); json.putOpt(ACCESS_TOKEN_COLUMN mAccessToken); json.putOpt(REFRESH_TOKEN_COLUMN mRefreshToken); json.put(EXPIRATION_COLUMN mExpiration); return json; } catch ( final JSONException e) { LogUtils.d(LogUtils.TAG e ""Exception while serializing Credential""); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Credential.java,writeToParcel,@Override public void  (Parcel dest int flags){ dest.writeLong(mId); dest.writeString(mProviderId); dest.writeString(mAccessToken); dest.writeString(mRefreshToken); dest.writeLong(mExpiration); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,checkMailboxConsistency,"@Deprecated public static void  (Context context long accountId){ Account account=Account.restoreAccountWithId(context accountId); if (account == null) return; if ((account.mFlags & ACCOUNT_MAILBOX_CHANGE_FLAG) != 0) { LogUtils.w(Logging.LOG_TAG ""Account "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,endMailboxChanges,public static void  (Context context long accountId){ setAccountSyncAdapterFlag(context accountId false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,fixupUninitializedParentKeys,"@Deprecated public static void  (Context context String accountSelector){ if (accountSelector == null) throw new IllegalArgumentException(); String noParentKeySelection=WHERE_PARENT_KEY_UNINITIALIZED + "" AND "" + accountSelector; ContentResolver resolver=c"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,getHierarchicalName,"private static String  (Context context long id HashMap<Long String> map String name long parentId){ String hierarchicalName; if (map.containsKey(id)) { return map.get(id); } else if (parentId == Mailbox.NO_MAILBOX) { hierarchicalName=name; } else { Mailbox parent=Mailbox.restoreMailboxWithId(context parentId); if (parent == null) return name + ""/"" + ""??""; hierarchicalName=getHierarchicalName(context parentId map parent.mDisplayName parent.mParentKey) + ""/"" + name; } map.put(id hierarchicalName); return hierarchicalName; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,setAccountSyncAdapterFlag,private static void  (Context context long accountId boolean start){ Account account=Account.restoreAccountWithId(context accountId); if (account == null) return; ContentValues cv=new ContentValues(); cv.put(AccountColumns.FLAGS start ? (account.mFlags | ACCOUNT_MAILBOX_CHANGE_FLAG) : account.mFlags & ~ACCOUNT_MAILBOX_CHANGE_FLAG); context.getContentResolver().update(ContentUris.withAppendedId(Account.CONTENT_URI account.mId) cv null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,setFlagsAndChildrensParentKey,"@Deprecated public static void  (Context context String accountSelector String serverId){ Cursor cursor=context.getContentResolver().query(Mailbox.CONTENT_URI Mailbox.CONTENT_PROJECTION MailboxColumns.SERVER_ID + ""=? AND "" + accountSelector new String[]{s"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,setupHierarchicalNames,"public static void  (Context context long accountId){ Account account=Account.restoreAccountWithId(context accountId); if (account == null) return; ContentValues values=new ContentValues(); String accountSelector=Mailbox.ACCOUNT_KEY + ""="" + account.mId; ContentResolver resolver=context.getContentResolver(); HashMap<Long String> nameMap=new HashMap<Long String>(); Cursor c=resolver.query(Mailbox.CONTENT_URI HIERARCHY_PROJECTION accountSelector null null); try { while (c.moveToNext()) { long id=c.getLong(HIERARCHY_ID); String displayName=c.getString(HIERARCHY_NAME); String name=getHierarchicalName(context id nameMap displayName c.getLong(HIERARCHY_PARENT_KEY)); String oldHierarchicalName=c.getString(HIERARCHY_HIERARCHICAL_NAME); if (name.equals(oldHierarchicalName) || ((name.equals(displayName)) && TextUtils.isEmpty(oldHierarchicalName))) { continue; } values.put(MailboxColumns.HIERARCHICAL_NAME name); resolver.update(ContentUris.withAppendedId(Mailbox.CONTENT_URI id) values null null); } } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MailboxUtilities.java,startMailboxChanges,public static void  (Context context long accountId){ setAccountSyncAdapterFlag(context accountId true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,Attachment,public  (Parcel in){ mBaseUri=Attachment.CONTENT_URI; mId=in.readLong(); mFileName=in.readString(); mMimeType=in.readString(); mSize=in.readLong(); mContentId=in.readString(); mContentUri=in.readString(); mCachedFileUri=in.readString(); mMessageKey=in.readLong(); mLocation=in.readString(); mEncoding=in.readString(); mContent=in.readString(); mFlags=in.readInt(); mAccountKey=in.readLong(); final int contentBytesLen=in.readInt(); if (contentBytesLen == -1) { mContentBytes=null; } else { mContentBytes=new byte[contentBytesLen]; in.readByteArray(mContentBytes); } mUiState=in.readInt(); mUiDestination=in.readInt(); mUiDownloadedSize=in.readInt(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,Body,public  (){ mBaseUri=CONTENT_URI; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,Message,public  (){ mBaseUri=CONTENT_URI; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,SelfContentObserver,public  (final EmailContent content){ super(null); mContent=new WeakReference<EmailContent>(content); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,addSaveOps,"public void  (ArrayList<ContentProviderOperation> ops){ boolean isNew=!isSaved(); ContentProviderOperation.Builder b; if (isNew) { b=ContentProviderOperation.newInsert(mBaseUri); } else { b=ContentProviderOperation.newUpdate(mBaseUri).withSelection(MessageColumns._ID + ""=?"" new String[]{Long.toString(mId)}); } if (mText != null) { mSnippet=TextUtilities.makeSnippetFromPlainText(mText); } else if (mHtml != null) { mSnippet=TextUtilities.makeSnippetFromHtmlText(mHtml); } ops.add(b.withValues(toContentValues()).build()); ContentValues cv=new ContentValues(); if (mText != null) { cv.put(BodyColumns.TEXT_CONTENT mText); } if (mHtml != null) { cv.put(BodyColumns.HTML_CONTENT mHtml); } if (mSourceKey != 0) { cv.put(BodyColumns.SOURCE_MESSAGE_KEY mSourceKey); } if (mQuotedTextStartPos != 0) { cv.put(BodyColumns.QUOTED_TEXT_START_POS mQuotedTextStartPos); } int messageBackValue=ops.size() - 1; if (!cv.keySet().isEmpty()) { b=ContentProviderOperation.newInsert(Body.CONTENT_URI); if (!isNew) { cv.put(BodyColumns.MESSAGE_KEY mId); } b.withValues(cv); if (isNew) { ContentValues backValues=new ContentValues(); backValues.put(BodyColumns.MESSAGE_KEY messageBackValue); b.withValueBackReferences(backValues); } ops.add(b.build()); } if (mAttachments != null) { for ( Attachment att : mAttachments) { if (!isNew) { att.mMessageKey=mId; } b=ContentProviderOperation.newInsert(Attachment.CONTENT_URI).withValues(att.toContentValues()); if (isNew) { b.withValueBackReference(AttachmentColumns.MESSAGE_KEY messageBackValue); } ops.add(b.build()); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,buildMessageListSelection,"public static String  (Context context long accountId long mailboxId){ if (mailboxId == Mailbox.QUERY_ALL_INBOXES) { return Message.ALL_INBOX_SELECTION; } if (mailboxId == Mailbox.QUERY_ALL_DRAFTS) { return Message.ALL_DRAFT_SELECTION; } if (mailboxId == Mailbox.QUERY_ALL_OUTBOX) { return Message.ALL_OUTBOX_SELECTION; } if (mailboxId == Mailbox.QUERY_ALL_UNREAD) { return Message.ALL_UNREAD_SELECTION; } if (mailboxId == Mailbox.QUERY_ALL_FAVORITES) { if (accountId == Account.ACCOUNT_ID_COMBINED_VIEW) { return Message.ALL_FAVORITE_SELECTION; } final StringBuilder selection=new StringBuilder(); selection.append(MessageColumns.ACCOUNT_KEY).append('=').append(accountId).append("" AND "").append(Message.ALL_FAVORITE_SELECTION); return selection.toString(); } final StringBuilder selection=new StringBuilder(); selection.append(MessageColumns.MAILBOX_KEY).append('=').append(mailboxId); if (Mailbox.getMailboxType(context mailboxId) != Mailbox.TYPE_OUTBOX) { selection.append("" AND "").append(Message.FLAG_LOADED_SELECTION); } return selection.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,close,public synchronized void  (final Context context){ if (mSelfObserver == null) { return; } unregisterAllObservers(); context.getContentResolver().unregisterContentObserver(mSelfObserver); mSelfObserver=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,count,static public int  (Context context Uri uri){ return count(context uri null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,createFromParcel,@Override public EmailContent.Attachment  (Parcel in){ return new EmailContent.Attachment(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,createUniqueFile,"public static File  (String filename){ if (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { File directory=Environment.getExternalStorageDirectory(); File file=new File(directory filename); if (!file.exists()) { return file; } int index=filename.lastIndexOf('.'); String name=filename; String extension=""""; if (index != -1) { name=filename.substring(0 index); extension=filename.substring(index); } for (int i=2; i < Integer.MAX_VALUE; i++) { file=new File(directory name + '-' + i+ extension); if (!file.exists()) { return file; } } return null; } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,delete,static public int  (Context context Uri baseUri long id){ return context.getContentResolver().delete(ContentUris.withAppendedId(baseUri id) null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,deliverSelfNotifications,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,describeContents,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getBodyHtmlUriForMessageWithId,"public static Uri  (long messageId){ return EmailContent.CONTENT_URI.buildUpon().appendPath(""bodyHtml"").appendPath(Long.toString(messageId)).build(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getBodyTextUriForMessageWithId,"public static Uri  (long messageId){ return EmailContent.CONTENT_URI.buildUpon().appendPath(""bodyText"").appendPath(Long.toString(messageId)).build(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getCachedFileUri,public String  (){ return mCachedFileUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getContent,static public <T extends EmailContent>T  (final Context context final Cursor cursor final Class<T> klass){ try { T content=klass.newInstance(); content.mId=cursor.getLong(0); content.restore(context cursor); return content; } catch ( IllegalAccessException e) { e.printStackTrace(); } catch ( InstantiationException e) { e.printStackTrace(); } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getContentNotificationUri,"protected Uri  (){ throw new UnsupportedOperationException(""Subclasses must override this method for content observation to work""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getContentUri,"public String  (){ if (mContentUri == null) return null; if (!Attachment.sUsingLegacyPrefix && mContentUri.startsWith(Attachment.ATTACHMENT_PROVIDER_LEGACY_URI_PREFIX)) { int prefix=mContentUri.indexOf('/' 10); if (prefix > 0) { return ATTACHMENT_PROVIDER_URI_PREFIX + ""/"" + mContentUri.substring(prefix); } else { LogUtils.e(""Attachment"" ""Improper contentUri format: "" + mContentUri); return mContentUri; } } else { return mContentUri; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getFavoriteMessageCount,public static int  (Context context long accountId){ return count(context Message.CONTENT_URI PER_ACCOUNT_FAVORITE_SELECTION new String[]{Long.toString(accountId)}); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getKeyColumnLong,public static long  (Context context long messageId String column){ String[] columns=Utility.getRowColumns(context Message.CONTENT_URI messageId column); if (columns != null && columns[0] != null) { return Long.parseLong(columns[0]); } return -1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,getUri,public Uri  (){ if (mUri == null) { mUri=ContentUris.withAppendedId(mBaseUri mId); } return mUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,init,"public static synchronized void  (Context context){ if (AUTHORITY == null) { final Resources res=context.getResources(); EMAIL_PACKAGE_NAME=res.getString(R.string.email_package_name); AUTHORITY=EMAIL_PACKAGE_NAME + "".provider""; LogUtils.d(""EmailContent"" ""init for "" + AUTHORITY); NOTIFIER_AUTHORITY=EMAIL_PACKAGE_NAME + "".notifier""; CONTENT_URI=Uri.parse(""content://"" + AUTHORITY); CONTENT_NOTIFIER_URI=Uri.parse(""content://"" + NOTIFIER_AUTHORITY); PICK_TRASH_FOLDER_URI=Uri.parse(""content://"" + AUTHORITY + ""/pickTrashFolder""); PICK_SENT_FOLDER_URI=Uri.parse(""content://"" + AUTHORITY + ""/pickSentFolder""); MAILBOX_NOTIFICATION_URI=Uri.parse(""content://"" + AUTHORITY + ""/mailboxNotification""); MAILBOX_MOST_RECENT_MESSAGE_URI=Uri.parse(""content://"" + AUTHORITY + ""/mailboxMostRecentMessage""); ACCOUNT_CHECK_URI=Uri.parse(""content://"" + AUTHORITY + ""/accountCheck""); PROVIDER_PERMISSION=EMAIL_PACKAGE_NAME + "".permission.ACCESS_PROVIDER""; Account.initAccount(); Mailbox.initMailbox(); QuickResponse.initQuickResponse(); HostAuth.initHostAuth(); Credential.initCredential(); Policy.initPolicy(); Message.initMessage(); MessageMove.init(); MessageStateChange.init(); Body.initBody(); Attachment.initAttachment(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,initAttachment,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/attachment""); MESSAGE_ID_URI=Uri.parse(EmailContent.CONTENT_URI + ""/attachment/message""); ATTACHMENT_PROVIDER_AUTHORITY=EmailContent.EMAIL_PACKAGE_NAME + "".attachmentprovider""; ATTACHMENT_PROVIDER_URI_PREFIX=""content://"" + ATTACHMENT_PROVIDER_AUTHORITY; sUsingLegacyPrefix=ATTACHMENT_PROVIDER_URI_PREFIX.equals(ATTACHMENT_PROVIDER_LEGACY_URI_PREFIX); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,initBody,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/body""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,initMessage,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/message""); CONTENT_URI_LIMIT_1=uriWithLimit(CONTENT_URI 1); SYNCED_CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/syncedMessage""); SELECTED_MESSAGE_CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/messageBySelection""); DELETED_CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/deletedMessage""); UPDATED_CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/updatedMessage""); NOTIFIER_URI=Uri.parse(EmailContent.CONTENT_NOTIFIER_URI + ""/message""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,isInitialSyncKey,"public static boolean  (final String syncKey){ return syncKey == null || syncKey.isEmpty() || syncKey.equals(""0""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,isSaved,public boolean  (){ return mId != NOT_SAVED; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,lookupBodyIdWithMessageId,"public static long  (Context context long messageId){ return Utility.getFirstRowLong(context Body.CONTENT_URI ID_PROJECTION BodyColumns.MESSAGE_KEY + ""=?"" new String[]{Long.toString(messageId)} null ID_PROJECTION_COLUMN -1L); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,newArray,@Override public EmailContent.Attachment[]  (int size){ return new EmailContent.Attachment[size]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,onChange,@Override public void  (final boolean selfChange){ EmailContent content=mContent.get(); if (content != null) { content.onChange(false); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,readBodyFromProvider,"private static String  (final Context context final String uri){ String content=null; try { final InputStream bodyInput=context.getContentResolver().openInputStream(Uri.parse(uri)); try { content=IOUtils.toString(bodyInput); } finally { bodyInput.close(); } } catch ( final IOException e) { LogUtils.v(LogUtils.TAG e ""Exception while reading body content""); } return content; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,registerObserver,public synchronized void  (final Context context final ContentObserver observer){ if (mSelfObserver == null) { mSelfObserver=new SelfContentObserver(this); context.getContentResolver().registerContentObserver(getContentNotificationUri() true mSelfObserver); mObservable=new ContentObservable(); } mObservable.registerObserver(observer); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restore,@Override public void  (Cursor cursor){ mBaseUri=CONTENT_URI; mId=cursor.getLong(CONTENT_ID_COLUMN); mFileName=cursor.getString(CONTENT_FILENAME_COLUMN); mMimeType=cursor.getString(CONTENT_MIME_TYPE_COLUMN); mSize=cursor.getLong(CONTENT_SIZE_COLUMN); mCon
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreAttachmentWithId,public static Attachment  (Context context long id){ return EmailContent.restoreContentWithId(context Attachment.class Attachment.CONTENT_URI Attachment.CONTENT_PROJECTION id); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreAttachmentsWithMessageId,public static Attachment[]  (Context context long messageId){ Uri uri=ContentUris.withAppendedId(MESSAGE_ID_URI messageId); Cursor c=context.getContentResolver().query(uri CONTENT_PROJECTION null null null); try { int count=c.getCount(); Attachment[] attachments=new Attachment[count]; for (int i=0; i < count; ++i) { c.moveToNext(); Attachment attach=new Attachment(); attach.restore(c); attachments[i]=attach; } return attachments; } finally { c.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreBodyHtmlWithMessageId,public static String  (Context context long messageId){ return readBodyFromProvider(context getBodyHtmlUriForMessageWithId(messageId).toString()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreBodySourceKey,"@VisibleForTesting public static long  (Context context long messageId){ return Utility.getFirstRowLong(context Body.CONTENT_URI new String[]{BodyColumns.SOURCE_MESSAGE_KEY} BodyColumns.MESSAGE_KEY + ""=?"" new String[]{Long.toString(messageId)} null 0 0L);"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreBodyTextWithMessageId,public static String  (Context context long messageId){ return readBodyFromProvider(context getBodyTextUriForMessageWithId(messageId).toString()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreBodyWithCursor,private static Body  (final Context context final Cursor cursor){ try { if (cursor.moveToFirst()) { return getContent(context cursor Body.class); } else { return null; } } finally { cursor.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreBodyWithMessageId,"public static Body  (Context context long messageId){ Cursor c=context.getContentResolver().query(Body.CONTENT_URI Body.CONTENT_PROJECTION BodyColumns.MESSAGE_KEY + ""=?"" new String[]{Long.toString(messageId)} null); if (c == null) throw new ProviderUnavailableException(); return restoreBodyWithCursor(context c); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreContentWithId,public static <T extends EmailContent>T  (final Context context final Class<T> klass final Uri contentUri final String[] contentProjection final long id final ContentObserver observer){ warnIfUiThread(); final Uri u=ContentUris.withAppendedId(contentUri id); final Cursor c=context.getContentResolver().query(u contentProjection null null null); if (c == null) throw new ProviderUnavailableException(); try { if (c.moveToFirst()) { final T content=getContent(context c klass); if (observer != null) { content.registerObserver(context observer); } return content; } else { return null; } } finally { c.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,restoreMessageWithId,public static Message  (Context context long id){ return EmailContent.restoreContentWithId(context Message.class Message.CONTENT_URI Message.CONTENT_PROJECTION id); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,save,@Override public Uri  (Context context){ boolean doSave=!isSaved(); if (mText == null && mHtml == null && (mAttachments == null || mAttachments.isEmpty())) { if (doSave) { return super.save(context); } else { if (update(context toContentValues()) == 1) { 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,setCachedFileUri,public void  (String cachedFile){ mCachedFileUri=cachedFile; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,setContentUri,public void  (String contentUri){ mContentUri=contentUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,setFlags,public void  (boolean quotedReply boolean quotedForward){ if (quotedReply || quotedForward) { mFlags&=~Message.FLAG_TYPE_MASK; mFlags|=quotedReply ? Message.FLAG_TYPE_REPLY : Message.FLAG_TYPE_FORWARD; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,toContentValues,@Override public ContentValues  (){ ContentValues values=new ContentValues(); values.put(AttachmentColumns.FILENAME mFileName); values.put(AttachmentColumns.MIME_TYPE mMimeType); values.put(AttachmentColumns.SIZE mSize); values.put(AttachmentColumns.CONTE
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,toString,"@Override public String  (){ return ""["" + mFileName + ""  ""+ mMimeType+ ""  ""+ mSize+ ""  ""+ mContentId+ ""  ""+ mContentUri+ ""  ""+ mCachedFileUri+ ""  ""+ mMessageKey+ ""  ""+ mLocation+ ""  ""+ mEncoding+ ""  ""+ mFlags+ ""  ""+ mContentBytes+ ""  ""+ mAccountKey+ "" ""+ "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,unregisterAllObservers,"public synchronized void  (){ if (mObservable == null) { throw new IllegalStateException(""Unregistering with null observable""); } mObservable.unregisterAll(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,unregisterObserver,"public synchronized void  (final ContentObserver observer){ if (mObservable == null) { throw new IllegalStateException(""Unregistering with null observable""); } mObservable.unregisterObserver(observer); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,update,static public int  (Context context Uri baseUri long id ContentValues contentValues){ return context.getContentResolver().update(ContentUris.withAppendedId(baseUri id) contentValues null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,updateBodyWithMessageId,public static void  (Context context long messageId ContentValues values){ ContentResolver resolver=context.getContentResolver(); long bodyId=lookupBodyIdWithMessageId(context messageId); values.put(BodyColumns.MESSAGE_KEY messageId); if (bodyId == -1) { resolver.insert(CONTENT_URI values); } else { final Uri uri=ContentUris.withAppendedId(CONTENT_URI bodyId); resolver.update(uri values null null); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,uriWithLimit,static public Uri  (Uri uri int limit){ return uri.buildUpon().appendQueryParameter(EmailContent.PARAMETER_LIMIT Integer.toString(limit)).build(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,warnIfUiThread,"private static void  (){ if (Looper.getMainLooper().getThread() == Thread.currentThread()) { LogUtils.w(Logging.LOG_TAG new Throwable() ""Method called on the UI thread""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\EmailContent.java,writeToParcel,@Override public void  (Parcel dest int flags){ dest.writeLong(mId); dest.writeString(mFileName); dest.writeString(mMimeType); dest.writeLong(mSize); dest.writeString(mContentId); dest.writeString(mContentUri); dest.writeString(mCachedFileUri); dest.write
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,Mailbox,public  (Parcel in){ mBaseUri=in.readParcelable(null); mId=in.readLong(); mDisplayName=in.readString(); mServerId=in.readString(); mParentServerId=in.readString(); mParentKey=in.readLong(); mAccountKey=in.readLong(); mType=in.readInt(); mDelimiter=in.readInt(); mSyncKey=in.readString(); mSyncLookback=in.readInt(); mSyncInterval=in.readInt(); mSyncTime=in.readLong(); mFlagVisible=in.readInt() == 1; mFlags=in.readInt(); mSyncStatus=in.readString(); mLastTouchedTime=in.readLong(); mUiSyncStatus=in.readInt(); mUiLastSyncResult=in.readInt(); mTotalCount=in.readInt(); mHierarchicalName=in.readString(); mLastFullSyncTime=in.readLong(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,canHaveMessagesMoved,public boolean  (){ switch (mType) { case TYPE_INBOX: case TYPE_MAIL: case TYPE_TRASH: case TYPE_JUNK: return true; } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,createFromParcel,@Override public Mailbox  (Parcel source){ return new Mailbox(source); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,createSyncBundle,public static Bundle  (final long mailboxId){ final Bundle bundle=new Bundle(2); bundle.putInt(SYNC_EXTRA_MAILBOX_COUNT 1); bundle.putLong(formatMailboxIdExtra(0) mailboxId); return bundle; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,describeContents,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,findMailboxOfType,public static long  (Context context long accountId int type){ final String[] bindArguments=new String[]{Long.toString(type) Long.toString(accountId)}; return Utility.getFirstRowLong(context Mailbox.CONTENT_URI ID_PROJECTION WHERE_TYPE_AND_ACCOUNT_KEY bindArguments null ID_PROJECTION_COLUMN NO_MAILBOX); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,formatMailboxIdExtra,private static String  (final int index){ return String.format(SYNC_EXTRA_MAILBOX_ID_PATTERN index); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getAccountIdForMailbox,public static long  (final Context context final String mailboxId){ return Utility.getFirstRowLong(context Mailbox.CONTENT_URI.buildUpon().appendEncodedPath(mailboxId).build() ACCOUNT_KEY_PROJECTION null null null ACCOUNT_KEY_PROJECTION_ACCOUNT_KEY_COLUMN Account.NO_ACCOUNT); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getAuthority,public static String  (final int mailboxType){ switch (mailboxType) { case Mailbox.TYPE_CALENDAR: return CalendarContract.AUTHORITY; case Mailbox.TYPE_CONTACTS: return ContactsContract.AUTHORITY; default : return EmailContent.AUTHORITY; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getDefaultSyncStateForType,public static boolean  (final int mailboxType){ return SYNCABLE_TYPES.get(mailboxType); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getDisplayName,public static String  (Context context long mailboxId){ final Uri url=ContentUris.withAppendedId(Mailbox.CONTENT_URI mailboxId); return Utility.getFirstRowString(context url MAILBOX_DISPLAY_NAME_PROJECTION null null null MAILBOX_DISPLAY_NAME_COLUMN); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getHashes,public Object[]  (){ final Object[] hash=new Object[CONTENT_PROJECTION.length]; hash[CONTENT_ID_COLUMN]=mId; hash[CONTENT_DISPLAY_NAME_COLUMN]=mDisplayName; hash[CONTENT_SERVER_ID_COLUMN]=mServerId; hash[CONTENT_PARENT_SERVER_ID_COLUMN]=mParentServerId; hash[CONTENT_ACCOUNT_KEY_COLUMN]=mAccountKey; hash[CONTENT_TYPE_COLUMN]=mType; hash[CONTENT_DELIMITER_COLUMN]=mDelimiter; hash[CONTENT_SYNC_KEY_COLUMN]=mSyncKey; hash[CONTENT_SYNC_LOOKBACK_COLUMN]=mSyncLookback; hash[CONTENT_SYNC_INTERVAL_COLUMN]=mSyncInterval; hash[CONTENT_SYNC_TIME_COLUMN]=mSyncTime; hash[CONTENT_FLAG_VISIBLE_COLUMN]=mFlagVisible; hash[CONTENT_FLAGS_COLUMN]=mFlags; hash[CONTENT_SYNC_STATUS_COLUMN]=mSyncStatus; hash[CONTENT_PARENT_KEY_COLUMN]=mParentKey; hash[CONTENT_LAST_TOUCHED_TIME_COLUMN]=mLastTouchedTime; hash[CONTENT_UI_SYNC_STATUS_COLUMN]=mUiSyncStatus; hash[CONTENT_UI_LAST_SYNC_RESULT_COLUMN]=mUiLastSyncResult; hash[CONTENT_TOTAL_COUNT_COLUMN]=mTotalCount; hash[CONTENT_HIERARCHICAL_NAME_COLUMN]=mHierarchicalName; return hash; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getMailboxForMessageId,public static Mailbox  (Context context long messageId){ final long mailboxId=Message.getKeyColumnLong(context messageId MessageColumns.MAILBOX_KEY); if (mailboxId != -1) { return Mailbox.restoreMailboxWithId(context mailboxId); } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getMailboxForPath,public static Mailbox  (Context context long accountId String path){ Mailbox mailbox=restoreMailboxForPath(context accountId path); if (mailbox == null) { mailbox=new Mailbox(); } return mailbox; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getMailboxIdsForSync,"public static Cursor  (final ContentResolver cr final long accountId){ return cr.query(Mailbox.CONTENT_URI Mailbox.ID_PROJECTION OUTBOX_PLUS_SYNCING_AND_ACCOUNT_SELECTION new String[]{Long.toString(accountId)} MailboxColumns.TYPE + "" ASC""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getMailboxIdsForSyncByType,public static Cursor  (final ContentResolver cr final long accountId final int mailboxType){ return cr.query(Mailbox.CONTENT_URI Mailbox.ID_PROJECTION SYNCING_AND_TYPE_FOR_ACCOUNT_SELECTION new String[]{Integer.toString(mailboxType) Long.toString(accountId)} null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getMailboxIdsFromBundle,"public static long[]  (Bundle bundle){ final int count=bundle.getInt(SYNC_EXTRA_MAILBOX_COUNT 0); if (count > 0) { if (bundle.getBoolean(SYNC_EXTRA_PUSH_ONLY false)) { LogUtils.w(Logging.LOG_TAG ""Mailboxes specified in a push only sync""); } if (bundle.getBoolean(SYNC_EXTRA_ACCOUNT_ONLY false)) { LogUtils.w(Logging.LOG_TAG ""Mailboxes specified in an account only sync""); } final long[] result=new long[count]; for (int i=0; i < count; i++) { result[i]=bundle.getLong(formatMailboxIdExtra(i) 0); } return result; } else { return null; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getMailboxType,public static int  (Context context long mailboxId){ final Uri url=ContentUris.withAppendedId(Mailbox.CONTENT_URI mailboxId); return Utility.getFirstRowInt(context url MAILBOX_TYPE_PROJECTION null null null MAILBOX_TYPE_TYPE_COLUMN -1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getMailboxesForPush,public static Cursor  (final ContentResolver cr final long accountId){ return cr.query(Mailbox.CONTENT_URI Mailbox.CONTENT_PROJECTION PUSH_MAILBOXES_FOR_ACCOUNT_SELECTION new String[]{Long.toString(accountId)} null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,getSystemMailboxName,"public static String  (Context context int mailboxType){ final int resId; switch (mailboxType) { case Mailbox.TYPE_INBOX: resId=R.string.mailbox_name_server_inbox; break; case Mailbox.TYPE_OUTBOX: resId=R.string.mailbox_name_server_outbox; break; case Mailbox.TYPE_DRAFTS: resId=R.string.mailbox_name_server_drafts; break; case Mailbox.TYPE_TRASH: resId=R.string.mailbox_name_server_trash; break; case Mailbox.TYPE_SENT: resId=R.string.mailbox_name_server_sent; break; case Mailbox.TYPE_JUNK: resId=R.string.mailbox_name_server_junk; break; case Mailbox.TYPE_STARRED: resId=R.string.mailbox_name_server_starred; break; case Mailbox.TYPE_UNREAD: resId=R.string.mailbox_name_server_all_unread; break; default : throw new IllegalArgumentException(""Illegal mailbox type""); } return context.getString(resId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,initMailbox,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/mailbox""); MESSAGE_COUNT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/mailboxCount""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,isAccountOnlyExtras,"public static boolean  (Bundle bundle){ final boolean result=bundle.getBoolean(SYNC_EXTRA_ACCOUNT_ONLY false); if (result) { final int count=bundle.getInt(SYNC_EXTRA_MAILBOX_COUNT 0); if (count != 0) { LogUtils.w(Logging.LOG_TAG ""Mailboxes specified in an account only sync""); } } return result; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,isPushOnlyExtras,"public static boolean  (Bundle bundle){ final boolean result=bundle.getBoolean(SYNC_EXTRA_PUSH_ONLY false); if (result) { final int count=bundle.getInt(SYNC_EXTRA_MAILBOX_COUNT 0); if (count != 0) { LogUtils.w(Logging.LOG_TAG ""Mailboxes specified in a push only sync""); } } return result; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,isRefreshable,public static boolean  (Context context long mailboxId){ if (mailboxId < 0) { return false; } switch (getMailboxType(context mailboxId)) { case -1: case TYPE_DRAFTS: case TYPE_OUTBOX: return false; } return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,isSyncable,public boolean  (){ return (mTotalCount >= 0) && isSyncableType(mType); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,isSyncableType,public static boolean  (final int mailboxType){ return SYNCABLE_TYPES.indexOfKey(mailboxType) >= 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,newArray,@Override public Mailbox[]  (int size){ return new Mailbox[size]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,newSystemMailbox,"public static Mailbox  (Context context long accountId int mailboxType){ final int syncInterval; final int flags; switch (mailboxType) { case TYPE_INBOX: flags=Mailbox.FLAG_HOLDS_MAIL | Mailbox.FLAG_ACCEPTS_MOVED_MAIL; syncInterval=0; break; case TYPE_SENT: case TYPE_TRASH: flags=Mailbox.FLAG_HOLDS_MAIL; syncInterval=0; break; case TYPE_DRAFTS: case TYPE_OUTBOX: flags=Mailbox.FLAG_HOLDS_MAIL; syncInterval=Account.CHECK_INTERVAL_NEVER; break; default : throw new IllegalArgumentException(""Bad mailbox type for newSystemMailbox: "" + mailboxType); } final Mailbox box=new Mailbox(); box.mAccountKey=accountId; box.mType=mailboxType; box.mSyncInterval=syncInterval; box.mFlagVisible=true; box.mServerId=box.mDisplayName=getSystemMailboxName(context mailboxType); box.mParentKey=Mailbox.NO_MAILBOX; box.mFlags=flags; return box; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,restore,@Override public void  (Cursor cursor){ mBaseUri=CONTENT_URI; mId=cursor.getLong(CONTENT_ID_COLUMN); mDisplayName=cursor.getString(CONTENT_DISPLAY_NAME_COLUMN); mServerId=cursor.getString(CONTENT_SERVER_ID_COLUMN); mParentServerId=cursor.getString(CONTENT
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,restoreMailboxForPath,"public static Mailbox  (Context context long accountId String path){ final Cursor c=context.getContentResolver().query(Mailbox.CONTENT_URI Mailbox.CONTENT_PROJECTION Mailbox.PATH_AND_ACCOUNT_SELECTION new String[]{path Long.toString(accountId)} null); if (c == null) throw new ProviderUnavailableException(); try { Mailbox mailbox=null; if (c.moveToFirst()) { mailbox=getContent(context c Mailbox.class); if (c.moveToNext()) { LogUtils.w(Logging.LOG_TAG ""Multiple mailboxes named \""%s\"""" path); } } else { LogUtils.i(Logging.LOG_TAG ""Could not find mailbox at \""%s\"""" path); } return mailbox; } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,restoreMailboxOfType,public static Mailbox  (Context context long accountId int type){ final long mailboxId=findMailboxOfType(context accountId type); if (mailboxId != Mailbox.NO_MAILBOX) { return Mailbox.restoreMailboxWithId(context mailboxId); } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,restoreMailboxWithId,public static Mailbox  (Context context long id){ return EmailContent.restoreContentWithId(context Mailbox.class Mailbox.CONTENT_URI Mailbox.CONTENT_PROJECTION id); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,resyncMailbox,"public static void  (final ContentResolver cr final android.accounts.Account account final long mailboxId){ final Cursor cursor=cr.query(Mailbox.CONTENT_URI new String[]{MailboxColumns.TYPE MailboxColumns.SERVER_ID} MailboxColumns._ID + ""=?"" new String[]{String.valueOf(mailboxId)} null); if (cursor == null || cursor.getCount() == 0) { LogUtils.w(Logging.LOG_TAG ""Mailbox %d not found"" mailboxId); return; } try { cursor.moveToFirst(); final int type=cursor.getInt(0); if (type >= TYPE_NOT_EMAIL) { throw new IllegalArgumentException(String.format(""Mailbox %d is not an Email mailbox"" mailboxId)); } final String serverId=cursor.getString(1); if (TextUtils.isEmpty(serverId)) { throw new IllegalArgumentException(String.format(""Mailbox %d has no server id"" mailboxId)); } final ArrayList<ContentProviderOperation> ops=new ArrayList<ContentProviderOperation>(); ops.add(ContentProviderOperation.newDelete(Message.CONTENT_URI).withSelection(Message.MAILBOX_SELECTION new String[]{String.valueOf(mailboxId)}).build()); ops.add(ContentProviderOperation.newUpdate(ContentUris.withAppendedId(Mailbox.CONTENT_URI mailboxId)).withValue(MailboxColumns.SYNC_KEY ""0"").build()); cr.applyBatch(AUTHORITY ops); final Bundle extras=createSyncBundle(mailboxId); extras.putBoolean(ContentResolver.SYNC_EXTRAS_IGNORE_SETTINGS true); ContentResolver.requestSync(account AUTHORITY extras); LogUtils.i(Logging.LOG_TAG ""requestSync resyncMailbox %s  %s"" account.toString() extras.toString()); } catch ( RemoteException e) { LogUtils.w(Logging.LOG_TAG e ""Failed to wipe mailbox %d"" mailboxId); } catch ( OperationApplicationException e) { LogUtils.w(Logging.LOG_TAG e ""Failed to wipe mailbox %d"" mailboxId); } finally { cursor.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,toContentValues,@Override public ContentValues  (){ final ContentValues values=new ContentValues(20); values.put(MailboxColumns.DISPLAY_NAME mDisplayName); values.put(MailboxColumns.SERVER_ID mServerId); values.put(MailboxColumns.PARENT_SERVER_ID mParentServerId); values
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,toString,"@Override public String  (){ return ""[Mailbox "" + mId + "": ""+ mDisplayName+ ""]""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,updateLastFullSyncTime,public void  (final Context c final long syncTime){ if (syncTime != mLastFullSyncTime) { final ContentValues values=new ContentValues(1); values.put(MailboxColumns.LAST_FULL_SYNC_TIME syncTime); update(c values); mLastFullSyncTime=syncTime; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,updateMessageCount,public void  (final Context c final int count){ if (count != mTotalCount) { final ContentValues values=new ContentValues(1); values.put(MailboxColumns.TOTAL_COUNT count); update(c values); mTotalCount=count; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Mailbox.java,writeToParcel,@Override public void  (Parcel dest int flags){ dest.writeParcelable(mBaseUri flags); dest.writeLong(mId); dest.writeString(mDisplayName); dest.writeString(mServerId); dest.writeString(mParentServerId); dest.writeLong(mParentKey); dest.writeLong(mAccountK
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,Account,public  (Parcel in){ mBaseUri=Account.CONTENT_URI; mId=in.readLong(); mDisplayName=in.readString(); mEmailAddress=in.readString(); mSyncKey=in.readString(); mSyncLookback=in.readInt(); mSyncInterval=in.readInt(); mHostAuthKeyRecv=in.readLong(); mHostAuthKeySend=in.readLong(); mFlags=in.readInt(); in.readString(); mSenderName=in.readString(); mRingtoneUri=in.readString(); mProtocolVersion=in.readString(); in.readInt(); mSecuritySyncKey=in.readString(); mSignature=in.readString(); mPolicyKey=in.readLong(); mHostAuthRecv=null; if (in.readByte() == 1) { mHostAuthRecv=new HostAuth(in); } mHostAuthSend=null; if (in.readByte() == 1) { mHostAuthSend=new HostAuth(in); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,clearSecurityHoldOnAllAccounts,public static void  (Context context){ ContentResolver resolver=context.getContentResolver(); Cursor c=resolver.query(Account.CONTENT_URI ACCOUNT_FLAGS_PROJECTION SECURITY_NONZERO_SELECTION null null); try { while (c.moveToNext()) { int flags=c.getInt(ACCOUNT_FLAGS_COLUMN_FLAGS); if (0 != (flags & FLAGS_SECURITY_HOLD)) { ContentValues cv=new ContentValues(); cv.put(AccountColumns.FLAGS flags & ~FLAGS_SECURITY_HOLD); long accountId=c.getLong(ACCOUNT_FLAGS_COLUMN_ID); Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI accountId); resolver.update(uri cv null null); } } } finally { c.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,createFromParcel,@Override public Account  (Parcel in){ return new Account(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,describeContents,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,ensureLoaded,"public void  (final Context context){ if (mHostAuthKeyRecv == 0 && mHostAuthRecv == null) { throw new IllegalStateException(""Trying to load incomplete Account object""); } getOrCreateHostAuthRecv(context).ensureLoaded(context); if (mHostAuthKeySend != 0) { getOrCreateHostAuthSend(context); if (mHostAuthSend != null) { mHostAuthSend.ensureLoaded(context); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,fromJson,"protected static Account  (final JSONObject json){ try { final Account a=new Account(); a.mDisplayName=json.optString(AccountColumns.DISPLAY_NAME); a.mEmailAddress=json.getString(AccountColumns.EMAIL_ADDRESS); a.mSyncLookback=json.getInt(AccountColumns.SYNC_LOOKBACK); a.mSyncInterval=json.getInt(AccountColumns.SYNC_INTERVAL); final JSONObject recvJson=json.getJSONObject(JSON_TAG_HOST_AUTH_RECV); a.mHostAuthRecv=HostAuth.fromJson(recvJson); final JSONObject sendJson=json.optJSONObject(JSON_TAG_HOST_AUTH_SEND); if (sendJson != null) { a.mHostAuthSend=HostAuth.fromJson(sendJson); } a.mFlags=json.getInt(AccountColumns.FLAGS); a.mSenderName=json.optString(AccountColumns.SENDER_NAME); a.mProtocolVersion=json.optString(AccountColumns.PROTOCOL_VERSION); a.mSignature=json.optString(AccountColumns.SIGNATURE); a.mPingDuration=json.optInt(AccountColumns.PING_DURATION 0); return a; } catch ( final JSONException e) { LogUtils.d(LogUtils.TAG e ""Exception while deserializing Account""); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,fromJsonString,"public static Account  (final String jsonString){ try { final JSONObject json=new JSONObject(jsonString); return fromJson(json); } catch ( final JSONException e) { LogUtils.d(LogUtils.TAG e ""Could not parse json for account""); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getAccountForMessageId,public static Account  (Context context long messageId){ long accountId=getAccountIdForMessageId(context messageId); if (accountId != -1) { return Account.restoreAccountWithId(context accountId); } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getAccountIdForMessageId,public static long  (Context context long messageId){ return Message.getKeyColumnLong(context messageId MessageColumns.ACCOUNT_KEY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getAccountManagerAccount,public android.accounts.Account  (String type){ return new android.accounts.Account(mEmailAddress type); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getContentNotificationUri,@Override protected Uri  (){ return Account.CONTENT_URI; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getDefaultAccountId,public static long  (final Context context final long lastUsedAccountId){ final Cursor cursor=context.getContentResolver().query(CONTENT_URI ID_PROJECTION null null null); long firstAccount=NO_ACCOUNT; try { if (cursor != null && cursor.moveToFirst()) { do { final long accountId=cursor.getLong(Account.ID_PROJECTION_COLUMN); if (accountId == lastUsedAccountId) { return accountId; } if (firstAccount == NO_ACCOUNT) { firstAccount=accountId; } } while (cursor.moveToNext()); } } finally { if (cursor != null) { cursor.close(); } } return firstAccount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getDeletePolicy,public int  (){ return (mFlags & FLAGS_DELETE_POLICY_MASK) >> FLAGS_DELETE_POLICY_SHIFT; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getDisplayName,public String  (){ return mDisplayName; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getEmailAddress,public String  (){ return mEmailAddress; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getFlags,public int  (){ return mFlags; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getId,public long  (){ return mId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getInboxId,public static long  (Context context long accountId){ return Utility.getFirstRowLong(context Mailbox.CONTENT_URI ID_PROJECTION FIND_INBOX_SELECTION new String[]{Long.toString(accountId)} null ID_PROJECTION_COLUMN -1L); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getOrCreateHostAuthRecv,public HostAuth  (Context context){ if (mHostAuthRecv == null) { if (mHostAuthKeyRecv != 0) { mHostAuthRecv=HostAuth.restoreHostAuthWithId(context mHostAuthKeyRecv); } else { mHostAuthRecv=new HostAuth(); } } return mHostAuthRecv; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getOrCreateHostAuthSend,public HostAuth  (Context context){ if (mHostAuthSend == null) { if (mHostAuthKeySend != 0) { mHostAuthSend=HostAuth.restoreHostAuthWithId(context mHostAuthKeySend); } else { mHostAuthSend=new HostAuth(); } } return mHostAuthSend; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getPingDuration,public long  (){ return mPingDuration; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getProtocol,public String  (Context context){ HostAuth hostAuth=getOrCreateHostAuthRecv(context); if (hostAuth != null) { return hostAuth.mProtocol; } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getRingtone,@Deprecated public String  (){ return mRingtoneUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getSenderName,public String  (){ return mSenderName; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getSignature,public String  (){ return mSignature; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getSyncInterval,public int  (){ return mSyncInterval; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,getSyncLookback,public int  (){ return mSyncLookback; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,initAccount,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/account""); RESET_NEW_MESSAGE_COUNT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/resetNewMessageCount""); NOTIFIER_URI=Uri.parse(EmailContent.CONTENT_NOTIFIER_URI + ""/account""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,isSecurityHold,public static boolean  (Context context long accountId){ return (Utility.getFirstRowLong(context ContentUris.withAppendedId(Account.CONTENT_URI accountId) ACCOUNT_FLAGS_PROJECTION null null null ACCOUNT_FLAGS_COLUMN_FLAGS 0L) & Account.FLAGS_SECURITY_HOLD) != 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,isTemporary,public boolean  (){ return mTemporary; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,isValidId,public static boolean  (Context context long accountId){ return null != Utility.getFirstRowLong(context CONTENT_URI ID_PROJECTION ID_SELECTION new String[]{Long.toString(accountId)} null ID_PROJECTION_COLUMN); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,newArray,@Override public Account[]  (int size){ return new Account[size]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,refresh,public void  (Context context){ Cursor c=context.getContentResolver().query(getUri() Account.CONTENT_PROJECTION null null null); try { c.moveToFirst(); restore(c); } finally { if (c != null) { c.close(); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,restore,@Override public void  (Cursor cursor){ mId=cursor.getLong(CONTENT_ID_COLUMN); mBaseUri=CONTENT_URI; mDisplayName=cursor.getString(CONTENT_DISPLAY_NAME_COLUMN); mEmailAddress=cursor.getString(CONTENT_EMAIL_ADDRESS_COLUMN); mSyncKey=cursor.getString(CONTEN
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,restoreAccountWithAddress,"public static Account  (Context context String emailAddress ContentObserver observer){ final Cursor c=context.getContentResolver().query(CONTENT_URI new String[]{AccountColumns._ID} AccountColumns.EMAIL_ADDRESS + ""=?"" new String[]{emailAddress} null); try { if (c == null || !c.moveToFirst()) { return null; } final long id=c.getLong(c.getColumnIndex(AccountColumns._ID)); return restoreAccountWithId(context id observer); } finally { if (c != null) { c.close(); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,restoreAccountWithId,public static Account  (Context context long id ContentObserver observer){ return EmailContent.restoreContentWithId(context Account.class Account.CONTENT_URI Account.CONTENT_PROJECTION id observer); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,save,@Override public Uri  (Context context){ if (isSaved()) { throw new UnsupportedOperationException(); } if (mHostAuthRecv == null && mHostAuthSend == null && mPolicy != null) { return super.save(context); } int index=0; int recvIndex=-1; int recvCredential
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setDeletePolicy,public void  (int newPolicy){ mFlags&=~FLAGS_DELETE_POLICY_MASK; mFlags|=(newPolicy << FLAGS_DELETE_POLICY_SHIFT) & FLAGS_DELETE_POLICY_MASK; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setDisplayName,public void  (String description){ mDisplayName=description; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setEmailAddress,public void  (String emailAddress){ mEmailAddress=emailAddress; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setFlags,public void  (int newFlags){ mFlags=newFlags; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setPingDuration,public void  (long value){ mPingDuration=value; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setSenderName,public void  (String name){ mSenderName=name; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setSignature,@VisibleForTesting public void  (String signature){ mSignature=signature; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setSyncInterval,public void  (int minutes){ mSyncInterval=minutes; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setSyncLookback,public void  (int value){ mSyncLookback=value; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,setTemporary,public void  (boolean temporary){ mTemporary=temporary; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,toContentValues,@Override public ContentValues  (){ ContentValues values=new ContentValues(); values.put(AccountColumns.DISPLAY_NAME mDisplayName); values.put(AccountColumns.EMAIL_ADDRESS mEmailAddress); values.put(AccountColumns.SYNC_KEY mSyncKey); values.put(AccountCol
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,toJson,"protected JSONObject  (){ try { final JSONObject json=new JSONObject(); json.putOpt(AccountColumns.DISPLAY_NAME mDisplayName); json.put(AccountColumns.EMAIL_ADDRESS mEmailAddress); json.put(AccountColumns.SYNC_LOOKBACK mSyncLookback); json.put(AccountColumns.SYNC_INTERVAL mSyncInterval); final JSONObject recvJson=mHostAuthRecv.toJson(); json.put(JSON_TAG_HOST_AUTH_RECV recvJson); if (mHostAuthSend != null) { final JSONObject sendJson=mHostAuthSend.toJson(); json.put(JSON_TAG_HOST_AUTH_SEND sendJson); } json.put(AccountColumns.FLAGS mFlags); json.putOpt(AccountColumns.SENDER_NAME mSenderName); json.putOpt(AccountColumns.PROTOCOL_VERSION mProtocolVersion); json.putOpt(AccountColumns.SIGNATURE mSignature); json.put(AccountColumns.PING_DURATION mPingDuration); return json; } catch ( final JSONException e) { LogUtils.d(LogUtils.TAG e ""Exception while serializing Account""); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,toJsonString,public String  (final Context context){ ensureLoaded(context); final JSONObject json=toJson(); if (json != null) { return json.toString(); } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,toString,"@Override public String  (){ StringBuilder sb=new StringBuilder(""[""); if (mHostAuthRecv != null && mHostAuthRecv.mProtocol != null) { sb.append(mHostAuthRecv.mProtocol); sb.append(':'); } if (mDisplayName != null) sb.append(mDisplayName); sb.append(':'); "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Account.java,writeToParcel,@Override public void  (Parcel dest int flags){ dest.writeLong(mId); dest.writeString(mDisplayName); dest.writeString(mEmailAddress); dest.writeString(mSyncKey); dest.writeInt(mSyncLookback); dest.writeInt(mSyncInterval); dest.writeLong(mHostAuthKeyRecv);
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,MessageChangeLogTable,protected  (final long messageKey final String serverId final long id){ mMessageKey=messageKey; mServerId=serverId; mLastId=id; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,deleteRowsForMessages,protected static int  (final ContentResolver cr final Uri uri final long[] messageKeys final int count){ if (count == 0) { return 0; } return cr.delete(uri getSelectionForMessages(messageKeys count) null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,failMessages,protected static int  (final ContentResolver cr final Uri uri final long[] messageKeys final int count){ return updateStatusForMessages(cr uri messageKeys count STATUS_FAILED); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,getCursor,protected static Cursor  (final ContentResolver cr final Uri uri final String[] projection final long accountId){ final String accountIdString=String.valueOf(accountId); if (startProcessing(cr uri accountIdString) <= 0) { return null; } return getRowsToProcess(cr uri projection accountIdString); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,getMessageId,public final long  (){ return mMessageKey; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,getRowsToProcess,"private static Cursor  (final ContentResolver cr final Uri uri final String[] projection final String accountId){ final String[] args={accountId STATUS_PROCESSING_STRING}; return cr.query(uri projection SELECTION_BY_ACCOUNT_KEY_AND_STATUS args ID + "" ASC""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,getSelectionForMessages,"private static String  (final long[] messageKeys final int count){ final StringBuilder sb=new StringBuilder(SELECTION_BY_MESSAGE_KEYS_PREFIX); for (int i=0; i < count; ++i) { if (i != 0) { sb.append("" ""); } sb.append(messageKeys[i]); } sb.append("")""); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,getServerId,public final String  (){ return mServerId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,retryMessages,protected static int  (final ContentResolver cr final Uri uri final long[] messageKeys final int count){ return updateStatusForMessages(cr uri messageKeys count STATUS_NONE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,startProcessing,private static int  (final ContentResolver cr final Uri uri final String accountId){ final String[] args=new String[2]; args[0]=accountId; final ContentValues cv=new ContentValues(1); args[1]=STATUS_PROCESSING_STRING; cv.put(STATUS STATUS_FAILED); cr.update(uri cv SELECTION_BY_ACCOUNT_KEY_AND_STATUS args); args[1]=STATUS_NONE_STRING; cv.put(STATUS STATUS_PROCESSING); return cr.update(uri cv SELECTION_BY_ACCOUNT_KEY_AND_STATUS args); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageChangeLogTable.java,updateStatusForMessages,private static int  (final ContentResolver cr final Uri uri final long[] messageKeys final int count final int status){ if (count == 0) { return 0; } final ContentValues cv=new ContentValues(1); cv.put(STATUS status); return cr.update(uri cv getSelectionForMessages(messageKeys count) null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,MessageMove,private  (final long messageKey final String serverId final long id final long srcFolderKey final long dstFolderKey final String srcFolderServerId final String dstFolderServerId){ super(messageKey serverId id); mSrcFolderKey=srcFolderKey; mDstFolderKey=dstFolderKey; mSrcFolderServerId=srcFolderServerId; mDstFolderServerId=dstFolderServerId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,getDestFolderId,public final String  (){ return mDstFolderServerId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,getLastSyncedMailboxForMessage,"public static long  (final ContentResolver cr final long messageId){ final String[] selectionArgs={String.valueOf(messageId)}; final Cursor moveCursor=cr.query(CONTENT_URI ProjectionLastSyncedMailboxQuery.PROJECTION SELECTION_LAST_SYNCED_MAILBOX selectionArgs ID + "" ASC""); if (moveCursor != null) { try { if (moveCursor.moveToFirst()) { return moveCursor.getLong(ProjectionLastSyncedMailboxQuery.COLUMN_SRC_FOLDER_KEY); } } finally { moveCursor.close(); } } final Cursor messageCursor=cr.query(ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI messageId) EmailContent.Message.MAILBOX_KEY_PROJECTION null null null); if (messageCursor != null) { try { if (messageCursor.moveToFirst()) { return messageCursor.getLong(0); } } finally { messageCursor.close(); } } return Mailbox.NO_MAILBOX; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,getMoves,"public static List<MessageMove>  (final Context context final long accountId){ final ContentResolver cr=context.getContentResolver(); final Cursor c=getCursor(cr CONTENT_URI ProjectionMoveQuery.PROJECTION accountId); if (c == null) { return null; } LongSparseArray<MessageMove> movesMap=new LongSparseArray(); try { while (c.moveToNext()) { final long id=c.getLong(ProjectionMoveQuery.COLUMN_ID); final long messageKey=c.getLong(ProjectionMoveQuery.COLUMN_MESSAGE_KEY); final String serverId=c.getString(ProjectionMoveQuery.COLUMN_SERVER_ID); final long srcFolderKey=c.getLong(ProjectionMoveQuery.COLUMN_SRC_FOLDER_KEY); final long dstFolderKey=c.getLong(ProjectionMoveQuery.COLUMN_DST_FOLDER_KEY); final String srcFolderServerId=c.getString(ProjectionMoveQuery.COLUMN_SRC_FOLDER_SERVER_ID); final String dstFolderServerId=c.getString(ProjectionMoveQuery.COLUMN_DST_FOLDER_SERVER_ID); final MessageMove existingMove=movesMap.get(messageKey); if (existingMove != null) { if (existingMove.mLastId >= id) { LogUtils.w(LOG_TAG ""Moves were not in ascending id order""); } if (!existingMove.mDstFolderServerId.equals(srcFolderServerId) || existingMove.mDstFolderKey != srcFolderKey) { LogUtils.w(LOG_TAG ""existing move's dst not same as this move's src""); } existingMove.mDstFolderKey=dstFolderKey; existingMove.mDstFolderServerId=dstFolderServerId; existingMove.mLastId=id; } else { movesMap.put(messageKey new MessageMove(messageKey serverId id srcFolderKey dstFolderKey srcFolderServerId dstFolderServerId)); } } } finally { c.close(); } final int moveCount=movesMap.size(); final long[] unmovedMessages=new long[moveCount]; int unmovedMessagesCount=0; final ArrayList<MessageMove> moves=new ArrayList(moveCount); for (int i=0; i < movesMap.size(); ++i) { final MessageMove move=movesMap.valueAt(i); if ((move.mServerId == null || move.mServerId.length() == 0) || move.mSrcFolderKey == move.mDstFolderKey) { unmovedMessages[unmovedMessagesCount]=move.mMessageKey; ++unmovedMessagesCount; } else { moves.add(move); } } if (unmovedMessagesCount != 0) { deleteRowsForMessages(cr CONTENT_URI unmovedMessages unmovedMessagesCount); } if (moves.isEmpty()) { return null; } return moves; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,getSourceFolderId,public final String  (){ return mSrcFolderServerId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,getSourceFolderKey,public final long  (){ return mSrcFolderKey; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,init,public static void  (){ CONTENT_URI=EmailContent.CONTENT_URI.buildUpon().appendEncodedPath(PATH).build(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,upsyncFail,public static void  (final ContentResolver cr final long[] messageKeys final int count){ failMessages(cr CONTENT_URI messageKeys count); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,upsyncRetry,public static void  (final ContentResolver cr final long[] messageKeys final int count){ retryMessages(cr CONTENT_URI messageKeys count); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageMove.java,upsyncSuccessful,public static void  (final ContentResolver cr final long[] messageKeys final int count){ deleteRowsForMessages(cr CONTENT_URI messageKeys count); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,MessageStateChange,private  (final long messageKey final String serverId final long id final int oldFlagRead final int newFlagRead final int oldFlagFavorite final int newFlagFavorite final long mailboxId){ super(messageKey serverId id); mOldFlagRead=oldFlagRead; mNewFlagRead=newFlagRead; mOldFlagFavorite=oldFlagFavorite; mNewFlagFavorite=newFlagFavorite; mMailboxId=mailboxId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,convertToChangesMap,public static LongSparseArray<List<MessageStateChange>>  (final List<MessageStateChange> changes){ if (changes == null) { return null; } final LongSparseArray<List<MessageStateChange>> changesMap=new LongSparseArray(); for ( final MessageStateChange change : changes) { List<MessageStateChange> list=changesMap.get(change.mMailboxId); if (list == null) { list=new ArrayList(); changesMap.put(change.mMailboxId list); } list.add(change); } if (changesMap.size() == 0) { return null; } return changesMap; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,getChanges,"public static List<MessageStateChange>  (final Context context final long accountId final boolean ignoreFavorites){ final ContentResolver cr=context.getContentResolver(); final Cursor c=getCursor(cr CONTENT_URI ProjectionChangeQuery.PROJECTION accountId); if (c == null) { return null; } LongSparseArray<MessageStateChange> changesMap=new LongSparseArray(); try { while (c.moveToNext()) { final long id=c.getLong(ProjectionChangeQuery.COLUMN_ID); final long messageKey=c.getLong(ProjectionChangeQuery.COLUMN_MESSAGE_KEY); final String serverId=c.getString(ProjectionChangeQuery.COLUMN_SERVER_ID); final int oldFlagRead=c.getInt(ProjectionChangeQuery.COLUMN_OLD_FLAG_READ); final int newFlagReadTable=c.getInt(ProjectionChangeQuery.COLUMN_NEW_FLAG_READ); final int newFlagRead=(newFlagReadTable == VALUE_UNCHANGED) ? oldFlagRead : newFlagReadTable; final int oldFlagFavorite=c.getInt(ProjectionChangeQuery.COLUMN_OLD_FLAG_FAVORITE); final int newFlagFavoriteTable=c.getInt(ProjectionChangeQuery.COLUMN_NEW_FLAG_FAVORITE); final int newFlagFavorite=(ignoreFavorites || newFlagFavoriteTable == VALUE_UNCHANGED) ? oldFlagFavorite : newFlagFavoriteTable; final MessageStateChange existingChange=changesMap.get(messageKey); if (existingChange != null) { if (existingChange.mLastId >= id) { LogUtils.w(LOG_TAG ""DChanges were not in ascending id order""); } if (existingChange.mNewFlagRead != oldFlagRead || existingChange.mNewFlagFavorite != oldFlagFavorite) { LogUtils.w(LOG_TAG ""existing change inconsistent with new change""); } existingChange.mNewFlagRead=newFlagRead; existingChange.mNewFlagFavorite=newFlagFavorite; existingChange.mLastId=id; } else { final long mailboxId=MessageMove.getLastSyncedMailboxForMessage(cr messageKey); if (mailboxId == Mailbox.NO_MAILBOX) { LogUtils.e(LOG_TAG ""No mailbox id for message %d"" messageKey); } else { changesMap.put(messageKey new MessageStateChange(messageKey serverId id oldFlagRead newFlagRead oldFlagFavorite newFlagFavorite mailboxId)); } } } } finally { c.close(); } final int count=changesMap.size(); final long[] unchangedMessages=new long[count]; int unchangedMessagesCount=0; final ArrayList<MessageStateChange> changes=new ArrayList(count); for (int i=0; i < changesMap.size(); ++i) { final MessageStateChange change=changesMap.valueAt(i); if ((change.mServerId == null || change.mServerId.length() == 0) || (change.mOldFlagRead == change.mNewFlagRead && change.mOldFlagFavorite == change.mNewFlagFavorite)) { unchangedMessages[unchangedMessagesCount]=change.mMessageKey; ++unchangedMessagesCount; } else { changes.add(change); } } if (unchangedMessagesCount != 0) { deleteRowsForMessages(cr CONTENT_URI unchangedMessages unchangedMessagesCount); } if (changes.isEmpty()) { return null; } return changes; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,getNewFlagFavorite,public final int  (){ if (mOldFlagFavorite == mNewFlagFavorite) { return VALUE_UNCHANGED; } return mNewFlagFavorite; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,getNewFlagRead,public final int  (){ if (mOldFlagRead == mNewFlagRead) { return VALUE_UNCHANGED; } return mNewFlagRead; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,init,public static void  (){ CONTENT_URI=EmailContent.CONTENT_URI.buildUpon().appendEncodedPath(PATH).build(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,upsyncRetry,public static void  (final ContentResolver cr final long[] messageKeys final int count){ retryMessages(cr CONTENT_URI messageKeys count); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\MessageStateChange.java,upsyncSuccessful,public static void  (final ContentResolver cr final long[] messageKeys final int count){ deleteRowsForMessages(cr CONTENT_URI messageKeys count); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,Policy,public  (Parcel in){ mBaseUri=CONTENT_URI; mId=in.readLong(); mPasswordMode=in.readInt(); mPasswordMinLength=in.readInt(); mPasswordMaxFails=in.readInt(); mPasswordHistory=in.readInt(); mPasswordExpirationDays=in.readInt(); mPasswordComplexChars=in.readInt(); mMaxScreenLockTime=in.readInt(); mRequireRemoteWipe=in.readInt() == 1; mRequireEncryption=in.readInt() == 1; mRequireEncryptionExternal=in.readInt() == 1; mRequireManualSyncWhenRoaming=in.readInt() == 1; mDontAllowCamera=in.readInt() == 1; mDontAllowAttachments=in.readInt() == 1; mDontAllowHtml=in.readInt() == 1; mMaxAttachmentSize=in.readInt(); mMaxTextTruncationSize=in.readInt(); mMaxHtmlTruncationSize=in.readInt(); mMaxEmailLookback=in.readInt(); mMaxCalendarLookback=in.readInt(); mPasswordRecoveryEnabled=in.readInt() == 1; mProtocolPoliciesEnforced=in.readString(); mProtocolPoliciesUnsupported=in.readString(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,addPolicyStringToList,public static ArrayList<String>  (String policyString ArrayList<String> policyList){ if (policyString != null) { int start=0; int len=policyString.length(); while (start < len) { int end=policyString.indexOf(POLICY_STRING_DELIMITER start); if (end > start) { policyList.add(policyString.substring(start end)); start=end + 1; } else { break; } } } return policyList; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,appendPolicy,"private static void  (StringBuilder sb String code int value){ sb.append(code); sb.append("":""); sb.append(value); sb.append("" ""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,createFromParcel,@Override public Policy  (Parcel in){ return new Policy(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,describeContents,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,equals,@Override public boolean  (Object other){ if (!(other instanceof Policy)) return false; Policy otherPolicy=(Policy)other; if (mRequireEncryption != otherPolicy.mRequireEncryption) return false; if (mRequireEncryptionExternal != otherPolicy.mRequireEncrypt
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,getAccountIdWithPolicyKey,"public static long  (Context context long id){ return Utility.getFirstRowLong(context Account.CONTENT_URI Account.ID_PROJECTION AccountColumns.POLICY_KEY + ""=?"" new String[]{Long.toString(id)} null Account.ID_PROJECTION_COLUMN Account.NO_ACCOUNT); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,getContentNotificationUri,@Override protected Uri  (){ return Policy.CONTENT_URI; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,getDPManagerPasswordExpirationTimeout,public long  (){ long result=mPasswordExpirationDays * DAYS_TO_MSEC; if (result > 0) { result+=EXPIRATION_OFFSET_MSEC; } return result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,getDPManagerPasswordQuality,public int  (){ switch (mPasswordMode) { case PASSWORD_MODE_SIMPLE: return DevicePolicyManager.PASSWORD_QUALITY_NUMERIC; case PASSWORD_MODE_STRONG: if (mPasswordComplexChars == 0) { return DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC; } else { return DevicePolicyManager.PASSWORD_QUALITY_COMPLEX; } default : return DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,hashCode,@Override public int  (){ int code=mRequireEncryption ? 1 : 0; code+=(mRequireEncryptionExternal ? 1 : 0) << 1; code+=(mRequireRemoteWipe ? 1 : 0) << 2; code+=(mMaxScreenLockTime << 3); code+=(mPasswordComplexChars << 6); code+=(mPasswordExpirationDays <<
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,initPolicy,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/policy""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,newArray,@Override public Policy[]  (int size){ return new Policy[size]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,normalize,"public void  (){ if (mPasswordMode == PASSWORD_MODE_NONE) { mPasswordMaxFails=0; mMaxScreenLockTime=0; mPasswordMinLength=0; mPasswordComplexChars=0; mPasswordHistory=0; mPasswordExpirationDays=0; } else { if ((mPasswordMode != PASSWORD_MODE_SIMPLE) && (mPasswordMode != PASSWORD_MODE_STRONG)) { throw new IllegalArgumentException(""password mode""); } if (mPasswordMode == PASSWORD_MODE_SIMPLE) { mPasswordComplexChars=0; } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,restore,@Override public void  (Cursor cursor){ mBaseUri=CONTENT_URI; mId=cursor.getLong(CONTENT_ID_COLUMN); mPasswordMode=cursor.getInt(CONTENT_PASSWORD_MODE_COLUMN); mPasswordMinLength=cursor.getInt(CONTENT_PASSWORD_MIN_LENGTH_COLUMN); mPasswordMaxFails=cursor.
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,restorePolicyWithId,public static Policy  (Context context long id ContentObserver observer){ return EmailContent.restoreContentWithId(context Policy.class Policy.CONTENT_URI Policy.CONTENT_PROJECTION id observer); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,save,@Override public Uri  (Context context){ normalize(); return super.save(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,setAttachmentFlagsForNewPolicy,"public static void  (Context context Account account Policy policy){ ContentResolver resolver=context.getContentResolver(); Cursor c=resolver.query(Attachment.CONTENT_URI ATTACHMENT_RESET_PROJECTION AttachmentColumns.ACCOUNT_KEY + ""=?"" new String[]{Long.toString(account.mId)} null); ContentValues cv=new ContentValues(); try { int policyMax=policy.mDontAllowAttachments ? 0 : (policy.mMaxAttachmentSize > 0) ? policy.mMaxAttachmentSize : Integer.MAX_VALUE; while (c.moveToNext()) { int flags=c.getInt(ATTACHMENT_RESET_PROJECTION_FLAGS); int size=c.getInt(ATTACHMENT_RESET_PROJECTION_SIZE); boolean wasRestricted=(flags & Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD) != 0; boolean isRestricted=size > policyMax; if (isRestricted != wasRestricted) { if (isRestricted) { flags|=Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD; } else { flags&=~Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD; } long id=c.getLong(ATTACHMENT_RESET_PROJECTION_ID); cv.put(AttachmentColumns.FLAGS flags); resolver.update(ContentUris.withAppendedId(Attachment.CONTENT_URI id) cv null null); } } } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,toContentValues,@Override public ContentValues  (){ ContentValues values=new ContentValues(); values.put(PolicyColumns.PASSWORD_MODE mPasswordMode); values.put(PolicyColumns.PASSWORD_MIN_LENGTH mPasswordMinLength); values.put(PolicyColumns.PASSWORD_MAX_FAILS mPasswordMax
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,toString,"@Override public String  (){ StringBuilder sb=new StringBuilder(""[""); if (equals(NO_POLICY)) { sb.append(""No policies]""); } else { if (mPasswordMode == PASSWORD_MODE_NONE) { sb.append(""Pwd none ""); } else { appendPolicy(sb ""Pwd strong"" mPasswordMode == PA"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\Policy.java,writeToParcel,@Override public void  (Parcel dest int flags){ dest.writeLong(mId); dest.writeInt(mPasswordMode); dest.writeInt(mPasswordMinLength); dest.writeInt(mPasswordMaxFails); dest.writeInt(mPasswordHistory); dest.writeInt(mPasswordExpirationDays); dest.writeInt(
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,AccountServiceProxy,"public  (Context _context){ super(_context getIntentForEmailPackage(_context ""ACCOUNT_INTENT"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,asBinder,@Override public IBinder  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,getAccountColor,"@Override public int  (final long accountId){ setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mReturn=mService.getAccountColor(accountId); } }  ""getAccountColor""); waitForCompletion(); if (mReturn == null) { return DEFAULT_AC"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,getConfigurationData,"@Override public Bundle  (final String accountType){ setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mReturn=mService.getConfigurationData(accountType); } }  ""getConfigurationData""); waitForCompletion(); if (mReturn == null) "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,getDeviceId,"@Override public String  (){ setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mReturn=mService.getDeviceId(); } }  ""getDeviceId""); waitForCompletion(); if (mReturn == null) { return null; } else { return (String)mReturn; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,onConnected,@Override public void  (IBinder binder){ mService=IAccountService.Stub.asInterface(binder); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\AccountServiceProxy.java,run,@Override public void  () throws RemoteException { mReturn=mService.getDeviceId(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\provider\QuickResponse.java,initQuickResponse,"public static void  (){ CONTENT_URI=Uri.parse(EmailContent.CONTENT_URI + ""/quickresponse""); ACCOUNT_ID_URI=Uri.parse(EmailContent.CONTENT_URI + ""/quickresponse/account""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,EmailServiceProxy,public  (Context _context Intent _intent){ super(_context _intent); try { Device.getDeviceId(_context); } catch ( IOException e) { } TempDirectory.setTempDirectory(_context); isRemote=true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,asBinder,@Override public IBinder  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,autoDiscover,"@Override public Bundle  (final String userName final String password) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mReturn=mService.autoDiscover(userName password); } }  ""autoDiscover""); waitForCo"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,deleteExternalAccountPIMData,"@Override public void  (final String emailAddress) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mService.deleteExternalAccountPIMData(emailAddress); } }  ""deleteAccountPIMData""); waitForCompletion("
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,getApiVersion,"public int  (){ setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mReturn=mService.getApiVersion(); } }  ""getApiVersion""); waitForCompletion(); if (mReturn == null) { LogUtils.wtf(TAG ""failed to get api version""); return -1; } else { return (Integer)mReturn; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,isRemote,public boolean  (){ return isRemote; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,loadAttachment,@Override public void  (final IEmailServiceCallback cb final long accountId final long attachmentId final boolean background) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { try { mService.loadAttachm
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,onConnected,@Override public void  (IBinder binder){ mService=IEmailService.Stub.asInterface(binder); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,pushModify,"@Override public void  (final long accountId) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mService.pushModify(accountId); } }  ""pushModify""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,run,@Override public void  () throws RemoteException { mReturn=mService.getApiVersion(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,searchMessages,@Override public int  (final long accountId final SearchParams searchParams final long destMailboxId) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mReturn=mService.searchMessages(accountId searchPa
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,sendMail,"@Override public void  (final long accountId) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mService.sendMail(accountId); } }  ""sendMail""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,sendMeetingResponse,"@Override public void  (final long messageId final int response) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mService.sendMeetingResponse(messageId response); } }  ""sendMeetingResponse""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,setLogging,"@Override public void  (final int flags) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mService.setLogging(flags); } }  ""setLogging""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,sync,"@Override public int  (final long accountId final Bundle syncExtras){ setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mReturn=mService.sync(accountId syncExtras); } }  ""sync""); waitForCompletion(); if (mReturn == null) { retu"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,updateFolderList,"@Override public void  (final long accountId) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mService.updateFolderList(accountId); } }  ""updateFolderList""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\EmailServiceProxy.java,validate,"@Override public Bundle  (final HostAuthCompat hostAuthCom) throws RemoteException { setTask(new ProxyTask(){ @Override public void run() throws RemoteException { mReturn=mService.validate(hostAuthCom); } }  ""validate""); waitForCompletion(); if (mReturn ="
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,HostAuthCompat,public  (Parcel in){ mProtocol=in.readString(); mAddress=in.readString(); mPort=in.readInt(); mFlags=in.readInt(); mLogin=in.readString(); mPassword=in.readString(); mDomain=in.readString(); mClientCertAlias=in.readString(); mServerCert=in.createByteArray(); mProviderId=in.readString(); mAccessToken=in.readString(); mRefreshToken=in.readString(); mExpiration=in.readLong(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,createFromParcel,@Override public HostAuthCompat  (Parcel in){ return new HostAuthCompat(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,describeContents,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,newArray,@Override public HostAuthCompat[]  (int size){ return new HostAuthCompat[size]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,toHostAuth,public HostAuth  (){ HostAuth hostAuth=new HostAuth(); hostAuth.mProtocol=mProtocol; hostAuth.mAddress=mAddress; hostAuth.mPort=mPort; hostAuth.mFlags=mFlags; hostAuth.mLogin=mLogin; hostAuth.mPassword=mPassword; hostAuth.mDomain=mDomain; hostAuth.mClientCertAlias=mClientCertAlias; hostAuth.mServerCert=mServerCert; if (!TextUtils.isEmpty(mProviderId)) { hostAuth.mCredential=new Credential(); hostAuth.mCredential.mProviderId=mProviderId; hostAuth.mCredential.mAccessToken=mAccessToken; hostAuth.mCredential.mRefreshToken=mRefreshToken; hostAuth.mCredential.mExpiration=mExpiration; } return hostAuth; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,toString,"@Override public String  (){ return ""[protocol "" + mProtocol + ""]""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\HostAuthCompat.java,writeToParcel,@Override public void  (Parcel parcel int i){ parcel.writeString(mProtocol); parcel.writeString(mAddress); parcel.writeInt(mPort); parcel.writeInt(mFlags); parcel.writeString(mLogin); parcel.writeString(mPassword); parcel.writeString(mDomain); parcel.writ
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\LegacyPolicySet.java,flagsToPolicy,public static Policy  (long flags){ Policy policy=new Policy(); policy.mPasswordMode=((int)(flags & PASSWORD_MODE_MASK)) >> PASSWORD_MODE_SHIFT; policy.mPasswordMinLength=(int)((flags & PASSWORD_LENGTH_MASK) >> PASSWORD_LENGTH_SHIFT); policy.mPasswordMaxFails=(int)((flags & PASSWORD_MAX_FAILS_MASK) >> PASSWORD_MAX_FAILS_SHIFT); policy.mPasswordComplexChars=(int)((flags & PASSWORD_COMPLEX_CHARS_MASK) >> PASSWORD_COMPLEX_CHARS_SHIFT); policy.mPasswordHistory=(int)((flags & PASSWORD_HISTORY_MASK) >> PASSWORD_HISTORY_SHIFT); policy.mPasswordExpirationDays=(int)((flags & PASSWORD_EXPIRATION_MASK) >> PASSWORD_EXPIRATION_SHIFT); policy.mMaxScreenLockTime=(int)((flags & SCREEN_LOCK_TIME_MASK) >> SCREEN_LOCK_TIME_SHIFT); policy.mRequireRemoteWipe=0 != (flags & REQUIRE_REMOTE_WIPE); policy.mRequireEncryption=0 != (flags & REQUIRE_ENCRYPTION); policy.mRequireEncryptionExternal=0 != (flags & REQUIRE_ENCRYPTION_EXTERNAL); return policy; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,PolicyServiceProxy,"public  (Context _context){ super(_context getIntentForEmailPackage(_context ""POLICY_INTENT"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,asBinder,@Override public IBinder  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,canDisableCamera,public static boolean  (Context context){ try { return new PolicyServiceProxy(context).canDisableCamera(); } catch ( RemoteException e) { } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,isActive,public static boolean  (Context context Policy policies){ try { return new PolicyServiceProxy(context).isActive(policies); } catch ( RemoteException e) { } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,onConnected,@Override public void  (IBinder binder){ mService=IPolicyService.Stub.asInterface(binder); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,remoteWipe,"public static void  (Context context){ try { new PolicyServiceProxy(context).remoteWipe(); } catch ( RemoteException e) { throw new IllegalStateException(""PolicyService transaction failed""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,run,@Override public void  () throws RemoteException { mService.setAccountHoldFlag(arg0 arg1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,setAccountHoldFlag,"public static void  (Context context Account account boolean newState){ try { new PolicyServiceProxy(context).setAccountHoldFlag(account.mId newState); } catch ( RemoteException e) { throw new IllegalStateException(""PolicyService transaction failed""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,setAccountPolicy,public static void  (Context context long accountId Policy policy String securityKey){ setAccountPolicy2(context accountId policy securityKey true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\PolicyServiceProxy.java,setAccountPolicy2,"public static void  (Context context long accountId Policy policy String securityKey boolean notify){ try { new PolicyServiceProxy(context).setAccountPolicy2(accountId policy securityKey notify); return; } catch ( RemoteException e) { } throw new IllegalStateException(""PolicyService transaction failed""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceUnavailableException.java,ServiceUnavailableException,public  (String string){ super(string); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceProxy.java,ServiceProxy,public  (Context _context Intent _intent){ mContext=_context; mIntent=_intent; mTag=getClass().getSimpleName(); if (Debug.isDebuggerConnected()) { mTimeout<<=2; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceProxy.java,doInBackground,"@Override protected Void  (Void... params){ try { mTask.run(); } catch ( RemoteException e) { LogUtils.e(mTag e ""RemoteException thrown running mTask!""); } finally { try { mContext.unbindService(mConnection); } catch ( RuntimeException e) { LogUtils.e(mTa"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceProxy.java,getIntentForEmailPackage,"public static Intent  (Context context String actionName){ final Intent intent=new Intent(EmailContent.EMAIL_PACKAGE_NAME + ""."" + actionName); final ProviderInfo info=context.getPackageManager().resolveContentProvider(EmailContent.AUTHORITY 0); if (info != null) { final String packageName=info.packageName; intent.setPackage(packageName); } else { LogUtils.e(LogUtils.TAG ""Could not find the Email Content Provider""); } return intent; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\ServiceProxy.java,getTimeout,public int  (){ return mTimeout; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\service\SyncWindow.java,toDays,public static int  (int window){ switch (window) { case SYNC_WINDOW_1_DAY: return 1; case SYNC_WINDOW_3_DAYS: return 3; case SYNC_WINDOW_1_WEEK: return 7; case SYNC_WINDOW_2_WEEKS: return 14; case SYNC_WINDOW_1_MONTH: return 30; case SYNC_WINDOW_ALL: return 365 * 10; case SYNC_WINDOW_ACCOUNT: default : return 14; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\TrafficFlags.java,getAttachmentFlags,public static int  (Context context Account account){ return (int)account.mId | REASON_ATTACHMENT_USER; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\TrafficFlags.java,getSmtpFlags,public static int  (Context context Account account){ return (int)account.mId | REASON_SYNC; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\TrafficFlags.java,getSyncFlags,public static int  (Context context Account account){ return (int)account.mId | REASON_SYNC; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\TrafficFlags.java,toString,"public static String  (int flags){ StringBuilder sb=new StringBuilder(); sb.append(""account ""); sb.append(flags & ACCOUNT_MASK); sb.append(' '); sb.append(REASONS[(flags & REASON_MASK) >> REASON_SHIFT]); int maskedData=flags & DATA_MASK; if (maskedData != 0) { sb.append(' '); sb.append(maskedData == DATA_CALENDAR ? ""calendar"" : ""contacts""); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CertificateRequestor.java,alias,@Override public void  (String alias){ if (alias == null) { setResult(RESULT_CANCELED); } else { Intent data=new Intent(); data.putExtra(RESULT_ALIAS alias); setResult(RESULT_OK data); } finish(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CertificateRequestor.java,onCreate,@Override protected void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); Intent i=getIntent(); String host=i.getStringExtra(EXTRA_HOST); int port=i.getIntExtra(EXTRA_PORT -1); if (savedInstanceState == null) { KeyChain.choosePrivateKeyAl
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,copyFile,private static long  (InputStream in OutputStream out) throws IOException { long size=IOUtils.copy(in out); in.close(); out.flush(); out.close(); return size; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,deleteAllAccountAttachmentFiles,"public static void  (Context context long accountId){ File[] files=getAttachmentDirectory(context accountId).listFiles(); if (files == null) return; for ( File file : files) { boolean result=file.delete(); if (!result) { LogUtils.e(Logging.LOG_TAG ""Failed to delete attachment file "" + file.getName()); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,deleteAllAttachmentFiles,public static void  (Context context long accountId long messageId){ Uri uri=ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI messageId); Cursor c=context.getContentResolver().query(uri Attachment.ID_PROJECTION null null null); try { while (c.moveToNext()) { long attachmentId=c.getLong(Attachment.ID_PROJECTION_COLUMN); File attachmentFile=getAttachmentFilename(context accountId attachmentId); attachmentFile.delete(); } } finally { c.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,deleteAllCachedAttachmentFiles,public static void  (Context context long accountId long messageId){ final Uri uri=ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI messageId); final Cursor c=context.getContentResolver().query(uri ATTACHMENT_CACHED_FILE_PROJECTION null null null); try { while (c.moveToNext()) { final String fileName=c.getString(0); if (!TextUtils.isEmpty(fileName)) { final File cachedFile=new File(fileName); cachedFile.delete(); } } } finally { c.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,deleteAllMailboxAttachmentFiles,"public static void  (Context context long accountId long mailboxId){ Cursor c=context.getContentResolver().query(Message.CONTENT_URI Message.ID_COLUMN_PROJECTION MessageColumns.MAILBOX_KEY + ""=?"" new String[]{Long.toString(mailboxId)} null); try { while (c.moveToNext()) { long messageId=c.getLong(Message.ID_PROJECTION_COLUMN); deleteAllAttachmentFiles(context accountId messageId); } } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,getAttachmentDirectory,"public static File  (Context context long accountId){ return context.getDatabasePath(accountId + "".db_att""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,getAttachmentFilename,public static File  (Context context long accountId long attachmentId){ return new File(getAttachmentDirectory(context accountId) Long.toString(attachmentId)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,getAttachmentThumbnailUri,public static Uri  (long accountId long id long width long height){ if (sUri == null) { sUri=Uri.parse(Attachment.ATTACHMENT_PROVIDER_URI_PREFIX); } return sUri.buildUpon().appendPath(Long.toString(accountId)).appendPath(Long.toString(id)).appendPath(FORMAT_THUMBNAIL).appendPath(Long.toString(width)).appendPath(Long.toString(height)).build(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,getAttachmentUri,public static Uri  (long accountId long id){ if (sUri == null) { sUri=Uri.parse(Attachment.ATTACHMENT_PROVIDER_URI_PREFIX); } return sUri.buildUpon().appendPath(Long.toString(accountId)).appendPath(Long.toString(id)).appendPath(FORMAT_RAW).build(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,getFilenameExtension,public static String  (String fileName){ String extension=null; if (!TextUtils.isEmpty(fileName)) { int lastDot=fileName.lastIndexOf('.'); if ((lastDot > 0) && (lastDot < fileName.length() - 1)) { extension=fileName.substring(lastDot + 1).toLowerCase(); } } return extension; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,inferMimeType,"public static String  (final String fileName final String mimeType){ String resultType=null; String fileExtension=getFilenameExtension(fileName); boolean isTextPlain=""text/plain"".equalsIgnoreCase(mimeType); if (""eml"".equals(fileExtension)) { resultType=""message/rfc822""; } else { boolean isGenericType=isTextPlain || ""application/octet-stream"".equalsIgnoreCase(mimeType); if (isGenericType || TextUtils.isEmpty(mimeType)) { if (!TextUtils.isEmpty(fileExtension)) { resultType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(fileExtension); if (TextUtils.isEmpty(resultType)) { resultType=isTextPlain ? mimeType : ""application/"" + fileExtension; } } } else { resultType=mimeType; } } if (TextUtils.isEmpty(resultType)) { resultType=isTextPlain ? ""text/plain"" : ""application/octet-stream""; } return resultType.toLowerCase(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,resolveAttachmentIdToContentUri,public static Uri  (ContentResolver resolver Uri attachmentUri){ Cursor c=resolver.query(attachmentUri new String[]{Columns.DATA} null null null); if (c != null) { try { if (c.moveToFirst()) { final String strUri=c.getString(0); if (strUri != null) { return Uri.parse(strUri); } } } finally { c.close(); } } return attachmentUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\AttachmentUtilities.java,saveAttachment,"public static void  (Context context InputStream in Attachment attachment){ final Uri uri=ContentUris.withAppendedId(Attachment.CONTENT_URI attachment.mId); final ContentValues cv=new ContentValues(); final long attachmentId=attachment.mId; final long accountId=attachment.mAccountKey; final String contentUri; final long size; try { ContentResolver resolver=context.getContentResolver(); if (attachment.mUiDestination == UIProvider.AttachmentDestination.CACHE) { Uri attUri=getAttachmentUri(accountId attachmentId); size=copyFile(in resolver.openOutputStream(attUri)); contentUri=attUri.toString(); } else if (Utility.isExternalStorageMounted()) { if (TextUtils.isEmpty(attachment.mFileName)) { LogUtils.w(Logging.LOG_TAG ""Trying to save an attachment with no name: %d"" attachmentId); throw new IOException(""Can't save an attachment with no name""); } File downloads=Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS); downloads.mkdirs(); File file=Utility.createUniqueFile(downloads attachment.mFileName); size=copyFile(in new FileOutputStream(file)); String absolutePath=file.getAbsolutePath(); MediaScannerConnection.scanFile(context new String[]{absolutePath} null null); final String mimeType=TextUtils.isEmpty(attachment.mMimeType) ? ""application/octet-stream"" : attachment.mMimeType; try { DownloadManager dm=(DownloadManager)context.getSystemService(Context.DOWNLOAD_SERVICE); long id=dm.addCompletedDownload(attachment.mFileName attachment.mFileName false mimeType absolutePath size true); contentUri=dm.getUriForDownloadedFile(id).toString(); } catch ( final IllegalArgumentException e) { LogUtils.d(LogUtils.TAG e ""IAE from DownloadManager while saving attachment""); throw new IOException(e); } } else { LogUtils.w(Logging.LOG_TAG ""Trying to save an attachment without external storage?""); throw new IOException(); } cv.put(AttachmentColumns.SIZE size); cv.put(AttachmentColumns.CONTENT_URI contentUri); cv.put(AttachmentColumns.UI_STATE UIProvider.AttachmentState.SAVED); } catch ( IOException e) { cv.put(AttachmentColumns.UI_STATE UIProvider.AttachmentState.FAILED); } context.getContentResolver().update(uri cv null null); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,EmailClientConnectionManager,private  (HttpParams params SchemeRegistry registry TrackingKeyManager keyManager){ super(params registry); mTrackingKeyManager=keyManager; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,hasDetectedUnsatisfiedCertReq,public synchronized boolean  (long since){ return mTrackingKeyManager.getLastCertReqTime() >= since; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,makeScheme,"public static String  (boolean useSsl boolean trustAllServerCerts String clientCertAlias){ if (!TextUtils.isEmpty(clientCertAlias)) { return makeSchemeForClientCert(clientCertAlias trustAllServerCerts); } else { return useSsl ? (trustAllServerCerts ? ""httpts"" : ""https"") : ""http""; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,makeSchemeForClientCert,"private static String  (String clientCertAlias boolean trustAllServerCerts){ String safeAlias=SSLUtils.escapeForSchemeName(clientCertAlias); return (trustAllServerCerts ? ""httpts"" : ""https"") + ""+clientCert+"" + safeAlias; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,newInstance,"public static EmailClientConnectionManager  (Context context HttpParams params HostAuth hostAuth){ TrackingKeyManager keyManager=new TrackingKeyManager(); boolean ssl=hostAuth.shouldUseSsl(); int port=hostAuth.mPort; SchemeRegistry registry=new SchemeRegistry(); registry.register(new Scheme(""http"" PlainSocketFactory.getSocketFactory() ssl ? STANDARD_PORT : port)); registry.register(new Scheme(""https"" SSLUtils.getHttpSocketFactory(context hostAuth keyManager false) ssl ? port : STANDARD_SSL_PORT)); registry.register(new Scheme(""httpts"" SSLUtils.getHttpSocketFactory(context hostAuth keyManager true) ssl ? port : STANDARD_SSL_PORT)); return new EmailClientConnectionManager(params registry keyManager); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,registerClientCert,"public synchronized void  (Context context HostAuth hostAuth) throws CertificateException { if (TextUtils.isEmpty(hostAuth.mClientCertAlias)) { return; } SchemeRegistry registry=getSchemeRegistry(); String schemeName=makeSchemeForClientCert(hostAuth.mClientCertAlias hostAuth.shouldTrustAllServerCerts()); Scheme existing=registry.get(schemeName); if (existing == null) { if (LOG_ENABLED) { LogUtils.i(Logging.LOG_TAG ""Registering socket factory for certificate alias ["" + hostAuth.mClientCertAlias + ""]""); } KeyManager keyManager=KeyChainKeyManager.fromAlias(context hostAuth.mClientCertAlias); boolean insecure=hostAuth.shouldTrustAllServerCerts(); SSLSocketFactory ssf=SSLUtils.getHttpSocketFactory(context hostAuth keyManager insecure); registry.register(new Scheme(schemeName ssf hostAuth.mPort)); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailClientConnectionManager.java,unregisterClientCert,public synchronized void  (String clientCertAlias boolean trustAllServerCerts){ SchemeRegistry registry=getSchemeRegistry(); String schemeName=makeSchemeForClientCert(clientCertAlias trustAllServerCerts); Scheme existing=registry.get(schemeName); if (existing != null) { registry.unregister(schemeName); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CountingOutputStream.java,CountingOutputStream,public  (OutputStream outputStream){ mOutputStream=outputStream; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CountingOutputStream.java,getCount,public long  (){ return mCount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\CountingOutputStream.java,write,@Override public void  (int oneByte) throws IOException { mOutputStream.write(oneByte); mCount++; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,DelayedOperations,public  (Handler handler){ mHandler=handler; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,EmailAsyncTask,public  (Tracker tracker){ mTracker=tracker; if (mTracker != null) { mTracker.add(this); } mInnerTask=new InnerTask<Params Progress Result>(this); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,QueuedOperation,public  (Runnable actualRannable){ mActualRannable=actualRannable; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,cancel,public void  (){ mPendingOperations.remove(this); cancelRunnable(this); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,cancelRunnable,void  (Runnable r){ mHandler.removeCallbacks(r); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,post,public void  (Runnable r){ final QueuedOperation qo=new QueuedOperation(r); mPendingOperations.add(qo); postRunnable(qo); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,postRunnable,void  (Runnable r){ mHandler.post(r); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,removeCallbacks,public void  (){ final ArrayList<QueuedOperation> temp=new ArrayList<QueuedOperation>(mPendingOperations); for ( QueuedOperation qo : temp) { qo.cancel(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\DelayedOperations.java,run,@Override public void  (){ mPendingOperations.remove(this); mActualRannable.run(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,InnerTask,public  (EmailAsyncTask<Params2 Progress2 Result2> owner){ mOwner=owner; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,add,private void  (EmailAsyncTask<? ? ?> task){ synchronized (mTasks) { mTasks.add(task); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,callDoInBackgroundForTest,final Result  (Params... params){ return mInnerTask.doInBackground(params); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,callOnCancelledForTest,final void  (Result result){ mInnerTask.onCancelled(result); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,callOnPostExecuteForTest,final void  (Result result){ mInnerTask.onPostExecute(result); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancel,public final void  (boolean mayInterruptIfRunning){ mCancelled=true; mInnerTask.cancel(mayInterruptIfRunning); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancelAllInterrupt,@VisibleForTesting public void  (){ synchronized (mTasks) { for ( EmailAsyncTask<? ? ?> task : mTasks) { task.cancel(true); } mTasks.clear(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancelOthers,void  (EmailAsyncTask<? ? ?> current){ final Class<?> clazz=current.getClass(); synchronized (mTasks) { final ArrayList<EmailAsyncTask<? ? ?>> toRemove=new ArrayList<EmailAsyncTask<? ? ?>>(); for ( EmailAsyncTask<? ? ?> task : mTasks) { if ((task != current) && task.getClass().equals(clazz)) { task.cancel(true); toRemove.add(task); } } for ( EmailAsyncTask<? ? ?> task : toRemove) { mTasks.remove(task); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancelPreviousAndExecuteParallel,public final EmailAsyncTask<Params Progress Result>  (Params... params){ return executeInternal(PARALLEL_EXECUTOR true params); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,cancelPreviousAndExecuteSerial,public final EmailAsyncTask<Params Progress Result>  (Params... params){ return executeInternal(SERIAL_EXECUTOR true params); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,containsTaskForTest,boolean  (EmailAsyncTask<? ? ?> task){ return mTasks.contains(task); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,doInBackground,@Override protected Void  (Void... params){ runnable.run(); return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,executeInternal,private EmailAsyncTask<Params Progress Result>  (Executor executor boolean cancelPrevious Params... params){ if (cancelPrevious) { if (mTracker == null) { throw new IllegalStateException(); } else { mTracker.cancelOthers(this); } } mInnerTask.executeOnExecutor(executor params); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,executeParallel,public final EmailAsyncTask<Params Progress Result>  (Params... params){ return executeInternal(PARALLEL_EXECUTOR false params); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,executeSerial,public final EmailAsyncTask<Params Progress Result>  (Params... params){ return executeInternal(SERIAL_EXECUTOR false params); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,get,public final Result  () throws InterruptedException  ExecutionException { return mInnerTask.get(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,getTaskCountForTest,int  (){ return mTasks.size(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,onPostExecute,@Override public void  (Result2 result){ mOwner.unregisterSelf(); if (mOwner.mCancelled) { mOwner.onCancelled(result); } else { mOwner.onSuccess(result); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,remove,private void  (EmailAsyncTask<? ? ?> task){ synchronized (mTasks) { mTasks.remove(task); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,runAsyncInternal,private static EmailAsyncTask<Void Void Void>  (Executor executor final Runnable runnable){ EmailAsyncTask<Void Void Void> task=new EmailAsyncTask<Void Void Void>(null){ @Override protected Void doInBackground( Void... params){ runnable.run(); return null; } } ; return task.executeInternal(executor false (Void[])null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,runAsyncParallel,public static EmailAsyncTask<Void Void Void>  (Runnable runnable){ return runAsyncInternal(PARALLEL_EXECUTOR runnable); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,runAsyncSerial,public static EmailAsyncTask<Void Void Void>  (Runnable runnable){ return runAsyncInternal(SERIAL_EXECUTOR runnable); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EmailAsyncTask.java,unregisterSelf,final void  (){ if (mTracker != null) { mTracker.remove(this); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,createActivityIntentUrlBuilder,public static Uri.Builder  (String path){ final Uri.Builder b=new Uri.Builder(); b.scheme(ACTIVITY_INTENT_SCHEME); b.authority(ACTIVITY_INTENT_HOST); b.path(path); return b; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,createRestartAppIntent,public static Intent  (Uri data){ Intent i=new Intent(Intent.ACTION_MAIN data); prepareRestartAppIntent(i); return i; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getAccountIdFromIntent,public static long  (Intent intent){ return getLongFromIntent(intent ACCOUNT_ID_PARAM); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getAccountNameFromIntent,public static String  (Intent intent){ return getStringFromIntent(intent ACCOUNT_NAME_PARAM); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getAccountUuidFromIntent,public static String  (Intent intent){ final Uri uri=intent.getData(); if (uri == null) { return null; } String uuid=uri.getQueryParameter(ACCOUNT_UUID_PARAM); return TextUtils.isEmpty(uuid) ? null : uuid; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getLongFromIntent,private static long  (Intent intent String paramName){ long value=-1; if (intent.getData() != null) { value=getLongParamFromUri(intent.getData() paramName -1); } return value; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getLongParamFromUri,private static long  (Uri uri String paramName long defaultValue){ final String value=uri.getQueryParameter(paramName); if (!TextUtils.isEmpty(value)) { try { return Long.parseLong(value); } catch ( NumberFormatException e) { } } return defaultValue; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getMailboxIdFromIntent,public static long  (Intent intent){ return getLongFromIntent(intent MAILBOX_ID_PARAM); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getMessageIdFromIntent,public static long  (Intent intent){ return getLongFromIntent(intent MESSAGE_ID_PARAM); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getStringFromIntent,private static String  (Intent intent String paramName){ String value=null; if (intent.getData() != null) { value=getStringParamFromUri(intent.getData() paramName null); } return value; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,getStringParamFromUri,private static String  (Uri uri String paramName String defaultValue){ final String value=uri.getQueryParameter(paramName); if (value == null) { return defaultValue; } return value; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,prepareRestartAppIntent,private static void  (Intent i){ i.setAction(Intent.ACTION_MAIN); i.addCategory(Intent.CATEGORY_LAUNCHER); i.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,setAccountId,public static void  (Uri.Builder b long accountId){ if (accountId != -1) { b.appendQueryParameter(ACCOUNT_ID_PARAM Long.toString(accountId)); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,setAccountName,public static void  (Uri.Builder b String accountName){ if (accountName != null) { b.appendQueryParameter(ACCOUNT_NAME_PARAM accountName); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,setAccountUuid,public static void  (Uri.Builder b String mUuid){ if (TextUtils.isEmpty(mUuid)) { throw new IllegalArgumentException(); } b.appendQueryParameter(ACCOUNT_UUID_PARAM mUuid); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,setMailboxId,public static void  (Uri.Builder b long mailboxId){ if (mailboxId != -1) { b.appendQueryParameter(MAILBOX_ID_PARAM Long.toString(mailboxId)); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\IntentUtilities.java,setMessageId,public static void  (Uri.Builder b long messageId){ if (messageId != -1) { b.appendQueryParameter(MESSAGE_ID_PARAM Long.toString(messageId)); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,SSLSocketFactoryWrapper, (final SSLSocketFactory factory final boolean secure int handshakeTimeout){ mFactory=factory; mSecure=secure; mHandshakeTimeout=handshakeTimeout; final String[] baseDefaultCipherSuites=mFactory.getDefaultCipherSuites(); final List<String> fullCipherSuiteList=new ArrayList<String>(Arrays.asList(mFactory.getDefaultCipherSuites())); final Set<String> baseDefaultCipherSuiteSet=new HashSet<String>(fullCipherSuiteList); final String[] baseSupportedCipherSuites=mFactory.getSupportedCipherSuites(); final Set<String> baseSupportedCipherSuiteSet=new HashSet<String>(Arrays.asList(mFactory.getSupportedCipherSuites())); for ( String cipherSuite : DEPRECATED_CIPHER_SUITES_TO_ENABLE) { if (baseSupportedCipherSuiteSet.contains(cipherSuite) && !baseDefaultCipherSuiteSet.contains(cipherSuite)) { fullCipherSuiteList.add(cipherSuite); } } mDefaultCipherSuites=new String[fullCipherSuiteList.size()]; fullCipherSuiteList.toArray(mDefaultCipherSuites); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,createSocket,@Override public Socket  (InetAddress inetAddress int i InetAddress inetAddress2 int i2) throws IOException { final SSLSocket sslSocket=(SSLSocket)mFactory.createSocket(inetAddress i inetAddress2 i2); setHandshakeTimeout(sslSocket mHandshakeTimeout); sslS
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,getDefault,"public static SSLSocketFactory  (final KeyManager[] keyManagers int handshakeTimeout) throws NoSuchAlgorithmException  KeyManagementException { final SSLContext context=SSLContext.getInstance(""TLS""); context.init(keyManagers null null); return new SSLSocketFactoryWrapper(context.getSocketFactory() true handshakeTimeout); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,getDefaultCipherSuites,public String[]  (){ return mDefaultCipherSuites.clone(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,getInsecure,"public static SSLSocketFactory  (final KeyManager[] keyManagers final TrustManager[] trustManagers int handshakeTimeout) throws NoSuchAlgorithmException  KeyManagementException { final SSLContext context=SSLContext.getInstance(""TLS""); context.init(keyManagers trustManagers null); return new SSLSocketFactoryWrapper(context.getSocketFactory() false handshakeTimeout); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,getSupportedCipherSuites,public String[]  (){ return mFactory.getSupportedCipherSuites(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,potentiallyEnableSessionTickets,"public static boolean  (SSLSocket sslSocket){ try { sslSocket.getClass().getMethod(""setUseSessionTickets"" boolean.class).invoke(sslSocket true); return true; } catch ( Exception e) { return false; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,potentiallyEnableSni,"public static boolean  (SSLSocket sslSocket String hostname){ try { sslSocket.getClass().getMethod(""setHostname"" String.class).invoke(sslSocket hostname); return true; } catch ( Exception ignored) { return false; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,setHandshakeTimeout,"private void  (SSLSocket sslSocket int timeout){ try { sslSocket.getClass().getMethod(""setHandshakeTimeout"" int.class).invoke(sslSocket timeout); } catch ( Exception e) { LogUtils.w(LogUtils.TAG e ""unable to set handshake timeout""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactoryWrapper.java,verifyHostname,"public static void  (Socket socket String hostname) throws IOException { if (!(socket instanceof SSLSocket)) { throw new IllegalArgumentException(""Attempt to verify non-SSL socket""); } SSLSocket ssl=(SSLSocket)socket; ssl.startHandshake(); SSLSession session=ssl.getSession(); if (session == null) { throw new SSLException(""Cannot verify SSL socket without session""); } LogUtils.d(LogUtils.TAG ""using cipherSuite %s"" session.getCipherSuite()); if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname session)) { throw new SSLPeerUnverifiedException(""Cannot verify hostname: "" + hostname); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,SSLSocketFactory,private  (){ super(); sslcontext=null; socketfactory=HttpsURLConnection.getDefaultSSLSocketFactory(); nameResolver=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,connectSocket,"@Override public Socket  (final Socket sock final String host final int port final InetAddress localAddress int localPort final HttpParams params) throws IOException { if (host == null) { throw new IllegalArgumentException(""Target host may not be null."");"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,createKeyManagers,"private static KeyManager[]  (final KeyStore keystore final String password) throws KeyStoreException  NoSuchAlgorithmException  UnrecoverableKeyException { if (keystore == null) { throw new IllegalArgumentException(""Keystore may not be null""); } KeyManagerFactory kmfactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()); kmfactory.init(keystore password != null ? password.toCharArray() : null); return kmfactory.getKeyManagers(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,createSocket,@Override public Socket  (final Socket socket final String host final int port final boolean autoClose) throws IOException  UnknownHostException { SSLSocket sslSocket=(SSLSocket)socketfactory.createSocket(socket host port autoClose); hostnameVerifier.veri
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,createTrustManagers,"private static TrustManager[]  (final KeyStore keystore) throws KeyStoreException  NoSuchAlgorithmException { if (keystore == null) { throw new IllegalArgumentException(""Keystore may not be null""); } TrustManagerFactory tmfactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()); tmfactory.init(keystore); return tmfactory.getTrustManagers(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,getHostnameVerifier,public X509HostnameVerifier  (){ return hostnameVerifier; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,getSocketFactory,public static SSLSocketFactory  (){ return DEFAULT_FACTORY; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,isSecure,"@Override public boolean  (Socket sock) throws IllegalArgumentException { if (sock == null) { throw new IllegalArgumentException(""Socket may not be null.""); } if (!(sock instanceof SSLSocket)) { throw new IllegalArgumentException(""Socket not created by th"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLSocketFactory.java,setHostnameVerifier,"public void  (X509HostnameVerifier hostnameVerifier){ if (hostnameVerifier == null) { throw new IllegalArgumentException(""Hostname verifier may not be null""); } this.hostnameVerifier=hostnameVerifier; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,LoggingInputStream,"public  (InputStream in String tag boolean dumpEmptyLines){ super(in); mTag=tag + "" ""; mDumpEmptyLines=dumpEmptyLines; initBuffer(); LogUtils.d(Logging.LOG_TAG mTag + ""dump start""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,close,@Override public void  () throws IOException { super.close(); flushLog(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,flushLog,private void  (){ if (mDumpEmptyLines || (mSb.length() > mTag.length())) { LogUtils.d(Logging.LOG_TAG mSb.toString()); initBuffer(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,initBuffer,private void  (){ mSb=new StringBuilder(mTag); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,logRaw,"private void  (int oneByte){ if (oneByte == '\r') { } else if (oneByte == '\n') { flushLog(); } else if (0x20 <= oneByte && oneByte <= 0x7e) { mSb.append((char)oneByte); } else { mSb.append(""\\x"" + Utility.byteToHex(oneByte)); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\LoggingInputStream.java,read,@Override public int  (byte[] b int offset int length) throws IOException { int bytesRead=super.read(b offset length); int copyBytes=bytesRead; while (copyBytes > 0) { logRaw(b[offset] & 0xFF); copyBytes--; offset++; } return bytesRead; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EOLConvertingOutputStream.java,EOLConvertingOutputStream,public  (OutputStream out){ super(out); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EOLConvertingOutputStream.java,flush,@Override public void  () throws IOException { if (lastChar == '\r') { super.write('\n'); lastChar='\n'; } super.flush(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\EOLConvertingOutputStream.java,write,@Override public void  (int oneByte) throws IOException { if (oneByte == '\n') { if (lastChar != '\r') { super.write('\r'); } } super.write(oneByte); lastChar=oneByte; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,KeyChainKeyManager,private  (String clientAlias X509Certificate[] certificateChain PrivateKey privateKey){ mClientAlias=clientAlias; mCertificateChain=certificateChain; mPrivateKey=privateKey; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,SameCertificateCheckingTrustManager," (Context context HostAuth hostAuth){ mContext=context; mHostAuth=hostAuth; Cursor c=context.getContentResolver().query(HostAuth.CONTENT_URI new String[]{HostAuthColumns.SERVER_CERT} HostAuthColumns._ID + ""=?"" new String[]{Long.toString(hostAuth.mId)} null); if (c != null) { try { if (c.moveToNext()) { mHostAuth.mServerCert=c.getBlob(0); } } finally { c.close(); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,checkClientTrusted,"@Override public void  (X509Certificate[] chain String authType) throws CertificateException { throw new CertificateException(""We don't check client certificates""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,checkServerTrusted,"@Override public void  (X509Certificate[] chain String authType) throws CertificateException { if (chain.length == 0) { throw new CertificateException(""No certificates?""); } else { X509Certificate serverCert=chain[0]; if (mHostAuth.mServerCert != null) { "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,chooseClientAlias,"@Override public String  (String[] keyTypes Principal[] issuers Socket socket){ if (LOG_ENABLED) { LogUtils.i(TAG ""Requesting a client cert alias for "" + Arrays.toString(keyTypes)); } return mClientAlias; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,chooseServerAlias,@Override public final String  (String keyType Principal[] issuers Socket socket){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,escapeForSchemeName,@VisibleForTesting public static String  (String s){ s=s.toLowerCase(); StringBuilder sb=new StringBuilder(); for (int i=0; i < s.length(); i++) { char c=s.charAt(i); if (isAsciiLetter(c) || isAsciiNumber(c) || ('-' == c)|| ('.' == c)) { sb.append(c); } e
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,fromAlias,"public static KeyChainKeyManager  (Context context String alias) throws CertificateException { X509Certificate[] certificateChain; try { certificateChain=KeyChain.getCertificateChain(context alias); } catch ( KeyChainException e) { logError(alias ""certificate chain"" e); throw new CertificateException(e); } catch ( InterruptedException e) { logError(alias ""certificate chain"" e); throw new CertificateException(e); } PrivateKey privateKey; try { privateKey=KeyChain.getPrivateKey(context alias); } catch ( KeyChainException e) { logError(alias ""private key"" e); throw new CertificateException(e); } catch ( InterruptedException e) { logError(alias ""private key"" e); throw new CertificateException(e); } if (certificateChain == null || privateKey == null) { throw new CertificateException(""Can't access certificate from keystore""); } return new KeyChainKeyManager(alias certificateChain privateKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getAcceptedIssuers,@Override public X509Certificate[]  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getCertificateChain,"@Override public X509Certificate[]  (String alias){ if (LOG_ENABLED) { LogUtils.i(TAG ""Requesting a client certificate chain for alias ["" + alias + ""]""); } return mCertificateChain; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getClientAliases,@Override public final String[]  (String keyType Principal[] issuers){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getHttpSocketFactory,public static SSLSocketFactory  (Context context HostAuth hostAuth KeyManager keyManager boolean insecure){ javax.net.ssl.SSLSocketFactory underlying=getSSLSocketFactory(context hostAuth keyManager insecure); SSLSocketFactory wrapped=new SSLSocketFactory(underlying); if (insecure) { wrapped.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER); } return wrapped; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getLastCertReqTime,public long  (){ return mLastTimeCertRequested; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getPrivateKey,"@Override public PrivateKey  (String alias){ if (LOG_ENABLED) { LogUtils.i(TAG ""Requesting a client private key for alias ["" + alias + ""]""); } return mPrivateKey; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getSSLSocketFactory,"public synchronized static javax.net.ssl.SSLSocketFactory  (final Context context final HostAuth hostAuth final KeyManager keyManager final boolean insecure){ if (sExternalSecurityProviderInstaller != null) { sExternalSecurityProviderInstaller.installIfNeeded(context); } try { final KeyManager[] keyManagers=(keyManager == null ? null : new KeyManager[]{keyManager}); if (insecure) { final TrustManager[] trustManagers=new TrustManager[]{new SameCertificateCheckingTrustManager(context hostAuth)}; SSLSocketFactoryWrapper insecureFactory=(SSLSocketFactoryWrapper)SSLSocketFactoryWrapper.getInsecure(keyManagers trustManagers SSL_HANDSHAKE_TIMEOUT); return insecureFactory; } else { if (sSecureFactory == null) { SSLSocketFactoryWrapper secureFactory=(SSLSocketFactoryWrapper)SSLSocketFactoryWrapper.getDefault(keyManagers SSL_HANDSHAKE_TIMEOUT); sSecureFactory=secureFactory; } return sSecureFactory; } } catch ( NoSuchAlgorithmException e) { LogUtils.wtf(TAG e ""Unable to acquire SSLSocketFactory""); } catch ( KeyManagementException e) { LogUtils.wtf(TAG e ""Unable to acquire SSLSocketFactory""); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\SSLUtils.java,getServerAliases,@Override public final String[]  (String keyType Principal[] issuers){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,AccountAndPolicyLoader, (final Context context final long accountId final boolean showDialog final boolean passwordExpiring final boolean passwordExpired){ super(context); mContext=context; mAccountId=accountId; mShowDialog=showDialog; mPasswordExpiring=passwordExpiring; mPasswordExpired=passwordExpired; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,actionDevicePasswordExpirationIntent,public static Intent  (Context context long accountId boolean expired){ Intent intent=new ForwardingIntent(context AccountSecurity.class); intent.putExtra(EXTRA_ACCOUNT_ID accountId); intent.putExtra(expired ? EXTRA_PASSWORD_EXPIRED : EXTRA_PASSWORD_EXPIRING true); return intent; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,actionUpdateSecurityIntent,public static Intent  (Context context long accountId boolean showDialog){ Intent intent=new Intent(context AccountSecurity.class); intent.putExtra(EXTRA_ACCOUNT_ID accountId); intent.putExtra(EXTRA_SHOW_DIALOG showDialog); return intent; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,completeCreate,"protected void  (final Account account final boolean showDialog final boolean passwordExpiring final boolean passwordExpired){ mAccount=account; if (passwordExpiring || passwordExpired) { FragmentManager fm=getFragmentManager(); if (fm.findFragmentByTag(""password_expiration"") == null) { PasswordExpirationDialog dialog=PasswordExpirationDialog.newInstance(mAccount.getDisplayName() passwordExpired); if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Showing password expiration dialog""); } dialog.show(fm ""password_expiration""); } return; } if (mAccount.mPolicyKey != 0) { if (showDialog) { FragmentManager fm=getFragmentManager(); if (fm.findFragmentByTag(""security_needed"") == null) { SecurityNeededDialog dialog=SecurityNeededDialog.newInstance(mAccount.getDisplayName()); if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Showing security needed dialog""); } dialog.show(fm ""security_needed""); } } else { tryAdvanceSecurity(mAccount); } return; } finish(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,doInBackground,@Override protected Void  (Void... params){ security.policiesRequired(account.mId); return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,getUpdateSecurityUri,"public static Uri  (final long accountId final boolean showDialog){ final Uri.Builder baseUri=Uri.parse(""auth://"" + EmailContent.EMAIL_PACKAGE_NAME + "".ACCOUNT_SECURITY/"").buildUpon(); IntentUtilities.setAccountId(baseUri accountId); baseUri.appendQueryParameter(EXTRA_SHOW_DIALOG Boolean.toString(showDialog)); return baseUri.build(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,isActivityResumed,protected boolean  (){ return mActivityResumed; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,loadInBackground,@Override public Account  (){ final Account account=Account.restoreAccountWithId(mContext mAccountId); if (account == null) { return null; } final long policyId=account.mPolicyKey; if (policyId != 0) { account.mPolicy=Policy.restorePolicyWithId(mContext p
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,newInstance,public static PasswordExpirationDialog  (String accountName boolean expired){ final PasswordExpirationDialog dialog=new PasswordExpirationDialog(); Bundle b=new Bundle(); b.putString(BUNDLE_KEY_ACCOUNT_NAME accountName); b.putBoolean(BUNDLE_KEY_EXPIRED expired); dialog.setArguments(b); return dialog; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onActivityResult,@Override protected void  (int requestCode int resultCode Intent data){ tryAdvanceSecurity(mAccount); super.onActivityResult(requestCode resultCode data); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onClick,@Override public void  (DialogInterface dialog int which){ dismiss(); AccountSecurity activity=(AccountSecurity)getActivity(); if (which == DialogInterface.BUTTON_POSITIVE) { Intent intent=new Intent(DevicePolicyManager.ACTION_SET_NEW_PASSWORD); activity.
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); mHandler=new Handler(); final Intent i=getIntent(); final long accountId; Bundle extras=i.getExtras(); if (extras == null) { extras=new Bundle(); accountId=IntentUtili
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onCreateDialog,@Override public Dialog  (Bundle savedInstanceState){ final String accountName=getArguments().getString(BUNDLE_KEY_ACCOUNT_NAME); final boolean expired=getArguments().getBoolean(BUNDLE_KEY_EXPIRED); final int titleId=expired ? R.string.password_expired_di
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onCreateLoader,@Override public Loader<Account>  (final int id final Bundle args){ final long accountId=args.getLong(EXTRA_ACCOUNT_ID -1); final boolean showDialog=args.getBoolean(EXTRA_SHOW_DIALOG false); final boolean passwordExpiring=args.getBoolean(EXTRA_PASSWORD_EX
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onLoadFinished,@Override public void  (final Loader<Account> loader final Account account){ mHandler.post(new Runnable(){ @Override public void run(){ final AccountSecurity activity=AccountSecurity.this; if (!activity.isActivityResumed()) { return; } if (account == null
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onPause,@Override protected void  (){ super.onPause(); mActivityResumed=false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onResume,@Override protected void  (){ super.onResume(); mActivityResumed=true; tickleAccountAndPolicyLoader(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,onSaveInstanceState,@Override protected void  (final Bundle outState){ super.onSaveInstanceState(outState); outState.putBoolean(SAVESTATE_INITIALIZED_TAG mInitialized); outState.putBoolean(SAVESTATE_TRIED_ADD_ADMINISTRATOR_TAG mTriedAddAdministrator); outState.putBoolean(SAV
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,repostNotification,private static void  (final Account account final SecurityPolicy security){ if (account == null) return; new AsyncTask<Void Void Void>(){ @Override protected Void doInBackground( Void... params){ security.policiesRequired(account.mId); return null; } } .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,run,"@Override public void  (){ final AccountSecurity activity=AccountSecurity.this; if (!activity.isActivityResumed()) { return; } if (account == null || (account.mPolicyKey != 0 && account.mPolicy == null)) { activity.finish(); LogUtils.d(TAG ""could not load"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,startAccountAndPolicyLoader,private void  (final Bundle args){ mAPLoaderArgs=args; mAPLoaderCallbacks=new AccountAndPolicyLoaderCallbacks(); tickleAccountAndPolicyLoader(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,tickleAccountAndPolicyLoader,private void  (){ if (!mInitialized) { getLoaderManager().initLoader(ACCOUNT_POLICY_LOADER_ID mAPLoaderArgs mAPLoaderCallbacks); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSecurity.java,tryAdvanceSecurity,"private void  (Account account){ SecurityPolicy security=SecurityPolicy.getInstance(this); if (!security.isActiveAdmin()) { if (mTriedAddAdministrator) { if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Not active admin: repost notification""); } repostNotification(account security); finish(); } else { mTriedAddAdministrator=true; final HostAuth hostAuth=account.mHostAuthRecv; if (hostAuth == null) { if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""No HostAuth: repost notification""); } repostNotification(account security); finish(); } else { if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Not active admin: post initial notification""); } Intent intent=new Intent(DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN); intent.putExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN security.getAdminComponent()); intent.putExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION this.getString(R.string.account_security_policy_explanation_fmt hostAuth.mAddress)); startActivityForResult(intent REQUEST_ENABLE); } } return; } if (security.isActive(null)) { if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Security active; clear holds""); } Account.clearSecurityHoldOnAllAccounts(this); security.syncAccount(account); security.clearNotification(); finish(); return; } security.setActivePolicies(); int inactiveReasons=security.getInactiveReasons(null); if ((inactiveReasons & SecurityPolicy.INACTIVE_NEED_PASSWORD) != 0) { if (mTriedSetPassword) { if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Password needed; repost notification""); } repostNotification(account security); finish(); } else { if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Password needed; request it via DPM""); } mTriedSetPassword=true; Intent intent=new Intent(DevicePolicyManager.ACTION_SET_NEW_PASSWORD); startActivityForResult(intent REQUEST_PASSWORD); } return; } if ((inactiveReasons & SecurityPolicy.INACTIVE_NEED_ENCRYPTION) != 0) { if (mTriedSetEncryption) { if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Encryption needed; repost notification""); } repostNotification(account security); finish(); } else { if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Encryption needed; request it via DPM""); } mTriedSetEncryption=true; Intent intent=new Intent(DevicePolicyManager.ACTION_START_ENCRYPTION); startActivityForResult(intent REQUEST_ENCRYPTION); } return; } if (DebugUtils.DEBUG || DEBUG) { LogUtils.d(TAG ""Policies enforced; clear holds""); } Account.clearSecurityHoldOnAllAccounts(this); security.syncAccount(account); security.clearNotification(); finish(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,ThreadLocalDateFormat,public  (String formatStr){ mFormatStr=formatStr; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,arrayContains,public static boolean  (Object[] a Object o){ int index=arrayIndex(a o); return (index >= 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,arrayIndex,public static int  (Object[] a Object o){ for (int i=0  count=a.length; i < count; i++) { if (a[i].equals(o)) { return i; } } return -1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,attachmentExists,"public static boolean  (Context context Attachment attachment){ if (attachment == null) { return false; } else if (attachment.mContentBytes != null) { return true; } else { final String cachedFile=attachment.getCachedFileUri(); if (!TextUtils.isEmpty(cachedFile)) { final Uri cachedFileUri=Uri.parse(cachedFile); try { final InputStream inStream=context.getContentResolver().openInputStream(cachedFileUri); try { inStream.close(); } catch ( IOException e) { } return true; } catch ( FileNotFoundException e) { LogUtils.e(LogUtils.TAG e ""not able to open cached file""); } } final String contentUri=attachment.getContentUri(); if (TextUtils.isEmpty(contentUri)) { return false; } try { final Uri fileUri=Uri.parse(contentUri); try { final InputStream inStream=context.getContentResolver().openInputStream(fileUri); try { inStream.close(); } catch ( IOException e) { } return true; } catch ( FileNotFoundException e) { return false; } } catch ( RuntimeException re) { LogUtils.w(LogUtils.TAG re ""attachmentExists RuntimeException""); return false; } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,buildLimitOneUri,"static Uri  (Uri original){ if (""content"".equals(original.getScheme()) && EmailContent.AUTHORITY.equals(original.getAuthority())) { return EmailContent.uriWithLimit(original 1); } return original; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,byteToHex,"public static StringBuilder  (StringBuilder sb int b){ b&=0xFF; sb.append(""0123456789ABCDEF"".charAt(b >> 4)); sb.append(""0123456789ABCDEF"".charAt(b & 0xF)); return sb; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,cancelTask,public static void  (AsyncTask<? ? ?> task boolean mayInterruptIfRunning){ if (task != null && task.getStatus() != AsyncTask.Status.FINISHED) { task.cancel(mayInterruptIfRunning); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,cancelTaskInterrupt,public static void  (AsyncTask<? ? ?> task){ cancelTask(task true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,cleanUpMimeDate,"public static String  (String date){ if (TextUtils.isEmpty(date)) { return date; } date=DATE_CLEANUP_PATTERN_WRONG_TIMEZONE.matcher(date).replaceFirst(""$1""); return date; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\utility\Utility.java,combine,public static String  (Object[] parts char separator){ if (parts == null) { return null; } StringBuilder sb=new StringBuilder(); for (int i=0; i < parts.length; i++) { sb.append(parts[i].toString()); if (i < parts.length - 1) { sb.append(separator); } } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,VendorPolicyLoader,"public  (Context context String apkPackageName String className boolean allowNonSystemApk){ if (!allowNonSystemApk && !isSystemPackage(context apkPackageName)) { mPolicyMethod=null; return; } Class<?> clazz=null; Method method=null; try { final Context policyContext=context.createPackageContext(apkPackageName Context.CONTEXT_IGNORE_SECURITY | Context.CONTEXT_INCLUDE_CODE); final ClassLoader classLoader=policyContext.getClassLoader(); clazz=classLoader.loadClass(className); method=clazz.getMethod(GET_POLICY_METHOD ARGS); } catch ( NameNotFoundException ignore) { } catch ( ClassNotFoundException e) { LogUtils.w(Logging.LOG_TAG ""VendorPolicyLoader: "" + e); } catch ( NoSuchMethodException e) { LogUtils.w(Logging.LOG_TAG ""VendorPolicyLoader: "" + e); } mPolicyMethod=method; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,clearInstanceForTest,public static void  (){ sInstance=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,expandAlternateTemplates,"public void  (String email){ final String[] emailParts=email.split(""@""); final String user=emailParts[0]; incomingUri=expandTemplate(altIncomingUriTemplate email user); incomingUsername=expandTemplate(altIncomingUsernameTemplate email user); outgoingUri=expandTemplate(altOutgoingUriTemplate email user); outgoingUsername=expandTemplate(altOutgoingUsernameTemplate email user); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,expandTemplate,"private String  (String template String email String user){ String returnString=template; returnString=returnString.replaceAll(""\\$email"" email); returnString=returnString.replaceAll(""\\$user"" user); returnString=returnString.replaceAll(""\\$domain"" domain); return returnString; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,expandTemplates,"public void  (String email){ final String[] emailParts=email.split(""@""); final String user=emailParts[0]; incomingUri=expandTemplate(incomingUriTemplate email user); incomingUsername=expandTemplate(incomingUsernameTemplate email user); outgoingUri=expandTemplate(outgoingUriTemplate email user); outgoingUsername=expandTemplate(outgoingUsernameTemplate email user); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,findProviderForDomain,public Provider  (String domain){ Bundle params=new Bundle(); params.putString(FIND_PROVIDER domain); Bundle out=getPolicy(FIND_PROVIDER params); if (out != null && !out.isEmpty()) { Provider p=new Provider(); p.id=null; p.label=null; p.domain=domain; p.incomingUriTemplate=out.getString(FIND_PROVIDER_IN_URI); p.incomingUsernameTemplate=out.getString(FIND_PROVIDER_IN_USER); p.outgoingUriTemplate=out.getString(FIND_PROVIDER_OUT_URI); p.outgoingUsernameTemplate=out.getString(FIND_PROVIDER_OUT_USER); p.note=out.getString(FIND_PROVIDER_NOTE); return p; } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,getImapIdValues,public String  (String userName String host String capabilities){ Bundle params=new Bundle(); params.putString(GET_IMAP_ID_USER userName); params.putString(GET_IMAP_ID_HOST host); params.putString(GET_IMAP_ID_CAPA capabilities); String result=getPolicy(GET_IMAP_ID params).getString(GET_IMAP_ID); return result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,getInstance,public static VendorPolicyLoader  (Context context){ if (sInstance == null) { sInstance=new VendorPolicyLoader(context); } return sInstance; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,getPolicy,"public Bundle  (String policy Bundle args){ Bundle ret=null; if (mPolicyMethod != null) { try { ret=(Bundle)mPolicyMethod.invoke(null policy args); } catch ( Exception e) { LogUtils.w(Logging.LOG_TAG ""VendorPolicyLoader"" e); } } return (ret != null) ? ret : Bundle.EMPTY; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,injectPolicyForTest,"public static void  (Context context String apkPackageName Class<?> clazz){ String name=clazz.getName(); LogUtils.d(Logging.LOG_TAG String.format(""Using policy: package=%s name=%s"" apkPackageName name)); sInstance=new VendorPolicyLoader(context apkPackageName name true); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,isSystemPackage,public static boolean  (Context context String packageName){ try { ApplicationInfo ai=context.getPackageManager().getApplicationInfo(packageName 0); return (ai.flags & ApplicationInfo.FLAG_SYSTEM) != 0; } catch ( NameNotFoundException e) { return false; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\emailcommon\src\com\android\emailcommon\VendorPolicyLoader.java,useAlternateExchangeStrings,public boolean  (){ return getPolicy(USE_ALTERNATE_EXCHANGE_STRINGS null).getBoolean(USE_ALTERNATE_EXCHANGE_STRINGS false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,commitSettings,"public static void  (Context context Account account){ if (!account.isSaved()) { account.save(context); if (account.mPolicy != null) { if (account.mPolicy.mProtocolPoliciesUnsupported != null) { LogUtils.d(LogUtils.TAG ""Clearing unsupported policies "" + account.mPolicy.mProtocolPoliciesUnsupported); account.mPolicy.mProtocolPoliciesUnsupported=null; } PolicyServiceProxy.setAccountPolicy2(context account.getId() account.mPolicy account.mSecuritySyncKey == null ? """" : account.mSecuritySyncKey false); } String[] defaultQuickResponses=context.getResources().getStringArray(R.array.default_quick_responses); ContentValues cv=new ContentValues(); cv.put(QuickResponse.ACCOUNT_KEY account.mId); ContentResolver resolver=context.getContentResolver(); for ( String quickResponse : defaultQuickResponses) { if (!TextUtils.isEmpty(quickResponse)) { cv.put(QuickResponse.TEXT quickResponse); resolver.insert(QuickResponse.CONTENT_URI cv); } } } else { ContentValues cv=getAccountContentValues(account); account.update(context cv); } AccountBackupRestore.backup(context); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,createOAuthRegistrationRequest,"public static Uri  (final Context context final OAuthProvider provider final String emailAddress){ final Uri.Builder b=Uri.parse(provider.authEndpoint).buildUpon(); b.appendQueryParameter(""response_type"" provider.responseType); b.appendQueryParameter(""client_id"" provider.clientId); b.appendQueryParameter(""redirect_uri"" provider.redirectUri); b.appendQueryParameter(""scope"" provider.scope); b.appendQueryParameter(""state"" provider.state); b.appendQueryParameter(""login_hint"" emailAddress); return b.build(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,findOAuthProvider,"public static OAuthProvider  (final Context context final String id final int resourceId){ try { final XmlResourceParser xml=context.getResources().getXml(resourceId); int xmlEventType; OAuthProvider provider=null; while ((xmlEventType=xml.next()) != XmlResourceParser.END_DOCUMENT) { if (xmlEventType == XmlResourceParser.START_TAG && ""provider"".equals(xml.getName())) { String providerId=getXmlAttribute(context xml ""id""); try { if (TextUtils.equals(id providerId)) { provider=new OAuthProvider(); provider.id=id; provider.label=getXmlAttribute(context xml ""label""); provider.authEndpoint=getXmlAttribute(context xml ""auth_endpoint""); provider.tokenEndpoint=getXmlAttribute(context xml ""token_endpoint""); provider.refreshEndpoint=getXmlAttribute(context xml ""refresh_endpoint""); provider.responseType=getXmlAttribute(context xml ""response_type""); provider.redirectUri=getXmlAttribute(context xml ""redirect_uri""); provider.scope=getXmlAttribute(context xml ""scope""); provider.state=getXmlAttribute(context xml ""state""); provider.clientId=getXmlAttribute(context xml ""client_id""); provider.clientSecret=getXmlAttribute(context xml ""client_secret""); return provider; } } catch ( IllegalArgumentException e) { LogUtils.w(Logging.LOG_TAG ""providers line: "" + xml.getLineNumber() + ""; Domain contains multiple globals""); } } } } catch ( Exception e) { LogUtils.e(Logging.LOG_TAG ""Error while trying to load provider settings."" e); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,findProviderForDomain,"static Provider  (Context context String domain int resourceId){ try { XmlResourceParser xml=context.getResources().getXml(resourceId); int xmlEventType; Provider provider=null; while ((xmlEventType=xml.next()) != XmlResourceParser.END_DOCUMENT) { if (xmlEventType == XmlResourceParser.START_TAG && ""provider"".equals(xml.getName())) { String providerDomain=getXmlAttribute(context xml ""domain""); try { if (matchProvider(domain providerDomain)) { provider=new Provider(); provider.id=getXmlAttribute(context xml ""id""); provider.label=getXmlAttribute(context xml ""label""); provider.domain=domain.toLowerCase(); provider.note=getXmlAttribute(context xml ""note""); provider.oauth=getXmlAttribute(context xml ""oauth""); } } catch ( IllegalArgumentException e) { LogUtils.w(Logging.LOG_TAG ""providers line: "" + xml.getLineNumber() + ""; Domain contains multiple globals""); } } else if (xmlEventType == XmlResourceParser.START_TAG && ""incoming"".equals(xml.getName()) && provider != null) { provider.incomingUriTemplate=getXmlAttribute(context xml ""uri""); provider.incomingUsernameTemplate=getXmlAttribute(context xml ""username""); } else if (xmlEventType == XmlResourceParser.START_TAG && ""outgoing"".equals(xml.getName()) && provider != null) { provider.outgoingUriTemplate=getXmlAttribute(context xml ""uri""); provider.outgoingUsernameTemplate=getXmlAttribute(context xml ""username""); } else if (xmlEventType == XmlResourceParser.START_TAG && ""incoming-fallback"".equals(xml.getName()) && provider != null) { provider.altIncomingUriTemplate=getXmlAttribute(context xml ""uri""); provider.altIncomingUsernameTemplate=getXmlAttribute(context xml ""username""); } else if (xmlEventType == XmlResourceParser.START_TAG && ""outgoing-fallback"".equals(xml.getName()) && provider != null) { provider.altOutgoingUriTemplate=getXmlAttribute(context xml ""uri""); provider.altOutgoingUsernameTemplate=getXmlAttribute(context xml ""username""); } else if (xmlEventType == XmlResourceParser.END_TAG && ""provider"".equals(xml.getName()) && provider != null) { return provider; } } } catch ( Exception e) { LogUtils.e(Logging.LOG_TAG ""Error while trying to load provider settings."" e); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,getAccountContentValues,public static ContentValues  (Account account){ ContentValues cv=new ContentValues(); cv.put(AccountColumns.DISPLAY_NAME account.getDisplayName()); cv.put(AccountColumns.SENDER_NAME account.getSenderName()); cv.put(AccountColumns.SIGNATURE account.getSignature()); cv.put(AccountColumns.SYNC_INTERVAL account.mSyncInterval); cv.put(AccountColumns.FLAGS account.mFlags); cv.put(AccountColumns.SYNC_LOOKBACK account.mSyncLookback); cv.put(AccountColumns.SECURITY_SYNC_KEY account.mSecuritySyncKey); return cv; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,getAllOAuthProviders,"public static List<OAuthProvider>  (final Context context){ try { List<OAuthProvider> providers=new ArrayList<OAuthProvider>(); final XmlResourceParser xml=context.getResources().getXml(R.xml.oauth); int xmlEventType; OAuthProvider provider=null; while ((xmlEventType=xml.next()) != XmlResourceParser.END_DOCUMENT) { if (xmlEventType == XmlResourceParser.START_TAG && ""provider"".equals(xml.getName())) { try { provider=new OAuthProvider(); provider.id=getXmlAttribute(context xml ""id""); provider.label=getXmlAttribute(context xml ""label""); provider.authEndpoint=getXmlAttribute(context xml ""auth_endpoint""); provider.tokenEndpoint=getXmlAttribute(context xml ""token_endpoint""); provider.refreshEndpoint=getXmlAttribute(context xml ""refresh_endpoint""); provider.responseType=getXmlAttribute(context xml ""response_type""); provider.redirectUri=getXmlAttribute(context xml ""redirect_uri""); provider.scope=getXmlAttribute(context xml ""scope""); provider.state=getXmlAttribute(context xml ""state""); provider.clientId=getXmlAttribute(context xml ""client_id""); provider.clientSecret=getXmlAttribute(context xml ""client_secret""); providers.add(provider); } catch ( IllegalArgumentException e) { LogUtils.w(Logging.LOG_TAG ""providers line: "" + xml.getLineNumber() + ""; Domain contains multiple globals""); } } } return providers; } catch ( Exception e) { LogUtils.e(Logging.LOG_TAG ""Error while trying to load provider settings."" e); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,getXmlAttribute,private static String  (Context context XmlResourceParser xml String name){ int resId=xml.getAttributeResourceValue(null name 0); if (resId == 0) { return xml.getAttributeValue(null name); } else { return context.getString(resId); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,inferServerName,"public static String  (Context context String server String incoming String outgoing){ int keepFirstChar=0; int firstDotIndex=server.indexOf('.'); if (firstDotIndex != -1) { String firstWord=server.substring(0 firstDotIndex).toLowerCase(); String[] hostPrefixes=context.getResources().getStringArray(R.array.smtp_host_prefixes); boolean canSubstituteSmtp=Utility.arrayContains(hostPrefixes firstWord); boolean isMail=""mail"".equals(firstWord); if (incoming != null) { if (canSubstituteSmtp || isMail) { return server; } } else { if (canSubstituteSmtp) { keepFirstChar=firstDotIndex + 1; } else if (isMail) { return server; } else { } } } return ((incoming != null) ? incoming : outgoing) + '.' + server.substring(keepFirstChar); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,matchProvider,@VisibleForTesting public static boolean  (String testDomain String providerDomain){ String[] testParts=testDomain.split(DOMAIN_SEPARATOR); String[] providerParts=providerDomain.split(DOMAIN_SEPARATOR); if (testParts.length != providerParts.length) { retu
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\AccountSettingsUtils.java,matchWithWildcards,private static boolean  (String testPart String providerPart){ int providerLength=providerPart.length(); if (testPart.length() != providerLength) { return false; } for (int i=0; i < providerLength; i++) { char testChar=testPart.charAt(i); char providerChar=providerPart.charAt(i); if (testChar != providerChar && providerChar != WILD_CHARACTER) { return false; } } return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\activity\setup\ForwardingIntent.java,ForwardingIntent,public  (Context activity Class klass){ super(activity klass); setFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\DebugUtils.java,enableStrictMode,public static void  (final boolean enable){ Utility.enableStrictMode(enable); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\DebugUtils.java,init,public static void  (final Context context){ final Preferences prefs=Preferences.getPreferences(context); DEBUG=prefs.getEnableDebugLogging(); DEBUG_EXCHANGE=prefs.getEnableExchangeLogging(); DEBUG_FILE=prefs.getEnableExchangeFileLogging(); updateLoggingFlags(context); enableStrictMode(prefs.getEnableStrictMode()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\DebugUtils.java,updateLoggingFlags,public static void  (Context context){ Preferences prefs=Preferences.getPreferences(context); int debugLogging=prefs.getEnableDebugLogging() ? EmailServiceProxy.DEBUG_BIT : 0; int exchangeLogging=prefs.getEnableExchangeLogging() ? EmailServiceProxy.DEBUG_EXCHANGE_BIT : 0; int fileLogging=prefs.getEnableExchangeFileLogging() ? EmailServiceProxy.DEBUG_FILE_BIT : 0; int enableStrictMode=prefs.getEnableStrictMode() ? EmailServiceProxy.DEBUG_ENABLE_STRICT_MODE : 0; int debugBits=debugLogging | exchangeLogging | fileLogging| enableStrictMode; EmailServiceUtils.setRemoteServicesLogging(context debugBits); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,AttachmentInfo,public  (Context context long id long size String fileName String mimeType long accountKey int flags){ mSize=size; mContentType=AttachmentUtilities.inferMimeType(fileName mimeType); mName=fileName; mId=id; mAccountKey=accountKey; mFlags=flags; boolean canView=true; boolean canSave=true; boolean canInstall=false; int denyFlags=ALLOW; if (!Utility.isExternalStorageMounted()) { canSave=false; } if ((!MimeUtility.mimeTypeMatches(mContentType AttachmentUtilities.ACCEPTABLE_ATTACHMENT_VIEW_TYPES)) || (MimeUtility.mimeTypeMatches(mContentType AttachmentUtilities.UNACCEPTABLE_ATTACHMENT_VIEW_TYPES))) { canView=false; } String extension=AttachmentUtilities.getFilenameExtension(mName); if (!TextUtils.isEmpty(extension) && Utility.arrayContains(AttachmentUtilities.UNACCEPTABLE_ATTACHMENT_EXTENSIONS extension)) { canView=false; canSave=false; denyFlags|=DENY_MALWARE; } if ((flags & Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD) != 0) { canView=false; canSave=false; denyFlags|=DENY_POLICY; } extension=AttachmentUtilities.getFilenameExtension(mName); if (!TextUtils.isEmpty(extension) && Utility.arrayContains(AttachmentUtilities.INSTALLABLE_ATTACHMENT_EXTENSIONS extension)) { boolean sideloadEnabled; sideloadEnabled=Settings.Secure.getInt(context.getContentResolver() Settings.Secure.INSTALL_NON_MARKET_APPS 0) == 1; canSave&=sideloadEnabled; canView=canSave; canInstall=canSave; if (!sideloadEnabled) { denyFlags|=DENY_NOSIDELOAD; } } if (mSize > AttachmentUtilities.MAX_ATTACHMENT_DOWNLOAD_SIZE) { int networkType=EmailConnectivityManager.getActiveNetworkType(context); if (networkType != ConnectivityManager.TYPE_WIFI) { canView=false; canSave=false; denyFlags|=DENY_WIFIONLY; } } Intent intent=getAttachmentIntent(context 0); PackageManager pm=context.getPackageManager(); List<ResolveInfo> activityList=pm.queryIntentActivities(intent 0); if (activityList.isEmpty()) { canView=false; canSave=false; denyFlags|=DENY_NOINTENT; } mAllowView=canView; mAllowSave=canSave; mAllowInstall=canInstall; mDenyFlags=denyFlags; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,equals,@Override public boolean  (Object o){ if (o == this) { return true; } if ((o == null) || (o.getClass() != getClass())) { return false; } return ((AttachmentInfo)o).mId == mId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,getAttachmentIntent,public Intent  (Context context long accountId){ Uri contentUri=getUriForIntent(context accountId); Intent intent=new Intent(Intent.ACTION_VIEW); intent.setDataAndType(contentUri mContentType); intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET); return intent; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,getUriForIntent,protected Uri  (Context context long accountId){ Uri contentUri=AttachmentUtilities.getAttachmentUri(accountId mId); if (accountId > 0) { contentUri=AttachmentUtilities.resolveAttachmentIdToContentUri(context.getContentResolver() contentUri); } return contentUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,hashCode,@Override public int  (){ return (int)(mId ^ (mId >>> 32)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,isEligibleForDownload,public boolean  (){ return mAllowView || mAllowSave; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\AttachmentInfo.java,toString,"@Override public String  (){ return ""{Attachment "" + mId + "":""+ mName+ "" ""+ mContentType+ "" ""+ mSize+ ""}""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,EmailConnectivityManager,public  (Context context String name){ mContext=context; mName=name; mConnectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE); PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE); mWakeLock=pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK name); mContext.registerReceiver(this new IntentFilter(ConnectivityManager.CONNECTIVITY_ACTION)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,getActiveNetworkType,static public int  (ConnectivityManager cm){ NetworkInfo info=cm.getActiveNetworkInfo(); if (info == null) return NO_ACTIVE_NETWORK; return info.getType(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,hasConnectivity,public boolean  (){ NetworkInfo info=mConnectivityManager.getActiveNetworkInfo(); return (info != null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,isAutoSyncAllowed,public boolean  (){ return ContentResolver.getMasterSyncAutomatically(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,onReceive,@Override public void  (Context context Intent intent){ if (intent.getAction().equals(ConnectivityManager.CONNECTIVITY_ACTION)) { Bundle extras=intent.getExtras(); if (extras != null) { NetworkInfo networkInfo=(NetworkInfo)extras.get(ConnectivityManager.E
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,stopWait,public void  (){ mStop=true; Thread thread=mWaitThread; if (thread != null) { thread.interrupt(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,unregister,public void  (){ try { mContext.unregisterReceiver(this); } catch ( RuntimeException e) { } finally { mRegistered=false; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailConnectivityManager.java,waitForConnectivity,"public void  (){ if (!mRegistered) { throw new IllegalStateException(""ConnectivityManager not registered""); } boolean waiting=false; mWaitThread=Thread.currentThread(); mWakeLock.acquire(); try { while (!mStop) { NetworkInfo info=mConnectivityManager.getActiveNetworkInfo(); if (info != null) { if (waiting) { if (DebugUtils.DEBUG) { LogUtils.d(TAG mName + "": Connectivity wait ended""); } } return; } else { if (!waiting) { if (DebugUtils.DEBUG) { LogUtils.d(TAG mName + "": Connectivity waiting...""); } waiting=true; } synchronized (mLock) { mWakeLock.release(); try { mLock.wait(CONNECTIVITY_WAIT_TIME); } catch ( InterruptedException e) { } mWakeLock.acquire(); } } } } finally { if (mWakeLock.isHeld()) { mWakeLock.release(); } mWaitThread=null; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,FixedLengthInputStream,public  (InputStream in int length){ this.mIn=in; this.mLength=length; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,available,@Override public int  () throws IOException { return mLength - mCount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,getLength,public int  (){ return mLength; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,read,@Override public int  (byte[] b) throws IOException { return read(b 0 b.length); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\FixedLengthInputStream.java,toString,"@Override public String  (){ return String.format(""FixedLengthInputStream(in=%s  length=%d)"" mIn.toString() mLength); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,AuthenticationCache,private  (){ mCache=new HashMap<Long CacheEntry>(); mAuthenticator=new OAuthAuthenticator(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,CacheEntry, (long accountId String providerId String accessToken String refreshToken long expirationTime){ mAccountId=accountId; mProviderId=providerId; mAccessToken=accessToken; mRefreshToken=refreshToken; mExpirationTime=expirationTime; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,clearEntry,"private void  (Context context CacheEntry entry){ LogUtils.d(Logging.LOG_TAG ""clearEntry""); entry.mAccessToken=""""; entry.mRefreshToken=""""; entry.mExpirationTime=0; saveEntry(context entry); mCache.remove(entry.mAccountId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,getEntry,"private CacheEntry  (Context context Account account){ CacheEntry entry; if (account.isSaved() && !account.isTemporary()) { entry=mCache.get(account.mId); if (entry == null) { LogUtils.d(Logging.LOG_TAG ""initializing entry from database""); final HostAuth hostAuth=account.getOrCreateHostAuthRecv(context); final Credential credential=hostAuth.getOrCreateCredential(context); entry=new CacheEntry(account.mId credential.mProviderId credential.mAccessToken credential.mRefreshToken credential.mExpiration); mCache.put(account.mId entry); } } else { final HostAuth hostAuth=account.getOrCreateHostAuthRecv(context); final Credential credential=hostAuth.getCredential(context); entry=new CacheEntry(account.mId credential.mProviderId credential.mAccessToken credential.mRefreshToken credential.mExpiration); } return entry; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,getInstance,public static AuthenticationCache  (){ synchronized (AuthenticationCache.class) { if (sCache == null) { sCache=new AuthenticationCache(); } return sCache; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,refreshAccessToken,public String  (Context context Account account) throws MessagingException  IOException { CacheEntry entry=getEntry(context account); synchronized (entry) { refreshEntry(context entry); return entry.mAccessToken; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,refreshEntry,"private void  (Context context CacheEntry entry) throws IOException  MessagingException { LogUtils.d(Logging.LOG_TAG ""AuthenticationCache refreshEntry %d"" entry.mAccountId); try { final AuthenticationResult result=mAuthenticator.requestRefresh(context entry.mProviderId entry.mRefreshToken); entry.mAccessToken=result.mAccessToken; entry.mExpirationTime=result.mExpiresInSeconds * DateUtils.SECOND_IN_MILLIS + System.currentTimeMillis(); saveEntry(context entry); } catch ( AuthenticationFailedException e) { LogUtils.d(Logging.LOG_TAG ""authentication failed  clearning""); clearEntry(context entry); throw e; } catch ( MessagingException e) { LogUtils.d(Logging.LOG_TAG ""messaging exception""); throw e; } catch ( IOException e) { LogUtils.d(Logging.LOG_TAG ""IO exception""); throw e; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,retrieveAccessToken,public String  (Context context Account account) throws MessagingException  IOException { CacheEntry entry=null; synchronized (mCache) { entry=getEntry(context account); } synchronized (entry) { final long actualExpiration=entry.mExpirationTime - EXPIRATION_THRESHOLD; if (System.currentTimeMillis() > actualExpiration) { refreshEntry(context entry); } return entry.mAccessToken; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\AuthenticationCache.java,saveEntry,"private void  (Context context CacheEntry entry){ LogUtils.d(Logging.LOG_TAG ""saveEntry""); final Account account=Account.restoreAccountWithId(context entry.mAccountId); final HostAuth hostAuth=account.getOrCreateHostAuthRecv(context); final Credential cred=hostAuth.getOrCreateCredential(context); cred.mProviderId=entry.mProviderId; cred.mAccessToken=entry.mAccessToken; cred.mRefreshToken=entry.mRefreshToken; cred.mExpiration=entry.mExpirationTime; cred.update(context cred.toContentValues()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailIntentService.java,EmailIntentService,"public  (){ super(""EmailIntentService""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\EmailIntentService.java,onHandleIntent,@Override protected void  (final Intent intent){ super.onHandleIntent(intent); if (UIProvider.ACTION_UPDATE_NOTIFICATION.equals(intent.getAction())) { final NotificationController nc=NotificationControllerCreatorHolder.getInstance(this); if (nc != null) {
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,addAttachmentPart,@VisibleForTesting protected static void  (final Multipart mp final String contentType final Long contentSize final String filename final String contentId final InputStream content) throws MessagingException { final Base64Body body=new Base64Body(content)
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,addOneAttachment,"public static void  (final Context context final EmailContent.Message localMessage final Part part) throws MessagingException  IOException { final Attachment localAttachment=mimePartToAttachment(part); localAttachment.mMessageKey=localMessage.mId; localAttachment.mAccountKey=localMessage.mAccountKey; if (DEBUG_ATTACHMENTS) { LogUtils.d(Logging.LOG_TAG ""Add attachment "" + localAttachment); } final Uri uri=ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI localMessage.mId); final Cursor cursor=context.getContentResolver().query(uri Attachment.CONTENT_PROJECTION null null null); boolean attachmentFoundInDb=false; try { while (cursor.moveToNext()) { final Attachment dbAttachment=new Attachment(); dbAttachment.restore(cursor); if (!TextUtils.equals(dbAttachment.mFileName localAttachment.mFileName) || !TextUtils.equals(dbAttachment.mMimeType localAttachment.mMimeType) || !TextUtils.equals(dbAttachment.mContentId localAttachment.mContentId)|| !TextUtils.equals(dbAttachment.mLocation localAttachment.mLocation)) { continue; } attachmentFoundInDb=true; localAttachment.mId=dbAttachment.mId; if (DEBUG_ATTACHMENTS) { LogUtils.d(Logging.LOG_TAG ""Skipped  found db attachment "" + dbAttachment); } break; } } finally { cursor.close(); } if (!attachmentFoundInDb) { localAttachment.save(context); } saveAttachmentBody(context part localAttachment localMessage.mAccountKey); if (localMessage.mAttachments == null) { localMessage.mAttachments=new ArrayList<Attachment>(); } localMessage.mAttachments.add(localAttachment); localMessage.mFlagAttachment=true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,addTextBodyPart,private static void  (final MimeMultipart mp final String contentType final String partText) throws MessagingException { if (partText == null) { return; } final TextBody body=new TextBody(partText); final MimeBodyPart bp=new MimeBodyPart(body contentType); mp.addBodyPart(bp); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,inferMailboxTypeFromName,@Deprecated public static synchronized int  (Context context String mailboxName){ if (sServerMailboxNames.size() == 0) { sServerMailboxNames.put(context.getString(R.string.mailbox_name_server_inbox) Mailbox.TYPE_INBOX); sServerMailboxNames.put(context.get
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,makeMessage,"public static Message  (final Context context final EmailContent.Message localMessage) throws MessagingException { final MimeMessage message=new MimeMessage(); message.setSubject(localMessage.mSubject == null ? """" : localMessage.mSubject); final Address[] from=Address.fromHeader(localMessage.mFrom); if (from.length > 0) { message.setFrom(from[0]); } message.setSentDate(new Date(localMessage.mTimeStamp)); message.setUid(localMessage.mServerId); message.setFlag(Flag.DELETED localMessage.mFlagLoaded == EmailContent.Message.FLAG_LOADED_DELETED); message.setFlag(Flag.SEEN localMessage.mFlagRead); message.setFlag(Flag.FLAGGED localMessage.mFlagFavorite); message.setRecipients(RecipientType.TO Address.fromHeader(localMessage.mTo)); message.setRecipients(RecipientType.CC Address.fromHeader(localMessage.mCc)); message.setRecipients(RecipientType.BCC Address.fromHeader(localMessage.mBcc)); message.setReplyTo(Address.fromHeader(localMessage.mReplyTo)); message.setInternalDate(new Date(localMessage.mServerTimeStamp)); message.setMessageId(localMessage.mMessageId); message.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""multipart/mixed""); final MimeMultipart mp=new MimeMultipart(); mp.setSubType(""mixed""); message.setBody(mp); try { addTextBodyPart(mp ""text/html"" EmailContent.Body.restoreBodyHtmlWithMessageId(context localMessage.mId)); } catch ( RuntimeException rte) { LogUtils.d(Logging.LOG_TAG ""Exception while reading html body "" + rte.toString()); } try { addTextBodyPart(mp ""text/plain"" EmailContent.Body.restoreBodyTextWithMessageId(context localMessage.mId)); } catch ( RuntimeException rte) { LogUtils.d(Logging.LOG_TAG ""Exception while reading text body "" + rte.toString()); } final Uri uri=ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI localMessage.mId); final Cursor attachments=context.getContentResolver().query(uri Attachment.CONTENT_PROJECTION null null null); try { while (attachments != null && attachments.moveToNext()) { final Attachment att=new Attachment(); att.restore(attachments); try { final InputStream content; if (att.mContentBytes != null) { content=new ByteArrayInputStream(att.mContentBytes); } else { String contentUriString=att.getCachedFileUri(); if (TextUtils.isEmpty(contentUriString)) { contentUriString=att.getContentUri(); } if (TextUtils.isEmpty(contentUriString)) { content=null; } else { final Uri contentUri=Uri.parse(contentUriString); content=context.getContentResolver().openInputStream(contentUri); } } final String mimeType=att.mMimeType; final Long contentSize=att.mSize; final String contentId=att.mContentId; final String filename=att.mFileName; if (content != null) { addAttachmentPart(mp mimeType contentSize filename contentId content); } else { LogUtils.e(LogUtils.TAG ""Could not open attachment file for upsync""); } } catch ( final FileNotFoundException e) { LogUtils.e(LogUtils.TAG ""File Not Found error on %s while upsyncing message"" att.getCachedFileUri()); } } } finally { if (attachments != null) { attachments.close(); } } return message; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,mimePartToAttachment,"@VisibleForTesting protected static Attachment  (final Part part) throws MessagingException { final String contentType=MimeUtility.unfoldAndDecode(part.getContentType()); String name=MimeUtility.getHeaderParameter(contentType ""name""); if (TextUtils.isEmpt"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,saveAttachmentBody,"public static void  (final Context context final Part part final Attachment localAttachment long accountId) throws MessagingException  IOException { if (part.getBody() != null) { final long attachmentId=localAttachment.mId; final File saveIn=AttachmentUtilities.getAttachmentDirectory(context accountId); if (!saveIn.isDirectory() && !saveIn.mkdirs()) { throw new IOException(""Could not create attachment directory""); } final File saveAs=AttachmentUtilities.getAttachmentFilename(context accountId attachmentId); InputStream in=null; FileOutputStream out=null; final long copySize; try { in=part.getBody().getInputStream(); out=new FileOutputStream(saveAs); copySize=IOUtils.copyLarge(in out); } finally { if (in != null) { in.close(); } if (out != null) { out.close(); } } final String contentUriString=AttachmentUtilities.getAttachmentUri(accountId attachmentId).toString(); localAttachment.mSize=copySize; localAttachment.setContentUri(contentUriString); final ContentValues cv=new ContentValues(3); cv.put(AttachmentColumns.SIZE copySize); cv.put(AttachmentColumns.CONTENT_URI contentUriString); cv.put(AttachmentColumns.UI_STATE UIProvider.AttachmentState.SAVED); final Uri uri=ContentUris.withAppendedId(Attachment.CONTENT_URI attachmentId); context.getContentResolver().update(uri cv null null); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,updateAttachments,public static void  (final Context context final EmailContent.Message localMessage final ArrayList<Part> attachments) throws MessagingException  IOException { localMessage.mAttachments=null; for ( Part attachmentPart : attachments) { addOneAttachment(context localMessage attachmentPart); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,updateInlineAttachments,public static void  (final Context context final EmailContent.Message localMessage final ArrayList<Part> inlineAttachments) throws MessagingException  IOException { for ( final Part inlinePart : inlineAttachments) { final String disposition=MimeUtility.getHeaderParameter(MimeUtility.unfoldAndDecode(inlinePart.getDisposition()) null); if (!TextUtils.isEmpty(disposition)) { addOneAttachment(context localMessage inlinePart); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\LegacyConversions.java,updateMessageFields,"public static boolean  (final EmailContent.Message localMessage final Message message final long accountId final long mailboxId) throws MessagingException { final Address[] from=message.getFrom(); final Address[] to=message.getRecipients(Message.RecipientType.TO); final Address[] cc=message.getRecipients(Message.RecipientType.CC); final Address[] bcc=message.getRecipients(Message.RecipientType.BCC); final Address[] replyTo=message.getReplyTo(); final String subject=message.getSubject(); final Date sentDate=message.getSentDate(); final Date internalDate=message.getInternalDate(); if (from != null && from.length > 0) { localMessage.mDisplayName=from[0].toFriendly(); } if (sentDate != null) { localMessage.mTimeStamp=sentDate.getTime(); } else if (internalDate != null) { LogUtils.w(Logging.LOG_TAG ""No sentDate  falling back to internalDate""); localMessage.mTimeStamp=internalDate.getTime(); } if (subject != null) { localMessage.mSubject=subject; } localMessage.mFlagRead=message.isSet(Flag.SEEN); if (message.isSet(Flag.ANSWERED)) { localMessage.mFlags|=EmailContent.Message.FLAG_REPLIED_TO; } if (localMessage.mFlagLoaded != EmailContent.Message.FLAG_LOADED_COMPLETE) { if (localMessage.mDisplayName == null || """".equals(localMessage.mDisplayName)) { localMessage.mFlagLoaded=EmailContent.Message.FLAG_LOADED_UNLOADED; } else { localMessage.mFlagLoaded=EmailContent.Message.FLAG_LOADED_PARTIAL; } } localMessage.mFlagFavorite=message.isSet(Flag.FLAGGED); localMessage.mServerId=message.getUid(); if (internalDate != null) { localMessage.mServerTimeStamp=internalDate.getTime(); } final String messageId=message.getMessageId(); if (messageId != null) { localMessage.mMessageId=messageId; } localMessage.mMailboxKey=mailboxId; localMessage.mAccountKey=accountId; if (from != null && from.length > 0) { localMessage.mFrom=Address.toString(from); } localMessage.mTo=Address.toString(to); localMessage.mCc=Address.toString(cc); localMessage.mBcc=Address.toString(bcc); localMessage.mReplyTo=Address.toString(replyTo); return true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,AuthenticationResult,public  (final String accessToken final String refreshToken final int expiresInSeconds){ mAccessToken=accessToken; mRefreshToken=refreshToken; mExpiresInSeconds=expiresInSeconds; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,OAuthAuthenticator,public  (){ final HttpParams params=new BasicHttpParams(); HttpConnectionParams.setConnectionTimeout(params (int)(CONNECTION_TIMEOUT)); HttpConnectionParams.setSoTimeout(params (int)(COMMAND_TIMEOUT)); HttpConnectionParams.setSocketBufferSize(params 8192); mClient=new DefaultHttpClient(params); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,doRequest,"private AuthenticationResult  (HttpPost post) throws MessagingException  IOException { final HttpResponse response; response=mClient.execute(post); final int status=response.getStatusLine().getStatusCode(); if (status == HttpStatus.SC_OK) { return parseResponse(response); } else if (status == HttpStatus.SC_FORBIDDEN || status == HttpStatus.SC_UNAUTHORIZED || status == HttpStatus.SC_BAD_REQUEST) { LogUtils.e(TAG ""HTTP Authentication error getting oauth tokens %d"" status); throw new AuthenticationFailedException(""Auth error getting auth token""); } else { LogUtils.e(TAG ""HTTP Error %d getting oauth tokens"" status); throw new MessagingException(""HTTPError "" + status + "" getting oauth token""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,parseResponse,"private AuthenticationResult  (HttpResponse response) throws IOException  MessagingException { final BufferedReader reader=new BufferedReader(new InputStreamReader(response.getEntity().getContent() ""UTF-8"")); final StringBuilder builder=new StringBuilder(); for (String line=null; (line=reader.readLine()) != null; ) { builder.append(line).append(""\n""); } try { final JSONObject jsonResult=new JSONObject(builder.toString()); final String accessToken=jsonResult.getString(JSON_ACCESS_TOKEN); final String expiresIn=jsonResult.getString(JSON_EXPIRES_IN); final String refreshToken; if (jsonResult.has(JSON_REFRESH_TOKEN)) { refreshToken=jsonResult.getString(JSON_REFRESH_TOKEN); } else { refreshToken=null; } try { int expiresInSeconds=Integer.valueOf(expiresIn); return new AuthenticationResult(accessToken refreshToken expiresInSeconds); } catch ( NumberFormatException e) { LogUtils.e(TAG e ""Invalid expiration %s"" expiresIn); throw new MessagingException(""Invalid number format"" e); } } catch ( JSONException e) { LogUtils.e(TAG e ""Invalid JSON""); throw new MessagingException(""Invalid JSON"" e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,requestAccess,"public AuthenticationResult  (final Context context final String providerId final String code) throws MessagingException  IOException { final OAuthProvider provider=AccountSettingsUtils.findOAuthProvider(context providerId); if (provider == null) { LogUtils.e(TAG ""invalid provider %s"" providerId); throw new AuthenticationFailedException(""Invalid provider"" + providerId); } final HttpPost post=new HttpPost(provider.tokenEndpoint); post.setHeader(""Content-Type"" ""application/x-www-form-urlencoded""); final List<BasicNameValuePair> nvp=new ArrayList<BasicNameValuePair>(); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CODE code)); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CLIENT_ID provider.clientId)); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CLIENT_SECRET provider.clientSecret)); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_REDIRECT_URI provider.redirectUri)); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_GRANT_TYPE ""authorization_code"")); try { post.setEntity(new UrlEncodedFormEntity(nvp)); } catch ( UnsupportedEncodingException e) { LogUtils.e(TAG e ""unsupported encoding""); throw new AuthenticationFailedException(""Unsupported encoding"" e); } return doRequest(post); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,requestRefresh,"public AuthenticationResult  (final Context context final String providerId final String refreshToken) throws MessagingException  IOException { final OAuthProvider provider=AccountSettingsUtils.findOAuthProvider(context providerId); if (provider == null) { LogUtils.e(TAG ""invalid provider %s"" providerId); throw new AuthenticationFailedException(""Invalid provider"" + providerId); } final HttpPost post=new HttpPost(provider.refreshEndpoint); post.setHeader(""Content-Type"" ""application/x-www-form-urlencoded""); final List<BasicNameValuePair> nvp=new ArrayList<BasicNameValuePair>(); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_REFRESH_TOKEN refreshToken)); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CLIENT_ID provider.clientId)); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CLIENT_SECRET provider.clientSecret)); nvp.add(new BasicNameValuePair(OAUTH_REQUEST_GRANT_TYPE ""refresh_token"")); try { post.setEntity(new UrlEncodedFormEntity(nvp)); } catch ( UnsupportedEncodingException e) { LogUtils.e(TAG e ""unsupported encoding""); throw new AuthenticationFailedException(""Unsuported encoding"" e); } return doRequest(post); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\internet\OAuthAuthenticator.java,toString,"@Override public String  (){ return ""result access "" + (mAccessToken == null ? ""null"" : ""[REDACTED]"") + "" refresh ""+ (mRefreshToken == null ? ""null"" : ""[REDACTED]"")+ "" expiresInSeconds ""+ mExpiresInSeconds; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapElement.java,checkNotDestroyed,"protected final void  (){ if (mDestroyed) { throw new RuntimeException(""Already destroyed""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapElement.java,destroy,public void  (){ mDestroyed=true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapElement.java,equalsForTest,public boolean  (ImapElement that){ if (that == null) { return false; } return this.getClass() == that.getClass(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapElement.java,isDestroyed,protected boolean  (){ return mDestroyed; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,add,"void  (ImapElement e){ if (e == null) { throw new RuntimeException(""Can't add null""); } mList.add(e); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,contains,public final boolean  (String s){ for (int i=0; i < size(); i++) { if (getStringOrEmpty(i).is(s)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,destroy,@Override public void  (){ if (mList != null) { for ( ImapElement e : mList) { e.destroy(); } mList=null; } super.destroy(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,equalsForTest,@Override public boolean  (ImapElement that){ if (!super.equalsForTest(that)) { return false; } ImapList thatList=(ImapList)that; if (size() != thatList.size()) { return false; } for (int i=0; i < size(); i++) { if (!mList.get(i).equalsForTest(thatList.ge
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,flatten,private final StringBuilder  (StringBuilder sb){ sb.append('['); for (int i=0; i < mList.size(); i++) { if (i > 0) { sb.append(' '); } final ImapElement e=getElementOrNone(i); if (e.isList()) { getListOrEmpty(i).flatten(sb); } else if (e.isString()) { sb.append(getStringOrEmpty(i).getString()); } } sb.append(']'); return sb; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,getElementOrNone,public final ImapElement  (int index){ return (index >= mList.size()) ? ImapElement.NONE : mList.get(index); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,getKeyedElementOrNull,final ImapElement  (String key boolean prefixMatch){ for (int i=1; i < size(); i+=2) { if (is(i - 1 key prefixMatch)) { return mList.get(i); } } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,getKeyedListOrEmpty,public final ImapList  (String key boolean prefixMatch){ ImapElement e=getKeyedElementOrNull(key prefixMatch); return (e != null) ? ((ImapList)e) : ImapList.EMPTY; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,getKeyedStringOrEmpty,public final ImapString  (String key boolean prefixMatch){ ImapElement e=getKeyedElementOrNull(key prefixMatch); return (e != null) ? ((ImapString)e) : ImapString.EMPTY; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,getListOrEmpty,public final ImapList  (int index){ ImapElement el=getElementOrNone(index); return el.isList() ? (ImapList)el : EMPTY; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,getStringOrEmpty,public final ImapString  (int index){ ImapElement el=getElementOrNone(index); return el.isString() ? (ImapString)el : ImapString.EMPTY; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,is,public final boolean  (int index String s boolean prefixMatch){ if (!prefixMatch) { return getStringOrEmpty(index).is(s); } else { return getStringOrEmpty(index).startsWith(s); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,isEmpty,public final boolean  (){ return size() == 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,isList,@Override public final boolean  (){ return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,isString,@Override public final boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,size,public final int  (){ return mList.size(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapList.java,toString,@Override public String  (){ return mList.toString(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,ImapMemoryLiteral," (FixedLengthInputStream in) throws IOException { mData=new byte[in.getLength()]; int pos=0; while (pos < mData.length) { int read=in.read(mData pos mData.length - pos); if (read < 0) { break; } pos+=read; } if (pos != mData.length) { LogUtils.w(Logging.LOG_TAG """"); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,destroy,@Override public void  (){ mData=null; super.destroy(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,getAsStream,@Override public InputStream  (){ return new ByteArrayInputStream(mData); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,getString,@Override public String  (){ return Utility.fromAscii(mData); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapMemoryLiteral.java,toString,"@Override public String  (){ return String.format(""{%d byte literal(memory)}"" mData.length); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,ImapSimpleString," (String string){ mString=(string != null) ? string : """"; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,destroy,@Override public void  (){ mString=null; super.destroy(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,getAsStream,@Override public InputStream  (){ return new ByteArrayInputStream(Utility.toAscii(mString)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,getString,@Override public String  (){ return mString; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapSimpleString.java,toString,"@Override public String  (){ return ""\"""" + mString + ""\""""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,ImapResponse, (String tag boolean isContinuationRequest){ mTag=tag; mIsContinuationRequest=isContinuationRequest; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,equalsForTest,@Override public boolean  (ImapElement that){ if (!super.equalsForTest(that)) { return false; } final ImapResponse thatResponse=(ImapResponse)that; if (mTag == null) { if (thatResponse.mTag != null) { return false; } } else { if (!mTag.equals(thatResponse
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,getAlertTextOrEmpty,public ImapString  (){ if (!getResponseCodeOrEmpty().is(ImapConstants.ALERT)) { return ImapString.EMPTY; } return getStringOrEmpty(2); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,getResponseCodeOrEmpty,public ImapString  (){ if (!isStatusResponse()) { return ImapString.EMPTY; } return getListOrEmpty(1).getStringOrEmpty(0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,getStatusOrEmpty,public ImapString  (){ if (!isStatusResponse()) { return ImapString.EMPTY; } return getStringOrEmpty(0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,getStatusResponseTextOrEmpty,public ImapString  (){ if (!isStatusResponse()) { return ImapString.EMPTY; } return getStringOrEmpty(getElementOrNone(1).isList() ? 2 : 1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,isBad,public boolean  (){ return is(0 ImapConstants.BAD); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,isContinuationRequest,public boolean  (){ return mIsContinuationRequest; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,isDataResponse,public final boolean  (int index String responseType){ return !isTagged() && getStringOrEmpty(index).is(responseType); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,isNo,public boolean  (){ return is(0 ImapConstants.NO); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,isOk,public boolean  (){ return is(0 ImapConstants.OK); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,isStatusResponse,public boolean  (){ return isStatusResponse(getStringOrEmpty(0).getString()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,isTagged,public boolean  (){ return mTag != null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponse.java,toString,"@Override public String  (){ String tag=mTag; if (isContinuationRequest()) { tag=""+""; } return ""#"" + tag + ""# ""+ super.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,ByeException,public  (){ super(MESSAGE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,ImapResponseParser, (InputStream in DiscourseLogger discourseLogger int literalKeepInMemoryThreshold){ if (DEBUG_LOG_RAW_STREAM && DebugUtils.DEBUG) { in=new LoggingInputStream(in); } mIn=new PeekableInputStream(in); mDiscourseLogger=discourseLogger; mLiteralKeepInMemoryThreshold=literalKeepInMemoryThreshold; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,destroyResponses,public void  (){ for ( ImapResponse r : mResponsesToDestroy) { r.destroy(); } mResponsesToDestroy.clear(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,expect,"void  (char expected) throws IOException { final int next=readByte(); if (expected != next) { throw new IOException(String.format(""Expected %04x (%c) but got %04x (%c)"" (int)expected expected next (char)next)); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,newEOSException,"private static IOException  (){ final String message=""End of stream reached""; if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG message); } return new IOException(message); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,onParseError,"private void  (Exception e){ try { for (int i=0; i < 4; i++) { int b=readByte(); if (b == -1 || b == '\n') { break; } } } catch ( IOException ignore) { } LogUtils.w(Logging.LOG_TAG ""Exception detected: "" + e.getMessage()); mDiscourseLogger.logLastDiscourse(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parseBareString,"private ImapString  () throws IOException  MessagingException { mParseBareString.setLength(0); for (; ; ) { final int ch=peek(); if (ch == '(' || ch == ')' || ch == '{' || ch == ' ' || ch == ']' || ch == '%' || ch == '""' || (0x00 <= ch && ch <= 0x1f) || ch == 0x7f) { if (mParseBareString.length() == 0) { throw new MessagingException(""Expected string  none found.""); } String s=mParseBareString.toString(); if (ImapConstants.NIL.equalsIgnoreCase(s)) { return ImapString.EMPTY; } return new ImapSimpleString(s); } else if (ch == '[') { mParseBareString.append((char)readByte()); mParseBareString.append(readUntil(']')); mParseBareString.append(']'); } else { mParseBareString.append((char)readByte()); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parseElement,"private ImapElement  () throws IOException  MessagingException { final int next=peek(); switch (next) { case '(': return parseList('(' ')'); case '[': return parseList('[' ']'); case '""': readByte(); return new ImapSimpleString(readUntil('""')); case '{': return parseLiteral(); case '\r': readByte(); expect('\n'); return null; case '\n': readByte(); return null; default : return parseBareString(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parseElements,private void  (ImapList list char end) throws IOException  MessagingException { for (; ; ) { for (; ; ) { final int next=peek(); if (next == end) { return; } if (next != ' ') { break; } readByte(); } final ImapElement el=parseElement(); if (el == null) { return; } list.add(el); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parseList,private ImapList  (char opening char closing) throws IOException  MessagingException { expect(opening); final ImapList list=new ImapList(); parseElements(list closing); expect(closing); return list; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parseLiteral,"private ImapString  () throws IOException  MessagingException { expect('{'); final int size; try { size=Integer.parseInt(readUntil('}')); } catch ( NumberFormatException nfe) { throw new MessagingException(""Invalid length in literal""); } if (size < 0) { throw new MessagingException(""Invalid negative length in literal""); } expect('\r'); expect('\n'); FixedLengthInputStream in=new FixedLengthInputStream(mIn size); if (size > mLiteralKeepInMemoryThreshold) { return new ImapTempFileLiteral(in); } else { return new ImapMemoryLiteral(in); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,parseResponse,private ImapResponse  () throws IOException  MessagingException { ImapResponse responseToDestroy=null; final ImapResponse responseToReturn; try { final int ch=peek(); if (ch == '+') { readByte(); expect(' '); responseToDestroy=new ImapResponse(null true); responseToDestroy.add(new ImapSimpleString(readUntilEol())); responseToReturn=responseToDestroy; responseToDestroy=null; } else { final String tag; if (ch == '*') { tag=null; readByte(); expect(' '); } else { tag=readUntil(' '); } responseToDestroy=new ImapResponse(tag false); final ImapString firstString=parseBareString(); responseToDestroy.add(firstString); if (peek() == ' ') { readByte(); if (responseToDestroy.isStatusResponse()) { final int next=peek(); if (next == '[') { responseToDestroy.add(parseList('[' ']')); if (peek() == ' ') { readByte(); } } String rest=readUntilEol(); if (!TextUtils.isEmpty(rest)) { responseToDestroy.add(new ImapSimpleString(rest)); } } else { parseElements(responseToDestroy '\0'); } } else { expect('\r'); expect('\n'); } responseToReturn=responseToDestroy; responseToDestroy=null; } } finally { if (responseToDestroy != null) { responseToDestroy.destroy(); } } return responseToReturn; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,peek,private int  () throws IOException { final int next=mIn.peek(); if (next == -1) { throw newEOSException(); } return next; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,readByte,private int  () throws IOException { int next=mIn.read(); if (next == -1) { throw newEOSException(); } mDiscourseLogger.addReceivedByte(next); return next; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,readResponse,"public ImapResponse  () throws IOException  MessagingException { ImapResponse response=null; try { response=parseResponse(); if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""<<< "" + response.toString()); } } catch ( RuntimeException e) { onParseError(e); throw e; } catch ( IOException e) { onParseError(e); throw e; } if (response.is(0 ImapConstants.BYE)) { LogUtils.w(Logging.LOG_TAG ByeException.MESSAGE); response.destroy(); throw new ByeException(); } mResponsesToDestroy.add(response); return response; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,readUntil,String  (char end) throws IOException { mBufferReadUntil.setLength(0); for (; ; ) { final int ch=readByte(); if (ch != end) { mBufferReadUntil.append((char)ch); } else { return mBufferReadUntil.toString(); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapResponseParser.java,readUntilEol,String  () throws IOException { String ret=readUntil('\r'); expect('\n'); return ret; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapString.java,equalsForTest,@Override public final boolean  (ImapElement that){ if (!super.equalsForTest(that)) { return false; } ImapString thatString=(ImapString)that; return getString().equals(thatString.getString()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapUtility.java,getImapRangeValues,"public static String[]  (String range){ ArrayList<String> list=new ArrayList<String>(); try { if (range != null) { int colonPos=range.indexOf(':'); if (colonPos > 0) { int first=Integer.parseInt(range.substring(0 colonPos)); int second=Integer.parseInt(range.substring(colonPos + 1)); if (first < second) { for (int i=first; i <= second; i++) { list.add(Integer.toString(i)); } } else { for (int i=first; i >= second; i--) { list.add(Integer.toString(i)); } } } } } catch ( NumberFormatException e) { LogUtils.d(Logging.LOG_TAG ""Invalid range value"" e); } String[] stringList=new String[list.size()]; return list.toArray(stringList); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapUtility.java,getImapSequenceValues,"public static String[]  (String set){ ArrayList<String> list=new ArrayList<String>(); if (set != null) { String[] setItems=set.split("" ""); for ( String item : setItems) { if (item.indexOf(':') == -1) { try { Integer.parseInt(item); list.add(item); } catch ( NumberFormatException e) { LogUtils.d(Logging.LOG_TAG ""Invalid UID value"" e); } } else { for ( String rangeItem : getImapRangeValues(item)) { list.add(rangeItem); } } } } String[] stringList=new String[list.size()]; return list.toArray(stringList); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapUtility.java,imapQuoted,"public static String  (String s){ String result=s.replaceAll(""\\\\"" ""\\\\\\\\""); result=result.replaceAll(""\"""" ""\\\\\""""); return ""\"""" + result + ""\""""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,ImapTempFileLiteral," (FixedLengthInputStream stream) throws IOException { mSize=stream.getLength(); mFile=File.createTempFile(""imap"" "".tmp"" TempDirectory.getTempDirectory()); OutputStream out=new FileOutputStream(mFile); IOUtils.copy(stream out); out.close(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,destroy,"@Override public void  (){ try { if (!isDestroyed() && mFile.exists()) { mFile.delete(); } } catch ( RuntimeException re) { LogUtils.w(Logging.LOG_TAG ""Failed to remove temp file: "" + re.getMessage()); } super.destroy(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,finalize,@Override protected void  () throws Throwable { try { destroy(); } finally { super.finalize(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,getAsStream,"@Override public InputStream  (){ checkNotDestroyed(); try { return new FileInputStream(mFile); } catch ( FileNotFoundException e) { LogUtils.w(Logging.LOG_TAG ""ImapTempFileLiteral: Temp file not found""); return new ByteArrayInputStream(new byte[0]); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,getString,@Override public String  (){ checkNotDestroyed(); try { byte[] bytes=IOUtils.toByteArray(getAsStream()); if (bytes.length > ImapResponseParser.LITERAL_KEEP_IN_MEMORY_THRESHOLD) { throw new IOException(); } return Utility.fromAscii(bytes); } catch ( IOExce
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,tempFileExistsForTest,public boolean  (){ return mFile.exists(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\imap\ImapTempFileLiteral.java,toString,"@Override public String  (){ return String.format(""{%d byte literal(file)}"" mSize); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,ImapFolder, (ImapStore store String name){ mStore=store; mName=name; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,appendMessage,"@Override public void  (final Context context final Message message final boolean noTimeout) throws MessagingException { checkOpen(); try { final File tempDir=context.getExternalCacheDir(); final File tempFile=File.createTempFile(""IMAPupsync"" "".eml"" tempD"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,canCreate,@Override public boolean  (FolderType type){ return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,checkOpen,"private void  () throws MessagingException { if (!isOpen()) { throw new MessagingException(""Folder "" + mName + "" is not open.""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,close,@Override public void  (boolean expunge){ mMessageCount=-1; synchronized (this) { mStore.poolConnection(mConnection); mConnection=null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,complexSearchForUids,String[]  (List<String> commands) throws MessagingException { checkOpen(); try { try { return getSearchUids(mConnection.executeComplexCommand(commands false)); } catch ( ImapException e) { return Utility.EMPTY_STRINGS; } catch ( IOException ioe) { throw ioExceptionHandler(mConnection ioe); } } finally { destroyResponses(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,ImapException,public  (String message String status String alertText String responseCode){ super(message); mStatus=status; mAlertText=alertText; mResponseCode=responseCode; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,ImapMessage, (String uid ImapFolder folder){ mUid=uid; mFolder=folder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,ImapStore,"private  (Context context Account account) throws MessagingException { mContext=context; mAccount=account; HostAuth recvAuth=account.getOrCreateHostAuthRecv(context); if (recvAuth == null) { throw new MessagingException(""No HostAuth in ImapStore?""); } mTransport=new MailTransport(context ""IMAP"" recvAuth); String[] userInfo=recvAuth.getLogin(); mUsername=userInfo[0]; mPassword=userInfo[1]; final Credential cred=recvAuth.getCredential(context); mUseOAuth=(cred != null); mPathPrefix=recvAuth.mDomain; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,addMailbox,private ImapFolder  (Context context long accountId String mailboxPath char delimiter boolean selectable Mailbox mailbox){ final int mailboxType; if (mailbox == null) { mailboxType=LegacyConversions.inferMailboxTypeFromName(context mailboxPath); mailbox=Mailbox.getMailboxForPath(context accountId mailboxPath); } else { mailboxType=mailbox.mType; } final ImapFolder folder=(ImapFolder)getFolder(mailboxPath); if (mailbox.isSaved()) { folder.mHash=mailbox.getHashes(); } updateMailbox(mailbox accountId mailboxPath delimiter selectable mailboxType); if (folder.mHash == null) { folder.mHash=mailbox.getHashes(); mailbox.mUiSyncStatus=EmailContent.SYNC_STATUS_INITIAL_SYNC_NEEDED; mailbox.save(mContext); } folder.mMailbox=mailbox; return folder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,canSyncFolderType,public boolean  (final int type){ switch (type) { case Mailbox.TYPE_INBOX: case Mailbox.TYPE_MAIL: case Mailbox.TYPE_SENT: case Mailbox.TYPE_TRASH: case Mailbox.TYPE_JUNK: return true; case Mailbox.TYPE_NONE: case Mailbox.TYPE_PARENT: case Mailbox.TYPE_DRAFTS: case Mailbox.TYPE_OUTBOX: case Mailbox.TYPE_SEARCH: case Mailbox.TYPE_STARRED: case Mailbox.TYPE_UNREAD: default : return false; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,checkSettings,@Override public Bundle  () throws MessagingException { int result=MessagingException.NO_ERROR; Bundle bundle=new Bundle(); ImapConnection connection=new ImapConnection(this); try { connection.open(); connection.close(); } catch ( IOException ioe) { bundl
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,cloneTransport,MailTransport  (){ return mTransport.clone(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,closeConnections,public void  (){ ImapConnection connection; while ((connection=mConnectionPool.poll()) != null) { connection.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,createHierarchy,@VisibleForTesting static void  (HashMap<String ImapFolder> mailboxes){ Set<String> pathnames=mailboxes.keySet(); for ( String path : pathnames) { final ImapFolder folder=mailboxes.get(path); final Mailbox mailbox=folder.mMailbox; int delimiterIdx=mailbox
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,decodeFolderName,static String  (String name String prefix){ String folder; folder=MODIFIED_UTF_7_CHARSET.decode(ByteBuffer.wrap(Utility.toAscii(name))).toString(); if ((prefix != null) && folder.startsWith(prefix)) { folder=folder.substring(prefix.length()); } return folder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,encodeFolderName,static String  (String name String prefix){ if (ImapConstants.INBOX.equalsIgnoreCase(name)) return name; if (prefix != null) { name=prefix + name; } ByteBuffer bb=MODIFIED_UTF_7_CHARSET.encode(name); byte[] b=new byte[bb.limit()]; bb.get(b); return Utility.fromAscii(b); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,ensurePrefixIsValid,void  (){ if (!TextUtils.isEmpty(mPathPrefix) && !TextUtils.isEmpty(mPathSeparator)) { if (!mPathPrefix.endsWith(mPathSeparator)) { mPathPrefix=mPathPrefix + mPathSeparator; } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getAlertText,public String  (){ return mAlertText; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getConnection,ImapConnection  (){ ImapConnection connection; while ((connection=mConnectionPool.poll()) != null) { try { connection.setStore(this); connection.executeSimpleCommand(ImapConstants.NOOP); break; } catch ( MessagingException e) { } catch ( IOException e) { } connection.close(); } if (connection == null) { connection=new ImapConnection(this); } return connection; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getConnectionPoolForTest,@VisibleForTesting Collection<ImapConnection>  (){ return mConnectionPool; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getContext,Context  (){ return mContext; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getFolder,@Override public Folder  (String name){ return new ImapFolder(this name); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getImapId,"public static String  (Context context String userName String host String capabilities){ synchronized (ImapStore.class) { if (sImapId == null) { TelephonyManager tm=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE); String networkOperator=tm.getNetworkOperatorName(); if (networkOperator == null) networkOperator=""""; sImapId=makeCommonImapId(context.getPackageName() Build.VERSION.RELEASE Build.VERSION.CODENAME Build.MODEL Build.ID Build.MANUFACTURER networkOperator); } } StringBuilder id=new StringBuilder(sImapId); String vendorId=VendorPolicyLoader.getInstance(context).getImapIdValues(userName host capabilities); if (vendorId != null) { id.append(' '); id.append(vendorId); } try { String devUID=Preferences.getPreferences(context).getDeviceUID(); MessageDigest messageDigest; messageDigest=MessageDigest.getInstance(""SHA-1""); messageDigest.update(userName.getBytes()); messageDigest.update(devUID.getBytes()); byte[] uid=messageDigest.digest(); String hexUid=Base64.encodeToString(uid Base64.NO_WRAP); id.append("" \""AGUID\"" \""""); id.append(hexUid); id.append('\""'); } catch ( NoSuchAlgorithmException e) { LogUtils.d(Logging.LOG_TAG ""couldn't obtain SHA-1 hash for device UID""); } return id.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getPassword,String  (){ return mPassword; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getResponseCode,public String  (){ return mResponseCode; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getStatus,public String  (){ return mStatus; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getUseOAuth,boolean  (){ return mUseOAuth; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,getUsername,String  (){ return mUsername; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,isUserPrefixSet,boolean  (){ return TextUtils.isEmpty(mPathSeparator) && !TextUtils.isEmpty(mPathPrefix); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,joinMessageUids,static String  (Message[] messages){ StringBuilder sb=new StringBuilder(); boolean notFirst=false; for ( Message m : messages) { if (notFirst) { sb.append(' '); } sb.append(m.getUid()); notFirst=true; } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,makeCommonImapId,"@VisibleForTesting static String  (String packageName String version String codeName String model String id String vendor String networkOperator){ Pattern p=Pattern.compile(""[^a-zA-Z0-9-_\\+=;:\\. / ]""); packageName=p.matcher(packageName).replaceAll(""""); "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,newInstance,public static Store  (Account account Context context) throws MessagingException { return new ImapStore(context account); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,parse,@Override public void  (InputStream in) throws IOException  MessagingException { super.parse(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,poolConnection,void  (ImapConnection connection){ if (connection != null) { connection.destroyResponses(); mConnectionPool.add(connection); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,saveMailboxList,private static void  (Context context HashMap<String ImapFolder> folderMap){ for ( ImapFolder imapFolder : folderMap.values()) { imapFolder.save(context); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,setFlag,@Override public void  (Flag flag boolean set) throws MessagingException { super.setFlag(flag set); mFolder.setFlags(new Message[]{this} new Flag[]{flag} set); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,setFlagInternal,public void  (Flag flag boolean set) throws MessagingException { super.setFlag(flag set); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,setPathPrefix,void  (String pathPrefix){ mPathPrefix=pathPrefix; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,setPathSeparator,void  (String pathSeparator){ mPathSeparator=pathSeparator; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,setSize,public void  (int size){ mSize=size; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,setTransportForTest,@VisibleForTesting void  (MailTransport testTransport){ mTransport=testTransport; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapStore.java,updateFolders,@Override public Folder[]  () throws MessagingException { ImapConnection connection=getConnection(); try { final HashMap<String ImapFolder> mailboxes=new HashMap<String ImapFolder>(); connection.executeSimpleCommand(ImapConstants.NOOP); String imapCommand
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,copyMessages,"@Override public void  (Message[] messages Folder folder MessageUpdateCallbacks callbacks) throws MessagingException { checkOpen(); try { List<ImapResponse> responseList=mConnection.executeSimpleCommand(String.format(Locale.US ImapConstants.UID_COPY + "" %"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,create,@Override public boolean  (FolderType type) throws MessagingException { ImapConnection connection=null; synchronized (this) { if (mConnection == null) { connection=mStore.getConnection(); } else { connection=mConnection; } } try { connection.executeSimple
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,createMessage,@Override public Message  (String uid){ return new ImapMessage(uid this); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,decodeBody,"private static Body  (InputStream in String contentTransferEncoding int size MessageRetrievalListener listener) throws IOException { in=MimeUtility.getInputStreamForContentTransferEncoding(in contentTransferEncoding); BinaryTempFileBody tempBody=new BinaryTempFileBody(); OutputStream out=tempBody.getOutputStream(); try { byte[] buffer=new byte[COPY_BUFFER_SIZE]; int n=0; int count=0; while (-1 != (n=in.read(buffer))) { out.write(buffer 0 n); count+=n; if (listener != null) { if (size == 0) { listener.loadAttachmentProgress((int)Math.ceil(100 * (1 - 1.0 / count))); } else { listener.loadAttachmentProgress(count * 100 / size); } } } } catch ( Base64DataException bde) { String warning=""\n\n"" + ImapService.getMessageDecodeErrorString(); out.write(warning.getBytes()); } finally { out.close(); } return tempBody; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,delete,"@Override public void  (boolean recurse){ throw new Error(""ImapStore.delete() not yet implemented""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,destroyResponses,private void  (){ if (mConnection != null) { mConnection.destroyResponses(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,doSelect,"private void  () throws IOException  MessagingException { final List<ImapResponse> responses=mConnection.executeSimpleCommand(String.format(Locale.US ImapConstants.SELECT + "" \""%s\"""" ImapStore.encodeFolderName(mName mStore.mPathPrefix))); mMode=OpenMode.READ_WRITE; int messageCount=-1; for ( ImapResponse response : responses) { if (response.isDataResponse(1 ImapConstants.EXISTS)) { messageCount=response.getStringOrEmpty(0).getNumberOrZero(); } else if (response.isOk()) { final ImapString responseCode=response.getResponseCodeOrEmpty(); if (responseCode.is(ImapConstants.READ_ONLY)) { mMode=OpenMode.READ_ONLY; } else if (responseCode.is(ImapConstants.READ_WRITE)) { mMode=OpenMode.READ_WRITE; } } else if (response.isTagged()) { throw new MessagingException(""Can't open mailbox: "" + response.getStatusResponseTextOrEmpty()); } } if (messageCount == -1) { throw new MessagingException(""Did not find message count during select""); } mMessageCount=messageCount; mExists=true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,equals,@Override public boolean  (Object o){ if (o instanceof ImapFolder) { return ((ImapFolder)o).mName.equals(mName); } return super.equals(o); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,exists,@Override public boolean  () throws MessagingException { if (mExists) { return true; } ImapConnection connection=null; synchronized (this) { if (mConnection == null) { connection=mStore.getConnection(); } else { connection=mConnection; } } try { connectio
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,expunge,@Override public Message[]  () throws MessagingException { checkOpen(); try { handleUntaggedResponses(mConnection.executeSimpleCommand(ImapConstants.EXPUNGE)); } catch ( IOException ioe) { throw ioExceptionHandler(mConnection ioe); } finally { destroyResp
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,fetch,"@Override public void  (Message[] messages FetchProfile fp MessageRetrievalListener listener) throws MessagingException { try { fetchInternal(messages fp listener); } catch ( RuntimeException e) { LogUtils.w(Logging.LOG_TAG ""Exception detected: "" + e.getM"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,fetchInternal,"public void  (Message[] messages FetchProfile fp MessageRetrievalListener listener) throws MessagingException { if (messages.length == 0) { return; } checkOpen(); HashMap<String Message> messageMap=new HashMap<String Message>(); for ( Message m : messages) { messageMap.put(m.getUid() m); } final LinkedHashSet<String> fetchFields=new LinkedHashSet<String>(); fetchFields.add(ImapConstants.UID); if (fp.contains(FetchProfile.Item.FLAGS)) { fetchFields.add(ImapConstants.FLAGS); } if (fp.contains(FetchProfile.Item.ENVELOPE)) { fetchFields.add(ImapConstants.INTERNALDATE); fetchFields.add(ImapConstants.RFC822_SIZE); fetchFields.add(ImapConstants.FETCH_FIELD_HEADERS); } if (fp.contains(FetchProfile.Item.STRUCTURE)) { fetchFields.add(ImapConstants.BODYSTRUCTURE); } if (fp.contains(FetchProfile.Item.BODY_SANE)) { fetchFields.add(ImapConstants.FETCH_FIELD_BODY_PEEK_SANE); } if (fp.contains(FetchProfile.Item.BODY)) { fetchFields.add(ImapConstants.FETCH_FIELD_BODY_PEEK); } final Part fetchPart=fp.getFirstPart(); if (fetchPart != null) { final String[] partIds=fetchPart.getHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA); if (partIds != null) { fetchFields.add(ImapConstants.FETCH_FIELD_BODY_PEEK_BARE + ""["" + partIds[0]+ ""]""); } } try { mConnection.sendCommand(String.format(Locale.US ImapConstants.UID_FETCH + "" %s (%s)"" ImapStore.joinMessageUids(messages) Utility.combine(fetchFields.toArray(new String[fetchFields.size()]) ' ')) false); ImapResponse response; do { response=null; try { response=mConnection.readResponse(); if (!response.isDataResponse(1 ImapConstants.FETCH)) { continue; } final ImapList fetchList=response.getListOrEmpty(2); final String uid=fetchList.getKeyedStringOrEmpty(ImapConstants.UID).getString(); if (TextUtils.isEmpty(uid)) continue; ImapMessage message=(ImapMessage)messageMap.get(uid); if (message == null) continue; if (fp.contains(FetchProfile.Item.FLAGS)) { final ImapList flags=fetchList.getKeyedListOrEmpty(ImapConstants.FLAGS); for (int i=0  count=flags.size(); i < count; i++) { final ImapString flag=flags.getStringOrEmpty(i); if (flag.is(ImapConstants.FLAG_DELETED)) { message.setFlagInternal(Flag.DELETED true); } else if (flag.is(ImapConstants.FLAG_ANSWERED)) { message.setFlagInternal(Flag.ANSWERED true); } else if (flag.is(ImapConstants.FLAG_SEEN)) { message.setFlagInternal(Flag.SEEN true); } else if (flag.is(ImapConstants.FLAG_FLAGGED)) { message.setFlagInternal(Flag.FLAGGED true); } } } if (fp.contains(FetchProfile.Item.ENVELOPE)) { final Date internalDate=fetchList.getKeyedStringOrEmpty(ImapConstants.INTERNALDATE).getDateOrNull(); final int size=fetchList.getKeyedStringOrEmpty(ImapConstants.RFC822_SIZE).getNumberOrZero(); final String header=fetchList.getKeyedStringOrEmpty(ImapConstants.BODY_BRACKET_HEADER true).getString(); message.setInternalDate(internalDate); message.setSize(size); message.parse(Utility.streamFromAsciiString(header)); } if (fp.contains(FetchProfile.Item.STRUCTURE)) { ImapList bs=fetchList.getKeyedListOrEmpty(ImapConstants.BODYSTRUCTURE); if (!bs.isEmpty()) { try { parseBodyStructure(bs message ImapConstants.TEXT); } catch ( MessagingException e) { if (Logging.LOGD) { LogUtils.v(Logging.LOG_TAG e ""Error handling message""); } message.setBody(null); } } } if (fp.contains(FetchProfile.Item.BODY) || fp.contains(FetchProfile.Item.BODY_SANE)) { ImapString body=fetchList.getKeyedStringOrEmpty(""BODY[]"" true); InputStream bodyStream=body.getAsStream(); message.parse(bodyStream); } if (fetchPart != null) { InputStream bodyStream=fetchList.getKeyedStringOrEmpty(""BODY["" true).getAsStream(); String encodings[]=fetchPart.getHeader(MimeHeader.HEADER_CONTENT_TRANSFER_ENCODING); String contentTransferEncoding=null; if (encodings != null && encodings.length > 0) { contentTransferEncoding=encodings[0]; } else { contentTransferEncoding=""7bit""; } try { fetchPart.setBody(decodeBody(bodyStream contentTransferEncoding fetchPart.getSize() listener)); } catch ( Exception e) { LogUtils.e(Logging.LOG_TAG ""Error fetching body %s"" e); } } if (listener != null) { listener.messageRetrieved(message); } } finally { destroyResponses(); } } while (!response.isTagged()); } catch ( IOException ioe) { throw ioExceptionHandler(mConnection ioe); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,generateDateRangeCommand,"private String  (final long startDate final long endDate boolean useQuotes) throws MessagingException { final SimpleDateFormat formatter=new SimpleDateFormat(""dd-LLL-yyyy"" Locale.US); formatter.setTimeZone(TimeZone.getTimeZone(""UTC"")); final String sinceDateStr=formatter.format(endDate); StringBuilder queryParam=new StringBuilder(); queryParam.append(""1:* ""); if (startDate != 0) { final String beforeDateStr=formatter.format(startDate); if (startDate < endDate) { throw new MessagingException(String.format(""Invalid date range: %s - %s"" sinceDateStr beforeDateStr)); } queryParam.append(""BEFORE ""); if (useQuotes) queryParam.append('\""'); queryParam.append(beforeDateStr); if (useQuotes) queryParam.append('\""'); queryParam.append("" ""); } queryParam.append(""SINCE ""); if (useQuotes) queryParam.append('\""'); queryParam.append(sinceDateStr); if (useQuotes) queryParam.append('\""'); return queryParam.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getMessage,"@Override @VisibleForTesting public Message  (String uid) throws MessagingException { checkOpen(); final String[] uids=searchForUids(ImapConstants.UID + "" "" + uid); for (int i=0; i < uids.length; i++) { if (uids[i].equals(uid)) { return new ImapMessage(ui"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getMessageCount,@Override public int  (){ return mMessageCount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getMessages,"@Override @VisibleForTesting public Message[]  (String[] uids MessageRetrievalListener listener) throws MessagingException { if (uids == null) { uids=searchForUids(""1:* NOT DELETED""); } return getMessagesInternal(uids listener); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getMessagesInternal,public Message[]  (String[] uids MessageRetrievalListener listener){ final ArrayList<Message> messages=new ArrayList<Message>(uids.length); for (int i=0; i < uids.length; i++) { final String uid=uids[i]; final ImapMessage message=new ImapMessage(uid this); messages.add(message); if (listener != null) { listener.messageRetrieved(message); } } return messages.toArray(Message.EMPTY_ARRAY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getMode,@Override public OpenMode  (){ return mMode; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getName,@Override public String  (){ return mName; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getPermanentFlags,@Override public Flag[]  (){ return PERMANENT_FLAGS; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getSearchUids,String[]  (List<ImapResponse> responses){ final ArrayList<String> uids=new ArrayList<String>(); for ( ImapResponse response : responses) { if (!response.isDataResponse(0 ImapConstants.SEARCH)) { continue; } for (int i=1; i < response.size(); i++) { ImapString s=response.getStringOrEmpty(i); if (s.isString()) { uids.add(s.getString()); } } } return uids.toArray(Utility.EMPTY_STRINGS); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,getUnreadMessageCount,"@Override public int  () throws MessagingException { checkOpen(); try { int unreadMessageCount=0; final List<ImapResponse> responses=mConnection.executeSimpleCommand(String.format(Locale.US ImapConstants.STATUS + "" \""%s\"" ("" + ImapConstants.UNSEEN+ "")"" Im"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,handleUntaggedResponse,private void  (ImapResponse response){ if (response.isDataResponse(1 ImapConstants.EXISTS)) { mMessageCount=response.getStringOrEmpty(0).getNumberOrZero(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,handleUntaggedResponses,private void  (List<ImapResponse> responses){ for ( ImapResponse response : responses) { handleUntaggedResponse(response); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,ioExceptionHandler,"private MessagingException  (ImapConnection connection IOException ioe){ if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""IO Exception detected: "" ioe); } connection.close(); if (connection == mConnection) { mConnection=null; close(false); } return new MessagingException(MessagingException.IOERROR ""IO Error"" ioe); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,isAsciiString,@VisibleForTesting protected static boolean  (String str){ int len=str.length(); for (int i=0; i < len; i++) { char c=str.charAt(i); if (c >= 128) return false; } return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,isOpen,@Override @VisibleForTesting public boolean  (){ return mExists && mConnection != null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,open,@Override public void  (OpenMode mode) throws MessagingException { try { if (isOpen()) { if (mMode == mode) { try { mConnection.executeSimpleCommand(ImapConstants.NOOP); return; } catch ( IOException ioe) { ioExceptionHandler(mConnection ioe); } finally {
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,parseBodyStructure,"private static void  (ImapList bs Part part String id) throws MessagingException { if (bs.getElementOrNone(0).isList()) { MimeMultipart mp=new MimeMultipart(); for (int i=0  count=bs.size(); i < count; i++) { ImapElement e=bs.getElementOrNone(i); if (e.isList()) { MimeBodyPart bp=new MimeBodyPart(); if (id.equals(ImapConstants.TEXT)) { parseBodyStructure(bs.getListOrEmpty(i) bp Integer.toString(i + 1)); } else { parseBodyStructure(bs.getListOrEmpty(i) bp id + ""."" + (i + 1)); } mp.addBodyPart(bp); } else { if (e.isString()) { mp.setSubType(bs.getStringOrEmpty(i).getString().toLowerCase(Locale.US)); } break; } } part.setBody(mp); } else { final ImapString type=bs.getStringOrEmpty(0); final ImapString subType=bs.getStringOrEmpty(1); final String mimeType=(type.getString() + ""/"" + subType.getString()).toLowerCase(Locale.US); final ImapList bodyParams=bs.getListOrEmpty(2); final ImapString cid=bs.getStringOrEmpty(3); final ImapString encoding=bs.getStringOrEmpty(5); final int size=bs.getStringOrEmpty(6).getNumberOrZero(); if (MimeUtility.mimeTypeMatches(mimeType MimeUtility.MIME_TYPE_RFC822)) { throw new MessagingException(""BODYSTRUCTURE "" + MimeUtility.MIME_TYPE_RFC822 + "" not yet supported.""); } final StringBuilder contentType=new StringBuilder(mimeType); for (int i=1  count=bodyParams.size(); i < count; i+=2) { contentType.append(String.format("";\n %s=\""%s\"""" bodyParams.getStringOrEmpty(i - 1).getString() bodyParams.getStringOrEmpty(i).getString())); } part.setHeader(MimeHeader.HEADER_CONTENT_TYPE contentType.toString()); final ImapList bodyDisposition; if (type.is(ImapConstants.TEXT) && bs.getElementOrNone(9).isList()) { bodyDisposition=bs.getListOrEmpty(9); } else { bodyDisposition=bs.getListOrEmpty(8); } final StringBuilder contentDisposition=new StringBuilder(); if (bodyDisposition.size() > 0) { final String bodyDisposition0Str=bodyDisposition.getStringOrEmpty(0).getString().toLowerCase(Locale.US); if (!TextUtils.isEmpty(bodyDisposition0Str)) { contentDisposition.append(bodyDisposition0Str); } final ImapList bodyDispositionParams=bodyDisposition.getListOrEmpty(1); if (!bodyDispositionParams.isEmpty()) { for (int i=1  count=bodyDispositionParams.size(); i < count; i+=2) { contentDisposition.append(String.format(Locale.US "";\n %s=\""%s\"""" bodyDispositionParams.getStringOrEmpty(i - 1).getString().toLowerCase(Locale.US) bodyDispositionParams.getStringOrEmpty(i).getString())); } } } if ((size > 0) && (MimeUtility.getHeaderParameter(contentDisposition.toString() ""size"") == null)) { contentDisposition.append(String.format(Locale.US "";\n size=%d"" size)); } if (contentDisposition.length() > 0) { part.setHeader(MimeHeader.HEADER_CONTENT_DISPOSITION contentDisposition.toString()); } if (!encoding.isEmpty()) { part.setHeader(MimeHeader.HEADER_CONTENT_TRANSFER_ENCODING encoding.getString()); } if (!cid.isEmpty()) { part.setHeader(MimeHeader.HEADER_CONTENT_ID cid.getString()); } if (size > 0) { if (part instanceof ImapMessage) { ((ImapMessage)part).setSize(size); } else if (part instanceof MimeBodyPart) { ((MimeBodyPart)part).setSize(size); } else { throw new MessagingException(""Unknown part type "" + part.toString()); } } part.setHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA id); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,save,void  (Context context){ final Mailbox mailbox=mMailbox; if (!mailbox.isSaved()) { mailbox.save(context); mHash=mailbox.getHashes(); } else { Object[] hash=mailbox.getHashes(); if (!Arrays.equals(mHash hash)) { mailbox.update(context mailbox.toContentValues()); mHash=hash; } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,searchForUids,"@VisibleForTesting String[]  (String searchCriteria boolean swallowException) throws MessagingException { checkOpen(); try { try { final String command=ImapConstants.UID_SEARCH + "" "" + searchCriteria; final String[] result=getSearchUids(mConnection.execut"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapFolder.java,setFlags,"@Override public void  (Message[] messages Flag[] flags boolean value) throws MessagingException { checkOpen(); String allFlags=""""; if (flags.length > 0) { StringBuilder flagList=new StringBuilder(); for (int i=0  count=flags.length; i < count; i++) { Fla"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,ImapConnection, (ImapStore store){ setStore(store); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,close,void  (){ if (mTransport != null) { mTransport.close(); mTransport=null; } destroyResponses(); mParser=null; mImapStore=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,createParser,private void  (){ destroyResponses(); mParser=new ImapResponseParser(mTransport.getInputStream() mDiscourse); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,destroyResponses,void  (){ if (mParser != null) { mParser.destroyResponses(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,doGetNamespace,"private void  (boolean hasNamespaceCapability) throws MessagingException { if (hasNamespaceCapability && !mImapStore.isUserPrefixSet()) { List<ImapResponse> responseList=Collections.emptyList(); try { responseList=executeSimpleCommand(ImapConstants.NAMESPACE); } catch ( ImapException ie) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ie ""ImapException""); } } catch ( IOException ioe) { } for ( ImapResponse response : responseList) { if (response.isDataResponse(0 ImapConstants.NAMESPACE)) { ImapList namespaceList=response.getListOrEmpty(1); ImapList namespace=namespaceList.getListOrEmpty(0); String namespaceString=namespace.getStringOrEmpty(0).getString(); if (!TextUtils.isEmpty(namespaceString)) { mImapStore.setPathPrefix(ImapStore.decodeFolderName(namespaceString null)); mImapStore.setPathSeparator(namespace.getStringOrEmpty(1).getString()); } } } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,doGetPathSeparator,"private void  () throws MessagingException { if (mImapStore.isUserPrefixSet()) { List<ImapResponse> responseList=Collections.emptyList(); try { responseList=executeSimpleCommand(ImapConstants.LIST + "" \""\"" \""\""""); } catch ( ImapException ie) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ie ""ImapException""); } } catch ( IOException ioe) { } for ( ImapResponse response : responseList) { if (response.isDataResponse(0 ImapConstants.LIST)) { mImapStore.setPathSeparator(response.getStringOrEmpty(2).getString()); } } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,doLogin,"private void  () throws IOException  MessagingException  AuthenticationFailedException { try { if (mImapStore.getUseOAuth()) { doSASLAuth(); } else { executeSimpleCommand(getLoginPhrase() true); } } catch ( ImapException ie) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ie ""ImapException""); } final String status=ie.getStatus(); final String code=ie.getResponseCode(); final String alertText=ie.getAlertText(); if (ImapConstants.AUTHENTICATIONFAILED.equals(code) || ImapConstants.EXPIRED.equals(code) || (ImapConstants.NO.equals(status) && TextUtils.isEmpty(code))) { throw new AuthenticationFailedException(alertText ie); } throw new MessagingException(alertText ie); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,doSASLAuth,"private void  () throws MessagingException  IOException { LogUtils.d(Logging.LOG_TAG ""doSASLAuth""); ImapResponse response=getOAuthResponse(); if (!response.isOk()) { LogUtils.d(Logging.LOG_TAG ""failed to authenticate  retrying""); destroyResponses(); mLoginPhrase=null; if (mTransport != null) { mTransport.close(); mTransport=null; } response=getOAuthResponse(); if (!response.isOk()) { LogUtils.d(Logging.LOG_TAG ""failed to authenticate  giving up""); destroyResponses(); throw new AuthenticationFailedException(""OAuth failed after refresh""); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,doSendId,"private void  (boolean hasIdCapability String capabilities) throws MessagingException { if (!hasIdCapability) return; String host=mTransport.getHost(); if (host.toLowerCase().endsWith("".secureserver.net"")) return; String mUserAgent=ImapStore.getImapId(mImapStore.getContext() mImapStore.getUsername() host capabilities); if (mUserAgent != null) { mIdPhrase=ImapConstants.ID + "" ("" + mUserAgent+ "")""; } else if (DEBUG_FORCE_SEND_ID) { mIdPhrase=ImapConstants.ID + "" "" + ImapConstants.NIL; } if (mIdPhrase != null) { try { executeSimpleCommand(mIdPhrase); } catch ( ImapException ie) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ie ""ImapException""); } } catch ( IOException ioe) { } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,doStartTls,"private ImapResponse  (boolean hasStartTlsCapability) throws IOException  MessagingException { if (mTransport.canTryTlsSecurity()) { if (hasStartTlsCapability) { executeSimpleCommand(ImapConstants.STARTTLS); mTransport.reopenTls(); createParser(); return (queryCapabilities()); } else { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""TLS not supported but required""); } throw new MessagingException(MessagingException.TLS_REQUIRED); } } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,executeComplexCommand,List<ImapResponse>  (List<String> commands boolean sensitive) throws IOException  MessagingException { sendComplexCommand(commands sensitive); return getCommandResponses(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,executeSimpleCommand,List<ImapResponse>  (String command boolean sensitive) throws IOException  MessagingException { sendCommand(command sensitive); return getCommandResponses(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,getCommandResponses,List<ImapResponse>  () throws IOException  MessagingException { final List<ImapResponse> responses=new ArrayList<ImapResponse>(); ImapResponse response; do { response=mParser.readResponse(); responses.add(response); } while (!response.isTagged()); if (!response.isOk()) { final String toString=response.toString(); final String status=response.getStatusOrEmpty().getString(); final String alert=response.getAlertTextOrEmpty().getString(); final String responseCode=response.getResponseCodeOrEmpty().getString(); destroyResponses(); if (ImapConstants.UNAVAILABLE.equals(responseCode)) { throw new MessagingException(MessagingException.SERVER_ERROR alert); } throw new ImapException(toString status alert responseCode); } return responses; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,getLoginPhrase,"String  () throws MessagingException  IOException { if (mImapStore.getUseOAuth()) { final String accessToken=AuthenticationCache.getInstance().retrieveAccessToken(mImapStore.getContext() mImapStore.getAccount()); if (mLoginPhrase == null || !TextUtils.equals(mAccessToken accessToken)) { mAccessToken=accessToken; final String oauthCode=""user="" + mImapStore.getUsername() + '\001'+ ""auth=Bearer ""+ mAccessToken+ '\001'+ '\001'; mLoginPhrase=ImapConstants.AUTHENTICATE + "" "" + ImapConstants.XOAUTH2+ "" ""+ Base64.encodeToString(oauthCode.getBytes() Base64.NO_WRAP); } } else { if (mLoginPhrase == null) { if (mImapStore.getUsername() != null && mImapStore.getPassword() != null) { mLoginPhrase=ImapConstants.LOGIN + "" "" + mImapStore.getUsername()+ "" ""+ ImapUtility.imapQuoted(mImapStore.getPassword()); } } } return mLoginPhrase; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,getOAuthResponse,"private ImapResponse  () throws IOException  MessagingException { ImapResponse response; sendCommandInternal(getLoginPhrase() true); do { response=mParser.readResponse(); } while (!response.isTagged() && !response.isContinuationRequest()); if (response.isContinuationRequest()) { sendCommandInternal("""" true); response=readResponse(); } final String responseCode=response.getResponseCodeOrEmpty().getString(); if (ImapConstants.UNAVAILABLE.equals(responseCode)) { final String alert=response.getAlertTextOrEmpty().getString(); throw new MessagingException(MessagingException.SERVER_ERROR alert); } return response; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,isCapable,private boolean  (int capability){ return (mCapabilities & capability) != 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,isTransportOpenForTest,boolean  (){ return mTransport != null && mTransport.isOpen(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,logLastDiscourse,void  (){ mDiscourse.logLastDiscourse(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,open,"void  () throws IOException  MessagingException { if (mTransport != null && mTransport.isOpen()) { return; } try { if (mTransport == null) { mTransport=mImapStore.cloneTransport(); } mTransport.open(); createParser(); mParser.readResponse(); ImapResponse capabilities=queryCapabilities(); boolean hasStartTlsCapability=capabilities.contains(ImapConstants.STARTTLS); ImapResponse newCapabilities=doStartTls(hasStartTlsCapability); if (newCapabilities != null) { capabilities=newCapabilities; } setCapabilities(capabilities); String capabilityString=capabilities.flatten(); doSendId(isCapable(CAPABILITY_ID) capabilityString); doLogin(); doGetNamespace(isCapable(CAPABILITY_NAMESPACE)); doGetPathSeparator(); mImapStore.ensurePrefixIsValid(); } catch ( SSLException e) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG e ""SSLException""); } throw new CertificateValidationException(e.getMessage() e); } catch ( IOException ioe) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ioe ""IOException""); } throw ioe; } finally { destroyResponses(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,queryCapabilities,"private ImapResponse  () throws IOException  MessagingException { ImapResponse capabilityResponse=null; for ( ImapResponse r : executeSimpleCommand(ImapConstants.CAPABILITY)) { if (r.is(0 ImapConstants.CAPABILITY)) { capabilityResponse=r; break; } } if (capabilityResponse == null) { throw new MessagingException(""Invalid CAPABILITY response received""); } return capabilityResponse; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,readResponse,ImapResponse  () throws IOException  MessagingException { return mParser.readResponse(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,sendCommand,"String  (String command boolean sensitive) throws MessagingException  IOException { LogUtils.d(Logging.LOG_TAG ""sendCommand %s"" (sensitive ? IMAP_REDACTED_LOG : command)); open(); return sendCommandInternal(command sensitive); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,sendCommandInternal,"String  (String command boolean sensitive) throws MessagingException  IOException { if (mTransport == null) { throw new IOException(""Null transport""); } String tag=Integer.toString(mNextCommandTag.incrementAndGet()); String commandToSend=tag + "" "" + command; mTransport.writeLine(commandToSend sensitive ? IMAP_REDACTED_LOG : null); mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend); return tag; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,sendComplexCommand,"String  (List<String> commands boolean sensitive) throws MessagingException  IOException { open(); String tag=Integer.toString(mNextCommandTag.incrementAndGet()); int len=commands.size(); for (int i=0; i < len; i++) { String commandToSend=commands.get(i); if (i == 0) { commandToSend=tag + "" "" + commandToSend; } else { ImapResponse response=readResponse(); if (!response.isContinuationRequest()) { throw new MessagingException(""Expected continuation request""); } } mTransport.writeLine(commandToSend null); mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend); } return tag; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,setCapabilities,private void  (ImapResponse capabilities){ if (capabilities.contains(ImapConstants.ID)) { mCapabilities|=CAPABILITY_ID; } if (capabilities.contains(ImapConstants.NAMESPACE)) { mCapabilities|=CAPABILITY_NAMESPACE; } if (capabilities.contains(ImapConstants.UIDPLUS)) { mCapabilities|=CAPABILITY_UIDPLUS; } if (capabilities.contains(ImapConstants.STARTTLS)) { mCapabilities|=CAPABILITY_STARTTLS; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ImapConnection.java,setStore,void  (ImapStore store){ mImapStore=store; mLoginPhrase=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\Store.java,autoDiscover,public Bundle  (Context context String emailAddress String password) throws MessagingException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\Store.java,canSyncFolderType,public boolean  (final int type){ return (type == Mailbox.TYPE_INBOX); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,Pop3Folder,public  (String name){ if (name.equalsIgnoreCase(POP3_MAILBOX_NAME)) { mName=POP3_MAILBOX_NAME; } else { mName=name; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,Pop3Message,public  (String uid Pop3Folder folder){ mUid=uid; mFolder=folder; mSize=-1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,Pop3ResponseInputStream,public  (InputStream in){ mIn=in; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,Pop3Store,"private  (Context context Account account) throws MessagingException { mContext=context; mAccount=account; HostAuth recvAuth=account.getOrCreateHostAuthRecv(context); mTransport=new MailTransport(context ""POP3"" recvAuth); String[] userInfoParts=recvAuth.getLogin(); mUsername=userInfoParts[0]; mPassword=userInfoParts[1]; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,UidlParser,public  (){ mErr=true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,canCreate,@Override public boolean  (FolderType type){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,checkSettings,"public Bundle  () throws MessagingException { Bundle bundle=new Bundle(); int result=MessagingException.NO_ERROR; try { UidlParser parser=new UidlParser(); executeSimpleCommand(""UIDL""); String response; while ((response=mTransport.readLine(false)) != null) { parser.parseMultiLine(response); if (parser.mEndOfMessage) { break; } } } catch ( IOException ioe) { mTransport.close(); result=MessagingException.IOERROR; bundle.putString(EmailServiceProxy.VALIDATE_BUNDLE_ERROR_MESSAGE ioe.getMessage()); } bundle.putInt(EmailServiceProxy.VALIDATE_BUNDLE_RESULT_CODE result); return bundle; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,close,"@Override public void  (boolean expunge){ try { executeSimpleCommand(""QUIT""); } catch ( Exception e) { } mTransport.close(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,copyMessages,"@Override public void  (Message[] msgs Folder folder MessageUpdateCallbacks callbacks){ throw new UnsupportedOperationException(""copyMessages is not supported in POP3""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,create,@Override public boolean  (FolderType type){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,createMessage,@Override public Message  (String uid){ return new Pop3Message(uid this); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,deleteMessage,public void  (Message message) throws MessagingException { mOneMessage[0]=message; setFlags(mOneMessage PERMANENT_FLAGS true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,equals,@Override public boolean  (Object o){ if (o instanceof Pop3Folder) { return ((Pop3Folder)o).mName.equals(mName); } return super.equals(o); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,executeSensitiveCommand,private String  (String command String sensitiveReplacement) throws IOException  MessagingException { open(OpenMode.READ_WRITE); if (command != null) { mTransport.writeLine(command sensitiveReplacement); } String response=mTransport.readLine(true); if (response.length() > 1 && response.charAt(0) == '-') { throw new MessagingException(response); } return response; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,executeSimpleCommand,private String  (String command) throws IOException  MessagingException { return executeSensitiveCommand(command null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,exists,@Override public boolean  (){ return mName.equalsIgnoreCase(POP3_MAILBOX_NAME); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,expunge,@Override public Message[]  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,fetch,"@Override public void  (Message[] messages FetchProfile fp MessageRetrievalListener listener) throws MessagingException { throw new UnsupportedOperationException(""Pop3Folder.fetch(Message[]  FetchProfile  MessageRetrievalListener)""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,fetchBody,"public void  (Pop3Message message int lines EOLConvertingInputStream.Callback callback) throws IOException  MessagingException { String response=null; int messageId=mUidToMsgNumMap.get(message.getUid()); if (lines == -1) { response=executeSimpleCommand(String.format(Locale.US ""RETR %d"" messageId)); } else { try { response=executeSimpleCommand(String.format(Locale.US ""TOP %d %d"" messageId lines)); } catch ( MessagingException me) { try { response=executeSimpleCommand(String.format(Locale.US ""RETR %d"" messageId)); } catch ( MessagingException e) { LogUtils.w(Logging.LOG_TAG ""Can't read message "" + messageId); } } } if (response != null) { try { int ok=response.indexOf(""OK""); if (ok > 0) { try { int start=ok + 3; if (start > response.length()) { LogUtils.e(Logging.LOG_TAG ""No body length supplied""); message.setSize(0); } else { int end=response.indexOf("" "" start); final String intString; if (end > 0) { intString=response.substring(start end); } else { intString=response.substring(start); } message.setSize(Integer.parseInt(intString)); } } catch ( NumberFormatException e) { } } InputStream in=mTransport.getInputStream(); if (DEBUG_LOG_RAW_STREAM && DebugUtils.DEBUG) { in=new LoggingInputStream(in); } message.parse(new Pop3ResponseInputStream(in) callback); } catch ( MessagingException me) { if (lines == -1) { throw me; } } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getCapabilities,"private Pop3Capabilities  () throws IOException { Pop3Capabilities capabilities=new Pop3Capabilities(); try { String response=executeSimpleCommand(""CAPA""); while ((response=mTransport.readLine(true)) != null) { if (response.equals(""."")) { break; } else if (response.equalsIgnoreCase(""STLS"")) { capabilities.stls=true; } } } catch ( MessagingException me) { } return capabilities; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getFolder,@Override public Folder  (String name){ Folder folder=mFolders.get(name); if (folder == null) { folder=new Pop3Folder(name); mFolders.put(folder.getName() folder); } return folder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getMessage,"@Override public Message  (String uid) throws MessagingException { if (mUidToMsgNumMap.size() == 0) { try { indexMsgNums(1 mMessageCount); } catch ( IOException ioe) { mTransport.close(); if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""Unable to index"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getMessageCount,@Override public int  (){ return mMessageCount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getMessages,@Override public Message[]  (SearchParams params MessageRetrievalListener listener){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getMode,@Override public OpenMode  (){ return OpenMode.READ_WRITE; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getName,@Override public String  (){ return mName; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getPermanentFlags,@Override public Flag[]  (){ return PERMANENT_FLAGS; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,getUnreadMessageCount,@Override public int  (){ return -1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,indexMessage,private void  (int msgNum Pop3Message message){ mMsgNumToMsgMap.put(msgNum message); mUidToMsgMap.put(message.getUid() message); mUidToMsgNumMap.put(message.getUid() msgNum); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,indexMsgNums,"private void  (int start int end) throws MessagingException  IOException { if (!mMsgNumToMsgMap.isEmpty()) { return; } UidlParser parser=new UidlParser(); if (DEBUG_FORCE_SINGLE_LINE_UIDL || (mMessageCount > 5000)) { for (int msgNum=start; msgNum <= end; msgNum++) { Pop3Message message=mMsgNumToMsgMap.get(msgNum); if (message == null) { String response=executeSimpleCommand(""UIDL "" + msgNum); if (!parser.parseSingleLine(response)) { throw new IOException(); } message=new Pop3Message(parser.mUniqueId this); indexMessage(msgNum message); } } } else { String response=executeSimpleCommand(""UIDL""); while ((response=mTransport.readLine(false)) != null) { if (!parser.parseMultiLine(response)) { throw new IOException(); } if (parser.mEndOfMessage) { break; } int msgNum=parser.mMessageNumber; if (msgNum >= start && msgNum <= end) { Pop3Message message=mMsgNumToMsgMap.get(msgNum); if (message == null) { message=new Pop3Message(parser.mUniqueId this); indexMessage(msgNum message); } } } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,isOpen,@Override @VisibleForTesting public boolean  (){ return mTransport.isOpen(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,newInstance,public static Store  (Account account Context context) throws MessagingException { return new Pop3Store(context account); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,open,"@Override public synchronized void  (OpenMode mode) throws MessagingException { if (mTransport.isOpen()) { return; } if (!mName.equalsIgnoreCase(POP3_MAILBOX_NAME)) { throw new MessagingException(""Folder does not exist""); } try { mTransport.open(); execut"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,parse,@Override public void  (InputStream in) throws IOException  MessagingException { super.parse(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,parseMultiLine,"public boolean  (String response){ mErr=false; if (response == null || response.length() == 0) { return false; } char first=response.charAt(0); if (first == '.') { mEndOfMessage=true; return true; } else { String[] uidParts=response.split("" +""); if (uidParts.length >= 2) { try { mMessageNumber=Integer.parseInt(uidParts[0]); } catch ( NumberFormatException nfe) { return false; } mUniqueId=uidParts[1]; mEndOfMessage=false; return true; } } return false; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,parseSingleLine,"public boolean  (String response){ mErr=false; if (response == null || response.length() == 0) { return false; } char first=response.charAt(0); if (first == '+') { String[] uidParts=response.split("" +""); if (uidParts.length >= 3) { try { mMessageNumber=Integer.parseInt(uidParts[1]); } catch ( NumberFormatException nfe) { return false; } mUniqueId=uidParts[2]; mEndOfMessage=true; return true; } } else if (first == '-') { mErr=true; return true; } return false; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,read,@Override public int  () throws IOException { if (mFinished) { return -1; } int d=mIn.read(); if (mStartOfLine && d == '.') { d=mIn.read(); if (d == '\r') { mFinished=true; mIn.read(); return -1; } } mStartOfLine=(d == '\n'); return d; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,setFlag,@Override public void  (Flag flag boolean set) throws MessagingException { super.setFlag(flag set); mFolder.setFlags(new Message[]{this} new Flag[]{flag} set); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,setFlags,@Override public void  (Message[] messages Flag[] flags boolean value) throws MessagingException { if (!value || !Utility.arrayContains(flags Flag.DELETED)) { return; } try { for ( Message message : messages) { try { String uid=message.getUid(); int msgNu
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,setSize,public void  (int size){ mSize=size; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,setTransport,void  (MailTransport testTransport){ mTransport=testTransport; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,toString,"@Override public String  (){ return String.format(""STLS %b"" stls); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\Pop3Store.java,updateFolders,@Override public Folder[]  (){ Mailbox mailbox=Mailbox.restoreMailboxOfType(mContext mAccount.mId Mailbox.TYPE_INBOX); if (mailbox == null) { mailbox=Mailbox.newSystemMailbox(mContext mAccount.mId Mailbox.TYPE_INBOX); } if (mailbox.isSaved()) { mailbox.up
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,ServiceStore,public  (Account account Context context) throws MessagingException { mContext=context; mHostAuth=account.getOrCreateHostAuthRecv(mContext); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,autoDiscover,@Override public Bundle  (Context context String username String password){ try { return getService().autoDiscover(username password); } catch ( RemoteException e) { return null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,checkSettings,@Override public Bundle  () throws MessagingException { try { IEmailService svc=getService(); if (svc instanceof EmailServiceProxy) { ((EmailServiceProxy)svc).setTimeout(90); } HostAuthCompat hostAuthCom=new HostAuthCompat(mHostAuth); return svc.validate(
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,getService,private IEmailService  (){ return EmailServiceUtils.getService(mContext mHostAuth.mProtocol); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\store\ServiceStore.java,newInstance,public static Store  (Account account Context context) throws MessagingException { return new ServiceStore(account context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,DiscourseLogger,public  (int bufferSize){ mBufferSize=bufferSize; initBuffer(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,addLine,private void  (String s){ mBuffer[mPos]=s; mPos++; if (mPos >= mBufferSize) { mPos=0; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,addReceivedByte,"public void  (int b){ if (0x20 <= b && b <= 0x7e) { mReceivingLine.append((char)b); } else if (b == '\n') { addReceivingLineToBuffer(); } else if (b == '\r') { } else { final String hex=""00"" + Integer.toHexString(b); mReceivingLine.append(""\\x"" + hex.substring(hex.length() - 2 hex.length())); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,addReceivingLineToBuffer,private void  (){ if (mReceivingLine.length() > 0) { addLine(mReceivingLine.toString()); mReceivingLine.delete(0 Integer.MAX_VALUE); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,addSentCommand,public void  (String command){ addLine(command); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,getLines,String[]  (){ addReceivingLineToBuffer(); ArrayList<String> list=new ArrayList<String>(); final int start=mPos; int pos=mPos; do { String s=mBuffer[pos]; if (s != null) { list.add(s); } pos=(pos + 1) % mBufferSize; } while (pos != start); String[] ret=new String[list.size()]; list.toArray(ret); return ret; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,initBuffer,private void  (){ mBuffer=new String[mBufferSize]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\DiscourseLogger.java,logLastDiscourse,"public void  (){ String[] lines=getLines(); if (lines.length == 0) { return; } LogUtils.w(Logging.LOG_TAG ""Last network activities:""); for ( String r : getLines()) { LogUtils.w(Logging.LOG_TAG ""%s"" r); } initBuffer(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\NotificationControllerCreatorHolder.java,getInstance,public static NotificationController  (Context context){ return getNotificationControllerCreator().getInstance(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\NotificationControllerCreatorHolder.java,getNotificationControllerCreator,public static NotificationControllerCreator  (){ return sCreator; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\NotificationControllerCreatorHolder.java,setNotificationControllerCreator,public static void  (NotificationControllerCreator creator){ sCreator=creator; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\PeekableInputStream.java,PeekableInputStream,public  (InputStream in){ this.mIn=in; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\PeekableInputStream.java,peek,public int  () throws IOException { if (!mPeeked) { mPeekedByte=read(); mPeeked=true; } return mPeekedByte; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\PeekableInputStream.java,read,@Override public int  (byte[] b) throws IOException { return read(b 0 b.length); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\PeekableInputStream.java,toString,"@Override public String  (){ return String.format(""PeekableInputStream(in=%s  peeked=%b  peekedByte=%d)"" mIn.toString() mPeeked mPeekedByte); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountBackupRestore.java,backup,public static void  (Context context){ ContentResolver resolver=context.getContentResolver(); resolver.update(EmailProvider.ACCOUNT_BACKUP_URI null null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,MailTransport,public  (Context context String debugLabel HostAuth hostAuth){ super(); mContext=context; mDebugLabel=debugLabel; mHostAuth=hostAuth; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,canTrustAllCertificates,public boolean  (){ return (mHostAuth.mFlags & HostAuth.FLAG_TRUST_ALL) != 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,canTrySslSecurity,public boolean  (){ return (mHostAuth.mFlags & HostAuth.FLAG_SSL) != 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,canTryTlsSecurity,public boolean  (){ return (mHostAuth.mFlags & HostAuth.FLAG_TLS) != 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,clone,@Override public MailTransport  (){ return new MailTransport(mContext mDebugLabel mHostAuth); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,close,public void  (){ try { mIn.close(); } catch ( Exception e) { } try { mOut.close(); } catch ( Exception e) { } try { mSocket.close(); } catch ( Exception e) { } mIn=null; mOut=null; mSocket=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,getHost,public String  (){ return mHostAuth.mAddress; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,getInputStream,public InputStream  (){ return mIn; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,getLocalAddress,public InetAddress  (){ if (isOpen()) { return mSocket.getLocalAddress(); } else { return null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,getOutputStream,public OutputStream  (){ return mOut; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,getPort,public int  (){ return mHostAuth.mPort; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,getSoTimeout,public int  () throws SocketException { return mSocket.getSoTimeout(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,isOpen,public boolean  (){ return (mIn != null && mOut != null && mSocket != null && mSocket.isConnected() && !mSocket.isClosed()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,open,"public void  () throws MessagingException  CertificateValidationException { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""*** "" + mDebugLabel + "" open ""+ getHost()+ "":""+ String.valueOf(getPort())); } try { SocketAddress socketAddress=new InetSocketAddress(getHost() getPort()); if (canTrySslSecurity()) { mSocket=SSLUtils.getSSLSocketFactory(mContext mHostAuth null canTrustAllCertificates()).createSocket(); } else { mSocket=new Socket(); } mSocket.connect(socketAddress SOCKET_CONNECT_TIMEOUT); if (canTrySslSecurity() && !canTrustAllCertificates()) { verifyHostname(mSocket getHost()); } Analytics.getInstance().sendEvent(""socket_certificates"" ""open"" Boolean.toString(canTrustAllCertificates()) 0); if (mSocket instanceof SSLSocket) { final SSLSocket sslSocket=(SSLSocket)mSocket; if (sslSocket.getSession() != null) { Analytics.getInstance().sendEvent(""cipher_suite"" sslSocket.getSession().getProtocol() sslSocket.getSession().getCipherSuite() 0); } } mIn=new BufferedInputStream(mSocket.getInputStream() 1024); mOut=new BufferedOutputStream(mSocket.getOutputStream() 512); mSocket.setSoTimeout(SOCKET_READ_TIMEOUT); } catch ( SSLException e) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG e.toString()); } throw new CertificateValidationException(e.getMessage() e); } catch ( IOException ioe) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ioe.toString()); } throw new MessagingException(MessagingException.IOERROR ioe.toString()); } catch ( IllegalArgumentException iae) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG iae.toString()); } throw new MessagingException(MessagingException.UNSPECIFIED_EXCEPTION iae.toString()); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,readLine,"public String  (boolean loggable) throws IOException { StringBuffer sb=new StringBuffer(); InputStream in=getInputStream(); int d; while ((d=in.read()) != -1) { if (((char)d) == '\r') { continue; } else if (((char)d) == '\n') { break; } else { sb.append((char)d); } } if (d == -1 && DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""End of stream reached while trying to read line.""); } String ret=sb.toString(); if (loggable && DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""<<< "" + ret); } return ret; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,reopenTls,"public void  () throws MessagingException { try { mSocket=SSLUtils.getSSLSocketFactory(mContext mHostAuth null canTrustAllCertificates()).createSocket(mSocket getHost() getPort() true); mSocket.setSoTimeout(SOCKET_READ_TIMEOUT); mIn=new BufferedInputStream(mSocket.getInputStream() 1024); mOut=new BufferedOutputStream(mSocket.getOutputStream() 512); Analytics.getInstance().sendEvent(""socket_certificates"" ""reopenTls"" Boolean.toString(canTrustAllCertificates()) 0); final SSLSocket sslSocket=(SSLSocket)mSocket; if (sslSocket.getSession() != null) { Analytics.getInstance().sendEvent(""cipher_suite"" sslSocket.getSession().getProtocol() sslSocket.getSession().getCipherSuite() 0); } } catch ( SSLException e) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG e.toString()); } throw new CertificateValidationException(e.getMessage() e); } catch ( IOException ioe) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ioe.toString()); } throw new MessagingException(MessagingException.IOERROR ioe.toString()); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,setSoTimeout,public void  (int timeoutMilliseconds) throws SocketException { mSocket.setSoTimeout(timeoutMilliseconds); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,verifyHostname,"private static void  (Socket socket String hostname) throws IOException { SSLSocket ssl=(SSLSocket)socket; ssl.startHandshake(); SSLSession session=ssl.getSession(); if (session == null) { throw new SSLException(""Cannot verify SSL socket without session""); } if (!HOSTNAME_VERIFIER.verify(hostname session)) { throw new SSLPeerUnverifiedException(""Certificate hostname not useable for server: "" + hostname); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\mail\transport\MailTransport.java,writeLine,"public void  (String s String sensitiveReplacement) throws IOException { if (DebugUtils.DEBUG) { if (sensitiveReplacement != null && !Logging.DEBUG_SENSITIVE) { LogUtils.d(Logging.LOG_TAG "">>> "" + sensitiveReplacement); } else { LogUtils.d(Logging.LOG_TAG "">>> "" + s); } } OutputStream out=getOutputStream(); out.write(s.getBytes()); out.write('\r'); out.write('\n'); out.flush(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,Preferences,private  (Context context){ mSharedPreferences=context.getSharedPreferences(PREFERENCES_FILE Context.MODE_PRIVATE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,clear,public void  (){ mSharedPreferences.edit().clear().apply(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,clearLegacyBackupPreference,public static void  (Context context){ getPreferences(context).mSharedPreferences.edit().remove(ACCOUNT_UUIDS).apply(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,dump,"public void  (){ if (Logging.LOGD) { for ( String key : mSharedPreferences.getAll().keySet()) { LogUtils.v(Logging.LOG_TAG key + "" = "" + mSharedPreferences.getAll().get(key)); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getAutoAdvanceDirection,@Deprecated public int  (){ return mSharedPreferences.getInt(AUTO_ADVANCE_DIRECTION AUTO_ADVANCE_DEFAULT); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getConfirmDelete,@Deprecated public boolean  (){ return mSharedPreferences.getBoolean(CONFIRM_DELETE CONFIRM_DELETE_DEFAULT); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getConfirmSend,@Deprecated public boolean  (){ return mSharedPreferences.getBoolean(CONFIRM_SEND CONFIRM_SEND_DEFAULT); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getConversationListIcon,@Deprecated public String  (){ return mSharedPreferences.getString(CONV_LIST_ICON CONV_LIST_ICON_SENDER_IMAGE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getDeviceUID,public synchronized String  (){ String result=mSharedPreferences.getString(DEVICE_UID null); if (result == null) { result=UUID.randomUUID().toString(); mSharedPreferences.edit().putString(DEVICE_UID result).apply(); } return result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getEnableDebugLogging,public boolean  (){ return mSharedPreferences.getBoolean(ENABLE_DEBUG_LOGGING false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getEnableExchangeFileLogging,public boolean  (){ return mSharedPreferences.getBoolean(ENABLE_EXCHANGE_FILE_LOGGING false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getEnableExchangeLogging,public boolean  (){ return mSharedPreferences.getBoolean(ENABLE_EXCHANGE_LOGGING false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getEnableStrictMode,public boolean  (){ return mSharedPreferences.getBoolean(ENABLE_STRICT_MODE false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getLastUsedAccountId,public long  (){ return mSharedPreferences.getLong(LAST_ACCOUNT_USED Account.NO_ACCOUNT); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getLegacyBackupPreference,public static String  (Context context){ return getPreferences(context).mSharedPreferences.getString(ACCOUNT_UUIDS null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getOneTimeInitializationProgress,public int  (){ return mSharedPreferences.getInt(ONE_TIME_INITIALIZATION_PROGRESS 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getPreferences,public static synchronized Preferences  (Context context){ if (sPreferences == null) { sPreferences=new Preferences(context); } return sPreferences; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getReplyAll,@Deprecated public boolean  (){ return mSharedPreferences.getBoolean(REPLY_ALL false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getSharedPreferences,public static SharedPreferences  (Context context){ return getPreferences(context).mSharedPreferences; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getSwipeDelete,@Deprecated public boolean  (){ return mSharedPreferences.getBoolean(SWIPE_DELETE false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,getWhitelistedSenderAddresses,"@Deprecated public Set<String>  (){ try { return parseEmailSet(mSharedPreferences.getString(TRUSTED_SENDERS """")); } catch ( JSONException e) { return Collections.emptySet(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,hasReplyAll,@Deprecated public boolean  (){ return mSharedPreferences.contains(REPLY_ALL); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,hasSwipeDelete,@Deprecated public boolean  (){ return mSharedPreferences.contains(SWIPE_DELETE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,parseEmailSet,HashSet<String>  (String serialized) throws JSONException { HashSet<String> result=new HashSet<String>(); if (!TextUtils.isEmpty(serialized)) { JSONArray arr=new JSONArray(serialized); for (int i=0  len=arr.length(); i < len; i++) { result.add((String)arr.get(i)); } } return result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,setEnableDebugLogging,public void  (boolean value){ mSharedPreferences.edit().putBoolean(ENABLE_DEBUG_LOGGING value).apply(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,setEnableExchangeFileLogging,public void  (boolean value){ mSharedPreferences.edit().putBoolean(ENABLE_EXCHANGE_FILE_LOGGING value).apply(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,setEnableExchangeLogging,public void  (boolean value){ mSharedPreferences.edit().putBoolean(ENABLE_EXCHANGE_LOGGING value).apply(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,getAllAmAccounts,private static List<android.accounts.Account>  (final Context context){ final AccountManager am=AccountManager.get(context); final LinkedHashSet<String> accountTypes=new LinkedHashSet<String>(); accountTypes.add(context.getString(R.string.account_manager_type_legacy_imap)); accountTypes.add(context.getString(R.string.account_manager_type_pop3)); accountTypes.add(context.getString(R.string.account_manager_type_exchange)); final ImmutableList.Builder<android.accounts.Account> builder=ImmutableList.builder(); for ( final String type : accountTypes) { final android.accounts.Account[] accounts=am.getAccountsByType(type); builder.add(accounts); } return builder.build(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,getAllEmailProviderAccounts,private static List<Account>  (final Context context){ final Cursor c=context.getContentResolver().query(Account.CONTENT_URI Account.CONTENT_PROJECTION null null null); if (c == null) { return Collections.emptyList(); } final ImmutableList.Builder<Account> builder=ImmutableList.builder(); try { while (c.moveToNext()) { final Account account=new Account(); account.restore(c); builder.add(account); } } finally { c.close(); } return builder.build(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,hasAmAccount,private static boolean  (final List<android.accounts.Account> accounts final String name final String type){ for ( final android.accounts.Account account : accounts) { if (account.name.equalsIgnoreCase(name) && account.type.equalsIgnoreCase(type)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,hasEpAccount,private static boolean  (final List<Account> accounts final String name){ for ( final Account account : accounts) { if (account.mEmailAddress.equalsIgnoreCase(name)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,reconcileAccounts,public static synchronized void  (final Context context){ final List<android.accounts.Account> amAccounts=getAllAmAccounts(context); final List<Account> providerAccounts=getAllEmailProviderAccounts(context); reconcileAccountsInternal(context providerAccounts amAccounts true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,createImageThumbnail,"private static Bitmap  (InputStream data){ try { Bitmap bitmap=BitmapFactory.decodeStream(data); return bitmap; } catch ( OutOfMemoryError oome) { LogUtils.d(Logging.LOG_TAG ""createImageThumbnail failed with "" + oome.getMessage()); return null; } catch ( Exception e) { LogUtils.d(Logging.LOG_TAG ""createImageThumbnail failed with "" + e.getMessage()); return null; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,createThumbnail,"private static Bitmap  (String type InputStream data){ if (MimeUtility.mimeTypeMatches(type ""image/*"")) { return createImageThumbnail(data); } return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,delete,@Override public int  (Uri uri String arg1 String[] arg2){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,getType,@Override public String  (Uri uri){ long callingId=Binder.clearCallingIdentity(); try { List<String> segments=uri.getPathSegments(); String id=segments.get(1); String format=segments.get(2); if (AttachmentUtilities.FORMAT_THUMBNAIL.equals(format)) { retur
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,insert,@Override public Uri  (Uri uri ContentValues values){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,onCreate,"@Override public boolean  (){ final File[] files=getContext().getCacheDir().listFiles(); if (files != null) { for ( File file : files) { final String filename=file.getName(); if (filename.endsWith("".tmp"") || filename.startsWith(""thmb_"")) { file.delete(); "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,openFile,"@Override public ParcelFileDescriptor  (Uri uri String mode) throws FileNotFoundException { if (mode.equals(""w"")) { Context context=getContext(); if (context.checkCallingOrSelfPermission(EmailContent.PROVIDER_PERMISSION) != PackageManager.PERMISSION_GRANT"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,query,@Override public Cursor  (Uri uri String[] projection String selection String[] selectionArgs String sortOrder){ long callingId=Binder.clearCallingIdentity(); try { if (projection == null) { projection=new String[]{Columns._ID Columns.DATA}; } List<String
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AttachmentProvider.java,update,@Override public int  (Uri uri ContentValues values String selection String[] selectionArgs){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\AccountReconciler.java,reconcileAccountsInternal,"private static boolean  (final Context context final List<Account> emailProviderAccounts final List<android.accounts.Account> accountManagerAccounts final boolean performReconciliation){ boolean needsReconciling=false; int accountsDeleted=0; boolean exchangeAccountDeleted=false; LogUtils.d(Logging.LOG_TAG ""reconcileAccountsInternal""); if (MigrationUtils.migrationInProgress()) { LogUtils.d(Logging.LOG_TAG ""deferring reconciliation  migration in progress""); return false; } if (!EmailServiceUtils.isServiceAvailable(context context.getString(R.string.protocol_eas))) { EmailServiceUtils.disableExchangeComponents(context); } else { EmailServiceUtils.enableExchangeComponent(context); } for ( final Account providerAccount : emailProviderAccounts) { final String providerAccountName=providerAccount.mEmailAddress; final EmailServiceUtils.EmailServiceInfo infoForAccount=EmailServiceUtils.getServiceInfoForAccount(context providerAccount.mId); if (infoForAccount == null || !hasAmAccount(accountManagerAccounts providerAccountName infoForAccount.accountType)) { if (infoForAccount != null && (providerAccount.mFlags & Account.FLAGS_INCOMPLETE) != 0) { LogUtils.w(Logging.LOG_TAG ""Account reconciler noticed incomplete account; ignoring""); continue; } needsReconciling=true; if (performReconciliation) { LogUtils.d(Logging.LOG_TAG ""Account deleted in AccountManager; deleting from provider: "" + providerAccountName); final HostAuth auth=providerAccount.getOrCreateHostAuthRecv(context); LogUtils.d(Logging.LOG_TAG ""deleted account with hostAuth "" + auth); if (auth != null && TextUtils.equals(auth.mProtocol context.getString(R.string.protocol_eas))) { exchangeAccountDeleted=true; } final NotificationController nc=NotificationControllerCreatorHolder.getInstance(context); if (nc != null) { nc.cancelNotifications(context providerAccount); } context.getContentResolver().delete(EmailProvider.uiUri(""uiaccount"" providerAccount.mId) null null); accountsDeleted++; } } } boolean needsPolicyUpdate=false; for ( final android.accounts.Account accountManagerAccount : accountManagerAccounts) { final String accountManagerAccountName=accountManagerAccount.name; if (!hasEpAccount(emailProviderAccounts accountManagerAccountName)) { needsReconciling=true; if (performReconciliation) { LogUtils.d(Logging.LOG_TAG ""Account deleted from provider; deleting from AccountManager: "" + accountManagerAccountName); AccountManagerFuture<Boolean> blockingResult=AccountManager.get(context).removeAccount(accountManagerAccount null null); try { blockingResult.getResult(); } catch ( OperationCanceledException e) { LogUtils.w(Logging.LOG_TAG e.toString()); } catch ( AuthenticatorException e) { LogUtils.w(Logging.LOG_TAG e.toString()); } catch ( IOException e) { LogUtils.w(Logging.LOG_TAG e.toString()); } needsPolicyUpdate=true; } } else { final String accountType=accountManagerAccount.type; final String protocol=EmailServiceUtils.getProtocolFromAccountType(context accountType); final EmailServiceInfo info=EmailServiceUtils.getServiceInfo(context protocol); if (info == null || !info.syncCalendar) { ContentResolver.setIsSyncable(accountManagerAccount CalendarContract.AUTHORITY 0); } if (info == null || !info.syncContacts) { ContentResolver.setIsSyncable(accountManagerAccount ContactsContract.AUTHORITY 0); } } } if (needsPolicyUpdate) { SecurityPolicy.getInstance(context).policiesUpdated(); } final String composeActivityName=context.getString(R.string.reconciliation_compose_activity_name); if (!TextUtils.isEmpty(composeActivityName)) { final boolean enableCompose=emailProviderAccounts.size() - accountsDeleted > 0; final ComponentName componentName=new ComponentName(context composeActivityName); context.getPackageManager().setComponentEnabledSetting(componentName enableCompose ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED PackageManager.DONT_KILL_APP); LogUtils.d(LogUtils.TAG ""Setting compose activity to "" + (enableCompose ? ""enabled"" : ""disabled"")); } if (accountsDeleted > 0) { LogUtils.i(Logging.LOG_TAG ""Restarting because account deleted""); if (exchangeAccountDeleted) { EmailServiceUtils.killService(context context.getString(R.string.protocol_eas)); } System.exit(-1); } return needsReconciling; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,setEnableStrictMode,public void  (boolean value){ mSharedPreferences.edit().putBoolean(ENABLE_STRICT_MODE value).apply(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,setLastUsedAccountId,public void  (long accountId){ mSharedPreferences.edit().putLong(LAST_ACCOUNT_USED accountId).apply(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\Preferences.java,setOneTimeInitializationProgress,public void  (int progress){ mSharedPreferences.edit().putInt(ONE_TIME_INITIALIZATION_PROGRESS progress).apply(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,CacheToken, (String id){ mId=id; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,CachedCursor,public  (Cursor cursor ContentCache cache String id){ super(cursor); mCursor=cursor; mCache=cache; mId=id; sActiveCursors.add(cursor); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,ContentCache,"public  (String name String[] baseProjection int maxSize){ mName=name; mLruCache=new LruCache<String Cursor>(maxSize){ @Override protected void entryRemoved( boolean evicted  String key  Cursor oldValue  Cursor newValue){ if (evicted && !sActiveCursors.contains(oldValue)) { oldValue.close(); } } } ; mBaseProjection=baseProjection; mLogTag=""ContentCache-"" + name; sContentCaches.add(this); mTokenList=new TokenList(mName); mStats=new Statistics(this); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,CounterMap, (){ mMap=new HashMap<T Integer>(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,Statistics, (String name){ mCache=null; mName=name; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,TokenList," (String name){ mLogTag=""TokenList-"" + name; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,add,"public CacheToken  (String id){ CacheToken token=new CacheToken(id); super.add(token); if (DebugUtils.DEBUG && DEBUG_TOKENS) { LogUtils.d(mLogTag ""============ Taking token for: "" + token.mId); } return token; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,addCacheStatistics,private void  (ContentCache cache){ if (cache != null) { mHitCount+=cache.mStats.mHitCount; mMissCount+=cache.mStats.mMissCount; mProjectionMissCount+=cache.mStats.mProjectionMissCount; mStaleCount+=cache.mStats.mStaleCount; hitTimes+=cache.mStats.hitTimes; missTimes+=cache.mStats.missTimes; hits+=cache.mStats.hits; miss+=cache.mStats.miss; mCursorCount+=cache.size(); mTokenCount+=cache.mTokenList.size(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,append,"private static void  (StringBuilder sb String name Object value){ sb.append(""  ""); sb.append(name); sb.append("": ""); sb.append(value); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,close,@Override public void  (){ synchronized (mCache) { int count=sActiveCursors.subtract(mCursor); if ((count == 0) && mCache.mLruCache.get(mId) != (mCursor)) { super.close(); } } isClosed=true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,contains,synchronized boolean  (T object){ return mMap.containsKey(object); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,dumpOnCount,private void  (int num){ mStats.mOpCount++; if ((mStats.mOpCount % num) == 0) { dumpStats(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,dumpStats,"public static void  (){ Statistics totals=new Statistics(""Totals""); for ( ContentCache cache : sContentCaches) { if (cache != null) { LogUtils.d(cache.mName cache.mStats.toString()); totals.addCacheStatistics(cache); } } LogUtils.d(totals.mName totals.toString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,entryRemoved,@Override protected void  (boolean evicted String key Cursor oldValue Cursor newValue){ if (evicted && !sActiveCursors.contains(oldValue)) { oldValue.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,entrySet,synchronized Set<Map.Entry<T Integer>>  (){ return mMap.entrySet(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,equals,@Override public boolean  (Object token){ return ((token instanceof CacheToken) && ((CacheToken)token).mId.equals(mId)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,fillWindow,@Override public void  (int pos CursorWindow window){ ((CrossProcessCursor)mCursor).fillWindow(pos window); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,get,@VisibleForTesting Cursor  (String id){ return mLruCache.get(id); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getCacheToken,public synchronized CacheToken  (String id){ CacheToken token=mTokenList.add(id); if (mLockMap.contains(id)) { token.invalidate(); } return token; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getCachedCursor,public synchronized Cursor  (String id String[] projection){ if (DebugUtils.DEBUG && DEBUG_STATISTICS) { dumpOnCount(200); } if (projection == mBaseProjection) { return getCachedCursorImpl(id); } else { return getMatrixCursor(id projection); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getCachedCursorImpl,private CachedCursor  (String id){ Cursor c=get(id); if (c != null) { mStats.mHitCount++; return new CachedCursor(c this id); } mStats.mMissCount++; return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getCount,@Override public int  (){ if (mCount < 0) { mCount=super.getCount(); } return mCount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getId,String  (){ return mId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getMatrixCursor,"private MatrixCursor  (String id String[] projection ContentValues values){ Cursor c=get(id); if (c != null) { MatrixCursor mc=new MatrixCursorWithCachedColumns(projection 1); if (c.getCount() == 0) { return mc; } Object[] row=new Object[projection.length]; if (values != null) { values=new ContentValues(values); } int i=0; for ( String column : projection) { int columnIndex=c.getColumnIndex(column); if (columnIndex < 0) { mStats.mProjectionMissCount++; return null; } else { String value; if (values != null && values.containsKey(column)) { Object val=values.get(column); if (val instanceof Boolean) { value=(val == Boolean.TRUE) ? ""1"" : ""0""; } else { value=values.getAsString(column); } values.remove(column); } else { value=c.getString(columnIndex); } row[i++]=value; } } if (values != null && values.size() != 0) { return null; } mc.addRow(row); mStats.mHitCount++; return mc; } mStats.mMissCount++; return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getPosition,@Override public int  (){ return mPosition; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getProjection,public String[]  (){ return mBaseProjection; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getSnapshot,protected Map<String Cursor>  (){ return mLruCache.snapshot(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,getWindow,@Override public CursorWindow  (){ return ((CrossProcessCursor)mCursor).getWindow(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,hashCode,@Override public int  (){ return mId.hashCode(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,invalidate,"public synchronized void  (String operation Uri uri String selection){ if (DEBUG_CACHE && (operation != null)) { LogUtils.d(mLogTag ""============ INVALIDATED BY "" + operation + "": ""+ uri+ ""  SELECTION: ""+ selection); } mStats.mInvalidateCount++; mLruCache.evictAll(); mTokenList.invalidate(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,invalidateAllCaches,public static void  (){ for ( ContentCache cache : sContentCaches) { cache.invalidate(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,invalidateTokens,"int  (String id){ if (DebugUtils.DEBUG && DEBUG_TOKENS) { LogUtils.d(mLogTag ""============ Invalidate tokens for: "" + id); } ArrayList<CacheToken> removeList=new ArrayList<CacheToken>(); int count=0; for ( CacheToken token : this) { if (token.getId().equals(id)) { token.invalidate(); removeList.add(token); count++; } } for ( CacheToken token : removeList) { remove(token); } return count; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,isAfterLast,@Override public final boolean  (){ return mPosition == 1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,isBeforeFirst,@Override public final boolean  (){ return mPosition == -1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,isClosed,@Override public boolean  (){ return isClosed; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,isLast,@Override public final boolean  (){ return mPosition == (getCount() - 1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,isValid,boolean  (){ return mIsValid; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,lock,"public synchronized void  (String id){ mLockMap.add(id); int count=mTokenList.invalidateTokens(id); if (DebugUtils.DEBUG && DEBUG_TOKENS) { LogUtils.d(mTokenList.mLogTag ""============ Lock invalidated "" + count + "" tokens for: ""+ id); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,move,@Override public final boolean  (int offset){ return moveToPosition(mPosition + offset); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,moveToFirst,@Override public boolean  (){ return moveToPosition(0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,moveToLast,@Override public final boolean  (){ return moveToPosition(getCount() - 1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,moveToNext,@Override public boolean  (){ return moveToPosition(mPosition + 1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,moveToPosition,@Override public boolean  (int pos){ if (pos >= getCount() || pos < -1) { return false; } mPosition=pos; return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,moveToPrevious,@Override public boolean  (){ return moveToPosition(mPosition - 1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,notCacheable,"public static synchronized void  (Uri uri String selection){ if (DEBUG_NOT_CACHEABLE) { sNotCacheable++; String str=uri.toString() + ""$"" + selection; sNotCacheableMap.add(str); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,onMove,@Override public boolean  (int oldPosition int newPosition){ return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,putCursor,public Cursor  (Cursor c String id String[] projection CacheToken token){ c.moveToPosition(0); return putCursorImpl(c id projection token); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,putCursorImpl,"public synchronized Cursor  (Cursor c String id String[] projection CacheToken token){ try { if (!token.isValid()) { if (DebugUtils.DEBUG && DEBUG_CACHE) { LogUtils.d(mLogTag ""============ Stale token for "" + id); } mStats.mStaleCount++; return c; } if (c != null && Arrays.equals(projection mBaseProjection) && !sLockCache) { if (DebugUtils.DEBUG && DEBUG_CACHE) { LogUtils.d(mLogTag ""============ Caching cursor for: "" + id); } Cursor existingCursor=get(id); if (existingCursor != null) { unlockImpl(id null false); } mLruCache.put(id c); return new CachedCursor(c this id); } return c; } finally { mTokenList.remove(token); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,recordQueryTime,void  (Cursor c long nanoTime){ if (c instanceof CachedCursor) { mStats.hitTimes+=nanoTime; mStats.hits++; } else { if (c.getCount() == 1) { mStats.missTimes+=nanoTime; mStats.miss++; } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,remove,"boolean  (CacheToken token){ boolean result=super.remove(token); if (DebugUtils.DEBUG && DEBUG_TOKENS) { if (result) { LogUtils.d(mLogTag ""============ Removing token for: "" + token.mId); } else { LogUtils.d(mLogTag ""============ No token found for: "" + token.mId); } } return result; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,setLockCacheForTest,public static void  (boolean lock){ sLockCache=lock; if (sLockCache) { invalidateAllCaches(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,size,public int  (){ return mLruCache.size(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,subtract,synchronized int  (T object){ Integer refCount=mMap.get(object); int newCount; if (refCount == null || refCount.intValue() == 0) { throw new IllegalStateException(); } if (refCount > 1) { newCount=refCount - 1; mMap.put(object newCount); } else { newCount=0; mMap.remove(object); } return newCount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,toString,"@Override public String  (){ if (mHitCount + mMissCount == 0) return ""No cache""; int totalTries=mMissCount + mProjectionMissCount + mHitCount; StringBuilder sb=new StringBuilder(); sb.append(""Cache "" + mName); append(sb ""Cursors"" mCache == null ? mCursorC"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,unlock,public synchronized void  (String id ContentValues values){ unlockImpl(id values true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\ContentCache.java,unlockImpl,"private void  (String id ContentValues values boolean wasLocked){ Cursor c=get(id); if (c != null) { if (DebugUtils.DEBUG && DEBUG_CACHE) { LogUtils.d(mLogTag ""=========== Unlocking cache for: "" + id); } if (values != null && !sLockCache) { MatrixCursor cursor=getMatrixCursor(id mBaseProjection values); if (cursor != null) { if (DebugUtils.DEBUG && DEBUG_CACHE) { LogUtils.d(mLogTag ""=========== Recaching with new values: "" + id); } cursor.moveToFirst(); mLruCache.put(id cursor); } else { mLruCache.remove(id); } } else { mLruCache.remove(id); } if (!sActiveCursors.contains(c)) { c.close(); } } if (wasLocked) { mLockMap.subtract(id); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,BodyDatabaseHelper, (Context context String name){ super(context name null BODY_DATABASE_VERSION); mContext=context; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,DatabaseHelper, (Context context String name){ super(context name null DATABASE_VERSION); mContext=context; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,convertPolicyFlagsToPolicyTable,"@VisibleForTesting @SuppressWarnings(""deprecation"") static void  (SQLiteDatabase db){ Cursor c=db.query(Account.TABLE_NAME new String[]{BaseColumns._ID AccountColumns.SECURITY_FLAGS} AccountColumns.SECURITY_FLAGS + "">0"" null null null null); try { Content"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createAccountManagerAccount,"private static void  (Context context String login String type String password){ final AccountManager accountManager=AccountManager.get(context); if (isAccountPresent(accountManager login type)) { return; } LogUtils.v(""Email"" ""Creating account %s %s"" login type); final android.accounts.Account amAccount=new android.accounts.Account(login type); accountManager.addAccountExplicitly(amAccount password null); ContentResolver.setIsSyncable(amAccount EmailContent.AUTHORITY 1); ContentResolver.setSyncAutomatically(amAccount EmailContent.AUTHORITY true); ContentResolver.setIsSyncable(amAccount ContactsContract.AUTHORITY 0); ContentResolver.setIsSyncable(amAccount CalendarContract.AUTHORITY 0); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailMessageCursor.java,EmailMessageCursor,"public  (final Context c final Cursor cursor final String htmlColumn final String textColumn){ super(cursor); mHtmlColumnIndex=cursor.getColumnIndex(htmlColumn); mTextColumnIndex=cursor.getColumnIndex(textColumn); final int cursorSize=cursor.getCount(); mHtmlParts=new SparseArray<String>(cursorSize); mTextParts=new SparseArray<String>(cursorSize); final ContentResolver cr=c.getContentResolver(); while (cursor.moveToNext()) { final int position=cursor.getPosition(); final long messageId=cursor.getLong(cursor.getColumnIndex(BaseColumns._ID)); try { if (mHtmlColumnIndex != -1) { final Uri htmlUri=Body.getBodyHtmlUriForMessageWithId(messageId); final InputStream in=cr.openInputStream(htmlUri); final String underlyingHtmlString; try { underlyingHtmlString=IOUtils.toString(in); } finally { in.close(); } final String sanitizedHtml=HtmlSanitizer.sanitizeHtml(underlyingHtmlString); mHtmlParts.put(position sanitizedHtml); } } catch ( final IOException e) { LogUtils.v(LogUtils.TAG e ""Did not find html body for message %d"" messageId); } try { if (mTextColumnIndex != -1) { final Uri textUri=Body.getBodyTextUriForMessageWithId(messageId); final InputStream in=cr.openInputStream(textUri); final String underlyingTextString; try { underlyingTextString=IOUtils.toString(in); } finally { in.close(); } mTextParts.put(position underlyingTextString); } } catch ( final IOException e) { LogUtils.v(LogUtils.TAG e ""Did not find text body for message %d"" messageId); } } cursor.moveToPosition(-1); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailMessageCursor.java,getString,@Override public String  (final int columnIndex){ if (columnIndex == mHtmlColumnIndex) { return mHtmlParts.get(getPosition()); } else if (columnIndex == mTextColumnIndex) { return mTextParts.get(getPosition()); } return super.getString(columnIndex); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailMessageCursor.java,getType,@Override public int  (int columnIndex){ if (columnIndex == mHtmlColumnIndex || columnIndex == mTextColumnIndex) { return FIELD_TYPE_STRING; } else { return super.getType(columnIndex); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createAccountTable,"@SuppressWarnings(""deprecation"") static void  (SQLiteDatabase db){ String s="" ("" + AccountColumns._ID + "" integer primary key autoincrement  ""+ AccountColumns.DISPLAY_NAME+ "" text  ""+ AccountColumns.EMAIL_ADDRESS+ "" text  ""+ AccountColumns.SYNC_KEY+ "" tex"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createAttachmentTable,"static void  (SQLiteDatabase db){ String s="" ("" + AttachmentColumns._ID + "" integer primary key autoincrement  ""+ AttachmentColumns.FILENAME+ "" text  ""+ AttachmentColumns.MIME_TYPE+ "" text  ""+ AttachmentColumns.SIZE+ "" integer  ""+ AttachmentColumns.CONTENT_ID+ "" text  ""+ AttachmentColumns.CONTENT_URI+ "" text  ""+ AttachmentColumns.MESSAGE_KEY+ "" integer  ""+ AttachmentColumns.LOCATION+ "" text  ""+ AttachmentColumns.ENCODING+ "" text  ""+ AttachmentColumns.CONTENT+ "" text  ""+ AttachmentColumns.FLAGS+ "" integer  ""+ AttachmentColumns.CONTENT_BYTES+ "" blob  ""+ AttachmentColumns.ACCOUNT_KEY+ "" integer  ""+ AttachmentColumns.UI_STATE+ "" integer  ""+ AttachmentColumns.UI_DESTINATION+ "" integer  ""+ AttachmentColumns.UI_DOWNLOADED_SIZE+ "" integer  ""+ AttachmentColumns.CACHED_FILE+ "" text""+ "");""; db.execSQL(""create table "" + Attachment.TABLE_NAME + s); db.execSQL(createIndex(Attachment.TABLE_NAME AttachmentColumns.MESSAGE_KEY)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createBodyTable,"@SuppressWarnings(""deprecation"") static void  (SQLiteDatabase db){ String s="" ("" + BodyColumns._ID + "" integer primary key autoincrement  ""+ BodyColumns.MESSAGE_KEY+ "" integer  ""+ BodyColumns.HTML_CONTENT+ "" text  ""+ BodyColumns.TEXT_CONTENT+ "" text  ""+ B"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createCredentialsTable,"static void  (SQLiteDatabase db){ String s="" ("" + Credential._ID + "" integer primary key autoincrement  ""+ Credential.PROVIDER_COLUMN+ "" text ""+ Credential.ACCESS_TOKEN_COLUMN+ "" text ""+ Credential.REFRESH_TOKEN_COLUMN+ "" text ""+ Credential.EXPIRATION_COLUMN+ "" integer""+ "");""; db.execSQL(""create table "" + Credential.TABLE_NAME + s); db.execSQL(TRIGGER_HOST_AUTH_DELETE); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createDeleteDuplicateMessagesTrigger,"static void  (final Context context final SQLiteDatabase db){ db.execSQL(""create trigger message_delete_duplicates_on_insert before insert on "" + Message.TABLE_NAME + "" for each row when new.""+ SyncColumns.SERVER_ID+ "" is not null and ""+ ""(select ""+ MailboxColumns.TYPE+ "" from ""+ Mailbox.TABLE_NAME+ "" where ""+ MailboxColumns._ID+ ""=new.""+ MessageColumns.MAILBOX_KEY+ "")!=""+ Mailbox.TYPE_SEARCH+ "" and (select ""+ HostAuth.TABLE_NAME+ "".""+ HostAuthColumns.PROTOCOL+ "" from ""+ HostAuth.TABLE_NAME+ "" ""+ Account.TABLE_NAME+ "" where new.""+ MessageColumns.ACCOUNT_KEY+ ""=""+ Account.TABLE_NAME+ "".""+ AccountColumns._ID+ "" and ""+ Account.TABLE_NAME+ "".""+ AccountColumns.HOST_AUTH_KEY_RECV+ ""=""+ HostAuth.TABLE_NAME+ "".""+ HostAuthColumns._ID+ "")='""+ context.getString(R.string.protocol_eas)+ ""'""+ "" begin delete from ""+ Message.TABLE_NAME+ "" where new.""+ SyncColumns.SERVER_ID+ ""=""+ SyncColumns.SERVER_ID+ "" and new.""+ MessageColumns.ACCOUNT_KEY+ ""=""+ MessageColumns.ACCOUNT_KEY+ "" and (select ""+ Mailbox.TABLE_NAME+ "".""+ MailboxColumns.TYPE+ "" from ""+ Mailbox.TABLE_NAME+ "" where ""+ MailboxColumns._ID+ ""=""+ MessageColumns.MAILBOX_KEY+ "")!=""+ Mailbox.TYPE_SEARCH+ ""; end""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createHostAuthTable,"static void  (SQLiteDatabase db){ String s="" ("" + HostAuthColumns._ID + "" integer primary key autoincrement  ""+ HostAuthColumns.PROTOCOL+ "" text  ""+ HostAuthColumns.ADDRESS+ "" text  ""+ HostAuthColumns.PORT+ "" integer  ""+ HostAuthColumns.FLAGS+ "" integer  ""+ HostAuthColumns.LOGIN+ "" text  ""+ HostAuthColumns.PASSWORD+ "" text  ""+ HostAuthColumns.DOMAIN+ "" text  ""+ HostAuthColumns.ACCOUNT_KEY+ "" integer ""+ HostAuthColumns.CLIENT_CERT_ALIAS+ "" text ""+ HostAuthColumns.SERVER_CERT+ "" blob ""+ HostAuthColumns.CREDENTIAL_KEY+ "" integer""+ "");""; db.execSQL(""create table "" + HostAuth.TABLE_NAME + s); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createIndex,"static String  (String tableName String columnName){ return ""create index "" + tableName.toLowerCase() + '_'+ columnName+ "" on ""+ tableName+ "" (""+ columnName+ "");""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createMailboxTable,"@SuppressWarnings(""deprecation"") static void  (SQLiteDatabase db){ String s="" ("" + MailboxColumns._ID + "" integer primary key autoincrement  ""+ MailboxColumns.DISPLAY_NAME+ "" text  ""+ MailboxColumns.SERVER_ID+ "" text  ""+ MailboxColumns.PARENT_SERVER_ID+ """
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createMessageChangeLogTableIndices,private static void  (final SQLiteDatabase db final String tableName){ db.execSQL(createIndex(tableName MessageChangeLogTable.MESSAGE_KEY)); db.execSQL(createIndex(tableName MessageChangeLogTable.ACCOUNT_KEY)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createMessageChangeLogTableTriggers,"private static void  (final SQLiteDatabase db final String tableName){ db.execSQL(""create trigger "" + tableName + ""_delete_message before delete on ""+ Message.TABLE_NAME+ "" for each row begin delete from ""+ tableName+ "" where ""+ MessageChangeLogTable.MESSAGE_KEY+ ""=old.""+ MessageColumns._ID+ ""; end""); db.execSQL(""create trigger "" + tableName + ""_delete_account before delete on ""+ Account.TABLE_NAME+ "" for each row begin delete from ""+ tableName+ "" where ""+ MessageChangeLogTable.ACCOUNT_KEY+ ""=old.""+ AccountColumns._ID+ ""; end""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createMessageCountTriggers,"static void  (final SQLiteDatabase db){ db.execSQL(""create trigger message_count_message_insert after insert on "" + Message.TABLE_NAME + "" begin update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.MESSAGE_COUNT+ '='+ MailboxColumns.MESSAGE_COUNT+ ""+1""+ "" where ""+ BaseColumns._ID+ ""=NEW.""+ MessageColumns.MAILBOX_KEY+ ""; end""); db.execSQL(""create trigger message_count_message_delete after delete on "" + Message.TABLE_NAME + "" begin update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.MESSAGE_COUNT+ '='+ MailboxColumns.MESSAGE_COUNT+ ""-1""+ "" where ""+ BaseColumns._ID+ ""=OLD.""+ MessageColumns.MAILBOX_KEY+ ""; end""); db.execSQL(""create trigger message_count_message_move after update of "" + MessageColumns.MAILBOX_KEY + "" on ""+ Message.TABLE_NAME+ "" begin update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.MESSAGE_COUNT+ '='+ MailboxColumns.MESSAGE_COUNT+ ""-1""+ "" where ""+ BaseColumns._ID+ ""=OLD.""+ MessageColumns.MAILBOX_KEY+ ""; update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.MESSAGE_COUNT+ '='+ MailboxColumns.MESSAGE_COUNT+ ""+1""+ "" where ""+ BaseColumns._ID+ ""=NEW.""+ MessageColumns.MAILBOX_KEY+ ""; end""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createMessageMoveTable,"private static void  (final SQLiteDatabase db){ db.execSQL(""create table "" + MessageMove.TABLE_NAME + "" (""+ MESSAGE_CHANGE_LOG_COLUMNS+ MessageMove.SRC_FOLDER_KEY+ "" integer  ""+ MessageMove.DST_FOLDER_KEY+ "" integer  ""+ MessageMove.SRC_FOLDER_SERVER_ID+ "" text  ""+ MessageMove.DST_FOLDER_SERVER_ID+ "" text);""); createMessageChangeLogTableIndices(db MessageMove.TABLE_NAME); createMessageChangeLogTableTriggers(db MessageMove.TABLE_NAME); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createMessageStateChangeTable,"private static void  (final SQLiteDatabase db){ db.execSQL(""create table "" + MessageStateChange.TABLE_NAME + "" (""+ MESSAGE_CHANGE_LOG_COLUMNS+ MessageStateChange.OLD_FLAG_READ+ "" integer  ""+ MessageStateChange.NEW_FLAG_READ+ "" integer  ""+ MessageStateChange.OLD_FLAG_FAVORITE+ "" integer  ""+ MessageStateChange.NEW_FLAG_FAVORITE+ "" integer);""); createMessageChangeLogTableIndices(db MessageStateChange.TABLE_NAME); createMessageChangeLogTableTriggers(db MessageStateChange.TABLE_NAME); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createMessageTable,"static void  (Context context SQLiteDatabase db){ String messageColumns=MessageColumns.DISPLAY_NAME + "" text  "" + MessageColumns.TIMESTAMP+ "" integer  ""+ MessageColumns.SUBJECT+ "" text  ""+ MessageColumns.FLAG_READ+ "" integer  ""+ MessageColumns.FLAG_LOADED+ "" integer  ""+ MessageColumns.FLAG_FAVORITE+ "" integer  ""+ MessageColumns.FLAG_ATTACHMENT+ "" integer  ""+ MessageColumns.FLAGS+ "" integer  ""+ MessageColumns.DRAFT_INFO+ "" integer  ""+ MessageColumns.MESSAGE_ID+ "" text  ""+ MessageColumns.MAILBOX_KEY+ "" integer  ""+ MessageColumns.ACCOUNT_KEY+ "" integer  ""+ MessageColumns.FROM_LIST+ "" text  ""+ MessageColumns.TO_LIST+ "" text  ""+ MessageColumns.CC_LIST+ "" text  ""+ MessageColumns.BCC_LIST+ "" text  ""+ MessageColumns.REPLY_TO_LIST+ "" text  ""+ MessageColumns.MEETING_INFO+ "" text  ""+ MessageColumns.SNIPPET+ "" text  ""+ MessageColumns.PROTOCOL_SEARCH_INFO+ "" text  ""+ MessageColumns.THREAD_TOPIC+ "" text  ""+ MessageColumns.SYNC_DATA+ "" text  ""+ MessageColumns.FLAG_SEEN+ "" integer  ""+ MessageColumns.MAIN_MAILBOX_KEY+ "" integer""+ "");""; String createString="" ("" + BaseColumns._ID + "" integer primary key autoincrement  ""+ SyncColumns.SERVER_ID+ "" text  ""+ SyncColumns.SERVER_TIMESTAMP+ "" integer  ""+ messageColumns; String altCreateString="" ("" + BaseColumns._ID + "" integer unique  ""+ SyncColumns.SERVER_ID+ "" text  ""+ SyncColumns.SERVER_TIMESTAMP+ "" integer  ""+ messageColumns; db.execSQL(""create table "" + Message.TABLE_NAME + createString); db.execSQL(""create table "" + Message.UPDATED_TABLE_NAME + altCreateString); db.execSQL(""create table "" + Message.DELETED_TABLE_NAME + altCreateString); String indexColumns[]={MessageColumns.TIMESTAMP MessageColumns.FLAG_READ MessageColumns.FLAG_LOADED MessageColumns.MAILBOX_KEY SyncColumns.SERVER_ID}; for ( String columnName : indexColumns) { db.execSQL(createIndex(Message.TABLE_NAME columnName)); } db.execSQL(""create trigger message_delete before delete on "" + Message.TABLE_NAME + "" begin delete from ""+ Attachment.TABLE_NAME+ "" where ""+ AttachmentColumns.MESSAGE_KEY+ ""=old.""+ BaseColumns._ID+ ""; end""); db.execSQL(""create trigger unread_message_insert before insert on "" + Message.TABLE_NAME + "" when NEW.""+ MessageColumns.FLAG_READ+ ""=0""+ "" begin update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.UNREAD_COUNT+ '='+ MailboxColumns.UNREAD_COUNT+ ""+1""+ "" where ""+ BaseColumns._ID+ ""=NEW.""+ MessageColumns.MAILBOX_KEY+ ""; end""); db.execSQL(""create trigger unread_message_delete before delete on "" + Message.TABLE_NAME + "" when OLD.""+ MessageColumns.FLAG_READ+ ""=0""+ "" begin update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.UNREAD_COUNT+ '='+ MailboxColumns.UNREAD_COUNT+ ""-1""+ "" where ""+ BaseColumns._ID+ ""=OLD.""+ MessageColumns.MAILBOX_KEY+ ""; end""); db.execSQL(""create trigger unread_message_move before update of "" + MessageColumns.MAILBOX_KEY + "" on ""+ Message.TABLE_NAME+ "" when OLD.""+ MessageColumns.FLAG_READ+ ""=0""+ "" begin update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.UNREAD_COUNT+ '='+ MailboxColumns.UNREAD_COUNT+ ""-1""+ "" where ""+ BaseColumns._ID+ ""=OLD.""+ MessageColumns.MAILBOX_KEY+ ""; update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.UNREAD_COUNT+ '='+ MailboxColumns.UNREAD_COUNT+ ""+1""+ "" where ""+ BaseColumns._ID+ ""=NEW.""+ MessageColumns.MAILBOX_KEY+ ""; end""); db.execSQL(""create trigger unread_message_read before update of "" + MessageColumns.FLAG_READ + "" on ""+ Message.TABLE_NAME+ "" when OLD.""+ MessageColumns.FLAG_READ+ ""!=NEW.""+ MessageColumns.FLAG_READ+ "" begin update ""+ Mailbox.TABLE_NAME+ "" set ""+ MailboxColumns.UNREAD_COUNT+ '='+ MailboxColumns.UNREAD_COUNT+ ""+ case OLD.""+ MessageColumns.FLAG_READ+ "" when 0 then -1 else 1 end""+ "" where ""+ BaseColumns._ID+ ""=OLD.""+ MessageColumns.MAILBOX_KEY+ ""; end""); createMessageCountTriggers(db); createDeleteDuplicateMessagesTrigger(context db); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createPolicyTable,"static void  (SQLiteDatabase db){ String s="" ("" + PolicyColumns._ID + "" integer primary key autoincrement  ""+ PolicyColumns.PASSWORD_MODE+ "" integer  ""+ PolicyColumns.PASSWORD_MIN_LENGTH+ "" integer  ""+ PolicyColumns.PASSWORD_EXPIRATION_DAYS+ "" integer  ""+ PolicyColumns.PASSWORD_HISTORY+ "" integer  ""+ PolicyColumns.PASSWORD_COMPLEX_CHARS+ "" integer  ""+ PolicyColumns.PASSWORD_MAX_FAILS+ "" integer  ""+ PolicyColumns.MAX_SCREEN_LOCK_TIME+ "" integer  ""+ PolicyColumns.REQUIRE_REMOTE_WIPE+ "" integer  ""+ PolicyColumns.REQUIRE_ENCRYPTION+ "" integer  ""+ PolicyColumns.REQUIRE_ENCRYPTION_EXTERNAL+ "" integer  ""+ PolicyColumns.REQUIRE_MANUAL_SYNC_WHEN_ROAMING+ "" integer  ""+ PolicyColumns.DONT_ALLOW_CAMERA+ "" integer  ""+ PolicyColumns.DONT_ALLOW_ATTACHMENTS+ "" integer  ""+ PolicyColumns.DONT_ALLOW_HTML+ "" integer  ""+ PolicyColumns.MAX_ATTACHMENT_SIZE+ "" integer  ""+ PolicyColumns.MAX_TEXT_TRUNCATION_SIZE+ "" integer  ""+ PolicyColumns.MAX_HTML_TRUNCATION_SIZE+ "" integer  ""+ PolicyColumns.MAX_EMAIL_LOOKBACK+ "" integer  ""+ PolicyColumns.MAX_CALENDAR_LOOKBACK+ "" integer  ""+ PolicyColumns.PASSWORD_RECOVERY_ENABLED+ "" integer  ""+ PolicyColumns.PROTOCOL_POLICIES_ENFORCED+ "" text  ""+ PolicyColumns.PROTOCOL_POLICIES_UNSUPPORTED+ "" text""+ "");""; db.execSQL(""create table "" + Policy.TABLE_NAME + s); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,createQuickResponseTable,"static void  (SQLiteDatabase db){ String s="" ("" + QuickResponseColumns._ID + "" integer primary key autoincrement  ""+ QuickResponseColumns.TEXT+ "" text  ""+ QuickResponseColumns.ACCOUNT_KEY+ "" integer""+ "");""; db.execSQL(""create table "" + QuickResponse.TABLE_NAME + s); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,dropDeleteDuplicateMessagesTrigger,"static void  (final SQLiteDatabase db){ db.execSQL(""drop trigger message_delete_duplicates_on_insert""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,isAccountPresent,private static boolean  (AccountManager accountManager String name String type){ final android.accounts.Account[] amAccounts=accountManager.getAccountsByType(type); if (amAccounts != null) { for ( android.accounts.Account account : amAccounts) { if (TextUtils.equals(account.name name) && TextUtils.equals(account.type type)) { return true; } } } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,migrateLegacyAccounts,"private static void  (SQLiteDatabase db Context accountManagerContext){ final Map<String String> legacyToNewTypeMap=new ImmutableMap.Builder<String String>().put(LEGACY_SCHEME_POP3 accountManagerContext.getString(R.string.account_manager_type_pop3)).put(LEGACY_SCHEME_IMAP accountManagerContext.getString(R.string.account_manager_type_legacy_imap)).put(LEGACY_SCHEME_EAS accountManagerContext.getString(R.string.account_manager_type_exchange)).build(); try { final Cursor accountCursor=db.query(Account.TABLE_NAME V21_ACCOUNT_PROJECTION null null null null null); try { final String[] hostAuthArgs=new String[1]; while (accountCursor.moveToNext()) { hostAuthArgs[0]=accountCursor.getString(V21_ACCOUNT_RECV); final Cursor hostAuthCursor=db.query(HostAuth.TABLE_NAME V21_HOSTAUTH_PROJECTION HostAuthColumns._ID + ""=?"" hostAuthArgs null null null); try { if (hostAuthCursor.moveToFirst()) { final String protocol=hostAuthCursor.getString(V21_HOSTAUTH_PROTOCOL); if (LEGACY_SCHEME_IMAP.equals(protocol) || LEGACY_SCHEME_POP3.equals(protocol)) { if (DebugUtils.DEBUG) { LogUtils.d(TAG ""Create AccountManager account for "" + protocol + ""account: ""+ accountCursor.getString(V21_ACCOUNT_EMAIL)); } createAccountManagerAccount(accountManagerContext accountCursor.getString(V21_ACCOUNT_EMAIL) legacyToNewTypeMap.get(protocol) hostAuthCursor.getString(V21_HOSTAUTH_PASSWORD)); } else if (LEGACY_SCHEME_EAS.equals(protocol)) { android.accounts.Account amAccount=new android.accounts.Account(accountCursor.getString(V21_ACCOUNT_EMAIL) legacyToNewTypeMap.get(protocol)); ContentResolver.setIsSyncable(amAccount EmailContent.AUTHORITY 1); ContentResolver.setSyncAutomatically(amAccount EmailContent.AUTHORITY true); } } } finally { hostAuthCursor.close(); } } } finally { accountCursor.close(); } } catch ( SQLException e) { LogUtils.w(TAG ""Exception while migrating accounts "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,onCreate,"@Override public void  (SQLiteDatabase db){ LogUtils.d(TAG ""Creating EmailProvider database""); createMessageTable(mContext db); createAttachmentTable(db); createMailboxTable(db); createHostAuthTable(db); createAccountTable(db); createMessageMoveTable(db);"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,onDowngrade,"@Override public void  (SQLiteDatabase db int oldVersion int newVersion){ if (oldVersion == 101 && newVersion == 100) { LogUtils.d(TAG ""Downgrade from v101 to v100""); } else { super.onDowngrade(db oldVersion newVersion); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,onOpen,"@Override public void  (SQLiteDatabase db){ try { db.execSQL(""DELETE FROM "" + Account.TABLE_NAME + "" WHERE ""+ AccountColumns.DISPLAY_NAME+ "" ISNULL;""); db.execSQL(""DELETE FROM "" + HostAuth.TABLE_NAME + "" WHERE ""+ HostAuthColumns.PROTOCOL+ "" ISNULL;""); } c"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,onUpgrade,"@Override @SuppressWarnings(""deprecation"") public void  (SQLiteDatabase db int oldVersion int newVersion){ if (oldVersion < 5) { android.accounts.Account[] accounts=AccountManager.get(mContext).getAccountsByType(LEGACY_SCHEME_EAS); for ( android.accounts."
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,recalculateMessageCount,"@VisibleForTesting static void  (SQLiteDatabase db){ db.execSQL(""update "" + Mailbox.TABLE_NAME + "" set ""+ MailboxColumns.MESSAGE_COUNT+ ""= (select count(*) from ""+ Message.TABLE_NAME+ "" where ""+ MessageColumns.MAILBOX_KEY+ "" = ""+ Mailbox.TABLE_NAME+ "".""+ "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,resetAccountTable,"static void  (SQLiteDatabase db int oldVersion int newVersion){ try { db.execSQL(""drop table "" + Account.TABLE_NAME); } catch ( SQLException e) { } createAccountTable(db); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,resetAttachmentTable,"static void  (SQLiteDatabase db int oldVersion int newVersion){ try { db.execSQL(""drop table "" + Attachment.TABLE_NAME); } catch ( SQLException e) { } createAttachmentTable(db); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,resetHostAuthTable,"static void  (SQLiteDatabase db int oldVersion int newVersion){ try { db.execSQL(""drop table "" + HostAuth.TABLE_NAME); } catch ( SQLException e) { } createHostAuthTable(db); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,resetMailboxTable,"static void  (SQLiteDatabase db int oldVersion int newVersion){ try { db.execSQL(""drop table "" + Mailbox.TABLE_NAME); } catch ( SQLException e) { } createMailboxTable(db); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,resetMessageTable,"static void  (Context context SQLiteDatabase db int oldVersion int newVersion){ try { db.execSQL(""drop table "" + Message.TABLE_NAME); db.execSQL(""drop table "" + Message.UPDATED_TABLE_NAME); db.execSQL(""drop table "" + Message.DELETED_TABLE_NAME); } catch ( SQLException e) { } createMessageTable(context db); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeBodyFromVersion100ToVersion101,"private static void  (final Context context final SQLiteDatabase db){ try { final String projection[]={BodyColumns.MESSAGE_KEY}; final Cursor cursor=db.query(Body.TABLE_NAME projection null null null null null); if (cursor == null) { throw new IllegalStateException(""Could not read body table for upgrade""); } final SQLiteStatement htmlSql=db.compileStatement(""SELECT "" + BodyColumns.HTML_CONTENT + "" FROM ""+ Body.TABLE_NAME+ "" WHERE ""+ BodyColumns.MESSAGE_KEY+ ""=?""); final SQLiteStatement textSql=db.compileStatement(""SELECT "" + BodyColumns.TEXT_CONTENT + "" FROM ""+ Body.TABLE_NAME+ "" WHERE ""+ BodyColumns.MESSAGE_KEY+ ""=?""); while (cursor.moveToNext()) { final long messageId=cursor.getLong(0); htmlSql.bindLong(1 messageId); try { final String htmlString=htmlSql.simpleQueryForString(); if (!TextUtils.isEmpty(htmlString)) { final File htmlFile=EmailProvider.getBodyFile(context messageId ""html""); final FileWriter w=new FileWriter(htmlFile); try { w.write(htmlString); } finally { w.close(); } } } catch ( final SQLiteDoneException e) { LogUtils.v(LogUtils.TAG e ""Done with the HTML column""); } textSql.bindLong(1 messageId); try { final String textString=textSql.simpleQueryForString(); if (!TextUtils.isEmpty(textString)) { final File textFile=EmailProvider.getBodyFile(context messageId ""txt""); final FileWriter w=new FileWriter(textFile); try { w.write(textString); } finally { w.close(); } } } catch ( final SQLiteDoneException e) { LogUtils.v(LogUtils.TAG e ""Done with the text column""); } } db.execSQL(""update "" + Body.TABLE_NAME + "" set ""+ BodyColumns.HTML_CONTENT+ ""=NULL ""+ BodyColumns.TEXT_CONTENT+ ""=NULL""); } catch ( final SQLException e) { LogUtils.w(TAG e ""Exception upgrading EmailProviderBody.db from v100 to v101""); } catch ( final IOException e) { throw new RuntimeException(e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeBodyFromVersion5ToVersion6,"@SuppressWarnings(""deprecation"") private static void  (final SQLiteDatabase db){ try { db.execSQL(""alter table "" + Body.TABLE_NAME + "" add ""+ BodyColumns.INTRO_TEXT+ "" text""); } catch ( final SQLException e) { LogUtils.w(TAG e ""Exception upgrading EmailPr"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeBodyFromVersion6ToVersion8,"private static void  (final SQLiteDatabase db){ try { db.execSQL(""alter table "" + Body.TABLE_NAME + "" add ""+ BodyColumns.QUOTED_TEXT_START_POS+ "" integer""); } catch ( final SQLException e) { LogUtils.w(TAG e ""Exception upgrading EmailProviderBody.db from v6 to v8""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeBodyToVersion5,"private static void  (final SQLiteDatabase db){ try { db.execSQL(""drop table "" + Body.TABLE_NAME); createBodyTable(db); } catch ( final SQLException e) { LogUtils.w(TAG e ""Exception upgrading EmailProviderBody.db from <v5""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion125ToVersion126,"private static void  (SQLiteDatabase db){ try { Cursor messageCursor=db.query(Message.TABLE_NAME Message.CONTENT_PROJECTION null null null null null); ContentValues cv=new ContentValues(); String[] whereArgs=new String[1]; try { while (messageCursor.moveToNext()) { for (int i=0; i < ADDRESS_COLUMN_INDICES.length; i++) { Address[] addrs=Address.fromHeader(messageCursor.getString(ADDRESS_COLUMN_INDICES[i])); cv.put(ADDRESS_COLUMN_NAMES[i] Address.toString(addrs)); } whereArgs[0]=messageCursor.getString(Message.CONTENT_ID_COLUMN); db.update(Message.TABLE_NAME cv WHERE_ID whereArgs); } } finally { messageCursor.close(); } } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 125 to 126 "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion126ToVersion127,"private static void  (final Context context final SQLiteDatabase db){ try { final long newFlags=Account.FLAGS_SUPPORTS_GLOBAL_SEARCH + Account.FLAGS_SUPPORTS_SEARCH + Account.FLAGS_SUPPORTS_SMART_FORWARD; db.execSQL(""UPDATE "" + Account.TABLE_NAME + "" SET ""+ AccountColumns.FLAGS+ ""=""+ AccountColumns.FLAGS+ ""|""+ Long.toString(newFlags)+ "" WHERE ""+ AccountColumns._ID+ "" IN (SELECT t1.""+ AccountColumns._ID+ "" FROM ""+ Account.TABLE_NAME+ "" t1 INNER JOIN ""+ HostAuth.TABLE_NAME+ "" t2 ON t1.""+ AccountColumns.HOST_AUTH_KEY_RECV+ ""=t2._id WHERE t2.""+ HostAuthColumns.PROTOCOL+ ""='""+ context.getString(R.string.protocol_eas)+ ""' AND CAST(t1.""+ AccountColumns.PROTOCOL_VERSION+ "" AS REAL)>=12.0)""); } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 126 to 127 "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion17ToVersion18,"@VisibleForTesting static void  (SQLiteDatabase db){ try { db.execSQL(""UPDATE "" + Mailbox.TABLE_NAME + "" SET ""+ MailboxColumns.SERVER_ID+ ""=""+ MailboxColumns.DISPLAY_NAME+ "" WHERE ""+ Mailbox.TABLE_NAME+ "".""+ MailboxColumns._ID+ "" IN ( SELECT ""+ Mailbox.TA"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion21ToVersion22,@VisibleForTesting static void  (SQLiteDatabase db Context accountManagerContext){ migrateLegacyAccounts(db accountManagerContext); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion22ToVersion23,"private static void  (SQLiteDatabase db){ try { db.execSQL(""alter table "" + Mailbox.TABLE_NAME + "" add column ""+ Mailbox.LAST_TOUCHED_TIME+ "" integer default 0;""); } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 22 to 23 "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion23ToVersion24,"private static void  (SQLiteDatabase db){ try { db.execSQL(""alter table "" + HostAuth.TABLE_NAME + "" add column ""+ HostAuthColumns.CLIENT_CERT_ALIAS+ "" text;""); } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 23 to 24 "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion24ToVersion25,"private static void  (SQLiteDatabase db){ try { createQuickResponseTable(db); } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 24 to 25 "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion25ToVersion26,"private static void  (SQLiteDatabase db){ try { Cursor accountCursor=db.query(Account.TABLE_NAME V25_ACCOUNT_PROJECTION null null null null null); ContentValues cv=new ContentValues(); try { String[] hostAuthArgs=new String[1]; while (accountCursor.moveToNext()) { hostAuthArgs[0]=accountCursor.getString(V25_ACCOUNT_RECV); Cursor hostAuthCursor=db.query(HostAuth.TABLE_NAME V25_HOSTAUTH_PROJECTION HostAuthColumns._ID + ""=?"" hostAuthArgs null null null); try { if (hostAuthCursor.moveToFirst()) { String protocol=hostAuthCursor.getString(V25_HOSTAUTH_PROTOCOL); if (LEGACY_SCHEME_IMAP.equals(protocol)) { String id=accountCursor.getString(V25_ACCOUNT_ID); int flags=accountCursor.getInt(V25_ACCOUNT_FLAGS); cv.put(AccountColumns.FLAGS flags | Account.FLAGS_SUPPORTS_SEARCH); db.update(Account.TABLE_NAME cv AccountColumns._ID + ""=?"" new String[]{id}); } } } finally { hostAuthCursor.close(); } } } finally { accountCursor.close(); } } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 25 to 26 "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeFromVersion29ToVersion30,"private static void  (SQLiteDatabase db){ try { Cursor messageCursor=db.query(Message.TABLE_NAME Message.CONTENT_PROJECTION null null null null null); ContentValues cv=new ContentValues(); String[] whereArgs=new String[1]; try { while (messageCursor.moveToNext()) { for (int i=0; i < ADDRESS_COLUMN_INDICES.length; i++) { Address[] addrs=Address.fromHeader(messageCursor.getString(ADDRESS_COLUMN_INDICES[i])); cv.put(ADDRESS_COLUMN_NAMES[i] Address.toHeader(addrs)); } whereArgs[0]=messageCursor.getString(Message.CONTENT_ID_COLUMN); db.update(Message.TABLE_NAME cv WHERE_ID whereArgs); } } finally { messageCursor.close(); } } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 29 to 30 "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\DBHelper.java,upgradeToEmail2,"private static void  (SQLiteDatabase db){ try { db.execSQL(""update Mailbox set "" + Mailbox.LAST_NOTIFIED_MESSAGE_KEY + ""=0 where ""+ Mailbox.LAST_NOTIFIED_MESSAGE_KEY+ "" IS NULL""); db.execSQL(""update Mailbox set "" + Mailbox.LAST_NOTIFIED_MESSAGE_COUNT + ""=0 where ""+ Mailbox.LAST_NOTIFIED_MESSAGE_COUNT+ "" IS NULL""); } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 31 to 32/100 "" + e); } try { db.execSQL(""update "" + Attachment.TABLE_NAME + "" set ""+ AttachmentColumns.UI_STATE+ ""=""+ UIProvider.AttachmentState.SAVED+ "" where ""+ AttachmentColumns.CONTENT_URI+ "" is not null;""); } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 32 to 33/100 "" + e); } try { db.execSQL(""update "" + Mailbox.TABLE_NAME + "" set ""+ MailboxColumns.LAST_TOUCHED_TIME+ "" = ""+ Mailbox.DRAFTS_DEFAULT_TOUCH_TIME+ "" WHERE ""+ MailboxColumns.TYPE+ "" = ""+ Mailbox.TYPE_DRAFTS); db.execSQL(""update "" + Mailbox.TABLE_NAME + "" set ""+ MailboxColumns.LAST_TOUCHED_TIME+ "" = ""+ Mailbox.SENT_DEFAULT_TOUCH_TIME+ "" WHERE ""+ MailboxColumns.TYPE+ "" = ""+ Mailbox.TYPE_SENT); } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 34 to 35/100 "" + e); } try { db.execSQL(""update "" + Mailbox.TABLE_NAME + "" set ""+ MailboxColumns.FLAGS+ ""=""+ MailboxColumns.FLAGS+ ""|""+ Mailbox.FLAG_SUPPORTS_SETTINGS+ "" where (""+ MailboxColumns.FLAGS+ ""&""+ Mailbox.FLAG_HOLDS_MAIL+ "")!=0 and ""+ MailboxColumns.ACCOUNT_KEY+ "" IN (SELECT ""+ Account.TABLE_NAME+ "".""+ AccountColumns._ID+ "" from ""+ Account.TABLE_NAME+ "" ""+ HostAuth.TABLE_NAME+ "" where ""+ Account.TABLE_NAME+ "".""+ AccountColumns.HOST_AUTH_KEY_RECV+ ""=""+ HostAuth.TABLE_NAME+ "".""+ HostAuthColumns._ID+ "" and ""+ HostAuthColumns.PROTOCOL+ ""='""+ LEGACY_SCHEME_EAS+ ""')""); } catch ( SQLException e) { LogUtils.w(TAG ""Exception upgrading EmailProvider.db from 35/36 to 37/100 "" + e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,EmailConversationCursor,"public  (final Context context final Cursor cursor final Folder folder final long mailboxId){ super(cursor); mMailboxId=mailboxId; mContext=context; mFolderList=FolderList.copyOf(Lists.newArrayList(folder)); Mailbox mailbox=Mailbox.restoreMailboxWithId(context mailboxId); if (mailbox != null) { mMailboxTypeId=mailbox.mType; mExtras.putInt(UIProvider.CursorExtraKeys.EXTRA_TOTAL_COUNT mailbox.mTotalCount); if (mailbox.mUiSyncStatus == EmailContent.SYNC_STATUS_BACKGROUND || mailbox.mUiSyncStatus == EmailContent.SYNC_STATUS_USER || mailbox.mUiSyncStatus == EmailContent.SYNC_STATUS_LIVE || mailbox.mUiSyncStatus == EmailContent.SYNC_STATUS_INITIAL_SYNC_NEEDED) { mExtras.putInt(UIProvider.CursorExtraKeys.EXTRA_STATUS UIProvider.CursorStatus.LOADING); } else if (mailbox.mUiSyncStatus == EmailContent.SYNC_STATUS_NONE) { if (mailbox.mSyncInterval == 0 && (Mailbox.isSyncableType(mailbox.mType) || mailbox.mType == Mailbox.TYPE_SEARCH) && !TextUtils.isEmpty(mailbox.mServerId) && System.currentTimeMillis() - mailbox.mSyncTime > AUTO_REFRESH_INTERVAL_MS) { mExtras.putInt(UIProvider.CursorExtraKeys.EXTRA_STATUS UIProvider.CursorStatus.LOADING); } else { mExtras.putInt(UIProvider.CursorExtraKeys.EXTRA_STATUS UIProvider.CursorStatus.COMPLETE); } } else { LogUtils.d(Logging.LOG_TAG ""Unknown mailbox sync status"" + mailbox.mUiSyncStatus); mExtras.putInt(UIProvider.CursorExtraKeys.EXTRA_STATUS UIProvider.CursorStatus.COMPLETE); } } else { mMailboxTypeId=-1; mExtras.putInt(UIProvider.CursorExtraKeys.EXTRA_TOTAL_COUNT cursor != null ? cursor.getCount() : 0); mExtras.putInt(UIProvider.CursorExtraKeys.EXTRA_STATUS UIProvider.CursorStatus.COMPLETE); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,emptyFolder,"@Override public void  (){ final ContentResolver resolver=mContext.getContentResolver(); final Uri purgeUri=EmailProvider.uiUri(""uipurgefolder"" mMailboxId); resolver.delete(purgeUri null null); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,generateConversationInfo,"private ConversationInfo  (){ final int numMessages=getInt(getColumnIndex(ConversationColumns.NUM_MESSAGES)); final ConversationInfo conversationInfo=new ConversationInfo(numMessages); conversationInfo.firstSnippet=getString(getColumnIndex(ConversationColumns.SNIPPET)); conversationInfo.lastSnippet=conversationInfo.firstSnippet; conversationInfo.firstUnreadSnippet=conversationInfo.firstSnippet; final boolean isRead=getInt(getColumnIndex(ConversationColumns.READ)) != 0; final String senderString=getString(getColumnIndex(EmailContent.MessageColumns.DISPLAY_NAME)); final String fromString=getString(getColumnIndex(EmailContent.MessageColumns.FROM_LIST)); final String senderEmail; if (fromString != null) { final Rfc822Token[] tokens=Rfc822Tokenizer.tokenize(fromString); if (tokens.length > 0) { senderEmail=tokens[0].getAddress(); } else { LogUtils.d(LogUtils.TAG ""Couldn't parse sender email address""); senderEmail=fromString; } } else { senderEmail=null; } if (mMailboxTypeId == Mailbox.TYPE_DRAFTS) { conversationInfo.draftCount=1; } else if (mMailboxTypeId == Mailbox.TYPE_SENT || mMailboxTypeId == Mailbox.TYPE_OUTBOX) { final String recipientsString=getString(getColumnIndex(EmailContent.MessageColumns.TO_LIST)); final Address[] recipientAddresses=Address.parse(recipientsString); for ( Address recipientAddress : recipientAddresses) { final String name=recipientAddress.getSimplifiedName(); final String email=recipientAddress.getAddress(); conversationInfo.addParticipant(new ParticipantInfo(name email 0 isRead)); } } else { conversationInfo.addParticipant(new ParticipantInfo(senderString senderEmail 0 isRead)); } return conversationInfo; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,getExtras,@Override public Bundle  (){ return mExtras; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,markContentsSeen,@Override public void  (){ final ContentResolver resolver=mContext.getContentResolver(); final ContentValues contentValues=new ContentValues(1); contentValues.put(EmailContent.MessageColumns.FLAG_SEEN true); final Uri uri=EmailContent.Message.CONTENT_URI;
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailConversationCursor.java,respond,@Override public Bundle  (Bundle params){ final String setVisibilityKey=UIProvider.ConversationCursorCommand.COMMAND_KEY_SET_VISIBILITY; if (params.containsKey(setVisibilityKey)) { final boolean visible=params.getBoolean(setVisibilityKey); if (visible) { 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,AccountObserver,public  (Context context Handler handler){ super(handler); mContext=context; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,cancel,@Override public void  (){ finish(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,onChange,@Override public void  (boolean selfChange){ Account account=Account.restoreAccountWithId(mContext mAccountId); if ((account.mFlags & Account.FLAGS_INITIAL_FOLDER_LIST_LOADED) != 0 && (mAccountObserver != null)) { mContext.getContentResolver().unregisterC
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,onCreate,"@Override public void  (Bundle bundle){ super.onCreate(bundle); Intent i=getIntent(); Uri uri=i.getData(); int headerId; final com.android.mail.providers.Account uiAccount; if (uri != null) { String id=uri.getQueryParameter(""account""); if (id == null) { L"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,onDestroy,@Override public void  (){ super.onDestroy(); if (mAccountObserver != null) { getContentResolver().unregisterContentObserver(mAccountObserver); mAccountObserver=null; } if (mWaitingForFoldersDialog != null) { mWaitingForFoldersDialog.dismiss(); mWaitingFo
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,select,@Override public void  (Folder folder){ String folderId=folder.folderUri.fullUri.getLastPathSegment(); Long id=Long.parseLong(folderId); ContentValues values=new ContentValues(); Mailbox ofType=Mailbox.restoreMailboxOfType(this mAccountId mMailboxType); i
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,startPicker,private void  (Uri uri int headerId){ String header=getString(headerId mAccountName); FolderPickerDialog dialog=new FolderPickerDialog(this uri this header !mInSetup); dialog.show(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,startPickerForAccount,"private void  (){ int headerId=R.string.trash_folder_selection_title; Uri uri=Uri.parse(""content://"" + EmailContent.AUTHORITY + ""/uifullfolders/""+ mAccountId); startPicker(uri headerId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerActivity.java,waitForFolders,private void  (){ mWaitingForFoldersDialog=new ProgressDialog(this); mWaitingForFoldersDialog.setIndeterminate(true); mWaitingForFoldersDialog.setMessage(getString(R.string.account_waiting_for_folders_msg)); mWaitingForFoldersDialog.show(); mAccountObserver=new AccountObserver(this new Handler()); Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI mAccountId); getContentResolver().registerContentObserver(uri false mAccountObserver); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,FolderPickerDialog,public  (final Context context Uri uri FolderPickerCallback callback String header boolean cancelable){ mCallback=callback; mCheckedState=new HashMap<Folder Boolean>(); AlertDialog.Builder builder=new AlertDialog.Builder(context); builder.setTitle(header); builder.setPositiveButton(R.string.ok this); builder.setCancelable(cancelable); builder.setOnCancelListener(this); final Cursor foldersCursor=context.getContentResolver().query(uri UIProvider.FOLDERS_PROJECTION null null null); try { mAdapter=new SeparatedFolderListAdapter(); mAdapter.addSection(new FolderPickerSelectorAdapter(context foldersCursor new HashSet<String>() R.layout.multi_folders_view)); builder.setAdapter(mAdapter this); } finally { foldersCursor.close(); } mDialog=builder.create(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,onCancel,@Override public void  (DialogInterface dialog){ mCallback.cancel(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,onClick,@Override public void  (DialogInterface dialog int which boolean isChecked){ final FolderRow row=(FolderRow)mAdapter.getItem(which); mCheckedState.clear(); isChecked=true; mCheckedState.put(row.getFolder() isChecked); mDialog.getListView().setItemChecked(
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,onItemClick,@Override public void  (AdapterView<?> parent View view int position long id){ final Object item=mAdapter.getItem(position); if (item instanceof FolderRow) { update((FolderRow)item); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,show,public void  (){ mDialog.show(); mDialog.getListView().setOnItemClickListener(new AdapterView.OnItemClickListener(){ @Override public void onItemClick( AdapterView<?> parent  View view  int position  long id){ final Object item=mAdapter.getItem(position); if (item instanceof FolderRow) { update((FolderRow)item); } } } ); final Button button=mDialog.getButton(AlertDialog.BUTTON_POSITIVE); if (mCheckedState.size() == 0) { button.setEnabled(false); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerDialog.java,update,public void  (FolderSelectorAdapter.FolderRow row){ final boolean add=!row.isSelected(); if (!add) { return; } mAdapter.getCount(); for (int i=0; i < mAdapter.getCount(); i++) { Object item=mAdapter.getItem(i); if (item instanceof FolderRow) { ((FolderRow)item).setIsSelected(false); } } mCheckedState.clear(); row.setIsSelected(add); mAdapter.notifyDataSetChanged(); mCheckedState.put(row.getFolder() add); final Button button=mDialog.getButton(AlertDialog.BUTTON_POSITIVE); button.setEnabled(true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java,RefreshStatusMonitor,private  (Context context){ mContext=context; mHandler=new Handler(mContext.getMainLooper()); StorageLowState.registerHandler(new StorageLowState.LowStorageHandler(){ @Override public void onStorageLow(){ mIsStorageLow=true; } @Override public void onStorageOk(){ mIsStorageLow=false; } } ); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java,RemoveRefreshStatusRunnable, (long mailboxId Callback callback){ mMailboxId=mailboxId; mCallback=callback; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java,getInstance,public static RefreshStatusMonitor  (Context context){ synchronized (RefreshStatusMonitor.class) { if (sInstance == null) { sInstance=new RefreshStatusMonitor(context.getApplicationContext()); } } return sInstance; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java,isConnected,private boolean  (){ final ConnectivityManager connectivityManager=((ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE)); final NetworkInfo networkInfo=connectivityManager.getActiveNetworkInfo(); return (networkInfo != null) && networkInfo.isConnected(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\RefreshStatusMonitor.java,monitorRefreshStatus,public void  (long mailboxId Callback callback){ synchronized (mMailboxSync) { if (!mMailboxSync.containsKey(mailboxId)) mMailboxSync.put(mailboxId false); mHandler.postDelayed(new RemoveRefreshStatusRunnable(mailboxId callback) REMOVE_REFRESH_STATUS_DELAY_MS); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,getAccount,"private static com.android.mail.providers.Account  (Context context long accountId){ final ContentResolver resolver=context.getContentResolver(); final Cursor ac=resolver.query(EmailProvider.uiUri(""uiaccount"" accountId) UIProvider.ACCOUNTS_PROJECTION_NO_CAPABILITIES null null null); com.android.mail.providers.Account uiAccount=getPopulatedAccountObject(ac); return uiAccount; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,getAccountObject,@Override protected com.android.mail.providers.Account  (Context context String accountUri){ final ContentResolver resolver=context.getContentResolver(); final Cursor accountCursor=resolver.query(Uri.parse(accountUri) UIProvider.ACCOUNTS_PROJECTION_NO_CAP
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,getPopulatedAccountObject,"private static com.android.mail.providers.Account  (final Cursor accountCursor){ if (accountCursor == null) { LogUtils.e(LOG_TAG ""Null account cursor""); return null; } com.android.mail.providers.Account uiAccount=null; try { if (accountCursor.moveToFirst()) { uiAccount=com.android.mail.providers.Account.builder().buildFrom(accountCursor); } } finally { accountCursor.close(); } return uiAccount; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,isAccountValid,@Override protected boolean  (Context context com.android.mail.providers.Account account){ if (account != null) { final ContentResolver resolver=context.getContentResolver(); final Cursor accountCursor=resolver.query(account.uri UIProvider.ACCOUNTS_PROJEC
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,loadAccountIdPref,static long  (Context context int appWidgetId){ final SharedPreferences prefs=context.getSharedPreferences(LEGACY_PREFS_NAME 0); long accountId=prefs.getLong(LEGACY_ACCOUNT_ID_PREFIX + appWidgetId Account.NO_ACCOUNT); return accountId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,loadMailboxIdPref,static long  (Context context int appWidgetId){ final SharedPreferences prefs=context.getSharedPreferences(LEGACY_PREFS_NAME 0); long mailboxId=prefs.getLong(LEGACY_MAILBOX_ID_PREFIX + appWidgetId Mailbox.NO_MAILBOX); return mailboxId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,migrateLegacyWidgetAccountId,private static long  (long accountId){ if (accountId == Account.ACCOUNT_ID_COMBINED_VIEW) { return EmailProvider.COMBINED_ACCOUNT_ID; } return accountId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,migrateLegacyWidgetInformation,@Override protected void  (Context context int widgetId){ final SharedPreferences prefs=context.getSharedPreferences(LEGACY_PREFS_NAME 0); final SharedPreferences.Editor editor=prefs.edit(); long accountId=loadAccountIdPref(context widgetId); long mailbox
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,migrateLegacyWidgetMailboxId,private static long  (long mailboxId long accountId){ if (mailboxId == Mailbox.QUERY_ALL_INBOXES) { return EmailProvider.getVirtualMailboxId(accountId Mailbox.TYPE_INBOX); } else if (mailboxId == Mailbox.QUERY_ALL_UNREAD) { return EmailProvider.getVirtualMailboxId(accountId Mailbox.TYPE_UNREAD); } return mailboxId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\WidgetProvider.java,onDeleted,@Override public void  (Context context int[] appWidgetIds){ super.onDeleted(context appWidgetIds); final SharedPreferences prefs=context.getSharedPreferences(LEGACY_PREFS_NAME 0); final SharedPreferences.Editor editor=prefs.edit(); for ( int widgetId : a
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\Utilities.java,copyOneMessageToProvider,"public static void  (Context context Message message EmailContent.Message localMessage int loadStatus){ try { EmailContent.Body body=null; if (localMessage.mId != EmailContent.Message.NO_MESSAGE) { body=EmailContent.Body.restoreBodyWithMessageId(context localMessage.mId); } if (body == null) { body=new EmailContent.Body(); } try { LegacyConversions.updateMessageFields(localMessage message localMessage.mAccountKey localMessage.mMailboxKey); ArrayList<Part> viewables=new ArrayList<Part>(); ArrayList<Part> attachments=new ArrayList<Part>(); MimeUtility.collectParts(message viewables attachments); final ConversionUtilities.BodyFieldData data=ConversionUtilities.parseBodyFields(viewables); localMessage.setFlags(data.isQuotedReply data.isQuotedForward); localMessage.mSnippet=data.snippet; body.mTextContent=data.textContent; body.mHtmlContent=data.htmlContent; saveOrUpdate(localMessage context); body.mMessageKey=localMessage.mId; saveOrUpdate(body context); if (loadStatus != EmailContent.Message.FLAG_LOADED_PARTIAL && loadStatus != EmailContent.Message.FLAG_LOADED_UNKNOWN) { LegacyConversions.updateAttachments(context localMessage attachments); LegacyConversions.updateInlineAttachments(context localMessage viewables); } else { EmailContent.Attachment att=new EmailContent.Attachment(); att.mFileName=""""; att.mSize=message.getSize(); att.mMimeType=""text/plain""; att.mMessageKey=localMessage.mId; att.mAccountKey=localMessage.mAccountKey; att.mFlags=Attachment.FLAG_DUMMY_ATTACHMENT; att.save(context); localMessage.mFlagAttachment=true; } localMessage.mFlagLoaded=loadStatus; ContentValues cv=new ContentValues(); cv.put(EmailContent.MessageColumns.FLAG_ATTACHMENT localMessage.mFlagAttachment); cv.put(EmailContent.MessageColumns.FLAG_LOADED localMessage.mFlagLoaded); Uri uri=ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI localMessage.mId); context.getContentResolver().update(uri cv null null); } catch ( MessagingException me) { LogUtils.e(Logging.LOG_TAG ""Error while copying downloaded message."" + me); } } catch ( RuntimeException rte) { LogUtils.e(Logging.LOG_TAG ""Error while storing downloaded message."" + rte.toString()); } catch ( IOException ioe) { LogUtils.e(Logging.LOG_TAG ""Error while storing attachment."" + ioe.toString()); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\Utilities.java,parseMode,"@TargetApi(19) public static int  (String mode){ if (Utils.isRunningKitkatOrLater()) { return ParcelFileDescriptor.parseMode(mode); } final int modeBits; if (""r"".equals(mode)) { modeBits=ParcelFileDescriptor.MODE_READ_ONLY; } else if (""w"".equals(mode) || "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\Utilities.java,saveOrUpdate,public static void  (EmailContent content Context context){ if (content.isSaved()) { content.update(context content.toContentValues()); } else { content.save(context); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerSelectorAdapter.java,FolderPickerSelectorAdapter,public  (Context context Cursor folders Set<String> initiallySelected int layout){ super(context folders initiallySelected layout); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\FolderPickerSelectorAdapter.java,meetsRequirements,@Override protected boolean  (Folder folder){ return folder.supportsCapability(FolderCapabilities.CAN_ACCEPT_MOVED_MESSAGES) || folder.isTrash(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,SecurityPolicy,private  (Context context){ mContext=context.getApplicationContext(); mDPM=null; mAdminName=new ComponentName(context PolicyAdmin.class); mAggregatePolicy=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,clearAccountPolicy,public static void  (Context context Account account){ setAccountPolicy(context account null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,clearNotification,public void  (){ final NotificationController nc=NotificationControllerCreatorHolder.getInstance(mContext); nc.cancelSecurityNeededNotification(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,computeAggregatePolicy,@VisibleForTesting Policy  (){ boolean policiesFound=false; Policy aggregate=new Policy(); aggregate.mPasswordMinLength=Integer.MIN_VALUE; aggregate.mPasswordMode=Integer.MIN_VALUE; aggregate.mPasswordMaxFails=Integer.MAX_VALUE; aggregate.mPasswordHistory
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,deleteSecuredAccounts,"void  (Context context){ ContentResolver cr=context.getContentResolver(); Cursor c=cr.query(Account.CONTENT_URI EmailContent.ID_PROJECTION Account.SECURITY_NONZERO_SELECTION null null); try { LogUtils.w(TAG ""Email administration disabled; deleting "" + c.getCount() + "" secured account(s)""); while (c.moveToNext()) { long accountId=c.getLong(EmailContent.ID_PROJECTION_COLUMN); Uri uri=EmailProvider.uiUri(""uiaccount"" accountId); cr.delete(uri null null); } } finally { c.close(); } policiesUpdated(); AccountReconciler.reconcileAccounts(context); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,findShortestExpiration,"@VisibleForTesting static long  (Context context){ long policyId=Utility.getFirstRowLong(context Policy.CONTENT_URI Policy.ID_PROJECTION HAS_PASSWORD_EXPIRATION null PolicyColumns.PASSWORD_EXPIRATION_DAYS + "" ASC"" EmailContent.ID_PROJECTION_COLUMN -1L); i"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,getAdminComponent,public ComponentName  (){ return mAdminName; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,getAggregatePolicy,public synchronized Policy  (){ if (mAggregatePolicy == null) { mAggregatePolicy=computeAggregatePolicy(); } return mAggregatePolicy; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,getDPM,synchronized DevicePolicyManager  (){ if (mDPM == null) { mDPM=(DevicePolicyManager)mContext.getSystemService(Context.DEVICE_POLICY_SERVICE); } return mDPM; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,getInactiveReasons,public int  (Policy policy){ if (policy == null) { policy=getAggregatePolicy(); } if (policy == Policy.NO_POLICY) { return 0; } int reasons=0; DevicePolicyManager dpm=getDPM(); if (isActiveAdmin()) { if (policy.mPasswordMinLength > 0) { if (dpm.getPasswordMinimumLength(mAdminName) < policy.mPasswordMinLength) { reasons|=INACTIVE_NEED_PASSWORD; } } if (policy.mPasswordMode > 0) { if (dpm.getPasswordQuality(mAdminName) < policy.getDPManagerPasswordQuality()) { reasons|=INACTIVE_NEED_PASSWORD; } if (!dpm.isActivePasswordSufficient()) { reasons|=INACTIVE_NEED_PASSWORD; } } if (policy.mMaxScreenLockTime > 0) { if (dpm.getMaximumTimeToLock(mAdminName) > policy.mMaxScreenLockTime * 1000) { reasons|=INACTIVE_NEED_CONFIGURATION; } } if (policy.mPasswordExpirationDays > 0) { long currentTimeout=dpm.getPasswordExpirationTimeout(mAdminName); if (currentTimeout == 0 || currentTimeout > policy.getDPManagerPasswordExpirationTimeout()) { reasons|=INACTIVE_NEED_PASSWORD; } long expirationDate=dpm.getPasswordExpiration(mAdminName); long timeUntilExpiration=expirationDate - System.currentTimeMillis(); boolean expired=timeUntilExpiration < 0; if (expired) { reasons|=INACTIVE_NEED_PASSWORD; } } if (policy.mPasswordHistory > 0) { if (dpm.getPasswordHistoryLength(mAdminName) < policy.mPasswordHistory) { reasons|=INACTIVE_NEED_CONFIGURATION; } } if (policy.mPasswordComplexChars > 0) { if (dpm.getPasswordMinimumNonLetter(mAdminName) < policy.mPasswordComplexChars) { reasons|=INACTIVE_NEED_PASSWORD; } } if (policy.mRequireEncryption) { int encryptionStatus=getDPM().getStorageEncryptionStatus(); if (encryptionStatus != DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE) { reasons|=INACTIVE_NEED_ENCRYPTION; } } if (policy.mDontAllowCamera && !dpm.getCameraDisabled(mAdminName)) { reasons|=INACTIVE_NEED_CONFIGURATION; } if (policy.mProtocolPoliciesUnsupported != null) { reasons|=INACTIVE_PROTOCOL_POLICIES; } return reasons; } return INACTIVE_NEED_ACTIVATION; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,getInstance,public synchronized static SecurityPolicy  (Context context){ if (sInstance == null) { sInstance=new SecurityPolicy(context.getApplicationContext()); } return sInstance; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,isActive,"public boolean  (Policy policy){ int reasons=getInactiveReasons(policy); if (DebugUtils.DEBUG && (reasons != 0)) { StringBuilder sb=new StringBuilder(""isActive for "" + policy + "": ""); sb.append(""FALSE -> ""); if ((reasons & INACTIVE_NEED_ACTIVATION) != 0) { sb.append(""no_admin ""); } if ((reasons & INACTIVE_NEED_CONFIGURATION) != 0) { sb.append(""config ""); } if ((reasons & INACTIVE_NEED_PASSWORD) != 0) { sb.append(""password ""); } if ((reasons & INACTIVE_NEED_ENCRYPTION) != 0) { sb.append(""encryption ""); } if ((reasons & INACTIVE_PROTOCOL_POLICIES) != 0) { sb.append(""protocol ""); } LogUtils.d(TAG sb.toString()); } return reasons == 0; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,isActiveAdmin,public boolean  (){ DevicePolicyManager dpm=getDPM(); return dpm.isAdminActive(mAdminName) && dpm.hasGrantedPolicy(mAdminName DeviceAdminInfo.USES_POLICY_EXPIRE_PASSWORD) && dpm.hasGrantedPolicy(mAdminName DeviceAdminInfo.USES_ENCRYPTED_STORAGE)&& dpm.hasGrantedPolicy(mAdminName DeviceAdminInfo.USES_POLICY_DISABLE_CAMERA); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,onAdminEnabled,void  (boolean isEnabled){ if (!isEnabled) { deleteSecuredAccounts(mContext); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,onDeviceAdminReceiverMessage,public static void  (Context context int message){ SecurityPolicy instance=SecurityPolicy.getInstance(context); switch (message) { case DEVICE_ADMIN_MESSAGE_ENABLED: instance.onAdminEnabled(true); break; case DEVICE_ADMIN_MESSAGE_DISABLED: instance.onAdminEnabled(false); break; case DEVICE_ADMIN_MESSAGE_PASSWORD_CHANGED: Account.clearSecurityHoldOnAllAccounts(context); final NotificationController nc=NotificationControllerCreatorHolder.getInstance(context); nc.cancelPasswordExpirationNotifications(); break; case DEVICE_ADMIN_MESSAGE_PASSWORD_EXPIRING: instance.onPasswordExpiring(instance.mContext); break; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,onDisableRequested,@Override public CharSequence  (Context context Intent intent){ return context.getString(R.string.disable_admin_warning); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,onDisabled,@Override public void  (Context context Intent intent){ EmailBroadcastProcessorService.processDevicePolicyMessage(context DEVICE_ADMIN_MESSAGE_DISABLED); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,onEnabled,@Override public void  (Context context Intent intent){ EmailBroadcastProcessorService.processDevicePolicyMessage(context DEVICE_ADMIN_MESSAGE_ENABLED); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,onPasswordChanged,@Override public void  (Context context Intent intent){ EmailBroadcastProcessorService.processDevicePolicyMessage(context DEVICE_ADMIN_MESSAGE_PASSWORD_CHANGED); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,onPasswordExpiring,@Override public void  (Context context Intent intent){ EmailBroadcastProcessorService.processDevicePolicyMessage(context DEVICE_ADMIN_MESSAGE_PASSWORD_EXPIRING); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,policiesRequired,"public void  (long accountId){ Account account=Account.restoreAccountWithId(mContext accountId); if (account == null) return; if (account.mPolicyKey == 0) return; Policy policy=Policy.restorePolicyWithId(mContext account.mPolicyKey); if (policy == null) return; if (DebugUtils.DEBUG) { LogUtils.d(TAG ""policiesRequired for "" + account.mDisplayName + "": ""+ policy); } setAccountHoldFlag(mContext account true); final NotificationController nc=NotificationControllerCreatorHolder.getInstance(mContext); if (policy.mProtocolPoliciesUnsupported == null) { nc.showSecurityNeededNotification(account); } else { nc.showSecurityUnsupportedNotification(account); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,policiesUpdated,public synchronized void  (){ mAggregatePolicy=null; setActivePolicies(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,reducePolicies,"public void  (){ if (DebugUtils.DEBUG) { LogUtils.d(TAG ""reducePolicies""); } policiesUpdated(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,remoteWipe,"public void  (){ DevicePolicyManager dpm=getDPM(); if (dpm.isAdminActive(mAdminName)) { dpm.wipeData(DevicePolicyManager.WIPE_EXTERNAL_STORAGE); } else { LogUtils.d(Logging.LOG_TAG ""Could not remote wipe because not device admin.""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,setAccountHoldFlag,public static void  (Context context Account account boolean newState){ if (newState) { account.mFlags|=Account.FLAGS_SECURITY_HOLD; } else { account.mFlags&=~Account.FLAGS_SECURITY_HOLD; } ContentValues cv=new ContentValues(); cv.put(AccountColumns.FLAGS account.mFlags); account.update(context cv); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,setAccountPolicy,"public void  (long accountId Policy policy String securityKey boolean notify){ Account account=Account.restoreAccountWithId(mContext accountId); if (account == null) { return; } Policy oldPolicy=null; if (account.mPolicyKey > 0) { oldPolicy=Policy.restorePolicyWithId(mContext account.mPolicyKey); } if (oldPolicy != null && securityKey != null) { if ((oldPolicy.mDontAllowAttachments != policy.mDontAllowAttachments) || (oldPolicy.mMaxAttachmentSize != policy.mMaxAttachmentSize)) { Policy.setAttachmentFlagsForNewPolicy(mContext account policy); } } boolean policyChanged=(oldPolicy == null) || !oldPolicy.equals(policy); if (!policyChanged && (TextUtilities.stringOrNullEquals(securityKey account.mSecuritySyncKey))) { LogUtils.d(Logging.LOG_TAG ""setAccountPolicy; policy unchanged""); } else { setAccountPolicy(mContext account policy securityKey); policiesUpdated(); } boolean setHold=false; final NotificationController nc=NotificationControllerCreatorHolder.getInstance(mContext); if (policy.mProtocolPoliciesUnsupported != null) { LogUtils.d(Logging.LOG_TAG ""Notify policies for "" + account.mDisplayName + "" not supported.""); setHold=true; if (notify) { nc.showSecurityUnsupportedNotification(account); } Uri uri=EmailProvider.uiUri(""uiaccountdata"" accountId); mContext.getContentResolver().delete(uri null null); } else if (isActive(policy)) { if (policyChanged) { LogUtils.d(Logging.LOG_TAG ""Notify policies for "" + account.mDisplayName + "" changed.""); if (notify) { nc.showSecurityChangedNotification(account); } } else { LogUtils.d(Logging.LOG_TAG ""Policy is active and unchanged; do not notify.""); } } else { setHold=true; LogUtils.d(Logging.LOG_TAG ""Notify policies for "" + account.mDisplayName + "" are not being enforced.""); if (notify) { nc.showSecurityNeededNotification(account); } } setAccountHoldFlag(mContext account setHold); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,setActivePolicies,"public void  (){ DevicePolicyManager dpm=getDPM(); Policy aggregatePolicy=getAggregatePolicy(); if (aggregatePolicy == Policy.NO_POLICY) { if (DebugUtils.DEBUG) { LogUtils.d(TAG ""setActivePolicies: none  remove admin""); } dpm.removeActiveAdmin(mAdminName); } else if (isActiveAdmin()) { if (DebugUtils.DEBUG) { LogUtils.d(TAG ""setActivePolicies: "" + aggregatePolicy); } dpm.setPasswordQuality(mAdminName aggregatePolicy.getDPManagerPasswordQuality()); dpm.setPasswordMinimumLength(mAdminName aggregatePolicy.mPasswordMinLength); dpm.setMaximumTimeToLock(mAdminName aggregatePolicy.mMaxScreenLockTime * 1000); dpm.setMaximumFailedPasswordsForWipe(mAdminName aggregatePolicy.mPasswordMaxFails); dpm.setPasswordExpirationTimeout(mAdminName aggregatePolicy.getDPManagerPasswordExpirationTimeout()); dpm.setPasswordHistoryLength(mAdminName aggregatePolicy.mPasswordHistory); dpm.setPasswordMinimumSymbols(mAdminName 0); dpm.setPasswordMinimumNumeric(mAdminName 0); dpm.setPasswordMinimumNonLetter(mAdminName aggregatePolicy.mPasswordComplexChars); try { dpm.setCameraDisabled(mAdminName aggregatePolicy.mDontAllowCamera); } catch ( SecurityException e) { LogUtils.d(TAG ""SecurityException in setCameraDisabled  nothing changed""); } dpm.setStorageEncryption(mAdminName aggregatePolicy.mRequireEncryption); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,setContext,void  (Context context){ mContext=context; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,syncAccount,public void  (final Account account){ syncAccount(mContext account); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\SecurityPolicy.java,wipeExpiredAccounts,@VisibleForTesting static boolean  (Context context){ boolean result=false; Cursor c=context.getContentResolver().query(Policy.CONTENT_URI Policy.ID_PROJECTION HAS_PASSWORD_EXPIRATION null null); if (c == null) { return false; } try { while (c.moveToNext(
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,getAccountColor,@Override public int  (long accountId){ return ResourceHelper.getInstance(mContext).getAccountColor(accountId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,getConfigurationData,@Override public Bundle  (String accountType){ Bundle bundle=new Bundle(); bundle.putBoolean(Configuration.EXCHANGE_CONFIGURATION_USE_ALTERNATE_STRINGS VendorPolicyLoader.getInstance(mContext).useAlternateExchangeStrings()); return bundle; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,getDeviceId,@Override public String  (){ try { EmailAsyncTask.runAsyncSerial(new Runnable(){ @Override public void run(){ EmailServiceUtils.startRemoteServices(mContext); DebugUtils.updateLoggingFlags(mContext); } } ); return Device.getDeviceId(mContext); } catch ( I
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,onBind,@Override public IBinder  (Intent intent){ if (mContext == null) { mContext=this; } try { Device.getDeviceId(this); } catch ( IOException e) { } return mBinder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AccountService.java,run,@Override public void  (){ EmailServiceUtils.startRemoteServices(mContext); DebugUtils.updateLoggingFlags(mContext); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,ResourceHelper,private  (Context context){ mContext=context.getApplicationContext(); mResources=mContext.getResources(); mAccountColorArray=mResources.obtainTypedArray(R.array.combined_view_account_colors); mAccountColors=mResources.getIntArray(R.array.combined_view_account_colors); mAccountColorPaints=new Paint[mAccountColors.length]; for (int i=0; i < mAccountColors.length; i++) { Paint p=new Paint(); p.setColor(mAccountColors[i]); mAccountColorPaints[i]=p; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,getAccountColor,public int  (long accountId){ return mAccountColors[getAccountColorIndex(accountId)]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,getAccountColorId,public int  (long accountId){ return mAccountColorArray.getResourceId(getAccountColorIndex(accountId) UNDEFINED_RESOURCE_ID); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,getAccountColorIndex,int  (long accountId){ return Math.abs((int)((accountId - 1) % mAccountColors.length)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,getAccountColorPaint,public Paint  (long accountId){ return mAccountColorPaints[getAccountColorIndex(accountId)]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\ResourceHelper.java,getInstance,public static synchronized ResourceHelper  (Context context){ if (sInstance == null) { sInstance=new ResourceHelper(context); } return sInstance; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,Authenticator,public  (Context context){ super(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,addAccount,@Override public Bundle  (AccountAuthenticatorResponse response String accountType String authTokenType String[] requiredFeatures Bundle options) throws NetworkErrorException { final String protocol=EmailServiceUtils.getProtocolFromAccountType(Authenticat
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,confirmCredentials,@Override public Bundle  (AccountAuthenticatorResponse response Account account Bundle options){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,editProperties,@Override public Bundle  (AccountAuthenticatorResponse response String accountType){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,getAuthToken,@Override public Bundle  (AccountAuthenticatorResponse response Account account String authTokenType Bundle loginOptions) throws NetworkErrorException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,getAuthTokenLabel,@Override public String  (String authTokenType){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,hasFeatures,@Override public Bundle  (AccountAuthenticatorResponse response Account account String[] features) throws NetworkErrorException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,onBind,@Override public IBinder  (Intent intent){ if (AccountManager.ACTION_AUTHENTICATOR_INTENT.equals(intent.getAction())) { return new Authenticator(this).getIBinder(); } else { return null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AuthenticatorService.java,updateCredentials,@Override public Bundle  (AccountAuthenticatorResponse response Account account String authTokenType Bundle loginOptions){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,AccountManagerStub, (final Context context){ if (context != null) { mAccountManager=AccountManager.get(context); } else { mAccountManager=null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,DownloadRequest,private  (final DownloadRequest orig final long newTime){ mPriority=orig.mPriority; mAttachmentId=orig.mAttachmentId; mMessageId=orig.mMessageId; mAccountId=orig.mAccountId; mCreatedTime=newTime; mInProgress=orig.mInProgress; mLastStatusCode=orig.mLastStatusCode; mLastProgress=orig.mLastProgress; mLastCallbackTime=orig.mLastCallbackTime; mStartTime=orig.mStartTime; mRetryCount=orig.mRetryCount; mRetryStartTime=orig.mRetryStartTime; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,addRequest,"public boolean  (final DownloadRequest request) throws NullPointerException { if (request == null) { throw new NullPointerException(); } final long requestId=request.mAttachmentId; if (requestId < 0) { LogUtils.d(LOG_TAG ""Not adding a DownloadRequest with an invalid attachment id""); return false; } debugTrace(""Queuing DownloadRequest #%d"" requestId); synchronized (mLock) { final boolean exists=mRequestMap.containsKey(requestId); if (!exists) { mRequestQueue.offer(request); mRequestMap.put(requestId request); } else { debugTrace(""DownloadRequest #%d was already in the queue""); } } return true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,addServiceIntentForTest,void  (final long accountId final Intent intent){ mAccountServiceMap.put(accountId intent); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,attachmentChanged,"public static void  (final Context context final long id final int flags){ LogUtils.d(LOG_TAG ""Attachment with id: %d will potentially be queued for download"" id); final Intent intent=new Intent(context AttachmentService.class); debugTrace(""Calling startService with extras %d & %d"" id flags); intent.putExtra(EXTRA_ATTACHMENT_ID id); intent.putExtra(EXTRA_ATTACHMENT_FLAGS flags); context.startService(intent); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,canPrefetchForAccount,"public boolean  (final Account account final File dir){ if (account == null) return false; if ((account.mFlags & Account.FLAGS_BACKGROUND_ATTACHMENTS) == 0) { debugTrace(""Prefetch is not allowed for this account: %d"" account.getId()); return false; } final long totalStorage=dir.getTotalSpace(); final long usableStorage=dir.getUsableSpace(); final long minAvailable=(long)(totalStorage * PREFETCH_MINIMUM_STORAGE_AVAILABLE); if (usableStorage < minAvailable) { debugTrace(""Not enough physical storage for prefetch""); return false; } final int numberOfAccounts=mAccountManagerStub.getNumberOfAccounts(); final long perAccountMaxStorage=(long)(totalStorage * PREFETCH_MAXIMUM_ATTACHMENT_STORAGE / numberOfAccounts); Long accountStorage=mAttachmentStorageMap.get(account.mId); if (accountStorage == null || (accountStorage > perAccountMaxStorage)) { accountStorage=0L; File[] files=dir.listFiles(); if (files != null) { for ( File file : files) { accountStorage+=file.length(); } } mAttachmentStorageMap.put(account.mId accountStorage); } if (accountStorage >= perAccountMaxStorage) { debugTrace(""Prefetch not allowed for account %d; used: %d  limit %d"" account.mId accountStorage perAccountMaxStorage); return false; } return true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,cancelDownload,"synchronized void  (final DownloadRequest req){ LogUtils.d(LOG_TAG ""Cancelling download for Attachment #%d"" req.mAttachmentId); req.mInProgress=false; mDownloadsInProgress.remove(req.mAttachmentId); mDownloadQueue.removeRequest(req); req.mRetryCount++; if (req.mRetryCount > CONNECTION_ERROR_MAX_RETRIES) { LogUtils.w(LOG_TAG ""Too many failures giving up on Attachment #%d"" req.mAttachmentId); } else { debugTrace(""Moving to end of queue  will retry #%d"" req.mAttachmentId); final DownloadRequest newReq=new DownloadRequest(req SystemClock.elapsedRealtime()); mDownloadQueue.addRequest(newReq); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,compare,@Override public int  (DownloadRequest req1 DownloadRequest req2){ int res; if (req1.mPriority != req2.mPriority) { res=(req1.mPriority < req2.mPriority) ? -1 : 1; } else { if (req1.mCreatedTime == req2.mCreatedTime) { res=0; } else { res=(req1.mCreatedTi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,debugTrace,static private void  (final String format final Object... args){ if (ENABLE_ATTACHMENT_SERVICE_DEBUG > 0) { LogUtils.d(LOG_TAG String.format(format args)); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,dump,"@Override public void  (final FileDescriptor fd final PrintWriter pw final String[] args){ pw.println(""AttachmentService""); final long time=System.currentTimeMillis(); synchronized (mDownloadQueue) { pw.println("" Queue  "" + mDownloadQueue.getSize() + "" en"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,dumpInProgressDownloads,"synchronized public void  (){ if (ENABLE_ATTACHMENT_SERVICE_DEBUG < 1) { LogUtils.d(LOG_TAG ""Advanced logging not configured.""); } LogUtils.d(LOG_TAG ""Here are the in-progress downloads...""); for ( final DownloadRequest req : mDownloadsInProgress.values()) { LogUtils.d(LOG_TAG ""--BEGIN DownloadRequest DUMP--""); LogUtils.d(LOG_TAG ""Account: #%d"" req.mAccountId); LogUtils.d(LOG_TAG ""Message: #%d"" req.mMessageId); LogUtils.d(LOG_TAG ""Attachment: #%d"" req.mAttachmentId); LogUtils.d(LOG_TAG ""Created Time: %d"" req.mCreatedTime); LogUtils.d(LOG_TAG ""Priority: %d"" req.mPriority); if (req.mInProgress == true) { LogUtils.d(LOG_TAG ""This download is in progress""); } else { LogUtils.d(LOG_TAG ""This download is not in progress""); } LogUtils.d(LOG_TAG ""Start Time: %d"" req.mStartTime); LogUtils.d(LOG_TAG ""Retry Count: %d"" req.mRetryCount); LogUtils.d(LOG_TAG ""Retry Start Tiome: %d"" req.mRetryStartTime); LogUtils.d(LOG_TAG ""Last Status Code: %d"" req.mLastStatusCode); LogUtils.d(LOG_TAG ""Last Progress: %d"" req.mLastProgress); LogUtils.d(LOG_TAG ""Last Callback Time: %d"" req.mLastCallbackTime); LogUtils.d(LOG_TAG ""------------------------------""); } LogUtils.d(LOG_TAG ""Done reporting in-progress downloads...""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,endDownload,"synchronized void  (final long attachmentId final int statusCode){ LogUtils.d(LOG_TAG ""Finishing download #%d"" attachmentId); mDownloadsInProgress.remove(attachmentId); Integer downloadCount; downloadCount=mAttachmentFailureMap.remove(attachmentId); if (statusCode != EmailServiceStatus.SUCCESS) { if (downloadCount == null) { downloadCount=0; } downloadCount+=1; LogUtils.w(LOG_TAG ""This attachment failed  adding #%d to failure map"" attachmentId); mAttachmentFailureMap.put(attachmentId downloadCount); } final DownloadRequest req=mDownloadQueue.findRequestById(attachmentId); if (statusCode == EmailServiceStatus.CONNECTION_ERROR) { if (req != null) { req.mRetryCount++; if (req.mRetryCount > CONNECTION_ERROR_MAX_RETRIES) { LogUtils.w(LOG_TAG ""Too many tried for connection errors  giving up #%d"" attachmentId); mDownloadQueue.removeRequest(req); } else if (req.mRetryCount > CONNECTION_ERROR_DELAY_THRESHOLD) { LogUtils.w(LOG_TAG ""ConnectionError #%d  retried %d times  adding delay"" attachmentId req.mRetryCount); req.mInProgress=false; req.mRetryStartTime=SystemClock.elapsedRealtime() + CONNECTION_ERROR_RETRY_MILLIS; mWatchdog.setWatchdogAlarm(this CONNECTION_ERROR_RETRY_MILLIS CALLBACK_TIMEOUT); } else { LogUtils.w(LOG_TAG ""ConnectionError for #%d  retried %d times  adding delay"" attachmentId req.mRetryCount); req.mInProgress=false; req.mRetryStartTime=0; kick(); } } return; } if (req != null) { mDownloadQueue.removeRequest(req); } if (ENABLE_ATTACHMENT_SERVICE_DEBUG > 0) { long secs=0; if (req != null) { secs=(System.currentTimeMillis() - req.mCreatedTime) / 1000; } final String status=(statusCode == EmailServiceStatus.SUCCESS) ? ""Success"" : ""Error "" + statusCode; debugTrace(""Download finished for attachment #%d; %d seconds from request  status: %s"" attachmentId secs status); } final Attachment attachment=Attachment.restoreAttachmentWithId(this attachmentId); if (attachment != null) { final long accountId=attachment.mAccountKey; Long currentStorage=mAttachmentStorageMap.get(accountId); if (currentStorage == null) { currentStorage=0L; } mAttachmentStorageMap.put(accountId currentStorage + attachment.mSize); boolean deleted=false; if ((attachment.mFlags & Attachment.FLAG_DOWNLOAD_FORWARD) != 0) { if (statusCode == EmailServiceStatus.ATTACHMENT_NOT_FOUND) { EmailContent.delete(this Attachment.CONTENT_URI attachment.mId); final NotificationController nc=NotificationControllerCreatorHolder.getInstance(this); if (nc != null) { nc.showDownloadForwardFailedNotificationSynchronous(attachment); } deleted=true; LogUtils.w(LOG_TAG ""Deleting forwarded attachment #%d for message #%d"" attachmentId attachment.mMessageKey); } if ((req != null) && !Utility.hasUnloadedAttachments(this attachment.mMessageKey)) { debugTrace(""Downloads finished for outgoing msg #%d"" req.mMessageId); EmailServiceProxy service=EmailServiceUtils.getServiceForAccount(this accountId); try { service.sendMail(accountId); } catch ( RemoteException e) { LogUtils.e(LOG_TAG ""RemoteException while trying to send message: #%d  %s"" req.mMessageId e.toString()); } } } if (statusCode == EmailServiceStatus.MESSAGE_NOT_FOUND) { Message msg=Message.restoreMessageWithId(this attachment.mMessageKey); if (msg == null) { LogUtils.w(LOG_TAG ""Deleting attachment #%d with no associated message #%d"" attachment.mId attachment.mMessageKey); EmailContent.delete(this Attachment.CONTENT_URI attachment.mId); } else { LogUtils.w(LOG_TAG ""Retrying attachment #%d with associated message #%d"" attachment.mId attachment.mMessageKey); kick(); return; } } else if (!deleted) { LogUtils.d(LOG_TAG ""Attachment #%d successfully downloaded!"" attachment.mId); markAttachmentAsCompleted(attachment); } } kick(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,equals,@Override public boolean  (final Object object){ if (!(object instanceof DownloadRequest)) return false; final DownloadRequest req=(DownloadRequest)object; return req.mAttachmentId == mAttachmentId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,findRequestById,public DownloadRequest  (final long requestId){ if (requestId < 0) { return null; } synchronized (mLock) { return mRequestMap.get(requestId); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,getAttachmentPriority,private static int  (final Attachment att){ int priorityClass=PRIORITY_NONE; final int flags=att.mFlags; if ((flags & Attachment.FLAG_DOWNLOAD_FORWARD) != 0) { priorityClass=PRIORITY_SEND_MAIL; } else if ((flags & Attachment.FLAG_DOWNLOAD_USER_REQUEST) != 0) { priorityClass=PRIORITY_FOREGROUND; } return priorityClass; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,getAttachmentUpdateValues,ContentValues  (final Attachment attachment final int statusCode final int progress){ final ContentValues values=new ContentValues(); if (attachment != null) { if (statusCode == EmailServiceStatus.IN_PROGRESS) { values.put(AttachmentColumns.UI_STATE AttachmentState.DOWNLOADING); values.put(AttachmentColumns.UI_DOWNLOADED_SIZE attachment.mSize * progress / 100); } } return values; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,getDownloadsForAccount,synchronized int  (final long accountId){ int count=0; for ( final DownloadRequest req : mDownloadsInProgress.values()) { if (req.mAccountId == accountId) { count++; } } return count; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,getNextRequest,"public DownloadRequest  (){ final DownloadRequest returnRequest; synchronized (mLock) { returnRequest=mRequestQueue.poll(); if (returnRequest != null) { final long requestId=returnRequest.mAttachmentId; mRequestMap.remove(requestId); } } if (returnRequest != null) { debugTrace(""Retrieved DownloadRequest #%d"" returnRequest.mAttachmentId); } return returnRequest; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,getNumberOfAccounts,int  (){ if (mAccountManager != null) { return mAccountManager.getAccounts().length; } else { return mNumberOfAccounts; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,getSize,public int  (){ synchronized (mLock) { return mRequestMap.size(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,hashCode,@Override public int  (){ return (int)mAttachmentId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,isConnected,boolean  (){ if (mConnectivityManager != null) { return mConnectivityManager.hasConnectivity(); } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,isEmpty,public boolean  (){ synchronized (mLock) { return mRequestMap.isEmpty(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,issueNextWatchdogAlarm,"void  (final AttachmentService service){ if (!service.mDownloadsInProgress.isEmpty()) { debugTrace(""Rescheduling watchdog...""); setWatchdogAlarm(service); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,kick,private void  (){ synchronized (mLock) { mLock.notify(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,loadAttachmentStatus,"@Override public void  (final long messageId final long attachmentId final int statusCode final int progress){ debugTrace(LOG_TAG ""ServiceCallback for attachment #%d"" attachmentId); final DownloadRequest req=mDownloadsInProgress.get(attachmentId); if (req"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,markAttachmentAsCompleted,void  (final Attachment att){ final ContentValues cv=new ContentValues(); final int flags=Attachment.FLAG_DOWNLOAD_FORWARD | Attachment.FLAG_DOWNLOAD_USER_REQUEST; cv.put(AttachmentColumns.FLAGS att.mFlags&=~flags); cv.put(AttachmentColumns.UI_STATE AttachmentState.SAVED); att.update(this cv); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,markAttachmentAsFailed,void  (final Attachment att){ final ContentValues cv=new ContentValues(); final int flags=Attachment.FLAG_DOWNLOAD_FORWARD | Attachment.FLAG_DOWNLOAD_USER_REQUEST; cv.put(AttachmentColumns.FLAGS att.mFlags&=~flags); cv.put(AttachmentColumns.UI_STATE AttachmentState.FAILED); att.update(this cv); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,onBind,@Override public IBinder  (final Intent intent){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,onChange,"public synchronized void  (final Context context final Attachment att){ debugTrace(""onChange() for Attachment: #%d"" att.mId); DownloadRequest req=mDownloadQueue.findRequestById(att.mId); final long priority=getAttachmentPriority(att); if (priority == PRIORITY_NONE) { LogUtils.d(LOG_TAG ""Attachment #%d has no priority and will not be downloaded"" att.mId); if (req != null) { mDownloadQueue.removeRequest(req); } } else { if (mDownloadsInProgress.containsKey(att.mId)) { debugTrace(""Attachment #%d was already in the queue"" att.mId); return; } if (req == null) { LogUtils.d(LOG_TAG ""Attachment #%d is a new download request"" att.mId); req=new DownloadRequest(context att); final AttachmentInfo attachInfo=new AttachmentInfo(context att); if (!attachInfo.isEligibleForDownload()) { LogUtils.w(LOG_TAG ""Attachment #%d is not eligible for download"" att.mId); if (((att.mFlags & Attachment.FLAG_DOWNLOAD_USER_REQUEST) != 0) || ((att.mFlags & Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD) != 0)) { LogUtils.w(LOG_TAG ""Attachment #%d cannot be downloaded ever"" att.mId); markAttachmentAsFailed(att); return; } } mDownloadQueue.addRequest(req); } LogUtils.d(LOG_TAG ""Attachment #%d queued for download  priority: %d  created time: %d"" att.mId req.mPriority req.mCreatedTime); } kick(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,onCreate,"@Override public void  (){ new Thread(this ""AttachmentService"").start(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,onDestroy,"@Override public void  (){ debugTrace(""Destroying AttachmentService object""); dumpInProgressDownloads(); mStop=true; if (sRunningService != null) { kick(); sRunningService=null; } if (mConnectivityManager != null) { mConnectivityManager.unregister(); mCon"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,onReceive,@Override public void  (final Context context final Intent intent){ final int callbackTimeout=intent.getIntExtra(EXTRA_CALLBACK_TIMEOUT CALLBACK_TIMEOUT); new Thread(new Runnable(){ @Override public void run(){ final AttachmentService service=AttachmentSe
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,onStartCommand,@Override public int  (final Intent intent final int flags final int startId){ if (sRunningService == null) { sRunningService=this; } if (intent != null) { final long attachment_id=intent.getLongExtra(EXTRA_ATTACHMENT_ID -1); final int attachment_flags=in
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,AttachmentsCursor,"public  (Context context Cursor cursor){ super(cursor); mContentUriIndex=cursor.getColumnIndex(UIProvider.AttachmentColumns.CONTENT_URI); mUriIndex=cursor.getColumnIndex(UIProvider.AttachmentColumns.URI); mContext=context; mContentUriStrings=new String[cursor.getCount()]; if (mContentUriIndex == -1) { return; } while (cursor.moveToNext()) { final int index=cursor.getPosition(); final Uri uri=Uri.parse(getString(mUriIndex)); final long id=Long.parseLong(uri.getLastPathSegment()); final Attachment att=Attachment.restoreAttachmentWithId(mContext id); if (att == null) { mContentUriStrings[index]=""""; continue; } if (!TextUtils.isEmpty(att.getCachedFileUri())) { mContentUriStrings[index]=att.getCachedFileUri(); continue; } final String contentUri; if (att.mUiDestination == UIProvider.AttachmentDestination.EXTERNAL && att.mUiState == UIProvider.AttachmentState.SAVED && TextUtils.equals(att.mMimeType MimeType.ANDROID_ARCHIVE)) { contentUri=att.getContentUri(); } else { final String attUriString=att.getContentUri(); final String authority; if (!TextUtils.isEmpty(attUriString)) { authority=Uri.parse(attUriString).getAuthority(); } else { authority=null; } if (TextUtils.equals(authority Attachment.ATTACHMENT_PROVIDER_AUTHORITY)) { contentUri=attUriString; } else { contentUri=AttachmentUtilities.getAttachmentUri(att.mAccountKey id).toString(); } } mContentUriStrings[index]=contentUri; } cursor.moveToPosition(-1); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,CloseDetectingCursor,public  (Cursor cursor){ super(cursor); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,MessageQuery, (String _query String _attachmentJson){ query=_query; attachmentJson=_attachmentJson; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,SyncRequestMessage,private  (final String authority final android.accounts.Account account final long mailboxId){ mAuthority=authority; mAccount=account; mMailboxId=mailboxId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,processQueue,"synchronized void  (){ debugTrace(""Processing changed queue  num entries: %d"" sAttachmentChangedQueue.size()); long[] change=sAttachmentChangedQueue.poll(); while (change != null) { final long id=change[0]; final long flags=change[1]; final Attachment attachment=Attachment.restoreAttachmentWithId(this id); if (attachment == null) { LogUtils.w(LOG_TAG ""Could not restore attachment #%d"" id); } else { attachment.mFlags=(int)flags; onChange(this attachment); } change=sAttachmentChangedQueue.poll(); } debugTrace(""Processing download queue  num entries: %d"" mDownloadQueue.getSize()); while (mDownloadsInProgress.size() < MAX_SIMULTANEOUS_DOWNLOADS) { final DownloadRequest req=mDownloadQueue.getNextRequest(); if (req == null) { break; } if (getDownloadsForAccount(req.mAccountId) >= MAX_SIMULTANEOUS_DOWNLOADS_PER_ACCOUNT) { LogUtils.w(LOG_TAG ""Skipping #%d; maxed for acct %d"" req.mAttachmentId req.mAccountId); continue; } if (Attachment.restoreAttachmentWithId(this req.mAttachmentId) == null) { LogUtils.e(LOG_TAG ""Could not load attachment: #%d"" req.mAttachmentId); continue; } if (!req.mInProgress) { final long currentTime=SystemClock.elapsedRealtime(); if (req.mRetryCount > 0 && req.mRetryStartTime > currentTime) { debugTrace(""Need to wait before retrying attachment #%d"" req.mAttachmentId); mWatchdog.setWatchdogAlarm(this CONNECTION_ERROR_RETRY_MILLIS CALLBACK_TIMEOUT); continue; } tryStartDownload(req); } } final EmailConnectivityManager ecm=mConnectivityManager; if ((ecm == null) || !ecm.isAutoSyncAllowed() || (ecm.getActiveNetworkType() != ConnectivityManager.TYPE_WIFI)) { LogUtils.d(LOG_TAG ""Skipping opportunistic downloads since WIFI is not available""); return; } final int availableBackgroundThreads=MAX_SIMULTANEOUS_DOWNLOADS - mDownloadsInProgress.size(); if (availableBackgroundThreads < 1) { LogUtils.d(LOG_TAG ""Skipping opportunistic downloads  %d threads available"" availableBackgroundThreads); dumpInProgressDownloads(); return; } debugTrace(""Launching up to %d opportunistic downloads"" availableBackgroundThreads); final Uri lookupUri=EmailContent.uriWithLimit(Attachment.CONTENT_URI MAX_ATTACHMENTS_TO_CHECK); final Cursor c=this.getContentResolver().query(lookupUri Attachment.CONTENT_PROJECTION EmailContent.Attachment.PRECACHE_INBOX_SELECTION null AttachmentColumns._ID + "" DESC""); File cacheDir=this.getCacheDir(); try { while (c.moveToNext()) { final Attachment att=new Attachment(); att.restore(c); final Account account=Account.restoreAccountWithId(this att.mAccountKey); if (account == null) { debugTrace(""Found orphaned attachment #%d"" att.mId); EmailContent.delete(this Attachment.CONTENT_URI att.mId); } else { final AttachmentInfo info=new AttachmentInfo(this att); if (info.isEligibleForDownload()) { if (att.mContentId != null || canPrefetchForAccount(account cacheDir)) { final Integer tryCount=mAttachmentFailureMap.get(att.mId); if (tryCount != null && tryCount > MAX_DOWNLOAD_RETRIES) { LogUtils.w(LOG_TAG ""Too many failed attempts for attachment #%d "" att.mId); continue; } final DownloadRequest req=new DownloadRequest(this att); tryStartDownload(req); break; } } else { LogUtils.w(LOG_TAG ""Skipping attachment #%d  it is ineligible"" att.mId); } } } } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,removeRequest,"public boolean  (final DownloadRequest request){ if (request == null) { return true; } debugTrace(""Removing DownloadRequest #%d"" request.mAttachmentId); final boolean result; synchronized (mLock) { result=mRequestQueue.remove(request); if (result) { mRequestMap.remove(request.mAttachmentId); } return result; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,run,@Override public void  (){ mConnectivityManager=new EmailConnectivityManager(this LOG_TAG); mAccountManagerStub=new AccountManagerStub(this); final int mask=Attachment.FLAG_DOWNLOAD_FORWARD | Attachment.FLAG_DOWNLOAD_USER_REQUEST; final Cursor c=getConten
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,setNumberOfAccounts,void  (final int numberOfAccounts){ mNumberOfAccounts=numberOfAccounts; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,setWatchdogAlarm,public void  (final Context context){ setWatchdogAlarm(context WATCHDOG_CHECK_INTERVAL CALLBACK_TIMEOUT); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,startDownload,"private void  (final EmailServiceProxy service final DownloadRequest req) throws RemoteException { LogUtils.d(LOG_TAG ""Starting download for Attachment #%d"" req.mAttachmentId); req.mStartTime=System.currentTimeMillis(); req.mInProgress=true; mDownloadsInProgress.put(req.mAttachmentId req); service.loadAttachment(mServiceCallback req.mAccountId req.mAttachmentId req.mPriority != PRIORITY_FOREGROUND); mWatchdog.setWatchdogAlarm(this); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,addCombinedAccountRow,"private void  (MatrixCursor mc){ final long lastUsedAccountId=Preferences.getPreferences(getContext()).getLastUsedAccountId(); final long id=Account.getDefaultAccountId(getContext() lastUsedAccountId); if (id == Account.NO_ACCOUNT) return; final ImmutableMap.Builder<String Integer> builder=new ImmutableMap.Builder<String Integer>(); final String[] columnNames=mc.getColumnNames(); for (int i=0; i < columnNames.length; i++) { builder.put(columnNames[i] i); } final Map<String Integer> colPosMap=builder.build(); final MailPrefs mailPrefs=MailPrefs.get(getContext()); final Object[] values=new Object[columnNames.length]; if (colPosMap.containsKey(BaseColumns._ID)) { values[colPosMap.get(BaseColumns._ID)]=0; } if (colPosMap.containsKey(UIProvider.AccountColumns.CAPABILITIES)) { values[colPosMap.get(UIProvider.AccountColumns.CAPABILITIES)]=AccountCapabilities.UNDO | AccountCapabilities.VIRTUAL_ACCOUNT | AccountCapabilities.CLIENT_SANITIZED_HTML; } if (colPosMap.containsKey(UIProvider.AccountColumns.FOLDER_LIST_URI)) { values[colPosMap.get(UIProvider.AccountColumns.FOLDER_LIST_URI)]=combinedUriString(""uifolders"" COMBINED_ACCOUNT_ID_STRING); } if (colPosMap.containsKey(UIProvider.AccountColumns.NAME)) { values[colPosMap.get(UIProvider.AccountColumns.NAME)]=getContext().getString(R.string.mailbox_list_account_selector_combined_view); } if (colPosMap.containsKey(UIProvider.AccountColumns.ACCOUNT_MANAGER_NAME)) { values[colPosMap.get(UIProvider.AccountColumns.ACCOUNT_MANAGER_NAME)]=getContext().getString(R.string.mailbox_list_account_selector_combined_view); } if (colPosMap.containsKey(UIProvider.AccountColumns.ACCOUNT_ID)) { values[colPosMap.get(UIProvider.AccountColumns.ACCOUNT_ID)]=""Account Id""; } if (colPosMap.containsKey(UIProvider.AccountColumns.TYPE)) { values[colPosMap.get(UIProvider.AccountColumns.TYPE)]=""unknown""; } if (colPosMap.containsKey(UIProvider.AccountColumns.UNDO_URI)) { values[colPosMap.get(UIProvider.AccountColumns.UNDO_URI)]=""'content://"" + EmailContent.AUTHORITY + ""/uiundo'""; } if (colPosMap.containsKey(UIProvider.AccountColumns.URI)) { values[colPosMap.get(UIProvider.AccountColumns.URI)]=combinedUriString(""uiaccount"" COMBINED_ACCOUNT_ID_STRING); } if (colPosMap.containsKey(UIProvider.AccountColumns.MIME_TYPE)) { values[colPosMap.get(UIProvider.AccountColumns.MIME_TYPE)]=EMAIL_APP_MIME_TYPE; } if (colPosMap.containsKey(UIProvider.AccountColumns.SECURITY_HOLD)) { values[colPosMap.get(UIProvider.AccountColumns.SECURITY_HOLD)]=0; } if (colPosMap.containsKey(UIProvider.AccountColumns.ACCOUNT_SECURITY_URI)) { values[colPosMap.get(UIProvider.AccountColumns.ACCOUNT_SECURITY_URI)]=""""; } if (colPosMap.containsKey(UIProvider.AccountColumns.SETTINGS_INTENT_URI)) { values[colPosMap.get(UIProvider.AccountColumns.SETTINGS_INTENT_URI)]=getExternalUriString(""settings"" COMBINED_ACCOUNT_ID_STRING); } if (colPosMap.containsKey(UIProvider.AccountColumns.COMPOSE_URI)) { values[colPosMap.get(UIProvider.AccountColumns.COMPOSE_URI)]=getExternalUriStringEmail2(""compose"" Long.toString(id)); } if (colPosMap.containsKey(UIProvider.AccountColumns.UPDATE_SETTINGS_URI)) { values[colPosMap.get(UIProvider.AccountColumns.UPDATE_SETTINGS_URI)]=uiUriString(""uiacctsettings"" -1); } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.AUTO_ADVANCE)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.AUTO_ADVANCE)]=Integer.toString(mailPrefs.getAutoAdvanceMode()); } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.SNAP_HEADERS)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.SNAP_HEADERS)]=Integer.toString(UIProvider.SnapHeaderValue.ALWAYS); } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.REPLY_BEHAVIOR)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.REPLY_BEHAVIOR)]=Integer.toString(mailPrefs.getDefaultReplyAll() ? UIProvider.DefaultReplyBehavior.REPLY_ALL : UIProvider.DefaultReplyBehavior.REPLY); } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.CONV_LIST_ICON)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.CONV_LIST_ICON)]=getConversationListIcon(mailPrefs); } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.CONFIRM_DELETE)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.CONFIRM_DELETE)]=mailPrefs.getConfirmDelete() ? 1 : 0; } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.CONFIRM_ARCHIVE)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.CONFIRM_ARCHIVE)]=0; } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.CONFIRM_SEND)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.CONFIRM_SEND)]=mailPrefs.getConfirmSend() ? 1 : 0; } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.DEFAULT_INBOX)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.DEFAULT_INBOX)]=combinedUriString(""uifolder"" combinedMailboxId(Mailbox.TYPE_INBOX)); } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.MOVE_TO_INBOX)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.MOVE_TO_INBOX)]=combinedUriString(""uifolder"" combinedMailboxId(Mailbox.TYPE_INBOX)); } if (colPosMap.containsKey(UIProvider.AccountColumns.SettingsColumns.SHOW_IMAGES)) { values[colPosMap.get(UIProvider.AccountColumns.SettingsColumns.SHOW_IMAGES)]=Settings.ShowImages.ASK_FIRST; } mc.addRow(values); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,addToMessageMove,private void  (final SQLiteDatabase db final String messageId final long dstFolderKey){ db.execSQL(String.format(Locale.US MESSAGE_MOVE_INSERT MessageMove.TABLE_NAME messageId messageId messageId messageId dstFolderKey messageId dstFolderKey)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,addToMessageStateChange,private void  (final SQLiteDatabase db final String messageId final int newFlagRead final int newFlagFavorite){ db.execSQL(String.format(Locale.US MESSAGE_STATE_CHANGE_INSERT MessageStateChange.TABLE_NAME messageId messageId messageId messageId newFlagRead messageId newFlagFavorite)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,addToSequence,private void  (Uri uri ContentProviderOperation op){ String sequenceString=uri.getQueryParameter(UIProvider.SEQUENCE_QUERY_PARAMETER); if (sequenceString != null) { int sequence=Integer.parseInt(sequenceString); if (sequence > mLastSequence) { mLastSequenceOps.clear(); mLastSequence=sequence; } mLastSequenceOps.add(op); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,appendConversationInfoColumns,private static void  (final StringBuilder stringBuilder){ stringBuilder.append(' ').append(MessageColumns.DISPLAY_NAME).append(' ').append(MessageColumns.FROM_LIST).append(' ').append(MessageColumns.TO_LIST); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,applyBatch,@Override public ContentProviderResult[]  (ArrayList<ContentProviderOperation> operations) throws OperationApplicationException { setBatchNotificationsSet(Sets.<Uri>newHashSet()); Context context=getContext(); SQLiteDatabase db=getDatabase(context); db.be
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,attachmentChanged,@Override public void  (final Context context final long id final int flags){ AttachmentService.attachmentChanged(context id flags); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,backupAccounts,"private static int  (final Context context final SQLiteDatabase db){ final AccountManager am=AccountManager.get(context); final Cursor accountCursor=db.query(Account.TABLE_NAME Account.CONTENT_PROJECTION null null null null null); int updatedCount=0; try { while (accountCursor.moveToNext()) { final Account account=new Account(); account.restore(accountCursor); EmailServiceInfo serviceInfo=EmailServiceUtils.getServiceInfo(context account.getProtocol(context)); if (serviceInfo == null) { LogUtils.d(LogUtils.TAG ""Could not find service info for account""); continue; } final String jsonString=account.toJsonString(context); final android.accounts.Account amAccount=account.getAccountManagerAccount(serviceInfo.accountType); am.setUserData(amAccount ACCOUNT_MANAGER_JSON_TAG jsonString); updatedCount++; } } finally { accountCursor.close(); } return updatedCount; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,call,"@Override public Bundle  (String method String arg Bundle extras){ LogUtils.d(TAG ""EmailProvider#call(%s  %s)"" method arg); if (TextUtils.equals(method EmailContent.DEVICE_FRIENDLY_NAME)) { final Bundle bundle=new Bundle(1); bundle.putString(EmailContent."
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,checkDatabases,"public void  (){ synchronized (sDatabaseLock) { if (mDatabase != null) { mDatabase=null; } if (mBodyDatabase != null) { mBodyDatabase=null; } final File databaseFile=getContext().getDatabasePath(DATABASE_NAME); final File bodyFile=getContext().getDatabasePath(BODY_DATABASE_NAME); if (databaseFile.exists() && !bodyFile.exists()) { LogUtils.w(TAG ""Deleting orphaned EmailProvider database...""); getContext().deleteDatabase(DATABASE_NAME); } else if (bodyFile.exists() && !databaseFile.exists()) { LogUtils.w(TAG ""Deleting orphaned EmailProviderBody database...""); getContext().deleteDatabase(BODY_DATABASE_NAME); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,close,"@Override public void  (){ super.close(); LogUtils.d(TAG ""Closing cursor"" new Error()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,combinedMailboxId,private static String  (int type){ return Long.toString(Account.ACCOUNT_ID_COMBINED_VIEW + type); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,combinedUriString,"private static String  (String type String id){ return ""content://"" + EmailContent.AUTHORITY + ""/""+ type+ ""/""+ id; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,convertToEmailProviderUri,"private static Uri  (Uri uri Uri newBaseUri boolean asProvider){ final String idString=uri.getLastPathSegment(); try { final long id=Long.parseLong(idString); Uri ourUri=ContentUris.withAppendedId(newBaseUri id); if (asProvider) { ourUri=ourUri.buildUpon().appendQueryParameter(IS_UIPROVIDER ""true"").build(); } return ourUri; } catch ( NumberFormatException e) { return null; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,convertUiAttachmentToAttachment,"private static Attachment  (com.android.mail.providers.Attachment uiAtt String cachedFile long accountKey){ final Attachment att=new Attachment(); att.setContentUri(uiAtt.contentUri.toString()); if (!TextUtils.isEmpty(cachedFile)) { final Uri.Builder cachedFileBuilder=Uri.parse(""content://"" + EmailContent.AUTHORITY + ""/attachment/cachedFile"").buildUpon(); cachedFileBuilder.appendQueryParameter(Attachment.CACHED_FILE_QUERY_PARAM cachedFile); att.setCachedFileUri(cachedFileBuilder.build().toString()); } att.mAccountKey=accountKey; att.mFileName=uiAtt.getName(); att.mMimeType=uiAtt.getContentType(); att.mSize=uiAtt.size; return att; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,convertUiMessageValues,"private ContentValues  (Message message ContentValues values){ final ContentValues ourValues=new ContentValues(); for ( String columnName : values.keySet()) { final Object val=values.get(columnName); if (columnName.equals(UIProvider.ConversationColumns.STARRED)) { putIntegerLongOrBoolean(ourValues MessageColumns.FLAG_FAVORITE val); } else if (columnName.equals(UIProvider.ConversationColumns.READ)) { putIntegerLongOrBoolean(ourValues MessageColumns.FLAG_READ val); } else if (columnName.equals(UIProvider.ConversationColumns.SEEN)) { putIntegerLongOrBoolean(ourValues MessageColumns.FLAG_SEEN val); } else if (columnName.equals(MessageColumns.MAILBOX_KEY)) { putIntegerLongOrBoolean(ourValues MessageColumns.MAILBOX_KEY val); } else if (columnName.equals(UIProvider.ConversationOperations.FOLDERS_UPDATED)) { } else if (columnName.equals(UIProvider.ConversationColumns.RAW_FOLDERS)) { final FolderList flist=FolderList.fromBlob(values.getAsByteArray(columnName)); if (flist.folders.size() != 1) { LogUtils.e(TAG ""Incorrect number of folders for this message: Message is %s"" message.mId); } else { final Folder f=flist.folders.get(0); final Uri uri=f.folderUri.fullUri; final Long mailboxId=Long.parseLong(uri.getLastPathSegment()); putIntegerLongOrBoolean(ourValues MessageColumns.MAILBOX_KEY mailboxId); } } else if (columnName.equals(UIProvider.MessageColumns.ALWAYS_SHOW_IMAGES)) { Address[] fromList=Address.fromHeader(message.mFrom); final MailPrefs mailPrefs=MailPrefs.get(getContext()); for ( Address sender : fromList) { final String email=sender.getAddress(); mailPrefs.setDisplayImagesFromSender(email null); } } else if (columnName.equals(UIProvider.ConversationColumns.VIEWED) || columnName.equals(UIProvider.ConversationOperations.Parameters.SUPPRESS_UNDO)) { } else if (UIProvider.ConversationColumns.CONVERSATION_INFO.equals(columnName)) { } else { throw new IllegalArgumentException(""Can't update "" + columnName + "" in message""); } } return ourValues; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,copyAccountTables,"private static int  (SQLiteDatabase fromDatabase SQLiteDatabase toDatabase){ if (fromDatabase == null || toDatabase == null) return -1; int copyCount=0; fromDatabase.beginTransaction(); try { toDatabase.beginTransaction(); try { toDatabase.delete(Account.TABLE_NAME null null); toDatabase.delete(HostAuth.TABLE_NAME null null); Cursor c=fromDatabase.query(Account.TABLE_NAME Account.CONTENT_PROJECTION null null null null null); if (c == null) return 0; LogUtils.d(TAG ""fromDatabase accounts: "" + c.getCount()); try { while (c.moveToNext()) { Account account=new Account(); account.restore(c); account.mSecuritySyncKey=null; account.mSyncKey=null; account.mPolicyKey=0; HostAuth hostAuth=restoreHostAuth(fromDatabase account.mHostAuthKeyRecv); if (hostAuth == null) continue; account.mHostAuthKeyRecv=toDatabase.insert(HostAuth.TABLE_NAME null hostAuth.toContentValues()); if (account.mHostAuthKeySend > 0) { hostAuth=restoreHostAuth(fromDatabase account.mHostAuthKeySend); if (hostAuth == null) continue; account.mHostAuthKeySend=toDatabase.insert(HostAuth.TABLE_NAME null hostAuth.toContentValues()); } toDatabase.insert(Account.TABLE_NAME null account.toContentValues()); copyCount++; } } finally { c.close(); } toDatabase.setTransactionSuccessful(); } finally { toDatabase.endTransaction(); } } catch ( SQLiteException ex) { LogUtils.w(TAG ""Exception while copying account tables"" ex); copyCount=-1; } finally { fromDatabase.endTransaction(); } return copyCount; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,createAttachmentUriColumnSQL,"private static String  (){ final String uriPrefix=Attachment.ATTACHMENT_PROVIDER_URI_PREFIX; final String accountKey=AttachmentColumns.ACCOUNT_KEY; final String id=AttachmentColumns._ID; final String raw=AttachmentUtilities.FORMAT_RAW; final String contentUri=String.format(""%s/' || %s || '/' || %s || '/%s"" uriPrefix accountKey id raw); return ""@CASE "" + ""WHEN contentUri IS NULL THEN '"" + contentUri + ""' ""+ ""WHEN contentUri IS NOT NULL THEN contentUri ""+ ""END""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,createMailbox,private Mailbox  (long accountId int mailboxType){ Context context=getContext(); Mailbox box=Mailbox.newSystemMailbox(context accountId mailboxType); switch (mailboxType) { case Mailbox.TYPE_DRAFTS: box.mLastTouchedTime=Mailbox.DRAFTS_DEFAULT_TOUCH_TIME; break; case Mailbox.TYPE_SENT: box.mLastTouchedTime=Mailbox.SENT_DEFAULT_TOUCH_TIME; break; } box.save(context); return box; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,decodeEmailAddresses,private static void  (ContentValues values){ if (values.containsKey(Message.MessageColumns.TO_LIST)) { final String to=values.getAsString(Message.MessageColumns.TO_LIST); values.put(Message.MessageColumns.TO_LIST Address.fromHeaderToString(to)); } if (values.containsKey(Message.MessageColumns.FROM_LIST)) { final String from=values.getAsString(Message.MessageColumns.FROM_LIST); values.put(Message.MessageColumns.FROM_LIST Address.fromHeaderToString(from)); } if (values.containsKey(Message.MessageColumns.CC_LIST)) { final String cc=values.getAsString(Message.MessageColumns.CC_LIST); values.put(Message.MessageColumns.CC_LIST Address.fromHeaderToString(cc)); } if (values.containsKey(Message.MessageColumns.BCC_LIST)) { final String bcc=values.getAsString(Message.MessageColumns.BCC_LIST); values.put(Message.MessageColumns.BCC_LIST Address.fromHeaderToString(bcc)); } if (values.containsKey(Message.MessageColumns.REPLY_TO_LIST)) { final String replyTo=values.getAsString(Message.MessageColumns.REPLY_TO_LIST); values.put(Message.MessageColumns.REPLY_TO_LIST Address.fromHeaderToString(replyTo)); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,defaultRecentFolders,"private Uri[]  (final String id){ Uri[] recentFolders=new Uri[0]; final SQLiteDatabase db=getDatabase(getContext()); if (id.equals(COMBINED_ACCOUNT_ID_STRING)) { return recentFolders; } final String[] idAndType={BaseColumns._ID UIProvider.FolderColumns.TYPE}; final StringBuilder sb=genSelect(getFolderListMap() idAndType); sb.append("" FROM "").append(Mailbox.TABLE_NAME).append("" WHERE "").append(MailboxColumns.ACCOUNT_KEY).append("" = "").append(id).append("" AND "").append(MailboxColumns.TYPE).append("" IN ("").append(Mailbox.TYPE_SENT).append(""  "").append(Mailbox.TYPE_DRAFTS).append(""  "").append(Mailbox.TYPE_STARRED).append("")""); LogUtils.d(TAG ""defaultRecentFolders: Query is %s"" sb); final Cursor c=db.rawQuery(sb.toString() null); try { if (c == null || c.getCount() <= 0 || !c.moveToFirst()) { return recentFolders; } recentFolders=new Uri[c.getCount()]; int i=0; do { final long folderId=c.getLong(0); recentFolders[i]=uiUri(""uifolder"" folderId); LogUtils.d(TAG ""Default recent folder: %d  with uri %s"" folderId recentFolders[i]); ++i; } while (c.moveToNext()); } finally { if (c != null) { c.close(); } } return recentFolders; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,delete,"@Override public int  (Uri uri String selection String[] selectionArgs){ Log.d(TAG ""Delete: "" + uri); final int match=findMatch(uri ""delete""); final Context context=getContext(); final SQLiteDatabase db=getDatabase(context); final int table=match >> BASE_"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,deleteAccountData,"private static void  (Context context long accountId){ final String emailAddress=Utility.getFirstRowString(context Account.CONTENT_URI ACCOUNT_EMAIL_PROJECTION Account.ID_SELECTION new String[]{Long.toString(accountId)} null 0); if (emailAddress == null) { LogUtils.e(TAG ""Could not find email address for account %d"" accountId); } AttachmentUtilities.deleteAllAccountAttachmentFiles(context accountId); ContentResolver resolver=context.getContentResolver(); String[] accountIdArgs=new String[]{Long.toString(accountId)}; resolver.delete(Mailbox.CONTENT_URI MAILBOXES_FOR_ACCOUNT_SELECTION accountIdArgs); final ContentValues cv=new ContentValues(); cv.putNull(AccountColumns.SYNC_KEY); resolver.update(Account.CONTENT_URI cv Account.ID_SELECTION accountIdArgs); if (emailAddress != null) { final IEmailService service=EmailServiceUtils.getServiceForAccount(context accountId); if (service != null) { try { service.deleteExternalAccountPIMData(emailAddress); } catch ( final RemoteException e) { } } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,deleteBodyFiles,private static void  (final Context c final long messageId) throws IllegalStateException { final ContentValues emptyValues=new ContentValues(2); emptyValues.putNull(BodyColumns.HTML_CONTENT); emptyValues.putNull(BodyColumns.TEXT_CONTENT); writeBodyFiles(c messageId emptyValues); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,deleteMessageOrphans,public static void  (SQLiteDatabase database String tableName){ if (database != null) { Cursor c=database.query(tableName ORPHANS_PROJECTION null null null null null); try { if (c.getCount() == 0) return; ArrayList<Long> foundMailboxes=new ArrayList<Long>(); ArrayList<Long> notFoundMailboxes=new ArrayList<Long>(); ArrayList<Long> deleteList=new ArrayList<Long>(); String[] bindArray=new String[1]; while (c.moveToNext()) { long mailboxId=c.getLong(ORPHANS_MAILBOX_KEY); if (notFoundMailboxes.contains(mailboxId)) { deleteList.add(c.getLong(ORPHANS_ID)); } else if (!foundMailboxes.contains(mailboxId)) { bindArray[0]=Long.toString(mailboxId); Cursor boxCursor=database.query(Mailbox.TABLE_NAME Mailbox.ID_PROJECTION WHERE_ID bindArray null null null); try { if (boxCursor.moveToFirst()) { foundMailboxes.add(mailboxId); } else { notFoundMailboxes.add(mailboxId); deleteList.add(c.getLong(ORPHANS_ID)); } } finally { boxCursor.close(); } } } for ( long messageId : deleteList) { bindArray[0]=Long.toString(messageId); database.delete(tableName WHERE_ID bindArray); } } finally { c.close(); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,deleteUnlinked,"public static void  (SQLiteDatabase db String table String column String foreignColumn String foreignTable){ int count=db.delete(table column + "" not in (select "" + foreignColumn+ "" from ""+ foreignTable+ "")"" null); if (count > 0) { LogUtils.w(TAG ""Found "" + count + "" orphaned row(s) in ""+ table); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,doInBackground,@Override public Void  (Void... params){ final EmailServiceProxy service=EmailServiceUtils.getServiceForAccount(context accountId); if (service != null) { try { final int totalCount=service.searchMessages(accountId mSearchParams searchMailboxId); final Co
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,dump,"@Override public void  (FileDescriptor fd PrintWriter writer String[] args){ Context context=getContext(); writer.println(""Installed services:""); for ( EmailServiceInfo info : EmailServiceUtils.getServiceInfoList(context)) { writer.println("" "" + info); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,equals,@Override public boolean  (Object o){ if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } SyncRequestMessage that=(SyncRequestMessage)o; return mAccount.equals(that.mAccount) && mMailboxId == that.mMailboxId && m
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,findMatch,"private static int  (Uri uri String methodName){ int match=sURIMatcher.match(uri); if (match < 0) { throw new IllegalArgumentException(""Unknown uri: "" + uri); } else if (Logging.LOGD) { LogUtils.v(TAG methodName + "": uri="" + uri+ ""  match is ""+ match); } return match; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,fixParentKeys,"private void  (SQLiteDatabase db){ LogUtils.d(TAG ""Fixing parent keys""); db.execSQL(""update "" + Mailbox.TABLE_NAME + "" set ""+ MailboxColumns.PARENT_KEY+ ""=""+ ""(select ""+ Mailbox._ID+ "" from ""+ Mailbox.TABLE_NAME+ "" as b where ""+ Mailbox.TABLE_NAME+ "".""+ MailboxColumns.PARENT_SERVER_ID+ ""=""+ ""b.""+ MailboxColumns.SERVER_ID+ "" and ""+ Mailbox.TABLE_NAME+ "".""+ MailboxColumns.PARENT_SERVER_ID+ "" not null and ""+ Mailbox.TABLE_NAME+ "".""+ MailboxColumns.ACCOUNT_KEY+ ""=b.""+ Mailbox.ACCOUNT_KEY+ "")""); db.execSQL(""update "" + Mailbox.TABLE_NAME + "" set ""+ MailboxColumns.PARENT_KEY+ ""=""+ Mailbox.NO_MAILBOX+ "" where ""+ MailboxColumns.PARENT_KEY+ ""=""+ Mailbox.PARENT_KEY_UNINITIALIZED+ "" or ""+ MailboxColumns.PARENT_KEY+ "" is null""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,folderProjectionFromUiProjection,private String[]  (final String[] uiProjection){ final Set<String> columns=ImmutableSet.copyOf(uiProjection); if (columns.contains(UIProvider.FolderColumns.UNREAD_SENDERS)) { return UIProvider.FOLDERS_PROJECTION_WITH_UNREAD_SENDERS; } else { return UIProvider.FOLDERS_PROJECTION; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryAccount,"private String  (String[] uiProjection String id){ final ContentValues values=new ContentValues(); final long accountId=Long.parseLong(id); final Context context=getContext(); EmailServiceInfo info=null; final Set<String> projectionColumns=ImmutableSet.copyOf(uiProjection); final Account account=Account.restoreAccountWithId(context accountId); if (account == null) { LogUtils.d(TAG ""Account %d not found during genQueryAccount"" accountId); } if (projectionColumns.contains(UIProvider.AccountColumns.CAPABILITIES)) { values.put(UIProvider.AccountColumns.CAPABILITIES (account == null ? 0 : getCapabilities(context account))); } if (projectionColumns.contains(UIProvider.AccountColumns.SETTINGS_INTENT_URI)) { values.put(UIProvider.AccountColumns.SETTINGS_INTENT_URI getExternalUriString(""settings"" id)); } if (projectionColumns.contains(UIProvider.AccountColumns.COMPOSE_URI)) { values.put(UIProvider.AccountColumns.COMPOSE_URI getExternalUriStringEmail2(""compose"" id)); } if (projectionColumns.contains(UIProvider.AccountColumns.REAUTHENTICATION_INTENT_URI)) { values.put(UIProvider.AccountColumns.REAUTHENTICATION_INTENT_URI getIncomingSettingsUri(accountId).toString()); } if (projectionColumns.contains(UIProvider.AccountColumns.MIME_TYPE)) { values.put(UIProvider.AccountColumns.MIME_TYPE EMAIL_APP_MIME_TYPE); } if (projectionColumns.contains(UIProvider.AccountColumns.COLOR)) { values.put(UIProvider.AccountColumns.COLOR ACCOUNT_COLOR); } final MailPrefs mailPrefs=MailPrefs.get(getContext()); if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.CONFIRM_DELETE)) { values.put(UIProvider.AccountColumns.SettingsColumns.CONFIRM_DELETE mailPrefs.getConfirmDelete() ? ""1"" : ""0""); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.CONFIRM_SEND)) { values.put(UIProvider.AccountColumns.SettingsColumns.CONFIRM_SEND mailPrefs.getConfirmSend() ? ""1"" : ""0""); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.SWIPE)) { values.put(UIProvider.AccountColumns.SettingsColumns.SWIPE mailPrefs.getConversationListSwipeActionInteger(false)); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.CONV_LIST_ICON)) { values.put(UIProvider.AccountColumns.SettingsColumns.CONV_LIST_ICON getConversationListIcon(mailPrefs)); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.AUTO_ADVANCE)) { values.put(UIProvider.AccountColumns.SettingsColumns.AUTO_ADVANCE Integer.toString(mailPrefs.getAutoAdvanceMode())); } final long inboxMailboxId=Mailbox.findMailboxOfType(context accountId Mailbox.TYPE_INBOX); if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.DEFAULT_INBOX) && inboxMailboxId != Mailbox.NO_MAILBOX) { values.put(UIProvider.AccountColumns.SettingsColumns.DEFAULT_INBOX uiUriString(""uifolder"" inboxMailboxId)); } else { values.put(UIProvider.AccountColumns.SettingsColumns.DEFAULT_INBOX uiUriString(""uiinbox"" accountId)); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.DEFAULT_INBOX_NAME) && inboxMailboxId != Mailbox.NO_MAILBOX) { values.put(UIProvider.AccountColumns.SettingsColumns.DEFAULT_INBOX_NAME Mailbox.getDisplayName(context inboxMailboxId)); } if (projectionColumns.contains(UIProvider.AccountColumns.SYNC_STATUS)) { if (inboxMailboxId != Mailbox.NO_MAILBOX) { values.put(UIProvider.AccountColumns.SYNC_STATUS UIProvider.SyncStatus.NO_SYNC); } else { values.put(UIProvider.AccountColumns.SYNC_STATUS UIProvider.SyncStatus.INITIAL_SYNC_NEEDED); } } if (projectionColumns.contains(UIProvider.AccountColumns.UPDATE_SETTINGS_URI)) { values.put(UIProvider.AccountColumns.UPDATE_SETTINGS_URI uiUriString(""uiacctsettings"" -1)); } if (projectionColumns.contains(UIProvider.AccountColumns.ENABLE_MESSAGE_TRANSFORMS)) { values.put(UIProvider.AccountColumns.ENABLE_MESSAGE_TRANSFORMS 1); } if (projectionColumns.contains(UIProvider.AccountColumns.SECURITY_HOLD)) { final int hold=((account != null && ((account.getFlags() & Account.FLAGS_SECURITY_HOLD) == 0)) ? 0 : 1); values.put(UIProvider.AccountColumns.SECURITY_HOLD hold); } if (projectionColumns.contains(UIProvider.AccountColumns.ACCOUNT_SECURITY_URI)) { values.put(UIProvider.AccountColumns.ACCOUNT_SECURITY_URI (account == null ? """" : AccountSecurity.getUpdateSecurityUri(account.getId() true).toString())); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.IMPORTANCE_MARKERS_ENABLED)) { values.put(UIProvider.AccountColumns.SettingsColumns.IMPORTANCE_MARKERS_ENABLED ""0""); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.SHOW_CHEVRONS_ENABLED)) { values.put(UIProvider.AccountColumns.SettingsColumns.SHOW_CHEVRONS_ENABLED ""0""); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.SETUP_INTENT_URI)) { long trashId=Mailbox.findMailboxOfType(context accountId Mailbox.TYPE_TRASH); if (trashId == Mailbox.NO_MAILBOX) { info=EmailServiceUtils.getServiceInfoForAccount(context accountId); if (info != null && info.requiresSetup) { values.put(UIProvider.AccountColumns.SettingsColumns.SETUP_INTENT_URI getExternalUriString(""setup"" id)); } } } if (projectionColumns.contains(UIProvider.AccountColumns.TYPE)) { final String type; if (info == null) { info=EmailServiceUtils.getServiceInfoForAccount(context accountId); } if (info != null) { type=info.accountType; } else { type=""unknown""; } values.put(UIProvider.AccountColumns.TYPE type); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.MOVE_TO_INBOX) && inboxMailboxId != Mailbox.NO_MAILBOX) { values.put(UIProvider.AccountColumns.SettingsColumns.MOVE_TO_INBOX uiUriString(""uifolder"" inboxMailboxId)); } if (projectionColumns.contains(UIProvider.AccountColumns.SYNC_AUTHORITY)) { values.put(UIProvider.AccountColumns.SYNC_AUTHORITY EmailContent.AUTHORITY); } if (projectionColumns.contains(UIProvider.AccountColumns.QUICK_RESPONSE_URI)) { values.put(UIProvider.AccountColumns.QUICK_RESPONSE_URI combinedUriString(""quickresponse/account"" id)); } if (projectionColumns.contains(UIProvider.AccountColumns.SETTINGS_FRAGMENT_CLASS)) { values.put(UIProvider.AccountColumns.SETTINGS_FRAGMENT_CLASS PREFERENCE_FRAGMENT_CLASS_NAME); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.REPLY_BEHAVIOR)) { values.put(UIProvider.AccountColumns.SettingsColumns.REPLY_BEHAVIOR mailPrefs.getDefaultReplyAll() ? UIProvider.DefaultReplyBehavior.REPLY_ALL : UIProvider.DefaultReplyBehavior.REPLY); } if (projectionColumns.contains(UIProvider.AccountColumns.SettingsColumns.SHOW_IMAGES)) { values.put(UIProvider.AccountColumns.SettingsColumns.SHOW_IMAGES Settings.ShowImages.ASK_FIRST); } final StringBuilder sb=genSelect(getAccountListMap(getContext()) uiProjection values); sb.append("" FROM "" + Account.TABLE_NAME + "" WHERE ""+ AccountColumns._ID+ ""=?""); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryAccountAllMailboxes,"private static String  (String[] uiProjection){ StringBuilder sb=genSelect(getFolderListMap() uiProjection); sb.append(""  case when "" + MailboxColumns.HIERARCHICAL_NAME + "" is null then ""+ MailboxColumns.DISPLAY_NAME+ "" else ""+ MailboxColumns.HIERARCHICAL_NAME+ "" end as h_name""); sb.append("" FROM "" + Mailbox.TABLE_NAME + "" WHERE ""+ MailboxColumns.ACCOUNT_KEY+ ""=? AND ""+ MailboxColumns.TYPE+ "" < ""+ Mailbox.TYPE_NOT_EMAIL+ "" AND ""+ MailboxColumns.TYPE+ "" != ""+ Mailbox.TYPE_SEARCH+ "" ORDER BY h_name""); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryAccountMailboxes,"private static String  (String[] uiProjection){ StringBuilder sb=genSelect(getFolderListMap() uiProjection); sb.append("" FROM "" + Mailbox.TABLE_NAME + "" WHERE ""+ MailboxColumns.ACCOUNT_KEY+ ""=? AND ""+ MailboxColumns.TYPE+ "" < ""+ Mailbox.TYPE_NOT_EMAIL+ "" AND ""+ MailboxColumns.TYPE+ "" != ""+ Mailbox.TYPE_SEARCH+ "" AND ""+ MailboxColumns.PARENT_KEY+ "" < 0 ORDER BY ""); sb.append(MAILBOX_ORDER_BY); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryAttachment,"private String  (String[] uiProjection){ final ContentValues values=new ContentValues(2); values.put(AttachmentColumns.CONTENT_URI createAttachmentUriColumnSQL()); values.put(UIProvider.AttachmentColumns.SUPPORTS_DOWNLOAD_AGAIN 1); return genSelect(getAttachmentMap() uiProjection values).append("" FROM "").append(Attachment.TABLE_NAME).append("" WHERE "").append(AttachmentColumns._ID).append("" =? "").toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryAttachmentByMessageIDAndCid,"private String  (String[] uiProjection){ final ContentValues values=new ContentValues(2); values.put(AttachmentColumns.CONTENT_URI createAttachmentUriColumnSQL()); values.put(UIProvider.AttachmentColumns.SUPPORTS_DOWNLOAD_AGAIN 1); return genSelect(getAttachmentMap() uiProjection values).append("" FROM "").append(Attachment.TABLE_NAME).append("" WHERE "").append(AttachmentColumns.MESSAGE_KEY).append("" =? "").append("" AND "").append(AttachmentColumns.CONTENT_ID).append("" =? "").toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryAttachments,"private static String  (String[] uiProjection List<String> contentTypeQueryParameters){ ContentValues values=new ContentValues(1); values.put(UIProvider.AttachmentColumns.SUPPORTS_DOWNLOAD_AGAIN 1); StringBuilder sb=genSelect(getAttachmentMap() uiProjection values); sb.append("" FROM "").append(Attachment.TABLE_NAME).append("" WHERE "").append(AttachmentColumns.MESSAGE_KEY).append("" =? ""); if (contentTypeQueryParameters != null && !contentTypeQueryParameters.isEmpty()) { final int size=contentTypeQueryParameters.size(); sb.append(""AND (""); for (int i=0; i < size; i++) { final String contentType=contentTypeQueryParameters.get(i); sb.append(AttachmentColumns.MIME_TYPE).append("" LIKE '"").append(contentType).append(""%'""); if (i != size - 1) { sb.append("" OR ""); } } sb.append("")""); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryConversation,"private static String  (String[] uiProjection){ StringBuilder sb=genSelect(getMessageListMap() uiProjection); sb.append("" FROM "" + Message.TABLE_NAME + "" WHERE ""+ MessageColumns._ID+ ""=?""); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryMailbox,"private String  (String[] uiProjection String id){ long mailboxId=Long.parseLong(id); ContentValues values=new ContentValues(3); if (mSearchParams != null && mailboxId == mSearchParams.mSearchMailboxId) { values.put(UIProvider.FolderColumns.LOAD_MORE_URI uiUriString(""uiloadmore"" mailboxId)); values.put(UIProvider.FolderColumns.CAPABILITIES UIProvider.FolderCapabilities.DELETE); } else { Context context=getContext(); Mailbox mailbox=Mailbox.restoreMailboxWithId(context mailboxId); if (mailbox != null) { String protocol=Account.getProtocol(context mailbox.mAccountKey); EmailServiceInfo info=EmailServiceUtils.getServiceInfo(context protocol); if (info != null && info.offerLoadMore) { values.put(UIProvider.FolderColumns.LOAD_MORE_URI uiUriString(""uiloadmore"" mailboxId)); } values.put(UIProvider.FolderColumns.CAPABILITIES getFolderCapabilities(info mailbox.mType mailboxId)); boolean shouldEncodePersistentId=false; if (uiProjection == null) { shouldEncodePersistentId=true; } else { for ( final String column : uiProjection) { if (TextUtils.equals(column UIProvider.FolderColumns.PERSISTENT_ID)) { shouldEncodePersistentId=true; break; } } } if (shouldEncodePersistentId) { values.put(UIProvider.FolderColumns.PERSISTENT_ID Base64.encodeToString(mailbox.mServerId.getBytes() Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING)); } } } StringBuilder sb=genSelect(getFolderListMap() uiProjection values); sb.append("" FROM "" + Mailbox.TABLE_NAME + "" WHERE ""+ MailboxColumns._ID+ ""=?""); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryMailboxMessages,"private static String  (String[] uiProjection final boolean unseenOnly){ StringBuilder sb=genSelect(getMessageListMap() uiProjection); appendConversationInfoColumns(sb); sb.append("" FROM "" + Message.TABLE_NAME + "" WHERE ""+ Message.FLAG_LOADED_SELECTION+ "" AND ""+ MessageColumns.MAILBOX_KEY+ ""=? ""); if (unseenOnly) { sb.append(""AND "").append(MessageColumns.FLAG_SEEN).append("" = 0 ""); sb.append(""AND "").append(MessageColumns.FLAG_READ).append("" = 0 ""); } sb.append(""ORDER BY "" + MessageColumns.TIMESTAMP + "" DESC ""); sb.append(""LIMIT "" + UIProvider.CONVERSATION_PROJECTION_QUERY_CURSOR_WINDOW_LIMIT); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryRecentMailboxes,"private static String  (String[] uiProjection){ StringBuilder sb=genSelect(getFolderListMap() uiProjection); sb.append("" FROM "" + Mailbox.TABLE_NAME + "" WHERE ""+ MailboxColumns.ACCOUNT_KEY+ ""=? AND ""+ MailboxColumns.TYPE+ "" < ""+ Mailbox.TYPE_NOT_EMAIL+ "" AND ""+ MailboxColumns.TYPE+ "" != ""+ Mailbox.TYPE_SEARCH+ "" AND ""+ MailboxColumns.PARENT_KEY+ "" < 0 AND ""+ MailboxColumns.LAST_TOUCHED_TIME+ "" > 0 ORDER BY ""+ MailboxColumns.LAST_TOUCHED_TIME+ "" DESC""); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQuerySubfolders,"private static String  (String[] uiProjection){ StringBuilder sb=genSelect(getFolderListMap() uiProjection); sb.append("" FROM "" + Mailbox.TABLE_NAME + "" WHERE ""+ MailboxColumns.PARENT_KEY+ "" =? ORDER BY ""); sb.append(MAILBOX_ORDER_BY); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genQueryViewMessage,"private MessageQuery  (String[] uiProjection String id){ Context context=getContext(); long messageId=Long.parseLong(id); Message msg=Message.restoreMessageWithId(context messageId); ContentValues values=new ContentValues(); String attachmentJson=null; if (msg != null) { Body body=Body.restoreBodyWithMessageId(context messageId); if (body != null) { if (body.mHtmlContent != null) { if (IMG_TAG_START_REGEX.matcher(body.mHtmlContent).find()) { values.put(UIProvider.MessageColumns.EMBEDS_EXTERNAL_RESOURCES 1); } } } Address[] fromList=Address.fromHeader(msg.mFrom); int autoShowImages=0; final MailPrefs mailPrefs=MailPrefs.get(context); for ( Address sender : fromList) { final String email=sender.getAddress(); if (mailPrefs.getDisplayImagesFromSender(email)) { autoShowImages=1; break; } } values.put(UIProvider.MessageColumns.ALWAYS_SHOW_IMAGES autoShowImages); Attachment[] atts=Attachment.restoreAttachmentsWithMessageId(context messageId); if (atts.length > 0) { ArrayList<com.android.mail.providers.Attachment> uiAtts=new ArrayList<com.android.mail.providers.Attachment>(); for ( Attachment att : atts) { com.android.mail.providers.Attachment uiAtt=new com.android.mail.providers.Attachment(); uiAtt.setName(att.mFileName); uiAtt.setContentType(att.mMimeType); uiAtt.size=(int)att.mSize; uiAtt.uri=uiUri(""uiattachment"" att.mId); uiAtt.flags=att.mFlags; uiAtts.add(uiAtt); } values.put(UIProvider.MessageColumns.ATTACHMENTS ""@?""); attachmentJson=com.android.mail.providers.Attachment.toJSONArray(uiAtts); } if (msg.mDraftInfo != 0) { values.put(UIProvider.MessageColumns.APPEND_REF_MESSAGE_CONTENT (msg.mDraftInfo & Message.DRAFT_INFO_APPEND_REF_MESSAGE) != 0 ? 1 : 0); values.put(UIProvider.MessageColumns.QUOTE_START_POS msg.mDraftInfo & Message.DRAFT_INFO_QUOTE_POS_MASK); } if ((msg.mFlags & Message.FLAG_INCOMING_MEETING_INVITE) != 0) { values.put(UIProvider.MessageColumns.EVENT_INTENT_URI ""content://ui.email2.android.com/event/"" + msg.mId); } final Uri attachmentListUri=uiUri(""uiattachments"" messageId).buildUpon().appendQueryParameter(""MessageLoaded"" msg.mFlagLoaded == Message.FLAG_LOADED_COMPLETE ? ""true"" : ""false"").build(); values.put(UIProvider.MessageColumns.ATTACHMENT_LIST_URI attachmentListUri.toString()); } StringBuilder sb=genSelect(getMessageViewMap() uiProjection values); sb.append("" FROM "" + Message.TABLE_NAME + "" LEFT JOIN ""+ Body.TABLE_NAME+ "" ON ""+ BodyColumns.MESSAGE_KEY+ ""=""+ Message.TABLE_NAME+ "".""+ MessageColumns._ID+ "" WHERE ""+ Message.TABLE_NAME+ "".""+ MessageColumns._ID+ ""=?""); String sql=sb.toString(); return new MessageQuery(sql attachmentJson); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,genSelect,"private static StringBuilder  (ProjectionMap map String[] projection ContentValues values){ final StringBuilder sb=new StringBuilder(""SELECT ""); boolean first=true; for ( final String column : projection) { if (first) { first=false; } else { sb.append(' '); } final String val; if (values.containsKey(column)) { final String value=values.getAsString(column); if (value == null) { val=""NULL AS "" + column; } else if (value.startsWith(""@"")) { val=value.substring(1) + "" AS "" + column; } else { val=DatabaseUtils.sqlEscapeString(value) + "" AS "" + column; } } else { final String mapVal=map.get(column); if (mapVal == null) { val=""NULL AS "" + column; } else { val=mapVal; } } sb.append(val); } return sb; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getAccountListMap,"private static ProjectionMap  (Context context){ if (sAccountListMap == null) { final ProjectionMap.Builder builder=ProjectionMap.builder().add(BaseColumns._ID AccountColumns._ID).add(UIProvider.AccountColumns.FOLDER_LIST_URI uriWithId(""uifolders"")).add(UIProvider.AccountColumns.FULL_FOLDER_LIST_URI uriWithId(""uifullfolders"")).add(UIProvider.AccountColumns.ALL_FOLDER_LIST_URI uriWithId(""uiallfolders"")).add(UIProvider.AccountColumns.NAME AccountColumns.DISPLAY_NAME).add(UIProvider.AccountColumns.ACCOUNT_MANAGER_NAME AccountColumns.EMAIL_ADDRESS).add(UIProvider.AccountColumns.ACCOUNT_ID AccountColumns.EMAIL_ADDRESS).add(UIProvider.AccountColumns.SENDER_NAME AccountColumns.SENDER_NAME).add(UIProvider.AccountColumns.UNDO_URI (""'content://"" + EmailContent.AUTHORITY + ""/uiundo'"")).add(UIProvider.AccountColumns.URI uriWithId(""uiaccount"")).add(UIProvider.AccountColumns.SEARCH_URI uriWithId(""uisearch"")).add(UIProvider.AccountColumns.PROVIDER_VERSION ""1"").add(UIProvider.AccountColumns.SYNC_STATUS ""0"").add(UIProvider.AccountColumns.RECENT_FOLDER_LIST_URI uriWithId(""uirecentfolders"")).add(UIProvider.AccountColumns.DEFAULT_RECENT_FOLDER_LIST_URI uriWithId(""uidefaultrecentfolders"")).add(UIProvider.AccountColumns.SettingsColumns.SIGNATURE AccountColumns.SIGNATURE).add(UIProvider.AccountColumns.SettingsColumns.SNAP_HEADERS Integer.toString(UIProvider.SnapHeaderValue.ALWAYS)).add(UIProvider.AccountColumns.SettingsColumns.CONFIRM_ARCHIVE ""0"").add(UIProvider.AccountColumns.SettingsColumns.CONVERSATION_VIEW_MODE Integer.toString(UIProvider.ConversationViewMode.UNDEFINED)).add(UIProvider.AccountColumns.SettingsColumns.VEILED_ADDRESS_PATTERN null); final String feedbackUri=context.getString(R.string.email_feedback_uri); if (!TextUtils.isEmpty(feedbackUri)) { builder.add(UIProvider.AccountColumns.SEND_FEEDBACK_INTENT_URI ""'"" + feedbackUri + ""'""); } final String helpUri=context.getString(R.string.help_uri); if (!TextUtils.isEmpty(helpUri)) { builder.add(UIProvider.AccountColumns.HELP_INTENT_URI ""'"" + helpUri + ""'""); } sAccountListMap=builder.build(); } return sAccountListMap; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getAccountManagerAccount,private static android.accounts.Account  (final Context context final String emailAddress final String protocol){ final EmailServiceInfo info=EmailServiceUtils.getServiceInfo(context protocol); if (info == null) { return null; } return new android.accounts.Account(emailAddress info.accountType); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getAttachmentMap,"private static ProjectionMap  (){ if (sAttachmentMap == null) { sAttachmentMap=ProjectionMap.builder().add(UIProvider.AttachmentColumns.NAME AttachmentColumns.FILENAME).add(UIProvider.AttachmentColumns.SIZE AttachmentColumns.SIZE).add(UIProvider.AttachmentColumns.URI uriWithId(""uiattachment"")).add(UIProvider.AttachmentColumns.CONTENT_TYPE AttachmentColumns.MIME_TYPE).add(UIProvider.AttachmentColumns.STATE AttachmentColumns.UI_STATE).add(UIProvider.AttachmentColumns.DESTINATION AttachmentColumns.UI_DESTINATION).add(UIProvider.AttachmentColumns.DOWNLOADED_SIZE AttachmentColumns.UI_DOWNLOADED_SIZE).add(UIProvider.AttachmentColumns.CONTENT_URI AttachmentColumns.CONTENT_URI).add(UIProvider.AttachmentColumns.FLAGS AttachmentColumns.FLAGS).build(); } return sAttachmentMap; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getBaseNotificationUri,private static Uri  (int match){ Uri baseUri=null; switch (match) { case MESSAGE: case MESSAGE_ID: case SYNCED_MESSAGE_ID: baseUri=Message.NOTIFIER_URI; break; case ACCOUNT: case ACCOUNT_ID: baseUri=Account.NOTIFIER_URI; break; } return baseUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getBatchNotificationsSet,private Set<Uri>  (){ return mTLBatchNotifications.get(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getBits,"private static String  (int bitField){ StringBuilder sb=new StringBuilder("" ""); for (int i=0; i < 32; i++  bitField>>=1) { if ((bitField & 1) != 0) { sb.append(i).append("" ""); } } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getBodyFile,"protected static File  (final Context c final long messageId final String ext) throws FileNotFoundException { if (!TextUtils.equals(ext ""html"") && !TextUtils.equals(ext ""txt"")) { throw new IllegalArgumentException(""ext must be one of 'html' or 'txt'""); } long l1=messageId / 100 % 100; long l2=messageId % 100; final File dir=new File(c.getFilesDir() ""body/"" + Long.toString(l1) + ""/""+ Long.toString(l2)+ ""/""); if (!dir.isDirectory() && !dir.mkdirs()) { throw new FileNotFoundException(""Could not create directory for body file""); } return new File(dir Long.toString(messageId) + ""."" + ext); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getCapabilities,"private static int  (Context context final Account account){ if (account == null) { return 0; } final String protocol=account.getProtocol(context); int capabilities; if (TextUtils.equals(context.getString(R.string.protocol_imap) protocol) || TextUtils.equals(context.getString(R.string.protocol_legacy_imap) protocol)) { capabilities=AccountCapabilities.SYNCABLE_FOLDERS | AccountCapabilities.SERVER_SEARCH | AccountCapabilities.FOLDER_SERVER_SEARCH| AccountCapabilities.UNDO| AccountCapabilities.DISCARD_CONVERSATION_DRAFTS; } else if (TextUtils.equals(context.getString(R.string.protocol_pop3) protocol)) { capabilities=AccountCapabilities.UNDO | AccountCapabilities.DISCARD_CONVERSATION_DRAFTS; } else if (TextUtils.equals(context.getString(R.string.protocol_eas) protocol)) { final String easVersion=account.mProtocolVersion; double easVersionDouble=2.5D; if (easVersion != null) { try { easVersionDouble=Double.parseDouble(easVersion); } catch ( final NumberFormatException e) { } } if (easVersionDouble >= 12.0D) { capabilities=AccountCapabilities.SYNCABLE_FOLDERS | AccountCapabilities.SERVER_SEARCH | AccountCapabilities.FOLDER_SERVER_SEARCH| AccountCapabilities.SMART_REPLY| AccountCapabilities.UNDO| AccountCapabilities.DISCARD_CONVERSATION_DRAFTS; } else { capabilities=AccountCapabilities.SYNCABLE_FOLDERS | AccountCapabilities.SMART_REPLY | AccountCapabilities.UNDO| AccountCapabilities.DISCARD_CONVERSATION_DRAFTS; } } else { LogUtils.w(TAG ""Unknown protocol for account %d"" account.getId()); return 0; } LogUtils.d(TAG ""getCapabilities() for %d (protocol %s): 0x%x %s"" account.getId() protocol capabilities getBits(capabilities)); final Resources res=context.getResources(); if (res.getBoolean(R.bool.feedback_supported)) { capabilities|=AccountCapabilities.SEND_FEEDBACK; } if (!TextUtils.isEmpty(context.getResources().getString(R.string.help_uri))) { capabilities|=AccountCapabilities.HELP_CONTENT; } capabilities|=AccountCapabilities.EMPTY_TRASH; capabilities|=AccountCapabilities.NESTED_FOLDERS; capabilities|=AccountCapabilities.CLIENT_SANITIZED_HTML; return capabilities; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getConversationListIcon,private static int  (MailPrefs mailPrefs){ return mailPrefs.getShowSenderImages() ? UIProvider.ConversationListIcon.SENDER_IMAGE : UIProvider.ConversationListIcon.NONE; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getDatabase,"public SQLiteDatabase  (Context context){ synchronized (sDatabaseLock) { if (mDatabase != null) { return mDatabase; } checkDatabases(); DBHelper.DatabaseHelper helper=new DBHelper.DatabaseHelper(context DATABASE_NAME); mDatabase=helper.getWritableDatabase(); DBHelper.BodyDatabaseHelper bodyHelper=new DBHelper.BodyDatabaseHelper(context BODY_DATABASE_NAME); mBodyDatabase=bodyHelper.getWritableDatabase(); if (mBodyDatabase != null) { String bodyFileName=mBodyDatabase.getPath(); mDatabase.execSQL(""attach \"""" + bodyFileName + ""\"" as BodyDatabase""); } restoreIfNeeded(context mDatabase); deleteMessageOrphans(mDatabase Message.UPDATED_TABLE_NAME); deleteMessageOrphans(mDatabase Message.DELETED_TABLE_NAME); deleteUnlinked(mDatabase Mailbox.TABLE_NAME MailboxColumns.ACCOUNT_KEY AccountColumns._ID Account.TABLE_NAME); deleteUnlinked(mDatabase Message.TABLE_NAME MessageColumns.ACCOUNT_KEY AccountColumns._ID Account.TABLE_NAME); deleteUnlinked(mDatabase Policy.TABLE_NAME PolicyColumns._ID AccountColumns.POLICY_KEY Account.TABLE_NAME); fixParentKeys(mDatabase); initUiProvider(); return mDatabase; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getDelayedSyncHandler,"synchronized public Handler  (){ if (mDelayedSyncHandler == null) { mDelayedSyncHandler=new Handler(getContext().getMainLooper() new Callback(){ @Override public boolean handleMessage( android.os.Message msg){ synchronized (mDelayedSyncRequests) { final SyncRequestMessage request=(SyncRequestMessage)msg.obj; final android.accounts.Account account=request.mAccount; final Bundle extras=Mailbox.createSyncBundle(request.mMailboxId); ContentResolver.requestSync(account request.mAuthority extras); LogUtils.i(TAG ""requestSync getDelayedSyncHandler %s  %s"" account.toString() extras.toString()); mDelayedSyncRequests.remove(request); return true; } } } ); } return mDelayedSyncHandler; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getExternalUriString,"private static String  (String segment String account){ return BASE_EXTERNAL_URI.buildUpon().appendPath(segment).appendQueryParameter(""account"" account).build().toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getExternalUriStringEmail2,"private static String  (String segment String account){ return BASE_EXTERAL_URI2.buildUpon().appendPath(segment).appendQueryParameter(""account"" account).build().toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getFolder,"public static Folder  (Context context long mailboxId){ final ContentResolver resolver=context.getContentResolver(); final Cursor fc=resolver.query(EmailProvider.uiUri(""uifolder"" mailboxId) UIProvider.FOLDERS_PROJECTION null null null); if (fc == null) { LogUtils.e(TAG ""Null folder cursor for mailboxId %d"" mailboxId); return null; } Folder uiFolder=null; try { if (fc.moveToFirst()) { uiFolder=new Folder(fc); } } finally { fc.close(); } return uiFolder; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getFolderCapabilities,private int  (EmailServiceInfo info int mailboxType long mailboxId){ if (mailboxType == Mailbox.TYPE_SEARCH) { return UIProvider.FolderCapabilities.DELETE; } int caps=0; if (mailboxType != Mailbox.TYPE_DRAFTS) { caps=UIProvider.FolderCapabilities.DELETE; } if (info != null && info.offerLookback) { caps|=UIProvider.FolderCapabilities.SUPPORTS_SETTINGS; } if (mailboxType == Mailbox.TYPE_MAIL || mailboxType == Mailbox.TYPE_TRASH || mailboxType == Mailbox.TYPE_JUNK || mailboxType == Mailbox.TYPE_INBOX) { caps|=UIProvider.FolderCapabilities.CAN_ACCEPT_MOVED_MESSAGES; caps|=UIProvider.FolderCapabilities.ALLOWS_REMOVE_CONVERSATION; } if (mailboxType == Mailbox.TYPE_TRASH) { caps=UIProvider.FolderCapabilities.CAN_ACCEPT_MOVED_MESSAGES | UIProvider.FolderCapabilities.ALLOWS_REMOVE_CONVERSATION | UIProvider.FolderCapabilities.DELETE| UIProvider.FolderCapabilities.DELETE_ACTION_FINAL; } if (isVirtualMailbox(mailboxId)) { caps|=UIProvider.FolderCapabilities.IS_VIRTUAL; } if (info == null || !info.offerMoveTo) { caps&=~UIProvider.FolderCapabilities.CAN_ACCEPT_MOVED_MESSAGES & ~UIProvider.FolderCapabilities.ALLOWS_REMOVE_CONVERSATION & ~UIProvider.FolderCapabilities.ALLOWS_MOVE_TO_INBOX; } if (mailboxType == Mailbox.TYPE_OUTBOX || mailboxType == Mailbox.TYPE_SENT) { caps|=UIProvider.FolderCapabilities.SHOW_RECIPIENTS; } return caps; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getFolderDisplayName,private String  (int folderType String defaultName){ final int resId; switch (folderType) { case UIProvider.FolderType.INBOX: resId=R.string.mailbox_name_display_inbox; break; case UIProvider.FolderType.OUTBOX: resId=R.string.mailbox_name_display_outbox; break; case UIProvider.FolderType.DRAFT: resId=R.string.mailbox_name_display_drafts; break; case UIProvider.FolderType.TRASH: resId=R.string.mailbox_name_display_trash; break; case UIProvider.FolderType.SENT: resId=R.string.mailbox_name_display_sent; break; case UIProvider.FolderType.SPAM: resId=R.string.mailbox_name_display_junk; break; case UIProvider.FolderType.STARRED: resId=R.string.mailbox_name_display_starred; break; case UIProvider.FolderType.UNREAD: resId=R.string.mailbox_name_display_unread; break; default : return defaultName; } return getContext().getString(resId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getFolderListCursor,private Cursor  (final Cursor inputCursor final long accountId final String[] uiProjection){ final MatrixCursor mc=new MatrixCursorWithCachedColumns(uiProjection); if (inputCursor != null) { try { remapFolderCursor(inputCursor mc accountId uiProjection); } finally { inputCursor.close(); } } return mc; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,tryStartDownload,"synchronized boolean  (final DownloadRequest req){ final EmailServiceProxy service=EmailServiceUtils.getServiceForAccount(AttachmentService.this req.mAccountId); boolean alreadyInProgress=mDownloadsInProgress.get(req.mAttachmentId) != null; if (alreadyInProgress) { debugTrace(""This attachment #%d is already in progress"" req.mAttachmentId); return false; } try { startDownload(service req); } catch ( RemoteException e) { cancelDownload(req); } return true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,validateDownloadRequest,"boolean  (final DownloadRequest dr final int callbackTimeout final long now){ final long timeSinceCallback=now - dr.mLastCallbackTime; if (timeSinceCallback > callbackTimeout) { LogUtils.d(LOG_TAG ""Timeout for DownloadRequest #%d "" dr.mAttachmentId); return true; } return false; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\AttachmentService.java,watchdogAlarm,"void  (final AttachmentService service final int callbackTimeout){ debugTrace(""Received a timer callback in the watchdog""); final Collection<DownloadRequest> inProgressRequests=service.mDownloadsInProgress.values(); for ( DownloadRequest req : inProgressRequests) { debugTrace(""Checking in-progress request with id: %d"" req.mAttachmentId); final boolean shouldCancelDownload=validateDownloadRequest(req callbackTimeout System.currentTimeMillis()); if (shouldCancelDownload) { LogUtils.w(LOG_TAG ""Cancelling DownloadRequest #%d"" req.mAttachmentId); service.cancelDownload(req); } } if (service.isConnected()) { service.processQueue(); } issueNextWatchdogAlarm(service); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getFolderListMap,"private static ProjectionMap  (){ if (sFolderListMap == null) { sFolderListMap=ProjectionMap.builder().add(BaseColumns._ID MailboxColumns._ID).add(UIProvider.FolderColumns.PERSISTENT_ID MailboxColumns.SERVER_ID).add(UIProvider.FolderColumns.URI uriWithId(""uifolder"")).add(UIProvider.FolderColumns.NAME ""displayName"").add(UIProvider.FolderColumns.HAS_CHILDREN MailboxColumns.FLAGS + ""&"" + Mailbox.FLAG_HAS_CHILDREN).add(UIProvider.FolderColumns.CAPABILITIES FOLDER_CAPABILITIES).add(UIProvider.FolderColumns.SYNC_WINDOW ""3"").add(UIProvider.FolderColumns.CONVERSATION_LIST_URI uriWithId(""uimessages"")).add(UIProvider.FolderColumns.CHILD_FOLDERS_LIST_URI uriWithId(""uisubfolders"")).add(UIProvider.FolderColumns.UNREAD_COUNT MailboxColumns.UNREAD_COUNT).add(UIProvider.FolderColumns.TOTAL_COUNT TOTAL_COUNT).add(UIProvider.FolderColumns.REFRESH_URI uriWithId(QUERY_UIREFRESH)).add(UIProvider.FolderColumns.SYNC_STATUS MailboxColumns.UI_SYNC_STATUS).add(UIProvider.FolderColumns.LAST_SYNC_RESULT MailboxColumns.UI_LAST_SYNC_RESULT).add(UIProvider.FolderColumns.TYPE FOLDER_TYPE).add(UIProvider.FolderColumns.ICON_RES_ID FOLDER_ICON).add(UIProvider.FolderColumns.LOAD_MORE_URI uriWithId(""uiloadmore"")).add(UIProvider.FolderColumns.HIERARCHICAL_DESC MailboxColumns.HIERARCHICAL_NAME).add(UIProvider.FolderColumns.PARENT_URI ""case when "" + MailboxColumns.PARENT_KEY + ""=""+ Mailbox.NO_MAILBOX+ "" then NULL else ""+ uriWithColumn(""uifolder"" MailboxColumns.PARENT_KEY)+ "" end"").add(UIProvider.FolderColumns.UNREAD_SENDERS ""(SELECT group_concat("" + MessageColumns.FROM_LIST + "") FROM ""+ ""(SELECT ""+ MessageColumns.FROM_LIST+ "" FROM ""+ Message.TABLE_NAME+ "" WHERE ""+ MessageColumns.MAILBOX_KEY+ ""=""+ Mailbox.TABLE_NAME+ "".""+ MailboxColumns._ID+ "" AND ""+ MessageColumns.FLAG_READ+ ""=0""+ "" GROUP BY ""+ MessageColumns.FROM_LIST+ "" ORDER BY ""+ MessageColumns.TIMESTAMP+ "" DESC))"").build(); } return sFolderListMap; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getFolderTypeFromMailboxType,private static int  (int mailboxType){ switch (mailboxType) { case Mailbox.TYPE_INBOX: return UIProvider.FolderType.INBOX; case Mailbox.TYPE_OUTBOX: return UIProvider.FolderType.OUTBOX; case Mailbox.TYPE_DRAFTS: return UIProvider.FolderType.DRAFT; case Mailbox.TYPE_TRASH: return UIProvider.FolderType.TRASH; case Mailbox.TYPE_SENT: return UIProvider.FolderType.SENT; case Mailbox.TYPE_JUNK: return UIProvider.FolderType.SPAM; case Mailbox.TYPE_STARRED: return UIProvider.FolderType.STARRED; case Mailbox.TYPE_UNREAD: return UIProvider.FolderType.UNREAD; case Mailbox.TYPE_SEARCH: return UIProvider.FolderType.DEFAULT | UIProvider.FolderType.SEARCH; default : return UIProvider.FolderType.DEFAULT; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getIncomingSettingsUri,"public static Uri  (long accountId){ final Uri.Builder baseUri=Uri.parse(""auth://"" + EmailContent.EMAIL_PACKAGE_NAME + "".ACCOUNT_SETTINGS/incoming/"").buildUpon(); IntentUtilities.setAccountId(baseUri accountId); return baseUri.build(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getMailbox,private Mailbox  (final Uri uri){ final long id=Long.parseLong(uri.getLastPathSegment()); return Mailbox.restoreMailboxWithId(getContext() id); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getMailboxByAccountIdAndType,private Mailbox  (final long accountId final int mailboxType){ Mailbox mailbox=Mailbox.restoreMailboxOfType(getContext() accountId mailboxType); if (mailbox == null) { mailbox=createMailbox(accountId mailboxType); } return mailbox; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getMailboxMessageCount,"private Cursor  (Uri uri){ SQLiteDatabase db=getDatabase(getContext()); String mailboxId=uri.getLastPathSegment(); return db.rawQuery(""select count(*) from Message where mailboxKey=?"" new String[]{mailboxId}); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getMailboxTypeFromFolderType,"private static int  (int folderType){ switch (folderType) { case UIProvider.FolderType.DEFAULT: return Mailbox.TYPE_MAIL; case UIProvider.FolderType.INBOX: return Mailbox.TYPE_INBOX; case UIProvider.FolderType.OUTBOX: return Mailbox.TYPE_OUTBOX; case UIProvider.FolderType.DRAFT: return Mailbox.TYPE_DRAFTS; case UIProvider.FolderType.TRASH: return Mailbox.TYPE_TRASH; case UIProvider.FolderType.SENT: return Mailbox.TYPE_SENT; case UIProvider.FolderType.SPAM: return Mailbox.TYPE_JUNK; case UIProvider.FolderType.STARRED: return Mailbox.TYPE_STARRED; case UIProvider.FolderType.UNREAD: return Mailbox.TYPE_UNREAD; case UIProvider.FolderType.DEFAULT | UIProvider.FolderType.SEARCH: return Mailbox.TYPE_SEARCH; default : throw new IllegalArgumentException(""Unable to map folder type: "" + folderType); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getMessageFromLastSegment,private Message  (Uri uri){ long messageId=Long.parseLong(uri.getLastPathSegment()); return Message.restoreMessageWithId(getContext() messageId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getMessageListMap,"private static ProjectionMap  (){ if (sMessageListMap == null) { sMessageListMap=ProjectionMap.builder().add(BaseColumns._ID MessageColumns._ID).add(UIProvider.ConversationColumns.URI uriWithId(""uimessage"")).add(UIProvider.ConversationColumns.MESSAGE_LIST_URI uriWithId(""uimessage"")).add(UIProvider.ConversationColumns.SUBJECT MessageColumns.SUBJECT).add(UIProvider.ConversationColumns.SNIPPET MessageColumns.SNIPPET).add(UIProvider.ConversationColumns.CONVERSATION_INFO null).add(UIProvider.ConversationColumns.DATE_RECEIVED_MS MessageColumns.TIMESTAMP).add(UIProvider.ConversationColumns.HAS_ATTACHMENTS MessageColumns.FLAG_ATTACHMENT).add(UIProvider.ConversationColumns.NUM_MESSAGES ""1"").add(UIProvider.ConversationColumns.NUM_DRAFTS ""0"").add(UIProvider.ConversationColumns.SENDING_STATE Integer.toString(ConversationSendingState.OTHER)).add(UIProvider.ConversationColumns.PRIORITY Integer.toString(ConversationPriority.LOW)).add(UIProvider.ConversationColumns.READ MessageColumns.FLAG_READ).add(UIProvider.ConversationColumns.SEEN MessageColumns.FLAG_SEEN).add(UIProvider.ConversationColumns.STARRED MessageColumns.FLAG_FAVORITE).add(UIProvider.ConversationColumns.FLAGS CONVERSATION_FLAGS).add(UIProvider.ConversationColumns.ACCOUNT_URI uriWithColumn(""uiaccount"" MessageColumns.ACCOUNT_KEY)).add(UIProvider.ConversationColumns.SENDER_INFO MessageColumns.FROM_LIST).add(UIProvider.ConversationColumns.ORDER_KEY MessageColumns.TIMESTAMP).build(); } return sMessageListMap; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getMessageViewMap,"private static ProjectionMap  (){ if (sMessageViewMap == null) { sMessageViewMap=ProjectionMap.builder().add(BaseColumns._ID Message.TABLE_NAME + ""."" + MessageColumns._ID).add(UIProvider.MessageColumns.SERVER_ID SyncColumns.SERVER_ID).add(UIProvider.MessageColumns.URI uriWithFQId(""uimessage"" Message.TABLE_NAME)).add(UIProvider.MessageColumns.CONVERSATION_ID uriWithFQId(""uimessage"" Message.TABLE_NAME)).add(UIProvider.MessageColumns.SUBJECT MessageColumns.SUBJECT).add(UIProvider.MessageColumns.SNIPPET MessageColumns.SNIPPET).add(UIProvider.MessageColumns.FROM MessageColumns.FROM_LIST).add(UIProvider.MessageColumns.TO MessageColumns.TO_LIST).add(UIProvider.MessageColumns.CC MessageColumns.CC_LIST).add(UIProvider.MessageColumns.BCC MessageColumns.BCC_LIST).add(UIProvider.MessageColumns.REPLY_TO MessageColumns.REPLY_TO_LIST).add(UIProvider.MessageColumns.DATE_RECEIVED_MS MessageColumns.TIMESTAMP).add(UIProvider.MessageColumns.BODY_HTML null).add(UIProvider.MessageColumns.BODY_TEXT null).add(UIProvider.MessageColumns.REF_MESSAGE_ID ""0"").add(UIProvider.MessageColumns.DRAFT_TYPE NOT_A_DRAFT_STRING).add(UIProvider.MessageColumns.APPEND_REF_MESSAGE_CONTENT ""0"").add(UIProvider.MessageColumns.HAS_ATTACHMENTS MessageColumns.FLAG_ATTACHMENT).add(UIProvider.MessageColumns.ATTACHMENT_LIST_URI uriWithFQId(""uiattachments"" Message.TABLE_NAME)).add(UIProvider.MessageColumns.ATTACHMENT_BY_CID_URI uriWithFQId(""uiattachmentbycid"" Message.TABLE_NAME)).add(UIProvider.MessageColumns.MESSAGE_FLAGS MESSAGE_FLAGS).add(UIProvider.MessageColumns.DRAFT_TYPE MESSAGE_DRAFT_TYPE).add(UIProvider.MessageColumns.MESSAGE_ACCOUNT_URI uriWithColumn(""uiaccount"" MessageColumns.ACCOUNT_KEY)).add(UIProvider.MessageColumns.STARRED MessageColumns.FLAG_FAVORITE).add(UIProvider.MessageColumns.READ MessageColumns.FLAG_READ).add(UIProvider.MessageColumns.SEEN MessageColumns.FLAG_SEEN).add(UIProvider.MessageColumns.SPAM_WARNING_STRING null).add(UIProvider.MessageColumns.SPAM_WARNING_LEVEL Integer.toString(UIProvider.SpamWarningLevel.NO_WARNING)).add(UIProvider.MessageColumns.SPAM_WARNING_LINK_TYPE Integer.toString(UIProvider.SpamWarningLinkType.NO_LINK)).add(UIProvider.MessageColumns.VIA_DOMAIN null).add(UIProvider.MessageColumns.CLIPPED ""0"").add(UIProvider.MessageColumns.PERMALINK null).build(); } return sMessageViewMap; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getQuickResponseMap,"private static ProjectionMap  (){ if (sQuickResponseMap == null) { sQuickResponseMap=ProjectionMap.builder().add(UIProvider.QuickResponseColumns.TEXT QuickResponseColumns.TEXT).add(UIProvider.QuickResponseColumns.URI ""'"" + combinedUriString(""quickresponse"" """") + ""'||""+ QuickResponseColumns._ID).build(); } return sQuickResponseMap; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getSearchMailbox,private Mailbox  (long accountId){ Context context=getContext(); Mailbox m=Mailbox.restoreMailboxOfType(context accountId Mailbox.TYPE_SEARCH); if (m == null) { m=new Mailbox(); m.mAccountKey=accountId; m.mServerId=SEARCH_MAILBOX_SERVER_ID; m.mFlagVisible=false; m.mDisplayName=SEARCH_MAILBOX_SERVER_ID; m.mSyncInterval=0; m.mType=Mailbox.TYPE_SEARCH; m.mFlags=Mailbox.FLAG_HOLDS_MAIL; m.mParentKey=Mailbox.NO_MAILBOX; m.save(context); } return m; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getString,@Override public String  (int column){ if (column == mContentUriIndex) { return mContentUriStrings[getPosition()]; } else { return super.getString(column); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getType,"@Override public String  (Uri uri){ int match=findMatch(uri ""getType""); switch (match) { case BODY_ID: return ""vnd.android.cursor.item/email-body""; case BODY: return ""vnd.android.cursor.dir/email-body""; case UPDATED_MESSAGE_ID: case MESSAGE_ID: String mim"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getUiFolderCursorRowFromMailboxCursorRow,private Cursor  (MatrixCursor mc int projectionLength Cursor mailboxCursor int nameColumn int typeColumn){ final MatrixCursor.RowBuilder builder=mc.newRow(); for (int i=0; i < projectionLength; i++) { if (nameColumn == i) { final int type=mailboxCursor.getInt(typeColumn); builder.add(getFolderDisplayName(type mailboxCursor.getString(i))); } else { builder.add(mailboxCursor.getString(i)); } } return mc; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getVirtualMailboxAccountId,private static long  (long mailboxId){ return mailboxId >> 32; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getVirtualMailboxAccountIdString,private static String  (long mailboxId){ return Long.toString(mailboxId >> 32); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getVirtualMailboxCursor,private Cursor  (long mailboxId String[] projection){ MatrixCursor mc=new MatrixCursorWithCachedColumns(projection 1); mc.addRow(getVirtualMailboxRow(getVirtualMailboxAccountId(mailboxId) getVirtualMailboxType(mailboxId) projection)); return mc; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getVirtualMailboxId,public static long  (long accountId int type){ return (accountId << 32) + type; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getVirtualMailboxMessagesCursor,"private static Cursor  (SQLiteDatabase db String[] uiProjection long mailboxId final boolean unseenOnly){ ContentValues values=new ContentValues(); values.put(UIProvider.ConversationColumns.COLOR CONVERSATION_COLOR); final int virtualMailboxId=getVirtualMailboxType(mailboxId); final String[] selectionArgs; StringBuilder sb=genSelect(getMessageListMap() uiProjection values); appendConversationInfoColumns(sb); sb.append("" FROM "" + Message.TABLE_NAME + "" WHERE ""+ Message.FLAG_LOADED_SELECTION+ "" AND ""); if (isCombinedMailbox(mailboxId)) { if (unseenOnly) { sb.append(MessageColumns.FLAG_SEEN).append(""=0 AND ""); sb.append(MessageColumns.FLAG_READ).append(""=0 AND ""); } selectionArgs=null; } else { if (virtualMailboxId == Mailbox.TYPE_INBOX) { throw new IllegalArgumentException(""No virtual mailbox for: "" + mailboxId); } sb.append(MessageColumns.ACCOUNT_KEY).append(""=? AND ""); selectionArgs=new String[]{getVirtualMailboxAccountIdString(mailboxId)}; } switch (getVirtualMailboxType(mailboxId)) { case Mailbox.TYPE_INBOX: sb.append(MessageColumns.MAILBOX_KEY + "" IN (SELECT "" + MailboxColumns._ID+ "" FROM ""+ Mailbox.TABLE_NAME+ "" WHERE ""+ MailboxColumns.TYPE+ ""=""+ Mailbox.TYPE_INBOX+ "")""); break; case Mailbox.TYPE_STARRED: sb.append(MessageColumns.FLAG_FAVORITE + ""=1""); break; case Mailbox.TYPE_UNREAD: sb.append(MessageColumns.FLAG_READ + ""=0 AND "" + MessageColumns.MAILBOX_KEY+ "" NOT IN (SELECT ""+ MailboxColumns._ID+ "" FROM ""+ Mailbox.TABLE_NAME+ "" WHERE ""+ MailboxColumns.TYPE+ ""=""+ Mailbox.TYPE_TRASH+ "")""); break; default : throw new IllegalArgumentException(""No virtual mailbox for: "" + mailboxId); } sb.append("" ORDER BY "" + MessageColumns.TIMESTAMP + "" DESC""); return db.rawQuery(sb.toString() selectionArgs); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getVirtualMailboxRow,"private Object[]  (long accountId int mailboxType String[] projection){ final long id=getVirtualMailboxId(accountId mailboxType); final String idString=Long.toString(id); Object[] values=new Object[projection.length]; for (int i=0; i < projection.length; i++) { final String column=projection[i]; if (column.equals(UIProvider.FolderColumns._ID)) { values[i]=id; } else if (column.equals(UIProvider.FolderColumns.URI)) { values[i]=combinedUriString(""uifolder"" idString); } else if (column.equals(UIProvider.FolderColumns.NAME)) { values[i]=getFolderDisplayName(getFolderTypeFromMailboxType(mailboxType) """"); } else if (column.equals(UIProvider.FolderColumns.HAS_CHILDREN)) { values[i]=0; } else if (column.equals(UIProvider.FolderColumns.CAPABILITIES)) { values[i]=UIProvider.FolderCapabilities.DELETE | UIProvider.FolderCapabilities.IS_VIRTUAL; } else if (column.equals(UIProvider.FolderColumns.CONVERSATION_LIST_URI)) { values[i]=combinedUriString(""uimessages"" idString); } else if (column.equals(UIProvider.FolderColumns.UNREAD_COUNT)) { if (mailboxType == Mailbox.TYPE_INBOX && accountId == COMBINED_ACCOUNT_ID) { final int unreadCount=EmailContent.count(getContext() Message.CONTENT_URI MessageColumns.MAILBOX_KEY + "" IN (SELECT "" + MailboxColumns._ID+ "" FROM ""+ Mailbox.TABLE_NAME+ "" WHERE ""+ MailboxColumns.TYPE+ ""=""+ Mailbox.TYPE_INBOX+ "") AND ""+ MessageColumns.FLAG_READ+ ""=0"" null); values[i]=unreadCount; } else if (mailboxType == Mailbox.TYPE_UNREAD) { final String accountKeyClause; final String[] whereArgs; if (accountId == COMBINED_ACCOUNT_ID) { accountKeyClause=""""; whereArgs=null; } else { accountKeyClause=MessageColumns.ACCOUNT_KEY + ""= ? AND ""; whereArgs=new String[]{Long.toString(accountId)}; } final int unreadCount=EmailContent.count(getContext() Message.CONTENT_URI accountKeyClause + MessageColumns.FLAG_READ + ""=0 AND ""+ MessageColumns.MAILBOX_KEY+ "" NOT IN (SELECT ""+ MailboxColumns._ID+ "" FROM ""+ Mailbox.TABLE_NAME+ "" WHERE ""+ MailboxColumns.TYPE+ ""=""+ Mailbox.TYPE_TRASH+ "")"" whereArgs); values[i]=unreadCount; } else if (mailboxType == Mailbox.TYPE_STARRED) { final String accountKeyClause; final String[] whereArgs; if (accountId == COMBINED_ACCOUNT_ID) { accountKeyClause=""""; whereArgs=null; } else { accountKeyClause=MessageColumns.ACCOUNT_KEY + ""= ? AND ""; whereArgs=new String[]{Long.toString(accountId)}; } final int starredCount=EmailContent.count(getContext() Message.CONTENT_URI accountKeyClause + MessageColumns.FLAG_FAVORITE + ""=1"" whereArgs); values[i]=starredCount; } } else if (column.equals(UIProvider.FolderColumns.ICON_RES_ID)) { if (mailboxType == Mailbox.TYPE_INBOX) { values[i]=R.drawable.ic_drawer_inbox_24dp; } else if (mailboxType == Mailbox.TYPE_UNREAD) { values[i]=R.drawable.ic_drawer_unread_24dp; } else if (mailboxType == Mailbox.TYPE_STARRED) { values[i]=R.drawable.ic_drawer_starred_24dp; } } } return values; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,getVirtualMailboxType,private static int  (long mailboxId){ return (int)(mailboxId & 0xF); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,handleMessage,@Override public boolean  (android.os.Message msg){ synchronized (mDelayedSyncRequests) { final SyncRequestMessage request=(SyncRequestMessage)msg.obj; final android.accounts.Account account=request.mAccount; final Bundle extras=Mailbox.createSyncBundle(r
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,handleMessageUpdateNotifications,private void  (final Uri uri final String messageId final ContentValues values){ if (!uri.getBooleanQueryParameter(IS_UIPROVIDER false)) { notifyUIConversation(uri); } notifyUIMessage(messageId); if (values.containsKey(MessageColumns.FLAG_READ) || values.containsKey(MessageColumns.MAILBOX_KEY)) { final Cursor c=query(Message.CONTENT_URI.buildUpon().appendEncodedPath(messageId).build() MESSAGE_KEYS_PROJECTION null null null); if (c != null) { try { if (c.moveToFirst()) { notifyUIFolder(c.getLong(MESSAGE_KEYS_MAILBOX_KEY_COLUMN) c.getLong(MESSAGE_KEYS_ACCOUNT_KEY_COLUMN)); } } finally { c.close(); } } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,hashCode,@Override public int  (){ int result=mAuthority.hashCode(); result=31 * result + mAccount.hashCode(); result=31 * result + (int)(mMailboxId ^ (mMailboxId >>> 32)); return result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,init,"private static void  (final Context context){ synchronized (sURIMatcher) { if (INTEGRITY_CHECK_URI != null) { return; } INTEGRITY_CHECK_URI=Uri.parse(""content://"" + EmailContent.AUTHORITY + ""/integrityCheck""); ACCOUNT_BACKUP_URI=Uri.parse(""content://"" + EmailContent.AUTHORITY + ""/accountBackup""); FOLDER_STATUS_URI=Uri.parse(""content://"" + EmailContent.AUTHORITY + ""/status""); EMAIL_APP_MIME_TYPE=context.getString(R.string.application_mime_type); final String uiNotificationAuthority=EmailContent.EMAIL_PACKAGE_NAME + "".uinotifications""; UIPROVIDER_CONVERSATION_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uimessages""); UIPROVIDER_FOLDER_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uifolder""); UIPROVIDER_FOLDERLIST_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uifolders""); UIPROVIDER_ACCOUNT_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uiaccount""); UIPROVIDER_ATTACHMENT_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uiattachment""); UIPROVIDER_ATTACHMENTS_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uiattachments""); UIPROVIDER_ALL_ACCOUNTS_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uiaccts""); UIPROVIDER_MESSAGE_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uimessage""); UIPROVIDER_RECENT_FOLDERS_NOTIFIER=Uri.parse(""content://"" + uiNotificationAuthority + ""/uirecentfolders""); sURIMatcher.addURI(EmailContent.AUTHORITY ""account"" ACCOUNT); sURIMatcher.addURI(EmailContent.AUTHORITY ""account/#"" ACCOUNT_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""accountCheck/#"" ACCOUNT_CHECK); sURIMatcher.addURI(EmailContent.AUTHORITY ""mailbox"" MAILBOX); sURIMatcher.addURI(EmailContent.AUTHORITY ""mailbox/*"" MAILBOX_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""mailboxNotification/#"" MAILBOX_NOTIFICATION); sURIMatcher.addURI(EmailContent.AUTHORITY ""mailboxMostRecentMessage/#"" MAILBOX_MOST_RECENT_MESSAGE); sURIMatcher.addURI(EmailContent.AUTHORITY ""mailboxCount/#"" MAILBOX_MESSAGE_COUNT); sURIMatcher.addURI(EmailContent.AUTHORITY ""message"" MESSAGE); sURIMatcher.addURI(EmailContent.AUTHORITY ""message/#"" MESSAGE_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""attachment"" ATTACHMENT); sURIMatcher.addURI(EmailContent.AUTHORITY ""attachment/#"" ATTACHMENT_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""attachment/message/#"" ATTACHMENTS_MESSAGE_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""attachment/cachedFile"" ATTACHMENTS_CACHED_FILE_ACCESS); sURIMatcher.addURI(EmailContent.AUTHORITY ""body"" BODY); sURIMatcher.addURI(EmailContent.AUTHORITY ""body/#"" BODY_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""bodyHtml/#"" BODY_HTML); sURIMatcher.addURI(EmailContent.AUTHORITY ""bodyText/#"" BODY_TEXT); sURIMatcher.addURI(EmailContent.AUTHORITY ""hostauth"" HOSTAUTH); sURIMatcher.addURI(EmailContent.AUTHORITY ""hostauth/*"" HOSTAUTH_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""credential"" CREDENTIAL); sURIMatcher.addURI(EmailContent.AUTHORITY ""credential/*"" CREDENTIAL_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""syncedMessage/#"" SYNCED_MESSAGE_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""messageBySelection"" MESSAGE_SELECTION); sURIMatcher.addURI(EmailContent.AUTHORITY MessageMove.PATH MESSAGE_MOVE); sURIMatcher.addURI(EmailContent.AUTHORITY MessageStateChange.PATH MESSAGE_STATE_CHANGE); sURIMatcher.addURI(EmailContent.AUTHORITY ""deletedMessage"" DELETED_MESSAGE); sURIMatcher.addURI(EmailContent.AUTHORITY ""deletedMessage/#"" DELETED_MESSAGE_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""updatedMessage"" UPDATED_MESSAGE); sURIMatcher.addURI(EmailContent.AUTHORITY ""updatedMessage/#"" UPDATED_MESSAGE_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""policy"" POLICY); sURIMatcher.addURI(EmailContent.AUTHORITY ""policy/#"" POLICY_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""quickresponse"" QUICK_RESPONSE); sURIMatcher.addURI(EmailContent.AUTHORITY ""quickresponse/#"" QUICK_RESPONSE_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""quickresponse/account/#"" QUICK_RESPONSE_ACCOUNT_ID); sURIMatcher.addURI(EmailContent.AUTHORITY ""uifolders/#"" UI_FOLDERS); sURIMatcher.addURI(EmailContent.AUTHORITY ""uifullfolders/#"" UI_FULL_FOLDERS); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiallfolders/#"" UI_ALL_FOLDERS); sURIMatcher.addURI(EmailContent.AUTHORITY ""uisubfolders/#"" UI_SUBFOLDERS); sURIMatcher.addURI(EmailContent.AUTHORITY ""uimessages/#"" UI_MESSAGES); sURIMatcher.addURI(EmailContent.AUTHORITY ""uimessage/#"" UI_MESSAGE); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiundo"" UI_UNDO); sURIMatcher.addURI(EmailContent.AUTHORITY QUERY_UIREFRESH + ""/#"" UI_FOLDER_REFRESH); sURIMatcher.addURI(EmailContent.AUTHORITY ""uifolder/*"" UI_FOLDER); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiinbox/#"" UI_INBOX); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiaccount/#"" UI_ACCOUNT); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiaccts"" UI_ACCTS); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiacctsettings"" UI_ACCTSETTINGS); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiattachments/#"" UI_ATTACHMENTS); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiattachment/#"" UI_ATTACHMENT); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiattachmentbycid/#/*"" UI_ATTACHMENT_BY_CID); sURIMatcher.addURI(EmailContent.AUTHORITY ""uisearch/#"" UI_SEARCH); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiaccountdata/#"" UI_ACCOUNT_DATA); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiloadmore/#"" UI_FOLDER_LOAD_MORE); sURIMatcher.addURI(EmailContent.AUTHORITY ""uiconversation/#"" UI_CONVERSATION); sURIMatcher.addURI(EmailContent.AUTHORITY ""uirecentfolders/#"" UI_RECENT_FOLDERS); sURIMatcher.addURI(EmailContent.AUTHORITY ""uidefaultrecentfolders/#"" UI_DEFAULT_RECENT_FOLDERS); sURIMatcher.addURI(EmailContent.AUTHORITY ""pickTrashFolder/#"" ACCOUNT_PICK_TRASH_FOLDER); sURIMatcher.addURI(EmailContent.AUTHORITY ""pickSentFolder/#"" ACCOUNT_PICK_SENT_FOLDER); sURIMatcher.addURI(EmailContent.AUTHORITY ""uipurgefolder/#"" UI_PURGE_FOLDER); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,initUiProvider,"private void  (){ mDatabase.execSQL(""update "" + Mailbox.TABLE_NAME + "" set ""+ MailboxColumns.UI_SYNC_STATUS+ ""=""+ UIProvider.SyncStatus.NO_SYNC); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,injectAttachmentService,public void  (final EmailAttachmentService attachmentService){ mAttachmentService=attachmentService == null ? DEFAULT_ATTACHMENT_SERVICE : attachmentService; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,insert,"@Override public Uri  (Uri uri ContentValues values){ Log.d(TAG ""Insert: "" + uri); final int match=findMatch(uri ""insert""); final Context context=getContext(); final SQLiteDatabase db=getDatabase(context); final int table=match >> BASE_SHIFT; String id=""0"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,isCombinedMailbox,private static boolean  (long mailboxId){ return (mailboxId >> 32) == COMBINED_ACCOUNT_ID; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,isVirtualMailbox,private static boolean  (long mailboxId){ return mailboxId >= 0x100000000L; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,markAllSeen,"private int  (final Context context final String mailboxId){ final SQLiteDatabase db=getDatabase(context); final String table=Message.TABLE_NAME; final ContentValues values=new ContentValues(1); values.put(MessageColumns.FLAG_SEEN 1); final String whereClause=MessageColumns.MAILBOX_KEY + "" = ?""; final String[] whereArgs=new String[]{mailboxId}; return db.update(table values whereClause whereArgs); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,mostRecentMessageQuery,"public Cursor  (Uri uri){ SQLiteDatabase db=getDatabase(getContext()); String mailboxId=uri.getLastPathSegment(); return db.rawQuery(""select max(_id) from Message where mailboxKey=?"" new String[]{mailboxId}); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notificationQuery,"private Cursor  (final Uri uri){ final SQLiteDatabase db=getDatabase(getContext()); final String accountId=uri.getLastPathSegment(); final String sql=""SELECT "" + MessageColumns.MAILBOX_KEY + ""  ""+ ""SUM(CASE ""+ MessageColumns.FLAG_READ+ "" WHEN 0 THEN 1 ELSE 0 END)  ""+ ""SUM(CASE ""+ MessageColumns.FLAG_SEEN+ "" WHEN 0 THEN 1 ELSE 0 END)\n""+ ""FROM ""+ Message.TABLE_NAME+ ""\n""+ ""WHERE ""+ MessageColumns.ACCOUNT_KEY+ "" = ?\n""+ ""GROUP BY ""+ MessageColumns.MAILBOX_KEY; final String[] selectionArgs={accountId}; return db.rawQuery(sql selectionArgs); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyUI,private void  (Uri uri long id){ notifyUI(uri Long.toString(id)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyUIAccount,private void  (long id){ notifyUI(UIPROVIDER_ACCOUNT_NOTIFIER Long.toString(id)); notifyUI(UIPROVIDER_ALL_ACCOUNTS_NOTIFIER null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyUIConversation,private void  (Uri uri){ String id=uri.getLastPathSegment(); Message msg=Message.restoreMessageWithId(getContext() Long.parseLong(id)); if (msg != null) { notifyUIConversationMailbox(msg.mMailboxKey); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyUIConversationMailbox,"private void  (long id){ notifyUI(UIPROVIDER_CONVERSATION_NOTIFIER Long.toString(id)); Mailbox mailbox=Mailbox.restoreMailboxWithId(getContext() id); if (mailbox == null) { LogUtils.w(TAG ""No mailbox for notification: "" + id); return; } if (mailbox.mType == Mailbox.TYPE_INBOX) { notifyUI(UIPROVIDER_CONVERSATION_NOTIFIER EmailProvider.combinedMailboxId(Mailbox.TYPE_INBOX)); } notifyWidgets(id); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyUIFolder,private void  (final long folderId final long accountId){ notifyUIFolder(Long.toString(folderId) accountId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyUIMessage,private void  (String id){ notifyUI(UIPROVIDER_MESSAGE_NOTIFIER id); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,notifyWidgets,"private void  (long mailboxId){ Context context=getContext(); if (mAppWidgetManager == null) { mAppWidgetManager=AppWidgetManager.getInstance(context); mEmailComponent=new ComponentName(context WidgetProvider.getProviderName(context)); } int[] widgetIds=mAppWidgetManager.getAppWidgetIds(mEmailComponent); if (!Arrays.equals(widgetIds mSavedWidgetIds)) { mSavedWidgetIds=widgetIds; String[][] widgetInfos=BaseWidgetProvider.getWidgetInfo(context widgetIds); mWidgetNotifyMailboxes.clear(); for ( String[] widgetInfo : widgetInfos) { try { if (widgetInfo == null || TextUtils.isEmpty(widgetInfo[1])) continue; long id=Long.parseLong(Uri.parse(widgetInfo[1]).getLastPathSegment()); if (!isCombinedMailbox(id)) { if (!mWidgetNotifyMailboxes.contains(id)) { mWidgetNotifyMailboxes.add(id); } } else { switch (getVirtualMailboxType(id)) { case Mailbox.TYPE_INBOX: Cursor c=query(Mailbox.CONTENT_URI Mailbox.ID_PROJECTION MailboxColumns.TYPE + ""=?"" new String[]{Integer.toString(Mailbox.TYPE_INBOX)} null); try { while (c.moveToNext()) { mWidgetNotifyMailboxes.add(c.getLong(Mailbox.ID_PROJECTION_COLUMN)); } } finally { c.close(); } break; } } } catch (NumberFormatException e) { } } } if (mWidgetNotifyMailboxes.contains(mailboxId)) { Intent intent=new Intent(Utils.ACTION_NOTIFY_DATASET_CHANGED); intent.putExtra(Utils.EXTRA_FOLDER_URI uiUri(""uifolder"" mailboxId)); intent.setType(EMAIL_APP_MIME_TYPE); context.sendBroadcast(intent); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,onConfigurationChanged,@Override public void  (Configuration configuration){ int delta=oldConfiguration.updateFrom(configuration); if (Configuration.needNewResources(delta ActivityInfo.CONFIG_LOCALE)) { notifyUIAccount(COMBINED_ACCOUNT_ID); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,onCreate,@Override public boolean  (){ Context context=getContext(); EmailContent.init(context); init(context); DebugUtils.init(context); setServicesEnabledAsync(context); reconcileAccountsAsync(context); final Intent updateAllWidgetsIntent=new Intent(com.android.
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,onRefreshCompleted,@Override public void  (long mailboxId int result){ final int syncValue=UIProvider.createSyncValue(EmailContent.SYNC_STATUS_USER result); final ContentValues values=new ContentValues(); values.put(Mailbox.UI_SYNC_STATUS UIProvider.SyncStatus.NO_SYNC); val
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,onSharedPreferenceChanged,@Override public void  (SharedPreferences sharedPreferences String key){ if (PreferenceKeys.REMOVAL_ACTION.equals(key) || PreferenceKeys.CONVERSATION_LIST_SWIPE.equals(key) || PreferenceKeys.SHOW_SENDER_IMAGES.equals(key)|| PreferenceKeys.DEFAULT_REPLY_AL
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,openFile,"@Override public ParcelFileDescriptor  (final Uri uri final String mode) throws FileNotFoundException { if (LogUtils.isLoggable(TAG LogUtils.DEBUG)) { LogUtils.d(TAG ""EmailProvider.openFile: %s"" LogUtils.contentUriToString(TAG uri)); } final int match=fin"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,pickFolder,"private int  (Uri uri int type int headerId){ Context context=getContext(); Long acctId=Long.parseLong(uri.getLastPathSegment()); Cursor ac=query(uiUri(""uiaccount"" acctId) UIProvider.ACCOUNTS_PROJECTION null null null); try { if (ac.moveToFirst()) { final com.android.mail.providers.Account uiAccount=com.android.mail.providers.Account.builder().buildFrom(ac); Intent intent=new Intent(context FolderPickerActivity.class); intent.putExtra(PICKER_UI_ACCOUNT uiAccount); intent.putExtra(PICKER_MAILBOX_TYPE type); intent.putExtra(PICKER_HEADER_ID headerId); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); context.startActivity(intent); return 1; } return 0; } finally { ac.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,pickSentFolder,private int  (Uri uri){ return pickFolder(uri Mailbox.TYPE_SENT R.string.sent_folder_selection_title); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,pickTrashFolder,private int  (Uri uri){ return pickFolder(uri Mailbox.TYPE_TRASH R.string.trash_folder_selection_title); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,putIntegerLongOrBoolean,private static void  (ContentValues values String columnName Object value){ if (value instanceof Integer) { Integer intValue=(Integer)value; values.put(columnName intValue); } else if (value instanceof Boolean) { Boolean boolValue=(Boolean)value; values.put(columnName boolValue ? 1 : 0); } else if (value instanceof Long) { Long longValue=(Long)value; values.put(columnName longValue); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,query,"@Override public Cursor  (Uri uri String[] projection String selection String[] selectionArgs String sortOrder){ Cursor c=null; int match; try { match=findMatch(uri ""query""); } catch ( IllegalArgumentException e) { String uriString=uri.toString(); if (uri"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,reconcileAccountsAsync,private static void  (final Context context){ if (context.getResources().getBoolean(R.bool.reconcile_accounts)) { EmailAsyncTask.runAsyncParallel(new Runnable(){ @Override public void run(){ AccountReconciler.reconcileAccounts(context); } } ); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,remapFolderCursor,private void  (final Cursor inputCursor final MatrixCursor outputCursor final long accountId final String[] uiProjection){ if (inputCursor == null || inputCursor.getCount() == 0) { return; } final int idColumn=inputCursor.getColumnIndex(BaseColumns._ID); final int typeColumn=inputCursor.getColumnIndex(UIProvider.FolderColumns.TYPE); final int nameColumn=inputCursor.getColumnIndex(UIProvider.FolderColumns.NAME); final int capabilitiesColumn=inputCursor.getColumnIndex(UIProvider.FolderColumns.CAPABILITIES); final int persistentIdColumn=inputCursor.getColumnIndex(UIProvider.FolderColumns.PERSISTENT_ID); final int loadMoreUriColumn=inputCursor.getColumnIndex(UIProvider.FolderColumns.LOAD_MORE_URI); final Context context=getContext(); final String protocol=Account.getProtocol(context accountId); final EmailServiceInfo info=EmailServiceUtils.getServiceInfo(context protocol); while (inputCursor.moveToNext()) { final MatrixCursor.RowBuilder builder=outputCursor.newRow(); final int folderType=inputCursor.getInt(typeColumn); for (int i=0; i < uiProjection.length; i++) { final int index=inputCursor.getColumnIndex(uiProjection[i]); if (index == -1) { builder.add(null); continue; } final String value=inputCursor.getString(index); final boolean remapped; if (nameColumn == index) { builder.add(getFolderDisplayName(folderType value)); remapped=true; } else if (capabilitiesColumn == index) { final long mailboxID=inputCursor.getLong(idColumn); final int mailboxType=getMailboxTypeFromFolderType(folderType); builder.add(getFolderCapabilities(info mailboxType mailboxID)); remapped=true; } else if (persistentIdColumn == index) { builder.add(Base64.encodeToString(value.getBytes() Base64.URL_SAFE | Base64.NO_WRAP | Base64.NO_PADDING)); remapped=true; } else if (loadMoreUriColumn == index && folderType != Mailbox.TYPE_SEARCH && (info == null || !info.offerLoadMore)) { builder.add(null); remapped=true; } else { remapped=false; } if (!remapped) { builder.add(value); } } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restartPush,"private static void  (final android.accounts.Account account){ final Bundle extras=new Bundle(); extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL true); extras.putBoolean(ContentResolver.SYNC_EXTRAS_DO_NOT_RETRY true); extras.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED true); extras.putBoolean(Mailbox.SYNC_EXTRA_PUSH_ONLY true); extras.putString(EmailServiceStatus.SYNC_EXTRAS_CALLBACK_URI EmailContent.CONTENT_URI.toString()); extras.putString(EmailServiceStatus.SYNC_EXTRAS_CALLBACK_METHOD SYNC_STATUS_CALLBACK_METHOD); ContentResolver.requestSync(account EmailContent.AUTHORITY extras); LogUtils.i(TAG ""requestSync EmailProvider startSync %s  %s"" account.toString() extras.toString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restartPushForAccount,private static boolean  (final Context context final SQLiteDatabase db final ContentValues values final String accountId){ if (values.containsKey(AccountColumns.SYNC_LOOKBACK) || values.containsKey(AccountColumns.SYNC_INTERVAL)) { return restartPush(context db accountId); } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restartPushForMailbox,private static boolean  (final Context context final SQLiteDatabase db final ContentValues values final String accountId){ if (values.containsKey(MailboxColumns.SYNC_LOOKBACK) || values.containsKey(MailboxColumns.SYNC_INTERVAL)) { return restartPush(context db accountId); } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restoreAccounts,private static int  (final Context context){ final Collection<EmailServiceInfo> infos=EmailServiceUtils.getServiceInfoList(context); final Set<String> accountTypes=new HashSet<String>(3); for ( final EmailServiceInfo info : infos) { if (!TextUtils.isEmpty(info.accountType)) { accountTypes.add(info.accountType); } } final List<android.accounts.Account> amAccounts=new ArrayList<android.accounts.Account>(); final AccountManager am=AccountManager.get(context); for ( final String accountType : accountTypes) { amAccounts.addAll(Arrays.asList(am.getAccountsByType(accountType))); } int restoredCount=0; for ( final android.accounts.Account amAccount : amAccounts) { final String jsonString=am.getUserData(amAccount ACCOUNT_MANAGER_JSON_TAG); if (TextUtils.isEmpty(jsonString)) { continue; } final Account account=Account.fromJsonString(jsonString); if (account != null) { AccountSettingsUtils.commitSettings(context account); final Bundle extras=new Bundle(3); extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL true); extras.putBoolean(ContentResolver.SYNC_EXTRAS_DO_NOT_RETRY true); extras.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED true); ContentResolver.requestSync(amAccount EmailContent.AUTHORITY extras); restoredCount++; } } return restoredCount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restoreHostAuth,"private static HostAuth  (SQLiteDatabase db long id){ Cursor c=db.query(HostAuth.TABLE_NAME HostAuth.CONTENT_PROJECTION HostAuthColumns._ID + ""=?"" new String[]{Long.toString(id)} null null null); try { if (c.moveToFirst()) { HostAuth hostAuth=new HostAuth(); hostAuth.restore(c); return hostAuth; } return null; } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,restoreIfNeeded,"private static void  (Context context SQLiteDatabase mainDatabase){ if (DebugUtils.DEBUG) { LogUtils.w(TAG ""restoreIfNeeded...""); } String legacyBackup=Preferences.getLegacyBackupPreference(context); if (!TextUtils.isEmpty(legacyBackup)) { backupAccounts(context mainDatabase); Preferences.clearLegacyBackupPreference(context); LogUtils.w(TAG ""Created new EmailProvider backup database""); return; } final File backupDb=context.getDatabasePath(BACKUP_DATABASE_NAME); if (backupDb.exists()) { backupAccounts(context mainDatabase); context.deleteDatabase(BACKUP_DATABASE_NAME); LogUtils.w(TAG ""Migrated from backup database to account manager""); return; } if (DatabaseUtils.longForQuery(mainDatabase ""SELECT EXISTS (SELECT ? FROM "" + Account.TABLE_NAME + "" )"" EmailContent.ID_PROJECTION) > 0) { if (DebugUtils.DEBUG) { LogUtils.w(TAG ""restoreIfNeeded: Account exists.""); } return; } restoreAccounts(context); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,run,@Override public void  (){ setServicesEnabledSync(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,runSearchQuery,"private void  (final Context context final long accountId final long searchMailboxId){ LogUtils.d(TAG ""runSearchQuery. account: %d mailbox id: %d"" accountId searchMailboxId); new AsyncTask<Void Void Void>(){ @Override public Void doInBackground( Void... params){ final EmailServiceProxy service=EmailServiceUtils.getServiceForAccount(context accountId); if (service != null) { try { final int totalCount=service.searchMessages(accountId mSearchParams searchMailboxId); final ContentValues cv=new ContentValues(1); cv.put(MailboxColumns.TOTAL_COUNT totalCount); update(ContentUris.withAppendedId(Mailbox.CONTENT_URI searchMailboxId) cv null null); LogUtils.d(TAG ""EmailProvider#runSearchQuery. TotalCount to UI: %d"" totalCount); } catch ( RemoteException e) { LogUtils.e(""searchMessages"" ""RemoteException"" e); } } return null; } } .executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,sendMessageListDataChangedNotification,private void  (){ final Context context=getContext(); final Intent intent=new Intent(ACTION_NOTIFY_MESSAGE_LIST_DATASET_CHANGED); context.sendBroadcast(intent); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,sendNotifierChange,private void  (Uri baseUri String op String id){ if (baseUri == null) return; if (op != null) { baseUri=baseUri.buildUpon().appendEncodedPath(op).build(); } long longId=0L; try { longId=Long.valueOf(id); } catch ( NumberFormatException ignore) { } if (longId > 0) { notifyUI(baseUri id); } else { notifyUI(baseUri null); } if (baseUri.equals(Message.NOTIFIER_URI)) { sendMessageListDataChangedNotification(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,setBatchNotificationsSet,private void  (Set<Uri> batchNotifications){ mTLBatchNotifications.set(batchNotifications); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,setServicesEnabled,private static void  (Context context boolean enabled){ PackageManager pm=context.getPackageManager(); pm.setComponentEnabledSetting(new ComponentName(context AttachmentService.class) enabled ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED PackageManager.DONT_KILL_APP); startOrStopService(enabled context new Intent(context AttachmentService.class)); final NotificationController controller=NotificationControllerCreatorHolder.getInstance(context); if (controller != null) { controller.watchForMessages(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,setServicesEnabledAsync,public static void  (final Context context){ if (context.getResources().getBoolean(R.bool.enable_services)) { EmailAsyncTask.runAsyncParallel(new Runnable(){ @Override public void run(){ setServicesEnabledSync(context); } } ); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,setServicesEnabledSync,public static boolean  (Context context){ EmailContent.init(context); Cursor c=null; try { c=context.getContentResolver().query(Account.CONTENT_URI Account.ID_PROJECTION null null null); boolean enable=c != null && c.getCount() > 0; setServicesEnabled(context enable); return enable; } finally { if (c != null) { c.close(); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,shutdown,@Override public void  (){ if (mDatabase != null) { mDatabase.close(); mDatabase=null; } if (mBodyDatabase != null) { mBodyDatabase.close(); mBodyDatabase=null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,startOrStopService,private static void  (boolean enabled Context context Intent intent){ if (enabled) { context.startService(intent); } else { context.stopService(intent); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,startSync,private void  (final Mailbox mailbox final int deltaMessageCount){ final android.accounts.Account account=getAccountManagerAccount(mailbox.mAccountKey); if (account != null) { startSync(account mailbox.mId deltaMessageCount); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiAccounts,"private Cursor  (String[] uiProjection boolean suppressCombined){ final Context context=getContext(); final SQLiteDatabase db=getDatabase(context); final Cursor accountIdCursor=db.rawQuery(""select _id from "" + Account.TABLE_NAME new String[0]); final MatrixCursor mc; try { boolean combinedAccount=false; if (!suppressCombined && accountIdCursor.getCount() > 1) { combinedAccount=true; } final Bundle extras=new Bundle(); extras.putInt(AccountCursorExtraKeys.ACCOUNTS_LOADED 1); mc=new MatrixCursorWithExtra(uiProjection accountIdCursor.getCount() extras); final Object[] values=new Object[uiProjection.length]; while (accountIdCursor.moveToNext()) { final String id=accountIdCursor.getString(0); final Cursor accountCursor=db.rawQuery(genQueryAccount(uiProjection id) new String[]{id}); try { if (accountCursor.moveToNext()) { for (int i=0; i < uiProjection.length; i++) { values[i]=accountCursor.getString(i); } mc.addRow(values); } } finally { accountCursor.close(); } } if (combinedAccount) { addCombinedAccountRow(mc); } } finally { accountIdCursor.close(); } mc.setNotificationUri(context.getContentResolver() UIPROVIDER_ALL_ACCOUNTS_NOTIFIER); return mc; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiDeleteAccount,"private int  (Uri uri){ Context context=getContext(); long accountId=Long.parseLong(uri.getLastPathSegment()); try { final Account account=Account.restoreAccountWithId(context accountId); if (account == null) { return 0; } deleteAccountData(context accountId); uri=ContentUris.withAppendedId(Account.CONTENT_URI accountId); context.getContentResolver().delete(uri null null); AccountBackupRestore.backup(context); SecurityPolicy.getInstance(context).reducePolicies(); setServicesEnabledSync(context); return 1; } catch ( Exception e) { LogUtils.w(Logging.LOG_TAG ""Exception while deleting account"" e); } return 0; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiDeleteAccountData,private int  (Uri uri){ Context context=getContext(); long accountId=Long.parseLong(uri.getLastPathSegment()); final Account account=Account.restoreAccountWithId(context accountId); if (account == null) { return 0; } deleteAccountData(context accountId); return 1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiDeleteMessage,private int  (Uri uri){ final Context context=getContext(); Message msg=getMessageFromLastSegment(uri); if (msg == null) return 0; Mailbox mailbox=Mailbox.restoreMailboxWithId(context msg.mMailboxKey); if (mailbox == null) return 0; if (mailbox.mType == Mailbox.TYPE_TRASH || mailbox.mType == Mailbox.TYPE_DRAFTS) { AttachmentUtilities.deleteAllAttachmentFiles(context msg.mAccountKey msg.mId); final int r=context.getContentResolver().delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg.mId) null null); notifyUIFolder(mailbox.mId mailbox.mAccountKey); notifyUIMessage(msg.mId); return r; } Mailbox trashMailbox=Mailbox.restoreMailboxOfType(context msg.mAccountKey Mailbox.TYPE_TRASH); if (trashMailbox == null) { return 0; } ContentValues values=new ContentValues(); values.put(MessageColumns.MAILBOX_KEY trashMailbox.mId); final int r=uiUpdateMessage(uri values true); notifyUIFolder(mailbox.mId mailbox.mAccountKey); notifyUIMessage(msg.mId); return r; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiFolderLoadMore,private Cursor  (final Mailbox mailbox){ if (mailbox == null) return null; if (mailbox.mType == Mailbox.TYPE_SEARCH) { mSearchParams.mOffset+=SEARCH_MORE_INCREMENT; runSearchQuery(getContext() mailbox.mAccountKey mailbox.mId); } else { uiFolderRefresh(mailbox VISIBLE_LIMIT_INCREMENT); } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiFolderRefresh,private Cursor  (final Mailbox mailbox final int deltaMessageCount){ if (mailbox != null) { RefreshStatusMonitor.getInstance(getContext()).monitorRefreshStatus(mailbox.mId new RefreshStatusMonitor.Callback(){ @Override public void onRefreshCompleted( long mailboxId  int result){ final int syncValue=UIProvider.createSyncValue(EmailContent.SYNC_STATUS_USER result); final ContentValues values=new ContentValues(); values.put(Mailbox.UI_SYNC_STATUS UIProvider.SyncStatus.NO_SYNC); values.put(Mailbox.UI_LAST_SYNC_RESULT syncValue); mDatabase.update(Mailbox.TABLE_NAME values WHERE_ID new String[]{String.valueOf(mailboxId)}); notifyUIFolder(mailbox.mId mailbox.mAccountKey); } @Override public void onTimeout( long mailboxId){ } } ); startSync(mailbox deltaMessageCount); } return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiFolders,private Cursor  (final Uri uri final String[] uiProjection){ final Context context=getContext(); final SQLiteDatabase db=getDatabase(context); final String id=uri.getPathSegments().get(1); final Uri notifyUri=UIPROVIDER_FOLDERLIST_NOTIFIER.buildUpon().appendEncodedPath(id).build(); final Cursor vc=uiVirtualMailboxes(id uiProjection); vc.setNotificationUri(context.getContentResolver() notifyUri); if (id.equals(COMBINED_ACCOUNT_ID_STRING)) { return vc; } else { Cursor c=db.rawQuery(genQueryAccountMailboxes(UIProvider.FOLDERS_PROJECTION) new String[]{id}); c=getFolderListCursor(c Long.valueOf(id) uiProjection); c.setNotificationUri(context.getContentResolver() notifyUri); if (c.getCount() > 0) { Cursor[] cursors=new Cursor[]{vc c}; return new MergeCursor(cursors); } else { return c; } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiPopulateRecentFolders,"private int  (Uri uri){ final Context context=getContext(); final String id=uri.getLastPathSegment(); final Uri[] recentFolders=defaultRecentFolders(id); final int numFolders=recentFolders.length; if (numFolders <= 0) { return 0; } final int rowsUpdated=updateTimestamp(context id recentFolders); LogUtils.d(TAG ""uiPopulateRecentFolders: %d folders changed"" rowsUpdated); return rowsUpdated; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiPurgeFolder,"private int  (Uri uri){ final Context context=getContext(); final long mailboxId=Long.parseLong(uri.getLastPathSegment()); final SQLiteDatabase db=getDatabase(context); final Cursor mailboxCursor=db.query(Mailbox.TABLE_NAME new String[]{MailboxColumns.ACCOUNT_KEY} Mailbox._ID + ""="" + mailboxId null null null null); if (mailboxCursor == null || !mailboxCursor.moveToFirst()) { LogUtils.wtf(LogUtils.TAG ""Null or empty cursor when trying to purge mailbox %d"" mailboxId); return 0; } final long accountId=mailboxCursor.getLong(mailboxCursor.getColumnIndex(MailboxColumns.ACCOUNT_KEY)); final String[] messageProjection=new String[]{MessageColumns._ID}; final String messageWhere=MessageColumns.MAILBOX_KEY + ""="" + mailboxId; final Cursor messageCursor=db.query(Message.TABLE_NAME messageProjection messageWhere null null null null); int deletedCount=0; while (messageCursor != null && messageCursor.moveToNext()) { final long messageId=messageCursor.getLong(messageCursor.getColumnIndex(MessageColumns._ID)); AttachmentUtilities.deleteAllAttachmentFiles(context accountId messageId); deletedCount+=context.getContentResolver().delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI messageId) null null); notifyUIMessage(messageId); } notifyUIFolder(mailboxId accountId); return deletedCount; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiQuery,"private Cursor  (int match Uri uri String[] uiProjection final boolean unseenOnly){ Context context=getContext(); ContentResolver resolver=context.getContentResolver(); SQLiteDatabase db=getDatabase(context); Cursor c=null; String id=uri.getPathSegments().get(1); Uri notifyUri=null; switch (match) { case UI_ALL_FOLDERS: notifyUri=UIPROVIDER_FOLDERLIST_NOTIFIER.buildUpon().appendEncodedPath(id).build(); final Cursor vc=uiVirtualMailboxes(id uiProjection); if (id.equals(COMBINED_ACCOUNT_ID_STRING)) { c=vc; } else { final Cursor rawc=db.rawQuery(genQueryAccountAllMailboxes(uiProjection) new String[]{id}); rawc.setNotificationUri(context.getContentResolver() notifyUri); vc.setNotificationUri(context.getContentResolver() notifyUri); if (rawc.getCount() > 0) { c=new MergeCursor(new Cursor[]{rawc vc}); } else { c=rawc; } } break; case UI_FULL_FOLDERS: { final String[] folderProjection=folderProjectionFromUiProjection(uiProjection); c=db.rawQuery(genQueryAccountAllMailboxes(folderProjection) new String[]{id}); c=getFolderListCursor(c Long.valueOf(id) uiProjection); notifyUri=UIPROVIDER_FOLDERLIST_NOTIFIER.buildUpon().appendEncodedPath(id).build(); break; } case UI_RECENT_FOLDERS: c=db.rawQuery(genQueryRecentMailboxes(uiProjection) new String[]{id}); notifyUri=UIPROVIDER_RECENT_FOLDERS_NOTIFIER.buildUpon().appendPath(id).build(); break; case UI_SUBFOLDERS: { final String[] folderProjection=folderProjectionFromUiProjection(uiProjection); c=db.rawQuery(genQuerySubfolders(folderProjection) new String[]{id}); c=getFolderListCursor(c Mailbox.getAccountIdForMailbox(context id) uiProjection); final long accountId=Mailbox.getAccountIdForMailbox(context id); notifyUri=ContentUris.withAppendedId(UIPROVIDER_FOLDERLIST_NOTIFIER accountId); break; } case UI_MESSAGES: long mailboxId=Long.parseLong(id); final Folder folder=getFolder(context mailboxId); if (folder == null) { return new MatrixCursor(uiProjection); } if (isVirtualMailbox(mailboxId)) { c=getVirtualMailboxMessagesCursor(db uiProjection mailboxId unseenOnly); } else { c=db.rawQuery(genQueryMailboxMessages(uiProjection unseenOnly) new String[]{id}); } notifyUri=UIPROVIDER_CONVERSATION_NOTIFIER.buildUpon().appendPath(id).build(); c=new EmailConversationCursor(context c folder mailboxId); break; case UI_MESSAGE: MessageQuery qq=genQueryViewMessage(uiProjection id); String sql=qq.query; String attJson=qq.attachmentJson; if (attJson != null) { c=db.rawQuery(sql new String[]{attJson id}); } else { c=db.rawQuery(sql new String[]{id}); } if (c != null) { c=new EmailMessageCursor(getContext() c UIProvider.MessageColumns.BODY_HTML UIProvider.MessageColumns.BODY_TEXT); } notifyUri=UIPROVIDER_MESSAGE_NOTIFIER.buildUpon().appendPath(id).build(); break; case UI_ATTACHMENTS: final List<String> contentTypeQueryParameters=uri.getQueryParameters(PhotoContract.ContentTypeParameters.CONTENT_TYPE); c=db.rawQuery(genQueryAttachments(uiProjection contentTypeQueryParameters) new String[]{id}); c=new AttachmentsCursor(context c); notifyUri=UIPROVIDER_ATTACHMENTS_NOTIFIER.buildUpon().appendPath(id).build(); break; case UI_ATTACHMENT: c=db.rawQuery(genQueryAttachment(uiProjection) new String[]{id}); notifyUri=UIPROVIDER_ATTACHMENT_NOTIFIER.buildUpon().appendPath(id).build(); break; case UI_ATTACHMENT_BY_CID: final String cid=uri.getPathSegments().get(2); final String[] selectionArgs={id cid}; c=db.rawQuery(genQueryAttachmentByMessageIDAndCid(uiProjection) selectionArgs); notifyUri=UIPROVIDER_ATTACHMENTS_NOTIFIER.buildUpon().appendPath(id).build(); break; case UI_FOLDER: case UI_INBOX: if (match == UI_INBOX) { mailboxId=Mailbox.findMailboxOfType(context Long.parseLong(id) Mailbox.TYPE_INBOX); if (mailboxId == Mailbox.NO_MAILBOX) { LogUtils.d(LogUtils.TAG ""No inbox found for account %s"" id); return null; } LogUtils.d(LogUtils.TAG ""Found inbox id %d"" mailboxId); } else { mailboxId=Long.parseLong(id); } final String mailboxIdString=Long.toString(mailboxId); if (isVirtualMailbox(mailboxId)) { c=getVirtualMailboxCursor(mailboxId uiProjection); notifyUri=UIPROVIDER_FOLDER_NOTIFIER.buildUpon().appendPath(mailboxIdString).build(); } else { c=db.rawQuery(genQueryMailbox(uiProjection mailboxIdString) new String[]{mailboxIdString}); final List<String> projectionList=Arrays.asList(uiProjection); final int nameColumn=projectionList.indexOf(UIProvider.FolderColumns.NAME); final int typeColumn=projectionList.indexOf(UIProvider.FolderColumns.TYPE); if (c.moveToFirst()) { final Cursor closeThis=c; try { c=getUiFolderCursorRowFromMailboxCursorRow(new MatrixCursorWithCachedColumns(uiProjection) uiProjection.length c nameColumn typeColumn); } finally { closeThis.close(); } } notifyUri=UIPROVIDER_FOLDER_NOTIFIER.buildUpon().appendPath(mailboxIdString).build(); } break; case UI_ACCOUNT: if (id.equals(COMBINED_ACCOUNT_ID_STRING)) { MatrixCursor mc=new MatrixCursorWithCachedColumns(uiProjection 1); addCombinedAccountRow(mc); c=mc; } else { c=db.rawQuery(genQueryAccount(uiProjection id) new String[]{id}); } notifyUri=UIPROVIDER_ACCOUNT_NOTIFIER.buildUpon().appendPath(id).build(); break; case UI_CONVERSATION: c=db.rawQuery(genQueryConversation(uiProjection) new String[]{id}); break; } if (notifyUri != null) { c.setNotificationUri(resolver notifyUri); } return c; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiQuickResponse,"private Cursor  (String[] uiProjection){ final Context context=getContext(); final SQLiteDatabase db=getDatabase(context); final StringBuilder sb=genSelect(getQuickResponseMap() uiProjection); sb.append("" FROM "" + QuickResponse.TABLE_NAME); final String query=sb.toString(); return db.rawQuery(query new String[0]); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiQuickResponseAccount,"private Cursor  (String[] uiProjection String account){ final Context context=getContext(); final SQLiteDatabase db=getDatabase(context); final StringBuilder sb=genSelect(getQuickResponseMap() uiProjection); sb.append("" FROM "" + QuickResponse.TABLE_NAME); sb.append("" WHERE "" + QuickResponse.ACCOUNT_KEY + ""=?""); final String query=sb.toString(); return db.rawQuery(query new String[]{account}); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiQuickResponseId,"private Cursor  (String[] uiProjection String id){ final Context context=getContext(); final SQLiteDatabase db=getDatabase(context); final StringBuilder sb=genSelect(getQuickResponseMap() uiProjection); sb.append("" FROM "" + QuickResponse.TABLE_NAME); sb.append("" WHERE "" + QuickResponse._ID + ""=?""); final String query=sb.toString(); return db.rawQuery(query new String[]{id}); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiSaveDraftMessage,private Uri  (final long accountId final Bundle extras){ final Mailbox mailbox=getMailboxByAccountIdAndType(accountId Mailbox.TYPE_DRAFTS); if (mailbox == null) return null; Message msg=null; if (extras.containsKey(BaseColumns._ID)) { final long messageId=extras.getLong(BaseColumns._ID); msg=Message.restoreMessageWithId(getContext() messageId); } if (msg == null) { msg=new Message(); } return uiSaveMessage(msg mailbox extras); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiSaveMessage,"private Uri  (Message msg Mailbox mailbox Bundle extras){ final Context context=getContext(); final Account account=Account.restoreAccountWithId(context mailbox.mAccountKey); if (account == null) return null; final String customFromAddress=extras.getString(UIProvider.MessageColumns.CUSTOM_FROM_ADDRESS); if (!TextUtils.isEmpty(customFromAddress)) { msg.mFrom=customFromAddress; } else { msg.mFrom=account.getEmailAddress(); } msg.mTimeStamp=System.currentTimeMillis(); msg.mTo=extras.getString(UIProvider.MessageColumns.TO); msg.mCc=extras.getString(UIProvider.MessageColumns.CC); msg.mBcc=extras.getString(UIProvider.MessageColumns.BCC); msg.mSubject=extras.getString(UIProvider.MessageColumns.SUBJECT); msg.mText=extras.getString(UIProvider.MessageColumns.BODY_TEXT); msg.mHtml=extras.getString(UIProvider.MessageColumns.BODY_HTML); msg.mMailboxKey=mailbox.mId; msg.mAccountKey=mailbox.mAccountKey; msg.mDisplayName=msg.mTo; msg.mFlagLoaded=Message.FLAG_LOADED_COMPLETE; msg.mFlagRead=true; msg.mFlagSeen=true; msg.mQuotedTextStartPos=extras.getInt(UIProvider.MessageColumns.QUOTE_START_POS 0); int flags=0; final int draftType=extras.getInt(UIProvider.MessageColumns.DRAFT_TYPE); switch (draftType) { case DraftType.FORWARD: flags|=Message.FLAG_TYPE_FORWARD; break; case DraftType.REPLY_ALL: flags|=Message.FLAG_TYPE_REPLY_ALL; case DraftType.REPLY: flags|=Message.FLAG_TYPE_REPLY; break; case DraftType.COMPOSE: flags|=Message.FLAG_TYPE_ORIGINAL; break; } int draftInfo=0; if (extras.containsKey(UIProvider.MessageColumns.QUOTE_START_POS)) { draftInfo=extras.getInt(UIProvider.MessageColumns.QUOTE_START_POS); if (extras.getInt(UIProvider.MessageColumns.APPEND_REF_MESSAGE_CONTENT) != 0) { draftInfo|=Message.DRAFT_INFO_APPEND_REF_MESSAGE; } } if (!extras.containsKey(UIProvider.MessageColumns.APPEND_REF_MESSAGE_CONTENT)) { flags|=Message.FLAG_NOT_INCLUDE_QUOTED_TEXT; } msg.mDraftInfo=draftInfo; msg.mFlags=flags; final String ref=extras.getString(UIProvider.MessageColumns.REF_MESSAGE_ID); if (ref != null && msg.mQuotedTextStartPos >= 0) { String refId=Uri.parse(ref).getLastPathSegment(); try { msg.mSourceKey=Long.parseLong(refId); } catch (NumberFormatException e) { } } final List<com.android.mail.providers.Attachment> uiAtts=com.android.mail.providers.Attachment.fromJSONArray(extras.getString(UIProvider.MessageColumns.ATTACHMENTS)); final ArrayList<Attachment> atts=new ArrayList<Attachment>(); boolean hasUnloadedAttachments=false; Bundle attachmentFds=extras.getParcelable(UIProvider.SendOrSaveMethodParamKeys.OPENED_FD_MAP); for (com.android.mail.providers.Attachment uiAtt : uiAtts) { final Uri attUri=uiAtt.uri; if (attUri != null && attUri.getAuthority().equals(EmailContent.AUTHORITY)) { final long attId=Long.parseLong(attUri.getLastPathSegment()); final Attachment att=Attachment.restoreAttachmentWithId(context attId); if (att != null) { final Parcel p=Parcel.obtain(); att.writeToParcel(p 0); p.setDataPosition(0); final Attachment attClone=new Attachment(p); p.recycle(); attClone.mMessageKey=0; if (mailbox.mType == Mailbox.TYPE_OUTBOX && att.getContentUri() == null && ((account.mFlags & Account.FLAGS_SUPPORTS_SMART_FORWARD) == 0)) { attClone.mFlags|=Attachment.FLAG_DOWNLOAD_FORWARD; hasUnloadedAttachments=true; } atts.add(attClone); } } else { final String cachedFileUri=AttachmentUtils.cacheAttachmentUri(context uiAtt attachmentFds); atts.add(convertUiAttachmentToAttachment(uiAtt cachedFileUri msg.mAccountKey)); } } if (!atts.isEmpty()) { msg.mAttachments=atts; msg.mFlagAttachment=true; if (hasUnloadedAttachments) { Utility.showToast(context R.string.message_view_attachment_background_load); } } if (!msg.isSaved()) { msg.save(context); } else { final ArrayList<ContentProviderOperation> ops=new ArrayList<ContentProviderOperation>(); ops.add(ContentProviderOperation.newDelete(ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI msg.mId)).build()); ops.add(ContentProviderOperation.newDelete(Body.CONTENT_URI).withSelection(BodyColumns.MESSAGE_KEY + ""=?"" new String[]{Long.toString(msg.mId)}).build()); msg.addSaveOps(ops); try { applyBatch(ops); } catch (OperationApplicationException e) { LogUtils.d(TAG ""applyBatch exception""); } } notifyUIMessage(msg.mId); if (mailbox.mType == Mailbox.TYPE_OUTBOX) { startSync(mailbox 0); final long originalMsgId=msg.mSourceKey; if (originalMsgId != 0) { final Message originalMsg=Message.restoreMessageWithId(context originalMsgId); if (originalMsg != null) { final ContentValues cv=new ContentValues(); flags=originalMsg.mFlags; switch (draftType) { case DraftType.FORWARD: flags|=Message.FLAG_FORWARDED; break; case DraftType.REPLY_ALL: case DraftType.REPLY: flags|=Message.FLAG_REPLIED_TO; break; } cv.put(MessageColumns.FLAGS flags); context.getContentResolver().update(ContentUris.withAppendedId(Message.CONTENT_URI originalMsgId) cv null null); } } } return uiUri(""uimessage"" msg.mId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiSearch,"private Cursor  (Uri uri String[] projection){ LogUtils.d(TAG ""runSearchQuery in search %s"" uri); final long accountId=Long.parseLong(uri.getLastPathSegment()); Mailbox inbox=Mailbox.restoreMailboxOfType(getContext() accountId Mailbox.TYPE_INBOX); if (inbox == null) { LogUtils.w(Logging.LOG_TAG ""In uiSearch  inbox doesn't exist for account "" + accountId); return null; } String filter=uri.getQueryParameter(UIProvider.SearchQueryParameters.QUERY); if (filter == null) { throw new IllegalArgumentException(""No query parameter in search query""); } Mailbox searchMailbox=getSearchMailbox(accountId); final long searchMailboxId=searchMailbox.mId; mSearchParams=new SearchParams(inbox.mId filter searchMailboxId); final Context context=getContext(); if (mSearchParams.mOffset == 0) { LogUtils.d(TAG ""deleting existing search results.""); final ContentResolver resolver=context.getContentResolver(); final ContentValues cv=new ContentValues(3); cv.put(Mailbox.DISPLAY_NAME mSearchParams.mFilter); cv.put(Mailbox.UI_SYNC_STATUS EmailContent.SYNC_STATUS_LIVE); cv.put(Mailbox.TOTAL_COUNT 0); resolver.update(ContentUris.withAppendedId(Mailbox.CONTENT_URI searchMailboxId) cv null null); resolver.delete(Message.CONTENT_URI MessageColumns.MAILBOX_KEY + ""="" + searchMailboxId null); } runSearchQuery(context accountId searchMailboxId); return uiQuery(UI_FOLDER ContentUris.withAppendedId(Mailbox.CONTENT_URI searchMailbox.mId) projection false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiSendDraftMessage,private Uri  (final long accountId final Bundle extras){ final Message msg; if (extras.containsKey(BaseColumns._ID)) { final long messageId=extras.getLong(BaseColumns._ID); msg=Message.restoreMessageWithId(getContext() messageId); } else { msg=new Message(); } if (msg == null) return null; final Mailbox mailbox=getMailboxByAccountIdAndType(accountId Mailbox.TYPE_OUTBOX); if (mailbox == null) return null; final Mailbox sentMailbox=getMailboxByAccountIdAndType(accountId Mailbox.TYPE_SENT); if (sentMailbox == null) return null; final Uri messageUri=uiSaveMessage(msg mailbox extras); notifyUI(Mailbox.CONTENT_URI null); return messageUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiUndo,"private Cursor  (String[] projection){ if (!mLastSequenceOps.isEmpty()) { try { MatrixCursor c=new MatrixCursorWithCachedColumns(new String[]{UIProvider.ConversationColumns.URI} mLastSequenceOps.size()); for ( ContentProviderOperation op : mLastSequenceOps) { c.addRow(new String[]{op.getUri().toString()}); } applyBatch(mLastSequenceOps); mLastSequenceOps.clear(); return c; } catch ( OperationApplicationException e) { LogUtils.d(TAG ""applyBatch exception""); } } return new MatrixCursorWithCachedColumns(projection 0); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiUpdateAttachment,"private int  (Uri uri ContentValues uiValues){ int result=0; Integer stateValue=uiValues.getAsInteger(UIProvider.AttachmentColumns.STATE); if (stateValue != null) { long attachmentId=Long.parseLong(uri.getLastPathSegment()); Context context=getContext(); Attachment attachment=Attachment.restoreAttachmentWithId(context attachmentId); if (attachment == null) { return result; } int state=stateValue; ContentValues values=new ContentValues(); if (state == UIProvider.AttachmentState.NOT_SAVED || state == UIProvider.AttachmentState.REDOWNLOADING) { values.put(AttachmentColumns.UI_STATE UIProvider.AttachmentState.NOT_SAVED); values.put(AttachmentColumns.FLAGS attachment.mFlags&=~Attachment.FLAG_DOWNLOAD_USER_REQUEST); attachment.update(context values); result=1; } if (state == UIProvider.AttachmentState.DOWNLOADING || state == UIProvider.AttachmentState.REDOWNLOADING) { values.put(AttachmentColumns.UI_STATE UIProvider.AttachmentState.DOWNLOADING); Integer destinationValue=uiValues.getAsInteger(UIProvider.AttachmentColumns.DESTINATION); values.put(AttachmentColumns.UI_DESTINATION destinationValue == null ? 0 : destinationValue); values.put(AttachmentColumns.FLAGS attachment.mFlags | Attachment.FLAG_DOWNLOAD_USER_REQUEST); if (values.containsKey(AttachmentColumns.LOCATION) && TextUtils.isEmpty(values.getAsString(AttachmentColumns.LOCATION))) { LogUtils.w(TAG new Throwable() ""attachment with blank location""); } attachment.update(context values); result=1; } if (state == UIProvider.AttachmentState.SAVED) { if (!TextUtils.isEmpty(attachment.mContentId)) { notifyUI(UIPROVIDER_MESSAGE_NOTIFIER attachment.mMessageKey); } result=1; } } return result; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiUpdateFolder,private int  (final Context context Uri uri ContentValues uiValues){ if (uiValues.containsKey(UIProvider.ConversationColumns.SEEN)) { final int seenValue=uiValues.getAsInteger(UIProvider.ConversationColumns.SEEN); if (seenValue == 1) { final String mailboxId=uri.getLastPathSegment(); final int rows=markAllSeen(context mailboxId); if (uiValues.size() == 1) { return rows; } } } final Uri ourUri=convertToEmailProviderUri(uri Mailbox.CONTENT_URI true); if (ourUri == null) return 0; ContentValues ourValues=new ContentValues(); for ( String columnName : uiValues.keySet()) { if (columnName.equals(MailboxColumns.LAST_TOUCHED_TIME)) { ourValues.put(MailboxColumns.LAST_TOUCHED_TIME uiValues.getAsLong(columnName)); } } return update(ourUri ourValues null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiUpdateMessage,"private int  (Uri uri ContentValues values boolean forceSync){ Context context=getContext(); Message msg=getMessageFromLastSegment(uri); if (msg == null) return 0; Mailbox mailbox=Mailbox.restoreMailboxWithId(context msg.mMailboxKey); if (mailbox == null) return 0; Uri ourBaseUri=(forceSync || uploadsToServer(context mailbox)) ? Message.SYNCED_CONTENT_URI : Message.CONTENT_URI; Uri ourUri=convertToEmailProviderUri(uri ourBaseUri true); if (ourUri == null) return 0; if (values.containsKey(UIProvider.MessageOperations.RESPOND_COLUMN)) { final EmailServiceProxy service=EmailServiceUtils.getServiceForAccount(context mailbox.mAccountKey); try { service.sendMeetingResponse(msg.mId values.getAsInteger(UIProvider.MessageOperations.RESPOND_COLUMN)); uiDeleteMessage(uri); Utility.showToast(context R.string.confirm_response); notifyUIConversationMailbox(mailbox.mId); } catch ( RemoteException e) { LogUtils.d(TAG ""Remote exception while sending meeting response""); } return 1; } final String operation=values.getAsString(UIProvider.ConversationOperations.OPERATION_KEY); if (UIProvider.ConversationOperations.DISCARD_DRAFTS.equals(operation) || UIProvider.ConversationOperations.MOVE_FAILED_TO_DRAFTS.equals(operation)) { uiDeleteMessage(uri); return 1; } ContentValues undoValues=new ContentValues(); ContentValues ourValues=convertUiMessageValues(msg values); for ( String columnName : ourValues.keySet()) { if (columnName.equals(MessageColumns.MAILBOX_KEY)) { undoValues.put(MessageColumns.MAILBOX_KEY msg.mMailboxKey); } else if (columnName.equals(MessageColumns.FLAG_READ)) { undoValues.put(MessageColumns.FLAG_READ msg.mFlagRead); } else if (columnName.equals(MessageColumns.FLAG_SEEN)) { undoValues.put(MessageColumns.FLAG_SEEN msg.mFlagSeen); } else if (columnName.equals(MessageColumns.FLAG_FAVORITE)) { undoValues.put(MessageColumns.FLAG_FAVORITE msg.mFlagFavorite); } } if (undoValues.size() == 0) { return -1; } final Boolean suppressUndo=values.getAsBoolean(UIProvider.ConversationOperations.Parameters.SUPPRESS_UNDO); if (suppressUndo == null || !suppressUndo) { final ContentProviderOperation op=ContentProviderOperation.newUpdate(convertToEmailProviderUri(uri ourBaseUri false)).withValues(undoValues).build(); addToSequence(uri op); } return update(ourUri ourValues null null); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiUpdateRecentFolders,private int  (Uri uri ContentValues values){ final int numFolders=values.size(); final String id=uri.getPathSegments().get(1); final Uri[] folders=new Uri[numFolders]; final Context context=getContext(); int i=0; for ( final String uriString : values.keySet()) { folders[i]=Uri.parse(uriString); } return updateTimestamp(context id folders); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiUpdateSettings,private int  (final Context c final ContentValues uiValues){ final MailPrefs mailPrefs=MailPrefs.get(c); if (uiValues.containsKey(SettingsColumns.AUTO_ADVANCE)) { mailPrefs.setAutoAdvanceMode(uiValues.getAsInteger(SettingsColumns.AUTO_ADVANCE)); } if (uiValues.containsKey(SettingsColumns.CONVERSATION_VIEW_MODE)) { final int value=uiValues.getAsInteger(SettingsColumns.CONVERSATION_VIEW_MODE); final boolean overviewMode=value == UIProvider.ConversationViewMode.OVERVIEW; mailPrefs.setConversationOverviewMode(overviewMode); } c.getContentResolver().notifyChange(UIPROVIDER_ALL_ACCOUNTS_NOTIFIER null false); return 1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiUri,public static Uri  (String type long id){ return Uri.parse(uiUriString(type id)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiUriString,"public static String  (String type long id){ return ""content://"" + EmailContent.AUTHORITY + ""/""+ type+ ((id == -1) ? """" : (""/"" + id)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uiVirtualMailboxes,private Cursor  (final String id final String[] uiProjection){ final MatrixCursor mc=new MatrixCursorWithCachedColumns(uiProjection); if (id.equals(COMBINED_ACCOUNT_ID_STRING)) { mc.addRow(getVirtualMailboxRow(COMBINED_ACCOUNT_ID Mailbox.TYPE_INBOX uiProjection)); mc.addRow(getVirtualMailboxRow(COMBINED_ACCOUNT_ID Mailbox.TYPE_STARRED uiProjection)); mc.addRow(getVirtualMailboxRow(COMBINED_ACCOUNT_ID Mailbox.TYPE_UNREAD uiProjection)); } else { final long acctId=Long.parseLong(id); mc.addRow(getVirtualMailboxRow(acctId Mailbox.TYPE_STARRED uiProjection)); mc.addRow(getVirtualMailboxRow(acctId Mailbox.TYPE_UNREAD uiProjection)); } return mc; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,update,"@Override public int  (Uri uri ContentValues values String selection String[] selectionArgs){ LogUtils.d(TAG ""Update: "" + uri); if (INTEGRITY_CHECK_URI.equals(uri)) { checkDatabases(); return 0; } else if (ACCOUNT_BACKUP_URI.equals(uri)) { return backupAc"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,updateAccountSyncInterval,"private void  (final long accountId final ContentValues values){ final Integer syncInterval=values.getAsInteger(AccountColumns.SYNC_INTERVAL); if (syncInterval == null) { return; } final android.accounts.Account account=getAccountManagerAccount(accountId); if (account == null) { return; } LogUtils.d(TAG ""Setting sync interval for account %s to %d minutes"" accountId syncInterval); final List<PeriodicSync> syncs=ContentResolver.getPeriodicSyncs(account EmailContent.AUTHORITY); for ( final PeriodicSync sync : syncs) { ContentResolver.removePeriodicSync(account EmailContent.AUTHORITY sync.extras); } if (syncInterval > 0) { ContentResolver.addPeriodicSync(account EmailContent.AUTHORITY Bundle.EMPTY syncInterval * DateUtils.MINUTE_IN_MILLIS / DateUtils.SECOND_IN_MILLIS); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,updateSyncStatus,private void  (final Bundle extras){ final long id=extras.getLong(EmailServiceStatus.SYNC_STATUS_ID); final int statusCode=extras.getInt(EmailServiceStatus.SYNC_STATUS_CODE); final Uri uri=ContentUris.withAppendedId(FOLDER_STATUS_URI id); notifyUI(uri null); final boolean inProgress=statusCode == EmailServiceStatus.IN_PROGRESS; if (inProgress) { RefreshStatusMonitor.getInstance(getContext()).setSyncStarted(id); } else { final int result=extras.getInt(EmailServiceStatus.SYNC_RESULT); final ContentValues values=new ContentValues(); values.put(Mailbox.UI_LAST_SYNC_RESULT result); mDatabase.update(Mailbox.TABLE_NAME values WHERE_ID new String[]{String.valueOf(id)}); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,updateTimestamp,"private int  (final Context context String id Uri[] folders){ int updated=0; final long now=System.currentTimeMillis(); final ContentResolver resolver=context.getContentResolver(); final ContentValues touchValues=new ContentValues(1); for ( final Uri folder : folders) { touchValues.put(MailboxColumns.LAST_TOUCHED_TIME now); LogUtils.d(TAG ""updateStamp: %s updated"" folder); updated+=resolver.update(folder touchValues null null); } final Uri toNotify=UIPROVIDER_RECENT_FOLDERS_NOTIFIER.buildUpon().appendPath(id).build(); LogUtils.d(TAG ""updateTimestamp: Notifying on %s"" toNotify); notifyUI(toNotify null); return updated; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uploadsToServer,private static boolean  (Context context Mailbox m){ if (m.mType == Mailbox.TYPE_DRAFTS || m.mType == Mailbox.TYPE_OUTBOX || m.mType == Mailbox.TYPE_SEARCH) { return false; } String protocol=Account.getProtocol(context m.mAccountKey); EmailServiceInfo info=EmailServiceUtils.getServiceInfo(context protocol); return (info != null && info.syncChanges); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uriWithColumn,"private static String  (String type String columnName){ return ""'content://"" + EmailContent.AUTHORITY + ""/""+ type+ ""/' || ""+ columnName; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uriWithFQId,"private static String  (String type String tableName){ return ""'content://"" + EmailContent.AUTHORITY + ""/""+ type+ ""/' || ""+ tableName+ ""._id""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,uriWithId,private static String  (String type){ return uriWithColumn(type BaseColumns._ID); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,whereWith,"private static String  (String where String selection){ if (selection == null) { return where; } return where + "" AND ("" + selection+ "")""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,whereWithId,"private static String  (String id String selection){ StringBuilder sb=new StringBuilder(256); sb.append(""_id=""); sb.append(id); if (selection != null) { sb.append("" AND (""); sb.append(selection); sb.append(')'); } return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,writeBodyFile,"private static void  (final Context c final long messageId final String ext final String content) throws IOException { final File textFile=getBodyFile(c messageId ext); if (TextUtils.isEmpty(content)) { if (!textFile.delete()) { LogUtils.v(LogUtils.TAG ""did not delete text body for %d"" messageId); } } else { final FileWriter w=new FileWriter(textFile); try { w.write(content); } finally { w.close(); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\provider\EmailProvider.java,writeBodyFiles,"private static void  (final Context c final long messageId final ContentValues cv) throws IllegalStateException { if (cv.containsKey(BodyColumns.HTML_CONTENT)) { final String htmlContent=cv.getAsString(BodyColumns.HTML_CONTENT); try { writeBodyFile(c messageId ""html"" htmlContent); } catch ( final IOException e) { throw new IllegalStateException(""IOException while writing html body "" + ""for message id "" + Long.toString(messageId) e); } } if (cv.containsKey(BodyColumns.TEXT_CONTENT)) { final String textContent=cv.getAsString(BodyColumns.TEXT_CONTENT); try { writeBodyFile(c messageId ""txt"" textContent); } catch ( final IOException e) { throw new IllegalStateException(""IOException while writing text body "" + ""for message id "" + Long.toString(messageId) e); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,EasAuthenticator,public  (Context context){ super(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,addAccount,@Override public Bundle  (AccountAuthenticatorResponse response String accountType String authTokenType String[] requiredFeatures Bundle options) throws NetworkErrorException { if (options != null && options.containsKey(OPTIONS_PASSWORD) && options.contai
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,confirmCredentials,@Override public Bundle  (AccountAuthenticatorResponse response Account account Bundle options){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,editProperties,@Override public Bundle  (AccountAuthenticatorResponse response String accountType){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,getAuthToken,@Override public Bundle  (AccountAuthenticatorResponse response Account account String authTokenType Bundle loginOptions) throws NetworkErrorException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,getAuthTokenLabel,@Override public String  (String authTokenType){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,hasFeatures,@Override public Bundle  (AccountAuthenticatorResponse response Account account String[] features) throws NetworkErrorException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,onBind,@Override public IBinder  (Intent intent){ if (AccountManager.ACTION_AUTHENTICATOR_INTENT.equals(intent.getAction())) { return new EasAuthenticator(this).getIBinder(); } else { return null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EasTestAuthenticatorService.java,updateCredentials,@Override public Bundle  (AccountAuthenticatorResponse response Account account String authTokenType Bundle loginOptions){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,EmailBroadcastProcessorService,public  (){ super(EmailBroadcastProcessorService.class.getName()); setIntentRedelivery(true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,disableComponent,private void  (final Class<?> klass){ getPackageManager().setComponentEnabledSetting(new ComponentName(this klass) PackageManager.COMPONENT_ENABLED_STATE_DISABLED PackageManager.DONT_KILL_APP); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,fixPeriodicSyncs,private void  (final String amAccountType final Map<String Integer> syncIntervals){ final android.accounts.Account[] amAccounts=AccountManager.get(this).getAccountsByType(amAccountType); for ( android.accounts.Account amAccount : amAccounts) { removePeriodicSyncs(amAccount EmailContent.AUTHORITY); removePeriodicSyncs(amAccount CalendarContract.AUTHORITY); removePeriodicSyncs(amAccount ContactsContract.AUTHORITY); final Integer syncInterval=syncIntervals.get(amAccount.name); if (syncInterval != null && syncInterval > 0) { ContentResolver.addPeriodicSync(amAccount EmailContent.AUTHORITY Bundle.EMPTY syncInterval * DateUtils.MINUTE_IN_MILLIS / DateUtils.SECOND_IN_MILLIS); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,getSyncIntervals,private Map<String Integer>  (){ final Cursor c=getContentResolver().query(Account.CONTENT_URI ACCOUNT_SYNC_INTERVAL_PROJECTION null null null); if (c != null) { final Map<String Integer> periodicSyncs=Maps.newHashMapWithExpectedSize(c.getCount()); try { while (c.moveToNext()) { periodicSyncs.put(c.getString(ACCOUNT_SYNC_INTERVAL_ADDRESS_COLUMN) c.getInt(ACCOUNT_SYNC_INTERVAL_INTERVAL_COLUMN)); } } finally { c.close(); } return periodicSyncs; } return Collections.emptyMap(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,isComponentDisabled,private boolean  (final Class<?> klass){ return getPackageManager().getComponentEnabledSetting(new ComponentName(this klass)) == PackageManager.COMPONENT_ENABLED_STATE_DISABLED; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,onAppUpgrade,"private void  (){ if (isComponentDisabled(EmailUpgradeBroadcastReceiver.class)) { return; } final Map<String String> protocolMap=Maps.newHashMapWithExpectedSize(4); protocolMap.put(""imap"" getString(R.string.protocol_legacy_imap)); protocolMap.put(""pop3"" getString(R.string.protocol_pop3)); removeNoopUpgrades(protocolMap); if (!protocolMap.isEmpty()) { protocolMap.put(""imap_type"" getString(R.string.account_manager_type_legacy_imap)); protocolMap.put(""pop3_type"" getString(R.string.account_manager_type_pop3)); updateAccountManagerAccountsOfType(""com.android.email"" protocolMap); } protocolMap.clear(); protocolMap.put(""eas"" getString(R.string.protocol_eas)); removeNoopUpgrades(protocolMap); if (!protocolMap.isEmpty()) { protocolMap.put(""eas_type"" getString(R.string.account_manager_type_exchange)); updateAccountManagerAccountsOfType(""com.android.exchange"" protocolMap); } disableComponent(LegacyEmailAuthenticatorService.class); disableComponent(LegacyEasAuthenticatorService.class); final Map<String Integer> syncIntervals=getSyncIntervals(); for ( final EmailServiceUtils.EmailServiceInfo service : EmailServiceUtils.getServiceInfoList(this)) { fixPeriodicSyncs(service.accountType syncIntervals); } disableComponent(EmailUpgradeBroadcastReceiver.class); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,onBootCompleted,private void  (){ performOneTimeInitialization(); reconcileAndStartServices(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,onHandleIntent,@Override protected void  (Intent intent){ final String action=intent.getAction(); if (ACTION_BROADCAST.equals(action)) { final Intent broadcastIntent=intent.getParcelableExtra(Intent.EXTRA_INTENT); final String broadcastAction=broadcastIntent.getAction()
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,onSystemAccountChanged,"private void  (){ LogUtils.i(Logging.LOG_TAG ""System accounts updated.""); reconcileAndStartServices(); NotificationActionUtils.resendNotifications(getApplicationContext() null null); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,performOneTimeInitialization,"private void  (){ final Preferences pref=Preferences.getPreferences(this); int progress=pref.getOneTimeInitializationProgress(); final int initialProgress=progress; if (progress < 1) { LogUtils.i(Logging.LOG_TAG ""Onetime initialization: 1""); progress=1; EmailServiceUtils.enableExchangeComponent(this); } if (progress < 2) { LogUtils.i(Logging.LOG_TAG ""Onetime initialization: 2""); progress=2; setImapDeletePolicy(this); } if (progress != initialProgress) { pref.setOneTimeInitializationProgress(progress); LogUtils.i(Logging.LOG_TAG ""Onetime initialization: completed.""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,processBroadcastIntent,public static void  (Context context Intent broadcastIntent){ Intent i=new Intent(context EmailBroadcastProcessorService.class); i.setAction(ACTION_BROADCAST); i.putExtra(Intent.EXTRA_INTENT broadcastIntent); context.startService(i); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,processDevicePolicyMessage,public static void  (Context context int message){ Intent i=new Intent(context EmailBroadcastProcessorService.class); i.setAction(ACTION_DEVICE_POLICY_ADMIN); i.putExtra(EXTRA_DEVICE_POLICY_ADMIN message); context.startService(i); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,processUpgradeBroadcastIntent,public static void  (final Context context){ final Intent i=new Intent(context EmailBroadcastProcessorService.class); i.setAction(ACTION_UPGRADE_BROADCAST); context.startService(i); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,reconcileAndStartServices,private void  (){ onAppUpgrade(); AccountReconciler.reconcileAccounts(this); EmailServiceUtils.startRemoteServices(this); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,removeNoopUpgrades,@VisibleForTesting protected static void  (final Map<String String> protocolMap){ final Set<String> keySet=new HashSet<String>(protocolMap.keySet()); for ( final String key : keySet) { if (TextUtils.equals(key protocolMap.get(key))) { protocolMap.remove(k
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,removePeriodicSyncs,private static void  (final android.accounts.Account amAccount final String authority){ final List<PeriodicSync> syncs=ContentResolver.getPeriodicSyncs(amAccount authority); for ( final PeriodicSync sync : syncs) { ContentResolver.removePeriodicSync(amAccount authority sync.extras); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,setImapDeletePolicy,static void  (Context context){ ContentResolver resolver=context.getContentResolver(); Cursor c=resolver.query(Account.CONTENT_URI Account.CONTENT_PROJECTION null null null); try { while (c.moveToNext()) { long recvAuthKey=c.getLong(Account.CONTENT_HOST_AUTH_KEY_RECV_COLUMN); HostAuth recvAuth=HostAuth.restoreHostAuthWithId(context recvAuthKey); String legacyImapProtocol=context.getString(R.string.protocol_legacy_imap); if (legacyImapProtocol.equals(recvAuth.mProtocol)) { int flags=c.getInt(Account.CONTENT_FLAGS_COLUMN); flags&=~Account.FLAGS_DELETE_POLICY_MASK; flags|=Account.DELETE_POLICY_ON_DELETE << Account.FLAGS_DELETE_POLICY_SHIFT; ContentValues cv=new ContentValues(); cv.put(AccountColumns.FLAGS flags); long accountId=c.getLong(Account.CONTENT_ID_COLUMN); Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI accountId); resolver.update(uri cv null null); } } } finally { c.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastProcessorService.java,updateAccountManagerAccountsOfType,private void  (final String amAccountType final Map<String String> protocolMap){ final android.accounts.Account[] amAccounts=AccountManager.get(this).getAccountsByType(amAccountType); for ( android.accounts.Account amAccount : amAccounts) { EmailServiceUtils.updateAccountManagerType(this amAccount protocolMap); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailUpgradeBroadcastReceiver.java,onReceive,@Override public void  (final Context context final Intent intent){ EmailBroadcastProcessorService.processUpgradeBroadcastIntent(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailBroadcastReceiver.java,onReceive,@Override public void  (Context context Intent intent){ EmailBroadcastProcessorService.processBroadcastIntent(context intent); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,MessageRetrievalListenerBridge,public  (final long messageId final long attachmentId final IEmailServiceCallback callback){ mMessageId=messageId; mAttachmentId=attachmentId; mCallback=callback; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,autoDiscover,@Override public Bundle  (final String userName final String password) throws RemoteException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,getApiVersion,public int  (){ return EmailServiceVersion.CURRENT; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,init,protected void  (Context context){ mContext=context; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,loadAttachment,@Override public void  (final IEmailServiceCallback cb final long accountId final long attachmentId final boolean background) throws RemoteException { Folder remoteFolder=null; try { Attachment attachment=Attachment.restoreAttachmentWithId(mContext attach
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,loadAttachmentProgress,@Override public void  (int progress){ try { mCallback.loadAttachmentStatus(mMessageId mAttachmentId EmailServiceStatus.IN_PROGRESS progress); } catch ( final RemoteException e) { } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,pushModify,"@Override public void  (final long accountId) throws RemoteException { LogUtils.e(Logging.LOG_TAG ""pushModify invalid for account type for %d"" accountId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,requestSync,"protected void  (long mailboxId boolean userRequest int deltaMessageCount){ final Mailbox mailbox=Mailbox.restoreMailboxWithId(mContext mailboxId); if (mailbox == null) return; final Account account=Account.restoreAccountWithId(mContext mailbox.mAccountKey); if (account == null) return; final EmailServiceInfo info=EmailServiceUtils.getServiceInfoForAccount(mContext account.mId); final android.accounts.Account acct=new android.accounts.Account(account.mEmailAddress info.accountType); final Bundle extras=Mailbox.createSyncBundle(mailboxId); if (userRequest) { extras.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL true); extras.putBoolean(ContentResolver.SYNC_EXTRAS_DO_NOT_RETRY true); extras.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED true); } if (deltaMessageCount != 0) { extras.putInt(Mailbox.SYNC_EXTRA_DELTA_MESSAGE_COUNT deltaMessageCount); } ContentResolver.requestSync(acct EmailContent.AUTHORITY extras); LogUtils.i(Logging.LOG_TAG ""requestSync EmailServiceStub startSync %s  %s"" account.toString() extras.toString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,searchMessages,@Override public int  (final long accountId final SearchParams params final long destMailboxId) throws RemoteException { return EmailServiceStatus.SUCCESS; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,sendMail,@Override public void  (final long accountId) throws RemoteException { sendMailImpl(mContext accountId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,sendMailImpl,"public static void  (final Context context final long accountId){ final Account account=Account.restoreAccountWithId(context accountId); if (account == null) { LogUtils.e(LogUtils.TAG ""account %d not found in sendMailImpl"" accountId); return; } TrafficStats.setThreadStatsTag(TrafficFlags.getSmtpFlags(context account)); final NotificationController nc=NotificationControllerCreatorHolder.getInstance(context); final long outboxId=Mailbox.findMailboxOfType(context account.mId Mailbox.TYPE_OUTBOX); if (outboxId == Mailbox.NO_MAILBOX) { return; } final ContentResolver resolver=context.getContentResolver(); final Cursor c=resolver.query(EmailContent.Message.CONTENT_URI EmailContent.Message.ID_COLUMN_PROJECTION MessageColumns.MAILBOX_KEY + ""=?"" new String[]{Long.toString(outboxId)} null); try { if (c.getCount() <= 0) { return; } final Sender sender=Sender.getInstance(context account); final Store remoteStore=Store.getInstance(account context); final ContentValues moveToSentValues; if (remoteStore.requireCopyMessageToSentFolder()) { Mailbox sentFolder=Mailbox.restoreMailboxOfType(context accountId Mailbox.TYPE_SENT); moveToSentValues=new ContentValues(); moveToSentValues.put(MessageColumns.MAILBOX_KEY sentFolder.mId); } else { moveToSentValues=null; } while (c.moveToNext()) { final long messageId; if (moveToSentValues != null) { moveToSentValues.remove(EmailContent.MessageColumns.FLAGS); } try { messageId=c.getLong(0); if (Utility.hasUnloadedAttachments(context messageId)) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""Can't send #"" + messageId + ""; unloaded attachments""); } continue; } sender.sendMessage(messageId); } catch ( MessagingException me) { if (me instanceof AuthenticationFailedException && nc != null) { nc.showLoginFailedNotificationSynchronous(account.mId false); } continue; } final Uri syncedUri=ContentUris.withAppendedId(EmailContent.Message.SYNCED_CONTENT_URI messageId); AttachmentUtilities.deleteAllCachedAttachmentFiles(context account.mId messageId); if (moveToSentValues != null) { final EmailContent.Message msg=EmailContent.Message.restoreMessageWithId(context messageId); if ((msg.mFlags & EmailContent.Message.FLAG_TYPE_FORWARD) != 0) { AttachmentUtilities.deleteAllAttachmentFiles(context account.mId messageId); } final int flags=msg.mFlags & ~(EmailContent.Message.FLAG_TYPE_REPLY | EmailContent.Message.FLAG_TYPE_FORWARD | EmailContent.Message.FLAG_TYPE_REPLY_ALL| EmailContent.Message.FLAG_TYPE_ORIGINAL); moveToSentValues.put(EmailContent.MessageColumns.FLAGS flags); resolver.update(syncedUri moveToSentValues null null); } else { AttachmentUtilities.deleteAllAttachmentFiles(context account.mId messageId); final Uri uri=ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI messageId); resolver.delete(uri null null); resolver.delete(syncedUri null null); } } if (nc != null) { nc.cancelLoginFailedNotification(account.mId); } } catch ( MessagingException me) { if (me instanceof AuthenticationFailedException && nc != null) { nc.showLoginFailedNotificationSynchronous(account.mId false); } } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,sync,@Override public int  (final long accountId final Bundle syncExtras){ return EmailServiceStatus.SUCCESS; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,updateFolderList,"@Override public void  (final long accountId) throws RemoteException { final Account account=Account.restoreAccountWithId(mContext accountId); if (account == null) { LogUtils.e(LogUtils.TAG ""Account %d not found in updateFolderList"" accountId); return; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceStub.java,validate,@Override public Bundle  (HostAuthCompat hostAuthCom) throws RemoteException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,areRemoteServicesInstalled,public static boolean  (Context context){ for ( EmailServiceInfo info : getServiceInfoList(context)) { if (info.intentAction != null) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,asBinder,@Override public IBinder  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,asCalendarSyncAdapter,"private static Uri  (Uri uri String account String accountType){ return uri.buildUpon().appendQueryParameter(CalendarContract.CALLER_IS_SYNCADAPTER ""true"").appendQueryParameter(Calendars.ACCOUNT_NAME account).appendQueryParameter(Calendars.ACCOUNT_TYPE accountType).build(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,autoDiscover,@Override public Bundle  (String userName String password) throws RemoteException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,disableExchangeComponents,"public static void  (final Context context){ LogUtils.d(LogUtils.TAG ""Disabling EAS authenticators""); setComponentStatus(context EasAuthenticatorServiceAlternate.class false); setComponentStatus(context EasAuthenticatorService.class false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,enableExchangeComponent,"public static void  (final Context context){ if (VendorPolicyLoader.getInstance(context).useAlternateExchangeStrings()) { LogUtils.d(LogUtils.TAG ""Enabling alternate EAS authenticator""); setComponentStatus(context EasAuthenticatorServiceAlternate.class true); setComponentStatus(context EasAuthenticatorService.class false); } else { LogUtils.d(LogUtils.TAG ""Enabling EAS authenticator""); setComponentStatus(context EasAuthenticatorService.class true); setComponentStatus(context EasAuthenticatorServiceAlternate.class false); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,finishAccountManagerBlocker,"private static void  (AccountManagerFuture<?> future){ try { future.getResult(); } catch ( OperationCanceledException e) { LogUtils.w(LogUtils.TAG e ""finishAccountManagerBlocker""); } catch ( AuthenticatorException e) { LogUtils.w(LogUtils.TAG e ""finishAccountManagerBlocker""); } catch ( IOException e) { LogUtils.w(LogUtils.TAG e ""finishAccountManagerBlocker""); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getApiVersion,public int  (){ return EmailServiceVersion.CURRENT; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getProtocolFromAccountType,public static @Nullable String  (final Context context final String accountType){ if (TextUtils.isEmpty(accountType)) { return null; } final Map<String EmailServiceInfo> serviceInfoMap=getServiceMap(context); String protocol=null; for ( final EmailServiceInfo info : serviceInfoMap.values()) { if (TextUtils.equals(accountType info.accountType)) { if (!TextUtils.isEmpty(protocol) && !TextUtils.equals(protocol info.protocol)) { return null; } protocol=info.protocol; } } return protocol; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getService,"public static EmailServiceProxy  (Context context String protocol){ EmailServiceInfo info=null; if (protocol != null) { info=getServiceInfo(context protocol); } if (info == null) { LogUtils.w(LogUtils.TAG ""Returning NullService for %s"" protocol); return new EmailServiceProxy(context NullService.class); } else { return getServiceFromInfo(context info); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getServiceForAccount,public static EmailServiceProxy  (Context context long accountId){ return getService(context Account.getProtocol(context accountId)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getServiceFromInfo,public static EmailServiceProxy  (Context context EmailServiceInfo info){ if (info.klass != null) { return new EmailServiceProxy(context info.klass); } else { final Intent serviceIntent=getServiceIntent(info); return new EmailServiceProxy(context serviceIntent); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getServiceInfo,public static EmailServiceInfo  (Context context String protocol){ return getServiceMap(context).get(protocol); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getServiceInfoForAccount,public static EmailServiceInfo  (Context context long accountId){ String protocol=Account.getProtocol(context accountId); return getServiceInfo(context protocol); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getServiceInfoList,public static Collection<EmailServiceInfo>  (Context context){ return getServiceMap(context).values(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getServiceIntent,private static Intent  (EmailServiceInfo info){ final Intent serviceIntent=new Intent(info.intentAction); serviceIntent.setPackage(info.intentPackage); return serviceIntent; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,getServiceMap,"private static Map<String EmailServiceInfo>  (final Context context){ synchronized (sServiceMapLock) { if (sServiceMap == null) { sOldConfiguration.setTo(context.getResources().getConfiguration()); } final int delta=sOldConfiguration.updateFrom(context.getResources().getConfiguration()); if (sServiceMap != null && !Configuration.needNewResources(delta ActivityInfo.CONFIG_LOCALE)) { return sServiceMap; } final ImmutableMap.Builder<String EmailServiceInfo> builder=ImmutableMap.builder(); if (!context.getResources().getBoolean(R.bool.enable_services)) { sServiceMap=builder.build(); return sServiceMap; } try { final Resources res=context.getResources(); final XmlResourceParser xml=res.getXml(R.xml.services); int xmlEventType; while ((xmlEventType=xml.next()) != XmlResourceParser.END_DOCUMENT) { if (xmlEventType == XmlResourceParser.START_TAG && ""emailservice"".equals(xml.getName())) { final EmailServiceInfo info=new EmailServiceInfo(); final TypedArray ta=res.obtainAttributes(xml R.styleable.EmailServiceInfo); info.protocol=ta.getString(R.styleable.EmailServiceInfo_protocol); info.accountType=ta.getString(R.styleable.EmailServiceInfo_accountType); info.name=ta.getString(R.styleable.EmailServiceInfo_name); info.hide=ta.getBoolean(R.styleable.EmailServiceInfo_hide false); final String klass=ta.getString(R.styleable.EmailServiceInfo_serviceClass); info.intentAction=ta.getString(R.styleable.EmailServiceInfo_intent); info.intentPackage=ta.getString(R.styleable.EmailServiceInfo_intentPackage); info.defaultSsl=ta.getBoolean(R.styleable.EmailServiceInfo_defaultSsl false); info.port=ta.getInteger(R.styleable.EmailServiceInfo_port 0); info.portSsl=ta.getInteger(R.styleable.EmailServiceInfo_portSsl 0); info.offerTls=ta.getBoolean(R.styleable.EmailServiceInfo_offerTls false); info.offerCerts=ta.getBoolean(R.styleable.EmailServiceInfo_offerCerts false); info.offerOAuth=ta.getBoolean(R.styleable.EmailServiceInfo_offerOAuth false); info.offerLocalDeletes=ta.getBoolean(R.styleable.EmailServiceInfo_offerLocalDeletes false); info.defaultLocalDeletes=ta.getInteger(R.styleable.EmailServiceInfo_defaultLocalDeletes Account.DELETE_POLICY_ON_DELETE); info.offerPrefix=ta.getBoolean(R.styleable.EmailServiceInfo_offerPrefix false); info.usesSmtp=ta.getBoolean(R.styleable.EmailServiceInfo_usesSmtp false); info.usesAutodiscover=ta.getBoolean(R.styleable.EmailServiceInfo_usesAutodiscover false); info.offerLookback=ta.getBoolean(R.styleable.EmailServiceInfo_offerLookback false); info.defaultLookback=ta.getInteger(R.styleable.EmailServiceInfo_defaultLookback SyncWindow.SYNC_WINDOW_3_DAYS); info.syncChanges=ta.getBoolean(R.styleable.EmailServiceInfo_syncChanges false); info.syncContacts=ta.getBoolean(R.styleable.EmailServiceInfo_syncContacts false); info.syncCalendar=ta.getBoolean(R.styleable.EmailServiceInfo_syncCalendar false); info.offerAttachmentPreload=ta.getBoolean(R.styleable.EmailServiceInfo_offerAttachmentPreload false); info.syncIntervalStrings=ta.getTextArray(R.styleable.EmailServiceInfo_syncIntervalStrings); info.syncIntervals=ta.getTextArray(R.styleable.EmailServiceInfo_syncIntervals); info.defaultSyncInterval=ta.getInteger(R.styleable.EmailServiceInfo_defaultSyncInterval 15); info.inferPrefix=ta.getString(R.styleable.EmailServiceInfo_inferPrefix); info.offerLoadMore=ta.getBoolean(R.styleable.EmailServiceInfo_offerLoadMore false); info.offerMoveTo=ta.getBoolean(R.styleable.EmailServiceInfo_offerMoveTo false); info.requiresSetup=ta.getBoolean(R.styleable.EmailServiceInfo_requiresSetup false); info.isGmailStub=ta.getBoolean(R.styleable.EmailServiceInfo_isGmailStub false); if (klass != null) { try { info.klass=(Class<? extends Service>)Class.forName(klass); } catch ( ClassNotFoundException e) { throw new IllegalStateException(""Class not found in service descriptor: "" + klass); } } if (info.klass == null && info.intentAction == null && !info.isGmailStub) { throw new IllegalStateException(""No class or intent action specified in service descriptor""); } if (info.klass != null && info.intentAction != null) { throw new IllegalStateException(""Both class and intent action specified in service descriptor""); } builder.put(info.protocol info); } } } catch ( XmlPullParserException e) { } catch ( IOException e) { } sServiceMap=builder.build(); return sServiceMap; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,isServiceAvailable,public static boolean  (Context context String protocol){ EmailServiceInfo info=getServiceInfo(context protocol); if (info == null) return false; if (info.klass != null) return true; final Intent serviceIntent=getServiceIntent(info); return new EmailServiceProxy(context serviceIntent).test(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,killService,public static void  (Context context String protocol){ EmailServiceInfo info=getServiceInfo(context protocol); if (info != null && info.intentAction != null) { final Intent serviceIntent=getServiceIntent(info); serviceIntent.putExtra(ServiceProxy.EXTRA_FORCE_SHUTDOWN true); context.startService(serviceIntent); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,moveCalendarData,"private static void  (final ContentResolver resolver final String name final String oldType final String newType){ final Uri oldCalendars=Calendars.CONTENT_URI.buildUpon().appendQueryParameter(CalendarContract.CALLER_IS_SYNCADAPTER ""true"").appendQueryParameter(Calendars.ACCOUNT_NAME name).appendQueryParameter(Calendars.ACCOUNT_TYPE oldType).build(); final ContentValues values=new ContentValues(); values.put(CalendarContract.Calendars.ACCOUNT_TYPE newType); resolver.update(oldCalendars values Calendars.ACCOUNT_NAME + ""=? AND "" + Calendars.ACCOUNT_TYPE+ ""=?"" new String[]{name oldType}); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,moveContactsData,"private static void  (final ContentResolver resolver final String name final String oldType final String newType){ final Uri oldContacts=RawContacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.CALLER_IS_SYNCADAPTER ""true"").appendQueryParameter(RawContacts.ACCOUNT_NAME name).appendQueryParameter(RawContacts.ACCOUNT_TYPE oldType).build(); final ContentValues values=new ContentValues(); values.put(CalendarContract.Calendars.ACCOUNT_TYPE newType); resolver.update(oldContacts values null null); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,searchMessages,@Override public int  (long accountId SearchParams params long destMailboxId) throws RemoteException { return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,setComponentStatus,public static void  (final Context context Class<?> clazz boolean enabled){ final ComponentName c=new ComponentName(context clazz.getName()); context.getPackageManager().setComponentEnabledSetting(c enabled ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED PackageManager.DONT_KILL_APP); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,setRemoteServicesLogging,public static void  (Context context int debugBits){ for ( EmailServiceInfo info : getServiceInfoList(context)) { if (info.intentAction != null) { EmailServiceProxy service=EmailServiceUtils.getService(context info.protocol); if (service != null) { try { service.setLogging(debugBits); } catch ( RemoteException e) { } } } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,setupAccountManagerAccount,public static AccountManagerFuture<Bundle>  (final Context context final Account account final boolean email final boolean calendar final boolean contacts final HostAuth hostAuth final AccountManagerCallback<Bundle> callback){ if (hostAuth == null) { return null; } final Bundle options=new Bundle(5); options.putString(EasAuthenticatorService.OPTIONS_USERNAME account.mEmailAddress); options.putString(EasAuthenticatorService.OPTIONS_PASSWORD hostAuth.mPassword); options.putBoolean(EasAuthenticatorService.OPTIONS_CONTACTS_SYNC_ENABLED contacts); options.putBoolean(EasAuthenticatorService.OPTIONS_CALENDAR_SYNC_ENABLED calendar); options.putBoolean(EasAuthenticatorService.OPTIONS_EMAIL_SYNC_ENABLED email); final EmailServiceInfo info=getServiceInfo(context hostAuth.mProtocol); return AccountManager.get(context).addAccount(info.accountType null null options null callback null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,startRemoteServices,public static void  (Context context){ for ( EmailServiceInfo info : getServiceInfoList(context)) { if (info.intentAction != null) { final Intent serviceIntent=getServiceIntent(info); context.startService(serviceIntent); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,startService,public static void  (Context context String protocol){ EmailServiceInfo info=getServiceInfo(context protocol); if (info != null && info.intentAction != null) { final Intent serviceIntent=getServiceIntent(info); context.startService(serviceIntent); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,sync,@Override public int  (final long accountId final Bundle syncExtras){ return EmailServiceStatus.SUCCESS; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,toString,"@Override public String  (){ StringBuilder sb=new StringBuilder(""Protocol: ""); sb.append(protocol); sb.append(""  ""); sb.append(klass != null ? ""Local"" : ""Remote""); sb.append(""   Account Type: ""); sb.append(accountType); return sb.toString(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,updateAccountManagerType,"public static void  (Context context android.accounts.Account amAccount final Map<String String> protocolMap){ final ContentResolver resolver=context.getContentResolver(); final Cursor c=resolver.query(Account.CONTENT_URI Account.CONTENT_PROJECTION AccountColumns.EMAIL_ADDRESS + ""=?"" new String[]{amAccount.name} null); if (c == null) return; try { if (c.moveToNext()) { final Account account=new Account(); account.restore(c); final HostAuth hostAuth=HostAuth.restoreHostAuthWithId(context account.mHostAuthKeyRecv); if (hostAuth == null) { return; } final String newProtocol=protocolMap.get(hostAuth.mProtocol); if (newProtocol == null) { return; } LogUtils.w(LogUtils.TAG ""Converting %s to %s"" amAccount.name newProtocol); final ContentValues accountValues=new ContentValues(); int oldFlags=account.mFlags; account.mFlags|=Account.FLAGS_INCOMPLETE; accountValues.put(AccountColumns.FLAGS account.mFlags); final Uri accountUri=ContentUris.withAppendedId(Account.CONTENT_URI account.mId); resolver.update(accountUri accountValues null null); final ContentValues hostValues=new ContentValues(); hostValues.put(HostAuthColumns.PROTOCOL newProtocol); resolver.update(ContentUris.withAppendedId(HostAuth.CONTENT_URI hostAuth.mId) hostValues null null); LogUtils.w(LogUtils.TAG ""Updated HostAuths""); try { boolean email=ContentResolver.getSyncAutomatically(amAccount EmailContent.AUTHORITY); if (!email) { email=ContentResolver.getSyncAutomatically(amAccount ""com.android.email.provider""); } final boolean contacts=ContentResolver.getSyncAutomatically(amAccount ContactsContract.AUTHORITY); final boolean calendar=ContentResolver.getSyncAutomatically(amAccount CalendarContract.AUTHORITY); LogUtils.w(LogUtils.TAG ""Email: %s  Contacts: %s Calendar: %s"" email contacts calendar); final String amName=amAccount.name; final String oldType=amAccount.type; ContentProviderClient client=context.getContentResolver().acquireContentProviderClient(CalendarContract.CONTENT_URI); byte[] calendarSyncKey=null; try { calendarSyncKey=SyncStateContract.Helpers.get(client asCalendarSyncAdapter(SyncState.CONTENT_URI amName oldType) new android.accounts.Account(amName oldType)); } catch ( RemoteException e) { LogUtils.w(LogUtils.TAG ""Get calendar key FAILED""); } finally { client.release(); } client=context.getContentResolver().acquireContentProviderClient(ContactsContract.AUTHORITY_URI); byte[] contactsSyncKey=null; try { contactsSyncKey=SyncStateContract.Helpers.get(client ContactsContract.SyncState.CONTENT_URI new android.accounts.Account(amName oldType)); } catch ( RemoteException e) { LogUtils.w(LogUtils.TAG ""Get contacts key FAILED""); } finally { client.release(); } if (calendarSyncKey != null) { LogUtils.w(LogUtils.TAG ""Got calendar key: %s"" new String(calendarSyncKey)); } if (contactsSyncKey != null) { LogUtils.w(LogUtils.TAG ""Got contacts key: %s"" new String(contactsSyncKey)); } AccountManagerFuture<?> amFuture=setupAccountManagerAccount(context account email calendar contacts null); finishAccountManagerBlocker(amFuture); LogUtils.w(LogUtils.TAG ""Created new AccountManager account""); final String accountType=protocolMap.get(hostAuth.mProtocol + ""_type""); moveCalendarData(context.getContentResolver() amName oldType accountType); moveContactsData(context.getContentResolver() amName oldType accountType); amFuture=AccountManager.get(context).removeAccount(amAccount null null); finishAccountManagerBlocker(amFuture); LogUtils.w(LogUtils.TAG ""Deleted old AccountManager account""); if (accountType != null && calendarSyncKey != null && calendarSyncKey.length != 0) { client=context.getContentResolver().acquireContentProviderClient(CalendarContract.CONTENT_URI); try { SyncStateContract.Helpers.set(client asCalendarSyncAdapter(SyncState.CONTENT_URI amName accountType) new android.accounts.Account(amName accountType) calendarSyncKey); LogUtils.w(LogUtils.TAG ""Set calendar key...""); } catch ( RemoteException e) { LogUtils.w(LogUtils.TAG ""Set calendar key FAILED""); } finally { client.release(); } } if (accountType != null && contactsSyncKey != null && contactsSyncKey.length != 0) { client=context.getContentResolver().acquireContentProviderClient(ContactsContract.AUTHORITY_URI); try { SyncStateContract.Helpers.set(client ContactsContract.SyncState.CONTENT_URI new android.accounts.Account(amName accountType) contactsSyncKey); LogUtils.w(LogUtils.TAG ""Set contacts key...""); } catch ( RemoteException e) { LogUtils.w(LogUtils.TAG ""Set contacts key FAILED""); } } LogUtils.w(LogUtils.TAG ""Account update completed.""); } finally { accountValues.put(AccountColumns.FLAGS oldFlags); resolver.update(accountUri accountValues null null); LogUtils.w(LogUtils.TAG ""[Incomplete flag cleared]""); } } } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\EmailServiceUtils.java,validate,@Override public Bundle  (HostAuthCompat hostauth) throws RemoteException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,ImapTempFileLiteral," (FixedLengthInputStream stream) throws IOException { mSize=stream.getLength(); mFile=File.createTempFile(""imap"" "".tmp"" TempDirectory.getTempDirectory()); OutputStream out=new FileOutputStream(mFile); IOUtils.copy(stream out); out.close(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,destroy,"@Override public void  (){ try { if (!isDestroyed() && mFile.exists()) { mFile.delete(); } } catch ( RuntimeException re) { LogUtils.w(Logging.LOG_TAG ""Failed to remove temp file: "" + re.getMessage()); } super.destroy(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,finalize,@Override protected void  () throws Throwable { try { destroy(); } finally { super.finalize(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,getAsStream,"@Override public InputStream  (){ checkNotDestroyed(); try { return new FileInputStream(mFile); } catch ( FileNotFoundException e) { LogUtils.w(Logging.LOG_TAG ""ImapTempFileLiteral: Temp file not found""); return new ByteArrayInputStream(new byte[0]); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,getString,@Override public String  (){ checkNotDestroyed(); try { byte[] bytes=IOUtils.toByteArray(getAsStream()); if (bytes.length > ImapResponseParser.LITERAL_KEEP_IN_MEMORY_THRESHOLD) { throw new IOException(); } return Utility.fromAscii(bytes); } catch ( IOExce
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,tempFileExistsForTest,public boolean  (){ return mFile.exists(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapTempFileLiteral.java,toString,"@Override public String  (){ return String.format(""{%d byte literal(file)}"" mSize); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,LocalMessageInfo,public  (Cursor c){ mId=c.getLong(COLUMN_ID); mFlagRead=c.getInt(COLUMN_FLAG_READ) != 0; mFlagFavorite=c.getInt(COLUMN_FLAG_FAVORITE) != 0; mFlagLoaded=c.getInt(COLUMN_FLAG_LOADED); mServerId=c.getString(COLUMN_SERVER_ID); mFlags=c.getInt(COLUMN_FLAGS); mTimestamp=c.getLong(COLUMN_TIMESTAMP); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,SortableMessage, (Message message long uid){ mMessage=message; mUid=uid; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,compare,@Override public int  (SortableMessage lhs SortableMessage rhs){ return lhs.mUid > rhs.mUid ? -1 : lhs.mUid < rhs.mUid ? 1 : 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,downloadFlagAndEnvelope,"public static void  (final Context context final Account account final Mailbox mailbox Folder remoteFolder ArrayList<Message> unsyncedMessages HashMap<String LocalMessageInfo> localMessageMap final ArrayList<Long> unseenMessages) throws MessagingException { FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); fp.add(FetchProfile.Item.ENVELOPE); final HashMap<String LocalMessageInfo> localMapCopy; if (localMessageMap != null) localMapCopy=new HashMap<String LocalMessageInfo>(localMessageMap); else { localMapCopy=new HashMap<String LocalMessageInfo>(); } remoteFolder.fetch(unsyncedMessages.toArray(new Message[unsyncedMessages.size()]) fp new MessageRetrievalListener(){ @Override public void messageRetrieved( Message message){ try { final LocalMessageInfo localMessageInfo=localMapCopy.get(message.getUid()); final boolean localExists=localMessageInfo != null; if (!localExists && message.isSet(Flag.DELETED)) { return; } final EmailContent.Message localMessage; if (!localExists) { localMessage=new EmailContent.Message(); } else { localMessage=EmailContent.Message.restoreMessageWithId(context localMessageInfo.mId); } if (localMessage != null) { try { LegacyConversions.updateMessageFields(localMessage message account.mId mailbox.mId); Utilities.saveOrUpdate(localMessage context); if (!message.isSet(Flag.SEEN) && unseenMessages != null) { unseenMessages.add(localMessage.mId); } } catch ( MessagingException me) { LogUtils.e(Logging.LOG_TAG ""Error while copying downloaded message."" + me); } } } catch ( Exception e) { LogUtils.e(Logging.LOG_TAG ""Error while storing downloaded message."" + e.toString()); } } @Override public void loadAttachmentProgress( int progress){ } } ); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,getMessageDecodeErrorString,"public static String  (){ return sMessageDecodeErrorString == null ? """" : sMessageDecodeErrorString; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,getRemoteMailboxForMessage,private static Mailbox  (Context context EmailContent.Message message){ if (!TextUtils.isEmpty(message.mProtocolSearchInfo)) { long accountKey=message.mAccountKey; String protocolSearchInfo=message.mProtocolSearchInfo; if (accountKey == mLastSearchAccountKey && protocolSearchInfo.equals(mLastSearchServerId)) { return mLastSearchRemoteMailbox; } Cursor c=context.getContentResolver().query(Mailbox.CONTENT_URI Mailbox.CONTENT_PROJECTION Mailbox.PATH_AND_ACCOUNT_SELECTION new String[]{protocolSearchInfo Long.toString(accountKey)} null); try { if (c.moveToNext()) { Mailbox mailbox=new Mailbox(); mailbox.restore(c); mLastSearchAccountKey=accountKey; mLastSearchServerId=protocolSearchInfo; mLastSearchRemoteMailbox=mailbox; return mailbox; } else { return null; } } finally { c.close(); } } else { return Mailbox.restoreMailboxWithId(context message.mMailboxKey); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,loadUnsyncedMessages,static void  (final Context context final Account account Folder remoteFolder ArrayList<Message> messages final Mailbox toMailbox) throws MessagingException { FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.STRUCTURE); remoteFolder.fetch(messages.toArray(new Message[messages.size()]) fp null); Message[] oneMessageArray=new Message[1]; for ( Message message : messages) { ArrayList<Part> viewables=new ArrayList<Part>(); ArrayList<Part> attachments=new ArrayList<Part>(); MimeUtility.collectParts(message viewables attachments); oneMessageArray[0]=message; for ( Part part : viewables) { fp.clear(); fp.add(part); remoteFolder.fetch(oneMessageArray fp null); } Utilities.copyOneMessageToProvider(context message account toMailbox EmailContent.Message.FLAG_LOADED_COMPLETE); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,messageRetrieved,@Override public void  (Message message){ try { EmailContent.Message localMessage=new EmailContent.Message(); LegacyConversions.updateMessageFields(localMessage message account.mId mailbox.mId); localMessage.mMainMailboxKey=localMessage.mMailboxKey; local
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,onBind,@Override public IBinder  (Intent intent){ mBinder.init(this); return mBinder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,onCreate,@Override public void  (){ super.onCreate(); sMessageDecodeErrorString=getString(R.string.message_decode_error); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,onMessageNotFound,@Override public void  (Message message){ context.getContentResolver().delete(newMessage.getUri() null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,onMessageUidChange,@Override public void  (Message message String newUid){ ContentValues cv=new ContentValues(); cv.put(MessageColumns.SERVER_ID newUid); context.getContentResolver().update(newMessage.getUri() cv null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,onStartCommand,@Override public int  (Intent intent int flags int startId){ return Service.START_STICKY; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processPendingActionsSynchronous,private static void  (Context context Account account Store remoteStore boolean manualSync) throws MessagingException { TrafficStats.setThreadStatsTag(TrafficFlags.getSyncFlags(context account)); String[] accountIdArgs=new String[]{Long.toString(account.mId)}; processPendingDeletesSynchronous(context account remoteStore accountIdArgs); processPendingUploadsSynchronous(context account remoteStore accountIdArgs manualSync); processPendingUpdatesSynchronous(context account remoteStore accountIdArgs); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processPendingAppend,private static boolean  (Context context Store remoteStore Mailbox mailbox EmailContent.Message message boolean manualSync) throws MessagingException { boolean updateInternalDate=false; boolean updateMessage=false; boolean deleteMessage=false; Folder remoteFolder=remoteStore.getFolder(mailbox.mServerId); if (!remoteFolder.exists()) { if (!remoteFolder.create(FolderType.HOLDS_MESSAGES)) { return false; } } remoteFolder.open(OpenMode.READ_WRITE); if (remoteFolder.getMode() != OpenMode.READ_WRITE) { return false; } Message remoteMessage=null; if (message.mServerId != null && message.mServerId.length() > 0) { remoteMessage=remoteFolder.getMessage(message.mServerId); } if (remoteMessage == null) { Message localMessage=LegacyConversions.makeMessage(context message); remoteFolder.appendMessage(context localMessage manualSync); message.mServerId=localMessage.getUid(); updateInternalDate=true; updateMessage=true; } else { FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.ENVELOPE); remoteFolder.fetch(new Message[]{remoteMessage} fp null); Date localDate=new Date(message.mServerTimeStamp); Date remoteDate=remoteMessage.getInternalDate(); if (remoteDate != null && remoteDate.compareTo(localDate) > 0) { deleteMessage=true; } else { Message localMessage=LegacyConversions.makeMessage(context message); fp.clear(); fp=new FetchProfile(); fp.add(FetchProfile.Item.BODY); remoteFolder.appendMessage(context localMessage manualSync); message.mServerId=localMessage.getUid(); updateInternalDate=true; updateMessage=true; remoteMessage.setFlag(Flag.DELETED true); } } if (updateInternalDate && message.mServerId != null) { try { Message remoteMessage2=remoteFolder.getMessage(message.mServerId); if (remoteMessage2 != null) { FetchProfile fp2=new FetchProfile(); fp2.add(FetchProfile.Item.ENVELOPE); remoteFolder.fetch(new Message[]{remoteMessage2} fp2 null); final Date remoteDate=remoteMessage2.getInternalDate(); if (remoteDate != null) { message.mServerTimeStamp=remoteMessage2.getInternalDate().getTime(); updateMessage=true; } } } catch ( MessagingException me) { } } if (deleteMessage || updateMessage) { Uri uri=ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI message.mId); ContentResolver resolver=context.getContentResolver(); if (deleteMessage) { resolver.delete(uri null null); } else if (updateMessage) { ContentValues cv=new ContentValues(); cv.put(MessageColumns.SERVER_ID message.mServerId); cv.put(MessageColumns.SERVER_TIMESTAMP message.mServerTimeStamp); resolver.update(uri cv null null); } } return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processPendingDataChange,"private static void  (final Context context Store remoteStore Mailbox mailbox boolean changeRead boolean changeFlagged boolean changeMailbox boolean changeAnswered EmailContent.Message oldMessage final EmailContent.Message newMessage) throws MessagingException { Mailbox newMailbox=mailbox; mailbox=getRemoteMailboxForMessage(context oldMessage); if (newMessage.mServerId == null || newMessage.mServerId.equals("""") || newMessage.mServerId.startsWith(LOCAL_SERVERID_PREFIX) || (mailbox == null)) { return; } if (mailbox.mType == Mailbox.TYPE_DRAFTS || mailbox.mType == Mailbox.TYPE_OUTBOX) { return; } Folder remoteFolder=remoteStore.getFolder(mailbox.mServerId); if (!remoteFolder.exists()) { return; } remoteFolder.open(OpenMode.READ_WRITE); if (remoteFolder.getMode() != OpenMode.READ_WRITE) { return; } Message remoteMessage=remoteFolder.getMessage(newMessage.mServerId); if (remoteMessage == null) { return; } if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""Update for msg id="" + newMessage.mId + "" read=""+ newMessage.mFlagRead+ "" flagged=""+ newMessage.mFlagFavorite+ "" answered=""+ ((newMessage.mFlags & EmailContent.Message.FLAG_REPLIED_TO) != 0)+ "" new mailbox=""+ newMessage.mMailboxKey); } Message[] messages=new Message[]{remoteMessage}; if (changeRead) { remoteFolder.setFlags(messages FLAG_LIST_SEEN newMessage.mFlagRead); } if (changeFlagged) { remoteFolder.setFlags(messages FLAG_LIST_FLAGGED newMessage.mFlagFavorite); } if (changeAnswered) { remoteFolder.setFlags(messages FLAG_LIST_ANSWERED (newMessage.mFlags & EmailContent.Message.FLAG_REPLIED_TO) != 0); } if (changeMailbox) { Folder toFolder=remoteStore.getFolder(newMailbox.mServerId); if (!remoteFolder.exists()) { return; } remoteMessage.setMessageId(newMessage.mMessageId); remoteFolder.copyMessages(messages toFolder new MessageUpdateCallbacks(){ @Override public void onMessageUidChange( Message message  String newUid){ ContentValues cv=new ContentValues(); cv.put(MessageColumns.SERVER_ID newUid); context.getContentResolver().update(ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI newMessage.mId) cv null null); } @Override public void onMessageNotFound( Message message){ } } ); remoteMessage.setFlag(Flag.DELETED true); remoteFolder.expunge(); } remoteFolder.close(false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processPendingDeleteFromTrash,private static void  (Store remoteStore Mailbox oldMailbox EmailContent.Message oldMessage) throws MessagingException { if (oldMailbox.mType != Mailbox.TYPE_TRASH) { return; } Folder remoteTrashFolder=remoteStore.getFolder(oldMailbox.mServerId); if (!remoteTrashFolder.exists()) { return; } remoteTrashFolder.open(OpenMode.READ_WRITE); if (remoteTrashFolder.getMode() != OpenMode.READ_WRITE) { remoteTrashFolder.close(false); return; } Message remoteMessage=remoteTrashFolder.getMessage(oldMessage.mServerId); if (remoteMessage == null) { remoteTrashFolder.close(false); return; } remoteMessage.setFlag(Flag.DELETED true); remoteTrashFolder.expunge(); remoteTrashFolder.close(false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processPendingDeletesSynchronous,"private static void  (Context context Account account Store remoteStore String[] accountIdArgs){ Cursor deletes=context.getContentResolver().query(EmailContent.Message.DELETED_CONTENT_URI EmailContent.Message.CONTENT_PROJECTION EmailContent.MessageColumns.ACCOUNT_KEY + ""=?"" accountIdArgs EmailContent.MessageColumns.MAILBOX_KEY); long lastMessageId=-1; try { while (deletes.moveToNext()) { EmailContent.Message oldMessage=EmailContent.getContent(context deletes EmailContent.Message.class); if (oldMessage != null) { lastMessageId=oldMessage.mId; Mailbox mailbox=getRemoteMailboxForMessage(context oldMessage); if (mailbox == null) { continue; } final boolean deleteFromTrash=mailbox.mType == Mailbox.TYPE_TRASH; if (deleteFromTrash) { processPendingDeleteFromTrash(remoteStore mailbox oldMessage); } Uri uri=ContentUris.withAppendedId(EmailContent.Message.DELETED_CONTENT_URI oldMessage.mId); context.getContentResolver().delete(uri null null); } } } catch ( MessagingException me) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""Unable to process pending delete for id="" + lastMessageId + "": ""+ me); } } finally { deletes.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processPendingMoveToTrash,"private static void  (final Context context Store remoteStore Mailbox newMailbox EmailContent.Message oldMessage final EmailContent.Message newMessage) throws MessagingException { if (newMessage.mServerId == null || newMessage.mServerId.equals("""") || newMessage.mServerId.startsWith(LOCAL_SERVERID_PREFIX)) { return; } Mailbox oldMailbox=getRemoteMailboxForMessage(context oldMessage); if (oldMailbox == null) { return; } if (oldMailbox.mType == Mailbox.TYPE_TRASH) { return; } Folder remoteFolder=remoteStore.getFolder(oldMailbox.mServerId); if (!remoteFolder.exists()) { return; } remoteFolder.open(OpenMode.READ_WRITE); if (remoteFolder.getMode() != OpenMode.READ_WRITE) { remoteFolder.close(false); return; } Message remoteMessage=remoteFolder.getMessage(oldMessage.mServerId); if (remoteMessage == null) { remoteFolder.close(false); return; } Folder remoteTrashFolder=remoteStore.getFolder(newMailbox.mServerId); if (!remoteTrashFolder.exists()) { remoteTrashFolder.create(FolderType.HOLDS_MESSAGES); } if (remoteTrashFolder.exists()) { remoteTrashFolder.open(OpenMode.READ_WRITE); if (remoteTrashFolder.getMode() != OpenMode.READ_WRITE) { remoteFolder.close(false); remoteTrashFolder.close(false); return; } remoteFolder.copyMessages(new Message[]{remoteMessage} remoteTrashFolder new Folder.MessageUpdateCallbacks(){ @Override public void onMessageUidChange( Message message  String newUid){ ContentValues cv=new ContentValues(); cv.put(MessageColumns.SERVER_ID newUid); context.getContentResolver().update(newMessage.getUri() cv null null); } @Override public void onMessageNotFound( Message message){ context.getContentResolver().delete(newMessage.getUri() null null); } } ); remoteTrashFolder.close(false); } remoteMessage.setFlag(Flag.DELETED true); remoteFolder.expunge(); remoteFolder.close(false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processPendingUpdatesSynchronous,"private static void  (Context context Account account Store remoteStore String[] accountIdArgs){ ContentResolver resolver=context.getContentResolver(); Cursor updates=resolver.query(EmailContent.Message.UPDATED_CONTENT_URI EmailContent.Message.CONTENT_PROJECTION EmailContent.MessageColumns.ACCOUNT_KEY + ""=?"" accountIdArgs EmailContent.MessageColumns.MAILBOX_KEY); long lastMessageId=-1; try { Mailbox mailbox=null; while (updates.moveToNext()) { boolean changeMoveToTrash=false; boolean changeRead=false; boolean changeFlagged=false; boolean changeMailbox=false; boolean changeAnswered=false; EmailContent.Message oldMessage=EmailContent.getContent(context updates EmailContent.Message.class); lastMessageId=oldMessage.mId; EmailContent.Message newMessage=EmailContent.Message.restoreMessageWithId(context oldMessage.mId); if (newMessage != null) { mailbox=Mailbox.restoreMailboxWithId(context newMessage.mMailboxKey); if (mailbox == null) { continue; } if (oldMessage.mMailboxKey != newMessage.mMailboxKey) { if (mailbox.mType == Mailbox.TYPE_TRASH) { changeMoveToTrash=true; } else { changeMailbox=true; } } changeRead=oldMessage.mFlagRead != newMessage.mFlagRead; changeFlagged=oldMessage.mFlagFavorite != newMessage.mFlagFavorite; changeAnswered=(oldMessage.mFlags & EmailContent.Message.FLAG_REPLIED_TO) != (newMessage.mFlags & EmailContent.Message.FLAG_REPLIED_TO); } if (remoteStore == null && (changeMoveToTrash || changeRead || changeFlagged|| changeMailbox|| changeAnswered)) { remoteStore=Store.getInstance(account context); } if (changeMoveToTrash) { processPendingMoveToTrash(context remoteStore mailbox oldMessage newMessage); } else if (changeRead || changeFlagged || changeMailbox|| changeAnswered) { processPendingDataChange(context remoteStore mailbox changeRead changeFlagged changeMailbox changeAnswered oldMessage newMessage); } Uri uri=ContentUris.withAppendedId(EmailContent.Message.UPDATED_CONTENT_URI oldMessage.mId); resolver.delete(uri null null); } } catch ( MessagingException me) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""Unable to process pending update for id="" + lastMessageId + "": ""+ me); } } finally { updates.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processPendingUploadsSynchronous,"private static void  (Context context Account account Store remoteStore String[] accountIdArgs boolean manualSync){ ContentResolver resolver=context.getContentResolver(); Cursor mailboxes=resolver.query(Mailbox.CONTENT_URI Mailbox.ID_PROJECTION MailboxColumns.ACCOUNT_KEY + ""=?"" + "" and ""+ MailboxColumns.TYPE+ ""=""+ Mailbox.TYPE_SENT accountIdArgs null); long lastMessageId=-1; try { while (mailboxes.moveToNext()) { long mailboxId=mailboxes.getLong(Mailbox.ID_PROJECTION_COLUMN); String[] mailboxKeyArgs=new String[]{Long.toString(mailboxId)}; Mailbox mailbox=null; Cursor upsyncs1=resolver.query(EmailContent.Message.CONTENT_URI EmailContent.Message.ID_PROJECTION MessageColumns.MAILBOX_KEY + ""=?"" + "" and (""+ MessageColumns.SERVER_ID+ "" is null""+ "" or ""+ MessageColumns.SERVER_ID+ ""=''""+ "")"" mailboxKeyArgs null); try { while (upsyncs1.moveToNext()) { if (remoteStore == null) { remoteStore=Store.getInstance(account context); } if (mailbox == null) { mailbox=Mailbox.restoreMailboxWithId(context mailboxId); if (mailbox == null) { continue; } } long id=upsyncs1.getLong(EmailContent.Message.ID_PROJECTION_COLUMN); lastMessageId=id; processUploadMessage(context remoteStore mailbox id manualSync); } } finally { if (upsyncs1 != null) { upsyncs1.close(); } if (remoteStore != null) { remoteStore.closeConnections(); } } } } catch ( MessagingException me) { if (DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""Unable to process pending upsync for id="" + lastMessageId + "": ""+ me); } } finally { if (mailboxes != null) { mailboxes.close(); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,processUploadMessage,"private static void  (Context context Store remoteStore Mailbox mailbox long messageId boolean manualSync) throws MessagingException { EmailContent.Message newMessage=EmailContent.Message.restoreMessageWithId(context messageId); final boolean deleteUpdate; if (newMessage == null) { deleteUpdate=true; LogUtils.d(Logging.LOG_TAG ""Upsync failed for null message  id="" + messageId); } else if (mailbox.mType == Mailbox.TYPE_DRAFTS) { deleteUpdate=false; LogUtils.d(Logging.LOG_TAG ""Upsync skipped for mailbox=drafts  id="" + messageId); } else if (mailbox.mType == Mailbox.TYPE_OUTBOX) { deleteUpdate=false; LogUtils.d(Logging.LOG_TAG ""Upsync skipped for mailbox=outbox  id="" + messageId); } else if (mailbox.mType == Mailbox.TYPE_TRASH) { deleteUpdate=false; LogUtils.d(Logging.LOG_TAG ""Upsync skipped for mailbox=trash  id="" + messageId); } else if (newMessage.mMailboxKey != mailbox.mId) { deleteUpdate=false; LogUtils.d(Logging.LOG_TAG ""Upsync skipped; mailbox changed  id="" + messageId); } else { LogUtils.d(Logging.LOG_TAG ""Upsync triggered for message id="" + messageId); deleteUpdate=processPendingAppend(context remoteStore mailbox newMessage manualSync); } if (deleteUpdate) { Uri uri=ContentUris.withAppendedId(EmailContent.Message.UPDATED_CONTENT_URI messageId); context.getContentResolver().delete(uri null null); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,searchMailboxImpl,"private static int  (final Context context final long accountId final SearchParams searchParams final long destMailboxId) throws MessagingException { final Account account=Account.restoreAccountWithId(context accountId); final Mailbox mailbox=Mailbox.restoreMailboxWithId(context searchParams.mMailboxId); final Mailbox destMailbox=Mailbox.restoreMailboxWithId(context destMailboxId); if (account == null || mailbox == null || destMailbox == null) { LogUtils.d(Logging.LOG_TAG ""Attempted search for %s "" + ""but account or mailbox information was missing"" searchParams); return 0; } final ContentValues statusValues=new ContentValues(2); statusValues.put(Mailbox.UI_SYNC_STATUS UIProvider.SyncStatus.LIVE_QUERY); destMailbox.update(context statusValues); Store remoteStore=null; int numSearchResults=0; try { remoteStore=Store.getInstance(account context); final Folder remoteFolder=remoteStore.getFolder(mailbox.mServerId); remoteFolder.open(OpenMode.READ_WRITE); SortableMessage[] sortableMessages=new SortableMessage[0]; if (searchParams.mOffset == 0) { final Message[] remoteMessages=remoteFolder.getMessages(searchParams null); final int remoteCount=remoteMessages.length; if (remoteCount > 0) { sortableMessages=new SortableMessage[remoteCount]; int i=0; for ( Message msg : remoteMessages) { sortableMessages[i++]=new SortableMessage(msg Long.parseLong(msg.getUid())); } Arrays.sort(sortableMessages new Comparator<SortableMessage>(){ @Override public int compare( SortableMessage lhs  SortableMessage rhs){ return lhs.mUid > rhs.mUid ? -1 : lhs.mUid < rhs.mUid ? 1 : 0; } } ); sSearchResults.put(accountId sortableMessages); } } else { sortableMessages=sSearchResults.get(accountId); } numSearchResults=(sortableMessages != null ? sortableMessages.length : 0); final int numToLoad=Math.min(numSearchResults - searchParams.mOffset searchParams.mLimit); destMailbox.updateMessageCount(context numSearchResults); if (numToLoad <= 0) { return 0; } final ArrayList<Message> messageList=new ArrayList<>(); for (int i=searchParams.mOffset; i < numToLoad + searchParams.mOffset; i++) { messageList.add(sortableMessages[i].mMessage); } final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); fp.add(FetchProfile.Item.ENVELOPE); Message[] messageArray=messageList.toArray(new Message[messageList.size()]); remoteFolder.fetch(messageArray fp new MessageRetrievalListener(){ @Override public void messageRetrieved( Message message){ try { EmailContent.Message localMessage=new EmailContent.Message(); LegacyConversions.updateMessageFields(localMessage message account.mId mailbox.mId); localMessage.mMainMailboxKey=localMessage.mMailboxKey; localMessage.mMailboxKey=destMailboxId; int flag=EmailContent.Message.FLAG_LOADED_COMPLETE; localMessage.mProtocolSearchInfo=mailbox.mServerId; Utilities.saveOrUpdate(localMessage context); } catch ( MessagingException me) { LogUtils.e(Logging.LOG_TAG me ""Error while copying downloaded message.""); } catch ( Exception e) { LogUtils.e(Logging.LOG_TAG e ""Error while storing downloaded message.""); } } @Override public void loadAttachmentProgress( int progress){ } } ); fp.clear(); fp.add(FetchProfile.Item.STRUCTURE); remoteFolder.fetch(messageArray fp null); Message[] oneMessageArray=new Message[1]; for ( Message message : messageArray) { ArrayList<Part> viewables=new ArrayList<>(); ArrayList<Part> attachments=new ArrayList<>(); MimeUtility.collectParts(message viewables attachments); oneMessageArray[0]=message; for ( Part part : viewables) { fp.clear(); fp.add(part); remoteFolder.fetch(oneMessageArray fp null); } Utilities.copyOneMessageToProvider(context message account destMailbox EmailContent.Message.FLAG_LOADED_COMPLETE); } } finally { if (remoteStore != null) { remoteStore.closeConnections(); } statusValues.put(Mailbox.SYNC_TIME System.currentTimeMillis()); statusValues.put(Mailbox.UI_SYNC_STATUS UIProvider.SyncStatus.NO_SYNC); destMailbox.update(context statusValues); } return numSearchResults; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,searchMessages,@Override public int  (long accountId SearchParams searchParams long destMailboxId){ try { return searchMailboxImpl(getApplicationContext() accountId searchParams destMailboxId); } catch ( MessagingException e) { } return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,synchronizeMailboxGeneric,"private synchronized static void  (final Context context final Account account Store remoteStore final Mailbox mailbox final boolean loadMore final boolean uiRefresh) throws MessagingException { LogUtils.d(Logging.LOG_TAG ""synchronizeMailboxGeneric "" + account + "" ""+ mailbox+ "" ""+ loadMore+ "" ""+ uiRefresh); final ArrayList<Long> unseenMessages=new ArrayList<Long>(); ContentResolver resolver=context.getContentResolver(); if (mailbox.mType == Mailbox.TYPE_DRAFTS || mailbox.mType == Mailbox.TYPE_OUTBOX) { return; } long endDate; final long timeSinceLastFullSync=SystemClock.elapsedRealtime() - mailbox.mLastFullSyncTime; final boolean fullSync=(uiRefresh || loadMore || timeSinceLastFullSync >= FULL_SYNC_INTERVAL_MILLIS || timeSinceLastFullSync < 0); if (account.mSyncLookback == SyncWindow.SYNC_WINDOW_ALL) { endDate=0; } else if (fullSync) { endDate=System.currentTimeMillis() - FULL_SYNC_WINDOW_MILLIS; Cursor localOldestCursor=null; try { localOldestCursor=resolver.query(EmailContent.Message.CONTENT_URI OldestTimestampInfo.PROJECTION EmailContent.MessageColumns.ACCOUNT_KEY + ""=?"" + "" AND ""+ MessageColumns.MAILBOX_KEY+ ""=? AND ""+ MessageColumns.TIMESTAMP+ ""!=0"" new String[]{String.valueOf(account.mId) String.valueOf(mailbox.mId)} null); if (localOldestCursor != null && localOldestCursor.moveToFirst()) { long oldestLocalMessageDate=localOldestCursor.getLong(OldestTimestampInfo.COLUMN_OLDEST_TIMESTAMP); if (oldestLocalMessageDate > 0) { endDate=Math.min(endDate oldestLocalMessageDate); LogUtils.d(Logging.LOG_TAG ""oldest local message "" + oldestLocalMessageDate); } } } finally { if (localOldestCursor != null) { localOldestCursor.close(); } } LogUtils.d(Logging.LOG_TAG ""full sync: original window: now - "" + endDate); } else { endDate=System.currentTimeMillis() - QUICK_SYNC_WINDOW_MILLIS; LogUtils.d(Logging.LOG_TAG ""quick sync: original window: now - "" + endDate); } if (remoteStore == null) { LogUtils.d(Logging.LOG_TAG ""account is apparently deleted""); return; } final Folder remoteFolder=remoteStore.getFolder(mailbox.mServerId); if (mailbox.mType == Mailbox.TYPE_TRASH || mailbox.mType == Mailbox.TYPE_SENT) { if (!remoteFolder.exists()) { if (!remoteFolder.create(FolderType.HOLDS_MESSAGES)) { LogUtils.w(Logging.LOG_TAG ""could not create remote folder type %d"" mailbox.mType); return; } } } remoteFolder.open(OpenMode.READ_WRITE); final int remoteMessageCount=remoteFolder.getMessageCount(); mailbox.updateMessageCount(context remoteMessageCount); Message[] remoteMessages; remoteMessages=remoteFolder.getMessages(0 endDate null); LogUtils.d(Logging.LOG_TAG ""received "" + remoteMessages.length + "" messages""); int totalCountNeeded; if (loadMore) { totalCountNeeded=remoteMessages.length + LOAD_MORE_MIN_INCREMENT; } else { totalCountNeeded=remoteMessages.length; if (fullSync && totalCountNeeded < MINIMUM_MESSAGES_TO_SYNC) { totalCountNeeded=MINIMUM_MESSAGES_TO_SYNC; } } LogUtils.d(Logging.LOG_TAG ""need "" + totalCountNeeded + "" total""); final int additionalMessagesNeeded=totalCountNeeded - remoteMessages.length; if (additionalMessagesNeeded > 0) { LogUtils.d(Logging.LOG_TAG ""trying to get "" + additionalMessagesNeeded + "" more""); long startDate=endDate - 1; Message[] additionalMessages=new Message[0]; long windowIncreaseSize=INITIAL_WINDOW_SIZE_INCREASE; while (additionalMessages.length < additionalMessagesNeeded && endDate > 0) { endDate=endDate - windowIncreaseSize; if (endDate < 0) { LogUtils.d(Logging.LOG_TAG ""window size too large  this is the last attempt""); endDate=0; } LogUtils.d(Logging.LOG_TAG ""requesting additional messages from range "" + startDate + "" - ""+ endDate); additionalMessages=remoteFolder.getMessages(startDate endDate null); windowIncreaseSize*=2; } LogUtils.d(Logging.LOG_TAG ""additionalMessages "" + additionalMessages.length); if (additionalMessages.length < additionalMessagesNeeded) { LogUtils.e(Logging.LOG_TAG ""expected to find "" + additionalMessagesNeeded + "" more messages  only got ""+ additionalMessages.length); } int additionalToKeep=additionalMessages.length; if (additionalMessages.length > LOAD_MORE_MAX_INCREMENT) { additionalToKeep=LOAD_MORE_MAX_INCREMENT; } Message[] allMessages=new Message[remoteMessages.length + additionalToKeep]; System.arraycopy(remoteMessages 0 allMessages 0 remoteMessages.length); System.arraycopy(additionalMessages additionalMessages.length - additionalToKeep allMessages remoteMessages.length additionalToKeep); remoteMessages=allMessages; } Cursor localUidCursor=null; HashMap<String LocalMessageInfo> localMessageMap=new HashMap<String LocalMessageInfo>(); try { final long queryEndDate=0; localUidCursor=resolver.query(EmailContent.Message.CONTENT_URI LocalMessageInfo.PROJECTION EmailContent.MessageColumns.ACCOUNT_KEY + ""=?"" + "" AND ""+ MessageColumns.MAILBOX_KEY+ ""=?""+ "" AND ""+ MessageColumns.TIMESTAMP+ "">=?"" new String[]{String.valueOf(account.mId) String.valueOf(mailbox.mId) String.valueOf(queryEndDate)} null); while (localUidCursor.moveToNext()) { LocalMessageInfo info=new LocalMessageInfo(localUidCursor); if (!TextUtils.isEmpty(info.mServerId)) { localMessageMap.put(info.mServerId info); } } } finally { if (localUidCursor != null) { localUidCursor.close(); } } final ArrayList<Message> unsyncedMessages=new ArrayList<Message>(); final HashMap<String Message> remoteUidMap=new HashMap<String Message>(); for (int i=remoteMessages.length - 1; i >= 0; i--) { Message message=remoteMessages[i]; LogUtils.d(Logging.LOG_TAG ""remote message "" + message.getUid()); remoteUidMap.put(message.getUid() message); LocalMessageInfo localMessage=localMessageMap.get(message.getUid()); if (localMessage == null || (localMessage.mFlagLoaded == EmailContent.Message.FLAG_LOADED_UNLOADED) || (localMessage.mFlagLoaded == EmailContent.Message.FLAG_LOADED_PARTIAL)) { unsyncedMessages.add(message); } } if (unsyncedMessages.size() > 0) { downloadFlagAndEnvelope(context account mailbox remoteFolder unsyncedMessages localMessageMap unseenMessages); } FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); if (remoteMessages.length > MAX_MESSAGES_TO_FETCH) { List<Message> remoteMessageList=Arrays.asList(remoteMessages); for (int start=0; start < remoteMessageList.size(); start+=MAX_MESSAGES_TO_FETCH) { int end=start + MAX_MESSAGES_TO_FETCH; if (end >= remoteMessageList.size()) { end=remoteMessageList.size() - 1; } List<Message> chunk=remoteMessageList.subList(start end); final Message[] partialArray=chunk.toArray(new Message[chunk.size()]); remoteFolder.fetch(partialArray fp null); } } else { remoteFolder.fetch(remoteMessages fp null); } boolean remoteSupportsSeen=false; boolean remoteSupportsFlagged=false; boolean remoteSupportsAnswered=false; for ( Flag flag : remoteFolder.getPermanentFlags()) { if (flag == Flag.SEEN) { remoteSupportsSeen=true; } if (flag == Flag.FLAGGED) { remoteSupportsFlagged=true; } if (flag == Flag.ANSWERED) { remoteSupportsAnswered=true; } } if (remoteSupportsSeen || remoteSupportsFlagged || remoteSupportsAnswered) { for ( Message remoteMessage : remoteMessages) { LocalMessageInfo localMessageInfo=localMessageMap.get(remoteMessage.getUid()); if (localMessageInfo == null) { continue; } boolean localSeen=localMessageInfo.mFlagRead; boolean remoteSeen=remoteMessage.isSet(Flag.SEEN); boolean newSeen=(remoteSupportsSeen && (remoteSeen != localSeen)); boolean localFlagged=localMessageInfo.mFlagFavorite; boolean remoteFlagged=remoteMessage.isSet(Flag.FLAGGED); boolean newFlagged=(remoteSupportsFlagged && (localFlagged != remoteFlagged)); int localFlags=localMessageInfo.mFlags; boolean localAnswered=(localFlags & EmailContent.Message.FLAG_REPLIED_TO) != 0; boolean remoteAnswered=remoteMessage.isSet(Flag.ANSWERED); boolean newAnswered=(remoteSupportsAnswered && (localAnswered != remoteAnswered)); if (newSeen || newFlagged || newAnswered) { Uri uri=ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI localMessageInfo.mId); ContentValues updateValues=new ContentValues(); updateValues.put(MessageColumns.FLAG_READ remoteSeen); updateValues.put(MessageColumns.FLAG_FAVORITE remoteFlagged); if (remoteAnswered) { localFlags|=EmailContent.Message.FLAG_REPLIED_TO; } else { localFlags&=~EmailContent.Message.FLAG_REPLIED_TO; } updateValues.put(MessageColumns.FLAGS localFlags); resolver.update(uri updateValues null null); } } } for ( final Message remoteMessage : remoteMessages) { if (remoteMessage.isSet(Flag.DELETED)) { remoteUidMap.remove(remoteMessage.getUid()); unsyncedMessages.remove(remoteMessage); } } for ( final LocalMessageInfo info : localMessageMap.values()) { if (info.mTimestamp >= endDate && !remoteUidMap.containsKey(info.mServerId)) { AttachmentUtilities.deleteAllAttachmentFiles(context account.mId info.mId); final Uri uriToDelete=ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI info.mId); resolver.delete(uriToDelete null null); final Uri updateRowToDelete=ContentUris.withAppendedId(EmailContent.Message.UPDATED_CONTENT_URI info.mId); resolver.delete(updateRowToDelete null null); final Uri deleteRowToDelete=ContentUris.withAppendedId(EmailContent.Message.DELETED_CONTENT_URI info.mId); resolver.delete(deleteRowToDelete null null); } } loadUnsyncedMessages(context account remoteFolder unsyncedMessages mailbox); if (fullSync) { mailbox.updateLastFullSyncTime(context SystemClock.elapsedRealtime()); } remoteFolder.close(false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\ImapService.java,synchronizeMailboxSynchronous,"public static synchronized int  (Context context final Account account final Mailbox folder final boolean loadMore final boolean uiRefresh) throws MessagingException { TrafficStats.setThreadStatsTag(TrafficFlags.getSyncFlags(context account)); final NotificationController nc=NotificationControllerCreatorHolder.getInstance(context); Store remoteStore=null; try { remoteStore=Store.getInstance(account context); processPendingActionsSynchronous(context account remoteStore uiRefresh); synchronizeMailboxGeneric(context account remoteStore folder loadMore uiRefresh); nc.cancelLoginFailedNotification(account.mId); } catch ( MessagingException e) { if (Logging.LOGD) { LogUtils.d(Logging.LOG_TAG ""synchronizeMailboxSynchronous"" e); } if (e instanceof AuthenticationFailedException) { nc.showLoginFailedNotificationSynchronous(account.mId true); } throw e; } finally { if (remoteStore != null) { remoteStore.closeConnections(); } } return EmailServiceStatus.SUCCESS; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,FetchCallback, (ContentResolver resolver Uri attachmentUri){ mResolver=resolver; mAttachmentUri=attachmentUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,LocalMessageInfo,public  (Cursor c){ mId=c.getLong(COLUMN_ID); mFlagLoaded=c.getInt(COLUMN_FLAG_LOADED); mServerId=c.getString(COLUMN_SERVER_ID); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,loadAttachment,@Override public void  (final IEmailServiceCallback callback final long accountId final long attachmentId final boolean background) throws RemoteException { Attachment att=Attachment.restoreAttachmentWithId(mContext attachmentId); if (att == null || att.m
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,loadUnsyncedMessages,"static void  (final Context context final Account account Pop3Folder remoteFolder ArrayList<Pop3Message> unsyncedMessages final Mailbox toMailbox) throws MessagingException { if (DebugUtils.DEBUG) { LogUtils.d(TAG ""Loading "" + unsyncedMessages.size() + "" unsynced messages""); } try { int cnt=unsyncedMessages.size(); for (int i=0; i < cnt; i++) { final Pop3Message message=unsyncedMessages.get(i); remoteFolder.fetchBody(message Pop3Store.FETCH_BODY_SANE_SUGGESTED_SIZE / 76 null); int flag=EmailContent.Message.FLAG_LOADED_COMPLETE; if (!message.isComplete()) { flag=EmailContent.Message.FLAG_LOADED_PARTIAL; } if (DebugUtils.DEBUG) { LogUtils.d(TAG ""Message is "" + (message.isComplete() ? """" : ""NOT "") + ""complete""); } Utilities.copyOneMessageToProvider(context message account toMailbox flag); } } catch ( IOException e) { throw new MessagingException(MessagingException.IOERROR); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,onBind,@Override public IBinder  (Intent intent){ mBinder.init(this); return mBinder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,onStartCommand,@Override public int  (Intent intent int flags int startId){ return Service.START_STICKY; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,report,@Override public void  (int bytesRead){ mContentValues.put(AttachmentColumns.UI_DOWNLOADED_SIZE bytesRead); mResolver.update(mAttachmentUri mContentValues null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,synchronizeMailboxSynchronous,"public static int  (Context context final Account account final Mailbox folder final int deltaMessageCount) throws MessagingException { TrafficStats.setThreadStatsTag(TrafficFlags.getSyncFlags(context account)); final NotificationController nc=NotificationControllerCreatorHolder.getInstance(context); try { synchronizePop3Mailbox(context account folder deltaMessageCount); if (nc != null) { nc.cancelLoginFailedNotification(account.mId); } } catch ( MessagingException e) { if (Logging.LOGD) { LogUtils.v(Logging.LOG_TAG ""synchronizeMailbox"" e); } if (e instanceof AuthenticationFailedException && nc != null) { nc.showLoginFailedNotificationSynchronous(account.mId true); } throw e; } return EmailServiceStatus.SUCCESS; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\Pop3Service.java,synchronizePop3Mailbox,"private synchronized static void  (final Context context final Account account final Mailbox mailbox final int deltaMessageCount) throws MessagingException { ContentResolver resolver=context.getContentResolver(); if (mailbox.mType != Mailbox.TYPE_INBOX) { return; } Cursor localUidCursor=null; HashMap<String LocalMessageInfo> localMessageMap=new HashMap<String LocalMessageInfo>(); try { localUidCursor=resolver.query(EmailContent.Message.CONTENT_URI LocalMessageInfo.PROJECTION MessageColumns.MAILBOX_KEY + ""=?"" new String[]{String.valueOf(mailbox.mId)} null); while (localUidCursor.moveToNext()) { LocalMessageInfo info=new LocalMessageInfo(localUidCursor); localMessageMap.put(info.mServerId info); } } finally { if (localUidCursor != null) { localUidCursor.close(); } } Pop3Store remoteStore=(Pop3Store)Store.getInstance(account context); if (remoteStore == null) return; Pop3Folder remoteFolder=(Pop3Folder)remoteStore.getFolder(mailbox.mServerId); remoteFolder.open(OpenMode.READ_WRITE); String[] accountIdArgs=new String[]{Long.toString(account.mId)}; long trashMailboxId=Mailbox.findMailboxOfType(context account.mId Mailbox.TYPE_TRASH); Cursor updates=resolver.query(EmailContent.Message.UPDATED_CONTENT_URI EmailContent.Message.ID_COLUMN_PROJECTION EmailContent.MessageColumns.ACCOUNT_KEY + ""=?"" accountIdArgs null); try { while (updates.moveToNext()) { long id=updates.getLong(Message.ID_COLUMNS_ID_COLUMN); EmailContent.Message currentMsg=EmailContent.Message.restoreMessageWithId(context id); if (currentMsg.mMailboxKey == trashMailboxId) { Pop3Message popMessage=(Pop3Message)remoteFolder.getMessage(currentMsg.mServerId); if (popMessage != null) { remoteFolder.deleteMessage(popMessage); } } Uri uri=ContentUris.withAppendedId(EmailContent.Message.UPDATED_CONTENT_URI id); context.getContentResolver().delete(uri null null); } } finally { updates.close(); } final int remoteMessageCount=remoteFolder.getMessageCount(); mailbox.updateMessageCount(context remoteMessageCount); Pop3Message[] remoteMessages=new Pop3Message[0]; final ArrayList<Pop3Message> unsyncedMessages=new ArrayList<Pop3Message>(); HashMap<String Pop3Message> remoteUidMap=new HashMap<String Pop3Message>(); if (remoteMessageCount > 0) { remoteMessages=remoteFolder.getMessages(remoteMessageCount remoteMessageCount); LogUtils.d(Logging.LOG_TAG ""remoteMessageCount "" + remoteMessageCount); int count=0; int countNeeded=DEFAULT_SYNC_COUNT; for ( final Pop3Message message : remoteMessages) { final String uid=message.getUid(); remoteUidMap.put(uid message); } for ( final Pop3Message message : remoteMessages) { final String uid=message.getUid(); final LocalMessageInfo localMessage=localMessageMap.get(uid); if (localMessage == null) { count++; } else { LogUtils.d(Logging.LOG_TAG ""found a local message  need "" + deltaMessageCount + "" more remote messages""); countNeeded=deltaMessageCount; count=0; } if (localMessage == null || (localMessage.mFlagLoaded != EmailContent.Message.FLAG_LOADED_COMPLETE && localMessage.mFlagLoaded != Message.FLAG_LOADED_PARTIAL)) { LogUtils.d(Logging.LOG_TAG ""need to sync "" + uid); unsyncedMessages.add(message); } else { LogUtils.d(Logging.LOG_TAG ""don't need to sync "" + uid); } if (count >= countNeeded) { LogUtils.d(Logging.LOG_TAG ""loaded "" + count + "" messages  stopping""); break; } } } else { if (DebugUtils.DEBUG) { LogUtils.d(TAG ""*** Message count is zero??""); } remoteFolder.close(false); return; } Cursor c=resolver.query(Attachment.CONTENT_URI Attachment.CONTENT_PROJECTION AttachmentColumns.ACCOUNT_KEY + ""=? AND "" + AttachmentColumns.UI_STATE+ ""=""+ AttachmentState.DOWNLOADING new String[]{Long.toString(account.mId)} null); try { final ContentValues values=new ContentValues(); while (c.moveToNext()) { values.put(AttachmentColumns.UI_STATE UIProvider.AttachmentState.SAVED); Attachment att=new Attachment(); att.restore(c); Message msg=Message.restoreMessageWithId(context att.mMessageKey); if (msg == null || (msg.mFlagLoaded == Message.FLAG_LOADED_COMPLETE)) { values.put(AttachmentColumns.UI_DOWNLOADED_SIZE att.mSize); resolver.update(ContentUris.withAppendedId(Attachment.CONTENT_URI att.mId) values null null); continue; } else { String uid=msg.mServerId; Pop3Message popMessage=remoteUidMap.get(uid); if (popMessage != null) { Uri attUri=ContentUris.withAppendedId(Attachment.CONTENT_URI att.mId); try { remoteFolder.fetchBody(popMessage -1 new FetchCallback(resolver attUri)); } catch ( IOException e) { throw new MessagingException(MessagingException.IOERROR); } values.put(AttachmentColumns.UI_STATE AttachmentState.SAVED); resolver.update(attUri values null null); int flag=EmailContent.Message.FLAG_LOADED_COMPLETE; if (!popMessage.isComplete()) { LogUtils.e(TAG ""How is this possible?""); } Utilities.copyOneMessageToProvider(context popMessage account mailbox flag); resolver.delete(attUri null null); } else { LogUtils.e(TAG ""Could not find message for attachment "" + uid); } } } } finally { c.close(); } HashSet<String> localUidsToDelete=new HashSet<String>(localMessageMap.keySet()); localUidsToDelete.removeAll(remoteUidMap.keySet()); for ( String uidToDelete : localUidsToDelete) { LogUtils.d(Logging.LOG_TAG ""need to delete "" + uidToDelete); LocalMessageInfo infoToDelete=localMessageMap.get(uidToDelete); AttachmentUtilities.deleteAllAttachmentFiles(context account.mId infoToDelete.mId); Uri uriToDelete=ContentUris.withAppendedId(EmailContent.Message.CONTENT_URI infoToDelete.mId); resolver.delete(uriToDelete null null); Uri updateRowToDelete=ContentUris.withAppendedId(EmailContent.Message.UPDATED_CONTENT_URI infoToDelete.mId); resolver.delete(updateRowToDelete null null); Uri deleteRowToDelete=ContentUris.withAppendedId(EmailContent.Message.DELETED_CONTENT_URI infoToDelete.mId); resolver.delete(deleteRowToDelete null null); } LogUtils.d(TAG ""loadUnsynchedMessages "" + unsyncedMessages.size()); loadUnsyncedMessages(context account remoteFolder unsyncedMessages mailbox); remoteFolder.close(false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\setup\AuthenticatorSetupIntentHelper.java,actionGetCreateAccountIntent,"public static Intent  (final Context context final String accountManagerType){ final Intent i=new Intent(); i.setComponent(new ComponentName(context ""com.android.email.activity.setup.AccountSetupFinal"")); i.putExtra(EXTRA_FLOW_MODE FLOW_MODE_ACCOUNT_MANAGER); i.putExtra(EXTRA_FLOW_ACCOUNT_TYPE accountManagerType); return i; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\setup\AuthenticatorSetupIntentHelper.java,actionNewAccountIntent,"public static Intent  (final Context context){ final Intent i=new Intent(); i.setComponent(new ComponentName(context ""com.android.email.activity.setup.AccountSetupFinal"")); i.putExtra(EXTRA_FLOW_MODE FLOW_MODE_NORMAL); return i; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\setup\AuthenticatorSetupIntentHelper.java,actionNewAccountWithResultIntent,"public static Intent  (final Context context){ final Intent i=new Intent(); i.setComponent(new ComponentName(context ""com.android.email.activity.setup.AccountSetupFinal"")); i.putExtra(EXTRA_FLOW_MODE FLOW_MODE_NO_ACCOUNTS); return i; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ComposeActivityEmail.java,getEmailProviderAuthority,@Override protected String  (){ return EmailContent.AUTHORITY; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ComposeActivityEmail.java,onCreateOptionsMenu,"@Override public boolean  (Menu menu){ final boolean superCreated=super.onCreateOptionsMenu(menu); if (mReplyFromAccount != null) { getMenuInflater().inflate(R.menu.email_compose_menu_extras menu); return true; } else { LogUtils.d(LogUtils.TAG ""mReplyFrom"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ComposeActivityEmail.java,onOptionsItemSelected,@Override public boolean  (MenuItem item){ if (item.getItemId() == R.id.insert_quick_response_menu_item) { InsertQuickResponseDialog dialog=InsertQuickResponseDialog.newInstance(null mReplyFromAccount.account); dialog.show(getFragmentManager() insertQuick
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ComposeActivityEmail.java,onQuickResponseSelected,public void  (CharSequence quickResponse){ final int selEnd=mBodyView.getSelectionEnd(); final int selStart=mBodyView.getSelectionStart(); if (selEnd >= 0 && selStart >= 0) { final SpannableStringBuilder messageBody=new SpannableStringBuilder(mBodyView.getText()); final int replaceStart=selStart < selEnd ? selStart : selEnd; final int replaceEnd=selStart < selEnd ? selEnd : selStart; messageBody.replace(replaceStart replaceEnd quickResponse); mBodyView.setText(messageBody); mBodyView.setSelection(replaceStart + quickResponse.length()); } else { mBodyView.append(quickResponse); mBodyView.setSelection(mBodyView.getText().length()); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,PopImapSyncAdapterService,public  (){ super(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,SyncAdapterImpl,public  (Context context){ super(context true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,loadsFromServer,private static boolean  (Context context Mailbox m String protocol){ String legacyImapProtocol=context.getString(R.string.protocol_legacy_imap); String pop3Protocol=context.getString(R.string.protocol_pop3); if (legacyImapProtocol.equals(protocol)) { return m.mType != Mailbox.TYPE_DRAFTS && m.mType != Mailbox.TYPE_OUTBOX && m.mType != Mailbox.TYPE_SEARCH; } else if (pop3Protocol.equals(protocol)) { return Mailbox.TYPE_INBOX == m.mType; } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,onBind,@Override public IBinder  (Intent intent){ return mSyncAdapter.getSyncAdapterBinder(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,onCreate,@Override public void  (){ super.onCreate(); mSyncAdapter=new SyncAdapterImpl(getApplicationContext()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,onPerformSync,@Override public void  (android.accounts.Account account Bundle extras String authority ContentProviderClient provider SyncResult syncResult){ PopImapSyncAdapterService.performSync(getContext() account extras provider syncResult); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,performSync,"private static void  (Context context android.accounts.Account account Bundle extras ContentProviderClient provider SyncResult syncResult){ Cursor c=null; try { c=provider.query(com.android.emailcommon.provider.Account.CONTENT_URI Account.CONTENT_PROJECTION AccountColumns.EMAIL_ADDRESS + ""=?"" new String[]{account.name} null); if (c != null && c.moveToNext()) { Account acct=new Account(); acct.restore(c); if (extras.getBoolean(ContentResolver.SYNC_EXTRAS_UPLOAD)) { LogUtils.d(TAG ""Upload sync request for "" + acct.mDisplayName); ArrayList<Long> mailboxesToUpdate; Cursor updatesCursor=provider.query(Message.UPDATED_CONTENT_URI new String[]{MessageColumns.MAILBOX_KEY} MessageColumns.ACCOUNT_KEY + ""=?"" new String[]{Long.toString(acct.mId)} null); try { if ((updatesCursor == null) || (updatesCursor.getCount() == 0)) return; mailboxesToUpdate=new ArrayList<Long>(); while (updatesCursor.moveToNext()) { Long mailboxId=updatesCursor.getLong(0); if (!mailboxesToUpdate.contains(mailboxId)) { mailboxesToUpdate.add(mailboxId); } } } finally { if (updatesCursor != null) { updatesCursor.close(); } } for ( long mailboxId : mailboxesToUpdate) { sync(context mailboxId extras syncResult false 0); } } else { LogUtils.d(TAG ""Sync request for "" + acct.mDisplayName); LogUtils.d(TAG extras.toString()); final EmailServiceProxy service=EmailServiceUtils.getServiceForAccount(context acct.mId); service.updateFolderList(acct.mId); long[] mailboxIds=Mailbox.getMailboxIdsFromBundle(extras); if (mailboxIds == null || mailboxIds.length == 0) { final long inboxId=Mailbox.findMailboxOfType(context acct.mId Mailbox.TYPE_INBOX); if (inboxId != Mailbox.NO_MAILBOX) { mailboxIds=new long[1]; mailboxIds[0]=inboxId; } } if (mailboxIds != null) { boolean uiRefresh=extras.getBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED false); int deltaMessageCount=extras.getInt(Mailbox.SYNC_EXTRA_DELTA_MESSAGE_COUNT 0); for ( long mailboxId : mailboxIds) { sync(context mailboxId extras syncResult uiRefresh deltaMessageCount); } } } } } catch ( Exception e) { e.printStackTrace(); } finally { if (c != null) { c.close(); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PopImapSyncAdapterService.java,sync,"private static void  (final Context context final long mailboxId final Bundle extras final SyncResult syncResult final boolean uiRefresh final int deltaMessageCount){ TempDirectory.setTempDirectory(context); Mailbox mailbox=Mailbox.restoreMailboxWithId(context mailboxId); if (mailbox == null) return; Account account=Account.restoreAccountWithId(context mailbox.mAccountKey); if (account == null) return; ContentResolver resolver=context.getContentResolver(); String protocol=account.getProtocol(context); if ((mailbox.mType != Mailbox.TYPE_OUTBOX) && !loadsFromServer(context mailbox protocol)) { resolver.delete(Message.UPDATED_CONTENT_URI MessageColumns.MAILBOX_KEY + ""=?"" new String[]{Long.toString(mailbox.mId)}); return; } LogUtils.d(TAG ""About to sync mailbox: "" + mailbox.mDisplayName); Uri mailboxUri=ContentUris.withAppendedId(Mailbox.CONTENT_URI mailboxId); ContentValues values=new ContentValues(); final int syncStatus=uiRefresh ? EmailContent.SYNC_STATUS_USER : EmailContent.SYNC_STATUS_BACKGROUND; values.put(Mailbox.UI_SYNC_STATUS syncStatus); resolver.update(mailboxUri values null null); try { int lastSyncResult; try { String legacyImapProtocol=context.getString(R.string.protocol_legacy_imap); if (mailbox.mType == Mailbox.TYPE_OUTBOX) { EmailServiceStub.sendMailImpl(context account.mId); } else { lastSyncResult=UIProvider.createSyncValue(syncStatus EmailContent.LAST_SYNC_RESULT_SUCCESS); EmailServiceStatus.syncMailboxStatus(resolver extras mailboxId EmailServiceStatus.IN_PROGRESS 0 lastSyncResult); final int status; if (protocol.equals(legacyImapProtocol)) { status=ImapService.synchronizeMailboxSynchronous(context account mailbox deltaMessageCount != 0 uiRefresh); } else { status=Pop3Service.synchronizeMailboxSynchronous(context account mailbox deltaMessageCount); } EmailServiceStatus.syncMailboxStatus(resolver extras mailboxId status 0 lastSyncResult); } } catch ( MessagingException e) { final int type=e.getExceptionType(); switch (type) { case MessagingException.IOERROR: lastSyncResult=UIProvider.createSyncValue(syncStatus EmailContent.LAST_SYNC_RESULT_CONNECTION_ERROR); EmailServiceStatus.syncMailboxStatus(resolver extras mailboxId EmailServiceStatus.FAILURE 0 lastSyncResult); syncResult.stats.numIoExceptions++; break; case MessagingException.AUTHENTICATION_FAILED: lastSyncResult=UIProvider.createSyncValue(syncStatus EmailContent.LAST_SYNC_RESULT_AUTH_ERROR); EmailServiceStatus.syncMailboxStatus(resolver extras mailboxId EmailServiceStatus.FAILURE 0 lastSyncResult); syncResult.stats.numAuthExceptions++; break; case MessagingException.SERVER_ERROR: lastSyncResult=UIProvider.createSyncValue(syncStatus EmailContent.LAST_SYNC_RESULT_SERVER_ERROR); EmailServiceStatus.syncMailboxStatus(resolver extras mailboxId EmailServiceStatus.FAILURE 0 lastSyncResult); break; default : lastSyncResult=UIProvider.createSyncValue(syncStatus EmailContent.LAST_SYNC_RESULT_INTERNAL_ERROR); EmailServiceStatus.syncMailboxStatus(resolver extras mailboxId EmailServiceStatus.FAILURE 0 lastSyncResult); } } } finally { values.put(Mailbox.UI_SYNC_STATUS EmailContent.SYNC_STATUS_NONE); values.put(Mailbox.SYNC_TIME System.currentTimeMillis()); resolver.update(mailboxUri values null null); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,canDisableCamera,"public boolean  (){ DevicePolicyManager dpm=(DevicePolicyManager)mContext.getSystemService(Context.DEVICE_POLICY_SERVICE); final ComponentName adminName=new ComponentName(mContext SecurityPolicy.PolicyAdmin.class); final boolean cameraDisabled=dpm.getCameraDisabled(adminName); if (cameraDisabled) { return true; } else { try { dpm.setCameraDisabled(adminName true); dpm.setCameraDisabled(adminName false); } catch ( SecurityException e) { LogUtils.w(LOG_TAG ""SecurityException checking camera disabling.""); return false; } } return true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,isActive,"@Override public boolean  (Policy policy){ try { return mSecurityPolicy.isActive(policy); } catch ( RuntimeException e) { LogUtils.e(LOG_TAG e ""Exception thrown during call to SecurityPolicy#isActive""); throw e; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,onBind,@Override public IBinder  (Intent intent){ mContext=this; mSecurityPolicy=SecurityPolicy.getInstance(this); return mBinder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,remoteWipe,"@Override public void  (){ try { mSecurityPolicy.remoteWipe(); } catch ( RuntimeException e) { LogUtils.e(LOG_TAG e ""Exception thrown during call to SecurityPolicy#remoteWipe""); throw e; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,setAccountHoldFlag,@Override public void  (long accountId boolean newState){ SecurityPolicy.setAccountHoldFlag(mContext accountId newState); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,setAccountPolicy,@Override public void  (long accountId Policy policy String securityKey){ setAccountPolicy2(accountId policy securityKey true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\provider_src\com\android\email\service\PolicyService.java,setAccountPolicy2,"@Override public void  (long accountId Policy policy String securityKey boolean notify){ try { mSecurityPolicy.setAccountPolicy(accountId policy securityKey notify); } catch ( RuntimeException e) { LogUtils.e(LOG_TAG e ""Exception thrown from call to Secur"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\EventViewer.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); Uri uri=getIntent().getData(); long messageId=Long.parseLong(uri.getLastPathSegment()); Message msg=Message.restoreMessageWithId(this messageId); if (msg == null) { fi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,getCallback,private Callback  (){ Fragment targetFragment=getTargetFragment(); if (targetFragment != null) { return (Callback)targetFragment; } return (Callback)getActivity(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,newInstance,"public static InsertQuickResponseDialog  (Fragment callbackFragment Account account){ final InsertQuickResponseDialog dialog=new InsertQuickResponseDialog(); if (callbackFragment != null) { if (!(callbackFragment instanceof Callback)) { throw new ClassCastException(callbackFragment.toString() + "" must implement Callback""); } dialog.setTargetFragment(callbackFragment 0); } Bundle args=new Bundle(); args.putParcelable(ACCOUNT_KEY account); dialog.setArguments(args); return dialog; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,onClick,@Override public void  (DialogInterface dialog int which){ dialog.cancel(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,onCreateDialog,"@Override public Dialog  (Bundle savedInstanceState){ final Fragment targetFragment=getTargetFragment(); if (targetFragment != null) { if (!(getActivity() instanceof Callback)) { throw new ClassCastException(getActivity().toString() + "" must implement Cal"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,onCreateLoader,@Override public Loader<Cursor>  (int id Bundle args){ return new CursorLoader(context account.quickResponseUri UIProvider.QUICK_RESPONSE_PROJECTION null null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,onItemClick,@Override public void  (AdapterView<?> parent View view int position long id){ final Cursor c=(Cursor)listView.getItemAtPosition(position); final String quickResponseText=c.getString(c.getColumnIndex(UIProvider.QuickResponseColumns.TEXT)); getCallback().o
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,onLoadFinished,@Override public void  (Loader<Cursor> loader Cursor data){ adapter.swapCursor(data); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\InsertQuickResponseDialog.java,onLoaderReset,@Override public void  (Loader<Cursor> loader){ adapter.swapCursor(null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,ContactStatusLoader,public  (Context context String emailAddress){ super(context); mContext=context; mEmailAddress=emailAddress; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,Result,public  (Bitmap photo int presenceResId Uri lookupUri){ mPhoto=photo; mPresenceResId=presenceResId; mLookupUri=lookupUri; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,getContactInfo,"public static Result  (Context context String emailAddress){ Uri uri=Uri.withAppendedPath(Email.CONTENT_LOOKUP_URI Uri.encode(emailAddress)); Cursor c=context.getContentResolver().query(uri PROJECTION_PHOTO_ID_PRESENCE null null null); if (c == null) { return Result.UNKNOWN; } final long photoId; final int presenceStatus; try { if (!c.moveToFirst()) { return Result.UNKNOWN; } photoId=c.getLong(COLUMN_PHOTO_ID); presenceStatus=c.getInt(COLUMN_PRESENCE); } finally { c.close(); } final int presenceStatusResId=StatusUpdates.getPresenceIconResourceId(presenceStatus); Bitmap photo=null; if (photoId != -1) { final byte[] photoData=Utility.getFirstRowBlob(context ContentUris.withAppendedId(Data.CONTENT_URI photoId) PHOTO_PROJECTION null null null PHOTO_COLUMN null); if (photoData != null) { try { photo=BitmapFactory.decodeByteArray(photoData 0 photoData.length null); } catch ( OutOfMemoryError e) { LogUtils.d(Logging.LOG_TAG ""Decoding bitmap failed with "" + e.getMessage()); } } } final Uri lookupUri=Data.getContactLookupUri(context.getContentResolver() uri); return new Result(photo presenceStatusResId lookupUri); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,isUnknown,public boolean  (){ return PRESENCE_UNKNOWN_RESOURCE_ID == mPresenceResId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,loadInBackground,@Override public Result  (){ return getContactInfo(mContext mEmailAddress); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,onReset,@Override protected void  (){ stopLoading(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,onStartLoading,@Override protected void  (){ cancelLoad(); forceLoad(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\ContactStatusLoader.java,onStopLoading,@Override protected void  (){ cancelLoad(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,AccountCheckTask,public  (Context context AccountCheckSettingsFragment callback int mode SetupDataFragment setupData){ mContext=context; mCallback=callback; mMode=mode; mSetupData=setupData; mAccount=setupData.getAccount(); if (mAccount.mHostAuthRecv != null) { mStoreHost=mAccount.mHostAuthRecv.mAddress; mCheckPassword=mAccount.mHostAuthRecv.mPassword; } else { mStoreHost=null; mCheckPassword=null; } mCheckEmail=mAccount.mEmailAddress; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,AutoDiscoverResults,public  (boolean authenticationError HostAuth hostAuth){ super(null); if (authenticationError) { mExceptionType=AUTODISCOVER_AUTHENTICATION_FAILED; } else { mExceptionType=AUTODISCOVER_AUTHENTICATION_RESULT; } mHostAuth=hostAuth; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,doInBackground,"@Override protected MessagingException  (Void... params){ try { if ((mMode & SetupDataFragment.CHECK_AUTODISCOVER) != 0) { if (isCancelled()) return null; LogUtils.d(Logging.LOG_TAG ""Begin auto-discover for %s"" mCheckEmail); publishProgress(STATE_CHECK_AU"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,getCallbackTarget,private Callback  (){ final Fragment target=getTargetFragment(); if (target instanceof Callback) { return (Callback)target; } Activity activity=getActivity(); if (activity instanceof Callback) { return (Callback)activity; } throw new IllegalStateException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,getProgressForMode,protected static int  (int checkMode){ switch (checkMode) { case SetupDataFragment.CHECK_INCOMING: return STATE_CHECK_INCOMING; case SetupDataFragment.CHECK_OUTGOING: return STATE_CHECK_OUTGOING; case SetupDataFragment.CHECK_AUTODISCOVER: return STATE_CHECK_AUTODISCOVER; } return STATE_START; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,getProgressString,protected static String  (Context context int progress){ int stringId=0; switch (progress) { case STATE_CHECK_AUTODISCOVER: stringId=R.string.account_setup_check_settings_retr_info_msg; break; case STATE_START: case STATE_CHECK_INCOMING: stringId=R.string.account_setup_check_settings_check_incoming_msg; break; case STATE_CHECK_OUTGOING: stringId=R.string.account_setup_check_settings_check_outgoing_msg; break; } if (stringId != 0) { return context.getString(stringId); } else { return null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,newInstance,public static AccountCheckSettingsFragment  (int mode){ final AccountCheckSettingsFragment f=new AccountCheckSettingsFragment(); final Bundle b=new Bundle(1); b.putInt(ARGS_MODE mode); f.setArguments(b); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCheckSettingsFragment.java,onActivityCreated,@Override public void  (Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); mAttached=true; if (mAccountCheckTask == null) { final SetupDataFragment.SetupDataContainer container=(SetupDataFragment.SetupDataContainer)getActivity(); mAc
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountFinalizeFragment.java,FinalSetupTaskLoader,public  (Context context Account account){ super(context); mAccount=account; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountFinalizeFragment.java,getAccount,Account  (){ return mAccount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountFinalizeFragment.java,loadInBackground,@Override public Boolean  (){ final ContentValues cv=new ContentValues(); cv.put(EmailContent.AccountColumns.DISPLAY_NAME mAccount.getDisplayName()); cv.put(EmailContent.AccountColumns.SENDER_NAME mAccount.getSenderName()); mAccount.update(getContext() cv
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountFinalizeFragment.java,newInstance,public static AccountFinalizeFragment  (Account account){ final AccountFinalizeFragment f=new AccountFinalizeFragment(); final Bundle args=new Bundle(1); args.putParcelable(ACCOUNT_TAG account); f.setArguments(args); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCreationFragment.java,AccountCreationFragment,public  (){ mHandler=new Handler(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,dismissCheckSettingsFragment,private void  (){ final Fragment f=getFragmentManager().findFragmentByTag(AccountCheckSettingsFragment.TAG); final Fragment d=getFragmentManager().findFragmentByTag(CheckSettingsProgressDialogFragment.TAG); getFragmentManager().beginTransaction().remove(f).remove(d).commit(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,forceBack,private void  (){ super.onBackPressed(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,getAccountServerFragment,public AccountServerBaseFragment  (){ return mAccountServerFragment; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,getIntentForIncoming,public static Intent  (final Context context final Account account){ final Intent intent=new Intent(context AccountServerSettingsActivity.class); intent.putExtra(EXTRA_ACCOUNT account); intent.putExtra(EXTRA_WHICH_SETTINGS INCOMING_SETTINGS); return intent; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,getIntentForOutgoing,public static Intent  (final Context context final Account account){ final Intent intent=new Intent(context AccountServerSettingsActivity.class); intent.putExtra(EXTRA_ACCOUNT account); intent.putExtra(EXTRA_WHICH_SETTINGS OUTGOING_SETTINGS); return intent; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,newInstanceForBack,public static UnsavedChangesDialogFragment  (){ return new UnsavedChangesDialogFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onAccountServerSaveComplete,@Override public void  (){ super.onBackPressed(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onAccountServerUIComplete,@Override public void  (int checkMode){ final Fragment checkerDialog=CheckSettingsProgressDialogFragment.newInstance(checkMode); final Fragment checkerFragment=AccountCheckSettingsFragment.newInstance(checkMode); getFragmentManager().beginTransaction().ad
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onAttachFragment,@Override public void  (Fragment fragment){ super.onAttachFragment(fragment); if (fragment instanceof AccountServerBaseFragment) { mAccountServerFragment=(AccountServerBaseFragment)fragment; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onBackPressed,@Override public void  (){ final AccountServerBaseFragment accountServerFragment=getAccountServerFragment(); if (accountServerFragment != null) { if (accountServerFragment.haveSettingsChanged()) { UnsavedChangesDialogFragment dialogFragment=UnsavedChanges
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onCheckSettingsAutoDiscoverComplete,@Override public void  (int result){ throw new IllegalStateException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onCheckSettingsComplete,@Override public void  (){ dismissCheckSettingsFragment(); final AccountServerBaseFragment f=getAccountServerFragment(); if (f != null) { f.saveSettings(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onCheckSettingsError,@Override public void  (int reason String message){ dismissCheckSettingsFragment(); CheckSettingsErrorDialogFragment.newInstance(reason message).show(getFragmentManager() CheckSettingsErrorDialogFragment.TAG); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onCheckSettingsErrorDialogEditCertificate,@Override public void  (){ final AccountServerBaseFragment f=getAccountServerFragment(); if (f instanceof AccountSetupIncomingFragment) { AccountSetupIncomingFragment asif=(AccountSetupIncomingFragment)f; asif.onCertificateRequested(); } else { LogUtils.w
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onCheckSettingsProgressDialogCancel,@Override public void  (){ dismissCheckSettingsFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onCheckSettingsSecurityRequired,@Override public void  (String hostName){ dismissCheckSettingsFragment(); SecurityRequiredDialogFragment.newInstance(hostName).show(getFragmentManager() SecurityRequiredDialogFragment.TAG); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onClick,@Override public void  (DialogInterface dialog int which){ activity.forceBack(); dismiss(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); mSetupData.setFlowMode(AuthenticatorSetupIntentHelper.FLOW_MODE_EDIT); setContentView(R.layout.account_server_settings); setFinishOnTouchOutside(false); if (savedInsta
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onCreateDialog,@Override public Dialog  (Bundle savedInstanceState){ final AccountServerSettingsActivity activity=(AccountServerSettingsActivity)getActivity(); return new AlertDialog.Builder(activity).setIconAttribute(android.R.attr.alertDialogIcon).setTitle(android.R.s
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerSettingsActivity.java,onSecurityRequiredDialogResult,@Override public void  (boolean ok){ if (ok) { final AccountServerBaseFragment f=getAccountServerFragment(); if (f != null) { f.saveSettings(); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCredentials.java,getAccountCredentialsIntent,public static Intent  (final Context context final String email final String protocol){ final Intent i=new Intent(context AccountCredentials.class); i.putExtra(EXTRA_EMAIL email); i.putExtra(EXTRA_PROTOCOL protocol); return i; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCredentials.java,onCreate,@Override public void  (final Bundle savedInstanceState){ super.onCreate(savedInstanceState); setContentView(R.layout.account_credentials); final String emailAddress=getIntent().getStringExtra(EXTRA_EMAIL); final String protocol=getIntent().getStringExtra
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCredentials.java,onCredentialsComplete,@Override public void  (Bundle results){ final Intent intent=new Intent(); intent.putExtras(results); setResult(RESULT_OK intent); finish(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountCredentials.java,onNextButton,@Override public void  (){ final AccountSetupCredentialsFragment fragment=(AccountSetupCredentialsFragment)getFragmentManager().findFragmentByTag(CREDENTIALS_FRAGMENT_TAG); final Bundle results=fragment.getCredentialResults(); onCredentialsComplete(result
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupABFragment.java,newInstance,public static AccountSetupABFragment  (final String accountEmail final String userProtocol final String providerProtocol){ final Bundle b=new Bundle(3); b.putString(ACCOUNT_EMAIL_ARG accountEmail); b.putString(USER_PROTOCOL_ARG userProtocol); b.putString(PROVIDER_PROTOCOL_ARG providerProtocol); final AccountSetupABFragment f=new AccountSetupABFragment(); f.setArguments(b); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountServerBaseFragment.java,collectUserInput,public void  (){ final int phase=collectUserInputInternal(); final Callback callback=(Callback)getActivity(); callback.onAccountServerUIComplete(phase); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,createArgs,public static Bundle  (final Account account){ final Bundle b=new Bundle(1); b.putParcelable(ARG_ACCOUNT account); return b; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onActivityCreated,@Override public void  (Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); final SimpleCursorAdapter adapter=new SimpleCursorAdapter(getActivity() R.layout.quick_response_item null new String[]{UIProvider.QuickResponseColumns.TEXT} n
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onAttach,@Override public void  (Activity activity){ super.onAttach(activity); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); Bundle args=getArguments(); mAccount=args.getParcelable(ARG_ACCOUNT); setHasOptionsMenu(true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onCreateLoader,@Override public Loader<Cursor>  (int id Bundle args){ return new CursorLoader(getActivity() mAccount.quickResponseUri UIProvider.QUICK_RESPONSE_PROJECTION null null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onCreateOptionsMenu,@Override public void  (Menu menu MenuInflater inflater){ menu.clear(); inflater.inflate(R.menu.quick_response_prefs_fragment_menu menu); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onCreateView,@Override public View  (LayoutInflater inflater ViewGroup container Bundle savedInstanceState){ final View view=inflater.inflate(R.layout.account_settings_edit_quick_responses_fragment container false); final ListView listView=UiUtilities.getView(view R.i
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onItemClick,@Override public void  (AdapterView<?> parent View view int position long id){ final Cursor c=(Cursor)listView.getItemAtPosition(position); final String quickResponseText=c.getString(c.getColumnIndex(UIProvider.QuickResponseColumns.TEXT)); final Uri uri=U
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onLoadFinished,@Override public void  (Loader<Cursor> loader Cursor data){ adapter.swapCursor(data); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onLoaderReset,@Override public void  (Loader<Cursor> loader){ adapter.swapCursor(null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsEditQuickResponsesFragment.java,onOptionsItemSelected,@Override public boolean  (MenuItem item){ if (item.getItemId() == R.id.create_new) { EditQuickResponseDialog.newInstance(null mAccount.quickResponseUri true).show(getFragmentManager() null); return true; } return super.onOptionsItemSelected(item); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,afterTextChanged,@Override public void  (Editable s){ validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,getEmail,public String  (){ return mEmailView.getText().toString().trim(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,isManualSetup,public boolean  (){ return mManualSetup; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,newInstance,public static AccountSetupBasicsFragment  (){ return new AccountSetupBasicsFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,onClick,@Override public void  (View v){ final int viewId=v.getId(); final Callback callback=(Callback)getActivity(); if (viewId == R.id.next) { mManualSetup=false; callback.onNextButton(); } else if (viewId == R.id.manual_setup) { mManualSetup=true; callback.onN
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,onCreateView,@Override public View  (LayoutInflater inflater ViewGroup container Bundle savedInstanceState){ final View view=inflateTemplatedView(inflater container R.layout.account_setup_basics_fragment -1); mEmailView=UiUtilities.getView(view R.id.account_email); mM
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,onViewStateRestored,@Override public void  (Bundle savedInstanceState){ super.onViewStateRestored(savedInstanceState); validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,setEmail,public void  (final String email){ mEmailView.setText(email); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,setManualSetupButtonVisibility,public void  (int visibility){ mManualSetupView.setVisibility(visibility); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,setNextButtonEnabled,@Override public void  (boolean enabled){ super.setNextButtonEnabled(enabled); mManualSetupView.setEnabled(enabled); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupBasicsFragment.java,validateFields,private void  (){ final String emailField=getEmail(); final Address[] addresses=Address.parse(emailField); final boolean emailValid=!TextUtils.isEmpty(emailField) && addresses.length == 1 && !TextUtils.isEmpty(addresses[0].getAddress()); setNextButtonEnabled(emailValid); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,afterTextChanged,@Override public void  (Editable s){ validatePassword(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,getClientCertificate,public String  (){ return mClientCertificateSelector.getCertificate(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,getCredentialResults,public Bundle  (){ if (mResults != null) { return mResults; } final Bundle results=new Bundle(2); results.putString(EXTRA_PASSWORD getPassword()); results.putString(EXTRA_CLIENT_CERT getClientCertificate()); return results; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,getPassword,public String  (){ if (mOfferOAuth) { return mImapPasswordText.getText().toString(); } else { return mRegularPasswordText.getText().toString(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,newInstance,public static AccountSetupCredentialsFragment  (final String email final String protocol final String clientCert final boolean passwordFailed final boolean standalone){ final AccountSetupCredentialsFragment f=new AccountSetupCredentialsFragment(); final Bundle b=new Bundle(5); b.putString(EXTRA_EMAIL email); b.putString(EXTRA_PROTOCOL protocol); b.putString(EXTRA_CLIENT_CERT clientCert); b.putBoolean(EXTRA_PASSWORD_FAILED passwordFailed); b.putBoolean(EXTRA_STANDALONE standalone); f.setArguments(b); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,onActivityCreated,@Override public void  (final Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); mAppContext=getActivity().getApplicationContext(); mEmailAddress=getArguments().getString(EXTRA_EMAIL); final String protocol=getArguments().getString(E
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,onActivityResult,@Override public void  (final int requestCode final int resultCode final Intent data){ if (requestCode == CERTIFICATE_REQUEST) { if (resultCode == Activity.RESULT_OK) { final String certAlias=data.getStringExtra(CertificateRequestor.RESULT_ALIAS); if (cer
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,onCertificateRequested,@Override public void  (){ final Intent intent=new Intent(getString(R.string.intent_exchange_cert_action)); intent.setData(CertificateRequestor.CERTIFICATE_REQUEST_URI); startActivityForResult(intent CERTIFICATE_REQUEST); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,onClick,@Override public void  (final View view){ final int viewId=view.getId(); if (viewId == R.id.sign_in_with_oauth) { if (mOauthProviders.size() > 0) { mProviderId=mOauthProviders.get(0).id; final Intent i=new Intent(getActivity() OAuthAuthenticationActivity.
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupCredentialsFragment.java,onCreateView,@Override public View  (final LayoutInflater inflater final ViewGroup container final Bundle savedInstanceState){ final boolean standalone=getArguments().getBoolean(EXTRA_STANDALONE); final View view; if (standalone) { view=inflater.inflate(R.layout.accou
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,AccountLoader,private  (Context context String accountEmail long accountId){ super(context); mObserver=new ForceLoadContentObserver(); mAccountEmail=accountEmail; mAccountId=accountId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,AccountLoaderCallbacks,private  (Context context){ mContext=context; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,buildArguments,public static Bundle  (final long accountId){ final Bundle b=new Bundle(1); b.putLong(ARG_ACCOUNT_ID accountId); return b; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,getSystemPoliciesList,"@SuppressWarnings(""unused"") private ArrayList<String>  (Policy policy){ Resources res=mContext.getResources(); ArrayList<String> policies=new ArrayList<>(); if (policy.mPasswordMode != Policy.PASSWORD_MODE_NONE) { policies.add(res.getString(R.string.polic"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,loadInBackground,@Override public Map<String Object>  (){ final Map<String Object> map=new HashMap<>(); final Account account; if (!TextUtils.isEmpty(mAccountEmail)) { account=Account.restoreAccountWithAddress(getContext() mAccountEmail mObserver); } else { account=Accoun
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,loadSettings,"private void  (){ final AccountPreferences accountPreferences=new AccountPreferences(mContext mUiAccount.getEmailAddress()); if (mInboxFolderPreferences != null) { NotificationUtils.moveNotificationSetting(accountPreferences mInboxFolderPreferences); } final String protocol=mAccount.getProtocol(mContext); if (mServiceInfo == null) { LogUtils.e(LogUtils.TAG ""Could not find service info for account %d with protocol %s"" mAccount.mId protocol); getActivity().onBackPressed(); return; } final android.accounts.Account androidAcct=mUiAccount.getAccountManagerAccount(); mAccountDescription=(EditTextPreference)findPreference(PREFERENCE_DESCRIPTION); mAccountDescription.setSummary(mAccount.getDisplayName()); mAccountDescription.setText(mAccount.getDisplayName()); mAccountDescription.setOnPreferenceChangeListener(this); mAccountName=(EditTextPreference)findPreference(PREFERENCE_NAME); String senderName=mUiAccount.getSenderName(); if (senderName == null) { senderName=""""; } mAccountName.setSummary(senderName); mAccountName.setText(senderName); mAccountName.setOnPreferenceChangeListener(this); final String accountSignature=mAccount.getSignature(); mAccountSignature=(EditTextPreference)findPreference(PREFERENCE_SIGNATURE); mAccountSignature.setText(accountSignature); mAccountSignature.setOnPreferenceChangeListener(this); SettingsUtils.updatePreferenceSummary(mAccountSignature accountSignature R.string.preferences_signature_summary_not_set); mCheckFrequency=(ListPreference)findPreference(PREFERENCE_FREQUENCY); mCheckFrequency.setEntries(mServiceInfo.syncIntervalStrings); mCheckFrequency.setEntryValues(mServiceInfo.syncIntervals); if (mServiceInfo.syncContacts || mServiceInfo.syncCalendar) { mCheckFrequency.setValue(String.valueOf(mAccount.getSyncInterval())); } else { boolean synced=ContentResolver.getSyncAutomatically(androidAcct EmailContent.AUTHORITY); if (synced) { mCheckFrequency.setValue(String.valueOf(mAccount.getSyncInterval())); } else { mCheckFrequency.setValue(String.valueOf(Account.CHECK_INTERVAL_NEVER)); } } mCheckFrequency.setSummary(mCheckFrequency.getEntry()); mCheckFrequency.setOnPreferenceChangeListener(this); final Preference quickResponsePref=findPreference(PREFERENCE_QUICK_RESPONSES); if (quickResponsePref != null) { quickResponsePref.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){ @Override public boolean onPreferenceClick( Preference preference){ onEditQuickResponses(mUiAccount); return true; } } ); } final PreferenceCategory dataUsageCategory=(PreferenceCategory)findPreference(PREFERENCE_CATEGORY_DATA_USAGE); if (mServiceInfo.offerLookback) { if (mSyncWindow == null) { mSyncWindow=new ListPreference(mContext); mSyncWindow.setKey(PREFERENCE_SYNC_WINDOW); dataUsageCategory.addPreference(mSyncWindow); } mSyncWindow.setTitle(R.string.account_setup_options_mail_window_label); mSyncWindow.setValue(String.valueOf(mAccount.getSyncLookback())); final int maxLookback; if (mAccount.mPolicy != null) { maxLookback=mAccount.mPolicy.mMaxEmailLookback; } else { maxLookback=0; } MailboxSettings.setupLookbackPreferenceOptions(mContext mSyncWindow maxLookback false); mSyncWindow.setOrder(2); mSyncWindow.setOnPreferenceChangeListener(this); if (mSyncSettings == null) { mSyncSettings=new Preference(mContext); mSyncSettings.setKey(PREFERENCE_SYNC_SETTINGS); dataUsageCategory.addPreference(mSyncSettings); } mSyncSettings.setTitle(R.string.folder_sync_settings_pref_title); mSyncSettings.setOrder(3); } final PreferenceCategory folderPrefs=(PreferenceCategory)findPreference(PREFERENCE_SYSTEM_FOLDERS); if (folderPrefs != null) { if (mServiceInfo.requiresSetup) { Preference trashPreference=findPreference(PREFERENCE_SYSTEM_FOLDERS_TRASH); Intent i=new Intent(mContext FolderPickerActivity.class); Uri uri=EmailContent.CONTENT_URI.buildUpon().appendQueryParameter(""account"" Long.toString(mAccount.getId())).build(); i.setData(uri); i.putExtra(FolderPickerActivity.MAILBOX_TYPE_EXTRA Mailbox.TYPE_TRASH); trashPreference.setIntent(i); Preference sentPreference=findPreference(PREFERENCE_SYSTEM_FOLDERS_SENT); i=new Intent(mContext FolderPickerActivity.class); i.setData(uri); i.putExtra(FolderPickerActivity.MAILBOX_TYPE_EXTRA Mailbox.TYPE_SENT); sentPreference.setIntent(i); } else { getPreferenceScreen().removePreference(folderPrefs); } } final CheckBoxPreference backgroundAttachments=(CheckBoxPreference)findPreference(PREFERENCE_BACKGROUND_ATTACHMENTS); if (backgroundAttachments != null) { if (!mServiceInfo.offerAttachmentPreload) { dataUsageCategory.removePreference(backgroundAttachments); } else { backgroundAttachments.setChecked(0 != (mAccount.getFlags() & Account.FLAGS_BACKGROUND_ATTACHMENTS)); backgroundAttachments.setOnPreferenceChangeListener(this); } } final PreferenceCategory notificationsCategory=(PreferenceCategory)findPreference(PREFERENCE_CATEGORY_NOTIFICATIONS); if (mInboxFolderPreferences != null) { final CheckBoxPreference inboxNotify=(CheckBoxPreference)findPreference(FolderPreferences.PreferenceKeys.NOTIFICATIONS_ENABLED); inboxNotify.setChecked(mInboxFolderPreferences.areNotificationsEnabled()); inboxNotify.setOnPreferenceChangeListener(this); mInboxRingtone=findPreference(FolderPreferences.PreferenceKeys.NOTIFICATION_RINGTONE); final String ringtoneUri=mInboxFolderPreferences.getNotificationRingtoneUri(); if (!TextUtils.isEmpty(ringtoneUri)) { mRingtone=RingtoneManager.getRingtone(getActivity() Uri.parse(ringtoneUri)); } setRingtoneSummary(); mInboxRingtone.setOnPreferenceChangeListener(this); mInboxRingtone.setOnPreferenceClickListener(new OnPreferenceClickListener(){ @Override public boolean onPreferenceClick( final Preference preference){ showRingtonePicker(); return true; } } ); notificationsCategory.setEnabled(true); mInboxVibrate=(CheckBoxPreference)findPreference(FolderPreferences.PreferenceKeys.NOTIFICATION_VIBRATE); if (mInboxVibrate != null) { mInboxVibrate.setChecked(mInboxFolderPreferences.isNotificationVibrateEnabled()); Vibrator vibrator=(Vibrator)mContext.getSystemService(Context.VIBRATOR_SERVICE); if (vibrator.hasVibrator()) { mInboxVibrate.setOnPreferenceChangeListener(this); } else { notificationsCategory.removePreference(mInboxVibrate); mInboxVibrate=null; } } } else { notificationsCategory.setEnabled(false); } final Preference retryAccount=findPreference(PREFERENCE_POLICIES_RETRY_ACCOUNT); final PreferenceCategory policiesCategory=(PreferenceCategory)findPreference(PREFERENCE_CATEGORY_POLICIES); if (policiesCategory != null) { getPreferenceScreen().removePreference(policiesCategory); } if (retryAccount != null) { retryAccount.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){ @Override public boolean onPreferenceClick( Preference preference){ SecurityPolicy.setAccountHoldFlag(mContext mAccount false); if (policiesCategory != null) { policiesCategory.removePreference(retryAccount); } return true; } } ); } findPreference(PREFERENCE_INCOMING).setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){ @Override public boolean onPreferenceClick( Preference preference){ onIncomingSettings(mAccount); return true; } } ); final Preference prefOutgoing=findPreference(PREFERENCE_OUTGOING); if (prefOutgoing != null) { if (mServiceInfo.usesSmtp && mAccount.mHostAuthSend != null) { prefOutgoing.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){ @Override public boolean onPreferenceClick( Preference preference){ onOutgoingSettings(mAccount); return true; } } ); } else { if (mServiceInfo.usesSmtp) { LogUtils.e(LogUtils.TAG ""Account %d has a bad outbound hostauth"" mAccount.getId()); } PreferenceCategory serverCategory=(PreferenceCategory)findPreference(PREFERENCE_CATEGORY_SERVER); serverCategory.removePreference(prefOutgoing); } } final CheckBoxPreference syncContacts=(CheckBoxPreference)findPreference(PREFERENCE_SYNC_CONTACTS); final CheckBoxPreference syncCalendar=(CheckBoxPreference)findPreference(PREFERENCE_SYNC_CALENDAR); final CheckBoxPreference syncEmail=(CheckBoxPreference)findPreference(PREFERENCE_SYNC_EMAIL); if (syncContacts != null && syncCalendar != null && syncEmail != null) { if (mServiceInfo.syncContacts || mServiceInfo.syncCalendar) { if (mServiceInfo.syncContacts) { syncContacts.setChecked(ContentResolver.getSyncAutomatically(androidAcct ContactsContract.AUTHORITY)); syncContacts.setOnPreferenceChangeListener(this); } else { syncContacts.setChecked(false); syncContacts.setEnabled(false); } if (mServiceInfo.syncCalendar) { syncCalendar.setChecked(ContentResolver.getSyncAutomatically(androidAcct CalendarContract.AUTHORITY)); syncCalendar.setOnPreferenceChangeListener(this); } else { syncCalendar.setChecked(false); syncCalendar.setEnabled(false); } syncEmail.setChecked(ContentResolver.getSyncAutomatically(androidAcct EmailContent.AUTHORITY)); syncEmail.setOnPreferenceChangeListener(this); } else { dataUsageCategory.removePreference(syncContacts); dataUsageCategory.removePreference(syncCalendar); dataUsageCategory.removePreference(syncEmail); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onActivityCreated,@Override public void  (Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); final Bundle args=new Bundle(1); if (!TextUtils.isEmpty(mAccountEmail)) { args.putString(AccountLoaderCallbacks.ARG_ACCOUNT_EMAIL mAccountEmail); } else { arg
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onActivityResult,@Override public void  (int requestCode int resultCode Intent data){ switch (requestCode) { case RINGTONE_REQUEST_CODE: if (resultCode == Activity.RESULT_OK && data != null) { Uri uri=data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI); set
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onAttach,@Override public void  (Activity activity){ super.onAttach(activity); mContext=activity; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); setHasOptionsMenu(true); addPreferencesFromResource(R.xml.account_settings_preferences); if (!getResources().getBoolean(R.bool.quickresponse_supported)) { final Prefer
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onCreateLoader,@Override public Loader<Map<String Object>>  (int id Bundle args){ return new AccountLoader(mContext args.getString(ARG_ACCOUNT_EMAIL) args.getLong(ARG_ACCOUNT_ID)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onCreateOptionsMenu,@Override public void  (Menu menu MenuInflater inflater){ menu.clear(); inflater.inflate(R.menu.settings_fragment_menu menu); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onDiscardResult,@Override protected void  (Map<String Object> result){ final Account account=(Account)result.get(RESULT_KEY_ACCOUNT); if (account != null) { if (account.mPolicy != null) { account.mPolicy.close(getContext()); } account.close(getContext()); } final Cursor 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onEditQuickResponses,public void  (com.android.mail.providers.Account account){ final Bundle args=AccountSettingsEditQuickResponsesFragment.createArgs(account); final PreferenceActivity activity=(PreferenceActivity)getActivity(); activity.startPreferencePanel(AccountSettingsEditQuickResponsesFragment.class.getName() args R.string.account_settings_edit_quick_responses_label null null 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onIncomingSettings,public void  (Account account){ final Intent intent=AccountServerSettingsActivity.getIntentForIncoming(getActivity() account); getActivity().startActivity(intent); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onLoadFinished,@Override public void  (Loader<Map<String Object>> loader Map<String Object> data){ final Activity activity=getActivity(); if (activity == null) { return; } if (data == null) { activity.finish(); return; } mUiAccount=(com.android.mail.providers.Account)da
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onOutgoingSettings,public void  (Account account){ final Intent intent=AccountServerSettingsActivity.getIntentForOutgoing(getActivity() account); getActivity().startActivity(intent); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onPreferenceChange,@Override public boolean  (Preference preference Object newValue){ final String key=preference.getKey(); final ContentValues cv=new ContentValues(1); if (key.equals(PREFERENCE_DESCRIPTION)) { String summary=newValue.toString().trim(); if (TextUtils.isEmpt
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onPreferenceClick,@Override public boolean  (Preference preference){ onOutgoingSettings(mAccount); return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onPreferenceTreeClick,@Override public boolean  (PreferenceScreen preferenceScreen @NonNull Preference preference){ final String key=preference.getKey(); if (key.equals(PREFERENCE_SYNC_SETTINGS)) { startActivity(MailboxSettings.getIntent(getActivity() mUiAccount.fullFolderList
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,onSaveInstanceState,@Override public void  (@NonNull Bundle outstate){ super.onSaveInstanceState(outstate); if (mCheckFrequency != null) { outstate.putCharSequenceArray(SAVESTATE_SYNC_INTERVAL_STRINGS mCheckFrequency.getEntries()); outstate.putCharSequenceArray(SAVESTATE_SYN
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,setPolicyListSummary,"@SuppressWarnings(""unused"") private void  (ArrayList<String> policies String policiesToAdd String preferenceName){ Policy.addPolicyStringToList(policiesToAdd policies); if (policies.size() > 0) { Preference p=findPreference(preferenceName); StringBuilder "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,setRingtone,"private void  (Uri ringtone){ if (ringtone != null) { mInboxFolderPreferences.setNotificationRingtoneUri(ringtone.toString()); mRingtone=RingtoneManager.getRingtone(getActivity() ringtone); } else { mInboxFolderPreferences.setNotificationRingtoneUri(""""); mRingtone=null; } setRingtoneSummary(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,setRingtoneSummary,private void  (){ final String summary=mRingtone != null ? mRingtone.getTitle(mContext) : mContext.getString(R.string.silent_ringtone); mInboxRingtone.setSummary(summary); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSettingsFragment.java,showRingtonePicker,private void  (){ Intent intent=new Intent(RingtoneManager.ACTION_RINGTONE_PICKER); final String ringtoneUri=mInboxFolderPreferences.getNotificationRingtoneUri(); if (!TextUtils.isEmpty(ringtoneUri)) { intent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI Uri.parse(ringtoneUri)); } intent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT true); intent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI Settings.System.DEFAULT_NOTIFICATION_URI); intent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT true); intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE RingtoneManager.TYPE_NOTIFICATION); startActivityForResult(intent RINGTONE_REQUEST_CODE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupActivity.java,getSetupData,@Override public SetupDataFragment  (){ return mSetupData; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupActivity.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); if (savedInstanceState == null) { final Bundle b=getIntent().getExtras(); if (b != null) { mSetupData=b.getParcelable(SetupDataFragment.EXTRA_SETUP_DATA); if (mSetupDa
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,collectCredentials,private void  (){ final AccountSetupCredentialsFragment f=(AccountSetupCredentialsFragment)getContentFragment(); final Bundle results=f.getCredentialResults(); mSetupData.setCredentialResults(results); final Account account=mSetupData.getAccount(); final HostAuth recvAuth=account.getOrCreateHostAuthRecv(this); AccountSetupCredentialsFragment.populateHostAuthWithResults(this recvAuth mSetupData.getCredentialResults()); mSetupData.setIncomingCredLoaded(true); final EmailServiceUtils.EmailServiceInfo info=mSetupData.getIncomingServiceInfo(this); if (info.usesSmtp) { final HostAuth sendAuth=account.getOrCreateHostAuthSend(this); AccountSetupCredentialsFragment.populateHostAuthWithResults(this sendAuth mSetupData.getCredentialResults()); mSetupData.setOutgoingCredLoaded(true); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,destroyAccountCreationFragment,"@Override public void  (){ dismissCreateAccountDialog(); final Fragment f=getFragmentManager().findFragmentByTag(AccountCreationFragment.TAG); if (f == null) { LogUtils.wtf(LogUtils.TAG ""Couldn't find AccountCreationFragment to destroy""); } getFragmentMan"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,dismissCheckSettingsFragment,private void  (){ final Fragment f=getFragmentManager().findFragmentByTag(AccountCheckSettingsFragment.TAG); final Fragment d=getFragmentManager().findFragmentByTag(CheckSettingsProgressDialogFragment.TAG); getFragmentManager().beginTransaction().remove(f).remove(d).commit(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,dismissCreateAccountDialog,protected void  (){ final DialogFragment f=(DialogFragment)getFragmentManager().findFragmentByTag(CreateAccountDialogFragment.TAG); if (f != null) { f.dismiss(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,finish,"@Override public void  (){ if (mReportAccountAuthenticatorError) { if (mAccountAuthenticatorResponse != null) { mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED ""canceled""); mAccountAuthenticatorResponse=null; } } super.finish(); }"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,finishAutoSetup,"private boolean  (){ final String email=mSetupData.getEmail(); try { mProvider.expandTemplates(email); final String primaryProtocol=HostAuth.getProtocolFromString(mProvider.incomingUri); EmailServiceUtils.EmailServiceInfo info=EmailServiceUtils.getServiceInfo(this primaryProtocol); if (!info.isGmailStub && !EmailServiceUtils.isServiceAvailable(this info.protocol)) { LogUtils.d(LogUtils.TAG ""Protocol %s not available  using alternate"" info.protocol); mProvider.expandAlternateTemplates(email); final String alternateProtocol=HostAuth.getProtocolFromString(mProvider.incomingUri); info=EmailServiceUtils.getServiceInfo(this alternateProtocol); } final Account account=mSetupData.getAccount(); final HostAuth recvAuth=account.getOrCreateHostAuthRecv(this); recvAuth.setHostAuthFromString(mProvider.incomingUri); recvAuth.setUserName(mProvider.incomingUsername); recvAuth.mPort=((recvAuth.mFlags & HostAuth.FLAG_SSL) != 0) ? info.portSsl : info.port; if (info.usesSmtp) { final HostAuth sendAuth=account.getOrCreateHostAuthSend(this); sendAuth.setHostAuthFromString(mProvider.outgoingUri); sendAuth.setUserName(mProvider.outgoingUsername); } populateSetupData(mOwnerName email); final String duplicateAccountName=mExistingAccountsMap != null ? mExistingAccountsMap.get(email) : null; if (duplicateAccountName != null) { showDuplicateAccountDialog(duplicateAccountName); return false; } } catch ( URISyntaxException e) { mSkipAutoDiscover=false; mPreConfiguredFailed=true; } return true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,getContentFragment,private AccountSetupFragment  (){ return (AccountSetupFragment)getFragmentManager().findFragmentByTag(CONTENT_FRAGMENT_TAG); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,initiateAccountCreation,"private void  (){ mIsProcessing=true; getContentFragment().setNextButtonEnabled(false); final Account account=mSetupData.getAccount(); if (account.mHostAuthRecv == null) { throw new IllegalStateException(""in AccountSetupOptions with null mHostAuthRecv""); } final AccountSetupOptionsFragment fragment=(AccountSetupOptionsFragment)getContentFragment(); if (fragment == null) { throw new IllegalStateException(""Fragment missing!""); } account.setDisplayName(account.getEmailAddress()); int newFlags=account.getFlags() & ~(Account.FLAGS_BACKGROUND_ATTACHMENTS); final EmailServiceUtils.EmailServiceInfo serviceInfo=mSetupData.getIncomingServiceInfo(this); if (serviceInfo.offerAttachmentPreload && fragment.getBackgroundAttachmentsValue()) { newFlags|=Account.FLAGS_BACKGROUND_ATTACHMENTS; } final HostAuth hostAuth=account.getOrCreateHostAuthRecv(this); if (hostAuth.mProtocol.equals(getString(R.string.protocol_eas))) { try { final double protocolVersionDouble=Double.parseDouble(account.mProtocolVersion); if (protocolVersionDouble >= 12.0) { newFlags|=Account.FLAGS_SUPPORTS_SMART_FORWARD | Account.FLAGS_SUPPORTS_GLOBAL_SEARCH | Account.FLAGS_SUPPORTS_SEARCH; } } catch ( NumberFormatException e) { LogUtils.wtf(LogUtils.TAG e ""Exception thrown parsing the protocol version.""); } } account.setFlags(newFlags); account.setSyncInterval(fragment.getCheckFrequencyValue()); final Integer syncWindowValue=fragment.getAccountSyncWindowValue(); if (syncWindowValue != null) { account.setSyncLookback(syncWindowValue); } if (mSetupData.getPolicy() != null) { account.mFlags|=Account.FLAGS_SECURITY_HOLD; account.mPolicy=mSetupData.getPolicy(); } final boolean syncEmail=fragment.getSyncEmailValue(); final boolean syncCalendar=serviceInfo.syncCalendar && fragment.getSyncCalendarValue(); final boolean syncContacts=serviceInfo.syncContacts && fragment.getSyncContactsValue(); final boolean enableNotifications=fragment.getNotifyValue(); final Fragment f=AccountCreationFragment.newInstance(account syncEmail syncCalendar syncContacts enableNotifications); final FragmentTransaction ft=getFragmentManager().beginTransaction(); ft.add(f AccountCreationFragment.TAG); ft.commit(); showCreateAccountDialog(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,initiateAccountFinalize,private void  (){ mIsProcessing=true; getContentFragment().setNextButtonEnabled(false); AccountSetupNamesFragment fragment=(AccountSetupNamesFragment)getContentFragment(); final Account account=mSetupData.getAccount(); final String description=fragment.getDescription(); if (!TextUtils.isEmpty(description)) { account.setDisplayName(description); } account.setSenderName(fragment.getSenderName()); final Fragment f=AccountFinalizeFragment.newInstance(account); final FragmentTransaction ft=getFragmentManager().beginTransaction(); ft.add(f AccountFinalizeFragment.TAG); ft.commit(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,initiateAutoDiscover,private void  (){ initiateCheckSettingsFragment(SetupDataFragment.CHECK_AUTODISCOVER); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,initiateCheckSettingsFragment,private void  (int checkMode){ final Fragment f=AccountCheckSettingsFragment.newInstance(checkMode); final Fragment d=CheckSettingsProgressDialogFragment.newInstance(checkMode); getFragmentManager().beginTransaction().add(f AccountCheckSettingsFragment.TAG).add(d CheckSettingsProgressDialogFragment.TAG).commit(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,newInstance,public static CreateAccountDialogFragment  (){ return new CreateAccountDialogFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onABProtocolDisambiguated,@Override public void  (String chosenProtocol){ if (!TextUtils.equals(mSetupData.getIncomingProtocol(this) chosenProtocol)) { mIsPreConfiguredProvider=false; mSetupData.setIncomingProtocol(this chosenProtocol); final Account account=mSetupData.getAccount(
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onAccountCreationFragmentComplete,@Override public void  (){ destroyAccountCreationFragment(); if (mAccountAuthenticatorResponse != null) { final EmailServiceUtils.EmailServiceInfo info=mSetupData.getIncomingServiceInfo(this); final Bundle b=new Bundle(2); b.putString(AccountManager.KEY_A
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onAccountFinalizeFragmentComplete,@Override public void  (){ finish(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onBackPressed,@Override public void  (){ if (mIsProcessing) { return; } if (mState == STATE_NAMES) { finish(); } else { super.onBackPressed(); } resetStateFromCurrentFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onBasicsComplete,"private boolean  (){ final AccountSetupBasicsFragment f=(AccountSetupBasicsFragment)getContentFragment(); final String email=f.getEmail(); mSetupData.setIncomingProtocol(this null); if (!TextUtils.equals(email mSetupData.getEmail())) { mPasswordFailed=false; } mSetupData.setEmail(email); final String[] emailParts=email.split(""@""); final String domain=emailParts[1].trim(); mProvider=AccountSettingsUtils.findProviderForDomain(this domain); if (mProvider != null) { mIsPreConfiguredProvider=true; if (mProvider.note != null) { final AccountSetupNoteDialogFragment dialogFragment=AccountSetupNoteDialogFragment.newInstance(mProvider.note); dialogFragment.show(getFragmentManager() AccountSetupNoteDialogFragment.TAG); return false; } else { return finishAutoSetup(); } } else { mIsPreConfiguredProvider=false; final String existingAccountName=mExistingAccountsMap != null ? mExistingAccountsMap.get(email) : null; if (!TextUtils.isEmpty(existingAccountName)) { showDuplicateAccountDialog(existingAccountName); return false; } else { populateSetupData(mOwnerName email); mSkipAutoDiscover=false; return true; } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCheckSettingsAutoDiscoverComplete,@Override public void  (int result){ dismissCheckSettingsFragment(); proceed(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCheckSettingsComplete,@Override public void  (){ mPreConfiguredFailed=false; mPasswordFailed=false; dismissCheckSettingsFragment(); proceed(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCheckSettingsError,@Override public void  (int reason String message){ if (reason == CheckSettingsErrorDialogFragment.REASON_AUTHENTICATION_FAILED || reason == CheckSettingsErrorDialogFragment.REASON_CERTIFICATE_REQUIRED) { mPasswordFailed=true; } dismissCheckSettingsFragme
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCheckSettingsErrorDialogEditCertificate,@Override public void  (){ if (mState == STATE_CHECKING_PRECONFIGURED) { mPreConfiguredFailed=true; proceed(); } else { resetStateFromCurrentFragment(); } final AccountSetupIncomingFragment f=(AccountSetupIncomingFragment)getContentFragment(); f.onCertifi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCheckSettingsErrorDialogEditSettings,@Override public void  (){ if (mState == STATE_CHECKING_PRECONFIGURED || mState == STATE_AUTO_DISCOVER) { mPreConfiguredFailed=true; proceed(); } else { resetStateFromCurrentFragment(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCheckSettingsProgressDialogCancel,@Override public void  (){ dismissCheckSettingsFragment(); resetStateFromCurrentFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCheckSettingsSecurityRequired,@Override public void  (String hostName){ dismissCheckSettingsFragment(); final DialogFragment f=SecurityRequiredDialogFragment.newInstance(hostName); f.show(getFragmentManager() SecurityRequiredDialogFragment.TAG); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onChooseProtocol,@Override public void  (String protocol){ mSetupData.setIncomingProtocol(this protocol); final Account account=mSetupData.getAccount(); setDefaultsForProtocol(account); proceed(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onClick,@Override public void  (DialogInterface dialog int which){ getActivity().finish(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); final Intent intent=getIntent(); final String action=intent.getAction(); if (INTENT_FORCE_CREATE_ACCOUNT == null) { INTENT_FORCE_CREATE_ACCOUNT=getString(R.string.inte
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCreateDialog,@Override public Dialog  (Bundle savedInstanceState){ final String message=getString(R.string.account_setup_failed_dlg_auth_message R.string.system_account_create_failed); setCancelable(false); return new AlertDialog.Builder(getActivity()).setIconAttribut
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCreateLoader,@Override public Loader<Cursor>  (final int id final Bundle args){ return new CursorLoader(AccountSetupFinal.this MailAppProvider.getAccountsUri() new String[]{UIProvider.AccountColumns.ACCOUNT_MANAGER_NAME UIProvider.AccountColumns.NAME} null null null);
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onCredentialsComplete,@Override public void  (Bundle results){ proceed(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onDuplicateAccountDialogDismiss,@Override public void  (){ resetStateFromCurrentFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onIncomingComplete,private void  (){ AccountSetupIncomingFragment f=(AccountSetupIncomingFragment)getContentFragment(); f.collectUserInput(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onLoadFinished,@Override public void  (final Loader<Cursor> loader final Cursor data){ if (data == null || !data.moveToFirst()) { mExistingAccountsMap=null; return; } mExistingAccountsMap=new HashMap<>(); final int emailColumnIndex=data.getColumnIndex(UIProvider.Account
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onLoaderReset,@Override public void  (final Loader<Cursor> loader){ mExistingAccountsMap=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onNextButton,@Override public void  (){ if (!mIsProcessing) { proceed(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onNoteDialogCancel,@Override public void  (){ resetStateFromCurrentFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onNoteDialogComplete,@Override public void  (){ finishAutoSetup(); proceed(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onOutgoingComplete,private void  (){ AccountSetupOutgoingFragment f=(AccountSetupOutgoingFragment)getContentFragment(); f.collectUserInput(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onResume,@Override protected void  (){ super.onResume(); if (mForceCreate) { mForceCreate=false; proceed(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onSaveInstanceState,@Override public void  (@NonNull Bundle outState){ super.onSaveInstanceState(outState); outState.putBoolean(SAVESTATE_KEY_IS_PROCESSING mIsProcessing); outState.putInt(SAVESTATE_KEY_STATE mState); outState.putSerializable(SAVESTATE_KEY_PROVIDER mProvider)
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onSecurityRequiredDialogResult,@Override public void  (boolean ok){ if (ok) { proceed(); } else { resetStateFromCurrentFragment(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onStart,@Override protected void  (){ super.onStart(); Analytics.getInstance().activityStart(this); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,onStop,@Override protected void  (){ super.onStop(); Analytics.getInstance().activityStop(this); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,populateHostAuthsFromSetupData,"private void  (){ final String email=mSetupData.getEmail(); final String[] emailParts=email.split(""@""); final String domain=emailParts[1]; final Account account=mSetupData.getAccount(); final EmailServiceUtils.EmailServiceInfo info=mSetupData.getIncomingServiceInfo(this); final HostAuth recvAuth=account.getOrCreateHostAuthRecv(this); recvAuth.setUserName(email); recvAuth.setConnection(mSetupData.getIncomingProtocol() domain HostAuth.PORT_UNKNOWN info.offerTls ? HostAuth.FLAG_TLS : HostAuth.FLAG_SSL); AccountSetupCredentialsFragment.populateHostAuthWithResults(this recvAuth mSetupData.getCredentialResults()); mSetupData.setIncomingCredLoaded(true); if (info.usesSmtp) { final HostAuth sendAuth=account.getOrCreateHostAuthSend(this); sendAuth.setUserName(email); sendAuth.setConnection(HostAuth.LEGACY_SCHEME_SMTP domain HostAuth.PORT_UNKNOWN HostAuth.FLAG_TLS); AccountSetupCredentialsFragment.populateHostAuthWithResults(this sendAuth mSetupData.getCredentialResults()); mSetupData.setOutgoingCredLoaded(true); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,populateSetupData,private void  (String senderName String senderEmail){ final Account account=mSetupData.getAccount(); account.setSenderName(senderName); account.setEmailAddress(senderEmail); account.setDisplayName(senderEmail); setDefaultsForProtocol(account); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,possiblyDivertToGmail,"private boolean  (){ final EmailServiceUtils.EmailServiceInfo info=mSetupData.getIncomingServiceInfo(this); if (TextUtils.equals(info.protocol ""gmail"")) { final Bundle options=new Bundle(1); options.putBoolean(""allowSkip"" false); AccountManager.get(this).addAccount(""com.google"" ""mail"" null options this null null); finish(); return true; } return false; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,proceed,"protected void  (){ mIsProcessing=false; final AccountSetupFragment oldContentFragment=getContentFragment(); if (oldContentFragment != null) { oldContentFragment.setNextButtonEnabled(true); } getFragmentManager().executePendingTransactions(); switch (mState) { case STATE_BASICS: final boolean advance=onBasicsComplete(); if (!advance) { mState=STATE_BASICS_POST; break; } case STATE_BASICS_POST: if (shouldDivertToManual()) { mSkipAutoDiscover=true; mIsPreConfiguredProvider=false; mState=STATE_TYPE; } else { mSkipAutoDiscover=false; if (mIsPreConfiguredProvider) { if (!TextUtils.isEmpty(mSetupData.getAmProtocol()) && !TextUtils.equals(mSetupData.getAmProtocol() mSetupData.getIncomingProtocol(this))) { mState=STATE_AB; } else { mState=STATE_CREDENTIALS; if (possiblyDivertToGmail()) { return; } } } else { final String amProtocol=mSetupData.getAmProtocol(); if (!TextUtils.isEmpty(amProtocol)) { mSetupData.setIncomingProtocol(this amProtocol); final Account account=mSetupData.getAccount(); setDefaultsForProtocol(account); mState=STATE_CREDENTIALS; } else { mState=STATE_TYPE; } } } updateContentFragment(true); break; case STATE_TYPE: mState=STATE_CREDENTIALS; updateContentFragment(true); break; case STATE_AB: if (possiblyDivertToGmail()) { return; } mState=STATE_CREDENTIALS; updateContentFragment(true); break; case STATE_CREDENTIALS: collectCredentials(); if (mIsPreConfiguredProvider) { mState=STATE_CHECKING_PRECONFIGURED; initiateCheckSettingsFragment(SetupDataFragment.CHECK_INCOMING | SetupDataFragment.CHECK_OUTGOING); } else { populateHostAuthsFromSetupData(); if (mSkipAutoDiscover) { mState=STATE_MANUAL_INCOMING; updateContentFragment(true); } else { mState=STATE_AUTO_DISCOVER; initiateAutoDiscover(); } } break; case STATE_CHECKING_PRECONFIGURED: if (mPreConfiguredFailed) { if (mPasswordFailed) { FragmentManager fm=getFragmentManager(); fm.popBackStackImmediate(CREDENTIALS_BACKSTACK_TAG 0); final AccountSetupCredentialsFragment f=(AccountSetupCredentialsFragment)getContentFragment(); f.setPasswordFailed(mPasswordFailed); resetStateFromCurrentFragment(); } else { mState=STATE_MANUAL_INCOMING; updateContentFragment(true); } } else { mState=STATE_OPTIONS; updateContentFragment(true); } break; case STATE_AUTO_DISCOVER: mState=STATE_MANUAL_INCOMING; updateContentFragment(true); break; case STATE_MANUAL_INCOMING: onIncomingComplete(); mState=STATE_CHECKING_INCOMING; initiateCheckSettingsFragment(SetupDataFragment.CHECK_INCOMING); break; case STATE_CHECKING_INCOMING: final EmailServiceUtils.EmailServiceInfo serviceInfo=mSetupData.getIncomingServiceInfo(this); if (serviceInfo.usesSmtp) { mState=STATE_MANUAL_OUTGOING; } else { mState=STATE_OPTIONS; } updateContentFragment(true); break; case STATE_MANUAL_OUTGOING: onOutgoingComplete(); mState=STATE_CHECKING_OUTGOING; initiateCheckSettingsFragment(SetupDataFragment.CHECK_OUTGOING); break; case STATE_CHECKING_OUTGOING: mState=STATE_OPTIONS; updateContentFragment(true); break; case STATE_OPTIONS: mState=STATE_CREATING; initiateAccountCreation(); break; case STATE_CREATING: mState=STATE_NAMES; updateContentFragment(true); if (mSetupData.getFlowMode() == AuthenticatorSetupIntentHelper.FLOW_MODE_FORCE_CREATE) { getFragmentManager().executePendingTransactions(); initiateAccountFinalize(); } break; case STATE_NAMES: initiateAccountFinalize(); break; case STATE_FINALIZE: finish(); break; default : LogUtils.wtf(LogUtils.TAG ""Unknown state %d"" mState); break; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,resetStateFromCurrentFragment,private void  (){ AccountSetupFragment f=getContentFragment(); mState=f.getState(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,setAccount,@Override public void  (Account account){ mSetupData.setAccount(account); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,setDefaultsForProtocol,public void  (Account account){ final EmailServiceUtils.EmailServiceInfo info=mSetupData.getIncomingServiceInfo(this); if (info == null) return; account.mSyncInterval=info.defaultSyncInterval; account.mSyncLookback=info.defaultLookback; if (info.offerLocalDeletes) { account.setDeletePolicy(info.defaultLocalDeletes); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,shouldDivertToManual,private boolean  (){ final AccountSetupBasicsFragment f=(AccountSetupBasicsFragment)getContentFragment(); return f.isManualSetup(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,showCreateAccountDialog,protected void  (){ CreateAccountDialogFragment.newInstance().show(getFragmentManager() CreateAccountDialogFragment.TAG); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,showCreateAccountErrorDialog,@Override public void  (){ new CreateAccountErrorDialogFragment().show(getFragmentManager() null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,showDuplicateAccountDialog,private void  (final String existingAccountName){ final DuplicateAccountDialogFragment dialogFragment=DuplicateAccountDialogFragment.newInstance(existingAccountName); dialogFragment.show(getFragmentManager() DuplicateAccountDialogFragment.TAG); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFinal.java,updateContentFragment,"private void  (boolean addToBackstack){ final AccountSetupFragment f; String backstackTag=null; switch (mState) { case STATE_BASICS: f=AccountSetupBasicsFragment.newInstance(); break; case STATE_TYPE: f=AccountSetupTypeFragment.newInstance(); break; case STATE_AB: f=AccountSetupABFragment.newInstance(mSetupData.getEmail() mSetupData.getAmProtocol() mSetupData.getIncomingProtocol(this)); break; case STATE_CREDENTIALS: f=AccountSetupCredentialsFragment.newInstance(mSetupData.getEmail() mSetupData.getIncomingProtocol(this) mSetupData.getClientCert(this) mPasswordFailed false); backstackTag=CREDENTIALS_BACKSTACK_TAG; break; case STATE_MANUAL_INCOMING: f=AccountSetupIncomingFragment.newInstance(false); break; case STATE_MANUAL_OUTGOING: f=AccountSetupOutgoingFragment.newInstance(false); break; case STATE_OPTIONS: f=AccountSetupOptionsFragment.newInstance(); break; case STATE_NAMES: f=AccountSetupNamesFragment.newInstance(); break; default : throw new IllegalStateException(""Incorrect state "" + mState); } f.setState(mState); final FragmentTransaction ft=getFragmentManager().beginTransaction(); ft.setCustomAnimations(R.anim.fade_in R.anim.fade_out R.anim.fade_in R.anim.fade_out); ft.replace(R.id.setup_fragment_container f CONTENT_FRAGMENT_TAG); if (addToBackstack) { ft.addToBackStack(backstackTag); } ft.commit(); final InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); final View fragment_container=findViewById(R.id.setup_fragment_container); imm.hideSoftInputFromWindow(fragment_container.getWindowToken() 0); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,SaveSettingsLoader,private  (Context context SetupDataFragment setupData boolean settingsMode){ super(context); mSetupData=setupData; mSettingsMode=settingsMode; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,afterTextChanged,@Override public void  (Editable s){ validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,collectUserInputInternal,@Override public int  (){ final Account account=mSetupData.getAccount(); if (mDeletePolicyView.getVisibility() == View.VISIBLE) { account.setDeletePolicy((Integer)((SpinnerOption)mDeletePolicyView.getSelectedItem()).value); } final HostAuth recvAuth=accou
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,configureEditor,"private void  (){ final Account account=mSetupData.getAccount(); if (account == null || account.mHostAuthRecv == null) { LogUtils.e(LogUtils.TAG ""null account or host auth. account null: %b host auth null: %b"" account == null account == null || account.mHostAuthRecv == null); return; } mBaseScheme=account.mHostAuthRecv.mProtocol; mServerLabelView.setText(R.string.account_setup_incoming_server_label); mServerView.setContentDescription(getResources().getText(R.string.account_setup_incoming_server_label)); if (!mServiceInfo.offerPrefix) { mImapPathPrefixSectionView.setVisibility(View.GONE); } if (!mServiceInfo.offerLocalDeletes) { mDeletePolicyLabelView.setVisibility(View.GONE); mDeletePolicyView.setVisibility(View.GONE); mPortView.setImeOptions(EditorInfo.IME_ACTION_NEXT); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,getPortFromSecurityType,private int  (boolean useSsl){ return useSsl ? mServiceInfo.portSsl : mServiceInfo.port; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,getSaveSettingsLoader,@Override public Loader<Boolean>  (){ return new SaveSettingsLoader(mAppContext mSetupData mSettingsMode); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,getSslSelected,private boolean  (){ final int securityType=(Integer)((SpinnerOption)mSecurityTypeView.getSelectedItem()).value; return ((securityType & HostAuth.FLAG_SSL) != 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,haveSettingsChanged,@Override public boolean  (){ final boolean deletePolicyChanged; if (mDeletePolicyView != null && mDeletePolicyView.getVisibility() == View.VISIBLE) { int newDeletePolicy=(Integer)((SpinnerOption)mDeletePolicyView.getSelectedItem()).value; deletePolicyCha
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,loadInBackground,@Override public Boolean  (){ if (mSettingsMode) { saveSettingsAfterEdit(getContext() mSetupData); } else { saveSettingsAfterSetup(getContext() mSetupData); } return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,loadSettings,private void  (){ if (mLoaded) return; final Account account=mSetupData.getAccount(); final HostAuth recvAuth=account.getOrCreateHostAuthRecv(mAppContext); mServiceInfo=mSetupData.getIncomingServiceInfo(getActivity()); final List<VendorPolicyLoader.OAuthProvider> oauthProviders=AccountSettingsUtils.getAllOAuthProviders(getActivity()); final boolean offerOAuth=(mServiceInfo.offerOAuth && oauthProviders.size() > 0); mAuthenticationView.setAuthInfo(offerOAuth recvAuth); final String username=recvAuth.mLogin; if (username != null) { mUsernameView.setText(username); } if (mServiceInfo.offerPrefix) { final String prefix=recvAuth.mDomain; if (prefix != null && prefix.length() > 0) { mImapPathPrefixView.setText(prefix.substring(1)); } } mLoadedDeletePolicy=account.getDeletePolicy(); SpinnerOption.setSpinnerOptionValue(mDeletePolicyView mLoadedDeletePolicy); int flags=recvAuth.mFlags; if (mServiceInfo.defaultSsl) { flags|=HostAuth.FLAG_SSL; } int securityTypeFlags=(flags & HostAuth.FLAG_TRANSPORTSECURITY_MASK); SpinnerOption.setSpinnerOptionValue(mSecurityTypeView securityTypeFlags); final String hostname=recvAuth.mAddress; if (hostname != null) { mServerView.setText(hostname); } final int port=recvAuth.mPort; if (port != HostAuth.PORT_UNKNOWN) { mPortView.setText(Integer.toString(port)); } else { updatePortFromSecurityType(); } if (!TextUtils.isEmpty(recvAuth.mClientCertAlias)) { mClientCertificateSelector.setCertificate(recvAuth.mClientCertAlias); } final Parcel parcel=Parcel.obtain(); parcel.writeParcelable(recvAuth recvAuth.describeContents()); parcel.setDataPosition(0); mLoadedRecvAuth=parcel.readParcelable(HostAuth.class.getClassLoader()); parcel.recycle(); mLoaded=true; validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,newInstance,public static AccountSetupIncomingFragment  (boolean settingsMode){ final AccountSetupIncomingFragment f=new AccountSetupIncomingFragment(); f.setArguments(getArgs(settingsMode)); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onActivityCreated,@Override public void  (Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); mClientCertificateSelector.setHostCallback(this); final Context context=getActivity(); final SetupDataFragment.SetupDataContainer container=(SetupDataFragment
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onActivityResult,@Override public void  (int requestCode int resultCode Intent data){ if (requestCode == CERTIFICATE_REQUEST && resultCode == Activity.RESULT_OK) { final String certAlias=data.getStringExtra(CertificateRequestor.RESULT_ALIAS); if (certAlias != null) { mCli
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onCertificateRequested,@Override public void  (){ final Intent intent=new Intent(getString(R.string.intent_exchange_cert_action)); intent.setData(CertificateRequestor.CERTIFICATE_REQUEST_URI); intent.putExtra(CertificateRequestor.EXTRA_HOST mServerView.getText().toString().trim
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); if (savedInstanceState != null) { mCacheLoginCredential=savedInstanceState.getString(STATE_KEY_CREDENTIAL); mLoaded=savedInstanceState.getBoolean(STATE_KEY_LOADED fals
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onCreateView,@Override public View  (LayoutInflater inflater ViewGroup container Bundle savedInstanceState){ final View view; if (mSettingsMode) { view=inflater.inflate(R.layout.account_settings_incoming_fragment container false); } else { view=inflateTemplatedView(in
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onDestroyView,@Override public void  (){ if (mUsernameView != null) { mUsernameView.removeTextChangedListener(mValidationTextWatcher); } mUsernameView=null; mServerLabelView=null; if (mServerView != null) { mServerView.removeTextChangedListener(mValidationTextWatcher);
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onItemSelected,@Override public void  (AdapterView<?> arg0 View arg1 int arg2 long arg3){ updatePortFromSecurityType(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onRequestSignIn,@Override public void  (){ final String protocol=mSetupData.getAccount().getOrCreateHostAuthRecv(mAppContext).mProtocol; final Intent intent=AccountCredentials.getAccountCredentialsIntent(getActivity() mUsernameView.getText().toString() protocol); startAc
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onResume,@Override public void  (){ super.onResume(); validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onSaveInstanceState,@Override public void  (Bundle outState){ super.onSaveInstanceState(outState); outState.putString(STATE_KEY_CREDENTIAL mCacheLoginCredential); outState.putBoolean(STATE_KEY_LOADED mLoaded); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onUseSslChanged,"public void  (boolean useSsl){ if (mServiceInfo.offerCerts) { final int mode=useSsl ? View.VISIBLE : View.GONE; mClientCertificateSelector.setVisibility(mode); String deviceId=""""; try { deviceId=Device.getDeviceId(mAppContext); } catch ( IOException e) { } ((TextView)UiUtilities.getView(getView() R.id.device_id)).setText(deviceId); mDeviceIdSection.setVisibility(mode); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,onValidateStateChanged,@Override public void  (){ validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,saveSettings,@Override public void  (){ mLoadedDeletePolicy=mSetupData.getAccount().getDeletePolicy(); super.saveSettings(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,saveSettingsAfterEdit,public static void  (Context context SetupDataFragment setupData){ final Account account=setupData.getAccount(); account.update(context account.toContentValues()); final Credential cred=account.mHostAuthRecv.mCredential; if (cred != null) { if (cred.isSaved()) { cred.update(context cred.toContentValues()); } else { cred.save(context); account.mHostAuthRecv.mCredentialKey=cred.mId; } } account.mHostAuthRecv.update(context account.mHostAuthRecv.toContentValues()); AccountBackupRestore.backup(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,saveSettingsAfterSetup,"public static void  (Context context SetupDataFragment setupData){ final Account account=setupData.getAccount(); final HostAuth recvAuth=account.getOrCreateHostAuthRecv(context); final HostAuth sendAuth=account.getOrCreateHostAuthSend(context); final String hostName=AccountSettingsUtils.inferServerName(context recvAuth.mAddress null ""smtp""); sendAuth.setLogin(recvAuth.mLogin recvAuth.mPassword); sendAuth.setConnection(sendAuth.mProtocol hostName sendAuth.mPort sendAuth.mFlags); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,updatePortFromSecurityType,private void  (){ final boolean sslSelected=getSslSelected(); final int port=getPortFromSecurityType(sslSelected); mPortView.setText(Integer.toString(port)); onUseSslChanged(sslSelected); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupIncomingFragment.java,validateFields,private void  (){ if (!mLoaded) return; enableNextButton(!TextUtils.isEmpty(mUsernameView.getText()) && mAuthenticationView.getAuthValid() && Utility.isServerNameValid(mServerView)&& Utility.isPortFieldValid(mPortView)); mCacheLoginCredential=mUsernameView.getText().toString().trim(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFragment.java,getState,public int  (){ return mState; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFragment.java,inflateTemplatedView,protected View  (final LayoutInflater inflater final ViewGroup container final int contentLayout final int headline){ final View template=inflater.inflate(R.layout.account_setup_template container false); TextView headlineView=UiUtilities.getView(template R.id.headline); if (headline > 0) { headlineView.setText(headline); headlineView.setVisibility(View.VISIBLE); } else { headlineView.setVisibility(View.GONE); } final ViewGroup contentContainer=(ViewGroup)template.findViewById(R.id.setup_fragment_content); inflater.inflate(contentLayout contentContainer true); mNextButton=UiUtilities.getView(template R.id.next); mNextButton.setOnClickListener(this); mPreviousButton=UiUtilities.getView(template R.id.previous); mPreviousButton.setOnClickListener(this); return template; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupFragment.java,isNextButtonEnabled,public boolean  (){ return mNextButton.isEnabled(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,getDescription,public String  (){ return mDescription.getText().toString().trim(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,getSenderName,public String  (){ return mName.getText().toString().trim(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,newInstance,public static AccountSetupNamesFragment  (){ return new AccountSetupNamesFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,onActivityCreated,@Override public void  (Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); getView(); final SetupDataFragment setupData=((SetupDataFragment.SetupDataContainer)getActivity()).getSetupData(); final int flowMode=setupData.getFlowMode();
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,onCreateLoader,@Override public Loader<Cursor>  (int id Bundle args){ final String[] projection=new String[]{ContactsContract.Profile.DISPLAY_NAME}; return new CursorLoader(loaderContext ContactsContract.Profile.CONTENT_URI projection null null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,onCreateView,@Override public View  (LayoutInflater inflater ViewGroup container Bundle savedInstanceState){ final View view=inflateTemplatedView(inflater container R.layout.account_setup_names_fragment R.string.account_setup_names_headline); mDescription=UiUtilities.
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNamesFragment.java,onLoadFinished,"@Override public void  (Loader<Cursor> loader Cursor data){ if (data == null || !TextUtils.isEmpty(mName.getText())) { return; } final String name; if (data.moveToFirst()) { name=data.getString(0); } else { name=""""; } mName.setText(name); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNoteDialogFragment.java,newInstance,public static AccountSetupNoteDialogFragment  (String note){ final AccountSetupNoteDialogFragment f=new AccountSetupNoteDialogFragment(); final Bundle b=new Bundle(1); b.putString(BUNDLE_KEY_NOTE note); f.setArguments(b); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNoteDialogFragment.java,onCancel,@Override public void  (DialogInterface dialog){ super.onCancel(dialog); final Callback a=(Callback)getActivity(); a.onNoteDialogCancel(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNoteDialogFragment.java,onClick,@Override public void  (DialogInterface dialog int which){ dialog.cancel(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupNoteDialogFragment.java,onCreateDialog,@Override public Dialog  (Bundle savedInstanceState){ final Context context=getActivity(); final String note=getArguments().getString(BUNDLE_KEY_NOTE); setCancelable(true); return new AlertDialog.Builder(context).setIconAttribute(android.R.attr.alertDialo
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,enableLookbackSpinner,private void  (Account account){ mSyncWindowView.setVisibility(View.VISIBLE); mSyncwindowLabel.setVisibility(View.VISIBLE); final CharSequence[] windowValues=getResources().getTextArray(R.array.account_settings_mail_window_values); final CharSequence[] windowEntries=getResources().getTextArray(R.array.account_settings_mail_window_entries); int maxEntry=windowEntries.length; final Policy policy=account.mPolicy; if (policy != null) { final int maxLookback=policy.mMaxEmailLookback; if (maxLookback != 0) { maxEntry=maxLookback + 1; } } final SpinnerOption[] windowOptions=new SpinnerOption[maxEntry]; int defaultIndex=-1; for (int i=0; i < maxEntry; i++) { final int value=Integer.valueOf(windowValues[i].toString()); windowOptions[i]=new SpinnerOption(value windowEntries[i].toString()); if (value == SYNC_WINDOW_EAS_DEFAULT) { defaultIndex=i; } } final ArrayAdapter<SpinnerOption> windowOptionsAdapter=new ArrayAdapter<>(getActivity() android.R.layout.simple_spinner_item windowOptions); windowOptionsAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); mSyncWindowView.setAdapter(windowOptionsAdapter); SpinnerOption.setSpinnerOptionValue(mSyncWindowView account.getSyncLookback()); if (defaultIndex >= 0) { mSyncWindowView.setSelection(defaultIndex); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,getAccountSyncWindowValue,public Integer  (){ if (mSyncWindowView.getVisibility() != View.VISIBLE) { return null; } return (Integer)((SpinnerOption)mSyncWindowView.getSelectedItem()).value; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,getBackgroundAttachmentsValue,public boolean  (){ return mBackgroundAttachmentsView.isChecked(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,getCheckFrequencyValue,public Integer  (){ return (Integer)((SpinnerOption)mCheckFrequencyView.getSelectedItem()).value; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,getNotifyValue,public boolean  (){ return mNotifyView.isChecked(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,getSyncCalendarValue,public boolean  (){ return mSyncCalendarView.isChecked(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,getSyncContactsValue,public boolean  (){ return mSyncContactsView.isChecked(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,getSyncEmailValue,public boolean  (){ return mSyncEmailView.isChecked(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,newInstance,public static AccountSetupOptionsFragment  (){ return new AccountSetupOptionsFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,onActivityCreated,@Override public void  (Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); final View view=getView(); final SetupDataFragment setupData=((SetupDataFragment.SetupDataContainer)getActivity()).getSetupData(); final Account account=setup
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOptionsFragment.java,onCreateView,@Override public View  (LayoutInflater inflater ViewGroup container Bundle savedInstanceState){ final View view=inflateTemplatedView(inflater container R.layout.account_setup_options_fragment R.string.account_setup_options_headline); mCheckFrequencyView=U
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupTypeFragment.java,newInstance,public static AccountSetupTypeFragment  (){ return new AccountSetupTypeFragment(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,SaveSettingsLoader,private  (Context context SetupDataFragment setupData boolean settingsMode){ super(context); mSetupData=setupData; mSettingsMode=settingsMode; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,afterTextChanged,@Override public void  (Editable s){ validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,collectUserInputInternal,@Override public int  (){ final Account account=mSetupData.getAccount(); final HostAuth sendAuth=account.getOrCreateHostAuthSend(mAppContext); if (mRequireLoginView.isChecked()) { final String userName=mUsernameView.getText().toString().trim(); final Stri
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,getPortFromSecurityType,private int  (){ final int securityType=(Integer)((SpinnerOption)mSecurityTypeView.getSelectedItem()).value; return (securityType & HostAuth.FLAG_SSL) != 0 ? SMTP_PORT_SSL : SMTP_PORT_NORMAL; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,getSaveSettingsLoader,@Override public Loader<Boolean>  (){ return new SaveSettingsLoader(mAppContext mSetupData mSettingsMode); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,loadInBackground,@Override public Boolean  (){ if (mSettingsMode) { saveSettingsAfterEdit(getContext() mSetupData); } else { saveSettingsAfterSetup(getContext() mSetupData); } return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,loadSettings,"private void  (){ if (mLoaded) return; final HostAuth sendAuth=mSetupData.getAccount().getOrCreateHostAuthSend(mAppContext); if (!mSetupData.isOutgoingCredLoaded()) { sendAuth.setUserName(mSetupData.getEmail()); AccountSetupCredentialsFragment.populateHostAuthWithResults(mAppContext sendAuth mSetupData.getCredentialResults()); final String[] emailParts=mSetupData.getEmail().split(""@""); final String domain=emailParts[1]; sendAuth.setConnection(sendAuth.mProtocol domain HostAuth.PORT_UNKNOWN HostAuth.FLAG_NONE); mSetupData.setOutgoingCredLoaded(true); } if ((sendAuth.mFlags & HostAuth.FLAG_AUTHENTICATE) != 0) { final String username=sendAuth.mLogin; if (username != null) { mUsernameView.setText(username); mRequireLoginView.setChecked(true); } final List<VendorPolicyLoader.OAuthProvider> oauthProviders=AccountSettingsUtils.getAllOAuthProviders(getActivity()); mAuthenticationView.setAuthInfo(oauthProviders.size() > 0 sendAuth); if (mAuthenticationLabel != null) { mAuthenticationLabel.setText(R.string.authentication_label); } } final int flags=sendAuth.mFlags & HostAuth.FLAG_TRANSPORTSECURITY_MASK; SpinnerOption.setSpinnerOptionValue(mSecurityTypeView flags); final String hostname=sendAuth.mAddress; if (hostname != null) { mServerView.setText(hostname); } final int port=sendAuth.mPort; if (port != -1) { mPortView.setText(Integer.toString(port)); } else { updatePortFromSecurityType(); } final Parcel parcel=Parcel.obtain(); parcel.writeParcelable(sendAuth sendAuth.describeContents()); parcel.setDataPosition(0); mLoadedSendAuth=parcel.readParcelable(HostAuth.class.getClassLoader()); parcel.recycle(); mLoaded=true; validateFields(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,newInstance,public static AccountSetupOutgoingFragment  (boolean settingsMode){ final AccountSetupOutgoingFragment f=new AccountSetupOutgoingFragment(); f.setArguments(getArgs(settingsMode)); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onActivityCreated,@Override public void  (Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); final Context context=getActivity(); final SpinnerOption securityTypes[]={new SpinnerOption(HostAuth.FLAG_NONE context.getString(R.string.account_setup_incomi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onActivityResult,@Override public void  (final int requestCode final int resultCode final Intent data){ if (requestCode == SIGN_IN_REQUEST && resultCode == Activity.RESULT_OK) { final Account account=mSetupData.getAccount(); final HostAuth sendAuth=account.getOrCreateHost
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onCheckedChanged,@Override public void  (CompoundButton buttonView boolean isChecked){ final HostAuth sendAuth=mSetupData.getAccount().getOrCreateHostAuthSend(mAppContext); mAuthenticationView.setAuthInfo(true sendAuth); final int visibility=isChecked ? View.VISIBLE : Vie
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); if (savedInstanceState != null) { mLoaded=savedInstanceState.getBoolean(STATE_KEY_LOADED false); } mBaseScheme=HostAuth.LEGACY_SCHEME_SMTP; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onCreateView,@Override public View  (LayoutInflater inflater ViewGroup container Bundle savedInstanceState){ final View view; if (mSettingsMode) { view=inflater.inflate(R.layout.account_settings_outgoing_fragment container false); } else { view=inflateTemplatedView(in
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onItemSelected,@Override public void  (AdapterView<?> arg0 View arg1 int arg2 long arg3){ updatePortFromSecurityType(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onRequestSignIn,@Override public void  (){ final String protocol=mSetupData.getAccount().getOrCreateHostAuthRecv(mAppContext).mProtocol; final Intent intent=AccountCredentials.getAccountCredentialsIntent(getActivity() mUsernameView.getText().toString() protocol); startAc
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onResume,@Override public void  (){ super.onResume(); validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onSaveInstanceState,@Override public void  (Bundle outState){ super.onSaveInstanceState(outState); outState.putBoolean(STATE_KEY_LOADED mLoaded); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,onValidateStateChanged,@Override public void  (){ validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,run,@Override public void  (){ mSecurityTypeView.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener(){ @Override public void onItemSelected( AdapterView<?> arg0  View arg1  int arg2  long arg3){ updatePortFromSecurityType(); } @Override public v
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,saveSettingsAfterEdit,public static void  (Context context SetupDataFragment setupData){ final Account account=setupData.getAccount(); final Credential cred=account.mHostAuthSend.mCredential; if (cred != null) { if (cred.isSaved()) { cred.update(context cred.toContentValues()); } else { cred.save(context); account.mHostAuthSend.mCredentialKey=cred.mId; } } account.mHostAuthSend.update(context account.mHostAuthSend.toContentValues()); AccountBackupRestore.backup(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,updatePortFromSecurityType,private void  (){ final int port=getPortFromSecurityType(); mPortView.setText(Integer.toString(port)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AccountSetupOutgoingFragment.java,validateFields,private void  (){ if (!mLoaded) return; boolean enabled=Utility.isServerNameValid(mServerView) && Utility.isPortFieldValid(mPortView); if (enabled && mRequireLoginView.isChecked()) { enabled=!TextUtils.isEmpty(mUsernameView.getText()) && mAuthenticationView.getAuthValid(); } enableNextButton(enabled); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,clearMigrationState,private void  (){ MailPrefs prefs=MailPrefs.get(getActivity()); prefs.setMigrationState(MailPrefs.PreferenceKeys.MIGRATION_STATE_NONE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,clearWebViewCache,"private void  (){ WebView webview=new WebView(getActivity()); try { webview.clearCache(true); LogUtils.w(Logging.LOG_TAG ""Cleard WebView cache.""); } finally { webview.destroy(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,onCheckedChanged,@Override public void  (CompoundButton buttonView boolean isChecked){ switch (buttonView.getId()) { case R.id.debug_logging: mPreferences.setEnableDebugLogging(isChecked); DebugUtils.DEBUG=isChecked; break; case R.id.exchange_logging: mPreferences.setEnab
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,onClick,@Override public void  (View v){ switch (v.getId()) { case R.id.clear_webview_cache: clearWebViewCache(); break; case R.id.clear_migration_state: clearMigrationState(); break; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DebugFragment.java,onCreateView,"@Override public View  (LayoutInflater inflater ViewGroup container Bundle savedInstanceState){ if (Logging.DEBUG_LIFECYCLE && DebugUtils.DEBUG) { LogUtils.d(Logging.LOG_TAG ""DebugFragment onCreateView""); } View view=inflater.inflate(R.layout.debug contai"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DuplicateAccountDialogFragment.java,newInstance,public static DuplicateAccountDialogFragment  (String note){ DuplicateAccountDialogFragment f=new DuplicateAccountDialogFragment(); Bundle b=new Bundle(); b.putString(BUNDLE_KEY_ACCOUNT_NAME note); f.setArguments(b); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DuplicateAccountDialogFragment.java,onCreateDialog,@Override public Dialog  (Bundle savedInstanceState){ Context context=getActivity(); String accountName=getArguments().getString(BUNDLE_KEY_ACCOUNT_NAME); setCancelable(true); return new AlertDialog.Builder(context).setIconAttribute(android.R.attr.alertDi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\DuplicateAccountDialogFragment.java,onDismiss,"@Override public void  (DialogInterface dialog){ super.onDismiss(dialog); final Callback callback=(Callback)getActivity(); if (callback != null) { callback.onDuplicateAccountDialogDismiss(); } else { LogUtils.d(LogUtils.TAG ""Null callback in DuplicateAcco"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,afterTextChanged,@Override public void  (Editable s){ mDialog.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(s.length() > 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,newInstance,public static EditQuickResponseDialog  (String text Uri baseUri boolean create){ final EditQuickResponseDialog dialog=new EditQuickResponseDialog(); Bundle args=new Bundle(4); args.putString(QUICK_RESPONSE_STRING text); args.putParcelable(QUICK_RESPONSE_CONTENT_URI baseUri); args.putBoolean(QUICK_RESPONSE_CREATE create); dialog.setArguments(args); return dialog; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,onClick,@Override public void  (DialogInterface dialog int which){ getActivity().getContentResolver().delete(uri null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,onCreateDialog,@Override public Dialog  (Bundle savedInstanceState){ final Uri uri=getArguments().getParcelable(QUICK_RESPONSE_CONTENT_URI); final boolean create=getArguments().getBoolean(QUICK_RESPONSE_CREATE); String quickResponseSavedString=null; if (savedInstanceSta
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,onResume,@Override public void  (){ super.onResume(); if (mQuickResponseEditText.length() == 0) { mDialog.getButton(AlertDialog.BUTTON_POSITIVE).setEnabled(false); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EditQuickResponseDialog.java,onSaveInstanceState,@Override public void  (Bundle outState){ super.onSaveInstanceState(outState); outState.putString(QUICK_RESPONSE_STRING mQuickResponseEditText.getText().toString()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,AuthenticationView,public  (Context context AttributeSet attrs int defstyle){ super(context attrs defstyle); LayoutInflater.from(context).inflate(R.layout.authentication_view this true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,afterTextChanged,@Override public void  (Editable s){ validateFields(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,getAuthValid,public boolean  (){ if (mOfferOAuth & mUseOAuth) { return mOAuthProvider != null; } else { return !TextUtils.isEmpty(mPasswordEdit.getText()); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,getOAuthProvider,public String  (){ return mOAuthProvider; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,getPassword,public String  (){ return mPasswordEdit.getText().toString(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,onClick,@Override public void  (View view){ if (view == mClearPasswordView) { mPasswordEdit.setText(null); updateVisibility(); validateFields(); } else if (view == mClearOAuthView) { mUseOAuth=false; mOAuthProvider=null; updateVisibility(); validateFields(); } el
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\AuthenticationView.java,onFinishInflate,@Override public void  (){ super.onFinishInflate(); mPasswordWrapper=UiUtilities.getView(this R.id.password_wrapper); mOAuthWrapper=UiUtilities.getView(this R.id.oauth_wrapper); mPasswordEdit=UiUtilities.getView(this R.id.password_edit); mOAuthLabel=UiUti
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\GeneralPreferences.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); final PreferenceScreen ps=getPreferenceScreen(); final Preference removalAction=findPreference(PreferenceKeys.REMOVAL_ACTION); if (removalAction != null) { ps.removePr
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\GeneralPreferences.java,supportsArchive,@Override protected boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsErrorDialogFragment.java,getErrorString,"public static String  (Context context MessagingException ex){ final int id; String message=ex.getMessage(); if (message != null) { message=message.trim(); } switch (ex.getExceptionType()) { case MessagingException.CERTIFICATE_VALIDATION_ERROR: id=TextUtils.isEmpty(message) ? R.string.account_setup_failed_dlg_certificate_message : R.string.account_setup_failed_dlg_certificate_message_fmt; break; case MessagingException.AUTHENTICATION_FAILED: id=R.string.account_setup_failed_dlg_auth_message; break; case MessagingException.AUTODISCOVER_AUTHENTICATION_FAILED: id=R.string.account_setup_autodiscover_dlg_authfail_message; break; case MessagingException.AUTHENTICATION_FAILED_OR_SERVER_ERROR: id=R.string.account_setup_failed_check_credentials_message; break; case MessagingException.IOERROR: id=R.string.account_setup_failed_ioerror; break; case MessagingException.TLS_REQUIRED: id=R.string.account_setup_failed_tls_required; break; case MessagingException.AUTH_REQUIRED: id=R.string.account_setup_failed_auth_required; break; case MessagingException.SECURITY_POLICIES_UNSUPPORTED: id=R.string.account_setup_failed_security_policies_unsupported; String[] unsupportedPolicies=(String[])ex.getExceptionData(); if (unsupportedPolicies == null) { LogUtils.w(LogUtils.TAG ""No data for unsupported policies?""); break; } final StringBuilder sb=new StringBuilder(); boolean first=true; for (String policyName : unsupportedPolicies) { if (first) { first=false; } else { sb.append(""  ""); } sb.append(policyName); } message=sb.toString(); break; case MessagingException.ACCESS_DENIED: id=R.string.account_setup_failed_access_denied; break; case MessagingException.PROTOCOL_VERSION_UNSUPPORTED: id=R.string.account_setup_failed_protocol_unsupported; break; case MessagingException.GENERAL_SECURITY: id=R.string.account_setup_failed_security; break; case MessagingException.CLIENT_CERTIFICATE_REQUIRED: id=R.string.account_setup_failed_certificate_required; break; case MessagingException.CLIENT_CERTIFICATE_ERROR: id=R.string.account_setup_failed_certificate_inaccessible; break; default : id=TextUtils.isEmpty(message) ? R.string.account_setup_failed_dlg_server_message : R.string.account_setup_failed_dlg_server_message_fmt; break; } return TextUtils.isEmpty(message) ? context.getString(id) : context.getString(id message); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsErrorDialogFragment.java,getReasonFromException,public static int  (MessagingException ex){ final int exceptionCode=ex.getExceptionType(); switch (exceptionCode) { case MessagingException.AUTODISCOVER_AUTHENTICATION_FAILED: case MessagingException.AUTHENTICATION_FAILED: return REASON_AUTHENTICATION_FAILED; case MessagingException.CLIENT_CERTIFICATE_REQUIRED: return REASON_CERTIFICATE_REQUIRED; } return REASON_OTHER; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsErrorDialogFragment.java,newInstance,public static CheckSettingsErrorDialogFragment  (int reason String message){ final CheckSettingsErrorDialogFragment fragment=new CheckSettingsErrorDialogFragment(); final Bundle arguments=new Bundle(2); arguments.putString(ARGS_MESSAGE message); arguments.putInt(ARGS_REASON reason); fragment.setArguments(arguments); return fragment; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsErrorDialogFragment.java,onCancel,@Override public void  (DialogInterface dialog){ super.onCancel(dialog); final Callback callback=(Callback)getActivity(); callback.onCheckSettingsErrorDialogEditSettings(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,enableDebugMenu,private void  (){ mShowDebugMenu=true; invalidateHeaders(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,getIntent,@Override public Intent  (){ final Intent intent=super.getIntent(); final long accountId=IntentUtilities.getAccountIdFromIntent(intent); if (accountId < 0) { return intent; } Intent modIntent=new Intent(intent); modIntent.putExtra(EXTRA_SHOW_FRAGMENT Acco
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,isValidFragment,@Override public boolean  (String fragmentName){ return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onAddNewAccount,private void  (){ final Intent setupIntent=AuthenticatorSetupIntentHelper.actionNewAccountIntent(this); startActivity(setupIntent); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onAttachFragment,@Override public void  (Fragment f){ super.onAttachFragment(f); invalidateOptionsMenu(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onBuildExtraHeaders,@Override public void  (List<Header> target){ super.onBuildExtraHeaders(target); loadHeadersFromResource(R.xml.email_extra_preference_headers target); if (DEBUG_MENU_ALLOWED) { if (mShowDebugMenu) { final Header debugHeader=new Header(); debugHeader.title
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); final Intent i=getIntent(); if (savedInstanceState == null) { if (INTENT_ACCOUNT_MANAGER_ENTRY == null) { INTENT_ACCOUNT_MANAGER_ENTRY=getString(R.string.intent_accoun
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onCreateOptionsMenu,@Override public boolean  (Menu menu){ super.onCreateOptionsMenu(menu); getMenuInflater().inflate(R.menu.settings_menu menu); mFeedbackMenuItem=menu.findItem(R.id.feedback_menu_item); return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onHeaderClick,@Override public void  (@NonNull Header header int position){ if (position == 0) { mNumGeneralHeaderClicked++; if (mNumGeneralHeaderClicked == 10) { enableDebugMenu(); } } else { mNumGeneralHeaderClicked=0; } if (header.id == R.id.add_account_header) { on
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onKeyDown,@Override public boolean  (int keyCode @NonNull KeyEvent event){ if (event.getKeyCode() == SECRET_KEY_CODES[mSecretKeyCodeIndex]) { mSecretKeyCodeIndex++; if (mSecretKeyCodeIndex == SECRET_KEY_CODES.length) { mSecretKeyCodeIndex=0; enableDebugMenu(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onOptionsItemSelected,@Override public boolean  (MenuItem item){ switch (item.getItemId()) { case android.R.id.home: onBackPressed(); break; case R.id.feedback_menu_item: Utils.sendFeedback(this mFeedbackUri false); break; default : return super.onOptionsItemSelected(item); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\EmailPreferenceActivity.java,onPrepareOptionsMenu,@Override public boolean  (Menu menu){ super.onPrepareOptionsMenu(menu); if (mFeedbackMenuItem != null) { mFeedbackMenuItem.setVisible(!Uri.EMPTY.equals(mFeedbackUri)); } return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsProgressDialogFragment.java,newInstance,public static CheckSettingsProgressDialogFragment  (int checkMode){ final CheckSettingsProgressDialogFragment f=new CheckSettingsProgressDialogFragment(); final Bundle b=new Bundle(1); b.putInt(ARGS_MODE_INT checkMode); f.setArguments(b); return f; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\CheckSettingsProgressDialogFragment.java,onCancel,"@Override public void  (DialogInterface dialog){ super.onCancel(dialog); final Callback callback=(Callback)getActivity(); if (callback != null) { callback.onCheckSettingsProgressDialogCancel(); } else { LogUtils.d(LogUtils.TAG ""Null callback in CheckSetti"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,LoadAccountIncomingSettingsAsyncTask,private  (Context context boolean incoming){ mContext=context; mIncoming=incoming; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,doInBackground,protected Account  (Long... params){ return Account.restoreAccountWithId(mContext params[0]); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,getOutgoingSettingsUri,"public static Uri  (long accountId){ final Uri.Builder baseUri=Uri.parse(""auth://"" + EmailContent.EMAIL_PACKAGE_NAME + "".ACCOUNT_SETTINGS/outgoing/"").buildUpon(); IntentUtilities.setAccountId(baseUri accountId); return baseUri.build(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,onCreate,@Override public void  (Bundle savedInstanceState){ super.onCreate(savedInstanceState); final Intent i=getIntent(); final long accountID=IntentUtilities.getAccountIdFromIntent(i); if (savedInstanceState == null) { new LoadAccountIncomingSettingsAsyncTask(
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\HeadlessAccountSettingsLoader.java,onPostExecute,protected void  (Account result){ final Intent intent; if (mIncoming) { intent=AccountServerSettingsActivity.getIntentForIncoming(mContext result); } else { intent=AccountServerSettingsActivity.getIntentForOutgoing(mContext result); } intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivity(intent); finish(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,OAuthTokenLoader,public  (Context context String providerId String code){ super(context); mProviderId=providerId; mCode=code; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,loadInBackground,"@Override public AuthenticationResult  (){ try { final OAuthAuthenticator authenticator=new OAuthAuthenticator(); final AuthenticationResult result=authenticator.requestAccess(getContext() mProviderId mCode); LogUtils.d(Logging.LOG_TAG ""authentication %s"""
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,onCreate,@Override public void  (Bundle bundle){ super.onCreate(bundle); CookieSyncManager.createInstance(this); CookieManager cm=CookieManager.getInstance(); cm.removeAllCookie(); mWv=new WebView(this); mWv.setWebViewClient(new MyWebViewClient()); mWv.getSettings
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,onCreateLoader,@Override public Loader<AuthenticationResult>  (int id Bundle data){ if (id == LOADER_ID_OAUTH_TOKEN) { final String providerId=data.getString(EXTRA_PROVIDER_ID); final String code=data.getString(EXTRA_AUTHENTICATION_CODE); return new OAuthTokenLoader(thi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,onLoadFinished,"@Override public void  (Loader<AuthenticationResult> loader AuthenticationResult data){ if (data == null) { setResult(RESULT_OAUTH_FAILURE null); Toast.makeText(this R.string.oauth_error_description Toast.LENGTH_SHORT).show(); LogUtils.w(Logging.LOG_TAG """
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,onSaveInstanceState,@Override protected void  (Bundle outState){ super.onSaveInstanceState(outState); outState.putString(EXTRA_AUTHENTICATION_CODE mAuthenticationCode); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\OAuthAuthenticationActivity.java,shouldOverrideUrlLoading,@Override public boolean  (WebView wv String url){ final String deparameterizedUrl; int i=url.lastIndexOf('?'); if (i == -1) { deparameterizedUrl=url; } else { deparameterizedUrl=url.substring(0 i); } if (TextUtils.equals(deparameterizedUrl mProvider.redi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,MailboxLoader,private  (Context context long mailboxId){ super(context); mMailboxId=mailboxId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,doInBackground,@Override protected Void  (Void... params){ final ContentValues cv=new ContentValues(2); final Uri uri; if (syncIntervalChanged) { cv.put(MailboxColumns.SYNC_INTERVAL syncInterval); } if (syncLookbackChanged) { cv.put(MailboxColumns.SYNC_LOOKBACK syncLook
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,enablePreferences,private void  (boolean enabled){ mSyncEnabledPref.setEnabled(enabled); mSyncLookbackPref.setEnabled(enabled); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,getArguments,private static Bundle  (long mailboxId){ final Bundle b=new Bundle(1); b.putLong(EXTRA_MAILBOX_ID mailboxId); return b; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,getIntent,public static Intent  (Context context Uri foldersUri Folder inbox){ final Intent i=new Intent(context MailboxSettings.class); i.putExtra(EXTRA_FOLDERS_URI foldersUri); i.putExtra(EXTRA_INBOX_ID inbox.id); return i; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,isValidFragment,@Override protected boolean  (String fragmentName){ return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,loadInBackground,@Override public Map<String Object>  (){ final Map<String Object> result=new HashMap<>(); final Mailbox mailbox=Mailbox.restoreMailboxWithId(getContext() mMailboxId); result.put(RESULT_KEY_MAILBOX mailbox); result.put(RESULT_KEY_MAX_LOOKBACK 0); if (mailb
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onActivityCreated,@Override public void  (Bundle savedInstanceState){ super.onActivityCreated(savedInstanceState); final long mailboxId=getArguments().getLong(EXTRA_MAILBOX_ID Mailbox.NO_MAILBOX); if (mailboxId == Mailbox.NO_MAILBOX) { getActivity().finish(); } addPreferen
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onBuildHeaders,@Override public void  (List<Header> target){ if (mFolders.isEmpty()) { final Header dummy=new Header(); dummy.titleRes=R.string.mailbox_name_display_inbox; dummy.fragment=MailboxSettingsFragment.class.getName(); dummy.fragmentArguments=MailboxSettingsFra
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onCreate,@Override protected void  (Bundle savedInstanceState){ mInboxId=getIntent().getIntExtra(EXTRA_INBOX_ID -1); mFoldersUri=getIntent().getParcelableExtra(EXTRA_FOLDERS_URI); if (mFoldersUri != null) { getLoaderManager().initLoader(FOLDERS_LOADER_ID null new 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onCreateLoader,@Override public Loader<Map<String Object>>  (int id Bundle args){ final long mailboxId=args.getLong(EXTRA_MAILBOX_ID); return new MailboxLoader(getActivity() mailboxId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onDataLoaded,private void  (){ Preconditions.checkNotNull(mMailbox); final ActionBar actionBar=getActivity().getActionBar(); final String mailboxName=mMailbox.mDisplayName; if (actionBar != null) { actionBar.setTitle(mailboxName); actionBar.setSubtitle(getString(R.string.mailbox_settings_activity_title)); } else { getActivity().setTitle(getString(R.string.mailbox_settings_activity_title_with_mailbox mailboxName)); } MailboxSettings.setupLookbackPreferenceOptions(getActivity() mSyncLookbackPref mMaxLookback true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onDestroy,@Override public void  (){ super.onDestroy(); if (!getActivity().isChangingConfigurations()) { saveToDatabase(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onLoadFinished,@Override public void  (Loader<Map<String Object>> loader Map<String Object> data){ final Mailbox mailbox=(Mailbox)(data == null ? null : data.get(MailboxLoader.RESULT_KEY_MAILBOX)); if (mailbox == null) { getActivity().finish(); return; } mMailbox=mailbo
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onOptionsItemSelected,@Override public boolean  (MenuItem item){ if (item.getItemId() == android.R.id.home) { onBackPressed(); return true; } return super.onOptionsItemSelected(item); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onPreferenceChange,@Override public boolean  (Preference preference Object newValue){ mSyncLookbackPref.setValue((String)newValue); mSyncLookbackPref.setSummary(mSyncLookbackPref.getEntry()); return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,onSaveInstanceState,@Override public void  (@NonNull Bundle outState){ super.onSaveInstanceState(outState); outState.putParcelable(BUNDLE_MAILBOX mMailbox); outState.putInt(BUNDLE_MAX_LOOKBACK mMaxLookback); outState.putBoolean(BUNDLE_SYNC_ENABLED_VALUE mSyncEnabledPref.isCh
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,saveToDatabase,"private void  (){ if (mMailbox == null) { return; } final int syncInterval=mSyncEnabledPref.isChecked() ? 1 : 0; final int syncLookback=Integer.valueOf(mSyncLookbackPref.getValue()); final boolean syncIntervalChanged=syncInterval != mMailbox.mSyncInterval; final boolean syncLookbackChanged=syncLookback != mMailbox.mSyncLookback; if (!syncIntervalChanged && !syncLookbackChanged) { return; } LogUtils.i(Logging.LOG_TAG ""Saving mailbox settings...""); enablePreferences(false); final long id=mMailbox.mId; final Context context=getActivity().getApplicationContext(); new EmailAsyncTask<Void Void Void>(null){ @Override protected Void doInBackground( Void... params){ final ContentValues cv=new ContentValues(2); final Uri uri; if (syncIntervalChanged) { cv.put(MailboxColumns.SYNC_INTERVAL syncInterval); } if (syncLookbackChanged) { cv.put(MailboxColumns.SYNC_LOOKBACK syncLookback); } uri=ContentUris.withAppendedId(Mailbox.CONTENT_URI id); context.getContentResolver().update(uri cv null null); LogUtils.i(Logging.LOG_TAG ""Saved: "" + uri); return null; } } .executeSerial((Void[])null); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\MailboxSettings.java,setupLookbackPreferenceOptions,public static void  (final Context context final ListPreference pref final int maxLookback final boolean showWithDefault){ final Resources resources=context.getResources(); CharSequence[] entries; CharSequence[] values; final int offset; if (showWithDefault) { entries=resources.getTextArray(R.array.account_settings_mail_window_entries_with_default); values=resources.getTextArray(R.array.account_settings_mail_window_values_with_default); offset=1; } else { entries=resources.getTextArray(R.array.account_settings_mail_window_entries); values=resources.getTextArray(R.array.account_settings_mail_window_values); offset=0; } if (maxLookback > 0) { final int size=maxLookback + offset; entries=Arrays.copyOf(entries size); values=Arrays.copyOf(values size); } pref.setEntries(entries); pref.setEntryValues(values); pref.setSummary(pref.getEntry()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\PolicyListPreference.java,PolicyListPreference,public  (Context ctx AttributeSet attrs){ super(ctx attrs); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\PolicyListPreference.java,onBindView,@Override protected void  (View view){ super.onBindView(view); ((TextView)view.findViewById(android.R.id.summary)).setMaxLines(MAX_POLICIES); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SecurityRequiredDialogFragment.java,newInstance,public static SecurityRequiredDialogFragment  (String hostName){ final SecurityRequiredDialogFragment fragment=new SecurityRequiredDialogFragment(); final Bundle arguments=new Bundle(1); arguments.putString(ARGS_HOST_NAME hostName); fragment.setArguments(arguments); return fragment; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SecurityRequiredDialogFragment.java,onCancel,@Override public void  (DialogInterface dialog){ super.onCancel(dialog); final Callback callback=(Callback)getActivity(); if (callback != null) { callback.onSecurityRequiredDialogResult(false); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SecurityRequiredDialogFragment.java,onClick,@Override public void  (DialogInterface dialog int which){ dialog.cancel(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SecurityRequiredDialogFragment.java,onCreateDialog,@Override public Dialog  (Bundle savedInstanceState){ final Context context=getActivity(); final Bundle arguments=getArguments(); final String hostName=arguments.getString(ARGS_HOST_NAME); setCancelable(true); return new AlertDialog.Builder(context).setIc
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SpinnerOption.java,SpinnerOption,public  (Object value String label){ this.value=value; this.label=label; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SpinnerOption.java,setSpinnerOptionValue,public static void  (Spinner spinner Object value){ for (int i=0  count=spinner.getCount(); i < count; i++) { SpinnerOption so=(SpinnerOption)spinner.getItemAtPosition(i); if (so.value.equals(value)) { spinner.setSelection(i true); return; } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SpinnerOption.java,toString,@Override public String  (){ return label; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,SetupDataFragment,public  (Parcel in){ final ClassLoader loader=getClass().getClassLoader(); mFlowMode=in.readInt(); setAccount((Account)in.readParcelable(loader)); mEmail=in.readString(); mCredentialResults=in.readParcelable(loader); final boolean[] credsLoaded=in.createBooleanArray(); mIncomingCredLoaded=credsLoaded[0]; mOutgoingCredLoaded=credsLoaded[1]; mPolicy=in.readParcelable(loader); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,createFromParcel,@Override public SetupDataFragment  (Parcel in){ return new SetupDataFragment(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,describeContents,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getAccount,public Account  (){ return mAccount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getAmProtocol,public String  (){ return mAmProtocol; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getClientCert,public String  (Context context){ final HostAuth recvAuth=mAccount.getOrCreateHostAuthRecv(context); return recvAuth.mClientCertAlias; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getCredentialResults,public Bundle  (){ return mCredentialResults; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getEmail,public String  (){ return mEmail; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getFlowMode,public int  (){ return mFlowMode; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getIncomingProtocol,public String  (Context context){ if (mIncomingProtocol != null) { return mIncomingProtocol; } final HostAuth recvAuth=mAccount.getOrCreateHostAuthRecv(context); return recvAuth.mProtocol; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getIncomingServiceInfo,public EmailServiceUtils.EmailServiceInfo  (Context context){ if (mIncomingServiceInfo == null) { mIncomingServiceInfo=EmailServiceUtils.getServiceInfo(context getIncomingProtocol(context)); } return mIncomingServiceInfo; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\setup\SetupDataFragment.java,getPolicy,public synchronized Policy  (){ return mPolicy; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\UiUtilities.java,checkView,"private static View  (View v){ if (v == null) { throw new IllegalArgumentException(""View doesn't exist""); } return v; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\UiUtilities.java,getView,"@SuppressWarnings(""unchecked"") public static <T extends View>T  (View parent int viewId){ return (T)checkView(parent.findViewById(viewId)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\activity\UiUtilities.java,setVisibilitySafe,public static void  (View parent int viewId int visibility){ setVisibilitySafe(parent.findViewById(viewId) visibility); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\data\ClosingMatrixCursor.java,ClosingMatrixCursor,public  (String[] columnNames Cursor innerCursor){ super(columnNames); mInnerCursor=innerCursor; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\data\ClosingMatrixCursor.java,close,@Override public void  (){ if (mInnerCursor != null) { mInnerCursor.close(); } super.close(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailAddressValidator.java,fixText,"@Override public CharSequence  (CharSequence invalidText){ return """"; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailAddressValidator.java,isValid,@Override public boolean  (CharSequence text){ return Address.parse(text.toString()).length == 1; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\internet\EmailHtmlUtil.java,escapeCharacterToDisplay,"public static String  (String text){ Pattern pattern=PLAIN_TEXT_TO_ESCAPE; Matcher match=pattern.matcher(text); if (match.find()) { StringBuilder out=new StringBuilder(); int end=0; do { int start=match.start(); out.append(text.substring(end start)); end=match.end(); int c=text.codePointAt(start); if (c == ' ') { for (int i=1  n=end - start; i < n; ++i) { out.append(""&nbsp;""); } out.append(' '); } else if (c == '\r' || c == '\n') { out.append(""<br>""); } else if (c == '<') { out.append(""&lt;""); } else if (c == '>') { out.append(""&gt;""); } else if (c == '&') { out.append(""&amp;""); } } while (match.find()); out.append(text.substring(end)); text=out.toString(); } return text; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\StatusOutputStream.java,StatusOutputStream,public  (OutputStream out){ super(out); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\StatusOutputStream.java,write,"@Override public void  (int oneByte) throws IOException { super.write(oneByte); mCount++; if (Logging.LOGD) { if (mCount % 1024 == 0) { LogUtils.v(Logging.LOG_TAG ""# "" + mCount); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,AccountContentObserver,public  (final Handler handler final Context context){ super(handler); mContext=context; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,EmailNotificationController,protected  (Context context Clock clock){ mContext=context.getApplicationContext(); EmailContent.init(context); mNotificationManager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE); mClock=clock; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,MessageContentObserver,public  (final Handler handler final Context context final long accountId){ super(handler); mContext=context; mAccountId=accountId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,NotificationThread,"public  (){ new Thread(null this ""EmailNotification"").start(); synchronized (mLock) { while (mLooper == null) { try { mLock.wait(); } catch ( InterruptedException ex) { } } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,cancelLoginFailedNotification,@Override public void  (long accountId){ mNotificationManager.cancel(getLoginFailedNotificationId(accountId)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,cancelNotifications,"@Override public void  (final Context context final Account account){ final EmailServiceUtils.EmailServiceInfo serviceInfo=EmailServiceUtils.getServiceInfoForAccount(context account.mId); if (serviceInfo == null) { LogUtils.d(LOG_TAG ""Can't cancel notific"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,cancelPasswordExpirationNotifications,@Override public void  (){ mNotificationManager.cancel(NOTIFICATION_ID_PASSWORD_EXPIRING); mNotificationManager.cancel(NOTIFICATION_ID_PASSWORD_EXPIRED); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,cancelSecurityNeededNotification,@Override public void  (){ EmailAsyncTask.runAsyncParallel(new Runnable(){ @Override public void run(){ Cursor c=mContext.getContentResolver().query(Account.CONTENT_URI Account.ID_PROJECTION null null null); try { while (c.moveToNext()) { long id=c.getLon
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,createBaseAccountNotificationBuilder,private NotificationCompat.Builder  (long accountId String ticker CharSequence title String contentText Intent intent Integer number boolean enableAudio boolean ongoing){ PendingIntent pending=null; if (intent != null) { pending=PendingIntent.getActivity(mContext 0 intent PendingIntent.FLAG_UPDATE_CURRENT); } final NotificationCompat.Builder builder=new NotificationCompat.Builder(mContext).setContentTitle(title).setContentText(contentText).setContentIntent(pending).setNumber(number == null ? 0 : number).setSmallIcon(R.drawable.ic_notification_mail_24dp).setWhen(mClock.getTime()).setTicker(ticker).setOngoing(ongoing); if (enableAudio) { Account account=Account.restoreAccountWithId(mContext accountId); setupSoundAndVibration(builder account); } return builder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,ensureHandlerExists,"private static synchronized void  (){ if (sNotificationThread == null) { sNotificationThread=new NotificationThread(); sNotificationHandler=new Handler(sNotificationThread.getLooper() new Handler.Callback(){ @Override public boolean handleMessage( final android.os.Message message){ LogUtils.d(LOG_TAG ""Delayed notification processing""); synchronized (sNotificationDelayedMessageLock) { sNotificationDelayedMessagePending=false; final Context context=(Context)message.obj; if (sRefreshAllNeeded) { sRefreshAllNeeded=false; refreshAllNotificationsInternal(context); } for ( final Long accountId : sRefreshAccountSet) { refreshNotificationsForAccountInternal(context accountId); } sRefreshAccountSet.clear(); } return true; } } ); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,getInstance,public static synchronized EmailNotificationController  (Context context){ if (sInstance == null) { sInstance=new EmailNotificationController(context Clock.INSTANCE); } return sInstance; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,getLoginFailedNotificationId,private static int  (long accountId){ return NOTIFICATION_ID_BASE_LOGIN_WARNING + (int)accountId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,getLooper,public Looper  (){ return mLooper; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,handleMessage,"@Override public boolean  (final android.os.Message message){ LogUtils.d(LOG_TAG ""Delayed notification processing""); synchronized (sNotificationDelayedMessageLock) { sNotificationDelayedMessagePending=false; final Context context=(Context)message.obj; if "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,handleUpdateNotificationIntent,@Override public void  (Context context Intent intent){ final Uri accountUri=intent.getParcelableExtra(UIProvider.UpdateNotificationExtras.EXTRA_ACCOUNT); final Uri folderUri=intent.getParcelableExtra(UIProvider.UpdateNotificationExtras.EXTRA_FOLDER); fin
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,needsOngoingNotification,private static boolean  (int notificationId){ return (notificationId & NOTIFICATION_ID_BASE_MASK) == NOTIFICATION_ID_BASE_SECURITY_NEEDED; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,onChange,@Override public void  (final boolean selfChange){ final ContentResolver resolver=mContext.getContentResolver(); final Cursor c=resolver.query(Account.CONTENT_URI EmailContent.ID_PROJECTION null null null); final Set<Long> newAccountList=new HashSet<Long>
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,refreshAllNotifications,private static void  (final Context context){ synchronized (sNotificationDelayedMessageLock) { if (sNotificationDelayedMessagePending) { sRefreshAllNeeded=true; } else { ensureHandlerExists(); sNotificationHandler.sendMessageDelayed(android.os.Message.obtain(sNotificationHandler NOTIFICATION_DELAYED_MESSAGE context) NOTIFICATION_DELAY); sNotificationDelayedMessagePending=true; refreshAllNotificationsInternal(context); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,refreshAllNotificationsInternal,private static void  (final Context context){ NotificationUtils.resendNotifications(context false null null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,refreshNotificationsForAccount,private static void  (final Context context final long accountId){ synchronized (sNotificationDelayedMessageLock) { if (sNotificationDelayedMessagePending) { sRefreshAccountSet.add(accountId); } else { ensureHandlerExists(); sNotificationHandler.sendMessageDelayed(android.os.Message.obtain(sNotificationHandler NOTIFICATION_DELAYED_MESSAGE context) NOTIFICATION_DELAY); sNotificationDelayedMessagePending=true; refreshNotificationsForAccountInternal(context accountId); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,refreshNotificationsForAccountInternal,"private static void  (final Context context final long accountId){ final Uri accountUri=EmailProvider.uiUri(""uiaccount"" accountId); final ContentResolver contentResolver=context.getContentResolver(); final Cursor mailboxCursor=contentResolver.query(ContentUris.withAppendedId(EmailContent.MAILBOX_NOTIFICATION_URI accountId) null null null null); try { while (mailboxCursor.moveToNext()) { final long mailboxId=mailboxCursor.getLong(EmailContent.NOTIFICATION_MAILBOX_ID_COLUMN); if (mailboxId == 0) continue; final int unseenCount=mailboxCursor.getInt(EmailContent.NOTIFICATION_MAILBOX_UNSEEN_COUNT_COLUMN); final int unreadCount; if (unseenCount == 0) { unreadCount=0; } else { unreadCount=mailboxCursor.getInt(EmailContent.NOTIFICATION_MAILBOX_UNREAD_COUNT_COLUMN); } final Uri folderUri=EmailProvider.uiUri(""uifolder"" mailboxId); LogUtils.d(LOG_TAG ""Changes to account "" + accountId + ""  folder: ""+ mailboxId+ ""  unreadCount: ""+ unreadCount+ ""  unseenCount: ""+ unseenCount); final Intent intent=new Intent(UIProvider.ACTION_UPDATE_NOTIFICATION); intent.setPackage(context.getPackageName()); intent.setType(EmailProvider.EMAIL_APP_MIME_TYPE); intent.putExtra(UIProvider.UpdateNotificationExtras.EXTRA_ACCOUNT accountUri); intent.putExtra(UIProvider.UpdateNotificationExtras.EXTRA_FOLDER folderUri); intent.putExtra(UIProvider.UpdateNotificationExtras.EXTRA_UPDATED_UNREAD_COUNT unreadCount); intent.putExtra(UIProvider.UpdateNotificationExtras.EXTRA_UPDATED_UNSEEN_COUNT unseenCount); context.sendOrderedBroadcast(intent null); } } finally { mailboxCursor.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,registerMessageNotification,"private void  (final long accountId){ ContentResolver resolver=mContext.getContentResolver(); if (accountId == Account.ACCOUNT_ID_COMBINED_VIEW) { Cursor c=resolver.query(Account.CONTENT_URI EmailContent.ID_PROJECTION null null null); try { while (c.moveToNext()) { long id=c.getLong(EmailContent.ID_PROJECTION_COLUMN); registerMessageNotification(id); } } finally { c.close(); } } else { ContentObserver obs=mNotificationMap.get(accountId); if (obs != null) return; LogUtils.i(LOG_TAG ""Registering for notifications for account "" + accountId); ContentObserver observer=new MessageContentObserver(sNotificationHandler mContext accountId); resolver.registerContentObserver(Message.NOTIFIER_URI true observer); mNotificationMap.put(accountId observer); observer.onChange(true); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,run,@Override public void  (){ synchronized (mLock) { Looper.prepare(); mLooper=Looper.myLooper(); mLock.notifyAll(); } Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND); Looper.loop(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,setupSoundAndVibration,"private void  (NotificationCompat.Builder builder Account account){ String ringtoneUri=Settings.System.DEFAULT_NOTIFICATION_URI.toString(); boolean vibrate=false; final Cursor accountCursor=mContext.getContentResolver().query(EmailProvider.uiUri(""uiaccount"" account.mId) UIProvider.ACCOUNTS_PROJECTION null null null); com.android.mail.providers.Account uiAccount=null; try { if (accountCursor.moveToFirst()) { uiAccount=com.android.mail.providers.Account.builder().buildFrom(accountCursor); } } finally { accountCursor.close(); } if (uiAccount != null) { final Cursor folderCursor=mContext.getContentResolver().query(uiAccount.settings.defaultInbox UIProvider.FOLDERS_PROJECTION null null null); if (folderCursor == null) { LogUtils.w(LOG_TAG ""Null folder cursor for mailbox %s"" uiAccount.settings.defaultInbox); } else { Folder folder=null; try { if (folderCursor.moveToFirst()) { folder=new Folder(folderCursor); } } finally { folderCursor.close(); } if (folder != null) { final FolderPreferences folderPreferences=new FolderPreferences(mContext uiAccount.getEmailAddress() folder true); ringtoneUri=folderPreferences.getNotificationRingtoneUri(); vibrate=folderPreferences.isNotificationVibrateEnabled(); } else { LogUtils.e(LOG_TAG ""Null folder for mailbox %s"" uiAccount.settings.defaultInbox); } } } else { LogUtils.e(LOG_TAG ""Null uiAccount for account id %d"" account.mId); } int defaults=Notification.DEFAULT_LIGHTS; if (vibrate) { defaults|=Notification.DEFAULT_VIBRATE; } builder.setSound(TextUtils.isEmpty(ringtoneUri) ? null : Uri.parse(ringtoneUri)).setDefaults(defaults); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,showDownloadForwardFailedNotificationSynchronous,@Override public void  (Attachment attachment){ final Message message=Message.restoreMessageWithId(mContext attachment.mMessageKey); if (message == null) return; final Mailbox mailbox=Mailbox.restoreMailboxWithId(mContext message.mMailboxKey); showNotific
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,showLoginFailedNotificationSynchronous,@Override public void  (long accountId boolean incoming){ final Account account=Account.restoreAccountWithId(mContext accountId); if (account == null) return; final Mailbox mailbox=Mailbox.restoreMailboxOfType(mContext accountId Mailbox.TYPE_INBOX); if (m
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,showNotification,private void  (long accountId String ticker String title String contentText Intent intent int notificationId){ final NotificationCompat.Builder builder=createBaseAccountNotificationBuilder(accountId ticker title contentText intent null true needsOngoingNotification(notificationId)); mNotificationManager.notify(notificationId builder.build()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,showPasswordExpiredNotificationSynchronous,@Override public void  (long accountId){ final Account account=Account.restoreAccountWithId(mContext accountId); if (account == null) return; final Intent intent=AccountSecurity.actionDevicePasswordExpirationIntent(mContext accountId true); final String a
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,showPasswordExpiringNotificationSynchronous,@Override public void  (long accountId){ final Account account=Account.restoreAccountWithId(mContext accountId); if (account == null) return; final Intent intent=AccountSecurity.actionDevicePasswordExpirationIntent(mContext accountId false); final String 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,showSecurityChangedNotification,@Override public void  (Account account){ final Intent intent=new Intent(Intent.ACTION_VIEW EmailProvider.getIncomingSettingsUri(account.getId())); final String accountName=account.getDisplayName(); final String ticker=mContext.getString(R.string.security
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,showSecurityNeededNotification,@Override public void  (Account account){ Intent intent=AccountSecurity.actionUpdateSecurityIntent(mContext account.mId true); String accountName=account.getDisplayName(); String ticker=mContext.getString(R.string.security_needed_ticker_fmt accountName); 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,showSecurityUnsupportedNotification,@Override public void  (Account account){ final Intent intent=new Intent(Intent.ACTION_VIEW EmailProvider.getIncomingSettingsUri(account.getId())); final String accountName=account.getDisplayName(); final String ticker=mContext.getString(R.string.security
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,unregisterMessageNotification,"private void  (final long accountId){ ContentResolver resolver=mContext.getContentResolver(); if (accountId == Account.ACCOUNT_ID_COMBINED_VIEW) { LogUtils.i(LOG_TAG ""Unregistering notifications for all accounts""); for ( ContentObserver observer : mNotificationMap.values()) { resolver.unregisterContentObserver(observer); } mNotificationMap.clear(); } else { LogUtils.i(LOG_TAG ""Unregistering notifications for account "" + accountId); ContentObserver observer=mNotificationMap.remove(accountId); if (observer != null) { resolver.unregisterContentObserver(observer); } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailNotificationController.java,watchForMessages,@Override public void  (){ ensureHandlerExists(); sNotificationHandler.post(new Runnable(){ @Override public void run(){ ContentResolver resolver=mContext.getContentResolver(); registerMessageNotification(Account.ACCOUNT_ID_COMBINED_VIEW); if (mAccountObs
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\preferences\EmailPreferenceMigrator.java,migrate,"@SuppressWarnings(""deprecation"") protected static void  (final Context context final int oldVersion final int newVersion final List<Account> accounts){ final Preferences preferences=Preferences.getPreferences(context); final MailPrefs mailPrefs=MailPrefs."
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,CertificateSelector,public  (Context context AttributeSet attrs int defStyle){ super(context attrs defStyle); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,SavedState,private  (Parcel in){ super(in); mValue=in.readString(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,createFromParcel,@Override public SavedState  (Parcel in){ return new SavedState(in); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,getCertificate,public String  (){ return mValue; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,hasCertificate,public boolean  (){ return mValue != null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\view\CertificateSelector.java,newArray,@Override public SavedState[]  (int size){ return new SavedState[size]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailApplication.java,createInlineAttachmentViewIntent,@Override public Intent  (Context context String url ConversationMessage message){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailApplication.java,createInlineAttachmentViewIntentBuilder,@Override public InlineAttachmentViewIntentBuilder  (Account account long conversationId){ return new InlineAttachmentViewIntentBuilder(){ @Override public Intent createInlineAttachmentViewIntent( Context context  String url  ConversationMessage message){
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailApplication.java,createPreferenceMigrator,@Override public BasePreferenceMigrator  (){ return new EmailPreferenceMigrator(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\EmailApplication.java,getInstance,@Override public NotificationController  (Context context){ return EmailNotificationController.getInstance(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,StopWatch,"private  (String name){ mName=name; mStart=getCurrentTime(); mLastSplit=mStart; LogUtils.w(Logging.LOG_TAG ""StopWatch("" + mName + "") start""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,getCurrentTime,private static long  (){ return SystemClock.elapsedRealtime(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,split,"public void  (String label){ long now=getCurrentTime(); long elapse=now - mLastSplit; LogUtils.w(Logging.LOG_TAG ""StopWatch("" + mName + "") split(""+ label+ "") ""+ elapse); mLastSplit=now; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,start,public static StopWatch  (String name){ return new StopWatch(name); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\StopWatch.java,stop,"public void  (){ long now=getCurrentTime(); LogUtils.w(Logging.LOG_TAG ""StopWatch("" + mName + "") stop: ""+ (now - mLastSplit)+ "" (total ""+ (now - mStart)+ "")""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email2\ui\CreateShortcutActivityEmail.java,onCreate,@Override public void  (Bundle icicle){ super.onCreate(icicle); Account[] cachedAccounts=AccountUtils.getSyncingAccounts(this); Intent intent=getIntent(); if (cachedAccounts != null && cachedAccounts.length == 1) { intent.setClass(this FolderSelectionActi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email2\ui\MailActivityEmail.java,getViewIntent,"private Intent  (long accountId long mailboxId){ final ContentResolver contentResolver=getContentResolver(); final Cursor accountCursor=contentResolver.query(EmailProvider.uiUri(""uiaccount"" accountId) UIProvider.ACCOUNTS_PROJECTION_NO_CAPABILITIES null null null); if (accountCursor == null) { LogUtils.e(LOG_TAG ""Null account cursor for mAccountId %d"" accountId); return null; } com.android.mail.providers.Account account=null; try { if (accountCursor.moveToFirst()) { account=com.android.mail.providers.Account.builder().buildFrom(accountCursor); } } finally { accountCursor.close(); } final Cursor folderCursor=contentResolver.query(EmailProvider.uiUri(""uifolder"" mailboxId) UIProvider.FOLDERS_PROJECTION null null null); if (folderCursor == null) { LogUtils.e(LOG_TAG ""Null folder cursor for account %d  mailbox %d"" accountId mailboxId); return null; } Folder folder=null; try { if (folderCursor.moveToFirst()) { folder=new Folder(folderCursor); } else { LogUtils.e(LOG_TAG ""Empty folder cursor for account %d  mailbox %d"" accountId mailboxId); return null; } } finally { folderCursor.close(); } return Utils.createViewFolderIntent(this folder.folderUri.fullUri account); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email2\ui\MailActivityEmail.java,log,public static void  (String message){ LogUtils.d(Logging.LOG_TAG message); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email2\ui\MailActivityEmail.java,onCreate,@Override public void  (Bundle bundle){ final Intent intent=getIntent(); final Uri data=intent != null ? intent.getData() : null; if (data != null) { final int match=sUrlMatcher.match(data); switch (match) { case MATCH_LEGACY_SHORTCUT_INTENT: { final long
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,SmtpSender,"public  (Context context Account account){ mContext=context; mAccount=account; HostAuth sendAuth=account.getOrCreateHostAuthSend(context); mTransport=new MailTransport(context ""SMTP"" sendAuth); String[] userInfoParts=sendAuth.getLogin(); mUsername=userInfoParts[0]; mPassword=userInfoParts[1]; Credential cred=sendAuth.getCredential(context); if (cred != null) { mUseOAuth=true; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,close,@Override public void  (){ mTransport.close(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,executeSensitiveCommand,private String  (String command String sensitiveReplacement) throws IOException  MessagingException { if (command != null) { mTransport.writeLine(command sensitiveReplacement); } String line=mTransport.readLine(true); String result=line; while (line.length() >= 4 && line.charAt(3) == '-') { line=mTransport.readLine(true); result+=line.substring(3); } if (result.length() > 0) { char c=result.charAt(0); if ((c == '4') || (c == '5')) { throw new MessagingException(result); } } return result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,executeSimpleCommand,private String  (String command) throws IOException  MessagingException { return executeSensitiveCommand(command null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,newInstance,public static Sender  (Account account Context context) throws MessagingException { return new SmtpSender(context account); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,open,"@Override public void  () throws MessagingException { try { mTransport.open(); executeSimpleCommand(null); String localHost=""localhost""; InetAddress localAddress=mTransport.getLocalAddress(); if (localAddress != null) { StringBuilder sb=new StringBuilder("
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,saslAuthLogin,"private void  (String username String password) throws MessagingException  AuthenticationFailedException  IOException { try { executeSimpleCommand(""AUTH LOGIN""); executeSensitiveCommand(Base64.encodeToString(username.getBytes() Base64.NO_WRAP) ""/username redacted/""); executeSensitiveCommand(Base64.encodeToString(password.getBytes() Base64.NO_WRAP) ""/password redacted/""); } catch ( MessagingException me) { if (me.getMessage().length() > 1 && me.getMessage().charAt(1) == '3') { throw new AuthenticationFailedException(me.getMessage()); } throw me; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,saslAuthOAuth,"private void  (final String username final String accessToken) throws IOException  MessagingException { final String authPhrase=""user="" + username + '\001'+ ""auth=Bearer ""+ accessToken+ '\001'+ '\001'; byte[] data=Base64.encode(authPhrase.getBytes() Base64.NO_WRAP); try { executeSensitiveCommand(""AUTH XOAUTH2 "" + new String(data) ""AUTH XOAUTH2 /redacted/""); } catch ( MessagingException me) { if (me.getMessage().length() > 1 && me.getMessage().charAt(1) == '3') { throw new AuthenticationFailedException(me.getMessage()); } throw me; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,saslAuthPlain,"private void  (String username String password) throws MessagingException  AuthenticationFailedException  IOException { byte[] data=(""\000"" + username + ""\000""+ password).getBytes(); data=Base64.encode(data Base64.NO_WRAP); try { executeSensitiveCommand(""AUTH PLAIN "" + new String(data) ""AUTH PLAIN /redacted/""); } catch ( MessagingException me) { if (me.getMessage().length() > 1 && me.getMessage().charAt(1) == '3') { throw new AuthenticationFailedException(me.getMessage()); } throw me; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,sendMessage,"@Override public void  (long messageId) throws MessagingException { close(); open(); Message message=Message.restoreMessageWithId(mContext messageId); if (message == null) { throw new MessagingException(""Trying to send non-existent message id="" + Long.toS"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\email\mail\transport\SmtpSender.java,setTransport,public void  (MailTransport testTransport){ mTransport=testTransport; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\mail\providers\EmailAccountCacheProvider.java,getAuthority,@Override protected String  (){ if (sAuthority == null) { sAuthority=getContext().getString(R.string.authority_account_cache_provider); } return sAuthority; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\mail\providers\EmailAccountCacheProvider.java,getNoAccountsIntent,@Override protected Intent  (Context context){ return AuthenticatorSetupIntentHelper.actionNewAccountWithResultIntent(context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\Base64Util.java,Base64Util," (final String alphabet){ this.alphabet=alphabet.toCharArray(); if (alphabet.length() != ALPHABET_LENGTH) throw new IllegalArgumentException(""alphabet has incorrect length (should be 64  not "" + alphabet.length() + "")""); inverseAlphabet=new int[128]; Arrays.fill(inverseAlphabet -1); for (int i=0; i < this.alphabet.length; i++) { final char ch=this.alphabet[i]; if (ch >= 128) throw new IllegalArgumentException(""invalid character in alphabet: "" + ch); inverseAlphabet[ch]=i; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\Base64Util.java,contains,boolean  (final char ch){ if (ch >= 128) return false; return inverseAlphabet[ch] >= 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\Base64Util.java,getChar,byte  (final int sextet){ return (byte)alphabet[sextet]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\Base64Util.java,getSextet,int  (final byte ch){ if (ch >= 128) return -1; return inverseAlphabet[ch]; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\android\mail\browse\EmailConversationProvider.java,getAuthority,@Override protected String  (){ if (sAuthority == null) { sAuthority=getContext().getString(R.string.authority_conversation_provider); } return sAuthority; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\ModifiedUTF7Charset.java,ModifiedUTF7Charset, (String name String[] aliases){ super(name aliases MODIFIED_BASE64_ALPHABET true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\ModifiedUTF7Charset.java,canEncodeDirectly,boolean  (char ch){ if (ch == shift()) return false; return ch >= 0x20 && ch <= 0x7E; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\ModifiedUTF7Charset.java,shift,byte  (){ return '&'; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\ModifiedUTF7Charset.java,unshift,byte  (){ return '-'; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7Charset.java,UTF7Charset, (String name String[] aliases boolean includeOptional){ super(name aliases BASE64_ALPHABET false); if (includeOptional) this.directlyEncoded=SET_D + SET_O + RULE_3; else this.directlyEncoded=SET_D + RULE_3; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7Charset.java,canEncodeDirectly,boolean  (char ch){ return directlyEncoded.indexOf(ch) >= 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7Charset.java,shift,byte  (){ return '+'; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7Charset.java,unshift,byte  (){ return '-'; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\CharsetProvider.java,CharsetProvider,public  (){ charsets=Arrays.asList(new Charset[]{utf7charset imap4charset utf7oCharset}); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\CharsetProvider.java,charsetForName,@Override public Charset  (String charsetName){ charsetName=charsetName.toUpperCase(); for (Iterator<Charset> iter=charsets.iterator(); iter.hasNext(); ) { Charset charset=iter.next(); if (charset.name().equals(charsetName)) return charset; } for (Iterato
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\CharsetProvider.java,charsets,@Override public Iterator<Charset>  (){ return charsets.iterator(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharset.java,UTF7StyleCharset,protected  (String canonicalName String[] aliases String alphabet boolean strict){ super(canonicalName aliases); this.base64=new Base64Util(alphabet); this.strict=strict; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,UTF7StyleCharsetEncoder, (UTF7StyleCharset cs Base64Util base64 boolean strict){ super(cs AVG_BYTES_PER_CHAR MAX_BYTES_PER_CHAR); this.cs=cs; this.base64=base64; this.strict=strict; this.shift=cs.shift(); this.unshift=cs.unshift(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,encodeBase64,private void  (char ch ByteBuffer out){ if (!base64mode) out.put(shift); base64mode=true; bitsToOutput+=16; while (bitsToOutput >= 6) { bitsToOutput-=6; sextet+=(ch >> bitsToOutput); sextet&=0x3F; out.put(base64.getChar(sextet)); sextet=0; } sextet=(ch << (6 - bitsToOutput)) & 0x3F; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,encodeLoop,protected CoderResult  (CharBuffer in ByteBuffer out){ while (in.hasRemaining()) { if (out.remaining() < 4) return CoderResult.OVERFLOW; char ch=in.get(); if (cs.canEncodeDirectly(ch)) { unshift(out ch); out.put((byte)ch); } else if (!base64mode && ch == shift) { out.put(shift); out.put(unshift); } else encodeBase64(ch out); } if (base64mode && useUglyHackToForceCallToFlushInJava5 && out.limit() != MAX_BYTES_PER_CHAR * in.limit()) return CoderResult.OVERFLOW; return CoderResult.UNDERFLOW; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,implFlush,protected CoderResult  (ByteBuffer out){ if (base64mode) { if (out.remaining() < 2) return CoderResult.OVERFLOW; if (bitsToOutput != 0) out.put(base64.getChar(sextet)); out.put(unshift); } return CoderResult.UNDERFLOW; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,implReset,protected void  (){ base64mode=false; sextet=0; bitsToOutput=0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetEncoder.java,unshift,private void  (ByteBuffer out char ch){ if (!base64mode) return; if (bitsToOutput != 0) out.put(base64.getChar(sextet)); if (base64.contains(ch) || ch == unshift || strict) out.put(unshift); base64mode=false; sextet=0; bitsToOutput=0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\IntentUtilitiesTests.java,brokentestGetAccountUuidFromIntent,"public void  (){ Intent i; i=new Intent(getContext() getClass()); assertEquals(null IntentUtilities.getAccountUuidFromIntent(i)); i=new Intent(Intent.ACTION_VIEW Uri.parse(""content://s/"")); assertEquals(null IntentUtilities.getAccountUuidFromIntent(i)); i=new Intent(Intent.ACTION_VIEW Uri.parse(""content://s/?ACCOUNT_UUID="")); assertEquals(null IntentUtilities.getAccountUuidFromIntent(i)); i=new Intent(Intent.ACTION_VIEW Uri.parse(""content://s/?ACCOUNT_UUID=xyz"")); assertEquals(""xyz"" IntentUtilities.getAccountUuidFromIntent(i)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\IntentUtilitiesTests.java,brokentestGetIdFromIntent,"public void  (){ Intent i; i=new Intent(getContext() getClass()); assertEquals(-1 IntentUtilities.getAccountIdFromIntent(i)); assertEquals(-1 IntentUtilities.getMailboxIdFromIntent(i)); assertEquals(-1 IntentUtilities.getMessageIdFromIntent(i)); checkGetIdFromIntent(""content://s/"" -1); checkGetIdFromIntent(""content://s/?ID="" -1); checkGetIdFromIntent(""content://s/?ID=x"" -1); checkGetIdFromIntent(""content://s/?ID=-100"" -100); checkGetIdFromIntent(""content://s/?ID=200"" 200); i=new Intent(Intent.ACTION_VIEW Uri.parse(""content://s/?ACCOUNT_ID=5&MAILBOX_ID=6&MESSAGE_ID=7"")); assertEquals(5 IntentUtilities.getAccountIdFromIntent(i)); assertEquals(6 IntentUtilities.getMailboxIdFromIntent(i)); assertEquals(7 IntentUtilities.getMessageIdFromIntent(i)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\IntentUtilitiesTests.java,brokentestSimple,"public void  (){ final Uri.Builder b=IntentUtilities.createActivityIntentUrlBuilder(""/abc""); IntentUtilities.setAccountId(b 10); IntentUtilities.setMailboxId(b 20); IntentUtilities.setMessageId(b 30); IntentUtilities.setAccountUuid(b ""*uuid*""); final Uri u=b.build(); assertEquals(""content"" u.getScheme()); assertEquals(""ui.email.android.com"" u.getAuthority()); assertEquals(""/abc"" u.getPath()); final Intent i=new Intent(Intent.ACTION_MAIN u); assertEquals(10 IntentUtilities.getAccountIdFromIntent(i)); assertEquals(20 IntentUtilities.getMailboxIdFromIntent(i)); assertEquals(30 IntentUtilities.getMessageIdFromIntent(i)); assertEquals(""*uuid*"" IntentUtilities.getAccountUuidFromIntent(i)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\IntentUtilitiesTests.java,checkGetIdFromIntent,"public void  (String uri long expected){ Intent i=new Intent(Intent.ACTION_VIEW Uri.parse(uri.replace(""ID"" ""ACCOUNT_ID""))); assertEquals(expected IntentUtilities.getAccountIdFromIntent(i)); i=new Intent(Intent.ACTION_VIEW Uri.parse(uri.replace(""ID"" ""MAILBOX_ID""))); assertEquals(expected IntentUtilities.getMailboxIdFromIntent(i)); i=new Intent(Intent.ACTION_VIEW Uri.parse(uri.replace(""ID"" ""MESSAGE_ID""))); assertEquals(expected IntentUtilities.getMessageIdFromIntent(i)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,UTF7StyleCharsetDecoder, (UTF7StyleCharset cs Base64Util base64 boolean strict){ super(cs 0.6f 1.0f); this.base64=base64; this.strict=strict; this.shift=cs.shift(); this.unshift=cs.unshift(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,base64bitsWaiting,private boolean  (){ return tempChar != 0 || bitsRead >= 6; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,decodeLoop,protected CoderResult  (ByteBuffer in CharBuffer out){ while (in.hasRemaining()) { byte b=in.get(); if (base64mode) { if (b == unshift) { if (base64bitsWaiting()) return malformed(in); if (justShifted) { if (!out.hasRemaining()) return overflow(in); out.put((char)shift); } else justUnshifted=true; setUnshifted(); } else { if (!out.hasRemaining()) return overflow(in); CoderResult result=handleBase64(in out b); if (result != null) return result; } justShifted=false; } else { if (b == shift) { base64mode=true; if (justUnshifted && strict) return malformed(in); justShifted=true; continue; } if (!out.hasRemaining()) return overflow(in); out.put((char)b); justUnshifted=false; } } return CoderResult.UNDERFLOW; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,handleBase64,private CoderResult  (ByteBuffer in CharBuffer out byte lastRead){ CoderResult result=null; int sextet=base64.getSextet(lastRead); if (sextet >= 0) { bitsRead+=6; if (bitsRead < 16) { tempChar+=sextet << (16 - bitsRead); } else { bitsRead-=16; tempChar+=sextet >> (bitsRead); out.put((char)tempChar); tempChar=(sextet << (16 - bitsRead)) & 0xFFFF; } } else { if (strict) return malformed(in); out.put((char)lastRead); if (base64bitsWaiting()) result=malformed(in); setUnshifted(); } return result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,implFlush,protected CoderResult  (CharBuffer out){ if ((base64mode && strict) || base64bitsWaiting()) return CoderResult.malformedForLength(1); return CoderResult.UNDERFLOW; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,implReset,protected void  (){ setUnshifted(); justUnshifted=false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,malformed,private CoderResult  (ByteBuffer in){ in.position(in.position() - 1); return CoderResult.malformedForLength(1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,overflow,private CoderResult  (ByteBuffer in){ in.position(in.position() - 1); return CoderResult.OVERFLOW; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\src\com\beetstra\jutf7\UTF7StyleCharsetDecoder.java,setUnshifted,private void  (){ base64mode=false; bitsRead=0; tempChar=0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,AccountTestCase,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,createAccountManagerAccount,"protected void  (String username){ final android.accounts.Account account=makeAccountManagerAccount(username); AccountManager.get(getContext()).addAccountExplicitly(account ""password"" null); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,deleteAccountManagerAccount,protected void  (android.accounts.Account account){ AccountManagerFuture<Boolean> future=AccountManager.get(getContext()).removeAccount(account null null); try { future.getResult(); } catch ( OperationCanceledException e) { } catch ( AuthenticatorException e) { } catch ( IOException e) { } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,deleteTemporaryAccountManagerAccounts,protected void  (){ for ( android.accounts.Account accountManagerAccount : getExchangeAccounts()) { if (accountManagerAccount.name.startsWith(TEST_ACCOUNT_PREFIX) && accountManagerAccount.name.endsWith(TEST_ACCOUNT_SUFFIX)) { deleteAccountManagerAccount(accountManagerAccount); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,getAccountManagerAccounts,protected android.accounts.Account[]  (android.accounts.Account[] baseline){ android.accounts.Account[] rawList=getExchangeAccounts(); if (baseline.length == 0) { return rawList; } HashSet<android.accounts.Account> set=new HashSet<android.accounts.Account>(); for ( android.accounts.Account addAccount : rawList) { set.add(addAccount); } for ( android.accounts.Account removeAccount : baseline) { set.remove(removeAccount); } return set.toArray(new android.accounts.Account[0]); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,getExchangeAccounts,protected android.accounts.Account[]  (){ return AccountManager.get(getContext()).getAccountsByType(TEST_ACCOUNT_TYPE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,getTestAccountEmailAddress,protected String  (String name){ return TEST_ACCOUNT_PREFIX + name + TEST_ACCOUNT_SUFFIX; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,getTestAccountName,protected String  (String name){ return TEST_ACCOUNT_PREFIX + name; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,makeAccountManagerAccount,protected android.accounts.Account  (String username){ return new android.accounts.Account(username TEST_ACCOUNT_TYPE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,makeExchangeServiceAccountList,protected ArrayList<Account>  (){ ArrayList<Account> accountList=new ArrayList<Account>(); Cursor c=getMockContext().getContentResolver().query(Account.CONTENT_URI Account.CONTENT_PROJECTION null null null); try { while (c.moveToNext()) { Account account=new Account(); account.restore(c); accountList.add(account); } } finally { c.close(); } return accountList; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\AccountTestCase.java,setupProviderAndAccountManagerAccount,protected Account  (String username){ createAccountManagerAccount(username + TEST_ACCOUNT_SUFFIX); return ProviderTestUtils.setupAccount(username true getMockContext()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,AccountSetupOptionsTests,public  (){ super(AccountSetupFinal.class); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,checkBackgroundAttachments,"private void  (String storeUri boolean expectVisible) throws URISyntaxException { Intent i=getTestIntent(""Name"" storeUri); this.setActivityIntent(i); getActivityAndFields(); boolean isNull=mBackgroundAttachmentsView == null; boolean isVisible=!isNull && (mBackgroundAttachmentsView.getVisibility() == View.VISIBLE); if (!expectVisible) { assertTrue(!isVisible); } else { assertTrue(!isNull); assertTrue(isVisible); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,frequencySpinnerHasValue,private boolean  (int value){ SpinnerAdapter sa=mCheckFrequencyView.getAdapter(); for (int i=0; i < sa.getCount(); ++i) { SpinnerOption so=(SpinnerOption)sa.getItem(i); if (so != null && ((Integer)so.value) == value) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,getActivityAndFields,private void  (){ mActivity=getActivity(); mCheckFrequencyView=(Spinner)mActivity.findViewById(R.id.account_check_frequency); mBackgroundAttachmentsView=(CheckBox)mActivity.findViewById(R.id.account_background_attachments); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,getTestIntent,private Intent  (String name String storeUri) throws URISyntaxException { final Account account=new Account(); account.setSenderName(name); final Context context=getInstrumentation().getTargetContext(); final HostAuth auth=account.getOrCreateHostAuthRecv(context); auth.setHostAuthFromString(storeUri); final SetupDataFragment setupDataFragment=new SetupDataFragment(); setupDataFragment.setFlowMode(AuthenticatorSetupIntentHelper.FLOW_MODE_NORMAL); setupDataFragment.setAccount(account); final Intent i=new Intent(AccountSetupFinal.ACTION_JUMP_TO_OPTIONS); i.putExtra(SetupDataFragment.EXTRA_SETUP_DATA setupDataFragment); return i; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,testBackgroundAttachmentsEas,"public void  () throws URISyntaxException { checkBackgroundAttachments(""eas://user:password@server.com"" true); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,testBackgroundAttachmentsImap,"public void  () throws URISyntaxException { checkBackgroundAttachments(""imap://user:password@server.com"" true); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,testBackgroundAttachmentsPop,"public void  () throws URISyntaxException { checkBackgroundAttachments(""pop3://user:password@server.com"" false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,testPushOptionEAS,"public void  () throws URISyntaxException { Intent i=getTestIntent(""Name"" ""eas://user:password@server.com""); this.setActivityIntent(i); getActivityAndFields(); boolean hasPush=frequencySpinnerHasValue(Account.CHECK_INTERVAL_PUSH); assertTrue(hasPush); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,testPushOptionIMAP,"public void  () throws URISyntaxException { Intent i=getTestIntent(""Name"" ""imap://user:password@server.com""); this.setActivityIntent(i); getActivityAndFields(); boolean hasPush=frequencySpinnerHasValue(Account.CHECK_INTERVAL_PUSH); assertFalse(hasPush); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOptionsTests.java,testPushOptionPOP,"public void  () throws URISyntaxException { Intent i=getTestIntent(""Name"" ""pop3://user:password@server.com""); this.setActivityIntent(i); getActivityAndFields(); boolean hasPush=frequencySpinnerHasValue(Account.CHECK_INTERVAL_PUSH); assertFalse(hasPush); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,AccountSetupOutgoingTests,public  (){ super(AccountSetupFinal.class); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,brokentestPasswordNoTrim,"@UiThreadTest public void  () throws URISyntaxException { getActivityAndFields(); checkPassword(null false); checkPassword("" leading"" true); checkPassword(""trailing "" true); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,checkPassword,private void  (String password boolean expectNext) throws URISyntaxException { mAuthenticationView.setPassword(password); if (expectNext) { assertTrue(isNextButtonEnabled()); } else { assertFalse(isNextButtonEnabled()); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,getActivityAndFields,private void  (){ mActivity=getActivity(); mServerView=(EditText)mActivity.findViewById(R.id.account_server); mAuthenticationView=(AuthenticationView)mActivity.findViewById(R.id.authentication_view); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,getTestIntent,private Intent  (String senderUriString) throws URISyntaxException { final Account account=new Account(); final Context context=getInstrumentation().getTargetContext(); final HostAuth auth=account.getOrCreateHostAuthSend(context); auth.setHostAuthFromString(senderUriString); final SetupDataFragment setupDataFragment=new SetupDataFragment(); setupDataFragment.setFlowMode(AuthenticatorSetupIntentHelper.FLOW_MODE_NORMAL); setupDataFragment.setAccount(account); final Intent i=new Intent(AccountSetupFinal.ACTION_JUMP_TO_OUTGOING); i.putExtra(SetupDataFragment.EXTRA_SETUP_DATA setupDataFragment); return i; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,isNextButtonEnabled,private boolean  (){ final View nextButton=mActivity.findViewById(R.id.next); return nextButton.isEnabled(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,run,@Override public void  (){ final CheckBox requireLoginView=(CheckBox)mActivity.findViewById(R.id.account_require_login); requireLoginView.setChecked(true); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,setUp,"@Override protected void  () throws Exception { super.setUp(); Intent i=getTestIntent(""smtp://user:password@server.com:999""); setActivityIntent(i); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,testBadServerVariants,"@UiThreadTest public void  (){ getActivityAndFields(); assertTrue(isNextButtonEnabled()); mServerView.setText("" ""); assertFalse(isNextButtonEnabled()); mServerView.setText(""serv$er.com""); assertFalse(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,testBadUriNoPassword,"public void  () throws URISyntaxException { Intent i=getTestIntent(""smtp://user@server.com:999""); setActivityIntent(i); getActivityAndFields(); assertFalse(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,testBadUriNoUser,"public void  () throws Throwable { Intent i=getTestIntent(""smtp://:password@server.com:999""); setActivityIntent(i); getActivityAndFields(); runTestOnUiThread(new Runnable(){ @Override public void run(){ final CheckBox requireLoginView=(CheckBox)mActivity.findViewById(R.id.account_require_login); requireLoginView.setChecked(true); } } ); assertFalse(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,testGoodServerVariants,"@UiThreadTest public void  (){ getActivityAndFields(); assertTrue(isNextButtonEnabled()); mServerView.setText("" server.com ""); assertTrue(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,testGoodUri,@UiThreadTest public void  (){ getActivityAndFields(); assertTrue(isNextButtonEnabled()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupOutgoingTests.java,testGoodUriNoPort,"public void  () throws URISyntaxException { Intent i=getTestIntent(""smtp://user:password@server.com""); setActivityIntent(i); getActivityAndFields(); assertTrue(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,EmailPreferenceActivityTests,public  (){ super(EmailPreferenceActivity.class); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,frequencySpinnerHasValue,private boolean  (int value){ CharSequence[] values=mCheckFrequency.getEntryValues(); for ( CharSequence listValue : values) { if (listValue != null && Integer.parseInt(listValue.toString()) == value) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,getActivityAndFields,private void  () throws Throwable { final EmailPreferenceActivity theActivity=getActivity(); runTestOnUiThread(new Runnable(){ public void run(){ } } ); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,getTestIntent,"private Intent  (String name String storeUri String senderUri) throws URISyntaxException { mAccount=new Account(); mAccount.setSenderName(name); mAccount.mEmailAddress=""user@server.com""; mAccount.getOrCreateHostAuthRecv(mContext).setHostAuthFromString(storeUri); mAccount.getOrCreateHostAuthSend(mContext).setHostAuthFromString(senderUri); mAccount.save(mContext); mAccountId=mAccount.mId; return null; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,setUp,@Override protected void  () throws Exception { super.setUp(); mContext=getInstrumentation().getTargetContext(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,tearDown,@Override protected void  () throws Exception { if (mAccount != null) { Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI mAccountId); mContext.getContentResolver().delete(uri null null); } super.tearDown(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,testPushOptionEAS,"public void  () throws Throwable { Intent i=getTestIntent(""Name"" ""eas://user:password@server.com"" ""eas://user:password@server.com""); setActivityIntent(i); getActivityAndFields(); boolean hasPush=frequencySpinnerHasValue(Account.CHECK_INTERVAL_PUSH); assertTrue(hasPush); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,testPushOptionIMAP,"public void  () throws Throwable { Intent i=getTestIntent(""Name"" ""imap://user:password@server.com"" ""smtp://user:password@server.com""); setActivityIntent(i); getActivityAndFields(); boolean hasPush=frequencySpinnerHasValue(Account.CHECK_INTERVAL_PUSH); assertFalse(hasPush); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\EmailPreferenceActivityTests.java,testPushOptionPOP,"public void  () throws Throwable { Intent i=getTestIntent(""Name"" ""pop3://user:password@server.com"" ""smtp://user:password@server.com""); setActivityIntent(i); getActivityAndFields(); boolean hasPush=frequencySpinnerHasValue(Account.CHECK_INTERVAL_PUSH); assertFalse(hasPush); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,AccountSetupIncomingTests,public  (){ super(AccountSetupFinal.class); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,checkPassword,private void  (String password boolean expectNext) throws URISyntaxException { mAuthenticationView.setPassword(password); if (expectNext) { assertTrue(isNextButtonEnabled()); } else { assertFalse(isNextButtonEnabled()); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,getActivityAndFields,private void  (){ mActivity=getActivity(); mServerView=(EditText)mActivity.findViewById(R.id.account_server); mAuthenticationView=(AuthenticationView)mActivity.findViewById(R.id.authentication_view); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,getTestIntent,private Intent  (String storeUriString) throws URISyntaxException { final Account account=new Account(); final Context context=getInstrumentation().getTargetContext(); final HostAuth auth=account.getOrCreateHostAuthRecv(context); auth.setHostAuthFromString(storeUriString); final SetupDataFragment setupDataFragment=new SetupDataFragment(); setupDataFragment.setFlowMode(AuthenticatorSetupIntentHelper.FLOW_MODE_NORMAL); setupDataFragment.setAccount(account); final Intent i=new Intent(AccountSetupFinal.ACTION_JUMP_TO_INCOMING); i.putExtra(SetupDataFragment.EXTRA_SETUP_DATA setupDataFragment); return i; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,isNextButtonEnabled,private boolean  (){ final View nextButton=mActivity.findViewById(R.id.next); return nextButton.isEnabled(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,setUp,"@Override protected void  () throws Exception { super.setUp(); Intent i=getTestIntent(""imap://user:password@server.com:999""); setActivityIntent(i); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,testBadServerVariants,"@UiThreadTest public void  (){ getActivityAndFields(); assertTrue(isNextButtonEnabled()); mServerView.setText("" ""); assertFalse(isNextButtonEnabled()); mServerView.setText(""serv$er.com""); assertFalse(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,testBadUriNoPassword,"public void  () throws URISyntaxException { Intent i=getTestIntent(""imap://user@server.com:999""); setActivityIntent(i); getActivityAndFields(); assertFalse(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,testBadUriNoUser,"public void  () throws URISyntaxException { Intent i=getTestIntent(""imap://:password@server.com:999""); setActivityIntent(i); getActivityAndFields(); assertFalse(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,testGoodServerVariants,"@UiThreadTest public void  (){ getActivityAndFields(); assertTrue(isNextButtonEnabled()); mServerView.setText("" server.com ""); assertTrue(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,testGoodUri,"public void  () throws URISyntaxException { Intent i=getTestIntent(""imap://user:password@server.com:999""); setActivityIntent(i); getActivityAndFields(); assertTrue(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,testGoodUriNoPort,"public void  () throws URISyntaxException { Intent i=getTestIntent(""imap://user:password@server.com""); setActivityIntent(i); getActivityAndFields(); assertTrue(isNextButtonEnabled()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSetupIncomingTests.java,testPasswordNoTrim,"@UiThreadTest public void  () throws URISyntaxException { getActivityAndFields(); checkPassword(null false); checkPassword("" leading"" true); checkPassword(""trailing "" true); checkPassword(""em bedded"" true); checkPassword("" "" true); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ControllerProviderOpsTests.java,ControllerProviderOpsTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ControllerProviderOpsTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mProviderContext=getMockContext(); mContext=getContext(); ContentCache.invalidateAllCaches(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ControllerProviderOpsTests.java,tearDown,@Override public void  () throws Exception { super.tearDown(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ControllerProviderOpsTests.java,testGetMailboxServerName,"public void  (){ try { Mailbox.getSystemMailboxName(mContext -1); fail(""Mailbox.getSystemMailboxName(mContext  -1) succeeded without an exception""); } catch ( IllegalArgumentException e) { } assertEquals(""Inbox"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_INBOX)); assertEquals(""Outbox"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_OUTBOX)); assertEquals(""Trash"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_TRASH)); assertEquals(""Sent"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_SENT)); assertEquals(""Junk"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_JUNK)); Locale savedLocale=Locale.getDefault(); Locale.setDefault(Locale.FRANCE); assertEquals(""Inbox"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_INBOX)); assertEquals(""Outbox"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_OUTBOX)); assertEquals(""Trash"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_TRASH)); assertEquals(""Sent"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_SENT)); assertEquals(""Junk"" Mailbox.getSystemMailboxName(mContext Mailbox.TYPE_JUNK)); Locale.setDefault(savedLocale); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,brokentestGuessServerName,"public void  (){ assertEquals(""foo.x.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""x.y.z"" ""foo"" null)); assertEquals(""Pop.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""Pop.y.z"" ""foo"" null)); assertEquals(""poP3.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""poP3.y.z"" ""foo"" null)); assertEquals(""iMAp.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""iMAp.y.z"" ""foo"" null)); assertEquals(""MaiL.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""MaiL.y.z"" ""foo"" null)); assertEquals(""bar.x.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""x.y.z"" null ""bar"")); assertEquals(""bar.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""Pop.y.z"" null ""bar"")); assertEquals(""bar.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""poP3.y.z"" null ""bar"")); assertEquals(""bar.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""iMAp.y.z"" null ""bar"")); assertEquals(""MaiL.y.z"" AccountSettingsUtils.inferServerName(mTestContext ""MaiL.y.z"" null ""bar"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,setUp,@Override protected void  () throws Exception { super.setUp(); mTestContext=getInstrumentation().getContext(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,testExpandTemplates,"public void  (){ Provider testProvider; testProvider=new Provider(); testProvider.domain=""cox.net""; testProvider.incomingUriTemplate=""pop3+ssl+://pop.east.$domain""; testProvider.outgoingUriTemplate=""smtp+ssl+://smtp.east.$domain""; testProvider.incomingUsernameTemplate=""$user""; testProvider.outgoingUsernameTemplate=""$user""; testProvider.expandTemplates(""replUser@cox.net""); assertEquals(""replUser"" testProvider.incomingUsername); assertEquals(""replUser"" testProvider.outgoingUsername); assertEquals(""pop3+ssl+://pop.east.cox.net"" testProvider.incomingUri); assertEquals(""smtp+ssl+://smtp.east.cox.net"" testProvider.outgoingUri); testProvider=new Provider(); testProvider.domain=""earthlink.net""; testProvider.incomingUriTemplate=""pop3://pop.earthlink.net""; testProvider.outgoingUriTemplate=""smtp://smtpauth.earthlink.net:587""; testProvider.incomingUsernameTemplate=""$email""; testProvider.outgoingUsernameTemplate=""$email""; testProvider.expandTemplates(""replUser@earthlink.net""); assertEquals(""replUser@earthlink.net"" testProvider.incomingUsername); assertEquals(""replUser@earthlink.net"" testProvider.outgoingUsername); assertEquals(""pop3://pop.earthlink.net"" testProvider.incomingUri); assertEquals(""smtp://smtpauth.earthlink.net:587"" testProvider.outgoingUri); testProvider=new Provider(); testProvider.domain=""tuffmail.com""; testProvider.incomingUriTemplate=""imap+ssl+://mail.mxes.net""; testProvider.outgoingUriTemplate=""smtp+ssl+://smtp.mxes.net""; testProvider.incomingUsernameTemplate=""$user_$domain""; testProvider.outgoingUsernameTemplate=""$user_$domain""; testProvider.expandTemplates(""replUser@tuffmail.com""); assertEquals(""replUser_tuffmail.com"" testProvider.incomingUsername); assertEquals(""replUser_tuffmail.com"" testProvider.outgoingUsername); assertEquals(""imap+ssl+://mail.mxes.net"" testProvider.incomingUri); assertEquals(""smtp+ssl+://smtp.mxes.net"" testProvider.outgoingUri); testProvider=new Provider(); testProvider.domain=""yahoo.com""; testProvider.incomingUriTemplate=""imap+ssl+://pop.yahoo.com""; testProvider.outgoingUriTemplate=""smtp+ssl+://smtp.yahoo.com""; testProvider.incomingUsernameTemplate=""joe_smith""; testProvider.outgoingUsernameTemplate=""joe_smith""; testProvider.expandTemplates(""replUser@yahoo.com""); assertEquals(""joe_smith"" testProvider.incomingUsername); assertEquals(""joe_smith"" testProvider.outgoingUsername); assertEquals(""imap+ssl+://pop.yahoo.com"" testProvider.incomingUri); assertEquals(""smtp+ssl+://smtp.yahoo.com"" testProvider.outgoingUri); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,testFindProviderForDomain,"public void  (){ Provider testProvider; testProvider=AccountSettingsUtils.findProviderForDomain(mTestContext ""gmail.com"" R.xml.test_providers); assertNotNull(testProvider); assertEquals(""imap+ssl+://imap.gmail.com"" testProvider.incomingUriTemplate); assertEquals(""smtp+ssl+://smtp.gmail.com"" testProvider.outgoingUriTemplate); assertEquals(""gmail.com"" testProvider.domain); testProvider=AccountSettingsUtils.findProviderForDomain(mTestContext ""elmore.rr.com"" R.xml.test_providers); assertNotNull(testProvider); assertEquals(""pop3://pop-server.$domain"" testProvider.incomingUriTemplate); assertEquals(""smtp://mobile-smtp.roadrunner.com"" testProvider.outgoingUriTemplate); assertEquals(""elmore.rr.com"" testProvider.domain); testProvider=AccountSettingsUtils.findProviderForDomain(mTestContext ""leonard.rr.com"" R.xml.test_providers); assertNotNull(testProvider); assertEquals(""pop3://pop-server.firstonewins.com"" testProvider.incomingUriTemplate); testProvider=AccountSettingsUtils.findProviderForDomain(mTestContext ""nonexist.com"" R.xml.test_providers); assertNull(testProvider); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\activity\setup\AccountSettingsUtilsTests.java,testMatchProvider,"public void  (){ assertTrue(AccountSettingsUtils.matchProvider(""foo.com"" ""foo.com"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.co"" ""foo.com"")); assertFalse(AccountSettingsUtils.matchProvider("""" ""foo.com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.com"" ""fo?.com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.com"" ""f??.com"")); assertTrue(AccountSettingsUtils.matchProvider(""fzz.com"" ""f??.com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.com"" ""???.???"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.com"" ""???.????"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.com"" ""*.com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.com"" ""foo.*"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.com"" ""*.*"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.com"" ""fox.*"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.com"" ""*.???"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.com"" ""*.?"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""food.barge.comb"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.bar.com"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.bar.gag.com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.*.com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.*.*"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.bar.*.*"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.bar.*com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""*.bar.com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""*.*.com"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""*.*.*"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.bar.*"")); assertTrue(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.???.*"")); assertFalse(AccountSettingsUtils.matchProvider(""foo.bar.com"" ""foo.*??.*"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,EasyMockCursor,public  (int count){ mCount=count; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,MockContext2,public  (Context baseContext){ mBaseContext=baseContext; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,MyContext,public  (){ mProvider=new MyProvider(); mContentResolver=new MockContentResolver(); mContentResolver.addProvider(EmailContent.AUTHORITY mProvider); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,MyIsolatedContext,public  (ContentResolver resolver Context targetContext Context realContext){ super(resolver targetContext); mRealContext=realContext; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,close,@Override public void  (){ mClosed=true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,delete,@Override public int  (Uri uri String selection String[] selectionArgs){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getApplicationContext,@Override public Context  (){ return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getContentResolver,@Override public ContentResolver  (){ return mContentResolver; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getCount,@Override public int  (){ return mCount; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getDir,"@Override public File  (String name int mode){ return mBaseContext.getDir(""mockcontext2_"" + name mode); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getMyProvider,public MyProvider  (){ return mProvider; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getPackageName,@Override public String  (){ return mRealContext.getPackageName(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getProviderContext,"public static Context  (Context context) throws Exception { MockContentResolver resolver=new MockContentResolver(); final String filenamePrefix=""test.""; RenamingDelegatingContext targetContextWrapper=new RenamingDelegatingContext(new MockContext2(context) context filenamePrefix); final Context providerContext=new MyIsolatedContext(resolver targetContextWrapper context); providerContext.getContentResolver(); final EmailProvider ep=new EmailProvider(); ep.attachInfo(providerContext null); resolver.addProvider(EmailContent.AUTHORITY ep); final AttachmentProvider ap=new AttachmentProvider(); ap.attachInfo(providerContext null); resolver.addProvider(Attachment.ATTACHMENT_PROVIDER_LEGACY_URI_PREFIX ap); ContentCache.invalidateAllCaches(); return providerContext; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getResources,@Override public Resources  (){ return mBaseContext.getResources(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getSharedPreferences,@Override public SharedPreferences  (String name int mode){ return new MockSharedPreferences(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getSystemService,@Override public Object  (String name){ if (Context.LAYOUT_INFLATER_SERVICE.equals(name)) { return mRealContext.getSystemService(name); } return super.getSystemService(name); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getTheme,@Override public Theme  (){ return mRealContext.getTheme(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,getType,@Override public String  (Uri uri){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,insert,@Override public Uri  (Uri uri ContentValues values){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,onCreate,@Override public boolean  (){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,query,@Override public Cursor  (Uri uri String[] projection String selection String[] selectionArgs String sortOrder){ mPassedUri=uri; mPassedProjection=projection; mPassedSelection=selection; mPassedSelectionArgs=selectionArgs; mPassedSortOrder=sortOrder; retu
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,reset,public void  (){ mQueryPresetResult=null; mPassedUri=null; mPassedProjection=null; mPassedSelection=null; mPassedSelectionArgs=null; mPassedSortOrder=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\DBTestHelper.java,update,@Override public int  (Uri uri ContentValues values String selection String[] selectionArgs){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,setUp,@Override protected void  () throws Exception { super.setUp(); TempDirectory.setTempDirectory(getContext()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,testAttachmentRoundTrip,"public void  () throws Exception { final Context context=getContext(); final MimeMultipart mp=new MimeMultipart(); mp.setSubType(""mixed""); final long size; final File tempDir=context.getCacheDir(); if (!tempDir.isDirectory() && !tempDir.mkdirs()) { fail(""Could not create temporary directory""); } final File tempAttachmentFile=File.createTempFile(""testAttachmentRoundTrip"" "".txt"" tempDir); try { final OutputStream attOut=new FileOutputStream(tempAttachmentFile); try { attOut.write(""TestData"".getBytes()); } finally { attOut.close(); } size=tempAttachmentFile.length(); final InputStream attIn=new FileInputStream(tempAttachmentFile); LegacyConversions.addAttachmentPart(mp ""text/plain"" size ""test.txt"" ""testContentId"" attIn); } finally { if (!tempAttachmentFile.delete()) { fail(""Setup failure: Could not clean up temp file""); } } final MimeMessage outMessage=new MimeMessage(); outMessage.setBody(mp); final MimeMessage inMessage; final File tempBodyFile=File.createTempFile(""testAttachmentRoundTrip"" "".eml"" context.getCacheDir()); try { final OutputStream bodyOut=new FileOutputStream(tempBodyFile); try { outMessage.writeTo(bodyOut); } finally { bodyOut.close(); } final InputStream bodyIn=new FileInputStream(tempBodyFile); try { inMessage=new MimeMessage(bodyIn); } finally { bodyIn.close(); } } finally { if (!tempBodyFile.delete()) { fail(""Setup failure: Could not clean up temp file""); } } final Multipart inBody=(Multipart)inMessage.getBody(); final Part attPart=inBody.getBodyPart(0); final Attachment att=LegacyConversions.mimePartToAttachment(attPart); assertEquals(att.mFileName ""test.txt""); assertEquals(att.mMimeType ""text/plain""); assertEquals(att.mSize size); assertEquals(att.mContentId ""testContentId""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,testUpdateBodyFieldsNullText,"public void  () throws MessagingException { ArrayList<Part> viewables=new ArrayList<Part>(); viewables.add(new MimeBodyPart(null ""text/plain"")); final BodyFieldData data=ConversionUtilities.parseBodyFields(viewables); assertNull(data.textContent); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,testUpdateMessageFields_Basic,"public void  () throws MessagingException { final MimeMessage message=new MimeMessage(); message.setUid(""UID.12345678""); message.setSentDate(new Date(1)); message.setMessageId(""Test-Message-ID""); message.setSubject(""This is the subject""); final EmailContent.Message localMessage=new EmailContent.Message(); final boolean result=LegacyConversions.updateMessageFields(localMessage message 1 1); assertTrue(result); assertEquals(message.getUid() localMessage.mServerId); assertEquals(message.getSubject() localMessage.mSubject); assertEquals(message.getMessageId() localMessage.mMessageId); assertEquals(message.getSentDate().getTime() localMessage.mTimeStamp); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,testUpdateMessageFields_EncodedAddresses,"public void  () throws MessagingException { final String e=""=?EUC-KR?B?uvG50Ln4yKO4pg==?=""; final String d=""\uBE44\uBC00\uBC88\uD638\uB97C""; String fromList=String.format(""%s <sender@droid.com>"" e); String replyToList=String.format(""%s <reply1@droid.com> %s <reply2@droid.com>"" e e); String toList=String.format(""%s <toA@droid.com> %s <toB@droid.com>"" e e); String ccList=String.format(""%s <ccA@droid.com> %s <ccB@droid.com>"" e e); String bccList=String.format(""%s <bccA@droid.com> %s <bccB@droid.com>"" e e); final Address from=Address.fromHeader(fromList)[0]; final Address[] replies=Address.fromHeader(replyToList); final Address[] tos=Address.fromHeader(toList); final Address[] ccs=Address.fromHeader(ccList); final Address[] bccs=Address.fromHeader(bccList); final MimeMessage message=new MimeMessage(); message.setFrom(from); message.setReplyTo(replies); message.setRecipients(RecipientType.TO tos); message.setRecipients(RecipientType.CC ccs); message.setRecipients(RecipientType.BCC bccs); final EmailContent.Message localMessage=new EmailContent.Message(); final boolean result=LegacyConversions.updateMessageFields(localMessage message 1 1); assertTrue(result); String decodedFrom=String.format(""%s <sender@droid.com>"" d); String decodedReply=String.format(""%s <reply1@droid.com> %s <reply2@droid.com>"" d d); String decodedTo=String.format(""%s <toA@droid.com> %s <toB@droid.com>"" d d); String decodedCc=String.format(""%s <ccA@droid.com> %s <ccB@droid.com>"" d d); String decodedBcc=String.format(""%s <bccA@droid.com> %s <bccB@droid.com>"" d d); assertEquals(decodedFrom localMessage.mFrom); assertEquals(decodedReply localMessage.mReplyTo); assertEquals(decodedTo localMessage.mTo); assertEquals(decodedCc localMessage.mCc); assertEquals(decodedBcc localMessage.mBcc); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,testUpdateMessageFields_NoMessageId,"public void  () throws MessagingException { final MimeMessage message=new MimeMessage(); message.setMessageId(""Test-Message-ID""); message.removeHeader(""Message-ID""); final EmailContent.Message localMessage=new EmailContent.Message(); localMessage.mMessageId=""Test-Message-ID-Second""; final boolean result=LegacyConversions.updateMessageFields(localMessage message 1 1); assertTrue(result); assertEquals(""Test-Message-ID-Second"" localMessage.mMessageId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTest.java,testUpdateMessageFields_PlainAddresses,"public void  () throws MessagingException { final String fromList=""Sender <sender@droid.com>""; final String replyToList=""Reply1 <reply1@droid.com> Reply2 <reply2@droid.com>""; final String toList=""ToA <toA@droid.com> ToB <toB@droid.com>""; final String ccList=""CcA <ccA@droid.com> CcB <ccB@droid.com>""; final String bccList=""BccA <bccA@droid.com> Bcc2 <bccB@droid.com>""; final Address from=Address.fromHeader(fromList)[0]; final Address[] replies=Address.fromHeader(replyToList); final Address[] tos=Address.fromHeader(toList); final Address[] ccs=Address.fromHeader(ccList); final Address[] bccs=Address.fromHeader(bccList); final MimeMessage message=new MimeMessage(); message.setFrom(from); message.setReplyTo(replies); message.setRecipients(RecipientType.TO tos); message.setRecipients(RecipientType.CC ccs); message.setRecipients(RecipientType.BCC bccs); final EmailContent.Message localMessage=new EmailContent.Message(); final boolean result=LegacyConversions.updateMessageFields(localMessage message 1 1); assertTrue(result); assertEquals(fromList localMessage.mFrom); assertEquals(replyToList localMessage.mReplyTo); assertEquals(toList localMessage.mTo); assertEquals(ccList localMessage.mCc); assertEquals(bccList localMessage.mBcc); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapElementTest.java,testNone,public void  (){ assertFalse(ImapElement.NONE.isList()); assertFalse(ImapElement.NONE.isString()); assertTrue(ImapElement.NONE.equalsForTest(ImapElement.NONE)); assertFalse(ImapElement.NONE.equalsForTest(null)); assertFalse(ImapElement.NONE.equalsForTest(ImapTestUtils.STRING_1)); assertFalse(ImapElement.NONE.equalsForTest(ImapTestUtils.LIST_1)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,LegacyConversionsTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,brokentestAddAttachments,"public void  () throws MessagingException  IOException { final long accountId=1; final long mailboxId=1; final EmailContent.Message localMessage=ProviderTestUtils.setupMessage(""local-message"" accountId mailboxId false true mProviderContext); final Message legacyMessage=prepareLegacyMessageWithAttachments(2 false); convertAndCheckcheckAddedAttachments(localMessage legacyMessage); final EmailContent.Message localMessage2=ProviderTestUtils.setupMessage(""local-message"" accountId mailboxId false true mProviderContext); final Message legacyMessage2=prepareLegacyMessageWithAttachments(2 true); convertAndCheckcheckAddedAttachments(localMessage2 legacyMessage2); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,brokentestAddDuplicateAttachments,"public void  () throws MessagingException  IOException { final long accountId=1; final long mailboxId=1; final EmailContent.Message localMessage=ProviderTestUtils.setupMessage(""local-message"" accountId mailboxId false true mProviderContext); Message legacyMessage=prepareLegacyMessageWithAttachments(2 false); ArrayList<Part> viewables=new ArrayList<Part>(); ArrayList<Part> attachments=new ArrayList<Part>(); MimeUtility.collectParts(legacyMessage viewables attachments); LegacyConversions.updateAttachments(mProviderContext localMessage attachments); Uri uri=ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI localMessage.mId); assertEquals(2 EmailContent.count(mProviderContext uri null null)); LegacyConversions.updateAttachments(mProviderContext localMessage attachments); assertEquals(2 EmailContent.count(mProviderContext uri null null)); legacyMessage=prepareLegacyMessageWithAttachments(4 false); viewables=new ArrayList<Part>(); attachments=new ArrayList<Part>(); MimeUtility.collectParts(legacyMessage viewables attachments); LegacyConversions.updateAttachments(mProviderContext localMessage attachments); assertEquals(4 EmailContent.count(mProviderContext uri null null)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,brokentestAttachmentDispositions,"public void  () throws MessagingException  IOException { final long accountId=1; final long mailboxId=1; BodyPart[] sourceAttachments=new BodyPart[3]; BodyPart attachmentPart; attachmentPart=MessageTestUtils.bodyPart(""image/jpg"" null); attachmentPart.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""image/jpg""); attachmentPart.setHeader(MimeHeader.HEADER_CONTENT_TRANSFER_ENCODING ""base64""); attachmentPart.setHeader(MimeHeader.HEADER_CONTENT_DISPOSITION ""attachment;\n filename=\""file-1\"";\n size=100""); attachmentPart.setHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA ""100""); sourceAttachments[0]=attachmentPart; attachmentPart=MessageTestUtils.bodyPart(""image/gif"" null); attachmentPart.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""image/gif""); attachmentPart.setHeader(MimeHeader.HEADER_CONTENT_TRANSFER_ENCODING ""base64""); attachmentPart.setHeader(MimeHeader.HEADER_CONTENT_DISPOSITION ""inline;\n filename=\""file-2\"";\n size=200""); attachmentPart.setHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA ""101""); sourceAttachments[1]=attachmentPart; attachmentPart=MessageTestUtils.bodyPart(""text/calendar"" null); attachmentPart.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/calendar; charset=UTF-8; method=REQUEST""); attachmentPart.setHeader(MimeHeader.HEADER_CONTENT_TRANSFER_ENCODING ""7bit""); attachmentPart.setHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA ""102""); sourceAttachments[2]=attachmentPart; final EmailContent.Message localMessage=ProviderTestUtils.setupMessage(""local-message"" accountId mailboxId false true mProviderContext); final Message legacyMessage=prepareLegacyMessageWithAttachments(sourceAttachments); convertAndCheckcheckAddedAttachments(localMessage legacyMessage); convertAndCheckcheckAddedAttachments(localMessage legacyMessage); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,brokentestMakeLegacyMessage,"public void  () throws MessagingException { long account1Id=1; long mailbox1Id=1; EmailContent.Message localMessage1=ProviderTestUtils.setupMessage(""make-legacy"" account1Id mailbox1Id false true mProviderContext); Message getMessage1=LegacyConversions.makeMessage(mProviderContext localMessage1); checkLegacyMessage(""no body"" localMessage1 getMessage1); EmailContent.Message localMessage2=ProviderTestUtils.setupMessage(""make-legacy"" account1Id mailbox1Id true false mProviderContext); localMessage2.mFlags&=~EmailContent.Message.FLAG_TYPE_MASK; localMessage2.save(mProviderContext); Message getMessage2=LegacyConversions.makeMessage(mProviderContext localMessage2); checkLegacyMessage(""simple body"" localMessage2 getMessage2); EmailContent.Message localMessage3=ProviderTestUtils.setupMessage(""make-legacy"" account1Id mailbox1Id true false mProviderContext); localMessage3.mFlags&=~EmailContent.Message.FLAG_TYPE_MASK; localMessage3.mFlags|=EmailContent.Message.FLAG_TYPE_REPLY; localMessage3.save(mProviderContext); Message getMessage3=LegacyConversions.makeMessage(mProviderContext localMessage3); checkLegacyMessage(""reply-to"" localMessage3 getMessage3); EmailContent.Message localMessage4=ProviderTestUtils.setupMessage(""make-legacy"" account1Id mailbox1Id true false mProviderContext); localMessage4.mFlags&=~EmailContent.Message.FLAG_TYPE_MASK; localMessage4.mFlags|=EmailContent.Message.FLAG_TYPE_FORWARD; localMessage4.save(mProviderContext); Message getMessage4=LegacyConversions.makeMessage(mProviderContext localMessage4); checkLegacyMessage(""forwarding"" localMessage4 getMessage4); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,checkAttachment,"private void  (String tag Part expected EmailContent.Attachment actual long accountKey) throws MessagingException { String contentType=MimeUtility.unfoldAndDecode(expected.getContentType()); String contentTypeName=MimeUtility.getHeaderParameter(contentType ""name""); assertEquals(tag expected.getMimeType() actual.mMimeType); String disposition=expected.getDisposition(); String sizeString=MimeUtility.getHeaderParameter(disposition ""size""); String dispositionFilename=MimeUtility.getHeaderParameter(disposition ""filename""); long expectedSize=(sizeString != null) ? Long.parseLong(sizeString) : 0; assertEquals(tag expectedSize actual.mSize); assertEquals(tag expected.getContentId() actual.mContentId); String expectedName=(contentTypeName != null) ? contentTypeName : dispositionFilename; assertEquals(tag expectedName actual.mFileName); assertNull(tag actual.getContentUri()); assertTrue(tag 0 != actual.mMessageKey); String expectedPartId=null; String[] storeData=expected.getHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA); if (storeData != null && storeData.length > 0) { expectedPartId=storeData[0]; } assertEquals(tag expectedPartId actual.mLocation); assertEquals(tag ""B"" actual.mEncoding); assertEquals(tag accountKey actual.mAccountKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,checkLegacyMessage,"private void  (String tag EmailContent.Message expect Message actual) throws MessagingException { assertEquals(tag expect.mServerId actual.getUid()); assertEquals(tag expect.mServerTimeStamp actual.getInternalDate().getTime()); assertEquals(tag expect.mSubject actual.getSubject()); assertEquals(tag expect.mFrom Address.toHeader(actual.getFrom())); assertEquals(tag expect.mTimeStamp actual.getSentDate().getTime()); assertEquals(tag expect.mTo Address.toHeader(actual.getRecipients(RecipientType.TO))); assertEquals(tag expect.mCc Address.toHeader(actual.getRecipients(RecipientType.CC))); assertEquals(tag expect.mBcc Address.toHeader(actual.getRecipients(RecipientType.BCC))); assertEquals(tag expect.mReplyTo Address.toHeader(actual.getReplyTo())); assertEquals(tag expect.mMessageId actual.getMessageId()); assertEquals(tag expect.mFlagRead actual.isSet(Flag.SEEN)); assertEquals(tag expect.mFlagFavorite actual.isSet(Flag.FLAGGED)); ArrayList<Part> viewables=new ArrayList<Part>(); ArrayList<Part> attachments=new ArrayList<Part>(); MimeUtility.collectParts(actual viewables attachments); String get1Text=null; String get1Html=null; for ( Part viewable : viewables) { String text=MimeUtility.getTextFromPart(viewable); if (viewable.getMimeType().equalsIgnoreCase(""text/html"")) { get1Html=text; } else { get1Text=text; } } assertEquals(tag expect.mText get1Text); assertEquals(tag expect.mHtml get1Html); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,convertAndCheckcheckAddedAttachments,"private void  (final EmailContent.Message localMessage final Message legacyMessage) throws MessagingException  IOException { ArrayList<Part> viewables=new ArrayList<Part>(); ArrayList<Part> attachments=new ArrayList<Part>(); MimeUtility.collectParts(legacyMessage viewables attachments); LegacyConversions.updateAttachments(mProviderContext localMessage attachments); Uri uri=ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI localMessage.mId); Cursor c=mProviderContext.getContentResolver().query(uri Attachment.CONTENT_PROJECTION null null null); try { assertEquals(2 c.getCount()); while (c.moveToNext()) { Attachment attachment=Attachment.getContent(mProviderContext c Attachment.class); if (""100"".equals(attachment.mLocation)) { checkAttachment(""attachment1Part"" attachments.get(0) attachment localMessage.mAccountKey); } else if (""101"".equals(attachment.mLocation)) { checkAttachment(""attachment2Part"" attachments.get(1) attachment localMessage.mAccountKey); } else { fail(""Unexpected attachment with location "" + attachment.mLocation); } } } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,prepareLegacyMessageWithAttachments,"private Message  (BodyPart[] attachments) throws MessagingException { MultipartBuilder mpBuilder=new MultipartBuilder(""multipart/mixed""); for (int i=0; i < attachments.length; ++i) { mpBuilder.addBodyPart(attachments[i]); } final Message legacyMessage=new MessageBuilder().setBody(new MultipartBuilder(""multipart/mixed"").addBodyPart(MessageTestUtils.bodyPart(""text/html"" null)).addBodyPart(mpBuilder.buildBodyPart()).build()).build(); return legacyMessage; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\LegacyConversionsTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mProviderContext=getMockContext(); mContext=getContext(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\internet\EmailHtmlUtilTest.java,brokentestEscapeCharacterToDisplayPlainText,"public void  (){ String plainTags=EmailHtmlUtil.escapeCharacterToDisplay(textTags); assertEquals(""plain tag"" ""&lt;b&gt;Plain&lt;/b&gt; &amp;"" plainTags); String plainSpaces=EmailHtmlUtil.escapeCharacterToDisplay(textSpaces); assertEquals(""plain spaces"" ""3 spaces&nbsp;&nbsp; end."" plainSpaces); String plainNewlines=EmailHtmlUtil.escapeCharacterToDisplay(textNewlines); assertEquals(""plain spaces"" ""ab <br>&nbsp; <br>&nbsp;&nbsp; <br><br>"" plainNewlines); String textAll=textTags + ""\n"" + textSpaces+ ""\n""+ textNewlines; String plainAll=EmailHtmlUtil.escapeCharacterToDisplay(textAll); assertEquals(""plain all"" ""&lt;b&gt;Plain&lt;/b&gt; &amp;<br>"" + ""3 spaces&nbsp;&nbsp; end.<br>"" + ""ab <br>&nbsp; <br>&nbsp;&nbsp; <br><br>"" plainAll); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,getKeyedListOrEmpty,"public void  (){ final ImapString K1=new ImapSimpleString(""Key""); ImapList list=buildList(K1 LIST_1); assertElement(LIST_1 list.getKeyedListOrEmpty(""key"" false)); assertElement(LIST_1 list.getKeyedListOrEmpty(""key"" true)); assertElement(ImapList.EMPTY list.getKeyedListOrEmpty(""ke"" false)); assertElement(LIST_1 list.getKeyedListOrEmpty(""ke"" true)); assertElement(ImapList.EMPTY list.getKeyedListOrEmpty(""ke"")); assertElement(LIST_1 list.getKeyedListOrEmpty(""key"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,getKeyedStringOrEmpty,"public void  (){ final ImapString K1=new ImapSimpleString(""Key""); ImapList list=buildList(K1 STRING_1); assertElement(STRING_1 list.getKeyedListOrEmpty(""key"" false)); assertElement(STRING_1 list.getKeyedListOrEmpty(""key"" true)); assertElement(ImapString.EMPTY list.getKeyedListOrEmpty(""ke"" false)); assertElement(STRING_1 list.getKeyedListOrEmpty(""ke"" true)); assertElement(ImapString.EMPTY list.getKeyedListOrEmpty(""ke"")); assertElement(STRING_1 list.getKeyedListOrEmpty(""key"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testBasics,public void  (){ ImapList list=new ImapList(); assertTrue(list.isList()); assertFalse(list.isString()); assertTrue(list.isEmpty()); assertEquals(0 list.size()); list.add(STRING_1); assertFalse(list.isEmpty()); assertEquals(1 list.size()); list.add(STRING_2); assertEquals(2 list.size()); list.add(LIST_1); assertEquals(3 list.size()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testContains,"public void  (){ final ImapString K1=new ImapSimpleString(""aBCd""); final ImapString K2=new ImapSimpleString(""Def""); final ImapString K3=new ImapSimpleString(""abC""); ImapList list=buildList(K1 K2 K3); assertTrue(list.contains(""abc"")); assertTrue(list.contains(""abcd"")); assertTrue(list.contains(""def"")); assertFalse(list.contains("""")); assertFalse(list.contains(""a"")); assertFalse(list.contains(null)); assertFalse(list.contains(null)); assertFalse(ImapList.EMPTY.contains(null)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testEmpty,public void  (){ assertTrue(ImapList.EMPTY.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testFlatten,"public void  (){ assertEquals(""[]"" ImapList.EMPTY.flatten()); assertEquals(""[aBc]"" buildList(STRING_1).flatten()); assertEquals(""[[]]"" buildList(ImapList.EMPTY).flatten()); assertEquals(""[aBc [ X y z] aBc]"" buildList(STRING_1 buildList(ImapString.EMPTY STRING_2) STRING_1).flatten()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testGetElementOrNone,public void  (){ ImapList list=buildList(ImapList.EMPTY STRING_1 LIST_1 ImapString.EMPTY); assertElement(ImapList.EMPTY list.getElementOrNone(0)); assertElement(STRING_1 list.getElementOrNone(1)); assertElement(LIST_1 list.getElementOrNone(2)); assertElement(ImapString.EMPTY list.getElementOrNone(3)); assertElement(ImapElement.NONE list.getElementOrNone(4)); assertElement(ImapElement.NONE ImapList.EMPTY.getElementOrNone(0)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testGetKeyedElementOrNull,"public void  (){ final ImapString K1=new ImapSimpleString(""aBCd""); final ImapString K2=new ImapSimpleString(""Def""); final ImapString K3=new ImapSimpleString(""abC""); ImapList list=buildList(K1 STRING_1 K2 K3 K3 STRING_2); assertElement(null list.getKeyedElementOrNull(""ab"" false)); assertElement(STRING_1 list.getKeyedElementOrNull(""abcd"" false)); assertElement(K3 list.getKeyedElementOrNull(""def"" false)); assertElement(STRING_2 list.getKeyedElementOrNull(""abc"" false)); assertElement(STRING_1 list.getKeyedElementOrNull(""ab"" true)); assertElement(STRING_1 list.getKeyedElementOrNull(""abcd"" true)); assertElement(K3 list.getKeyedElementOrNull(""def"" true)); assertElement(STRING_1 list.getKeyedElementOrNull(""abc"" true)); assertElement(null list.getKeyedElementOrNull(null false)); assertNull(ImapList.EMPTY.getKeyedElementOrNull(""ab"" false)); assertElement(null buildList(K1).getKeyedElementOrNull(""abcd"" false)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testGetListOrEmpty,public void  (){ ImapList list=buildList(ImapList.EMPTY STRING_1 LIST_1 ImapString.EMPTY); assertElement(ImapList.EMPTY list.getListOrEmpty(0)); assertElement(ImapList.EMPTY list.getListOrEmpty(1)); assertElement(LIST_1 list.getListOrEmpty(2)); assertElement(ImapList.EMPTY list.getListOrEmpty(3)); assertElement(ImapList.EMPTY list.getListOrEmpty(4)); assertElement(ImapList.EMPTY ImapList.EMPTY.getListOrEmpty(0)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testGetStringOrEmpty,public void  (){ ImapList list=buildList(ImapList.EMPTY STRING_1 LIST_1 ImapString.EMPTY); assertElement(ImapString.EMPTY list.getStringOrEmpty(0)); assertElement(STRING_1 list.getStringOrEmpty(1)); assertElement(ImapString.EMPTY list.getStringOrEmpty(2)); assertElement(ImapString.EMPTY list.getStringOrEmpty(3)); assertElement(ImapString.EMPTY list.getStringOrEmpty(4)); assertElement(ImapString.EMPTY ImapList.EMPTY.getStringOrEmpty(0)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapListTest.java,testIs,"public void  (){ final ImapString ABC=new ImapSimpleString(""AbC""); ImapList list=buildList(ImapList.EMPTY ABC LIST_1 ImapString.EMPTY); assertFalse(list.is(0 ""abc"")); assertFalse(list.is(1 ""ab"")); assertTrue(list.is(1 ""abc"")); assertFalse(list.is(2 ""abc"")); assertFalse(list.is(3 ""abc"")); assertFalse(list.is(4 ""abc"")); assertFalse(list.is(0 ""ab"" false)); assertFalse(list.is(1 ""ab"" false)); assertTrue(list.is(1 ""abc"" false)); assertFalse(list.is(2 ""ab"" false)); assertFalse(list.is(3 ""ab"" false)); assertFalse(list.is(4 ""ab"" false)); assertFalse(list.is(0 ""ab"" true)); assertTrue(list.is(1 ""ab"" true)); assertTrue(list.is(1 ""abc"" true)); assertFalse(list.is(2 ""ab"" true)); assertFalse(list.is(3 ""ab"" true)); assertFalse(list.is(4 ""ab"" true)); assertFalse(list.is(0 null false)); assertFalse(ImapList.EMPTY.is(0 ""abc"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,expectMessagingException,"private static void  (String response) throws Exception { final ImapResponseParser p=generateParser(100000 response); try { p.readResponse(); fail(""Didn't throw Exception: response='"" + response + ""'""); } catch ( MessagingException ok) { return; } catch ( IOException ok) { return; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,generateParser,private static ImapResponseParser  (int literalKeepInMemoryThreshold String responses){ return new ImapResponseParser(new ByteArrayInputStream(Utility.toAscii(responses)) new DiscourseLogger(4) literalKeepInMemoryThreshold); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,setUp,@Override protected void  () throws Exception { super.setUp(); TempDirectory.setTempDirectory(getContext()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testAlert,"public void  () throws Exception { ImapResponse r; final ImapResponseParser p=generateParser(100000 ""* OK [ALERT]\r\n"" + ""* OK [ALERT] alert ( message ) %*\r\n"" + ""* OK [ABC] not alert\r\n""); r=p.readResponse(); assertTrue(r.isOk()); assertTrue(r.getAlertTextOrEmpty().isEmpty()); r=p.readResponse(); assertTrue(r.isOk()); assertEquals(""alert ( message ) %*"" r.getAlertTextOrEmpty().getString()); r=p.readResponse(); assertTrue(r.isOk()); assertTrue(r.getAlertTextOrEmpty().isEmpty()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testBareLf,"public void  () throws Exception { ImapResponse r; ImapResponseParser p=generateParser(3 ""* a b\n"" + ""* x y\r\n""); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""a"") new ImapSimpleString(""b"")) r); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""x"") new ImapSimpleString(""y"")) r); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testBasic,"public void  () throws Exception { ImapResponse r; final ImapResponseParser p=generateParser(100000 ""* STATUS \""INBOX\"" (UNSEEN 2)\r\n"" + ""100 OK STATUS completed\r\n"" + ""+ continuation request+(\r\n""+ ""* STATUS {5}\r\n""+ ""IN%OX (UNSEEN 10) \""a b c\""\r\n""+ ""101 OK STATUS completed %!(\r\n""+ ""102 OK 1\r\n""+ ""* 1 FETCH\r\n""+ ""103 OK\r\n""+ ""* a\r\n""); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""STATUS"") new ImapSimpleString(""INBOX"") buildList(new ImapSimpleString(""UNSEEN"") new ImapSimpleString(""2""))) r); r=p.readResponse(); assertElement(buildResponse(""100"" false new ImapSimpleString(""OK"") new ImapSimpleString(""STATUS completed"")) r); r=p.readResponse(); assertElement(buildResponse(null true new ImapSimpleString(""continuation request+("")) r); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""STATUS"") new ImapMemoryLiteral(createFixedLengthInputStream(""IN%OX"")) buildList(new ImapSimpleString(""UNSEEN"") new ImapSimpleString(""10"")) new ImapSimpleString(""a b c"")) r); r=p.readResponse(); assertElement(buildResponse(""101"" false new ImapSimpleString(""OK"") new ImapSimpleString(""STATUS completed %!("")) r); r=p.readResponse(); assertElement(buildResponse(""102"" false new ImapSimpleString(""OK"") new ImapSimpleString(""1"")) r); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""1"") new ImapSimpleString(""FETCH"")) r); r=p.readResponse(); assertElement(buildResponse(""103"" false new ImapSimpleString(""OK"")) r); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""a"")) r); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testBracket,"public void  () throws Exception { ImapResponse r; final ImapResponseParser p=generateParser(100000 ""* AAA BODY[HEADER.FIELDS (\""DATE\"" \""SUBJECT\"")]\r\n"" + ""* BBB B[a b c]d e f\r\n""); r=p.readResponse(); assertEquals(""BODY[HEADER.FIELDS (\""DATE\"" \""SUBJECT\"")]"" r.getStringOrEmpty(1).getString()); r=p.readResponse(); assertEquals(""B[a b c]d"" r.getStringOrEmpty(1).getString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testByeReceived,"public void  () throws Exception { final ImapResponseParser p=generateParser(100000 ""* BYE Autologout timer; idle for too long\r\n""); try { p.readResponse(); fail(""Didn't throw ByeException""); } catch ( ByeException ok) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testExpect,"public void  () throws Exception { final ImapResponseParser p=generateParser(100000 ""abc""); p.expect('a'); p.expect('b'); try { p.expect('C'); fail(); } catch ( IOException e) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testLiteral,"public void  () throws Exception { ImapResponse r; ImapResponseParser p=generateParser(3 ""* test {3}\r\n"" + ""ABC\r\n""); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""test"") new ImapMemoryLiteral(createFixedLengthInputStream(""ABC""))) r); p=generateParser(2 ""* test {3}\r\n"" + ""ABC\r\n""); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""test"") new ImapTempFileLiteral(createFixedLengthInputStream(""ABC""))) r); p=generateParser(0 ""* test {3}\r\n"" + ""ABC {4}\r\n"" + ""wxyz\r\n""); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""test"") new ImapTempFileLiteral(createFixedLengthInputStream(""ABC"")) new ImapTempFileLiteral(createFixedLengthInputStream(""wxyz""))) r); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testLiteralStringConversion,"public void  () throws Exception { ImapResponse r; final ImapResponseParser p=generateParser(100000 ""* XXX {5}\r\n"" + ""a b c\r\n""); assertEquals(""a b c"" p.readResponse().getStringOrEmpty(1).getString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testMalformedResponse,"public void  () throws Exception { expectMessagingException(""""); expectMessagingException(""\r""); expectMessagingException(""\r\n""); expectMessagingException(""*\r\n""); expectMessagingException(""1\r\n""); expectMessagingException(""* \r\n""); expectMessagingException(""1 \r\n""); expectMessagingException(""* A (\r\n""); expectMessagingException(""* A )\r\n""); expectMessagingException(""* A (()\r\n""); expectMessagingException(""* A ())\r\n""); expectMessagingException(""* A [\r\n""); expectMessagingException(""* A ]\r\n""); expectMessagingException(""* A [[]\r\n""); expectMessagingException(""* A []]\r\n""); expectMessagingException(""* A ([)]\r\n""); expectMessagingException(""* A""); expectMessagingException(""* {3}""); expectMessagingException(""* {3}\r\nab""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testNest,"public void  () throws Exception { ImapResponse r; final ImapResponseParser p=generateParser(100000 ""* A (a B () DEF) (a (ab)) ((() ())) ((a) ab) ((x y ZZ) () [] [A B] (A B C))"" + "" ([abc] a[abc])\r\n""); r=p.readResponse(); assertElement(buildResponse(null false new ImapSimpleString(""A"") buildList(new ImapSimpleString(""a"") new ImapSimpleString(""B"") buildList() new ImapSimpleString(""DEF"")) buildList(new ImapSimpleString(""a"") buildList(new ImapSimpleString(""ab""))) buildList(buildList(buildList() buildList())) buildList(buildList(new ImapSimpleString(""a"")) new ImapSimpleString(""ab"")) buildList(buildList(new ImapSimpleString(""x"") new ImapSimpleString(""y"") new ImapSimpleString(""ZZ"")) buildList() buildList() buildList(new ImapSimpleString(""A"") new ImapSimpleString(""B"")) buildList(new ImapSimpleString(""A"") new ImapSimpleString(""B"") new ImapSimpleString(""C""))) buildList(buildList(new ImapSimpleString(""abc"")) new ImapSimpleString(""a[abc]""))) r); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testNil,"public void  () throws Exception { ImapResponse r; final ImapResponseParser p=generateParser(100000 ""* nil nil NIL \""NIL\"" {3}\r\n"" + ""NIL\r\n""); r=p.readResponse(); assertElement(buildResponse(null false ImapString.EMPTY ImapString.EMPTY ImapString.EMPTY new ImapSimpleString(""NIL"") new ImapMemoryLiteral(createFixedLengthInputStream(""NIL""))) r); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testOkWithLongMessage,"public void  () throws Exception { ImapResponse r; final ImapResponseParser p=generateParser(100000 ""* OK [CAPABILITY IMAP4 IMAP4rev1 LITERAL+ ID STARTTLS AUTH=PLAIN AUTH=LOGIN"" + ""AUTH=CRAM-MD5] server.domain.tld\tCyrus IMAP4 v2.3.8-OS X Server 10.5:"" + "" \t\t\t9F33 server ready %%\r\n""); assertTrue(p.readResponse().isOk()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseParserTest.java,testreadUntil,"public void  () throws Exception { final ImapResponseParser p=generateParser(100000 ""!ab!c!!def!""); assertEquals("""" p.readUntil('!')); assertEquals(""ab"" p.readUntil('!')); assertEquals(""c"" p.readUntil('!')); assertEquals("""" p.readUntil('!')); assertEquals(""def"" p.readUntil('!')); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,testGetAlertTextOrEmpty,"public void  (){ assertEquals(""alert text"" buildResponse(""tag"" false new ImapSimpleString(""OK"") buildList(new ImapSimpleString(""ALERT"")) new ImapSimpleString(""alert text"")).getAlertTextOrEmpty().getString()); assertEquals("""" buildResponse(""tag"" false new ImapSimpleString(""OK"") buildList(new ImapSimpleString(""X"")) new ImapSimpleString(""alert text"")).getAlertTextOrEmpty().getString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,testGetResponseCodeOrEmpty,"public void  (){ assertEquals(""rescode"" buildResponse(""tag"" false new ImapSimpleString(""OK"") buildList(new ImapSimpleString(""rescode""))).getResponseCodeOrEmpty().getString()); assertEquals("""" buildResponse(""tag"" false new ImapSimpleString(""STATUS"") buildList(new ImapSimpleString(""rescode""))).getResponseCodeOrEmpty().getString()); assertEquals("""" buildResponse(""tag"" false new ImapSimpleString(""OK"") new ImapSimpleString(""XXX"") buildList(new ImapSimpleString(""rescode""))).getResponseCodeOrEmpty().getString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,testGetStatusResponseTextOrEmpty,"public void  (){ assertEquals("""" buildResponse(""tag"" false new ImapSimpleString(""XXX"") new ImapSimpleString(""!text!"")).getStatusResponseTextOrEmpty().getString()); assertEquals(""!text!"" buildResponse(""tag"" false new ImapSimpleString(""OK"") new ImapSimpleString(""!text!"")).getStatusResponseTextOrEmpty().getString()); assertEquals(""!text!"" buildResponse(""tag"" false new ImapSimpleString(""OK"") buildList(new ImapSimpleString(""XXX"")) new ImapSimpleString(""!text!"")).getStatusResponseTextOrEmpty().getString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,testIsDataResponse,"public void  (){ final ImapResponse OK=buildResponse(""tag"" false new ImapSimpleString(""OK"")); final ImapResponse SEARCH=buildResponse(null false new ImapSimpleString(""SEARCH"") new ImapSimpleString(""1"")); final ImapResponse EXISTS=buildResponse(null false new ImapSimpleString(""3"") new ImapSimpleString(""EXISTS"")); final ImapResponse TAGGED_EXISTS=buildResponse(""tag"" false new ImapSimpleString(""1"") new ImapSimpleString(""EXISTS"")); assertTrue(SEARCH.isDataResponse(0 ImapConstants.SEARCH)); assertTrue(EXISTS.isDataResponse(1 ImapConstants.EXISTS)); assertFalse(SEARCH.isDataResponse(1 ImapConstants.SEARCH)); assertFalse(EXISTS.isDataResponse(0 ImapConstants.EXISTS)); assertFalse(EXISTS.isDataResponse(1 ImapConstants.FETCH)); assertFalse(TAGGED_EXISTS.isDataResponse(1 ImapConstants.EXISTS)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,testIsOk,"public void  (){ assertTrue(buildResponse(null false new ImapSimpleString(""OK"")).isOk()); assertFalse(buildResponse(null false new ImapSimpleString(""NO"")).isOk()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapResponseTest.java,testIsTagged,"public void  (){ assertTrue(buildResponse(""a"" false).isTagged()); assertFalse(buildResponse(null false).isTagged()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,checkGetDateOrNullOnDifferentLocales,"private static void  () throws Exception { ImapSimpleString s=new ImapSimpleString(""01-Jan-2009 11:34:56 -0100""); assertEquals(""1 Jan 2009 12:34:56 GMT"" s.getDateOrNull().toGMTString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,doLiteralTest,private static void  (ImapString s String content) throws IOException { assertEquals(content s.getString()); assertEquals(content Utility.fromAscii(IOUtils.toByteArray(s.getAsStream()))); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,setUp,@Override protected void  () throws Exception { super.setUp(); TempDirectory.setTempDirectory(getContext()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,testBasics,"public void  () throws Exception { final ImapSimpleString s=new ImapSimpleString(""AbcD""); assertFalse(s.isEmpty()); assertEquals(""AbcD"" s.getString()); assertEquals(""AbcD"" Utility.fromAscii(IOUtils.toByteArray(s.getAsStream()))); assertFalse(s.isNumber()); assertFalse(s.isDate()); assertFalse(s.is(null)); assertFalse(s.is("""")); assertTrue(s.is(""abcd"")); assertFalse(s.is(""abc"")); assertFalse(s.startsWith(null)); assertTrue(s.startsWith("""")); assertTrue(s.startsWith(""a"")); assertTrue(s.startsWith(""abcd"")); assertFalse(s.startsWith(""Z"")); assertFalse(s.startsWith(""abcde"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,testEmpty,"public void  () throws Exception { assertTrue(ImapString.EMPTY.isEmpty()); assertEquals("""" ImapString.EMPTY.getString()); assertEquals("""" Utility.fromAscii(IOUtils.toByteArray(ImapString.EMPTY.getAsStream()))); assertFalse(ImapString.EMPTY.isNumber()); assertFalse(ImapString.EMPTY.isDate()); assertTrue(ImapString.EMPTY.is("""")); assertTrue(ImapString.EMPTY.startsWith("""")); assertFalse(ImapString.EMPTY.is(""a"")); assertFalse(ImapString.EMPTY.startsWith(""a"")); assertTrue(new ImapSimpleString(null).isEmpty()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,testGetDateOrNull,"public void  (){ final ImapString date=new ImapSimpleString(""01-Jan-2009 11:34:56 -0100""); assertTrue(date.isDate()); Date d=date.getDateOrNull(); assertNotNull(d); assertEquals(""1 Jan 2009 12:34:56 GMT"" d.toGMTString()); final ImapString nonDate=new ImapSimpleString(""1234""); assertFalse(nonDate.isDate()); assertNull(nonDate.getDateOrNull()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,testGetDateOrNullOnDifferentLocales,public void  () throws Exception { Locale savedLocale=Locale.getDefault(); try { Locale.setDefault(Locale.US); checkGetDateOrNullOnDifferentLocales(); Locale.setDefault(Locale.JAPAN); checkGetDateOrNullOnDifferentLocales(); } finally { Locale.setDefault(savedLocale); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,testGetNumberOrZero,"public void  (){ assertEquals(1234 new ImapSimpleString(""1234"").getNumberOrZero()); assertEquals(-1 new ImapSimpleString(""-1"").getNumberOrZero()); assertEquals(0 new ImapSimpleString("""").getNumberOrZero()); assertEquals(0 new ImapSimpleString(""X"").getNumberOrZero()); assertEquals(0 new ImapSimpleString(""1234E"").getNumberOrZero()); assertEquals(0 new ImapSimpleString(""99999999999999999999"").getNumberOrZero()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,testImapMemoryLiteral,"public void  () throws Exception { final String CONTENT=""abc""; doLiteralTest(new ImapMemoryLiteral(createFixedLengthInputStream(CONTENT)) CONTENT); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapStringTest.java,testImapTempFileLiteral,"public void  () throws Exception { final String CONTENT=""def""; ImapTempFileLiteral l=new ImapTempFileLiteral(createFixedLengthInputStream(CONTENT)); doLiteralTest(l CONTENT); assertTrue(l.tempFileExistsForTest()); l.destroy(); assertFalse(l.tempFileExistsForTest()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,assertElement,"public static final void  (String message ImapElement expected ImapElement actual){ if (expected == null && actual == null) { return; } if (expected != null && expected.equalsForTest(actual)) { return; } Assert.fail(String.format(""%s expected=%s\nactual=%s"" message expected actual)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,buildList,public static final ImapList  (ImapElement... elements){ ImapList list=new ImapList(); for ( ImapElement e : elements) { list.add(e); } return list; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,buildResponse,public static final ImapResponse  (String tag boolean isContinuationRequest ImapElement... elements){ ImapResponse res=new ImapResponse(tag isContinuationRequest); for ( ImapElement e : elements) { res.add(e); } return res; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,createFixedLengthInputStream,"public static FixedLengthInputStream  (String content){ ByteArrayInputStream in=new ByteArrayInputStream(Utility.toAscii(content + ""#trailing"")); return new FixedLengthInputStream(in content.length()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapTestUtils.java,parseResponse,"public static final ImapResponse  (String line){ ImapResponseParser p=new ImapResponseParser(new ByteArrayInputStream(Utility.toAscii(line + ""\r\n"")) new DiscourseLogger(4)); try { return p.readResponse(); } catch ( Exception e) { throw new RuntimeException(e); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapUtilityTests.java,testGetImapRangeValues,"public void  (){ String[] expected; String[] actual; expected=new String[]{""1"" ""2"" ""3""}; actual=ImapUtility.getImapRangeValues(""1:3""); MoreAsserts.assertEquals(expected actual); expected=new String[]{""16"" ""15"" ""14""}; actual=ImapUtility.getImapRangeValues(""16:14""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapRangeValues(""""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapRangeValues(null); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapRangeValues(""a""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapRangeValues(""6""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapRangeValues(""1:3 6""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapRangeValues(""1:x""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapRangeValues(""1:*""); MoreAsserts.assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapUtilityTests.java,testGetImapSequenceValues,"public void  (){ String[] expected; String[] actual; expected=new String[]{""1""}; actual=ImapUtility.getImapSequenceValues(""1""); MoreAsserts.assertEquals(expected actual); expected=new String[]{""1"" ""3"" ""2""}; actual=ImapUtility.getImapSequenceValues(""1 3 2""); MoreAsserts.assertEquals(expected actual); expected=new String[]{""4"" ""5"" ""6""}; actual=ImapUtility.getImapSequenceValues(""4:6""); MoreAsserts.assertEquals(expected actual); expected=new String[]{""9"" ""8"" ""7""}; actual=ImapUtility.getImapSequenceValues(""9:7""); MoreAsserts.assertEquals(expected actual); expected=new String[]{""1"" ""2"" ""3"" ""4"" ""9"" ""8"" ""7""}; actual=ImapUtility.getImapSequenceValues(""1 2:4 9:7""); MoreAsserts.assertEquals(expected actual); expected=new String[]{""1"" ""5""}; actual=ImapUtility.getImapSequenceValues(""1 x 5""); MoreAsserts.assertEquals(expected actual); expected=new String[]{""1"" ""2"" ""3""}; actual=ImapUtility.getImapSequenceValues(""a:d 1:3""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapSequenceValues(""""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapSequenceValues(null); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapSequenceValues(""a""); MoreAsserts.assertEquals(expected actual); expected=EmptyArrayString; actual=ImapUtility.getImapSequenceValues(""1:x""); MoreAsserts.assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\imap\ImapUtilityTests.java,testImapQuote,"public void  (){ assertEquals(""\""abcd\"""" ImapUtility.imapQuoted(""abcd"")); assertEquals(""\""ab\\\""cd\"""" ImapUtility.imapQuoted(""ab\""cd"")); assertEquals(""\""ab\\\\cd\"""" ImapUtility.imapQuoted(""ab\\cd"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\StoreTests.java,StoreTests,public  (Class<EmailProvider> providerClass String providerAuthority){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\StoreTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=getMockContext(); Store.sStores.clear(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\StoreTests.java,testGetInstance,"public void  () throws MessagingException { Store testStore; Account testAccount=ProviderTestUtils.setupAccount(""pop"" false mMockContext); HostAuth testAuth=new HostAuth(); testAccount.mHostAuthRecv=testAuth; testAuth.mAddress=""pop3.google.com""; testAuth.mProtocol=""pop3""; testAccount.save(mMockContext); testStore=Store.getInstance(testAccount getContext()); assertEquals(1 Store.sStores.size()); assertSame(testStore Store.sStores.get(testAccount.mHostAuthRecv)); Store.sStores.clear(); testAccount=ProviderTestUtils.setupAccount(""pop"" false mMockContext); testAuth=new HostAuth(); testAccount.mHostAuthRecv=testAuth; testAuth.mAddress=""imap.google.com""; testAuth.mProtocol=""imap""; testAccount.save(mMockContext); testStore=Store.getInstance(testAccount getContext()); assertEquals(1 Store.sStores.size()); assertSame(testStore Store.sStores.get(testAccount.mHostAuthRecv)); Store.sStores.clear(); testAccount=ProviderTestUtils.setupAccount(""unknown"" false mMockContext); testAuth=new HostAuth(); testAuth.mAddress=""unknown.google.com""; testAuth.mProtocol=""unknown""; try { testStore=Store.getInstance(testAccount getContext()); fail(""Store#getInstance() should have thrown an exception""); } catch ( MessagingException expected) { } assertEquals(0 Store.sStores.size()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\StoreTests.java,testUpdateMailbox,"public void  (){ Mailbox testMailbox=new Mailbox(); Store.updateMailbox(testMailbox 1L ""inbox"" '/' true Mailbox.TYPE_MAIL); assertEquals(1L testMailbox.mAccountKey); assertEquals(""inbox"" testMailbox.mDisplayName); assertEquals(""inbox"" testMailbox.mServerId); assertEquals('/' testMailbox.mDelimiter); Store.updateMailbox(testMailbox 2L ""inbox/a"" '/' true Mailbox.TYPE_MAIL); assertEquals(2L testMailbox.mAccountKey); assertEquals(""a"" testMailbox.mDisplayName); assertEquals(""inbox/a"" testMailbox.mServerId); assertEquals('/' testMailbox.mDelimiter); Store.updateMailbox(testMailbox 3L ""inbox/a/b/c/d"" '/' true Mailbox.TYPE_MAIL); assertEquals(3L testMailbox.mAccountKey); assertEquals(""d"" testMailbox.mDisplayName); assertEquals(""inbox/a/b/c/d"" testMailbox.mServerId); assertEquals('/' testMailbox.mDelimiter); Store.updateMailbox(testMailbox 4L ""inbox/a/b/c"" '\0' true Mailbox.TYPE_MAIL); assertEquals(4L testMailbox.mAccountKey); assertEquals(""inbox/a/b/c"" testMailbox.mDisplayName); assertEquals(""inbox/a/b/c"" testMailbox.mServerId); assertEquals('\0' testMailbox.mDelimiter); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,checkFetchedMessage,"private void  (Message message int msgNum boolean body) throws MessagingException { Address[] to=message.getRecipients(RecipientType.TO); assertNotNull(to); assertEquals(1 to.length); assertEquals(""Smith@Registry.Org"" to[0].getAddress()); assertNull(to[0].getPersonal()); Address[] from=message.getFrom(); assertNotNull(from); assertEquals(1 from.length); assertEquals(""Jones@Registry.Org"" from[0].getAddress()); assertNull(from[0].getPersonal()); Address[] cc=message.getRecipients(RecipientType.CC); assertNotNull(cc); assertEquals(1 cc.length); assertEquals(""Chris@Registry.Org"" cc[0].getAddress()); assertNull(cc[0].getPersonal()); Address[] replyto=message.getReplyTo(); assertNotNull(replyto); assertEquals(1 replyto.length); assertEquals(""Roger@Registry.Org"" replyto[0].getAddress()); assertNull(replyto[0].getPersonal()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,checkOneUnread,private void  (MockTransport mockTransport) throws MessagingException { openFolderWithMessage(mockTransport); setupUidlSequence(mockTransport 1); Message[] messages=mFolder.getMessages(1 1 null); assertEquals(1 messages.length); assertEquals(getSingleMessageUID(1) messages[0].getUid()); setupListSequence(mockTransport 1); FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); fp.add(FetchProfile.Item.ENVELOPE); mFolder.fetch(messages fp null); assertEquals(PER_MESSAGE_SIZE messages[0].getSize()); MimeMessage message=(MimeMessage)messages[0]; message.getRecipients(RecipientType.TO); message.getRecipients(RecipientType.CC); message.getRecipients(RecipientType.BCC); setupSingleMessage(mockTransport 1 false); fp=new FetchProfile(); fp.add(FetchProfile.Item.BODY); mFolder.fetch(messages fp null); checkFetchedMessage(messages[0] 1 false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,getSingleMessageUID,"private static String  (int msgNum){ final String UID_HEAD=""ABCDEF-""; final String UID_TAIL=""""; return UID_HEAD + Integer.toString(msgNum) + UID_TAIL; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,openAndInjectMockTransport,private MockTransport  (){ MockTransport mockTransport=new MockTransport(mContext mHostAuth); mockTransport.setSecurity(HostAuth.FLAG_NONE false); mStore.setTransport(mockTransport); return mockTransport; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,openFolderWithMessage,private void  (MockTransport mockTransport) throws MessagingException { setupOpenFolder(mockTransport 1 null); mFolder.open(OpenMode.READ_ONLY); assertEquals(1 mFolder.getMessageCount()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setUp,@Override protected void  () throws Exception { super.setUp(); mMockContext=DBTestHelper.ProviderContextSetupHelper.getProviderContext(getContext()); TempDirectory.setTempDirectory(mMockContext); mHostAuth=new HostAuth(); Account testAccount=ProviderTestU
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setupBrokenListSequence,"private static void  (MockTransport transport int numMessages){ transport.expect(""LIST"" """"); for (int msgNum=1; msgNum <= numMessages; ++msgNum) { transport.expect(null """"); } transport.expect(null """"); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setupListSequence,"private static void  (MockTransport transport int numMessages){ transport.expect(""LIST"" ""+OK sending scan listing""); for (int msgNum=1; msgNum <= numMessages; ++msgNum) { transport.expect(null Integer.toString(msgNum) + "" "" + Integer.toString(PER_MESSAGE_SIZE * msgNum)); } transport.expect(null "".""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setupOpenFolder,"private void  (MockTransport mockTransport int statCount String capabilities){ mockTransport.expect(null ""+OK Hello there from the Mock Transport.""); if (capabilities == null) { mockTransport.expect(""CAPA"" ""-ERR unimplemented""); } else { mockTransport.expect(""CAPA"" ""+OK capabilities follow""); mockTransport.expect(null capabilities.split("" "")); mockTransport.expect(null "".""); } mockTransport.expect(""USER user"" ""+OK User name accepted""); mockTransport.expect(""PASS password"" ""+OK Logged in""); if (statCount == -1) { mockTransport.expect(""STAT"" """"); } else { String stat=""+OK "" + Integer.toString(statCount) + "" ""+ Integer.toString(PER_MESSAGE_SIZE * statCount); mockTransport.expect(""STAT"" stat); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setupSingleMessage,private static void  (MockTransport transport int msgNum boolean body){ setupSingleMessageTop(transport msgNum false false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setupSingleMessageTop,"private static void  (MockTransport transport int msgNum boolean topTry boolean topSupported){ String msgNumString=Integer.toString(msgNum); String topCommand=""TOP "" + msgNumString + "" 673""; String retrCommand=""RETR "" + msgNumString; if (topTry) { if (topSupported) { transport.expect(topCommand ""+OK message follows""); } else { transport.expect(topCommand ""-ERR unsupported command""); transport.expect(retrCommand ""+OK message follows""); } } else { transport.expect(retrCommand ""+OK message follows""); } transport.expect(null ""Date: 26 Aug 76 1429 EDT""); transport.expect(null ""From: Jones@Registry.Org""); transport.expect(null ""To: Smith@Registry.Org""); transport.expect(null ""CC: Chris@Registry.Org""); transport.expect(null ""Reply-To: Roger@Registry.Org""); transport.expect(null """"); transport.expect(null "".""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,setupUidlSequence,"private static void  (MockTransport transport int numMessages){ transport.expect(""UIDL"" ""+OK sending UIDL list""); for (int msgNum=1; msgNum <= numMessages; ++msgNum) { transport.expect(null Integer.toString(msgNum) + "" "" + getSingleMessageUID(msgNum)); } transport.expect(null "".""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCatchClosed1a,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); openFolderWithMessage(mockTransport); mockTransport.closeInputStream(); try { setupUidlSequence(mockTransport 1); Message[] messages=mFolder.getMessages(1 1 null); assertEquals(1 messages.length); assertEquals(getSingleMessageUID(1) messages[0].getUid()); fail(""Broken stream should cause getMessages() to throw.""); } catch ( MessagingException me) { } assertFalse(""folder should be 'closed' after an IOError"" mFolder.isOpen()); checkOneUnread(mockTransport); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCatchClosed1b,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); openFolderWithMessage(mockTransport); try { mockTransport.expect(""UIDL"" ""+OK sending UIDL list""); mockTransport.expect(null ""bad-data"" + "" "" + ""THE-UIDL""); mockTransport.expect(null "".""); Message[] messages=mFolder.getMessages(1 1 null); fail(""Bad UIDL should cause getMessages() to throw.""); } catch ( MessagingException me) { } assertFalse(""folder should be 'closed' after an IOError"" mFolder.isOpen()); checkOneUnread(mockTransport); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCatchClosed1c,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport 6000 null); mFolder.open(OpenMode.READ_ONLY); assertEquals(6000 mFolder.getMessageCount()); try { mockTransport.expect(""UIDL 1"" ""+OK "" + ""bad-data"" + "" ""+ ""THE-UIDL""); Message[] messages=mFolder.getMessages(1 1 null); fail(""Bad UIDL should cause getMessages() to throw.""); } catch ( MessagingException me) { } assertFalse(""folder should be 'closed' after an IOError"" mFolder.isOpen()); checkOneUnread(mockTransport); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCatchClosed2,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); openFolderWithMessage(mockTransport); setupUidlSequence(mockTransport 1); Message[] messages=mFolder.getMessages(1 1 null); assertEquals(1 messages.length); assertEquals(getSingleMessageUID(1) messages[0].getUid()); mockTransport.closeInputStream(); try { setupListSequence(mockTransport 1); FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); fp.add(FetchProfile.Item.ENVELOPE); mFolder.fetch(messages fp null); assertEquals(PER_MESSAGE_SIZE messages[0].getSize()); fail(""Broken stream should cause fetch() to throw.""); } catch ( MessagingException me) { } assertFalse(""folder should be 'closed' after an IOError"" mFolder.isOpen()); checkOneUnread(mockTransport); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCatchClosed2a,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); openFolderWithMessage(mockTransport); setupUidlSequence(mockTransport 1); Message[] messages=mFolder.getMessages(1 1 null); assertEquals(1 messages.length); assertEquals(getSingleMessageUID(1) messages[0].getUid()); setupBrokenListSequence(mockTransport 1); try { FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); fp.add(FetchProfile.Item.ENVELOPE); mFolder.fetch(messages fp null); assertEquals(PER_MESSAGE_SIZE messages[0].getSize()); fail(""Broken stream should cause fetch() to throw.""); } catch ( MessagingException me) { } assertFalse(""folder should be 'closed' after an IOError"" mFolder.isOpen()); checkOneUnread(mockTransport); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCatchClosed3,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); openFolderWithMessage(mockTransport); setupUidlSequence(mockTransport 1); Message[] messages=mFolder.getMessages(1 1 null); assertEquals(1 messages.length); assertEquals(getSingleMessageUID(1) messages[0].getUid()); setupListSequence(mockTransport 1); FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); fp.add(FetchProfile.Item.ENVELOPE); mFolder.fetch(messages fp null); assertEquals(PER_MESSAGE_SIZE messages[0].getSize()); mockTransport.closeInputStream(); try { setupSingleMessage(mockTransport 1 false); fp=new FetchProfile(); fp.add(FetchProfile.Item.BODY); mFolder.fetch(messages fp null); checkFetchedMessage(messages[0] 1 false); fail(""Broken stream should cause fetch() to throw.""); } catch ( MessagingException me) { } assertFalse(""folder should be 'closed' after an IOError"" mFolder.isOpen()); checkOneUnread(mockTransport); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCatchClosed4,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); openFolderWithMessage(mockTransport); setupUidlSequence(mockTransport 1); Message[] messages=mFolder.getMessages(1 1 null); assertEquals(1 messages.length); assertEquals(getSingleMessageUID(1) messages[0].getUid()); mockTransport.closeInputStream(); try { mockTransport.expect(""DELE 1"" ""+OK message deleted""); mFolder.setFlags(messages new Flag[]{Flag.DELETED} true); fail(""Broken stream should cause fetch() to throw.""); } catch ( MessagingException me) { } assertFalse(""folder should be 'closed' after an IOError"" mFolder.isOpen()); checkOneUnread(mockTransport); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCatchClosed6a,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport -1 null); try { mFolder.open(OpenMode.READ_ONLY); fail(""Broken STAT should cause open() to throw.""); } catch ( MessagingException me) { } assertFalse(""folder should be 'closed' after an IOError"" mFolder.isOpen()); checkOneUnread(mockTransport); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCheckSettings,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport 0 null); setupUidlSequence(mockTransport 1); mockTransport.expect(""QUIT"" """"); mStore.checkSettings(); setupOpenFolder(mockTransport 0 ""UIDL""); mockTransport.expect(""QUIT"" """"); mStore.checkSettings(); try { setupOpenFolder(mockTransport 0 null); mockTransport.expect(""UIDL"" ""-ERR unsupported""); mockTransport.expect(""QUIT"" """"); mStore.checkSettings(); fail(""MessagingException was expected due to UIDL unsupported.""); } catch ( MessagingException me) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,SecondaryMockContext,public  (Context mocked Context underlying){ super(mocked); mUnderlying=underlying; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,checkMessageUids,private static void  (String[] expectedUids Message[] actualMessages){ ArrayList<String> list=new ArrayList<String>(); for ( Message m : actualMessages) { list.add(m.getUid()); } MoreAsserts.assertEquals(expectedUids list.toArray(new String[0])); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testCheckSettingsCapabilities,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); mockTransport.expect(null ""-ERR from the Mock Transport.""); try { Pop3Store.Pop3Folder folder=mStore.new Pop3Folder(""INBOX""); folder.open(OpenMode.READ_WRITE); fail(""Should have thrown exception""); } catch ( MessagingException me) { } mockTransport.expect(""QUIT"" """"); mockTransport.expectClose(); setupOpenFolder(mockTransport 0 ""UIDL""); mockTransport.expect(""QUIT"" """"); mStore.checkSettings(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,createFolder,private ImapFolder  (long id String displayName String serverId char delimiter){ ImapFolder folder=new ImapFolder(null serverId); Mailbox mailbox=new Mailbox(); mailbox.mId=id; mailbox.mDisplayName=displayName; mailbox.mServerId=serverId; mailbox.mDelimiter=delimiter; mailbox.mFlags=0xAAAAAAA8; folder.mMailbox=mailbox; return folder; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,createPackageContext,@Override public Context  (String packageName int flags) throws NameNotFoundException { return mUnderlying.createPackageContext(packageName flags); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testGetMessageByUid,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport 2 null); mFolder.open(OpenMode.READ_WRITE); assertEquals(2 mFolder.getMessageCount()); setupUidlSequence(mockTransport 2); String uid1=getSingleMessageUID(1); String uid2=getSingleMessageUID(2); String uid3=getSingleMessageUID(3); Message msg1=mFolder.getMessage(uid1); assertTrue(""message with uid1"" msg1 != null); Message msg3=mFolder.getMessage(uid3); assertTrue(""message with uid3"" msg3 == null); Message msg2=mFolder.getMessage(uid2); assertTrue(""message with uid2"" msg2 != null); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,expectCapability,"private void  (MockTransport mockTransport boolean withId boolean withUidPlus){ String capabilityList=""* cAPABILITY iMAP4rev1 sTARTTLS aUTH=gSSAPI lOGINDISABLED""; capabilityList+=withId ? "" iD"" : """"; capabilityList+=withUidPlus ? "" UiDPlUs"" : """"; mockTransport.expect(getNextTag(false) + "" CAPABILITY"" new String[]{capabilityList getNextTag(true) + "" oK CAPABILITY completed""}); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,expectLogin,"private void  (MockTransport mockTransport boolean startTls boolean withId boolean withUidPlus String[] imapIdResponse String loginResponse){ mockTransport.expect(null ""* oK Imap 2000 Ready To Assist You""); expectCapability(mockTransport withId withUidPlus); if (startTls) { mockTransport.expect(getNextTag(false) + "" STARTTLS"" getNextTag(true) + "" Ok starting TLS""); mockTransport.expectStartTls(); expectCapability(mockTransport withId withUidPlus); } if (withId) { String expectedNextTag=getNextTag(false); String last=imapIdResponse[imapIdResponse.length - 1]; last=expectedNextTag + "" "" + last; imapIdResponse[imapIdResponse.length - 1]=last; mockTransport.expect(getNextTag(false) + "" ID \\(.*\\)"" imapIdResponse); getNextTag(true); } mockTransport.expect(getNextTag(false) + "" LOGIN user \""password\"""" getNextTag(true) + "" "" + loginResponse); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,expectNoop,"private void  (MockTransport mockTransport boolean ok){ String response=ok ? "" oK success"" : "" nO timeout""; mockTransport.expect(getNextTag(false) + "" NOOP"" new String[]{getNextTag(true) + response}); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,expectSelect,"private void  (MockTransport mockTransport String folder String readWriteMode){ mockTransport.expect(getNextTag(false) + "" SELECT \"""" + folder+ ""\"""" new String[]{""* fLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen)"" ""* oK [pERMANENTFLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen \\*)]"" ""* 0 eXISTS"" ""* 0 rECENT"" ""* OK [uNSEEN 0]"" ""* OK [uIDNEXT 1]"" getNextTag(true) + "" oK ["" + readWriteMode+ ""] ""+ folder+ "" selected. (Success)""}); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,getCopyMessagesPattern,"private String  (){ return getNextTag(false) + "" UID COPY 11\\ 12 \\\""&ZeVnLIqe-\\\""""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,getNextTag,public String  (boolean advance){ if (advance) ++mTag; return Integer.toString(mTag); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,getSearchMessagesPattern,"private String  (String messageId){ return getNextTag(false) + "" UID SEARCH HEADER Message-Id \"""" + messageId+ ""\""""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,getSharedPreferences,@Override public SharedPreferences  (String name int mode){ return new MockSharedPreferences(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,onMessageNotFound,@Override public void  (Message message){ ++messageNotFoundCalled; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,onMessageUidChange,@Override public void  (Message message String newUid){ ++messageUidChangeCalled; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,openAndInjectMockTransport,"private MockTransport  (int connectionSecurity boolean trustAllCertificates){ MockTransport mockTransport=MockTransport.createMockTransport(mTestContext); mockTransport.setSecurity(connectionSecurity trustAllCertificates); mockTransport.setHost(""mock.server.com""); mStore.setTransportForTest(mockTransport); return mockTransport; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,prepareForAppendTest,"private ImapMessage  (MockTransport mock String response) throws Exception { ImapMessage message=(ImapMessage)mFolder.createMessage(""initial uid""); message.setFrom(new Address(""me@test.com"")); message.setRecipient(RecipientType.TO new Address(""you@test.com"")); message.setMessageId(""<message.id@test.com>""); message.setFlagDirectlyForTest(Flag.SEEN true); message.setBody(new TextBody(""Test Body"")); mock.expect(getNextTag(false) + "" APPEND \\\"""" + FOLDER_ENCODED+ ""\\\"" \\(\\\\SEEN\\) \\{166\\}"" new String[]{""+ gO aHead""}); mock.expectLiterally(""From: me@test.com"" NO_REPLY); mock.expectLiterally(""To: you@test.com"" NO_REPLY); mock.expectLiterally(""Message-ID: <message.id@test.com>"" NO_REPLY); mock.expectLiterally(""Content-Type: text/plain;"" NO_REPLY); mock.expectLiterally("" charset=utf-8"" NO_REPLY); mock.expectLiterally(""Content-Transfer-Encoding: base64"" NO_REPLY); mock.expectLiterally("""" NO_REPLY); mock.expectLiterally(""VGVzdCBCb2R5"" NO_REPLY); mock.expectLiterally("""" new String[]{""* 7 eXISTS"" getNextTag(true) + "" "" + response}); return message; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,resetTag,private int  (int tag){ int oldTag=mTag; mTag=tag; return oldTag; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,run,"@Override public void  (MockTransport mockTransport) throws Exception { mockTransport.expectIOException(); final Folder folder=mStore.getFolder(""test""); folder.open(OpenMode.READ_WRITE); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,runAndExpectMessagingException,"private void  (RunAndExpectMessagingExceptionTarget target) throws Exception { try { final MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport); mFolder.open(OpenMode.READ_WRITE); target.run(mockTransport); fail(""MessagingException expected.""); } catch ( MessagingException expected) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,setUp,@Override protected void  () throws Exception { super.setUp(); Context realContext=getInstrumentation().getTargetContext(); ImapStore.sImapId=ImapStore.makeCommonImapId(realContext.getPackageName() Build.VERSION.RELEASE Build.VERSION.CODENAME Build.MODEL 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,setupCopyMessages,"private void  (boolean withUidPlus) throws Exception { mCopyMock=openAndInjectMockTransport(); setupOpenFolder(mCopyMock new String[]{""* iD nIL"" ""oK""} ""rEAD-wRITE"" withUidPlus); mFolder.open(OpenMode.READ_WRITE); mCopyToFolder=mStore.getFolder(""\u65E5\u672C\u8A9E""); Message m1=mFolder.createMessage(""11""); m1.setMessageId(""<4D8978AE.0000005D@m58.foo.com>""); Message m2=mFolder.createMessage(""12""); m2.setMessageId(""<549373104MSOSI1:145OSIMS@bar.com>""); mCopyMessages=new Message[]{m1 m2}; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,setupOpenFolder,private void  (MockTransport mockTransport String[] imapIdResponse String readWriteMode boolean withUidPlus){ expectLogin(mockTransport imapIdResponse withUidPlus); expectSelect(mockTransport FOLDER_ENCODED readWriteMode); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testAppendFailure,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); ImapMessage message=prepareForAppendTest(mock ""NO No space left on the server.""); assertEquals(""initial uid"" message.getUid()); mock.expectLiterally(getNextTag(false) + "" UID SEARCH HEADER MESSAGE-ID <message.id@test.com>"" new String[]{""* sEARCH"" getNextTag(true) + "" oK Search completed.""}); mock.expectLiterally(getNextTag(false) + "" UID SEARCH (HEADER MESSAGE-ID <message.id@test.com>)"" new String[]{""* sEARCH"" getNextTag(true) + "" oK Search completed.""}); mFolder.appendMessage(getInstrumentation().getTargetContext() message false); assertEquals(""initial uid"" message.getUid()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testAppendMessages,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); ImapMessage message=prepareForAppendTest(mock ""oK [aPPENDUID 1234567 13] (Success)""); mFolder.appendMessage(getInstrumentation().getTargetContext() message false); assertEquals(""13"" message.getUid()); assertEquals(7 mFolder.getMessageCount()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testAppendMessagesNoAppendUid,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); ImapMessage message=prepareForAppendTest(mock ""OK Success""); mock.expectLiterally(getNextTag(false) + "" UID SEARCH HEADER MESSAGE-ID <message.id@test.com>"" new String[]{""* sEARCH 321"" getNextTag(true) + "" oK success""}); mock.expectLiterally(getNextTag(false) + "" UID SEARCH (HEADER MESSAGE-ID <message.id@test.com>)"" new String[]{""* sEARCH 321"" getNextTag(true) + "" oK success""}); mFolder.appendMessage(getInstrumentation().getTargetContext() message false); assertEquals(""321"" message.getUid()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCheckSettings,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); expectLogin(mock); mStore.checkSettings(); resetTag(); expectLogin(mock false false false new String[]{""* iD nIL"" ""oK""} ""nO authentication failed""); try { mStore.checkSettings(); fail(); } catch ( MessagingException expected) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessages1,"public void  () throws Exception { setupCopyMessages(true); mCopyMock.expect(getCopyMessagesPattern() new String[]{""* Ok COPY in progress"" getNextTag(true) + "" oK [COPYUID 777 11 12 45 46] UID COPY completed""}); MessageUpdateCallbackCounter cb=new MessageUpdateCallbackCounter(); mFolder.copyMessages(mCopyMessages mCopyToFolder cb); assertEquals(0 cb.messageNotFoundCalled); assertEquals(2 cb.messageUidChangeCalled); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessages2,"public void  () throws Exception { setupCopyMessages(true); mCopyMock.expect(getCopyMessagesPattern() new String[]{""* No Some error occured during the copy"" getNextTag(true) + "" oK [COPYUID 777 11 12 45 46] UID COPY completed""}); MessageUpdateCallbackCounter cb=new MessageUpdateCallbackCounter(); mFolder.copyMessages(mCopyMessages mCopyToFolder cb); assertEquals(0 cb.messageNotFoundCalled); assertEquals(2 cb.messageUidChangeCalled); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessages3,"public void  () throws Exception { try { setupCopyMessages(false); mCopyMock.expect(getCopyMessagesPattern() new String[]{getNextTag(true) + "" No copy did not finish""}); mFolder.copyMessages(mCopyMessages mCopyToFolder null); fail(""MessagingException expected.""); } catch ( MessagingException expected) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessages4,"public void  () throws Exception { try { setupCopyMessages(true); mCopyMock.expect(getCopyMessagesPattern() new String[]{""* BAD failed for some reason"" getNextTag(true) + "" Ok copy completed""}); mFolder.copyMessages(mCopyMessages mCopyToFolder null); fail(""MessagingException expected.""); } catch ( MessagingException expected) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessages5,"public void  () throws Exception { try { setupCopyMessages(false); mCopyMock.expect(getCopyMessagesPattern() new String[]{getNextTag(true) + "" BaD copy completed""}); mFolder.copyMessages(mCopyMessages mCopyToFolder null); fail(""MessagingException expected.""); } catch ( MessagingException expected) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessages6,"public void  () throws Exception { setupCopyMessages(false); mCopyMock.expect(getCopyMessagesPattern() new String[]{getNextTag(true) + "" oK UID COPY completed""}); int saveTag=resetTag(); expectLogin(mCopyMock new String[]{""* iD nIL"" ""oK""} false); expectSelect(mCopyMock ""&ZeVnLIqe-"" ""rEAD-wRITE""); mCopyMock.expect(getSearchMessagesPattern(""<4D8978AE.0000005D@m58.foo.com>"") new String[]{""* SeArCh 777"" getNextTag(true) + "" oK UID SEARCH completed (1 msgs in 3.14159 secs)""}); mCopyMock.expect(getSearchMessagesPattern(""<549373104MSOSI1:145OSIMS@bar.com>"") new String[]{""* sEaRcH 1818"" getNextTag(true) + "" oK UID SEARCH completed (1 msgs in 2.71828 secs)""}); resetTag(saveTag); expectSelect(mCopyMock FOLDER_ENCODED ""rEAD-wRITE""); MessageUpdateCallbackCounter cb=new MessageUpdateCallbackCounter(); mFolder.copyMessages(mCopyMessages mCopyToFolder cb); assertEquals(0 cb.messageNotFoundCalled); assertEquals(2 cb.messageUidChangeCalled); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessages7,"public void  () throws Exception { setupCopyMessages(false); mCopyMock.expect(getCopyMessagesPattern() new String[]{getNextTag(true) + "" oK UID COPY completed""}); int saveTag=resetTag(); expectLogin(mCopyMock new String[]{""* iD nIL"" ""oK""} false); expectSelect(mCopyMock ""&ZeVnLIqe-"" ""rEAD-wRITE""); mCopyMock.expect(getSearchMessagesPattern(""<4D8978AE.0000005D@m58.foo.com>"") new String[]{""* SeArCh"" getNextTag(true) + "" oK UID SEARCH completed (0 msgs in 6.02214 secs)""}); mCopyMock.expect(getSearchMessagesPattern(""<549373104MSOSI1:145OSIMS@bar.com>"") new String[]{""* sEaRcH"" getNextTag(true) + "" oK UID SEARCH completed (0 msgs in 2.99792 secs)""}); resetTag(saveTag); expectSelect(mCopyMock FOLDER_ENCODED ""rEAD-wRITE""); MessageUpdateCallbackCounter cb=new MessageUpdateCallbackCounter(); mFolder.copyMessages(mCopyMessages mCopyToFolder cb); assertEquals(0 cb.messageNotFoundCalled); assertEquals(0 cb.messageUidChangeCalled); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessages8,"public void  () throws Exception { setupCopyMessages(false); mCopyMock.expect(getCopyMessagesPattern() new String[]{getNextTag(true) + "" oK UID COPY completed""}); int saveTag=resetTag(); expectLogin(mCopyMock new String[]{""* iD nIL"" ""oK""} false); expectSelect(mCopyMock ""&ZeVnLIqe-"" ""rEAD-wRITE""); mCopyMock.expect(getSearchMessagesPattern(""<4D8978AE.0000005D@m58.foo.com>"") new String[]{getNextTag(true) + "" BaD search failed""}); mCopyMock.expect(getSearchMessagesPattern(""<549373104MSOSI1:145OSIMS@bar.com>"") new String[]{getNextTag(true) + "" BaD search failed""}); resetTag(saveTag); expectSelect(mCopyMock FOLDER_ENCODED ""rEAD-wRITE""); MessageUpdateCallbackCounter cb=new MessageUpdateCallbackCounter(); mFolder.copyMessages(mCopyMessages mCopyToFolder cb); assertEquals(0 cb.messageNotFoundCalled); assertEquals(0 cb.messageUidChangeCalled); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCopyMessagesIOException,"public void  () throws Exception { runAndExpectMessagingException(new RunAndExpectMessagingExceptionTarget(){ @Override public void run( MockTransport mockTransport) throws Exception { mockTransport.expectIOException(); final Message message=mFolder.createMessage(""1""); final Folder folder=mStore.getFolder(""test""); mFolder.copyMessages(new Message[]{message} folder null); } } ); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCreate,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); expectLogin(mock); Folder folder=mStore.getFolder(""\u65E5\u672C\u8A9E""); assertTrue(folder.canCreate(FolderType.HOLDS_MESSAGES)); mock.expect(getNextTag(false) + "" CREATE \\\""&ZeVnLIqe-\\\"""" new String[]{getNextTag(true) + "" oK Success""}); assertTrue(folder.create(FolderType.HOLDS_MESSAGES)); expectNoop(mock true); mock.expect(getNextTag(false) + "" CREATE \\\""&ZeVnLIqe-\\\"""" new String[]{getNextTag(true) + "" nO Can't create folder""}); assertFalse(folder.create(FolderType.HOLDS_MESSAGES)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testCreateHierarchy,"public void  (){ HashMap<String ImapFolder> testMap=new HashMap<String ImapFolder>(); ImapFolder[] folders={createFolder(1L ""INBOX"" ""INBOX"" '/') createFolder(2L ""b"" ""INBOX/b"" '/') createFolder(3L ""a"" ""a"" '/') createFolder(4L ""b"" ""a/b"" '/') createFolder(5L ""c"" ""a/c"" '/') createFolder(6L ""d"" ""a/d"" '/') createFolder(7L ""b"" ""a/d/b"" '/') createFolder(8L ""b"" ""a/d/b/b"" '/') createFolder(9L ""g"" ""g"" '/')}; for ( ImapFolder folder : folders) { testMap.put(folder.getName() folder); } ImapStore.createHierarchy(testMap); assertEquals(-1L folders[0].mMailbox.mParentKey); assertEquals(0xAAAAAAAB folders[0].mMailbox.mFlags); assertEquals(1L folders[1].mMailbox.mParentKey); assertEquals(0xAAAAAAA8 folders[1].mMailbox.mFlags); assertEquals(-1L folders[2].mMailbox.mParentKey); assertEquals(0xAAAAAAAB folders[2].mMailbox.mFlags); assertEquals(3L folders[3].mMailbox.mParentKey); assertEquals(0xAAAAAAA8 folders[3].mMailbox.mFlags); assertEquals(3L folders[4].mMailbox.mParentKey); assertEquals(0xAAAAAAA8 folders[4].mMailbox.mFlags); assertEquals(3L folders[5].mMailbox.mParentKey); assertEquals(0xAAAAAAAB folders[5].mMailbox.mFlags); assertEquals(6L folders[6].mMailbox.mParentKey); assertEquals(0xAAAAAAAB folders[6].mMailbox.mFlags); assertEquals(7L folders[7].mMailbox.mParentKey); assertEquals(0xAAAAAAA8 folders[7].mMailbox.mFlags); assertEquals(-1L folders[8].mMailbox.mParentKey); assertEquals(0xAAAAAAA8 folders[8].mMailbox.mFlags); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testDecodeFolderName,"public void  (){ assertEquals("""" ImapStore.decodeFolderName("""" null)); assertEquals(""a"" ImapStore.decodeFolderName(""a"" null)); assertEquals(""XYZ"" ImapStore.decodeFolderName(""XYZ"" null)); assertEquals(""\u65E5\u672C\u8A9E"" ImapStore.decodeFolderName(""&ZeVnLIqe-"" null)); assertEquals(""!\u65E5\u672C\u8A9E!"" ImapStore.decodeFolderName(""!&ZeVnLIqe-!"" null)); assertEquals("""" ImapStore.decodeFolderName("""" """")); assertEquals(""a"" ImapStore.decodeFolderName(""a"" """")); assertEquals(""XYZ"" ImapStore.decodeFolderName(""XYZ"" """")); assertEquals(""\u65E5\u672C\u8A9E"" ImapStore.decodeFolderName(""&ZeVnLIqe-"" """")); assertEquals(""!\u65E5\u672C\u8A9E!"" ImapStore.decodeFolderName(""!&ZeVnLIqe-!"" """")); assertEquals("""" ImapStore.decodeFolderName(""[Gmail]/"" ""[Gmail]/"")); assertEquals(""a"" ImapStore.decodeFolderName(""[Gmail]/a"" ""[Gmail]/"")); assertEquals(""XYZ"" ImapStore.decodeFolderName(""[Gmail]/XYZ"" ""[Gmail]/"")); assertEquals(""\u65E5\u672C\u8A9E"" ImapStore.decodeFolderName(""[Gmail]/&ZeVnLIqe-"" ""[Gmail]/"")); assertEquals(""!\u65E5\u672C\u8A9E!"" ImapStore.decodeFolderName(""[Gmail]/!&ZeVnLIqe-!"" ""[Gmail]/"")); assertEquals(""INBOX/"" ImapStore.decodeFolderName(""INBOX/"" ""[Gmail]/"")); assertEquals(""INBOX/a"" ImapStore.decodeFolderName(""INBOX/a"" ""[Gmail]/"")); assertEquals(""INBOX/XYZ"" ImapStore.decodeFolderName(""INBOX/XYZ"" ""[Gmail]/"")); assertEquals(""INBOX/\u65E5\u672C\u8A9E"" ImapStore.decodeFolderName(""INBOX/&ZeVnLIqe-"" ""[Gmail]/"")); assertEquals(""INBOX/!\u65E5\u672C\u8A9E!"" ImapStore.decodeFolderName(""INBOX/!&ZeVnLIqe-!"" ""[Gmail]/"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testEncodeFolderName,"public void  (){ assertEquals("""" ImapStore.encodeFolderName("""" null)); assertEquals(""a"" ImapStore.encodeFolderName(""a"" null)); assertEquals(""XYZ"" ImapStore.encodeFolderName(""XYZ"" null)); assertEquals(""&ZeVnLIqe-"" ImapStore.encodeFolderName(""\u65E5\u672C\u8A9E"" null)); assertEquals(""!&ZeVnLIqe-!"" ImapStore.encodeFolderName(""!\u65E5\u672C\u8A9E!"" null)); assertEquals("""" ImapStore.encodeFolderName("""" """")); assertEquals(""a"" ImapStore.encodeFolderName(""a"" """")); assertEquals(""XYZ"" ImapStore.encodeFolderName(""XYZ"" """")); assertEquals(""&ZeVnLIqe-"" ImapStore.encodeFolderName(""\u65E5\u672C\u8A9E"" """")); assertEquals(""!&ZeVnLIqe-!"" ImapStore.encodeFolderName(""!\u65E5\u672C\u8A9E!"" """")); assertEquals(""[Gmail]/"" ImapStore.encodeFolderName("""" ""[Gmail]/"")); assertEquals(""[Gmail]/a"" ImapStore.encodeFolderName(""a"" ""[Gmail]/"")); assertEquals(""[Gmail]/XYZ"" ImapStore.encodeFolderName(""XYZ"" ""[Gmail]/"")); assertEquals(""[Gmail]/&ZeVnLIqe-"" ImapStore.encodeFolderName(""\u65E5\u672C\u8A9E"" ""[Gmail]/"")); assertEquals(""[Gmail]/!&ZeVnLIqe-!"" ImapStore.encodeFolderName(""!\u65E5\u672C\u8A9E!"" ""[Gmail]/"")); assertEquals(""INBOX"" ImapStore.encodeFolderName(""INBOX"" ""[Gmail]/"")); assertEquals(""inbox"" ImapStore.encodeFolderName(""inbox"" ""[Gmail]/"")); assertEquals(""InBoX"" ImapStore.encodeFolderName(""InBoX"" ""[Gmail]/"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testEnsurePrefixIsValid,"public void  (){ mStore.mPathSeparator=null; mStore.mPathPrefix=null; mStore.ensurePrefixIsValid(); assertNull(mStore.mPathPrefix); mStore.mPathPrefix=""""; mStore.ensurePrefixIsValid(); assertEquals("""" mStore.mPathPrefix); mStore.mPathPrefix=""foo""; mStore.ensurePrefixIsValid(); assertEquals(""foo"" mStore.mPathPrefix); mStore.mPathPrefix=""foo.""; mStore.ensurePrefixIsValid(); assertEquals(""foo."" mStore.mPathPrefix); mStore.mPathSeparator=""""; mStore.mPathPrefix=null; mStore.ensurePrefixIsValid(); assertNull(mStore.mPathPrefix); mStore.mPathPrefix=""""; mStore.ensurePrefixIsValid(); assertEquals("""" mStore.mPathPrefix); mStore.mPathPrefix=""foo""; mStore.ensurePrefixIsValid(); assertEquals(""foo"" mStore.mPathPrefix); mStore.mPathPrefix=""foo.""; mStore.ensurePrefixIsValid(); assertEquals(""foo."" mStore.mPathPrefix); mStore.mPathSeparator="".""; mStore.mPathPrefix=null; mStore.ensurePrefixIsValid(); assertNull(mStore.mPathPrefix); mStore.mPathPrefix=""""; mStore.ensurePrefixIsValid(); assertEquals("""" mStore.mPathPrefix); mStore.mPathPrefix=""foo""; mStore.ensurePrefixIsValid(); assertEquals(""foo."" mStore.mPathPrefix); mStore.mPathPrefix=""foo.""; mStore.ensurePrefixIsValid(); assertEquals(""foo."" mStore.mPathPrefix); mStore.mPathPrefix=""foo/""; mStore.ensurePrefixIsValid(); assertEquals(""foo/."" mStore.mPathPrefix); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testExcessFetchResult,"public void  () throws MessagingException { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); Message message1=mFolder.createMessage(""1""); assertFalse(message1.isSet(Flag.SEEN)); FetchProfile fp=new FetchProfile(); fp.clear(); fp.add(FetchProfile.Item.FLAGS); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID FLAGS\\)"" new String[]{""* 1 fETCH (uID 1 fLAGS (\\Seen))"" ""* 2 fETCH (fLAGS (\\Seen))"" getNextTag(true) + "" oK SUCCESS""}); mFolder.fetch(new Message[]{message1} fp null); assertTrue(message1.isSet(Flag.SEEN)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testExists,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); expectLogin(mock); Folder folder=mStore.getFolder(""\u65E5\u672C\u8A9E""); mock.expect(getNextTag(false) + "" STATUS \\\""&ZeVnLIqe-\\\"" \\(UIDVALIDITY\\)"" new String[]{""* sTATUS \""&ZeVnLIqe-\"" (mESSAGES 10)"" getNextTag(true) + "" oK SUCCESS""}); assertTrue(folder.exists()); expectNoop(mock true); folder=mStore.getFolder(""no such folder""); mock.expect(getNextTag(false) + "" STATUS \\\""no such folder\\\"" \\(UIDVALIDITY\\)"" new String[]{getNextTag(true) + "" NO No such folder!""}); assertFalse(folder.exists()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testExpunge,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); mock.expect(getNextTag(false) + "" EXPUNGE"" new String[]{getNextTag(true) + "" oK success""}); mFolder.expunge(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testExpungeIOException,public void  () throws Exception { runAndExpectMessagingException(new RunAndExpectMessagingExceptionTarget(){ @Override public void run( MockTransport mockTransport) throws Exception { mockTransport.expectIOException(); mFolder.expunge(); } } ); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFetchAttachment,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); final Message message=mFolder.createMessage(""1""); final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.STRUCTURE); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODYSTRUCTURE\\)"" new String[]{""* 9 fETCH (uID 1 bODYSTRUCTURE ((\""tEXT\"" \""PLAIN\"" (\""cHARSET\"" \""iSO-8859-1\"")"" + "" CID nIL \""7bIT\"" 18 3 NIL NIL NIL)"" + ""(\""IMAGE\"" \""PNG\""""+ "" (\""nAME\"" \""device.png\"") NIL NIL \""bASE64\"" 117840 NIL (\""aTTACHMENT\""""+ ""(\""fILENAME\"" \""device.png\"")) NIL)""+ ""\""mIXED\""))"" getNextTag(true) + "" OK SUCCESS""}); mFolder.fetch(new Message[]{message} fp null); Body body=message.getBody(); assertTrue(body instanceof MimeMultipart); MimeMultipart mimeMultipart=(MimeMultipart)body; assertEquals(2 mimeMultipart.getCount()); Part part1=mimeMultipart.getBodyPart(1); assertTrue(part1 instanceof MimeBodyPart); MimeBodyPart mimePart1=(MimeBodyPart)part1; fp.clear(); fp.add(mimePart1); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODY.PEEK\\[2\\]\\)"" new String[]{""* 9 fETCH (uID 1 bODY[2] {4}"" ""YWJj)"" getNextTag(true) + "" oK SUCCESS""}); mFolder.fetch(new Message[]{message} fp null); assertEquals(""abc"" Utility.fromUtf8(IOUtils.toByteArray(mimePart1.getBody().getInputStream()))); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFetchBody,"public void  () throws MessagingException { final MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); final Message message=mFolder.createMessage(""1""); final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.BODY); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODY.PEEK\\[\\]\\)"" new String[]{""* 9 fETCH (uID 1 bODY[] {23}"" ""from: a@b.com"" """" ""test"" "")"" getNextTag(true) + "" oK SUCCESS""}); mFolder.fetch(new Message[]{message} fp null); assertEquals(""a@b.com"" message.getHeader(""from"")[0]); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFetchBodySane,"public void  () throws MessagingException { final MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); final Message message=mFolder.createMessage(""1""); final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.BODY_SANE); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODY.PEEK\\[\\]<0.51200>\\)"" new String[]{""* 9 fETCH (uID 1 bODY[] {23}"" ""from: a@b.com"" """" ""test"" "")"" getNextTag(true) + "" oK SUCCESS""}); mFolder.fetch(new Message[]{message} fp null); assertEquals(""a@b.com"" message.getHeader(""from"")[0]); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFetchBodyStructureMalformed,"public void  () throws Exception { final MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); final Message message=mFolder.createMessage(""1""); final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.STRUCTURE); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODYSTRUCTURE\\)"" new String[]{""* 9 FETCH (UID 1 BODYSTRUCTURE (\""TEXT\"" \""PLAIN\"" ()"" + "" NIL NIL NIL 123E 3))"" getNextTag(true) + "" OK SUCCESS""}); mFolder.fetch(new Message[]{message} fp null); MoreAsserts.assertEquals(new String[]{""text/plain""} message.getHeader(""Content-Type"")); assertNull(message.getHeader(""Content-Transfer-Encoding"")); assertNull(message.getHeader(""Content-ID"")); assertNull(message.getHeader(""Content-Disposition"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFetchBodyStructureMultipart,"public void  () throws Exception { final MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); final Message message=mFolder.createMessage(""1""); final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.STRUCTURE); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODYSTRUCTURE\\)"" new String[]{""* 9 fETCH (uID 1 bODYSTRUCTURE ((\""tEXT\"" \""pLAIN\"" () {20}"" ""long content id#@!@#"" + "" NIL \""7BIT\"" 18 3 NIL NIL NIL)"" + ""(\""IMAGE\"" \""PNG\"" (\""NAME\"" {10}"" ""device.png) NIL NIL \""BASE64\"" {6}"" ""117840 NIL (\""aTTACHMENT\"" (\""fILENAME\"" \""device.png\"")) NIL)"" + ""(\""TEXT\"" \""HTML\"" () NIL NIL \""7BIT\"" 100 NIL 123 (\""aTTACHMENT\"""" + ""(\""fILENAME\"" {15}"" ""attachment.html \""SIZE\"" 555)) NIL)"" + ""((\""TEXT\"" \""HTML\"" NIL NIL \""BASE64\"")(\""XXX\"" \""YYY\""))"" + ""\""mIXED\"" (\""bOUNDARY\"" \""00032556278a7005e40486d159ca\"") NIL NIL))"" getNextTag(true) + "" oK SUCCESS""}); mFolder.fetch(new Message[]{message} fp null); final Body body=message.getBody(); assertTrue(body instanceof MimeMultipart); MimeMultipart mimeMultipart=(MimeMultipart)body; assertEquals(4 mimeMultipart.getCount()); assertEquals(""mixed"" mimeMultipart.getSubTypeForTest()); final Part part1=mimeMultipart.getBodyPart(0); final Part part2=mimeMultipart.getBodyPart(1); final Part part3=mimeMultipart.getBodyPart(2); final Part part4=mimeMultipart.getBodyPart(3); assertTrue(part1 instanceof MimeBodyPart); assertTrue(part2 instanceof MimeBodyPart); assertTrue(part3 instanceof MimeBodyPart); assertTrue(part4 instanceof MimeBodyPart); final MimeBodyPart mimePart1=(MimeBodyPart)part1; final MimeBodyPart mimePart2=(MimeBodyPart)part2; final MimeBodyPart mimePart3=(MimeBodyPart)part3; final MimeBodyPart mimePart4=(MimeBodyPart)part4; MoreAsserts.assertEquals(new String[]{""1""} part1.getHeader(""X-Android-Attachment-StoreData"")); MoreAsserts.assertEquals(new String[]{""2""} part2.getHeader(""X-Android-Attachment-StoreData"")); MoreAsserts.assertEquals(new String[]{""3""} part3.getHeader(""X-Android-Attachment-StoreData"")); MoreAsserts.assertEquals(new String[]{""text/plain""} part1.getHeader(""Content-Type"")); MoreAsserts.assertEquals(new String[]{""image/png;\n NAME=\""device.png\""""} part2.getHeader(""Content-Type"")); MoreAsserts.assertEquals(new String[]{""text/html""} part3.getHeader(""Content-Type"")); MoreAsserts.assertEquals(new String[]{""long content id#@!@#""} part1.getHeader(""Content-ID"")); assertNull(part2.getHeader(""Content-ID"")); assertNull(part3.getHeader(""Content-ID"")); MoreAsserts.assertEquals(new String[]{""7BIT""} part1.getHeader(""Content-Transfer-Encoding"")); MoreAsserts.assertEquals(new String[]{""BASE64""} part2.getHeader(""Content-Transfer-Encoding"")); MoreAsserts.assertEquals(new String[]{""7BIT""} part3.getHeader(""Content-Transfer-Encoding"")); MoreAsserts.assertEquals(new String[]{"";\n size=18""} part1.getHeader(""Content-Disposition"")); MoreAsserts.assertEquals(new String[]{""attachment;\n filename=\""device.png\"";\n size=117840""} part2.getHeader(""Content-Disposition"")); MoreAsserts.assertEquals(new String[]{""attachment;\n filename=\""attachment.html\"";\n size=\""555\""""} part3.getHeader(""Content-Disposition"")); final Body part4body=part4.getBody(); assertTrue(part4body instanceof MimeMultipart); MimeMultipart mimeMultipartPart4=(MimeMultipart)part4body; assertEquals(2 mimeMultipartPart4.getCount()); final MimeBodyPart mimePart41=(MimeBodyPart)mimeMultipartPart4.getBodyPart(0); final MimeBodyPart mimePart42=(MimeBodyPart)mimeMultipartPart4.getBodyPart(1); MoreAsserts.assertEquals(new String[]{""4.1""} mimePart41.getHeader(""X-Android-Attachment-StoreData"")); MoreAsserts.assertEquals(new String[]{""4.2""} mimePart42.getHeader(""X-Android-Attachment-StoreData"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFetchBodyStructureSimple,"public void  () throws Exception { final MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); final Message message=mFolder.createMessage(""1""); final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.STRUCTURE); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODYSTRUCTURE\\)"" new String[]{""* 9 fETCH (uID 1 bODYSTRUCTURE (\""tEXT\"" \""pLAIN\"" nIL"" + "" nIL nIL nIL 18 3 nIL nIL nIL))"" getNextTag(true) + "" oK sUCCESS""}); mFolder.fetch(new Message[]{message} fp null); MoreAsserts.assertEquals(new String[]{""text/plain""} message.getHeader(""Content-Type"")); assertNull(message.getHeader(""Content-Transfer-Encoding"")); assertNull(message.getHeader(""Content-ID"")); MoreAsserts.assertEquals(new String[]{"";\n size=18""} message.getHeader(""Content-Disposition"")); MoreAsserts.assertEquals(new String[]{""TEXT""} message.getHeader(""X-Android-Attachment-StoreData"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFetchFlagEnvelope,"public void  () throws MessagingException { final MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); final Message message=mFolder.createMessage(""1""); final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); fp.add(FetchProfile.Item.ENVELOPE); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID FLAGS INTERNALDATE RFC822\\.SIZE BODY\\.PEEK\\[HEADER.FIELDS"" + "" \\(date subject from content-type to cc message-id\\)\\]\\)"" new String[]{""* 9 fETCH (uID 1 rFC822.sIZE 120626 iNTERNALDATE \""17-may-2010 22:00:15 +0000\"""" + ""fLAGS (\\Seen) bODY[hEADER.FIELDS (dAte sUbject fRom cOntent-type tO cC"" + "" mEssage-id)]""+ "" {279}"" ""From: Xxxxxx Yyyyy <userxx@android.com>"" ""Date: Mon  17 May 2010 14:59:52 -0700"" ""Message-ID: <x0000000000000000000000000000000000000000000000y@android.com>"" ""Subject: ssubject"" ""To: android.test01@android.com"" ""Content-Type: multipart/mixed; boundary=a00000000000000000000000000b"" """" "")"" getNextTag(true) + "" oK SUCCESS""}); mFolder.fetch(new Message[]{message} fp null); assertEquals(""android.test01@android.com"" message.getHeader(""to"")[0]); assertEquals(""Xxxxxx Yyyyy <userxx@android.com>"" message.getHeader(""from"")[0]); assertEquals(""multipart/mixed; boundary=a00000000000000000000000000b"" message.getHeader(""Content-Type"")[0]); assertTrue(message.isSet(Flag.SEEN)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFetchIOException,"public void  () throws Exception { runAndExpectMessagingException(new RunAndExpectMessagingExceptionTarget(){ @Override public void run( MockTransport mockTransport) throws Exception { mockTransport.expectIOException(); final Message message=mFolder.createMessage(""1""); final FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.STRUCTURE); mFolder.fetch(new Message[]{message} fp null); } } ); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testFolderNameWithSpecialChars,"public void  () throws Exception { final String FOLDER_1=""@u88**%_St""; final String FOLDER_1_QUOTED=Pattern.quote(FOLDER_1); final String FOLDER_2=""folder test_06""; MockTransport mock=openAndInjectMockTransport(); expectLogin(mock); expectNoop(mock true); mock.expect(getNextTag(false) + "" LIST \""\"" \""\\*\"""" new String[]{""* LIST () \""/\"" \"""" + FOLDER_1 + ""\"""" ""* LIST () \""/\"" \"""" + FOLDER_2 + ""\"""" getNextTag(true) + "" OK SUCCESS""}); final Folder[] folders=mStore.updateFolders(); ArrayList<String> list=new ArrayList<String>(); for ( Folder f : folders) { list.add(f.getName()); } MoreAsserts.assertEquals(new String[]{""INBOX"" FOLDER_2 FOLDER_1} list.toArray(new String[0])); expectNoop(mock true); mock.expect(getNextTag(false) + "" SELECT \"""" + FOLDER_1_QUOTED+ ""\"""" new String[]{""* FLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen)"" ""* OK [PERMANENTFLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen \\*)]"" ""* 0 EXISTS"" ""* 0 RECENT"" ""* OK [UNSEEN 0]"" ""* OK [UIDNEXT 1]"" getNextTag(true) + "" OK [READ-WRITE] "" + FOLDER_1}); folders[2].open(OpenMode.READ_WRITE); folders[2].close(false); expectNoop(mock true); mock.expect(getNextTag(false) + "" SELECT \"""" + FOLDER_2+ ""\"""" new String[]{""* FLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen)"" ""* OK [PERMANENTFLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen \\*)]"" ""* 0 EXISTS"" ""* 0 RECENT"" ""* OK [UNSEEN 0]"" ""* OK [UIDNEXT 1]"" getNextTag(true) + "" OK [READ-WRITE] "" + FOLDER_2}); folders[1].open(OpenMode.READ_WRITE); folders[1].close(false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testGetAllFolders,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); expectLogin(mock); expectNoop(mock true); mock.expect(getNextTag(false) + "" LIST \""\"" \""\\*\"""" new String[]{""* lIST (\\HAsNoChildren) \""/\"" \""inbox\"""" ""* lIST (\\hAsnochildren) \""/\"" \""Drafts\"""" ""* lIST (\\nOselect) \""/\"" \""no select\"""" ""* lIST (\\HAsNoChildren) \""/\"" \""&ZeVnLIqe-\"""" getNextTag(true) + "" oK SUCCESS""}); Folder[] folders=mStore.updateFolders(); ImapFolder testFolder; testFolder=(ImapFolder)folders[0]; assertEquals(""INBOX"" testFolder.getName()); assertEquals(SELECTABLE_BITS testFolder.mMailbox.mFlags & SELECTABLE_BITS); testFolder=(ImapFolder)folders[1]; assertEquals(""no select"" testFolder.getName()); assertEquals(0 testFolder.mMailbox.mFlags & SELECTABLE_BITS); testFolder=(ImapFolder)folders[2]; assertEquals(""\u65E5\u672C\u8A9E"" testFolder.getName()); assertEquals(SELECTABLE_BITS testFolder.mMailbox.mFlags & SELECTABLE_BITS); testFolder=(ImapFolder)folders[3]; assertEquals(""Drafts"" testFolder.getName()); assertEquals(SELECTABLE_BITS testFolder.mMailbox.mFlags & SELECTABLE_BITS); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testGetConnection,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); assertEquals(0 mStore.getConnectionPoolForTest().size()); final ImapConnection con1=mStore.getConnection(); assertNotNull(con1); assertEquals(0 mStore.getConnectionPoolForTest().size()); assertFalse(con1.isTransportOpenForTest()); expectLogin(mock); con1.open(); assertTrue(con1.isTransportOpenForTest()); final ImapConnection con2=mStore.getConnection(); assertNotNull(con2); assertEquals(0 mStore.getConnectionPoolForTest().size()); assertFalse(con2.isTransportOpenForTest()); assertNotSame(con1 con2); int saveTag=resetTag(); expectLogin(mock); con2.open(); assertTrue(con1.isTransportOpenForTest()); mStore.poolConnection(con1); assertEquals(1 mStore.getConnectionPoolForTest().size()); saveTag=resetTag(saveTag); mock.expect(getNextTag(false) + "" NOOP"" new String[]{getNextTag(true) + "" oK success""}); final ImapConnection con1b=mStore.getConnection(); assertEquals(0 mStore.getConnectionPoolForTest().size()); assertSame(con1 con1b); assertTrue(con1.isTransportOpenForTest()); mStore.poolConnection(con2); assertEquals(1 mStore.getConnectionPoolForTest().size()); resetTag(saveTag); mock.expect(getNextTag(false) + "" NOOP"" new String[]{getNextTag(true) + ""* bYE bye""}); final ImapConnection con3=mStore.getConnection(); assertNotNull(con3); assertEquals(0 mStore.getConnectionPoolForTest().size()); assertNotSame(con1 con3); assertNotSame(con2 con3); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testNoFolderRolesYet,public void  (){ Folder[] remoteFolders=mStore.updateFolders(); for ( Folder folder : remoteFolders) { assertEquals(Folder.FolderRole.UNKNOWN folder.getRole()); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testOneUnread,public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); checkOneUnread(mockTransport); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testGetMessage,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); mock.expect(getNextTag(false) + "" UID SEARCH UID 123"" new String[]{""* sEARCH 123"" getNextTag(true) + "" oK success""}); assertEquals(""123"" mFolder.getMessage(""123"").getUid()); mock.expect(getNextTag(false) + "" UID SEARCH UID 123"" new String[]{getNextTag(true) + "" nO not found""}); assertNull(mFolder.getMessage(""123"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testGetMessages1,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); mock.expect(getNextTag(false) + "" UID SEARCH 3:5 NOT DELETED"" new String[]{""* sEARCH 3 4"" getNextTag(true) + "" oK success""}); checkMessageUids(new String[]{""3"" ""4""} mFolder.getMessages(3 5 null)); mock.expect(getNextTag(false) + "" UID SEARCH 3:5 NOT DELETED"" new String[]{getNextTag(true) + "" nO not found""}); checkMessageUids(new String[]{} mFolder.getMessages(3 5 null)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testGetMessages2,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); checkMessageUids(new String[]{""3"" ""4"" ""5""} mFolder.getMessages(new String[]{""3"" ""4"" ""5""} null)); checkMessageUids(new String[]{} mFolder.getMessages(new String[]{} null)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testGetUnreadMessageCount,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); mock.expect(getNextTag(false) + "" STATUS \\\"""" + FOLDER_ENCODED+ ""\\\"" \\(UNSEEN\\)"" new String[]{""* sTATUS \"""" + FOLDER_ENCODED + ""\"" (X 1 uNSEEN 123)"" getNextTag(true) + "" oK copy completed""}); assertEquals(123 mFolder.getUnreadMessageCount()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testGetUnreadMessageCountWithLiteralString,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mock.expect(getNextTag(false) + "" STATUS \"""" + FOLDER_ENCODED+ ""\"" \\(UNSEEN\\)"" new String[]{""* sTATUS {5}"" FOLDER_ENCODED + "" (uNSEEN 10)"" getNextTag(true) + "" oK STATUS completed""}); mFolder.open(OpenMode.READ_WRITE); int unreadCount=mFolder.getUnreadMessageCount(); assertEquals(""getUnreadMessageCount with literal string"" 10 unreadCount); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testRetrVariants,public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); openFolderWithMessage(mockTransport); setupUidlSequence(mockTransport 2); Message[] messages=mFolder.getMessages(1 2 null); assertEquals(2 messages.length); setupListSequence(mockTransport 2); FetchProfile fp=new FetchProfile(); fp.add(FetchProfile.Item.FLAGS); fp.add(FetchProfile.Item.ENVELOPE); mFolder.fetch(messages fp null); for ( Message message : messages) { message.getRecipients(RecipientType.TO); message.getRecipients(RecipientType.CC); message.getRecipients(RecipientType.BCC); } Message[] singleMessage=new Message[]{messages[0]}; setupSingleMessageTop(mockTransport 1 true true); fp=new FetchProfile(); fp.add(FetchProfile.Item.BODY_SANE); mFolder.fetch(singleMessage fp null); checkFetchedMessage(singleMessage[0] 1 false); singleMessage[0]=messages[1]; setupSingleMessageTop(mockTransport 2 true false); fp=new FetchProfile(); fp.add(FetchProfile.Item.BODY_SANE); mFolder.fetch(singleMessage fp null); checkFetchedMessage(singleMessage[0] 2 false); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testGetUnreadMessageCountWithQuotedString,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mock.expect(getNextTag(false) + "" STATUS \"""" + FOLDER_ENCODED+ ""\"" \\(UNSEEN\\)"" new String[]{""* sTATUS \"""" + FOLDER_ENCODED + ""\"" (uNSEEN 2)"" getNextTag(true) + "" oK STATUS completed""}); mFolder.open(OpenMode.READ_WRITE); int unreadCount=mFolder.getUnreadMessageCount(); assertEquals(""getUnreadMessageCount with quoted string"" 2 unreadCount); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testSentUploadRequested,public void  (){ assertTrue(mStore.requireCopyMessageToSentFolder()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdBad,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport new String[]{""bAD unknown command bad-char-%""} ""rEAD-wRITE""); mFolder.open(OpenMode.READ_WRITE); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testSimpleLogin,public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport 0 null); mFolder.open(OpenMode.READ_ONLY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testSmallFolderFunctions,"public void  (){ assertEquals(OpenMode.READ_WRITE mFolder.getMode()); assertFalse(mFolder.canCreate(FolderType.HOLDS_FOLDERS)); assertFalse(mFolder.canCreate(FolderType.HOLDS_MESSAGES)); assertFalse(mFolder.create(FolderType.HOLDS_FOLDERS)); assertFalse(mFolder.create(FolderType.HOLDS_MESSAGES)); assertEquals(-1 mFolder.getUnreadMessageCount()); Flag[] flags=mFolder.getPermanentFlags(); assertEquals(1 flags.length); assertEquals(Flag.DELETED flags[0]); mFolder.delete(false); assertNull(mFolder.expunge()); try { mFolder.copyMessages(null null null); fail(""Exception not thrown by copyMessages()""); } catch ( UnsupportedOperationException e) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdBasic,"public void  (){ String id=ImapStore.getImapId(mTestContext ""user-name"" ""host-name"" CAPABILITY_RESPONSE.flatten()); HashMap<String String> map=tokenizeImapId(id); assertEquals(mTestContext.getPackageName() map.get(""name"")); assertEquals(""android"" map.get(""os"")); assertNotNull(map.get(""os-version"")); assertNotNull(map.get(""vendor"")); assertNotNull(map.get(""AGUID"")); id=ImapStore.makeCommonImapId(""packageName"" ""version"" ""codeName"" ""model"" ""id"" ""vendor"" ""network-operator""); map=tokenizeImapId(id); assertEquals(""packageName"" map.get(""name"")); assertEquals(""android"" map.get(""os"")); assertEquals(""version; id"" map.get(""os-version"")); assertEquals(""vendor"" map.get(""vendor"")); assertEquals(null map.get(""x-android-device-model"")); assertEquals(""network-operator"" map.get(""x-android-mobile-net-operator"")); assertEquals(null map.get(""AGUID"")); id=ImapStore.makeCommonImapId(""packageName"" """" ""REL"" ""model"" ""id"" ""vendor"" """"); map=tokenizeImapId(id); assertEquals(""packageName"" map.get(""name"")); assertEquals(""android"" map.get(""os"")); assertEquals(""1.0; id"" map.get(""os-version"")); assertEquals(""vendor"" map.get(""vendor"")); assertEquals(""model"" map.get(""x-android-device-model"")); assertEquals(null map.get(""x-android-mobile-net-operator"")); assertEquals(null map.get(""AGUID"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testStoreFoldersFunctions,"public void  (){ Folder[] folders=mStore.updateFolders(); assertEquals(1 folders.length); assertSame(mFolder folders[0]); assertEquals(""INBOX"" mFolder.getName()); Pop3Store.Pop3Folder folderMixedCaseInbox=mStore.new Pop3Folder(""iNbOx""); assertEquals(""INBOX"" folderMixedCaseInbox.getName()); Pop3Store.Pop3Folder folderNotInbox=mStore.new Pop3Folder(""NOT-INBOX""); assertEquals(""NOT-INBOX"" folderNotInbox.getName()); assertTrue(mFolder.exists()); assertTrue(folderMixedCaseInbox.exists()); assertFalse(folderNotInbox.exists()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testUIDLComcastVariant,"public void  (){ Pop3Store.Pop3Folder.UidlParser parser=mFolder.new UidlParser(); parser.parseMultiLine(""101 "" + UNIQUE_ID_1); assertEquals(101 parser.mMessageNumber); assertEquals(UNIQUE_ID_1 parser.mUniqueId); assertFalse(parser.mEndOfMessage); assertFalse(parser.mErr); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testUIDLParserMulti,"public void  (){ Pop3Store.Pop3Folder.UidlParser parser=mFolder.new UidlParser(); parser.parseMultiLine(""101 "" + UNIQUE_ID_1); assertEquals(101 parser.mMessageNumber); assertEquals(UNIQUE_ID_1 parser.mUniqueId); assertFalse(parser.mEndOfMessage); assertFalse(parser.mErr); parser.parseMultiLine("".""); assertTrue(parser.mEndOfMessage); assertFalse(parser.mErr); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdDeviceId,"public void  () throws MessagingException { HostAuth testAuth; Account testAccount; testAuth=new HostAuth(); testAuth.setLogin(""user1"" ""password""); testAuth.setConnection(""imap"" ""server"" 999); testAccount=new Account(); testAccount.mHostAuthRecv=testAuth; ImapStore testStore1A=(ImapStore)ImapStore.newInstance(testAccount mTestContext); testAuth=new HostAuth(); testAuth.setLogin(""user1"" ""password""); testAuth.setConnection(""imap"" ""server"" 999); testAccount=new Account(); testAccount.mHostAuthRecv=testAuth; ImapStore testStore1B=(ImapStore)ImapStore.newInstance(testAccount mTestContext); testAuth=new HostAuth(); testAuth.setLogin(""user2"" ""password""); testAuth.setConnection(""imap"" ""server"" 999); testAccount=new Account(); testAccount.mHostAuthRecv=testAuth; ImapStore testStore2=(ImapStore)ImapStore.newInstance(testAccount mTestContext); String capabilities=CAPABILITY_RESPONSE.flatten(); String id1a=ImapStore.getImapId(mTestContext ""user1"" ""host-name"" capabilities); String id1b=ImapStore.getImapId(mTestContext ""user1"" ""host-name"" capabilities); String id2=ImapStore.getImapId(mTestContext ""user2"" ""host-name"" capabilities); String uid1a=tokenizeImapId(id1a).get(""AGUID""); String uid1b=tokenizeImapId(id1b).get(""AGUID""); String uid2=tokenizeImapId(id2).get(""AGUID""); assertEquals(uid1a uid1b); MoreAsserts.assertNotEqual(uid1a uid2); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testUIDLParserMultiFail,"public void  (){ Pop3Store.Pop3Folder.UidlParser parser=mFolder.new UidlParser(); boolean result; result=parser.parseMultiLine(null); assertFalse(result); result=parser.parseMultiLine(""""); assertFalse(result); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdFiltering,"public void  (){ String id=ImapStore.makeCommonImapId(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"" ""0123456789"" ""codeName"" ""model"" ""-_+=;:. // "" ""v(e)n\""d\ro\nr"" ""()\""""); HashMap<String String> map=tokenizeImapId(id); assertEquals(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"" map.get(""name"")); assertEquals(""0123456789; -_+=;:. // "" map.get(""os-version"")); assertEquals(""vendor"" map.get(""vendor"")); assertNull(map.get(""x-android-mobile-net-operator"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testUIDLParserSingle,"public void  (){ Pop3Store.Pop3Folder.UidlParser parser=mFolder.new UidlParser(); parser.parseSingleLine(""+OK 101 "" + UNIQUE_ID_1); assertEquals(101 parser.mMessageNumber); assertEquals(UNIQUE_ID_1 parser.mUniqueId); assertTrue(parser.mEndOfMessage); parser.parseSingleLine(""-ERR what???""); assertTrue(parser.mErr); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdNotSupported,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport null ""rEAD-wRITE""); mFolder.open(OpenMode.READ_WRITE); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\Pop3StoreUnitTests.java,testUIDLParserSingleFail,"public void  (){ Pop3Store.Pop3Folder.UidlParser parser=mFolder.new UidlParser(); boolean result; result=parser.parseSingleLine(null); assertFalse(result); result=parser.parseSingleLine(""""); assertFalse(result); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdOkParsing,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport new String[]{""* iD nIL"" ""oK [iD] bad-char-%""} ""rEAD-wRITE""); mFolder.open(OpenMode.READ_WRITE); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdSecureServerNotSent,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); mockTransport.setHost(""eMail.sEcurEserVer.nEt""); mockTransport.expect(null ""* oK Imap 2000 Ready To Assist You""); expectCapability(mockTransport true false); mockTransport.expect(getNextTag(false) + "" LOGIN user \""password\"""" getNextTag(true) + "" "" + ""oK user authenticated (Success)""); expectSelect(mockTransport FOLDER_ENCODED ""rEAD-wRITE""); mFolder.open(OpenMode.READ_WRITE); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdSecureServerParseFail,"public void  (){ MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport new String[]{""* ID( \""name\"" \""Godaddy IMAP\"" \""version\"" \""3.1.0\"")"" ""oK""} ""rEAD-wRITE""); try { mFolder.open(OpenMode.READ_WRITE); fail(""Expected MessagingException""); } catch ( MessagingException expected) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testImapIdWithVendorPolicy,"public void  (){ try { MockVendorPolicy.inject(mTestContext); Bundle result=new Bundle(); result.putString(""getImapId"" ""\""test-key\"" \""test-value\""""); MockVendorPolicy.mockResult=result; String id=ImapStore.getImapId(mTestContext ""user-name"" ""host-name"" ImapTestUtils.parseResponse(""* CAPABILITY IMAP4rev1 XXX YYY Z"").flatten()); assertEquals(""test-value"" tokenizeImapId(id).get(""test-key"")); assertEquals(""getImapId"" MockVendorPolicy.passedPolicy); assertEquals(""user-name"" MockVendorPolicy.passedBundle.getString(""getImapId.user"")); assertEquals(""host-name"" MockVendorPolicy.passedBundle.getString(""getImapId.host"")); assertEquals(""[CAPABILITY IMAP4rev1 XXX YYY Z]"" MockVendorPolicy.passedBundle.getString(""getImapId.capabilities"")); } finally { VendorPolicyLoader.clearInstanceForTest(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testJoinMessageUids,"public void  () throws Exception { assertEquals("""" ImapStore.joinMessageUids(new Message[]{})); assertEquals(""a"" ImapStore.joinMessageUids(new Message[]{mFolder.createMessage(""a"")})); assertEquals(""a XX"" ImapStore.joinMessageUids(new Message[]{mFolder.createMessage(""a"") mFolder.createMessage(""XX"")})); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testLoginFailure,"public void  () throws Exception { MockTransport mockTransport=openAndInjectMockTransport(); expectLogin(mockTransport false false false new String[]{""* iD nIL"" ""oK""} ""nO authentication failed""); try { mStore.getConnection().open(); fail(""Didn't throw AuthenticationFailedException""); } catch ( AuthenticationFailedException expected) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testNilMessage,"public void  () throws MessagingException { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); FetchProfile fp=new FetchProfile(); fp.clear(); fp.add(FetchProfile.Item.STRUCTURE); Message message1=mFolder.createMessage(""1""); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODYSTRUCTURE\\)"" new String[]{""* 1 fETCH (uID 1 bODYSTRUCTURE (tEXT pLAIN nIL nIL nIL 7bIT 0 0 nIL nIL nIL))"" getNextTag(true) + "" oK SUCCESS""}); mFolder.fetch(new Message[]{message1} fp null); mock.expect(getNextTag(false) + "" UID FETCH 1 \\(UID BODY.PEEK\\[TEXT\\]\\)"" new String[]{""* 1 fETCH (uID 1 bODY[tEXT] nIL)"" getNextTag(true) + "" oK SUCCESS""}); ArrayList<Part> viewables=new ArrayList<Part>(); ArrayList<Part> attachments=new ArrayList<Part>(); MimeUtility.collectParts(message1 viewables attachments); assertTrue(viewables.size() == 1); Part emptyBodyPart=viewables.get(0); fp.clear(); fp.add(emptyBodyPart); mFolder.fetch(new Message[]{message1} fp null); viewables=new ArrayList<Part>(); attachments=new ArrayList<Part>(); MimeUtility.collectParts(message1 viewables attachments); assertTrue(viewables.size() == 1); emptyBodyPart=viewables.get(0); String text=MimeUtility.getTextFromPart(emptyBodyPart); assertNull(text); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testNoFolderRolesYet,public void  (){ assertEquals(Folder.FolderRole.UNKNOWN mFolder.getRole()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testOpen,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); expectLogin(mock); final Folder folder=mStore.getFolder(""test""); mock.expect(getNextTag(false) + "" SELECT \\\""test\\\"""" new String[]{getNextTag(true) + "" nO no such mailbox""}); try { folder.open(OpenMode.READ_WRITE); fail(); } catch ( MessagingException expected) { } expectNoop(mock true); mock.expect(getNextTag(false) + "" SELECT \\\""test\\\"""" new String[]{""* 1 eXISTS"" getNextTag(true) + "" oK [rEAD-wRITE]""}); folder.open(OpenMode.READ_WRITE); assertTrue(folder.exists()); assertEquals(1 folder.getMessageCount()); assertEquals(OpenMode.READ_WRITE folder.getMode()); assertTrue(folder.isOpen()); folder.close(false); assertFalse(folder.isOpen()); expectNoop(mock true); mock.expect(getNextTag(false) + "" SELECT \\\""test\\\"""" new String[]{""* 2 eXISTS"" getNextTag(true) + "" oK [rEAD-oNLY]""}); folder.open(OpenMode.READ_WRITE); assertTrue(folder.exists()); assertEquals(2 folder.getMessageCount()); assertEquals(OpenMode.READ_ONLY folder.getMode()); expectNoop(mock true); mock.expect(getNextTag(false) + "" SELECT \\\""test\\\"""" new String[]{""* 15 eXISTS"" getNextTag(true) + "" oK selected""}); folder.open(OpenMode.READ_WRITE); assertTrue(folder.exists()); assertEquals(15 folder.getMessageCount()); assertEquals(OpenMode.READ_WRITE folder.getMode()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testOpenIOException,"public void  () throws Exception { runAndExpectMessagingException(new RunAndExpectMessagingExceptionTarget(){ @Override public void run( MockTransport mockTransport) throws Exception { mockTransport.expectIOException(); final Folder folder=mStore.getFolder(""test""); folder.open(OpenMode.READ_WRITE); } } ); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testQuotaAlert,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); expectLogin(mock); Folder folder=mStore.getFolder(""INBOX""); mock.expect(getNextTag(false) + "" SELECT \""INBOX\"""" new String[]{""* FLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen NonJunk $Forwarded Junk"" + "" $Label4 $Label1 $Label2 $Label3 $Label5 $MDNSent Old)"" ""* OK [PERMANENTFLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen NonJunk"" + "" $Forwarded Junk $Label4 $Label1 $Label2 $Label3 $Label5 $MDNSent Old \\*)]"" ""* 6406 EXISTS"" ""* 0 RECENT"" ""* OK [UNSEEN 5338]"" ""* OK [UIDVALIDITY 1055957975]"" ""* OK [UIDNEXT 449625]"" ""* NO [ALERT] Mailbox is at 98% of quota"" getNextTag(true) + "" OK [READ-WRITE] Completed""}); folder.open(OpenMode.READ_WRITE); assertEquals(6406 folder.getMessageCount()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testReadOnly,"public void  () throws MessagingException { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock ""rEAD-ONLY""); mFolder.open(OpenMode.READ_ONLY); assertEquals(OpenMode.READ_ONLY mFolder.getMode()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testReadWrite,"public void  () throws MessagingException { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock ""rEAD-WRITE""); mFolder.open(OpenMode.READ_WRITE); assertEquals(OpenMode.READ_WRITE mFolder.getMode()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testSearchForUids,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); mock.expect(getNextTag(false) + "" UID SEARCH X"" new String[]{""* sEARCH 1"" getNextTag(true) + "" oK success""}); MoreAsserts.assertEquals(new String[]{""1""} mFolder.searchForUids(""X"")); mock.expect(getNextTag(false) + "" UID SEARCH UID 123"" new String[]{""* sEARCH 123 4 567"" ""* search"" ""* sEARCH 0"" ""* SEARCH"" ""* sEARCH 100 200 300"" getNextTag(true) + "" oK success""}); MoreAsserts.assertEquals(new String[]{""123"" ""4"" ""567"" ""0"" ""100"" ""200"" ""300""} mFolder.searchForUids(""UID 123"")); mock.expect(getNextTag(false) + "" UID SEARCH SOME CRITERIA"" new String[]{getNextTag(true) + "" nO not found""}); MoreAsserts.assertEquals(new String[]{} mFolder.searchForUids(""SOME CRITERIA"")); mock.expect(getNextTag(false) + "" UID SEARCH SOME CRITERIA"" new String[]{getNextTag(true) + "" oK success""}); MoreAsserts.assertEquals(new String[]{} mFolder.searchForUids(""SOME CRITERIA"")); mock.expect(getNextTag(false) + "" UID SEARCH SOME CRITERIA"" new String[]{""* search"" getNextTag(true) + "" oK success""}); MoreAsserts.assertEquals(new String[]{} mFolder.searchForUids(""SOME CRITERIA"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testSearchForUidsIOException,"public void  () throws Exception { runAndExpectMessagingException(new RunAndExpectMessagingExceptionTarget(){ @Override public void run( MockTransport mockTransport) throws Exception { mockTransport.expectIOException(); mFolder.getMessage(""uid""); } } ); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testSentUploadRequested,public void  (){ assertTrue(mStore.requireCopyMessageToSentFolder()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testServerId,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport new String[]{""* ID (\""name\"" \""Cyrus\"" \""version\"" \""1.5\"""" + "" \""os\"" \""sunos\"" \""os-version\"" \""5.5\"""" + "" \""support-url\"" \""mailto:cyrus-bugs+@andrew.cmu.edu\"")"" ""oK""} ""rEAD-wRITE""); mFolder.open(OpenMode.READ_WRITE); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testSetFlags,"public void  () throws Exception { MockTransport mock=openAndInjectMockTransport(); setupOpenFolder(mock); mFolder.open(OpenMode.READ_WRITE); Message[] messages=new Message[]{mFolder.createMessage(""11"") mFolder.createMessage(""12"")}; mock.expect(getNextTag(false) + "" UID STORE 11\\ 12 \\+FLAGS.SILENT \\(\\\\FLAGGED \\\\SEEN\\)"" new String[]{getNextTag(true) + "" oK success""}); mFolder.setFlags(messages new Flag[]{Flag.FLAGGED Flag.SEEN} true); mock.expect(getNextTag(false) + "" UID STORE 11\\ 12 \\-FLAGS.SILENT \\(\\\\DELETED\\)"" new String[]{getNextTag(true) + "" oK success""}); mFolder.setFlags(messages new Flag[]{Flag.DELETED} false); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testSimpleLogin,public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(); setupOpenFolder(mockTransport); mFolder.open(OpenMode.READ_WRITE); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testSmallFolderFunctions,public void  (){ assertTrue(mFolder.canCreate(FolderType.HOLDS_FOLDERS)); assertTrue(mFolder.canCreate(FolderType.HOLDS_MESSAGES)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testTlsOpen,"public void  () throws MessagingException { MockTransport mockTransport=openAndInjectMockTransport(HostAuth.FLAG_TLS false); expectLogin(mockTransport true false false new String[]{""* iD nIL"" ""oK""} ""oK user authenticated (Success)""); mockTransport.expect(getNextTag(false) + "" SELECT \"""" + FOLDER_ENCODED+ ""\"""" new String[]{""* fLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen)"" ""* oK [pERMANENTFLAGS (\\Answered \\Flagged \\Draft \\Deleted \\Seen \\*)]"" ""* 0 eXISTS"" ""* 0 rECENT"" ""* OK [uNSEEN 0]"" ""* OK [uIDNEXT 1]"" getNextTag(true) + "" oK ["" + ""rEAD-wRITE""+ ""] ""+ FOLDER_ENCODED+ "" selected. (Success)""}); mFolder.open(OpenMode.READ_WRITE); assertTrue(mockTransport.isTlsStarted()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,testUnreadMessageCountIOException,public void  () throws Exception { runAndExpectMessagingException(new RunAndExpectMessagingExceptionTarget(){ @Override public void run( MockTransport mockTransport) throws Exception { mockTransport.expectIOException(); mFolder.getUnreadMessageCount(); } } ); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\store\ImapStoreUnitTests.java,tokenizeImapId,"private HashMap<String String>  (String id){ String[] elements=id.split(""\""""); HashMap<String String> map=new HashMap<String String>(); for (int i=0; i < elements.length; ) { map.put(elements[i + 1] elements[i + 3]); i+=4; } return map; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,MockTransport,public  (Context context HostAuth hostAuth){ super(context LOG_TAG hostAuth); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,Transaction, (int otherType){ mAction=otherType; mPattern=null; mResponses=null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,clone,@Override public MockTransport  (){ return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,close,@Override public void  (){ mOpen=false; mInputOpen=false; if (mPairs.size() > 0) { Transaction expect=mPairs.remove(0); if (expect.mAction == Transaction.ACTION_CLIENT_CLOSE) { return; } } mQueuedInput.clear(); mPairs.clear(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,closeInputStream,public void  (){ mInputOpen=false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,createMockTransport,public static MockTransport  (Context context){ return new MockTransport(context new HostAuth()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expect,public void  (String pattern String[] responses){ Transaction pair=new Transaction(pattern responses); mPairs.add(pair); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expectClose,public void  (){ mPairs.add(new Transaction(Transaction.ACTION_CLIENT_CLOSE)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expectIOException,public void  (){ mPairs.add(new Transaction(Transaction.ACTION_IO_EXCEPTION)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expectLiterally,"public void  (String literal String[] responses){ expect(""^"" + Pattern.quote(literal) + ""$"" responses); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,expectStartTls,public void  (){ mPairs.add(new Transaction(Transaction.ACTION_START_TLS)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,getInputStream,@Override public InputStream  (){ SmtpSenderUnitTests.assertTrue(mOpen); return new MockInputStream(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,getLocalAddress,@Override public InetAddress  (){ if (isOpen()) { return mLocalAddress; } else { return null; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,getOutputStream,@Override public OutputStream  (){ Assert.assertTrue(mOpen); return new MockOutputStream(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,isOpen,@Override public boolean  (){ return mOpen; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,isTlsStarted,public boolean  (){ return mTlsStarted; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,open,@Override public void  (){ mOpen=true; mInputOpen=true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,read,"@Override public int  () throws IOException { if (!mInputOpen) { throw new IOException(); } if (mNextLine != null && mNextIndex < mNextLine.length) { return mNextLine[mNextIndex++]; } String next=readLine(); if (next == null) { throw new IOException(""Read"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,readLine,"public String  () throws IOException { SmtpSenderUnitTests.assertTrue(mOpen); if (!mInputOpen) { throw new IOException(""Reading from MockTransport with closed input""); } if ((mQueuedInput.size() == 0) && (mPairs.size() > 0)) { Transaction pair=mPairs.get(0); if (pair.mPattern == null) { mPairs.remove(0); sendResponse(pair); } } if (mQueuedInput.size() == 0) { LogUtils.w(LOG_TAG ""Underflow reading from MockTransport""); return """"; } String line=mQueuedInput.remove(0); if (DEBUG_LOG_STREAMS) { LogUtils.d(LOG_TAG ""<<< "" + line); } if (SPECIAL_RESPONSE_IOEXCEPTION.equals(line)) { throw new IOException(""Expected IOException.""); } return line; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,reopenTls,@Override public void  (){ SmtpSenderUnitTests.assertTrue(mOpen); Transaction expect=mPairs.remove(0); SmtpSenderUnitTests.assertTrue(expect.mAction == Transaction.ACTION_START_TLS); mTlsStarted=true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,sendResponse,"private void  (Transaction pair){ switch (pair.mAction) { case Transaction.ACTION_INJECT_TEXT: for ( String s : pair.mResponses) { mQueuedInput.add(s); } break; case Transaction.ACTION_IO_EXCEPTION: mQueuedInput.add(SPECIAL_RESPONSE_IOEXCEPTION); break; default : Assert.fail(""Invalid action for sendResponse: "" + pair.mAction); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,setHost,public void  (String address){ mHostAuth.mAddress=address; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,setMockLocalAddress,public void  (InetAddress address){ mLocalAddress=address; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,setSecurity,public void  (int connectionSecurity boolean trustAllCertificates){ mHostAuth.mFlags=connectionSecurity & (trustAllCertificates ? HostAuth.FLAG_TRUST_ALL : 0xff); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,toString,"@Override public String  (){ switch (mAction) { case ACTION_INJECT_TEXT: return mPattern + "": "" + Arrays.toString(mResponses); case ACTION_CLIENT_CLOSE: return ""Expect the client to close""; case ACTION_IO_EXCEPTION: return ""Expect IOException""; case ACTIO"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,write,@Override public void  (int oneByte) throws IOException { if (oneByte == '\r') { writeLine(sb.toString() null); sb=new StringBuilder(); } else if (oneByte == '\n') { } else { sb.append((char)oneByte); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\MockTransport.java,writeLine,"@Override public void  (String s String sensitiveReplacement) throws IOException { if (DEBUG_LOG_STREAMS) { LogUtils.d(LOG_TAG "">>> "" + s); } SmtpSenderUnitTests.assertTrue(mOpen); SmtpSenderUnitTests.assertTrue(""Overflow writing to MockTransport: Getting"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,b,private static  yte[] b(String chars){ byte[] ret=new byte[chars.length()]; for (int i=0; i < chars.length(); i++) { ret[i]=(byte)chars.charAt(i); } return ret; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,checkDiscourseStore,"private void  (int storeSize Object[] discource String[] expected){ DiscourseLogger store=new DiscourseLogger(storeSize); for ( Object o : discource) { if (o instanceof String) { store.addSentCommand((String)o); } else if (o instanceof byte[]) { for ( byte b : (byte[])o) { store.addReceivedByte(b); } } else { fail(""Invalid argument. Test broken.""); } } MoreAsserts.assertEquals(expected store.getLines()); store.logLastDiscourse(); assertEquals(0 store.getLines().length); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,o,private static Object[]  (Object... objects){ return objects; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,s,private  tatic String[] s(String... strings){ return strings; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\DiscourseLoggerTest.java,testDiscourseLogger,"public void  (){ checkDiscourseStore(4 o() s()); checkDiscourseStore(4 o(""command"") s(""command"")); checkDiscourseStore(4 o(""1a"" ""2b"" ""3"" ""4dd"") s(""1a"" ""2b"" ""3"" ""4dd"")); checkDiscourseStore(4 o(""1"" ""2"" ""3"" ""4"" ""5"") s(""2"" ""3"" ""4"" ""5"")); checkDiscourseStore(4 o(b(""A"")) s(""A"")); checkDiscourseStore(4 o(b(""A\nB\nC"")) s(""A"" ""B"" ""C"")); checkDiscourseStore(4 o(b(""A\nBCD\nC\nDEF\u0080\u0001G\r\n"")) s(""A"" ""BCD"" ""C"" ""DEF\\x80\\x01G"")); checkDiscourseStore(4 o(""1"" b(""2"") ""3"" b(""4\n5\n"") ""6 7 8"" ""7 a bbb ccc"" b(""* aaa8\n* bbb9\n7 ccc 10"")) s(""7 a bbb ccc"" ""* aaa8"" ""* bbb9"" ""7 ccc 10"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,expectSimpleAttachment,"private void  (MockTransport mockTransport Attachment attachment){ mockTransport.expect(""Content-Type: "" + attachment.mMimeType + "";""); mockTransport.expect("" name=\"""" + attachment.mFileName + ""\""""); mockTransport.expect(""Content-Transfer-Encoding: base64""); mockTransport.expect(""Content-Disposition: attachment;""); mockTransport.expect("" filename=\"""" + attachment.mFileName + ""\"";""); mockTransport.expect("" size="" + Long.toString(attachment.mSize)); mockTransport.expect(""""); String attachmentContentUri=attachment.getContentUri(); if (attachmentContentUri != null && attachmentContentUri.startsWith(""file://"")) { mockTransport.expect(TEST_STRING_BASE64); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,expectSimpleMessage,"private void  (MockTransport mockTransport){ mockTransport.expect(""MAIL FROM:<Jones@Registry.Org>"" ""250 2.1.0 <Jones@Registry.Org> sender ok""); mockTransport.expect(""RCPT TO:<Smith@Registry.Org>"" ""250 2.1.5 <Smith@Registry.Org> recipient ok""); mockTransport.expect(""DATA"" ""354 enter mail  end with . on a line by itself""); mockTransport.expect(""Date: .*""); mockTransport.expect(""Message-ID: .*""); mockTransport.expect(""From: Jones@Registry.Org""); mockTransport.expect(""To: Smith@Registry.Org""); mockTransport.expect(""MIME-Version: 1.0""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,openAndInjectMockTransport,private MockTransport  () throws UnknownHostException { MockTransport mockTransport=new MockTransport(mContext mHostAuth); mockTransport.setSecurity(HostAuth.FLAG_NONE false); mSender.setTransport(mockTransport); mockTransport.setMockLocalAddress(InetAddress.getByName(LOCAL_ADDRESS)); return mockTransport; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,setUp,@Override protected void  () throws Exception { super.setUp(); mProviderContext=DBTestHelper.ProviderContextSetupHelper.getProviderContext(getContext()); mContext=getContext(); mHostAuth=new HostAuth(); Account testAccount=new Account(); mHostAuth.setLogi
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,setupOpen,"private void  (MockTransport mockTransport String capabilities){ mockTransport.expect(null ""220 MockTransport 2000 Ready To Assist You Peewee""); mockTransport.expect(""EHLO .*"" ""250-10.20.30.40 hello""); if (capabilities == null) { mockTransport.expect(null ""250-HELP""); mockTransport.expect(null ""250-AUTH LOGIN PLAIN CRAM-MD5""); mockTransport.expect(null ""250-SIZE 15728640""); mockTransport.expect(null ""250-ENHANCEDSTATUSCODES""); mockTransport.expect(null ""250-8BITMIME""); } else { for ( String capability : capabilities.split("" "")) { mockTransport.expect(null ""250-"" + capability); } } mockTransport.expect(null ""250+OK""); mockTransport.expect(""AUTH PLAIN .*"" ""235 2.7.0 ... authentication succeeded""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,setupSimpleAttachment,"private Attachment  (Context context long messageId){ Attachment attachment=new Attachment(); attachment.mFileName=""the file.jpg""; attachment.mMimeType=""image/jpg""; attachment.mSize=0; attachment.mContentId=null; attachment.setContentUri(""content://com.android.email/1/1""); attachment.mMessageKey=messageId; attachment.mLocation=null; attachment.mEncoding=null; return attachment; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,setupSimpleMessage,"private Message  (){ Message message=new Message(); message.mTimeStamp=System.currentTimeMillis(); message.mFrom=Address.parseToHeader(""Jones@Registry.Org""); message.mTo=Address.parseToHeader(""Smith@Registry.Org""); message.mMessageId=""1234567890""; return message; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,testEmptyLineResponse,"public void  () throws Exception { MockTransport mockTransport=openAndInjectMockTransport(); mockTransport.expectClose(); mockTransport.expect(null ""220 MockTransport 2000 Ready To Assist You Peewee""); mockTransport.expectLiterally(""EHLO ["" + LOCAL_ADDRESS + ""]"" null); try { mSender.sendMessage(-1); fail(""Should not be able to send with failed open()""); } catch ( MessagingException me) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,testSendMessageWithBody,"public void  () throws Exception { MockTransport mockTransport=openAndInjectMockTransport(); mockTransport.expectClose(); setupOpen(mockTransport null); Message message=setupSimpleMessage(); message.save(mProviderContext); Body body=new Body(); body.mMessageKey=message.mId; body.mTextContent=TEST_STRING; body.save(mProviderContext); expectSimpleMessage(mockTransport); mockTransport.expect(""Content-Type: text/plain; charset=utf-8""); mockTransport.expect(""Content-Transfer-Encoding: base64""); mockTransport.expect(""""); mockTransport.expect(TEST_STRING_BASE64); mockTransport.expect(""\r\n\\."" ""250 2.0.0 kv2f1a00C02Rf8w3Vv mail accepted for delivery""); mSender.sendMessage(message.mId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,testSendMessageWithEmptyAttachment,"public void  () throws MessagingException  IOException { MockTransport mockTransport=openAndInjectMockTransport(); mockTransport.expectClose(); setupOpen(mockTransport null); Message message=setupSimpleMessage(); message.save(mProviderContext); Attachment attachment=setupSimpleAttachment(mProviderContext message.mId); attachment.save(mProviderContext); expectSimpleMessage(mockTransport); mockTransport.expect(""Content-Type: multipart/mixed; boundary=\"".*""); mockTransport.expect(""""); mockTransport.expect(""----.*""); expectSimpleAttachment(mockTransport attachment); mockTransport.expect(""""); mockTransport.expect(""----.*--""); mockTransport.expect(""\r\n\\."" ""250 2.0.0 kv2f1a00C02Rf8w3Vv mail accepted for delivery""); mSender.sendMessage(message.mId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\mail\transport\SmtpSenderUnitTests.java,testSimpleLogin,public void  () throws Exception { MockTransport mockTransport=openAndInjectMockTransport(); setupOpen(mockTransport null); mSender.open(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,MyMockFolder,public  (FolderRole role String name){ mRole=role; mName=name; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,createTestAccount,private void  (){ mAccount=new Account(); mAccount.save(getContext()); mAccountId=mAccount.mId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,getName,@Override public String  (){ return mName; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,getRole,@Override public FolderRole  (){ return mRole; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MessagingControllerUnitTests.java,tearDown,@Override protected void  () throws Exception { super.tearDown(); if (mAccount != null) { Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI mAccountId); getContext().getContentResolver().delete(uri null null); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockClock.java,advance,public void  (long milliseconds){ mTime+=milliseconds; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockClock.java,getTime,@Override public long  (){ return mTime; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,apply,public void  (){ commit(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,clear,public Editor  (){ mTempValues.clear(); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,commit,"@SuppressWarnings(""unchecked"") public boolean  (){ mValues=(HashMap<String Object>)mTempValues.clone(); return true; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,contains,public boolean  (String key){ return mValues.containsKey(key); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,edit,"@SuppressWarnings(""unchecked"") public Editor  (){ mTempValues=(HashMap<String Object>)mValues.clone(); return this; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,getAll,public Map<String ?>  (){ return new HashMap<String Object>(mValues); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,getBoolean,public boolean  (String key boolean defValue){ if (mValues.containsKey(key)) { return ((Boolean)mValues.get(key)).booleanValue(); } return defValue; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,getFloat,public float  (String key float defValue){ if (mValues.containsKey(key)) { return ((Float)mValues.get(key)).floatValue(); } return defValue; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,getInt,public int  (String key int defValue){ if (mValues.containsKey(key)) { return ((Integer)mValues.get(key)).intValue(); } return defValue; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,getLong,public long  (String key long defValue){ if (mValues.containsKey(key)) { return ((Long)mValues.get(key)).longValue(); } return defValue; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,getString,public String  (String key String defValue){ if (mValues.containsKey(key)) return (String)mValues.get(key); return defValue; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,getStringSet,"@SuppressWarnings(""unchecked"") public Set<String>  (String key Set<String> defValues){ if (mValues.containsKey(key)) { return (Set<String>)mValues.get(key); } return defValues; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,putBoolean,public Editor  (String key boolean value){ mTempValues.put(key Boolean.valueOf(value)); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,putFloat,public Editor  (String key float value){ mTempValues.put(key value); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,putInt,public Editor  (String key int value){ mTempValues.put(key value); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,putLong,public Editor  (String key long value){ mTempValues.put(key value); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,putString,public Editor  (String key String value){ mTempValues.put(key value); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,putStringSet,public Editor  (String key Set<String> values){ mTempValues.put(key values); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,registerOnSharedPreferenceChangeListener,public void  (OnSharedPreferenceChangeListener listener){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,remove,public Editor  (String key){ mTempValues.remove(key); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockSharedPreferences.java,unregisterOnSharedPreferenceChangeListener,public void  (OnSharedPreferenceChangeListener listener){ throw new UnsupportedOperationException(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockVendorPolicy.java,getPolicy,public static Bundle  (String policy Bundle args){ passedPolicy=policy; passedBundle=args; return mockResult; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\MockVendorPolicy.java,inject,public static void  (Context context){ VendorPolicyLoader.injectPolicyForTest(context context.getPackageName() MockVendorPolicy.class); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,ContentCacheTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,getOneRowCursor,private Cursor  (){ MatrixCursor cursor=new MatrixCursorWithCachedColumns(SIMPLE_PROJECTION 1); cursor.addRow(SIMPLE_ROW); return cursor; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=getMockContext(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,tearDown,@Override public void  () throws Exception { super.tearDown(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,testCachedCursors,"public void  (){ final ContentResolver resolver=mMockContext.getContentResolver(); final Context context=mMockContext; Account acct=ProviderTestUtils.setupAccount(""account"" true context); ProviderTestUtils.setupMailbox(""box1"" acct.mId true context); Mailbox box=ProviderTestUtils.setupMailbox(""box2"" acct.mId true context); Uri uri=ContentUris.withAppendedId(Mailbox.CONTENT_URI box.mId); Cursor cursor=resolver.query(uri Mailbox.CONTENT_PROJECTION null null null); assertTrue(cursor instanceof CursorWrapper); Cursor wrappedCursor=((CursorWrapper)cursor).getWrappedCursor(); assertTrue(wrappedCursor instanceof CachedCursor); CachedCursor cachedCursor=(CachedCursor)wrappedCursor; Cursor activeCursor=cachedCursor.getWrappedCursor(); int activeCount=ContentCache.sActiveCursors.getCount(activeCursor); assertEquals(1 activeCount); String[] columnNames=cursor.getColumnNames(); assertEquals(Mailbox.CONTENT_PROJECTION.length columnNames.length); for (int i=0; i < Mailbox.CONTENT_PROJECTION.length; i++) { assertEquals(Mailbox.CONTENT_PROJECTION[i] columnNames[i]); } assertEquals(1 cursor.getCount()); cursor.moveToNext(); assertEquals(0 cursor.getPosition()); cursor.moveToPosition(0); assertEquals(0 cursor.getPosition()); assertFalse(cursor.moveToPosition(1)); cursor.close(); assertTrue(cachedCursor.isClosed()); assertFalse(activeCursor.isClosed()); assertFalse(ContentCache.sActiveCursors.contains(activeCursor)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,testCloseCachedCursor,"public void  (){ ContentCache cache=new ContentCache(""Name"" SIMPLE_PROJECTION 2); Cursor underlyingCursor=getOneRowCursor(); Cursor cachedCursor1=new CachedCursor(underlyingCursor cache ""1""); Cursor cachedCursor2=new CachedCursor(underlyingCursor cache ""1""); assertEquals(2 ContentCache.sActiveCursors.getCount(underlyingCursor)); cachedCursor1.close(); assertTrue(cachedCursor1.isClosed()); assertFalse(underlyingCursor.isClosed()); cachedCursor2.close(); assertTrue(cachedCursor2.isClosed()); assertEquals(0 ContentCache.sActiveCursors.getCount(underlyingCursor)); assertTrue(underlyingCursor.isClosed()); underlyingCursor=getOneRowCursor(); cachedCursor1=cache.putCursor(underlyingCursor ""2"" SIMPLE_PROJECTION cache.getCacheToken(""2"")); cachedCursor2=new CachedCursor(underlyingCursor cache ""2""); assertEquals(2 ContentCache.sActiveCursors.getCount(underlyingCursor)); cachedCursor1.close(); cachedCursor2.close(); assertEquals(0 ContentCache.sActiveCursors.getCount(underlyingCursor)); assertFalse(underlyingCursor.isClosed()); cachedCursor2=new CachedCursor(underlyingCursor cache ""2""); assertEquals(1 ContentCache.sActiveCursors.getCount(underlyingCursor)); cache.invalidate(); cachedCursor2.close(); assertEquals(0 ContentCache.sActiveCursors.getCount(underlyingCursor)); assertTrue(underlyingCursor.isClosed()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,testContentCacheRemoveEldestEntry,"public void  (){ ContentCache cache=new ContentCache(""Name"" SIMPLE_PROJECTION 2); Cursor cursor1=getOneRowCursor(); CacheToken token=cache.getCacheToken(""1""); cache.putCursor(cursor1 ""1"" SIMPLE_PROJECTION token); assertEquals(1 cache.size()); Cursor cursor2=getOneRowCursor(); token=cache.getCacheToken(""2""); cache.putCursor(cursor1 ""2"" SIMPLE_PROJECTION token); assertEquals(2 cache.size()); Cursor cachedCursor=cache.getCachedCursor(""1"" SIMPLE_PROJECTION); assertNotNull(cachedCursor); assertTrue(cachedCursor instanceof CachedCursor); cachedCursor=cache.getCachedCursor(""2"" SIMPLE_PROJECTION); assertNotNull(cachedCursor); assertTrue(cachedCursor instanceof CachedCursor); assertFalse(cursor1.isClosed()); assertFalse(cursor2.isClosed()); Cursor cursor3=getOneRowCursor(); token=cache.getCacheToken(""3""); cache.putCursor(cursor1 ""3"" SIMPLE_PROJECTION token); assertEquals(2 cache.size()); cachedCursor=cache.getCachedCursor(""1"" SIMPLE_PROJECTION); assertNull(cachedCursor); cachedCursor=cache.getCachedCursor(""2"" SIMPLE_PROJECTION); assertNotNull(cachedCursor); assertTrue(cachedCursor instanceof CachedCursor); cachedCursor=cache.getCachedCursor(""3"" SIMPLE_PROJECTION); assertNotNull(cachedCursor); assertTrue(cachedCursor instanceof CachedCursor); assertFalse(cursor1.isClosed()); assertFalse(cursor2.isClosed()); assertFalse(cursor3.isClosed()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,testCounterMap,"public void  (){ ContentCache.CounterMap<String> map=new ContentCache.CounterMap<String>(4); map.add(""1""); assertTrue(map.contains(""1"")); map.add(""2""); map.add(""2""); map.subtract(""2""); assertTrue(map.contains(""2"")); map.subtract(""2""); try { map.subtract(""2""); fail(""Removing a third time should throw an exception""); } catch ( IllegalStateException e) { } try { map.subtract(""3""); fail(""Removing object never added should throw an exception""); } catch ( IllegalStateException e) { } assertEquals(1 map.size()); assertTrue(map.contains(""1"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ContentCacheTests.java,testTokenList,"public void  (){ TokenList list=new TokenList(""Name""); CacheToken token1a=list.add(""1""); assertTrue(token1a.isValid()); assertEquals(""1"" token1a.getId()); assertEquals(1 list.size()); CacheToken token1b=list.add(""1""); assertTrue(token1b.isValid()); assertEquals(""1"" token1b.getId()); assertTrue(token1a.equals(token1b)); assertEquals(2 list.size()); CacheToken token2=list.add(""2""); assertFalse(token1a.equals(token2)); assertEquals(3 list.size()); assertEquals(2 list.invalidateTokens(""1"")); assertFalse(token1a.isValid()); assertFalse(token1b.isValid()); assertTrue(token2.isValid()); assertEquals(1 list.size()); assertEquals(token2 list.get(0)); CacheToken token3a=list.add(""3""); CacheToken token3b=list.add(""3""); CacheToken token3c=list.add(""3""); assertTrue(list.remove(token3a)); assertTrue(list.remove(token3b)); assertTrue(token3a.isValid()); assertTrue(token3b.isValid()); assertTrue(token3c.isValid()); assertEquals(2 list.size()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,AttachmentProviderTests,public  (){ super(AttachmentProvider.class Attachment.ATTACHMENT_PROVIDER_LEGACY_URI_PREFIX); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,addAttachmentToDb,private long  (Account forAccount Attachment newAttachment){ newAttachment.save(mMockContext); return newAttachment.mId; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,createAttachment,"private Uri  (Account account long messageId String contentUriStr){ Attachment newAttachment=ProviderTestUtils.setupAttachment(messageId ""file"" 100 false mMockContext); newAttachment.setContentUri(contentUriStr); long attachmentId=addAttachmentToDb(account newAttachment); Uri attachmentUri=AttachmentUtilities.getAttachmentUri(account.mId attachmentId); return attachmentUri; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,createAttachmentFile,private String  (Account forAccount long id) throws IOException { File outFile=getAttachmentFile(forAccount id); Bitmap bitmap=BitmapFactory.decodeResource(getContext().getResources() R.drawable.ic_attach_file_18dp); FileOutputStream out=new FileOutputStream(outFile); bitmap.compress(Bitmap.CompressFormat.PNG 100 out); out.close(); return outFile.getAbsolutePath(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,createMessage,"private static Message  (Context c Mailbox b){ Message m=ProviderTestUtils.setupMessage(""1"" b.mAccountKey b.mId true false c false false); m.mFlagLoaded=Message.FLAG_LOADED_COMPLETE; m.save(c); return m; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,getAttachmentFile,"private File  (Account forAccount long id){ String idString=Long.toString(id); File attachmentsDir=mMockContext.getDatabasePath(forAccount.mId + "".db_att""); if (!attachmentsDir.exists()) { attachmentsDir.mkdirs(); } return new File(attachmentsDir idString); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,populateAccountMailbox,"private void  (Account account long mailboxId int numAttachments) throws IOException { long accountId=account.mId; Message message1a=ProviderTestUtils.setupMessage(""msg1a"" accountId mailboxId false true mMockContext); ProviderTestUtils.setupMessage(""msg1b"" accountId mailboxId false true mMockContext); for (int count=0; count < numAttachments; count++) { Attachment newAttachment=ProviderTestUtils.setupAttachment(message1a.mId ""file"" + count 100 * count true mMockContext); createAttachmentFile(account newAttachment.mId); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=getMockContext(); mMockResolver=mMockContext.getContentResolver(); mEmailProvider=new EmailProvider(); mEmailProvider.attachInfo(mMockContext null); assertNotNull(mEmailProvider); ((
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testDeleteAccount,"public void  () throws IOException { Account account1=ProviderTestUtils.setupAccount(""attach-acct-del1"" false mMockContext); account1.save(mMockContext); long account1Id=account1.mId; Mailbox mailbox1=ProviderTestUtils.setupMailbox(""mbox1"" account1Id true mMockContext); long mailbox1Id=mailbox1.mId; Mailbox mailbox2=ProviderTestUtils.setupMailbox(""mbox2"" account1Id true mMockContext); long mailbox2Id=mailbox2.mId; Account account2=ProviderTestUtils.setupAccount(""attach-acct-del2"" false mMockContext); account2.save(mMockContext); long account2Id=account2.mId; Mailbox mailbox3=ProviderTestUtils.setupMailbox(""mbox3"" account2Id true mMockContext); long mailbox3Id=mailbox3.mId; Mailbox mailbox4=ProviderTestUtils.setupMailbox(""mbox4"" account2Id true mMockContext); long mailbox4Id=mailbox4.mId; populateAccountMailbox(account1 mailbox1Id 3); populateAccountMailbox(account1 mailbox2Id 1); populateAccountMailbox(account2 mailbox3Id 5); populateAccountMailbox(account2 mailbox4Id 2); File directory1=AttachmentUtilities.getAttachmentDirectory(mMockContext account1.mId); assertEquals(4 directory1.listFiles().length); File directory2=AttachmentUtilities.getAttachmentDirectory(mMockContext account2.mId); assertEquals(7 directory2.listFiles().length); AttachmentUtilities.deleteAllAccountAttachmentFiles(mMockContext account1Id); assertEquals(0 directory1.listFiles().length); assertEquals(7 directory2.listFiles().length); AttachmentUtilities.deleteAllAccountAttachmentFiles(mMockContext account2Id); assertEquals(0 directory1.listFiles().length); assertEquals(0 directory2.listFiles().length); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testDeleteFiles,"public void  () throws IOException { Account account1=ProviderTestUtils.setupAccount(""attachment-query"" false mMockContext); account1.save(mMockContext); final long message1Id=1; final long message2Id=2; final long message3Id=3; final long message4Id=4; Attachment newAttachment1=ProviderTestUtils.setupAttachment(message1Id ""file1"" 100 true mMockContext); Attachment newAttachment2=ProviderTestUtils.setupAttachment(message2Id ""file2"" 200 true mMockContext); Attachment newAttachment3=ProviderTestUtils.setupAttachment(message2Id ""file3"" 100 true mMockContext); Attachment newAttachment4=ProviderTestUtils.setupAttachment(message3Id ""file4"" 100 true mMockContext); createAttachmentFile(account1 newAttachment1.mId); createAttachmentFile(account1 newAttachment2.mId); createAttachmentFile(account1 newAttachment3.mId); File attachmentsDir=AttachmentUtilities.getAttachmentDirectory(mMockContext account1.mId); assertEquals(3 attachmentsDir.listFiles().length); AttachmentUtilities.deleteAllAttachmentFiles(mMockContext account1.mId message4Id); assertEquals(3 attachmentsDir.listFiles().length); AttachmentUtilities.deleteAllAttachmentFiles(mMockContext account1.mId message3Id); assertEquals(3 attachmentsDir.listFiles().length); AttachmentUtilities.deleteAllAttachmentFiles(mMockContext account1.mId message2Id); assertEquals(1 attachmentsDir.listFiles().length); AttachmentUtilities.deleteAllAttachmentFiles(mMockContext account1.mId message1Id); assertEquals(0 attachmentsDir.listFiles().length); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testDeleteMailbox,"public void  () throws IOException { Account account1=ProviderTestUtils.setupAccount(""attach-mbox-del"" false mMockContext); account1.save(mMockContext); long account1Id=account1.mId; Mailbox mailbox1=ProviderTestUtils.setupMailbox(""mbox1"" account1Id true mMockContext); long mailbox1Id=mailbox1.mId; Mailbox mailbox2=ProviderTestUtils.setupMailbox(""mbox2"" account1Id true mMockContext); long mailbox2Id=mailbox2.mId; populateAccountMailbox(account1 mailbox1Id 3); populateAccountMailbox(account1 mailbox2Id 1); File attachmentsDir=AttachmentUtilities.getAttachmentDirectory(mMockContext account1.mId); assertEquals(4 attachmentsDir.listFiles().length); AttachmentUtilities.deleteAllMailboxAttachmentFiles(mMockContext account1Id mailbox1Id); assertEquals(1 attachmentsDir.listFiles().length); AttachmentUtilities.deleteAllMailboxAttachmentFiles(mMockContext account1Id mailbox2Id); assertEquals(0 attachmentsDir.listFiles().length); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testGetType,"public void  () throws MessagingException { Account account1=ProviderTestUtils.setupAccount(""get-type"" false mMockContext); account1.save(mMockContext); final long message1Id=1; long attachment1Id=1; long attachment2Id=2; long attachment3Id=3; long attachment4Id=4; long attachment5Id=5; long attachment6Id=6; Uri attachment1Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment1Id); String type=mMockResolver.getType(attachment1Uri); assertNull(type); Attachment newAttachment2=ProviderTestUtils.setupAttachment(message1Id ""file2"" 100 false mMockContext); newAttachment2.mMimeType=""image/jpg""; attachment2Id=addAttachmentToDb(account1 newAttachment2); Attachment newAttachment3=ProviderTestUtils.setupAttachment(message1Id ""file3"" 100 false mMockContext); newAttachment3.mMimeType=""text/plain""; attachment3Id=addAttachmentToDb(account1 newAttachment3); Attachment newAttachment4=ProviderTestUtils.setupAttachment(message1Id ""file4.doc"" 100 false mMockContext); newAttachment4.mMimeType=""application/octet-stream""; attachment4Id=addAttachmentToDb(account1 newAttachment4); Attachment newAttachment5=ProviderTestUtils.setupAttachment(message1Id ""file5.xyz"" 100 false mMockContext); newAttachment5.mMimeType=""application/octet-stream""; attachment5Id=addAttachmentToDb(account1 newAttachment5); Attachment newAttachment6=ProviderTestUtils.setupAttachment(message1Id ""file6"" 100 false mMockContext); newAttachment6.mMimeType=""""; attachment6Id=addAttachmentToDb(account1 newAttachment6); Uri uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment2Id); type=mMockResolver.getType(uri); assertEquals(""image/jpg"" type); uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment3Id); type=mMockResolver.getType(uri); assertEquals(""text/plain"" type); uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment4Id); type=mMockResolver.getType(uri); assertEquals(""application/msword"" type); uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment5Id); type=mMockResolver.getType(uri); assertEquals(""application/xyz"" type); uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment6Id); type=mMockResolver.getType(uri); assertEquals(""application/octet-stream"" type); uri=AttachmentUtilities.getAttachmentThumbnailUri(account1.mId attachment2Id 62 62); type=mMockResolver.getType(uri); assertEquals(""image/png"" type); uri=AttachmentUtilities.getAttachmentThumbnailUri(account1.mId attachment3Id 62 62); type=mMockResolver.getType(uri); assertEquals(""image/png"" type); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testInboxQuery,"public void  (){ Account a1=ProviderTestUtils.setupAccount(""inboxquery-1"" true mMockContext); Account a2=ProviderTestUtils.setupAccount(""inboxquery-2"" true mMockContext); Mailbox b1=ProviderTestUtils.setupMailbox(""box1"" a1.mId true mMockContext Mailbox.TYPE_INBOX); Mailbox b2=ProviderTestUtils.setupMailbox(""box2"" a1.mId true mMockContext Mailbox.TYPE_MAIL); Mailbox b3=ProviderTestUtils.setupMailbox(""box3"" a2.mId true mMockContext Mailbox.TYPE_INBOX); Mailbox b4=ProviderTestUtils.setupMailbox(""box4"" a2.mId true mMockContext Mailbox.TYPE_MAIL); Mailbox bt=ProviderTestUtils.setupMailbox(""boxT"" a2.mId true mMockContext Mailbox.TYPE_TRASH); Message m11=createMessage(mMockContext b1); Message m12=createMessage(mMockContext b1); Message m21=createMessage(mMockContext b2); Message m22=createMessage(mMockContext b2); Message m31=createMessage(mMockContext b3); Message mt1=createMessage(mMockContext bt); createAttachment(a1 m11.mId null); createAttachment(a1 m11.mId null); createAttachment(a1 m12.mId null); createAttachment(a1 m12.mId ""file:///path/to/file1""); createAttachment(a1 m21.mId null); createAttachment(a1 m21.mId null); createAttachment(a1 m22.mId null); createAttachment(a1 m22.mId ""file:///path/to/file2""); createAttachment(a2 m31.mId null); createAttachment(a2 mt1.mId null); createAttachment(a2 mt1.mId null); Cursor c=null; try { c=mMockContext.getContentResolver().query(Attachment.CONTENT_URI AttachmentInfo.PROJECTION EmailContent.Attachment.PRECACHE_SELECTION null Attachment.RECORD_ID + "" DESC""); assertEquals(9 c.getCount()); } finally { c.close(); } try { c=mMockContext.getContentResolver().query(Attachment.CONTENT_URI AttachmentInfo.PROJECTION EmailContent.Attachment.PRECACHE_INBOX_SELECTION null Attachment.RECORD_ID + "" DESC""); assertEquals(4 c.getCount()); } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testOpenFile,"public void  () throws MessagingException  IOException { Account account1=ProviderTestUtils.setupAccount(""open-file"" false mMockContext); account1.save(mMockContext); final long message1Id=1; long attachment1Id=1; long attachment2Id=2; Uri file1Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment1Id); Uri file2Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment2Id); AssetFileDescriptor afd; try { afd=mMockResolver.openAssetFileDescriptor(file1Uri ""r""); fail(""Should throw an exception on a missing attachment entry""); } catch ( FileNotFoundException fnf) { } Attachment newAttachment=ProviderTestUtils.setupAttachment(message1Id ""file"" 100 false mMockContext); attachment1Id=addAttachmentToDb(account1 newAttachment); assertEquals(""Broken test: Unexpected id assignment"" 1 attachment1Id); try { afd=mMockResolver.openAssetFileDescriptor(file1Uri ""r""); fail(""Should throw an exception on a missing attachment file""); } catch ( FileNotFoundException fnf) { } createAttachmentFile(account1 attachment2Id); Attachment newAttachment2=ProviderTestUtils.setupAttachment(message1Id ""file"" 100 false mMockContext); newAttachment2.mContentId=null; newAttachment2.setContentUri(AttachmentUtilities.getAttachmentUri(account1.mId attachment2Id).toString()); newAttachment2.mMimeType=""image/png""; attachment2Id=addAttachmentToDb(account1 newAttachment2); assertEquals(""Broken test: Unexpected id assignment"" 2 attachment2Id); afd=mMockResolver.openAssetFileDescriptor(file2Uri ""r""); assertNotNull(afd); afd.close(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testOpenThumbnail,"public void  () throws MessagingException  IOException { Account account1=ProviderTestUtils.setupAccount(""open-thumbnail"" false mMockContext); account1.save(mMockContext); final long message1Id=1; long attachment1Id=1; long attachment2Id=2; Uri thumb1Uri=AttachmentUtilities.getAttachmentThumbnailUri(account1.mId attachment1Id 62 62); Uri thumb2Uri=AttachmentUtilities.getAttachmentThumbnailUri(account1.mId attachment2Id 62 62); AssetFileDescriptor afd=mMockResolver.openAssetFileDescriptor(thumb1Uri ""r""); assertNull(afd); Attachment newAttachment=ProviderTestUtils.setupAttachment(message1Id ""file"" 100 false mMockContext); attachment1Id=addAttachmentToDb(account1 newAttachment); assertEquals(""Broken test: Unexpected id assignment"" 1 attachment1Id); afd=mMockResolver.openAssetFileDescriptor(thumb1Uri ""r""); assertNull(afd); createAttachmentFile(account1 attachment2Id); Attachment newAttachment2=ProviderTestUtils.setupAttachment(message1Id ""file"" 100 false mMockContext); newAttachment2.mContentId=null; newAttachment2.setContentUri(AttachmentUtilities.getAttachmentUri(account1.mId attachment2Id).toString()); newAttachment2.mMimeType=""image/png""; attachment2Id=addAttachmentToDb(account1 newAttachment2); assertEquals(""Broken test: Unexpected id assignment"" 2 attachment2Id); afd=mMockResolver.openAssetFileDescriptor(thumb2Uri ""r""); assertNotNull(afd); afd.close(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testQuery,"public void  () throws MessagingException { Account account1=ProviderTestUtils.setupAccount(""attachment-query"" false mMockContext); account1.save(mMockContext); final long message1Id=1; long attachment1Id=1; long attachment2Id=2; long attachment3Id=3; Uri attachment1Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment1Id); Uri attachment2Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment2Id); Uri attachment3Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment3Id); Cursor c=mMockResolver.query(attachment1Uri (String[])null null (String[])null null); assertNull(c); Attachment newAttachment1=ProviderTestUtils.setupAttachment(message1Id ""file1"" 100 false mMockContext); newAttachment1.setContentUri(AttachmentUtilities.getAttachmentUri(account1.mId attachment1Id).toString()); attachment1Id=addAttachmentToDb(account1 newAttachment1); assertEquals(""Broken test: Unexpected id assignment"" 1 attachment1Id); Attachment newAttachment2=ProviderTestUtils.setupAttachment(message1Id ""file2"" 200 false mMockContext); newAttachment2.setContentUri(AttachmentUtilities.getAttachmentUri(account1.mId attachment2Id).toString()); attachment2Id=addAttachmentToDb(account1 newAttachment2); assertEquals(""Broken test: Unexpected id assignment"" 2 attachment2Id); Attachment newAttachment3=ProviderTestUtils.setupAttachment(message1Id ""file3"" 300 false mMockContext); newAttachment3.setContentUri(AttachmentUtilities.getAttachmentUri(account1.mId attachment3Id).toString()); attachment3Id=addAttachmentToDb(account1 newAttachment3); assertEquals(""Broken test: Unexpected id assignment"" 3 attachment3Id); attachment2Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment2Id); c=mMockResolver.query(attachment2Uri new String[]{AttachmentUtilities.Columns._ID AttachmentUtilities.Columns.DATA AttachmentUtilities.Columns.DISPLAY_NAME AttachmentUtilities.Columns.SIZE} null null null); assertEquals(1 c.getCount()); assertTrue(c.moveToFirst()); assertEquals(attachment2Id c.getLong(0)); assertEquals(attachment2Uri.toString() c.getString(1)); assertEquals(""file2"" c.getString(2)); assertEquals(200 c.getInt(3)); attachment3Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment3Id); c=mMockResolver.query(attachment3Uri new String[]{AttachmentUtilities.Columns.SIZE AttachmentUtilities.Columns.DISPLAY_NAME AttachmentUtilities.Columns.DATA AttachmentUtilities.Columns._ID} null null null); assertEquals(1 c.getCount()); assertTrue(c.moveToFirst()); assertEquals(attachment3Id c.getLong(3)); assertEquals(attachment3Uri.toString() c.getString(2)); assertEquals(""file3"" c.getString(1)); assertEquals(300 c.getInt(0)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AttachmentProviderTests.java,testResolveAttachmentIdToContentUri,"public void  () throws MessagingException { Account account1=ProviderTestUtils.setupAccount(""attachment-query"" false mMockContext); account1.save(mMockContext); final long message1Id=1; final long attachment1Id=1; final Uri attachment1Uri=AttachmentUtilities.getAttachmentUri(account1.mId attachment1Id); Uri result=AttachmentUtilities.resolveAttachmentIdToContentUri(mMockResolver attachment1Uri); assertEquals(attachment1Uri result); { Uri attachmentUri=createAttachment(account1 message1Id ""file:///path/to/file""); Uri contentUri=AttachmentUtilities.resolveAttachmentIdToContentUri(mMockResolver attachmentUri); assertEquals(""file:///path/to/file"" contentUri.toString()); } { Uri attachmentUri=createAttachment(account1 message1Id null); Uri contentUri=AttachmentUtilities.resolveAttachmentIdToContentUri(mMockResolver attachmentUri); assertEquals(attachmentUri contentUri); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,PolicyTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=getMockContext(); ContentCache.invalidateAllCaches(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,setupSimpleAttachment,private Attachment  (String name long size Account acct){ Attachment att=ProviderTestUtils.setupAttachment(-1 name size false mMockContext); att.mAccountKey=acct.mId; return att; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,tearDown,@Override public void  () throws Exception { super.tearDown(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,testGetAccountIdWithPolicyKey,"public void  (){ String securitySyncKey=""key""; Account account1=ProviderTestUtils.setupAccount(""acct1"" true mMockContext); Policy policy1=new Policy(); SecurityPolicy.setAccountPolicy(mMockContext account1 policy1 securitySyncKey); Account account2=ProviderTestUtils.setupAccount(""acct2"" true mMockContext); Policy policy2=new Policy(); SecurityPolicy.setAccountPolicy(mMockContext account2 policy2 securitySyncKey); account1.refresh(mMockContext); account2.refresh(mMockContext); assertTrue(account1.mPolicyKey > 0); assertTrue(account2.mPolicyKey > 0); assertEquals(account1.mId Policy.getAccountIdWithPolicyKey(mMockContext account1.mPolicyKey)); assertEquals(account2.mId Policy.getAccountIdWithPolicyKey(mMockContext account2.mPolicyKey)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,testParcel,public void  (){ Policy policy=new Policy(); policy.mPasswordMode=Policy.PASSWORD_MODE_STRONG; policy.mPasswordMinLength=6; policy.mPasswordComplexChars=5; policy.mPasswordExpirationDays=4; policy.mPasswordHistory=3; policy.mPasswordMaxFails=8; policy.mMaxScreenLockTime=600; policy.mRequireRemoteWipe=true; policy.mRequireEncryption=true; policy.mRequireEncryptionExternal=true; policy.mRequireManualSyncWhenRoaming=true; policy.mDontAllowCamera=false; policy.mDontAllowAttachments=true; policy.mDontAllowHtml=false; policy.mMaxAttachmentSize=22222; policy.mMaxTextTruncationSize=33333; policy.mMaxHtmlTruncationSize=44444; policy.mMaxEmailLookback=5; policy.mMaxCalendarLookback=6; policy.mPasswordRecoveryEnabled=true; Parcel parcel=Parcel.obtain(); policy.writeToParcel(parcel 0); parcel.setDataPosition(0); Policy readPolicy=Policy.CREATOR.createFromParcel(parcel); assertEquals(policy readPolicy); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,testSetAndClearAccountPolicy,"public void  (){ String securitySyncKey=""key""; Account account=ProviderTestUtils.setupAccount(""acct"" true mMockContext); assertEquals(0 account.mPolicyKey); assertEquals(0 EmailContent.count(mMockContext Policy.CONTENT_URI)); Policy policy=new Policy(); SecurityPolicy.setAccountPolicy(mMockContext account policy securitySyncKey); account.refresh(mMockContext); assertTrue(account.mPolicyKey > 0); Policy dbPolicy=Policy.restorePolicyWithId(mMockContext account.mPolicyKey); assertNotNull(dbPolicy); assertEquals(policy dbPolicy); assertEquals(securitySyncKey account.mSecuritySyncKey); SecurityPolicy.clearAccountPolicy(mMockContext account); account.refresh(mMockContext); assertEquals(0 account.mPolicyKey); assertEquals(0 EmailContent.count(mMockContext Policy.CONTENT_URI)); account.refresh(mMockContext); assertNull(account.mSecuritySyncKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\PolicyTests.java,testSetAttachmentFlagsForNewPolicy,"public void  (){ Account acct=ProviderTestUtils.setupAccount(""acct1"" true mMockContext); Policy policy1=new Policy(); policy1.mDontAllowAttachments=true; SecurityPolicy.setAccountPolicy(mMockContext acct policy1 null); Mailbox box=ProviderTestUtils.setupMailbox(""box1"" acct.mId true mMockContext); Message msg1=ProviderTestUtils.setupMessage(""message1"" acct.mId box.mId false false mMockContext); ArrayList<Attachment> atts=new ArrayList<Attachment>(); Attachment att1=setupSimpleAttachment(""fileName1"" 10001L acct); atts.add(att1); Attachment att2=setupSimpleAttachment(""fileName2"" 20001L acct); atts.add(att2); msg1.mAttachments=atts; msg1.save(mMockContext); Message msg2=ProviderTestUtils.setupMessage(""message2"" acct.mId box.mId false false mMockContext); atts.clear(); Attachment att3=setupSimpleAttachment(""fileName3"" 70001L acct); atts.add(att3); Attachment att4=setupSimpleAttachment(""fileName4"" 5001L acct); atts.add(att4); msg2.mAttachments=atts; msg2.save(mMockContext); assertEquals(4 EmailContent.count(mMockContext Attachment.CONTENT_URI)); assertEquals(0 EmailContent.count(mMockContext Attachment.CONTENT_URI CANT_DOWNLOAD_SELECTION null)); Policy.setAttachmentFlagsForNewPolicy(mMockContext acct policy1); assertEquals(4 EmailContent.count(mMockContext Attachment.CONTENT_URI CANT_DOWNLOAD_SELECTION null)); Policy policy2=new Policy(); policy2.mMaxAttachmentSize=20000; Policy.setAttachmentFlagsForNewPolicy(mMockContext acct policy2); assertEquals(2 EmailContent.count(mMockContext Attachment.CONTENT_URI CANT_DOWNLOAD_SELECTION null)); att2=Attachment.restoreAttachmentWithId(mMockContext att2.mId); assertTrue((att2.mFlags & Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD) != 0); att3=Attachment.restoreAttachmentWithId(mMockContext att3.mId); assertTrue((att3.mFlags & Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD) != 0); Policy policy3=new Policy(); policy3.mMaxAttachmentSize=5001; Policy.setAttachmentFlagsForNewPolicy(mMockContext acct policy3); assertEquals(3 EmailContent.count(mMockContext Attachment.CONTENT_URI CANT_DOWNLOAD_SELECTION null)); att4=Attachment.restoreAttachmentWithId(mMockContext att4.mId); assertTrue((att4.mFlags & Attachment.FLAG_POLICY_DISALLOWS_DOWNLOAD) == 0); Policy policy4=new Policy(); Policy.setAttachmentFlagsForNewPolicy(mMockContext acct policy4); assertEquals(0 EmailContent.count(mMockContext Attachment.CONTENT_URI CANT_DOWNLOAD_SELECTION null)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,AccountBackupRestoreTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,assertRestoredAccountEqual,"public static void  (Account expect Account actual){ assertEquals("" mDisplayName"" expect.mDisplayName actual.mDisplayName); assertEquals("" mEmailAddress"" expect.mEmailAddress actual.mEmailAddress); assertEquals("" mSyncLookback"" expect.mSyncLookback actual.mSyncLookback); assertEquals("" mSyncInterval"" expect.mSyncInterval actual.mSyncInterval); assertEquals("" mFlags"" expect.mFlags actual.mFlags); assertEquals("" mSenderName"" expect.mSenderName actual.mSenderName); assertEquals("" mProtocolVersion"" expect.mProtocolVersion actual.mProtocolVersion); assertEquals("" mSignature"" expect.mSignature actual.mSignature); assertEquals(0 actual.mPolicyKey); assertNull(actual.mSyncKey); assertNull(actual.mSecuritySyncKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,setUp,@Override protected void  () throws Exception { super.setUp(); mMockContext=getMockContext(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,tearDown,@Override protected void  () throws Exception { super.tearDown(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\AccountBackupRestoreTests.java,testBackupAndRestore,"public void  (){ Account saved1=ProviderTestUtils.setupAccount(""testBackup1"" false mMockContext); saved1.mHostAuthRecv=ProviderTestUtils.setupHostAuth(""legacy-recv"" 0 false mMockContext); saved1.mHostAuthSend=ProviderTestUtils.setupHostAuth(""legacy-send"" 0 false mMockContext); saved1.save(mMockContext); Account saved2=ProviderTestUtils.setupAccount(""testBackup2"" false mMockContext); saved2.mHostAuthRecv=ProviderTestUtils.setupHostAuth(""legacy-recv"" 0 false mMockContext); saved2.mHostAuthSend=ProviderTestUtils.setupHostAuth(""legacy-send"" 0 false mMockContext); saved2.save(mMockContext); assertEquals(2 EmailContent.count(mMockContext Account.CONTENT_URI)); assertEquals(4 EmailContent.count(mMockContext HostAuth.CONTENT_URI)); AccountBackupRestore.backup(mMockContext); ContentResolver cr=mMockContext.getContentResolver(); cr.delete(Account.CONTENT_URI null null); cr.delete(HostAuth.CONTENT_URI null null); assertEquals(0 EmailContent.count(mMockContext Account.CONTENT_URI)); assertEquals(0 EmailContent.count(mMockContext HostAuth.CONTENT_URI)); getProvider().shutdown(); assertEquals(2 EmailContent.count(mMockContext Account.CONTENT_URI)); assertEquals(4 EmailContent.count(mMockContext HostAuth.CONTENT_URI)); Cursor c=cr.query(Account.CONTENT_URI Account.CONTENT_PROJECTION null null ""_id ASC""); assertNotNull(c); assertTrue(c.moveToNext()); Account restored=new Account(); restored.restore(c); HostAuth recv=HostAuth.restoreHostAuthWithId(mMockContext restored.mHostAuthKeyRecv); assertNotNull(recv); HostAuth send=HostAuth.restoreHostAuthWithId(mMockContext restored.mHostAuthKeySend); assertNotNull(send); ProviderTestUtils.assertHostAuthEqual(""backup"" saved1.mHostAuthRecv recv false); ProviderTestUtils.assertHostAuthEqual(""backup"" saved1.mHostAuthSend send false); assertRestoredAccountEqual(saved1 restored); assertTrue(c.moveToNext()); restored=new Account(); restored.restore(c); recv=HostAuth.restoreHostAuthWithId(mMockContext restored.mHostAuthKeyRecv); assertNotNull(recv); send=HostAuth.restoreHostAuthWithId(mMockContext restored.mHostAuthKeySend); assertNotNull(send); ProviderTestUtils.assertHostAuthEqual(""backup"" saved2.mHostAuthRecv recv false); ProviderTestUtils.assertHostAuthEqual(""backup"" saved2.mHostAuthSend send false); assertRestoredAccountEqual(saved2 restored); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ResourceHelperTest.java,brokentestGetAccountColor,public void  (){ Integer lastColor=null; Paint lastPaint=null; for (long accountId=-1; accountId < 100; accountId++) { Integer color=mResourceHelper.getAccountColor(accountId); Paint paint=mResourceHelper.getAccountColorPaint(accountId); assertNotNull(color); assertNotNull(paint); assertFalse(color.equals(lastColor)); assertFalse(paint.equals(lastPaint)); lastColor=color; lastPaint=paint; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ResourceHelperTest.java,setUp,@Override protected void  () throws Exception { super.setUp(); mResourceHelper=ResourceHelper.getInstance(getContext()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assertAccountEqual,"public static void  (String caller Account expect Account actual){ if (expect == actual) { return; } assertEmailContentEqual(caller expect actual); assertEquals(caller + "" mDisplayName"" expect.mDisplayName actual.mDisplayName); assertEquals(caller + "" mEmailAddress"" expect.mEmailAddress actual.mEmailAddress); assertEquals(caller + "" mSyncKey"" expect.mSyncKey actual.mSyncKey); assertEquals(caller + "" mSyncLookback"" expect.mSyncLookback actual.mSyncLookback); assertEquals(caller + "" mSyncInterval"" expect.mSyncInterval actual.mSyncInterval); assertEquals(caller + "" mHostAuthKeyRecv"" expect.mHostAuthKeyRecv actual.mHostAuthKeyRecv); assertEquals(caller + "" mHostAuthKeySend"" expect.mHostAuthKeySend actual.mHostAuthKeySend); assertEquals(caller + "" mFlags"" expect.mFlags actual.mFlags); assertEquals(caller + "" mSenderName"" expect.mSenderName actual.mSenderName); assertEquals(caller + "" mProtocolVersion"" expect.mProtocolVersion actual.mProtocolVersion); assertEquals(caller + "" mSecuritySyncKey"" expect.mSecuritySyncKey actual.mSecuritySyncKey); assertEquals(caller + "" mSignature"" expect.mSignature actual.mSignature); assertEquals(caller + "" mPolicyKey"" expect.mPolicyKey actual.mPolicyKey); assertEquals(caller + "" mPingDuration"" expect.mPingDuration actual.mPingDuration); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assertAttachmentEqual,"public static void  (String caller Attachment expect Attachment actual){ if (expect == actual) { return; } assertEmailContentEqual(caller expect actual); assertEquals(caller + "" mFileName"" expect.mFileName actual.mFileName); assertEquals(caller + "" mMimeType"" expect.mMimeType actual.mMimeType); assertEquals(caller + "" mSize"" expect.mSize actual.mSize); assertEquals(caller + "" mContentId"" expect.mContentId actual.mContentId); assertEquals(caller + "" mContentUri"" expect.getContentUri() actual.getContentUri()); assertEquals(caller + "" mCachedFileUri"" expect.getCachedFileUri() actual.getCachedFileUri()); assertEquals(caller + "" mMessageKey"" expect.mMessageKey actual.mMessageKey); assertEquals(caller + "" mLocation"" expect.mLocation actual.mLocation); assertEquals(caller + "" mEncoding"" expect.mEncoding actual.mEncoding); assertEquals(caller + "" mContent"" expect.mContent actual.mContent); assertEquals(caller + "" mFlags"" expect.mFlags actual.mFlags); MoreAsserts.assertEquals(caller + "" mContentBytes"" expect.mContentBytes actual.mContentBytes); assertEquals(caller + "" mAccountKey"" expect.mAccountKey actual.mAccountKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assertEmailContentEqual,"private static void  (String caller EmailContent expect EmailContent actual){ if (expect == actual) { return; } assertEquals(caller + "" mId"" expect.mId actual.mId); assertEquals(caller + "" mBaseUri"" expect.mBaseUri actual.mBaseUri); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assertHostAuthEqual,"public static void  (String caller HostAuth expect HostAuth actual boolean testEmailContent){ if (expect == actual) { return; } if (testEmailContent) { assertEmailContentEqual(caller expect actual); } assertEquals(caller + "" mProtocol"" expect.mProtocol actual.mProtocol); assertEquals(caller + "" mAddress"" expect.mAddress actual.mAddress); assertEquals(caller + "" mPort"" expect.mPort actual.mPort); assertEquals(caller + "" mFlags"" expect.mFlags actual.mFlags); assertEquals(caller + "" mLogin"" expect.mLogin actual.mLogin); assertEquals(caller + "" mPassword"" expect.mPassword actual.mPassword); assertEquals(caller + "" mDomain"" expect.mDomain actual.mDomain); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assertMailboxEqual,"public static void  (String caller Mailbox expect Mailbox actual){ if (expect == actual) { return; } assertEmailContentEqual(caller expect actual); assertEquals(caller + "" mDisplayName"" expect.mDisplayName actual.mDisplayName); assertEquals(caller + "" mServerId"" expect.mServerId actual.mServerId); assertEquals(caller + "" mParentServerId"" expect.mParentServerId actual.mParentServerId); assertEquals(caller + "" mParentKey"" expect.mParentKey actual.mParentKey); assertEquals(caller + "" mAccountKey"" expect.mAccountKey actual.mAccountKey); assertEquals(caller + "" mType"" expect.mType actual.mType); assertEquals(caller + "" mDelimiter"" expect.mDelimiter actual.mDelimiter); assertEquals(caller + "" mSyncKey"" expect.mSyncKey actual.mSyncKey); assertEquals(caller + "" mSyncLookback"" expect.mSyncLookback actual.mSyncLookback); assertEquals(caller + "" mSyncInterval"" expect.mSyncInterval actual.mSyncInterval); assertEquals(caller + "" mSyncTime"" expect.mSyncTime actual.mSyncTime); assertEquals(caller + "" mFlagVisible"" expect.mFlagVisible actual.mFlagVisible); assertEquals(caller + "" mSyncStatus"" expect.mSyncStatus actual.mSyncStatus); assertEquals(caller + "" mLastTouchedTime"" expect.mLastTouchedTime actual.mLastTouchedTime); assertEquals(caller + "" mUiSyncStatus"" expect.mUiSyncStatus actual.mUiSyncStatus); assertEquals(caller + "" mUiLastSyncResult"" expect.mUiLastSyncResult actual.mUiLastSyncResult); assertEquals(caller + "" mTotalCount"" expect.mTotalCount actual.mTotalCount); assertEquals(caller + "" mHierarchicalName"" expect.mHierarchicalName actual.mHierarchicalName); assertEquals(caller + "" mLastFullSyncTime"" expect.mLastFullSyncTime actual.mLastFullSyncTime); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,assertMessageEqual,"public static void  (String caller Message expect Message actual){ if (expect == actual) { return; } assertEmailContentEqual(caller expect actual); assertEquals(caller + "" mDisplayName"" expect.mDisplayName actual.mDisplayName); assertEquals(caller + "" mTimeStamp"" expect.mTimeStamp actual.mTimeStamp); assertEquals(caller + "" mSubject"" expect.mSubject actual.mSubject); assertEquals(caller + "" mFlagRead = false"" expect.mFlagRead actual.mFlagRead); assertEquals(caller + "" mFlagRead = false"" expect.mFlagSeen actual.mFlagSeen); assertEquals(caller + "" mFlagLoaded"" expect.mFlagLoaded actual.mFlagLoaded); assertEquals(caller + "" mFlagFavorite"" expect.mFlagFavorite actual.mFlagFavorite); assertEquals(caller + "" mFlagAttachment"" expect.mFlagAttachment actual.mFlagAttachment); assertEquals(caller + "" mFlags"" expect.mFlags actual.mFlags); assertEquals(caller + "" mServerId"" expect.mServerId actual.mServerId); assertEquals(caller + "" mServerTimeStamp"" expect.mServerTimeStamp actual.mServerTimeStamp); assertEquals(caller + "" mDraftInfo"" expect.mDraftInfo actual.mDraftInfo); assertEquals(caller + "" mMessageId"" expect.mMessageId actual.mMessageId); assertEquals(caller + "" mMailboxKey"" expect.mMailboxKey actual.mMailboxKey); assertEquals(caller + "" mAccountKey"" expect.mAccountKey actual.mAccountKey); assertEquals(caller + "" mMainMailboxKey"" expect.mMainMailboxKey actual.mMainMailboxKey); assertEquals(caller + "" mFrom"" expect.mFrom actual.mFrom); assertEquals(caller + "" mTo"" expect.mTo actual.mTo); assertEquals(caller + "" mCc"" expect.mCc actual.mCc); assertEquals(caller + "" mBcc"" expect.mBcc actual.mBcc); assertEquals(caller + "" mReplyTo"" expect.mReplyTo actual.mReplyTo); assertEquals(caller + "" mMeetingInfo"" expect.mMeetingInfo actual.mMeetingInfo); assertEquals(caller + "" mSnippet"" expect.mSnippet actual.mSnippet); assertEquals(caller + "" mProtocolSearchInfo"" expect.mProtocolSearchInfo actual.mProtocolSearchInfo); assertEquals(caller + "" mThreadTopic"" expect.mThreadTopic actual.mThreadTopic); assertEquals(caller + "" mSyncData"" expect.mSyncData actual.mSyncData); assertEquals(caller + "" mSyncData"" expect.mServerConversationId actual.mServerConversationId); assertEquals(caller + "" mText"" expect.mText actual.mText); assertEquals(caller + "" mHtml"" expect.mHtml actual.mHtml); assertEquals(caller + "" mSourceKey"" expect.mSourceKey actual.mSourceKey); assertEquals(caller + "" mQuotedTextStartPos"" expect.mQuotedTextStartPos actual.mQuotedTextStartPos); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,createTempEmlFile,"public static Uri  (Context context Message msg File directory) throws Exception { File outputFile=File.createTempFile(""message"" ""tmp"" directory); assertNotNull(outputFile); FileOutputStream outputStream=new FileOutputStream(outputFile); Rfc822Output.writeTo(context msg outputStream true false null); outputStream.close(); return Uri.fromFile(outputFile); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,deleteAccount,public static void  (Context context long accountId){ context.getContentResolver().delete(ContentUris.withAppendedId(Account.CONTENT_URI accountId) null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setupAccount,"public static Account  (String name boolean saveIt Context context){ Account account=new Account(); account.mDisplayName=name; account.mEmailAddress=name + ""@android.com""; account.mSyncKey=""sync-key-"" + name; account.mSyncLookback=1; account.mSyncInterval=Account.CHECK_INTERVAL_NEVER; account.mHostAuthKeyRecv=0; account.mHostAuthKeySend=0; account.mFlags=4; account.mSenderName=name; account.mProtocolVersion=""2.5"" + name; account.mPolicyKey=0; account.mSecuritySyncKey=""sec-sync-key-"" + name; account.mSignature=""signature-"" + name; if (saveIt) { account.save(context); } return account; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setupAttachment,public static Attachment  (long messageId String fileName long length boolean saveIt Context context){ return setupAttachment(messageId fileName length 0 saveIt context); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setupBody,public static Body  (long messageId String textContent String htmlContent boolean saveIt Context context){ Body body=new Body(); body.mMessageKey=messageId; body.mHtmlContent=htmlContent; body.mTextContent=textContent; body.mSourceKey=messageId + 0x1000; if (saveIt) { body.save(context); } return body; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setupHostAuth,"public static HostAuth  (String protocol String name boolean saveIt Context context){ HostAuth hostAuth=new HostAuth(); hostAuth.mProtocol=protocol; hostAuth.mAddress=""address-"" + name; hostAuth.mPort=100; hostAuth.mFlags=200; hostAuth.mLogin=""login-"" + name; hostAuth.mPassword=""password-"" + name; hostAuth.mDomain=""domain-"" + name; if (saveIt) { hostAuth.save(context); } return hostAuth; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setupMailbox,"public static Mailbox  (String name long accountId boolean saveIt Context context int type char delimiter){ Mailbox box=new Mailbox(); int delimiterIndex=name.lastIndexOf(delimiter); String displayName=name; if (delimiterIndex > 0) { displayName=name.substring(delimiterIndex + 1); } box.mDisplayName=displayName; box.mServerId=name; box.mParentServerId=""parent-serverid-"" + name; box.mParentKey=4; box.mAccountKey=accountId; box.mType=type; box.mDelimiter=delimiter; box.mSyncKey=""sync-key-"" + name; box.mSyncLookback=2; box.mSyncInterval=Account.CHECK_INTERVAL_NEVER; box.mSyncTime=3; box.mFlagVisible=true; box.mFlags=5; if (saveIt) { box.save(context); } return box; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTestUtils.java,setupMessage,"public static Message  (String name long accountId long mailboxId boolean addBody boolean saveIt Context context boolean starred boolean read){ Message message=new Message(); message.mDisplayName=name; message.mTimeStamp=100 + name.length(); message.mSubject=""subject "" + name; message.mFlagRead=read; message.mFlagSeen=read; message.mFlagLoaded=Message.FLAG_LOADED_UNLOADED; message.mFlagFavorite=starred; message.mFlagAttachment=true; message.mFlags=0; message.mServerId=""serverid "" + name; message.mServerTimeStamp=300 + name.length(); message.mMessageId=""messageid "" + name; message.mMailboxKey=mailboxId; message.mAccountKey=accountId; message.mFrom=""from "" + name; message.mTo=""to "" + name; message.mCc=""cc "" + name; message.mBcc=""bcc "" + name; message.mReplyTo=""replyto "" + name; message.mMeetingInfo=""123"" + accountId + mailboxId+ name.length(); if (addBody) { message.mText=""body text "" + name; message.mHtml=""body html "" + name; message.mSourceKey=400 + name.length(); } if (saveIt) { message.save(context); } return message; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,MockContext2,public  (Context mockContext Context realContext){ super(mockContext); mRealContext=realContext; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,PolicySet,private  (long flags){ mMinPasswordLength=(int)((flags & LegacyPolicySet.PASSWORD_LENGTH_MASK) >> LegacyPolicySet.PASSWORD_LENGTH_SHIFT); mPasswordMode=(int)(flags & LegacyPolicySet.PASSWORD_MODE_MASK); mMaxPasswordFails=(int)((flags & LegacyPolicySet.PASSWORD_MAX_FAILS_MASK) >> LegacyPolicySet.PASSWORD_MAX_FAILS_SHIFT); mMaxScreenLockTime=(int)((flags & LegacyPolicySet.SCREEN_LOCK_TIME_MASK) >> LegacyPolicySet.SCREEN_LOCK_TIME_SHIFT); mRequireRemoteWipe=0 != (flags & LegacyPolicySet.REQUIRE_REMOTE_WIPE); mPasswordExpirationDays=(int)((flags & LegacyPolicySet.PASSWORD_EXPIRATION_MASK) >> LegacyPolicySet.PASSWORD_EXPIRATION_SHIFT); mPasswordHistory=(int)((flags & LegacyPolicySet.PASSWORD_HISTORY_MASK) >> LegacyPolicySet.PASSWORD_HISTORY_SHIFT); mPasswordComplexChars=(int)((flags & LegacyPolicySet.PASSWORD_COMPLEX_CHARS_MASK) >> LegacyPolicySet.PASSWORD_COMPLEX_CHARS_SHIFT); mRequireEncryption=0 != (flags & LegacyPolicySet.REQUIRE_ENCRYPTION); mRequireEncryptionExternal=0 != (flags & LegacyPolicySet.REQUIRE_ENCRYPTION_EXTERNAL); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,SecurityPolicyTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,assertAccountPolicyConsistent,"private long  (long accountId long oldKey){ Account account=Account.restoreAccountWithId(mMockContext accountId); long policyKey=account.mPolicyKey; assertTrue(policyKey > 0); Policy policy=Policy.restorePolicyWithId(mMockContext policyKey); assertNotNull(policy); assertEquals(account.mPolicyKey policy.mId); assertEquals(accountId Policy.getAccountIdWithPolicyKey(mMockContext policy.mId)); if (oldKey > 0) { assertNull(""old policy not cleaned up"" Policy.restorePolicyWithId(mMockContext oldKey)); } return policyKey; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,getApplicationContext,@Override public Context  (){ return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,getPackageName,@Override public String  (){ return mRealContext.getPackageName(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,getSystemService,@Override public Object  (String name){ return mRealContext.getSystemService(name); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,policySetEqualsPolicy,private boolean  (PolicySet ps Policy policy){ if ((ps.mPasswordMode >> LegacyPolicySet.PASSWORD_MODE_SHIFT) != policy.mPasswordMode) { return false; } if (ps.mMinPasswordLength != policy.mPasswordMinLength) return false; if (ps.mPasswordComplexChars != policy.mPasswordComplexChars) return false; if (ps.mPasswordHistory != policy.mPasswordHistory) return false; if (ps.mPasswordExpirationDays != policy.mPasswordExpirationDays) return false; if (ps.mMaxPasswordFails != policy.mPasswordMaxFails) return false; if (ps.mMaxScreenLockTime != policy.mMaxScreenLockTime) return false; if (ps.mRequireRemoteWipe != policy.mRequireRemoteWipe) return false; if (ps.mRequireEncryption != policy.mRequireEncryption) return false; if (ps.mRequireEncryptionExternal != policy.mRequireEncryptionExternal) return false; return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,setUp,@Override protected void  () throws Exception { super.setUp(); mMockContext=new MockContext2(getMockContext() mContext); ContentCache.invalidateAllCaches(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,setupPolicy,private Policy  (int minPasswordLength int passwordMode int maxPasswordFails int maxScreenLockTime boolean requireRemoteWipe int passwordExpirationDays int passwordHistory int passwordComplexChars boolean requireEncryption boolean dontAllowCamera) throws IllegalArgumentException { Policy policy=new Policy(); policy.mPasswordMinLength=minPasswordLength; policy.mPasswordMode=passwordMode; policy.mPasswordMaxFails=maxPasswordFails; policy.mMaxScreenLockTime=maxScreenLockTime; policy.mRequireRemoteWipe=requireRemoteWipe; policy.mPasswordExpirationDays=passwordExpirationDays; policy.mPasswordHistory=passwordHistory; policy.mPasswordComplexChars=passwordComplexChars; policy.mRequireEncryption=requireEncryption; policy.mDontAllowCamera=dontAllowCamera; return policy; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,tearDown,@Override protected void  () throws Exception { super.tearDown(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testAggregator,"public void  (){ mSecurityPolicy=SecurityPolicy.getInstance(mMockContext); assertEquals(EMPTY_POLICY mSecurityPolicy.computeAggregatePolicy()); ProviderTestUtils.setupAccount(""no-sec-1"" true mMockContext); ProviderTestUtils.setupAccount(""no-sec-2"" true mMockContext); assertEquals(EMPTY_POLICY mSecurityPolicy.computeAggregatePolicy()); Account a3=ProviderTestUtils.setupAccount(""sec-3"" true mMockContext); Policy p3ain=setupPolicy(10 Policy.PASSWORD_MODE_SIMPLE 0 0 false 0 0 0 false false); SecurityPolicy.setAccountPolicy(mMockContext a3 p3ain null); Policy p3aout=mSecurityPolicy.computeAggregatePolicy(); assertNotNull(p3aout); assertEquals(p3ain p3aout); Policy p3bin=setupPolicy(10 Policy.PASSWORD_MODE_SIMPLE 15 16 false 6 2 3 false false); SecurityPolicy.setAccountPolicy(mMockContext a3 p3bin null); Policy p3bout=mSecurityPolicy.computeAggregatePolicy(); assertNotNull(p3bout); assertEquals(p3bin p3bout); Policy p4in=setupPolicy(20 Policy.PASSWORD_MODE_STRONG 25 26 false 0 5 7 false true); Account a4=ProviderTestUtils.setupAccount(""sec-4"" true mMockContext); SecurityPolicy.setAccountPolicy(mMockContext a4 p4in null); Policy p4out=mSecurityPolicy.computeAggregatePolicy(); assertNotNull(p4out); assertEquals(20 p4out.mPasswordMinLength); assertEquals(Policy.PASSWORD_MODE_STRONG p4out.mPasswordMode); assertEquals(15 p4out.mPasswordMaxFails); assertEquals(16 p4out.mMaxScreenLockTime); assertEquals(6 p4out.mPasswordExpirationDays); assertEquals(5 p4out.mPasswordHistory); assertEquals(7 p4out.mPasswordComplexChars); assertFalse(p4out.mRequireRemoteWipe); assertFalse(p4out.mRequireEncryption); assertFalse(p4out.mRequireEncryptionExternal); assertTrue(p4out.mDontAllowCamera); Policy p5in=setupPolicy(4 Policy.PASSWORD_MODE_SIMPLE 5 6 true 1 0 0 true false); Account a5=ProviderTestUtils.setupAccount(""sec-5"" true mMockContext); SecurityPolicy.setAccountPolicy(mMockContext a5 p5in null); Policy p5out=mSecurityPolicy.computeAggregatePolicy(); assertNotNull(p5out); assertEquals(20 p5out.mPasswordMinLength); assertEquals(Policy.PASSWORD_MODE_STRONG p5out.mPasswordMode); assertEquals(5 p5out.mPasswordMaxFails); assertEquals(6 p5out.mMaxScreenLockTime); assertEquals(1 p5out.mPasswordExpirationDays); assertEquals(5 p5out.mPasswordHistory); assertEquals(7 p5out.mPasswordComplexChars); assertTrue(p5out.mRequireRemoteWipe); assertFalse(p5out.mRequireEncryptionExternal); assertTrue(p5out.mDontAllowCamera); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testDisableAdmin,"public void  (){ Account a1=ProviderTestUtils.setupAccount(""disable-1"" true mMockContext); Policy p1=setupPolicy(10 Policy.PASSWORD_MODE_SIMPLE 0 0 false 0 0 0 false false); SecurityPolicy.setAccountPolicy(mMockContext a1 p1 ""security-sync-key-1""); Account a2=ProviderTestUtils.setupAccount(""disable-2"" true mMockContext); Policy p2=setupPolicy(20 Policy.PASSWORD_MODE_STRONG 25 26 false 0 0 0 false false); SecurityPolicy.setAccountPolicy(mMockContext a2 p2 ""security-sync-key-2""); Account a3=ProviderTestUtils.setupAccount(""disable-3"" true mMockContext); SecurityPolicy.clearAccountPolicy(mMockContext a3); mSecurityPolicy=SecurityPolicy.getInstance(mMockContext); Policy before=mSecurityPolicy.getAggregatePolicy(); mSecurityPolicy.onAdminEnabled(true); Policy after1=mSecurityPolicy.getAggregatePolicy(); assertEquals(before after1); Account a1a=Account.restoreAccountWithId(mMockContext a1.mId); assertNotNull(a1a.mSecuritySyncKey); assertTrue(a1a.mPolicyKey > 0); Account a2a=Account.restoreAccountWithId(mMockContext a2.mId); assertNotNull(a2a.mSecuritySyncKey); assertTrue(a2a.mPolicyKey > 0); Account a3a=Account.restoreAccountWithId(mMockContext a3.mId); assertNull(a3a.mSecuritySyncKey); assertTrue(a3a.mPolicyKey == 0); mSecurityPolicy.deleteSecuredAccounts(mMockContext); Policy after2=mSecurityPolicy.getAggregatePolicy(); assertEquals(EMPTY_POLICY after2); Account a1b=Account.restoreAccountWithId(mMockContext a1.mId); assertNull(a1b); Account a2b=Account.restoreAccountWithId(mMockContext a2.mId); assertNull(a2b); Account a3b=Account.restoreAccountWithId(mMockContext a3.mId); assertNull(a3b.mSecuritySyncKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testEquals,@SmallTest public void  (){ Policy p1=setupPolicy(1 Policy.PASSWORD_MODE_STRONG 3 4 true 7 8 9 false false); Policy p2=setupPolicy(1 Policy.PASSWORD_MODE_STRONG 3 4 true 7 8 9 false false); Policy p3=setupPolicy(2 Policy.PASSWORD_MODE_SIMPLE 5 6 true 7 8 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testFindExpiringAccount,"public void  (){ ProviderTestUtils.setupAccount(""expiring-1"" true mMockContext); long nextExpiringAccountId=SecurityPolicy.findShortestExpiration(mMockContext); assertEquals(-1 nextExpiringAccountId); Account a2=ProviderTestUtils.setupAccount(""expiring-2"" true mMockContext); Policy p2=setupPolicy(20 Policy.PASSWORD_MODE_STRONG 25 26 false 30 0 0 false true); SecurityPolicy.setAccountPolicy(mMockContext a2 p2 null); nextExpiringAccountId=SecurityPolicy.findShortestExpiration(mMockContext); assertEquals(a2.mId nextExpiringAccountId); Account a3=ProviderTestUtils.setupAccount(""expiring-3"" true mMockContext); Policy p3=setupPolicy(20 Policy.PASSWORD_MODE_STRONG 25 26 false 60 0 0 false true); SecurityPolicy.setAccountPolicy(mMockContext a3 p3 null); nextExpiringAccountId=SecurityPolicy.findShortestExpiration(mMockContext); assertEquals(a2.mId nextExpiringAccountId); Account a4=ProviderTestUtils.setupAccount(""expiring-4"" true mMockContext); Policy p4=setupPolicy(20 Policy.PASSWORD_MODE_STRONG 25 26 false 15 0 0 false true); SecurityPolicy.setAccountPolicy(mMockContext a4 p4 null); nextExpiringAccountId=SecurityPolicy.findShortestExpiration(mMockContext); assertEquals(a4.mId nextExpiringAccountId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,MockContext2,public  (Context mockContext Context realContext){ super(mockContext); mRealContext=realContext; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testGetDPManagerPasswordQuality,public void  (){ Policy p1=setupPolicy(0 Policy.PASSWORD_MODE_NONE 0 0 false 0 0 0 false false); assertEquals(DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED p1.getDPManagerPasswordQuality()); Policy p2=setupPolicy(4 Policy.PASSWORD_MODE_SIMPLE 0 0 false 0 0 0 false false); assertEquals(DevicePolicyManager.PASSWORD_QUALITY_NUMERIC p2.getDPManagerPasswordQuality()); Policy p3=setupPolicy(4 Policy.PASSWORD_MODE_STRONG 0 0 false 0 0 0 false false); assertEquals(DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC p3.getDPManagerPasswordQuality()); Policy p4=setupPolicy(4 Policy.PASSWORD_MODE_STRONG 0 0 false 0 0 2 false false); assertEquals(DevicePolicyManager.PASSWORD_QUALITY_COMPLEX p4.getDPManagerPasswordQuality()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,ProviderTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testPolicyFlagsToPolicy,public void  (){ long flags=67096612L; PolicySet ps=new PolicySet(flags); Policy policy=LegacyPolicySet.flagsToPolicy(flags); assertTrue(policySetEqualsPolicy(ps policy)); flags=52776591691846L; ps=new PolicySet(flags); policy=LegacyPolicySet.flagsToPolicy(flags); assertTrue(policySetEqualsPolicy(ps policy)); flags=1689605957029924L; ps=new PolicySet(flags); policy=LegacyPolicySet.flagsToPolicy(flags); assertTrue(policySetEqualsPolicy(ps policy)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,amAccountListHasAccount,private boolean  (android.accounts.Account[] amAccountList Account account Context context){ String email=account.mEmailAddress; for ( android.accounts.Account amAccount : amAccountList) { if (amAccount.name.equals(email)) { return true; } } return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testSetClearHoldFlag,"public void  (){ Account a2=ProviderTestUtils.setupAccount(""holdflag-2"" false mMockContext); a2.mFlags=Account.FLAGS_SYNC_DISABLED | Account.FLAGS_SECURITY_HOLD; a2.save(mMockContext); Account a2a=Account.restoreAccountWithId(mMockContext a2.mId); assertEquals(Account.FLAGS_SYNC_DISABLED | Account.FLAGS_SECURITY_HOLD a2a.mFlags); SecurityPolicy.setAccountHoldFlag(mMockContext a2 false); assertEquals(Account.FLAGS_SYNC_DISABLED a2.mFlags); Account a2b=Account.restoreAccountWithId(mMockContext a2.mId); assertEquals(Account.FLAGS_SYNC_DISABLED a2b.mFlags); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,assertEquals,private void  (Mailbox expected Mailbox actual){ if (expected == null && actual == null) return; assertTrue(expected != null && actual != null); assertEqualsExceptServerId(expected actual expected.mServerId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,assertEqualsExceptServerId,private void  (Mailbox expected Mailbox actual String serverId){ if (expected == null && actual == null) return; assertTrue(expected != null && actual != null); assertEquals(expected.mDisplayName actual.mDisplayName); assertEquals(serverId actual.mServerId); assertEquals(expected.mParentKey actual.mParentKey); assertEquals(expected.mAccountKey actual.mAccountKey); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testSettingAccountPolicy,"@SmallTest public void  (){ Account account=ProviderTestUtils.setupAccount(""testaccount"" true mMockContext); long accountId=account.mId; Policy initial=setupPolicy(10 Policy.PASSWORD_MODE_SIMPLE 0 0 false 0 0 0 false false); SecurityPolicy.setAccountPolic"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,count,private int  (Context context Uri uri String selection String[] selectionArgs){ Cursor c=context.getContentResolver().query(uri EmailContent.ID_PROJECTION selection selectionArgs null); try { return c.getCount(); } finally { c.close(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,createAccount,private Account  (Context c String name HostAuth recvAuth HostAuth sendAuth){ Account account=ProviderTestUtils.setupAccount(name false c); if (recvAuth != null) { account.mHostAuthKeyRecv=recvAuth.mId; if (sendAuth == null) { account.mHostAuthKeySend=recvAuth.mId; } } if (sendAuth != null) { account.mHostAuthKeySend=sendAuth.mId; } account.save(c); return account; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,createMailbox,"private Mailbox  (Context c String displayName String serverId long parentKey long accountId){ Mailbox box=new Mailbox(); box.mDisplayName=displayName; box.mServerId=serverId; box.mParentKey=parentKey; box.mAccountKey=accountId; box.mType=Mailbox.TYPE_MAIL; box.mDelimiter='/'; box.mSyncKey=""sync-key""; box.mSyncLookback=2; box.mSyncInterval=Account.CHECK_INTERVAL_NEVER; box.mSyncTime=3; box.mFlagVisible=true; box.mFlags=5; box.save(c); return box; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,createMessage,"private static Message  (Context c Mailbox b boolean starred boolean read){ return ProviderTestUtils.setupMessage(""1"" b.mAccountKey b.mId true true c starred read); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,createTypeMailbox,"private Mailbox  (Context c long accountId int type){ Mailbox box=new Mailbox(); box.mDisplayName=""foo""; box.mServerId=""1:1""; box.mParentKey=0; box.mAccountKey=accountId; box.mType=type; box.save(c); return box; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,getApplicationContext,@Override public Context  (){ return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\SecurityPolicyTests.java,testWipeExpiringAccounts,"public void  (){ mSecurityPolicy=SecurityPolicy.getInstance(mMockContext); Account a1=ProviderTestUtils.setupAccount(""expired-1"" true mMockContext); Account a2=ProviderTestUtils.setupAccount(""expired-2"" true mMockContext); Policy p2=setupPolicy(20 Policy.PASSWORD_MODE_STRONG 25 26 false 0 0 0 false true); SecurityPolicy.setAccountPolicy(mMockContext a2 p2 null); long account1Id=a1.mId; long account2Id=a2.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); ProviderTestUtils.setupMessage(""message2"" account1Id box1Id false true mMockContext); Mailbox box2=ProviderTestUtils.setupMailbox(""box2"" account2Id true mMockContext); long box2Id=box2.mId; ProviderTestUtils.setupMessage(""message3"" account2Id box2Id false true mMockContext); ProviderTestUtils.setupMessage(""message4"" account2Id box2Id false true mMockContext); boolean wiped=SecurityPolicy.wipeExpiredAccounts(mMockContext); assertFalse(wiped); assertEquals(2 EmailContent.count(mMockContext Account.CONTENT_URI)); assertEquals(2 EmailContent.count(mMockContext Mailbox.CONTENT_URI)); assertEquals(4 EmailContent.count(mMockContext Message.CONTENT_URI)); Account a3=ProviderTestUtils.setupAccount(""expired-3"" true mMockContext); Policy p3=setupPolicy(20 Policy.PASSWORD_MODE_STRONG 25 26 false 30 0 0 false true); SecurityPolicy.setAccountPolicy(mMockContext a3 p3 null); long account3Id=a3.mId; Mailbox box3=ProviderTestUtils.setupMailbox(""box3"" account3Id true mMockContext); long box3Id=box3.mId; ProviderTestUtils.setupMessage(""message5"" account3Id box3Id false true mMockContext); ProviderTestUtils.setupMessage(""message6"" account3Id box3Id false true mMockContext); assertEquals(3 EmailContent.count(mMockContext Account.CONTENT_URI)); assertEquals(3 EmailContent.count(mMockContext Mailbox.CONTENT_URI)); assertEquals(6 EmailContent.count(mMockContext Message.CONTENT_URI)); wiped=SecurityPolicy.wipeExpiredAccounts(mMockContext); assertTrue(wiped); assertEquals(3 EmailContent.count(mMockContext Account.CONTENT_URI)); assertEquals(2 EmailContent.count(mMockContext Mailbox.CONTENT_URI)); assertEquals(4 EmailContent.count(mMockContext Message.CONTENT_URI)); Account account=Account.restoreAccountWithId(mMockContext account1Id); assertEquals(0 account.mFlags & Account.FLAGS_SECURITY_HOLD); account=Account.restoreAccountWithId(mMockContext account2Id); assertEquals(0 account.mFlags & Account.FLAGS_SECURITY_HOLD); account=Account.restoreAccountWithId(mMockContext account3Id); assertEquals(Account.FLAGS_SECURITY_HOLD account.mFlags & Account.FLAGS_SECURITY_HOLD); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,getEclairStyleShortcutUri,"private static Uri  (Account account){ return Account.CONTENT_URI.buildUpon().appendEncodedPath("""" + account.mId).build(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,getMessageCount,private int  (long mailboxId){ return Utility.getFirstRowInt(mMockContext ContentUris.withAppendedId(Mailbox.CONTENT_URI mailboxId) new String[]{MailboxColumns.MESSAGE_COUNT} null null null 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,getPackageName,@Override public String  (){ return mRealContext.getPackageName(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,getSystemService,@Override public Object  (String name){ return mRealContext.getSystemService(name); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,getUnreadCount,"private int  (long mailboxId){ String text=null; Cursor c=null; try { c=mMockContext.getContentResolver().query(Mailbox.CONTENT_URI MAILBOX_UNREAD_COUNT_PROJECTION EmailContent.RECORD_ID + ""=?"" new String[]{String.valueOf(mailboxId)} null); c.moveToFirst(); text=c.getString(MAILBOX_UNREAD_COUNT_COLMUN); } finally { c.close(); } return Integer.valueOf(text); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,loadBodyForMessageId,"private Body  (long messageId){ Cursor c=null; try { c=mMockContext.getContentResolver().query(EmailContent.Body.CONTENT_URI EmailContent.Body.CONTENT_PROJECTION BodyColumns.MESSAGE_KEY + ""=?"" new String[]{String.valueOf(messageId)} null); int numBodies=c.getCount(); assertTrue(""at most one body"" numBodies < 2); return c.moveToFirst() ? EmailContent.getContent(mMockContext c Body.class) : null; } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,setMinusOneToMessageCounts,private void  (){ ContentValues values=new ContentValues(); values.put(MailboxColumns.MESSAGE_COUNT -1); SQLiteDatabase db=getProvider().getDatabase(mMockContext); db.update(Mailbox.TABLE_NAME values null null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=new MockContext2(getMockContext() getContext()); mProvider=getProvider(); mProvider.injectAttachmentService(MOCK_ATTACHMENT_SERVICE); ContentCache.invalidateAllCaches(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,setupUnreadMessage,public static Message  (String name long accountId long mailboxId boolean addBody boolean saveIt Context context){ Message msg=ProviderTestUtils.setupMessage(name accountId mailboxId addBody false context); msg.mFlagRead=false; if (saveIt) { msg.save(context); } return msg; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,tearDown,@Override public void  () throws Exception { super.tearDown(); mProvider.injectAttachmentService(null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testAccountDelete,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""account-delete-1"" true mMockContext); long account1Id=account1.mId; Account account2=ProviderTestUtils.setupAccount(""account-delete-2"" true mMockContext); long account2Id=account2.mId; int numBoxes=EmailContent.count(mMockContext Account.CONTENT_URI null null); assertEquals(2 numBoxes); Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI account1Id); mMockContext.getContentResolver().delete(uri null null); numBoxes=EmailContent.count(mMockContext Account.CONTENT_URI null null); assertEquals(1 numBoxes); uri=ContentUris.withAppendedId(Account.CONTENT_URI account2Id); mMockContext.getContentResolver().delete(uri null null); numBoxes=EmailContent.count(mMockContext Account.CONTENT_URI null null); assertEquals(0 numBoxes); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testAccountGetHostAuthRecv,"public void  (){ Account account=ProviderTestUtils.setupAccount(""account-hostauth"" false mMockContext); account.mHostAuthRecv=ProviderTestUtils.setupHostAuth(""account-hostauth-recv"" -1 false mMockContext); account.save(mMockContext); HostAuth authGet; HostAuth authTest; authTest=account.mHostAuthRecv; assertNotNull(authTest); assertTrue(account.mHostAuthKeyRecv != 0); authGet=account.getOrCreateHostAuthRecv(mMockContext); assertTrue(authGet == authTest); authTest=HostAuth.restoreHostAuthWithId(mMockContext account.mHostAuthKeyRecv); account.mHostAuthRecv=null; authGet=account.getOrCreateHostAuthRecv(mMockContext); assertNotNull(authGet); assertNotNull(account.mHostAuthRecv); ProviderTestUtils.assertHostAuthEqual(""testAccountGetHostAuthRecv-1"" authTest authGet); authTest=new HostAuth(); account.mHostAuthRecv=null; account.mHostAuthKeyRecv=0; authGet=account.getOrCreateHostAuthRecv(mMockContext); assertNotNull(authGet); assertNotNull(account.mHostAuthRecv); ProviderTestUtils.assertHostAuthEqual(""testAccountGetHostAuthRecv-2"" authTest authGet); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testAccountGetHostAuthSend,"public void  (){ Account account=ProviderTestUtils.setupAccount(""account-hostauth"" false mMockContext); account.mHostAuthSend=ProviderTestUtils.setupHostAuth(""account-hostauth-send"" -1 false mMockContext); account.save(mMockContext); HostAuth authGet; HostAuth authTest; authTest=account.mHostAuthSend; assertNotNull(authTest); assertTrue(account.mHostAuthKeySend != 0); authGet=account.getOrCreateHostAuthSend(mMockContext); assertTrue(authGet == authTest); authTest=HostAuth.restoreHostAuthWithId(mMockContext account.mHostAuthKeySend); account.mHostAuthSend=null; authGet=account.getOrCreateHostAuthSend(mMockContext); assertNotNull(authGet); assertNotNull(account.mHostAuthSend); ProviderTestUtils.assertHostAuthEqual(""testAccountGetHostAuthSend-1"" authTest authGet); authTest=new HostAuth(); account.mHostAuthSend=null; account.mHostAuthKeySend=0; authGet=account.getOrCreateHostAuthSend(mMockContext); assertNotNull(authGet); assertNotNull(account.mHostAuthSend); ProviderTestUtils.assertHostAuthEqual(""testAccountGetHostAuthSendv-2"" authTest authGet); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testAccountIsSecurityHold,"public void  (){ final Context context=mMockContext; Account acct1=ProviderTestUtils.setupAccount(""acct1"" true context); Account acct2=ProviderTestUtils.setupAccount(""acct2"" false context); acct2.mFlags|=Account.FLAGS_SECURITY_HOLD; acct2.save(context); assertFalse(Account.isSecurityHold(context acct1.mId)); assertTrue(Account.isSecurityHold(context acct2.mId)); assertFalse(Account.isSecurityHold(context 9999999)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testAccountIsValidId,"public void  (){ final Account account1=ProviderTestUtils.setupAccount(""account-1"" true mMockContext); final Account account2=ProviderTestUtils.setupAccount(""account-2"" true mMockContext); assertTrue(Account.isValidId(mMockContext account1.mId)); assertTrue(Account.isValidId(mMockContext account2.mId)); assertFalse(Account.isValidId(mMockContext 1234567)); assertFalse(Account.isValidId(mMockContext -1)); assertFalse(Account.isValidId(mMockContext -500)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testAccountParcel,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""parcel"" false mMockContext); Bundle b=new Bundle(); b.putParcelable(""account"" account1); Parcel p=Parcel.obtain(); b.writeToParcel(p 0); p.setDataPosition(0); Bundle b2=new Bundle(Account.class.getClassLoader()); b2.readFromParcel(p); Account account2=(Account)b2.getParcelable(""account""); p.recycle(); ProviderTestUtils.assertAccountEqual(""testAccountParcel"" account1 account2); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testAccountSave,"@SmallTest public void  (){ Account account1=ProviderTestUtils.setupAccount(""account-save"" true mMockContext); long account1Id=account1.mId; Account account2=Account.restoreAccountWithId(mMockContext account1Id); ProviderTestUtils.assertAccountEqual(""test"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testAccountSaveHostAuth,"@SmallTest public void  (){ Account account1=ProviderTestUtils.setupAccount(""account-hostauth"" false mMockContext); account1.mHostAuthRecv=ProviderTestUtils.setupHostAuth(""account-hostauth-recv"" -1 false mMockContext); account1.mHostAuthSend=ProviderTestU"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testBodyDatabaseCorruptionRecovery,"public void  (){ final ContentResolver resolver=mMockContext.getContentResolver(); final Context context=mMockContext; Account acct=ProviderTestUtils.setupAccount(""acct1"" true context); Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" acct.mId true context); ProviderTestUtils.setupMessage(""message1"" acct.mId box1.mId true true context); ProviderTestUtils.setupMessage(""message2"" acct.mId box1.mId true true context); ProviderTestUtils.setupMessage(""message3"" acct.mId box1.mId true true context); ProviderTestUtils.setupMessage(""message4"" acct.mId box1.mId true true context); int count=EmailContent.count(mMockContext Message.CONTENT_URI null null); assertEquals(4 count); count=EmailContent.count(mMockContext Body.CONTENT_URI null null); assertEquals(4 count); File dbFile=mMockContext.getDatabasePath(EmailProvider.BODY_DATABASE_NAME); assertTrue(dbFile != null); assertTrue(dbFile.exists()); assertTrue(dbFile.delete()); assertFalse(dbFile.exists()); dbFile=mMockContext.getDatabasePath(EmailProvider.DATABASE_NAME); assertTrue(dbFile != null); assertTrue(dbFile.exists()); resolver.update(EmailProvider.INTEGRITY_CHECK_URI null null null); count=EmailContent.count(mMockContext Message.CONTENT_URI null null); assertEquals(0 count); count=EmailContent.count(mMockContext Body.CONTENT_URI null null); assertEquals(0 count); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testBodyRetrieve,"public void  (){ Message message1=ProviderTestUtils.setupMessage(""bodyretrieve"" 1 1 true true mMockContext); long messageId=message1.mId; assertEquals(message1.mText Body.restoreBodyTextWithMessageId(mMockContext messageId)); assertEquals(message1.mHtml Body.restoreBodyHtmlWithMessageId(mMockContext messageId)); assertEquals(message1.mSourceKey Body.restoreBodySourceKey(mMockContext messageId)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testCascadeDeleteAccount,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""account-delete-cascade"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); ProviderTestUtils.setupMessage(""message2"" account1Id box1Id false true mMockContext); int numAccounts=EmailContent.count(mMockContext Account.CONTENT_URI null null); assertEquals(1 numAccounts); int numBoxes=EmailContent.count(mMockContext Mailbox.CONTENT_URI null null); assertEquals(1 numBoxes); int numMessages=EmailContent.count(mMockContext Message.CONTENT_URI null null); assertEquals(2 numMessages); Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI account1Id); mMockContext.getContentResolver().delete(uri null null); numAccounts=EmailContent.count(mMockContext Account.CONTENT_URI null null); assertEquals(0 numAccounts); numBoxes=EmailContent.count(mMockContext Mailbox.CONTENT_URI null null); assertEquals(0 numBoxes); numMessages=EmailContent.count(mMockContext Message.CONTENT_URI null null); assertEquals(0 numMessages); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testCascadeDeleteMailbox,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""mailbox-delete-cascade"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); Message message2=ProviderTestUtils.setupMessage(""message2"" account1Id box1Id false true mMockContext); Message message3=ProviderTestUtils.setupMessage(""message3"" account1Id box1Id false true mMockContext); Message message4=ProviderTestUtils.setupMessage(""message4"" account1Id box1Id false true mMockContext); ProviderTestUtils.setupMessage(""message5"" account1Id box1Id false true mMockContext); ProviderTestUtils.setupMessage(""message6"" account1Id box1Id false true mMockContext); String selection=EmailContent.MessageColumns.ACCOUNT_KEY + ""=? AND "" + EmailContent.MessageColumns.MAILBOX_KEY+ ""=?""; String[] selArgs=new String[]{String.valueOf(account1Id) String.valueOf(box1Id)}; int numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(6 numMessages); ContentValues cv=new ContentValues(); cv.put(MessageColumns.SERVER_ID ""SERVER_ID""); ContentResolver resolver=mMockContext.getContentResolver(); resolver.update(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI message1.mId) cv null null); resolver.update(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI message2.mId) cv null null); resolver.delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI message3.mId) null null); resolver.delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI message4.mId) null null); numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(4 numMessages); numMessages=EmailContent.count(mMockContext Message.DELETED_CONTENT_URI selection selArgs); assertEquals(2 numMessages); numMessages=EmailContent.count(mMockContext Message.UPDATED_CONTENT_URI selection selArgs); assertEquals(2 numMessages); Uri uri=ContentUris.withAppendedId(Mailbox.CONTENT_URI box1Id); resolver.delete(uri null null); numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(0 numMessages); numMessages=EmailContent.count(mMockContext Message.DELETED_CONTENT_URI selection selArgs); assertEquals(0 numMessages); numMessages=EmailContent.count(mMockContext Message.UPDATED_CONTENT_URI selection selArgs); assertEquals(0 numMessages); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testCascadeMessageDelete,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""message-cascade"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id true false mMockContext); ArrayList<Attachment> atts=new ArrayList<Attachment>(); for (int i=0; i < 2; i++) { atts.add(ProviderTestUtils.setupAttachment(-1 expectedAttachmentNames[i] expectedAttachmentSizes[i] false mMockContext)); } message1.mAttachments=atts; message1.save(mMockContext); long message1Id=message1.mId; Message message2=ProviderTestUtils.setupMessage(""message2"" account1Id box1Id true false mMockContext); atts=new ArrayList<Attachment>(); for (int i=0; i < 2; i++) { atts.add(ProviderTestUtils.setupAttachment(-1 expectedAttachmentNames[i] expectedAttachmentSizes[i] false mMockContext)); } message2.mAttachments=atts; message2.save(mMockContext); long message2Id=message2.mId; String bodySelection=BodyColumns.MESSAGE_KEY + "" IN (? ?)""; String attachmentSelection=AttachmentColumns.MESSAGE_KEY + "" IN (? ?)""; String[] selArgs=new String[]{String.valueOf(message1Id) String.valueOf(message2Id)}; int numBodies=EmailContent.count(mMockContext Body.CONTENT_URI bodySelection selArgs); assertEquals(2 numBodies); int numAttachments=EmailContent.count(mMockContext Attachment.CONTENT_URI attachmentSelection selArgs); assertEquals(4 numAttachments); Uri uri=ContentUris.withAppendedId(Message.CONTENT_URI message1Id); mMockContext.getContentResolver().delete(uri null null); numBodies=EmailContent.count(mMockContext Body.CONTENT_URI bodySelection selArgs); assertEquals(1 numBodies); numAttachments=EmailContent.count(mMockContext Attachment.CONTENT_URI attachmentSelection selArgs); assertEquals(2 numAttachments); uri=ContentUris.withAppendedId(Message.CONTENT_URI message2Id); mMockContext.getContentResolver().delete(uri null null); numBodies=EmailContent.count(mMockContext Body.CONTENT_URI bodySelection selArgs); assertEquals(0 numBodies); numAttachments=EmailContent.count(mMockContext Attachment.CONTENT_URI attachmentSelection selArgs); assertEquals(0 numAttachments); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testCleanupOrphans,"public void  (){ EmailProvider ep=getProvider(); SQLiteDatabase db=ep.getDatabase(mMockContext); Account a=ProviderTestUtils.setupAccount(""account1"" true mMockContext); Mailbox a1=createTypeMailbox(mMockContext -1 Mailbox.TYPE_INBOX); Mailbox a2=createTypeMailbox(mMockContext a.mId Mailbox.TYPE_MAIL); Mailbox a3=createTypeMailbox(mMockContext -1 Mailbox.TYPE_DRAFTS); Mailbox a4=createTypeMailbox(mMockContext a.mId Mailbox.TYPE_SENT); Mailbox a5=createTypeMailbox(mMockContext a.mId Mailbox.TYPE_TRASH); Mailbox ax=new Mailbox(); ax.mId=69105; Message m1=createMessage(mMockContext a1 true false Message.FLAG_LOADED_COMPLETE); Message m2=createMessage(mMockContext a2 true false Message.FLAG_LOADED_COMPLETE); Message m3=createMessage(mMockContext a3 true false Message.FLAG_LOADED_COMPLETE); Message m4=createMessage(mMockContext a4 true false Message.FLAG_LOADED_COMPLETE); Message m5=createMessage(mMockContext a5 true false Message.FLAG_LOADED_COMPLETE); Message mx=createMessage(mMockContext ax true false Message.FLAG_LOADED_COMPLETE); Policy p1=new Policy(); p1.save(mMockContext); Policy p2=new Policy(); p2.save(mMockContext); ContentCache.invalidateAllCaches(); EmailProvider.deleteUnlinked(db Mailbox.TABLE_NAME MailboxColumns.ACCOUNT_KEY AccountColumns._ID Account.TABLE_NAME); EmailProvider.deleteUnlinked(db Message.TABLE_NAME MessageColumns.ACCOUNT_KEY AccountColumns._ID Account.TABLE_NAME); EmailProvider.deleteUnlinked(db Policy.TABLE_NAME PolicyColumns._ID AccountColumns.POLICY_KEY Account.TABLE_NAME); assertNull(Mailbox.restoreMailboxWithId(mMockContext a1.mId)); assertNotNull(Mailbox.restoreMailboxWithId(mMockContext a2.mId)); assertNull(Mailbox.restoreMailboxWithId(mMockContext a3.mId)); assertNotNull(Mailbox.restoreMailboxWithId(mMockContext a4.mId)); assertNotNull(Mailbox.restoreMailboxWithId(mMockContext a5.mId)); assertNull(Mailbox.restoreMailboxWithId(mMockContext ax.mId)); assertNull(Message.restoreMessageWithId(mMockContext m1.mId)); assertNotNull(Message.restoreMessageWithId(mMockContext m2.mId)); assertNull(Message.restoreMessageWithId(mMockContext m3.mId)); assertNotNull(Message.restoreMessageWithId(mMockContext m4.mId)); assertNotNull(Message.restoreMessageWithId(mMockContext m5.mId)); assertNull(Message.restoreMessageWithId(mMockContext mx.mId)); assertNull(Policy.restorePolicyWithId(mMockContext p1.mId)); assertNull(Policy.restorePolicyWithId(mMockContext p2.mId)); a=Account.restoreAccountWithId(mMockContext a.mId); assertNotNull(Policy.restorePolicyWithId(mMockContext a.mPolicyKey)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testClearAccountHoldFlags,"public void  (){ Account a1=ProviderTestUtils.setupAccount(""holdflag-1"" false mMockContext); a1.mFlags=Account.FLAGS_SUPPORTS_SEARCH; a1.mPolicy=new Policy(); a1.save(mMockContext); Account a2=ProviderTestUtils.setupAccount(""holdflag-2"" false mMockContext); a2.mFlags=Account.FLAGS_SUPPORTS_SMART_FORWARD | Account.FLAGS_SECURITY_HOLD; a2.mPolicy=new Policy(); a2.save(mMockContext); Account.clearSecurityHoldOnAllAccounts(mMockContext); Account a1a=Account.restoreAccountWithId(mMockContext a1.mId); assertEquals(Account.FLAGS_SUPPORTS_SEARCH a1a.mFlags); Account a2a=Account.restoreAccountWithId(mMockContext a2.mId); assertEquals(Account.FLAGS_SUPPORTS_SMART_FORWARD a2a.mFlags); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testCreateIndex,"public void  (){ String oldStr=""create index message_"" + MessageColumns.TIMESTAMP + "" on ""+ Message.TABLE_NAME+ "" (""+ MessageColumns.TIMESTAMP+ "");""; String newStr=DBHelper.createIndex(Message.TABLE_NAME MessageColumns.TIMESTAMP); assertEquals(newStr oldStr); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testCreateUniqueFile,"public void  () throws IOException { if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) { return; } try { String fileName=""A11achm3n1.doc""; File uniqueFile=Attachment.createUniqueFile(fileName); assertEquals(fileName uniqueFile.getName()); if (uniqueFile.createNewFile()) { uniqueFile=Attachment.createUniqueFile(fileName); assertEquals(""A11achm3n1-2.doc"" uniqueFile.getName()); if (uniqueFile.createNewFile()) { uniqueFile=Attachment.createUniqueFile(fileName); assertEquals(""A11achm3n1-3.doc"" uniqueFile.getName()); } } fileName=""A11achm3n1""; uniqueFile=Attachment.createUniqueFile(fileName); assertEquals(fileName uniqueFile.getName()); if (uniqueFile.createNewFile()) { uniqueFile=Attachment.createUniqueFile(fileName); assertEquals(""A11achm3n1-2"" uniqueFile.getName()); } } finally { File directory=Environment.getExternalStorageDirectory(); String[] fileNames=new String[]{""A11achm3n1.doc"" ""A11achm3n1-2.doc"" ""A11achm3n1""}; int length=fileNames.length; for (int i=0; i < length; i++) { File file=new File(directory fileNames[i]); if (file.exists()) { file.delete(); } } } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testDatabaseCorruptionRecovery,"public void  (){ final ContentResolver resolver=mMockContext.getContentResolver(); final Context context=mMockContext; Account acct=ProviderTestUtils.setupAccount(""acct1"" true context); Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" acct.mId true context); ProviderTestUtils.setupMessage(""message1"" acct.mId box1.mId true true context); ProviderTestUtils.setupMessage(""message2"" acct.mId box1.mId true true context); ProviderTestUtils.setupMessage(""message3"" acct.mId box1.mId true true context); ProviderTestUtils.setupMessage(""message4"" acct.mId box1.mId true true context); int count=EmailContent.count(mMockContext Message.CONTENT_URI null null); assertEquals(4 count); count=EmailContent.count(mMockContext Body.CONTENT_URI null null); assertEquals(4 count); File dbFile=mMockContext.getDatabasePath(EmailProvider.DATABASE_NAME); assertTrue(dbFile != null); assertTrue(dbFile.exists()); assertTrue(dbFile.delete()); assertFalse(dbFile.exists()); dbFile=mMockContext.getDatabasePath(EmailProvider.BODY_DATABASE_NAME); assertTrue(dbFile != null); assertTrue(dbFile.exists()); resolver.update(EmailProvider.INTEGRITY_CHECK_URI null null null); count=EmailContent.count(mMockContext Body.CONTENT_URI null null); assertEquals(0 count); count=EmailContent.count(mMockContext Message.CONTENT_URI null null); assertEquals(0 count); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testDeleteAttachmentByMessageIdUri,"public void  (){ ContentResolver mockResolver=mMockContext.getContentResolver(); ProviderTestUtils.setupAttachment(1 ""a1"" 100 true mMockContext); ProviderTestUtils.setupAttachment(1 ""a2"" 200 true mMockContext); Attachment a3=ProviderTestUtils.setupAttachment(2 ""a3"" 300 true mMockContext); Attachment a4=ProviderTestUtils.setupAttachment(2 ""a4"" 400 true mMockContext); Uri uri=ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI 1); mockResolver.delete(uri null null); Cursor c=mockResolver.query(Attachment.CONTENT_URI Attachment.CONTENT_PROJECTION null null AttachmentColumns.SIZE); assertEquals(2 c.getCount()); try { c.moveToFirst(); Attachment a3Get=EmailContent.getContent(mMockContext c Attachment.class); ProviderTestUtils.assertAttachmentEqual(""getAttachByUri-3"" a3 a3Get); c.moveToNext(); Attachment a4Get=EmailContent.getContent(mMockContext c Attachment.class); ProviderTestUtils.assertAttachmentEqual(""getAttachByUri-4"" a4 a4Get); } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testDeleteBody,"public void  (){ final ContentResolver resolver=mMockContext.getContentResolver(); Account account1=ProviderTestUtils.setupAccount(""orphaned body"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); long message1Id=message1.mId; Message message2=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id true true mMockContext); long message2Id=message2.mId; assertNotNull(loadBodyForMessageId(message2Id)); resolver.delete(ContentUris.withAppendedId(Message.CONTENT_URI message1Id) null null); assertNotNull(loadBodyForMessageId(message2Id)); resolver.delete(ContentUris.withAppendedId(Message.CONTENT_URI message2Id) null null); assertNull(loadBodyForMessageId(message2Id)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testDeleteOrphanBodies,"public void  (){ final ContentResolver resolver=mMockContext.getContentResolver(); Account account1=ProviderTestUtils.setupAccount(""orphaned body"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Mailbox box2=ProviderTestUtils.setupMailbox(""box2"" account1Id true mMockContext); long box2Id=box2.mId; Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); long message1Id=message1.mId; Message message2=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id true true mMockContext); long message2Id=message2.mId; assertNotNull(loadBodyForMessageId(message2Id)); resolver.delete(ContentUris.withAppendedId(Message.CONTENT_URI message1Id) null null); resolver.delete(ContentUris.withAppendedId(Mailbox.CONTENT_URI box2Id) null null); assertNotNull(loadBodyForMessageId(message2Id)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testDeleteOrphanMessages,"public void  (){ final ContentResolver resolver=mMockContext.getContentResolver(); final Context context=mMockContext; Account acct=ProviderTestUtils.setupAccount(""orphaned body"" true context); Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" acct.mId true context); Mailbox box2=ProviderTestUtils.setupMailbox(""box2"" acct.mId true context); Message msg1_1=ProviderTestUtils.setupMessage(""message1"" acct.mId box1.mId false true context); Message msg1_2=ProviderTestUtils.setupMessage(""message2"" acct.mId box1.mId false true context); Message msg1_3=ProviderTestUtils.setupMessage(""message3"" acct.mId box1.mId false true context); Message msg1_4=ProviderTestUtils.setupMessage(""message4"" acct.mId box1.mId false true context); Message msg2_1=ProviderTestUtils.setupMessage(""message1"" acct.mId box2.mId false true context); Message msg2_2=ProviderTestUtils.setupMessage(""message2"" acct.mId box2.mId false true context); Message msg2_3=ProviderTestUtils.setupMessage(""message3"" acct.mId box2.mId false true context); Message msg2_4=ProviderTestUtils.setupMessage(""message4"" acct.mId box2.mId false true context); resolver.delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg1_1.mId) null null); resolver.delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg1_2.mId) null null); resolver.delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg2_1.mId) null null); resolver.delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg2_2.mId) null null); assertEquals(4 EmailContent.count(context Message.DELETED_CONTENT_URI null null)); ContentValues v=new ContentValues(); v.put(MessageColumns.DISPLAY_NAME ""--updated--""); resolver.update(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg1_3.mId) v null null); resolver.update(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg1_4.mId) v null null); resolver.update(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg2_3.mId) v null null); resolver.update(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI msg2_4.mId) v null null); assertEquals(4 EmailContent.count(context Message.UPDATED_CONTENT_URI null null)); long delBoxId=10; Message msgX_A=ProviderTestUtils.setupMessage(""messageA"" acct.mId delBoxId false false context); Message msgX_B=ProviderTestUtils.setupMessage(""messageB"" acct.mId delBoxId false false context); Message msgX_C=ProviderTestUtils.setupMessage(""messageC"" acct.mId delBoxId false false context); Message msgX_D=ProviderTestUtils.setupMessage(""messageD"" acct.mId delBoxId false false context); ContentValues cv; long msgId=10; try { cv=msgX_A.toContentValues(); cv.put(EmailContent.RECORD_ID msgId++); resolver.insert(Message.DELETED_CONTENT_URI cv); } catch ( IllegalArgumentException e) { } try { cv=msgX_B.toContentValues(); cv.put(EmailContent.RECORD_ID msgId++); resolver.insert(Message.DELETED_CONTENT_URI cv); } catch ( IllegalArgumentException e) { } try { cv=msgX_C.toContentValues(); cv.put(EmailContent.RECORD_ID msgId++); resolver.insert(Message.UPDATED_CONTENT_URI cv); } catch ( IllegalArgumentException e) { } try { cv=msgX_D.toContentValues(); cv.put(EmailContent.RECORD_ID msgId++); resolver.insert(Message.UPDATED_CONTENT_URI cv); } catch ( IllegalArgumentException e) { } assertEquals(6 EmailContent.count(context Message.UPDATED_CONTENT_URI null null)); assertEquals(6 EmailContent.count(context Message.DELETED_CONTENT_URI null null)); EmailProvider.deleteMessageOrphans(getProvider().getDatabase(context) Message.DELETED_TABLE_NAME); EmailProvider.deleteMessageOrphans(getProvider().getDatabase(context) Message.UPDATED_TABLE_NAME); assertEquals(4 EmailContent.count(context Message.UPDATED_CONTENT_URI null null)); assertEquals(4 EmailContent.count(context Message.DELETED_CONTENT_URI null null)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testGetAccountForMessageId,"public void  (){ final Context c=mMockContext; Account a=ProviderTestUtils.setupAccount(""acct"" true c); Message m1=ProviderTestUtils.setupMessage(""1"" a.mId 1 true true c false false); Message m2=ProviderTestUtils.setupMessage(""1"" a.mId 2 true true c false false); ProviderTestUtils.assertAccountEqual(""x"" a Account.getAccountForMessageId(c m1.mId)); ProviderTestUtils.assertAccountEqual(""x"" a Account.getAccountForMessageId(c m2.mId)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testGetAccountGetInboxIdTest,"public void  (){ final Context c=mMockContext; Account a2=ProviderTestUtils.setupAccount(""acct2"" true c); Mailbox b2i=ProviderTestUtils.setupMailbox(""b2b"" a2.mId true c Mailbox.TYPE_INBOX); assertEquals(b2i.mId Account.getInboxId(c a2.mId)); assertEquals(-1 Account.getInboxId(c 999999)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,EmailBroadcastProcessorServiceTests,public  (){ super(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testGetAccountIdForMessageId,"public void  (){ final Context c=mMockContext; Account a1=ProviderTestUtils.setupAccount(""acct1"" true c); Account a2=ProviderTestUtils.setupAccount(""acct2"" true c); Mailbox b1=ProviderTestUtils.setupMailbox(""box1"" a1.mId true c Mailbox.TYPE_MAIL); Mailbox b2=ProviderTestUtils.setupMailbox(""box2"" a2.mId true c Mailbox.TYPE_MAIL); Message m1=createMessage(c b1 false false); Message m2=createMessage(c b2 false false); assertEquals(a1.mId Account.getAccountIdForMessageId(c m1.mId)); assertEquals(a2.mId Account.getAccountIdForMessageId(c m2.mId)); assertEquals(-1 Account.getAccountIdForMessageId(c 12345)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,getAccountFlags,"private int  (long accountId) throws NoSuchElementException { Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI accountId); Integer flags=Utility.getFirstRowInt(mMockContext uri new String[]{AccountColumns.FLAGS} null null null 0); if (flags == null) { throw new NoSuchElementException(""No cursor""); } return flags; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=getMockContext(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,setupSimpleHostAuth,"private HostAuth  (String protocol){ HostAuth hostAuth=ProviderTestUtils.setupHostAuth(protocol ""name"" false mContext); hostAuth.mProtocol=protocol; return hostAuth; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,tearDown,@Override public void  () throws Exception { super.tearDown(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testGetAttachmentByMessageIdUri,"public void  (){ Attachment a1=ProviderTestUtils.setupAttachment(1 ""a1"" 100 true mMockContext); Attachment a2=ProviderTestUtils.setupAttachment(1 ""a2"" 200 true mMockContext); ProviderTestUtils.setupAttachment(2 ""a3"" 300 true mMockContext); ProviderTestUtils.setupAttachment(2 ""a4"" 400 true mMockContext); Uri uri=ContentUris.withAppendedId(Attachment.MESSAGE_ID_URI 1); Cursor c=mMockContext.getContentResolver().query(uri Attachment.CONTENT_PROJECTION null null AttachmentColumns.SIZE); assertEquals(2 c.getCount()); try { c.moveToFirst(); Attachment a1Get=EmailContent.getContent(mMockContext c Attachment.class); ProviderTestUtils.assertAttachmentEqual(""getAttachByUri-1"" a1 a1Get); c.moveToNext(); Attachment a2Get=EmailContent.getContent(mMockContext c Attachment.class); ProviderTestUtils.assertAttachmentEqual(""getAttachByUri-2"" a2 a2Get); } finally { c.close(); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testGetDefaultAccountNoneExplicitlySet,"@SmallTest public void  (){ Account account1=ProviderTestUtils.setupAccount(""account-default-1"" false mMockContext); account1.save(mMockContext); long defaultAccountId=Account.getDefaultAccountId(mMockContext Account.NO_ACCOUNT); assertEquals(defaultAccou"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\EmailBroadcastProcessorServiceTests.java,testSetImapDeletePolicy,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""eas-account1"" false mMockContext); account1.mHostAuthRecv=setupSimpleHostAuth(""eas""); account1.mHostAuthSend=account1.mHostAuthRecv; account1.save(mMockContext); long accountId1=account1.mId; Account account2=ProviderTestUtils.setupAccount(""pop-account1"" false mMockContext); account2.mHostAuthRecv=setupSimpleHostAuth(""pop3""); account2.mHostAuthSend=setupSimpleHostAuth(""smtp""); account2.mFlags=0x08; account2.save(mMockContext); long accountId2=account2.mId; Account account3=ProviderTestUtils.setupAccount(""pop-account2"" false mMockContext); account3.mHostAuthRecv=setupSimpleHostAuth(""pop3""); account3.mHostAuthSend=setupSimpleHostAuth(""smtp""); account3.save(mMockContext); long accountId3=account3.mId; Account account4=ProviderTestUtils.setupAccount(""imap-account1"" false mMockContext); account4.mHostAuthRecv=setupSimpleHostAuth(""imap""); account4.mHostAuthSend=setupSimpleHostAuth(""smtp""); account4.mFlags=0xa5a5a5a5; account4.save(mMockContext); long accountId4=account4.mId; Account account5=ProviderTestUtils.setupAccount(""imap-account2"" false mMockContext); account5.mHostAuthRecv=setupSimpleHostAuth(""imap""); account5.mHostAuthSend=setupSimpleHostAuth(""smtp""); account5.mFlags=0x0c; account5.save(mMockContext); long accountId5=account5.mId; Account account6=ProviderTestUtils.setupAccount(""imap-account3"" false mMockContext); account6.mHostAuthRecv=setupSimpleHostAuth(""imap""); account6.mHostAuthSend=setupSimpleHostAuth(""smtp""); account6.mFlags=0; account6.save(mMockContext); long accountId6=account6.mId; EmailBroadcastProcessorService.setImapDeletePolicy(mMockContext); int accountFlags1=getAccountFlags(accountId1); assertEquals(4 accountFlags1); int accountFlags2=getAccountFlags(accountId2); assertEquals(8 accountFlags2); int accountFlags3=getAccountFlags(accountId3); assertEquals(4 accountFlags3); int accountFlags4=getAccountFlags(accountId4); assertEquals(0xa5a5a5a9 accountFlags4); int accountFlags5=getAccountFlags(accountId5); assertEquals(0x00000008 accountFlags5); int accountFlags6=getAccountFlags(accountId6); assertEquals(0x00000008 accountFlags6); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testGetDefaultAccountWithLastUsedAccount,"public void  (){ long lastUsedAccountId=Account.NO_ACCOUNT; long defaultAccountId=Account.getDefaultAccountId(mMockContext lastUsedAccountId); assertEquals(Account.NO_ACCOUNT defaultAccountId); Account account1=ProviderTestUtils.setupAccount(""account-default-1"" false mMockContext); account1.save(mMockContext); long account1Id=account1.mId; Account account2=ProviderTestUtils.setupAccount(""account-default-2"" false mMockContext); account2.save(mMockContext); long account2Id=account2.mId; Account account3=ProviderTestUtils.setupAccount(""account-default-3"" false mMockContext); account3.save(mMockContext); long account3Id=account3.mId; defaultAccountId=Account.getDefaultAccountId(mMockContext lastUsedAccountId); assertTrue(defaultAccountId == account1Id); lastUsedAccountId=defaultAccountId; defaultAccountId=Account.getDefaultAccountId(mMockContext lastUsedAccountId); assertEquals(account1Id defaultAccountId); lastUsedAccountId=account2Id; defaultAccountId=Account.getDefaultAccountId(mMockContext lastUsedAccountId); assertEquals(account2Id defaultAccountId); lastUsedAccountId=account3Id; defaultAccountId=Account.getDefaultAccountId(mMockContext lastUsedAccountId); assertEquals(account3Id defaultAccountId); Uri uri=ContentUris.withAppendedId(Account.CONTENT_URI account1Id); mMockContext.getContentResolver().delete(uri null null); defaultAccountId=Account.getDefaultAccountId(mMockContext lastUsedAccountId); assertEquals(account3Id defaultAccountId); uri=ContentUris.withAppendedId(Account.CONTENT_URI account3Id); mMockContext.getContentResolver().delete(uri null null); defaultAccountId=Account.getDefaultAccountId(mMockContext lastUsedAccountId); assertEquals(account2Id defaultAccountId); lastUsedAccountId=defaultAccountId; uri=ContentUris.withAppendedId(Account.CONTENT_URI account2Id); mMockContext.getContentResolver().delete(uri null null); defaultAccountId=Account.getDefaultAccountId(mMockContext lastUsedAccountId); assertEquals(Account.NO_ACCOUNT defaultAccountId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testGetKeyColumnLong,"public void  (){ final Context c=mMockContext; Account a=ProviderTestUtils.setupAccount(""acct"" true c); Mailbox b1=ProviderTestUtils.setupMailbox(""box1"" a.mId true c Mailbox.TYPE_MAIL); Mailbox b2=ProviderTestUtils.setupMailbox(""box2"" a.mId true c Mailbox.TYPE_MAIL); Message m1=createMessage(c b1 false false); Message m2=createMessage(c b2 false false); assertEquals(a.mId Message.getKeyColumnLong(c m1.mId MessageColumns.ACCOUNT_KEY)); assertEquals(a.mId Message.getKeyColumnLong(c m2.mId MessageColumns.ACCOUNT_KEY)); assertEquals(b1.mId Message.getKeyColumnLong(c m1.mId MessageColumns.MAILBOX_KEY)); assertEquals(b2.mId Message.getKeyColumnLong(c m2.mId MessageColumns.MAILBOX_KEY)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testGetProtocol,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""account-hostauth"" false mMockContext); account1.mHostAuthRecv=ProviderTestUtils.setupHostAuth(""eas"" ""account-hostauth-recv"" false mMockContext); account1.mHostAuthSend=ProviderTestUtils.setupHostAuth(""foo"" ""account-hostauth-send"" false mMockContext); account1.save(mMockContext); assertEquals(""eas"" Account.getProtocol(mMockContext account1.mId)); assertEquals(""eas"" account1.getProtocol(mMockContext)); Account account2=ProviderTestUtils.setupAccount(""account-nohostauth"" false mMockContext); account2.save(mMockContext); assertNull(Account.getProtocol(mMockContext account2.mId)); assertNull(account2.getProtocol(mMockContext)); assertNull(Account.getProtocol(mMockContext 0)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testIllegalUri,"public void  (){ final ContentResolver cr=mMockContext.getContentResolver(); ContentValues cv=new ContentValues(); Uri uri=Uri.parse(""content://"" + EmailContent.AUTHORITY + ""/fooble""); try { cr.insert(uri cv); fail(""Insert should have thrown exception""); } catch ( IllegalArgumentException e) { } try { cr.update(uri cv null null); fail(""Update should have thrown exception""); } catch ( IllegalArgumentException e) { } try { cr.delete(uri null null); fail(""Delete should have thrown exception""); } catch ( IllegalArgumentException e) { } try { cr.query(uri EmailContent.ID_PROJECTION null null null); fail(""Query should have thrown exception""); } catch ( IllegalArgumentException e) { } uri=Uri.parse(""content://"" + EmailContent.AUTHORITY + ""/mailbox/fred""); try { cr.query(uri EmailContent.ID_PROJECTION null null null); fail(""Query should have thrown exception""); } catch ( IllegalArgumentException e) { } uri=Uri.parse(""content://"" + EmailContent.AUTHORITY + ""/mailbox/-1""); Cursor c=cr.query(uri EmailContent.ID_PROJECTION null null null); assertNotNull(c); assertEquals(0 c.getCount()); c.close(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testLookupBodyIdWithMessageId,"public void  (){ final ContentResolver resolver=mMockContext.getContentResolver(); Account account1=ProviderTestUtils.setupAccount(""orphaned body"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); long message1Id=message1.mId; long bodyId1=Body.lookupBodyIdWithMessageId(mMockContext message1Id); assertEquals(bodyId1 -1); Message message2=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id true true mMockContext); long message2Id=message2.mId; long bodyId2=Body.lookupBodyIdWithMessageId(mMockContext message2Id); Body body=loadBodyForMessageId(message2Id); assertNotNull(body); assertEquals(body.mId bodyId2); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testMessageDelete,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""message-delete"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); long message1Id=message1.mId; Message message2=ProviderTestUtils.setupMessage(""message2"" account1Id box1Id false true mMockContext); long message2Id=message2.mId; String selection=EmailContent.MessageColumns.ACCOUNT_KEY + ""=? AND "" + EmailContent.MessageColumns.MAILBOX_KEY+ ""=?""; String[] selArgs=new String[]{String.valueOf(account1Id) String.valueOf(box1Id)}; int numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(2 numMessages); Uri uri=ContentUris.withAppendedId(Message.CONTENT_URI message1Id); mMockContext.getContentResolver().delete(uri null null); numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(1 numMessages); uri=ContentUris.withAppendedId(Message.CONTENT_URI message2Id); mMockContext.getContentResolver().delete(uri null null); numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(0 numMessages); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testMessageQueryWithLimit,"public void  (){ final Context context=mMockContext; Account acct=ProviderTestUtils.setupAccount(""orphaned body"" true context); Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" acct.mId true context); Mailbox box2=ProviderTestUtils.setupMailbox(""box2"" acct.mId true context); ProviderTestUtils.setupMessage(""message1"" acct.mId box1.mId false true context); ProviderTestUtils.setupMessage(""message2"" acct.mId box1.mId false true context); ProviderTestUtils.setupMessage(""message3"" acct.mId box1.mId false true context); ProviderTestUtils.setupMessage(""message4"" acct.mId box1.mId false true context); ProviderTestUtils.setupMessage(""message1"" acct.mId box2.mId false true context); ProviderTestUtils.setupMessage(""message2"" acct.mId box2.mId false true context); ProviderTestUtils.setupMessage(""message3"" acct.mId box2.mId false true context); ProviderTestUtils.setupMessage(""message4"" acct.mId box2.mId false true context); assertEquals(8 count(mMockContext Message.CONTENT_URI null null)); assertEquals(1 count(mMockContext EmailContent.uriWithLimit(Message.CONTENT_URI 1) null null)); assertEquals(3 count(mMockContext EmailContent.uriWithLimit(Message.CONTENT_URI 3) null null)); assertEquals(8 count(mMockContext EmailContent.uriWithLimit(Message.CONTENT_URI 100) null null)); String[] args=new String[]{Long.toString(box1.mId)}; assertEquals(4 count(mMockContext Message.CONTENT_URI MessageColumns.MAILBOX_KEY + ""=?"" args)); assertEquals(1 count(mMockContext EmailContent.uriWithLimit(Message.CONTENT_URI 1) MessageColumns.MAILBOX_KEY + ""=?"" args)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testMessageSave,"@MediumTest public void  (){ Account account1=ProviderTestUtils.setupAccount(""message-save"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message m"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testMessageSaveAddsSnippet,"public void  (){ Account account=ProviderTestUtils.setupAccount(""message-snippet"" true mMockContext); Mailbox box=ProviderTestUtils.setupMailbox(""box1"" account.mId true mMockContext); Message message=ProviderTestUtils.setupMessage(""message"" account.mId box.mId false false mMockContext); message.mText=""This is some text""; message.mHtml=""<html>This is some text</html>""; message.save(mMockContext); Message restoredMessage=Message.restoreMessageWithId(mMockContext message.mId); assertEquals(restoredMessage.mSnippet TextUtilities.makeSnippetFromPlainText(message.mText)); message=ProviderTestUtils.setupMessage(""message"" account.mId box.mId false false mMockContext); message.mText=null; message.mHtml=""<html>This is some text</html>""; message.save(mMockContext); restoredMessage=Message.restoreMessageWithId(mMockContext message.mId); assertEquals(restoredMessage.mSnippet TextUtilities.makeSnippetFromHtmlText(message.mHtml)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testMessageSaveWithJustAttachments,"@MediumTest public void  (){ Account account1=ProviderTestUtils.setupAccount(""message-save"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Cursor c="
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testMessageUpdate,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""message-update"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); long message1Id=message1.mId; Message message2=ProviderTestUtils.setupMessage(""message2"" account1Id box1Id false true mMockContext); long message2Id=message2.mId; ContentResolver cr=mMockContext.getContentResolver(); String selection=EmailContent.MessageColumns.ACCOUNT_KEY + ""=? AND "" + EmailContent.MessageColumns.MAILBOX_KEY+ ""=?""; String[] selArgs=new String[]{String.valueOf(account1Id) String.valueOf(box1Id)}; int numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(2 numMessages); Uri uri=ContentUris.withAppendedId(Message.CONTENT_URI message1Id); ContentValues cv=new ContentValues(); cv.put(MessageColumns.FROM_LIST ""from-list""); cr.update(uri cv null null); numMessages=EmailContent.count(mMockContext Message.UPDATED_CONTENT_URI selection selArgs); assertEquals(0 numMessages); Message restoredMessage=Message.restoreMessageWithId(mMockContext message1Id); assertEquals(""from-list"" restoredMessage.mFrom); uri=ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI message2Id); cv=new ContentValues(); cv.put(MessageColumns.FROM_LIST ""from-list""); cr.update(uri cv null null); numMessages=EmailContent.count(mMockContext Message.UPDATED_CONTENT_URI selection selArgs); assertEquals(1 numMessages); restoredMessage=Message.restoreMessageWithId(mMockContext message2Id); assertEquals(""from-list"" restoredMessage.mFrom); Cursor c=cr.query(Message.UPDATED_CONTENT_URI Message.CONTENT_PROJECTION null null null); try { assertTrue(c.moveToFirst()); Message originalMessage=EmailContent.getContent(mMockContext c Message.class); assertEquals(""from message2"" originalMessage.mFrom); assertFalse(c.moveToNext()); } finally { c.close(); } cr.delete(ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI message2Id) null null); numMessages=EmailContent.count(mMockContext Message.UPDATED_CONTENT_URI selection selArgs); assertEquals(0 numMessages); numMessages=EmailContent.count(mMockContext Message.DELETED_CONTENT_URI selection selArgs); assertEquals(1 numMessages); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testMessageWithAttachment,"@MediumTest public void  (){ Account account1=ProviderTestUtils.setupAccount(""message-save"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message m"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testRecalculateMessageCounts,"public void  (){ final Context c=mMockContext; Account a1=ProviderTestUtils.setupAccount(""holdflag-1"" true c); Account a2=ProviderTestUtils.setupAccount(""holdflag-2"" true c); Mailbox b1=ProviderTestUtils.setupMailbox(""box1"" a1.mId true c Mailbox.TYPE_INBOX); Mailbox b2=ProviderTestUtils.setupMailbox(""box2"" a1.mId true c Mailbox.TYPE_OUTBOX); Mailbox b3=ProviderTestUtils.setupMailbox(""box3"" a2.mId true c Mailbox.TYPE_INBOX); Mailbox b4=ProviderTestUtils.setupMailbox(""box4"" a2.mId true c Mailbox.TYPE_OUTBOX); Mailbox bt=ProviderTestUtils.setupMailbox(""boxT"" a2.mId true c Mailbox.TYPE_TRASH); Message m11=createMessage(c b1 true false Message.FLAG_LOADED_COMPLETE); Message m21=createMessage(c b2 false false Message.FLAG_LOADED_COMPLETE); Message m22=createMessage(c b2 true true Message.FLAG_LOADED_COMPLETE); Message m31=createMessage(c b3 false false Message.FLAG_LOADED_COMPLETE); Message m32=createMessage(c b3 false false Message.FLAG_LOADED_COMPLETE); Message m33=createMessage(c b3 true true Message.FLAG_LOADED_COMPLETE); Message mt1=createMessage(c bt true false Message.FLAG_LOADED_COMPLETE); Message mt2=createMessage(c bt true false Message.FLAG_LOADED_COMPLETE); Message mt3=createMessage(c bt false false Message.FLAG_LOADED_COMPLETE); assertEquals(1 getMessageCount(b1.mId)); assertEquals(2 getMessageCount(b2.mId)); assertEquals(3 getMessageCount(b3.mId)); assertEquals(0 getMessageCount(b4.mId)); assertEquals(3 getMessageCount(bt.mId)); setMinusOneToMessageCounts(); assertEquals(-1 getMessageCount(b1.mId)); assertEquals(-1 getMessageCount(b2.mId)); assertEquals(-1 getMessageCount(b3.mId)); assertEquals(-1 getMessageCount(b4.mId)); assertEquals(-1 getMessageCount(bt.mId)); SQLiteDatabase db=getProvider().getDatabase(mMockContext); DBHelper.recalculateMessageCount(db); assertEquals(1 getMessageCount(b1.mId)); assertEquals(2 getMessageCount(b2.mId)); assertEquals(3 getMessageCount(b3.mId)); assertEquals(0 getMessageCount(b4.mId)); assertEquals(3 getMessageCount(bt.mId)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testSyncedMessageDelete,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""synced-message-delete"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); long message1Id=message1.mId; Message message2=ProviderTestUtils.setupMessage(""message2"" account1Id box1Id false true mMockContext); long message2Id=message2.mId; String selection=EmailContent.MessageColumns.ACCOUNT_KEY + ""=? AND "" + EmailContent.MessageColumns.MAILBOX_KEY+ ""=?""; String[] selArgs=new String[]{String.valueOf(account1Id) String.valueOf(box1Id)}; int numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(2 numMessages); numMessages=EmailContent.count(mMockContext Message.DELETED_CONTENT_URI selection selArgs); assertEquals(0 numMessages); Uri uri=ContentUris.withAppendedId(Message.SYNCED_CONTENT_URI message1Id); mMockContext.getContentResolver().delete(uri null null); numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(1 numMessages); numMessages=EmailContent.count(mMockContext Message.DELETED_CONTENT_URI selection selArgs); assertEquals(1 numMessages); uri=ContentUris.withAppendedId(Message.CONTENT_URI message2Id); mMockContext.getContentResolver().delete(uri null null); numMessages=EmailContent.count(mMockContext Message.CONTENT_URI selection selArgs); assertEquals(0 numMessages); numMessages=EmailContent.count(mMockContext Message.DELETED_CONTENT_URI selection selArgs); assertEquals(1 numMessages); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testUnreadCountTriggers,"public void  (){ Account account=ProviderTestUtils.setupAccount(""triggers"" true mMockContext); Mailbox boxA=ProviderTestUtils.setupMailbox(""boxA"" account.mId true mMockContext); Mailbox boxB=ProviderTestUtils.setupMailbox(""boxB"" account.mId true mMockContext); Mailbox boxC=ProviderTestUtils.setupMailbox(""boxC"" account.mId true mMockContext); assertEquals(0 getUnreadCount(boxA.mId)); assertEquals(0 getUnreadCount(boxB.mId)); assertEquals(0 getUnreadCount(boxC.mId)); Message message1=setupUnreadMessage(""message1"" account.mId boxA.mId false true mMockContext); Message message2=setupUnreadMessage(""message2"" account.mId boxA.mId false true mMockContext); Message message3=setupUnreadMessage(""message3"" account.mId boxA.mId false true mMockContext); setupUnreadMessage(""message4"" account.mId boxC.mId false true mMockContext); assertEquals(3 getUnreadCount(boxA.mId)); assertEquals(0 getUnreadCount(boxB.mId)); assertEquals(1 getUnreadCount(boxC.mId)); ContentResolver cr=mMockContext.getContentResolver(); Uri uri=ContentUris.withAppendedId(Message.CONTENT_URI message1.mId); cr.delete(uri null null); assertEquals(2 getUnreadCount(boxA.mId)); assertEquals(0 getUnreadCount(boxB.mId)); assertEquals(1 getUnreadCount(boxC.mId)); message2.mMailboxKey=boxB.mId; ContentValues cv=new ContentValues(); cv.put(MessageColumns.MAILBOX_KEY boxB.mId); cr.update(ContentUris.withAppendedId(Message.CONTENT_URI message2.mId) cv null null); assertEquals(1 getUnreadCount(boxA.mId)); assertEquals(1 getUnreadCount(boxB.mId)); assertEquals(1 getUnreadCount(boxC.mId)); cv.clear(); cv.put(MessageColumns.FLAG_READ 1); cr.update(ContentUris.withAppendedId(Message.CONTENT_URI message3.mId) cv null null); assertEquals(0 getUnreadCount(boxA.mId)); assertEquals(1 getUnreadCount(boxB.mId)); assertEquals(1 getUnreadCount(boxC.mId)); message3.mMailboxKey=boxC.mId; cv.clear(); cv.put(MessageColumns.MAILBOX_KEY boxC.mId); cr.update(ContentUris.withAppendedId(Message.CONTENT_URI message3.mId) cv null null); assertEquals(0 getUnreadCount(boxA.mId)); assertEquals(1 getUnreadCount(boxB.mId)); assertEquals(1 getUnreadCount(boxC.mId)); cv.clear(); cv.put(MessageColumns.FLAG_READ 0); cr.update(ContentUris.withAppendedId(Message.CONTENT_URI message3.mId) cv null null); assertEquals(0 getUnreadCount(boxA.mId)); assertEquals(1 getUnreadCount(boxB.mId)); assertEquals(2 getUnreadCount(boxC.mId)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\provider\ProviderTests.java,testUpdateBodyWithMessageId,"public void  (){ Account account1=ProviderTestUtils.setupAccount(""orphaned body"" true mMockContext); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true mMockContext); long box1Id=box1.mId; final String textContent=""foobar some odd text""; final String htmlContent=""and some html""; ContentValues values=new ContentValues(); values.put(BodyColumns.TEXT_CONTENT textContent); values.put(BodyColumns.HTML_CONTENT htmlContent); values.put(BodyColumns.SOURCE_MESSAGE_KEY 17); Message message1=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id false true mMockContext); long message1Id=message1.mId; Body body1=loadBodyForMessageId(message1Id); assertNull(body1); Body.updateBodyWithMessageId(mMockContext message1Id values); body1=loadBodyForMessageId(message1Id); assertNotNull(body1); assertEquals(body1.mTextContent textContent); assertEquals(body1.mHtmlContent htmlContent); assertEquals(body1.mSourceKey 17); Message message2=ProviderTestUtils.setupMessage(""message1"" account1Id box1Id true true mMockContext); long message2Id=message2.mId; Body body2=loadBodyForMessageId(message2Id); assertNotNull(body2); assertTrue(!body2.mTextContent.equals(textContent)); Body.updateBodyWithMessageId(mMockContext message2Id values); body2=loadBodyForMessageId(message1Id); assertNotNull(body2); assertEquals(body2.mTextContent textContent); assertEquals(body2.mHtmlContent htmlContent); assertEquals(body2.mSourceKey 17); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testAttachmentWatchdogAlarm,public void  (){ final AttachmentService attachmentService=new AttachmentService(); final AttachmentService.AttachmentWatchdog watchdog=attachmentService.mWatchdog; final long now=System.currentTimeMillis(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); dr.mLastCallbackTime=now; attachmentService.mDownloadsInProgress.put(dr.mAttachmentId dr); final boolean shouldCancel=watchdog.validateDownloadRequest(dr 60000 now); assertFalse(shouldCancel); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testAttachmentWatchdogAlarmNeedsCancel,public void  (){ final AttachmentService attachmentService=new AttachmentService(); final AttachmentService.AttachmentWatchdog watchdog=attachmentService.mWatchdog; final long now=System.currentTimeMillis(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); dr.mLastCallbackTime=now - 60000; attachmentService.mDownloadsInProgress.put(dr.mAttachmentId dr); final boolean shouldCancel=watchdog.validateDownloadRequest(dr 1000 now); assertTrue(shouldCancel); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueAddRequest,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); final boolean result=dq.addRequest(dr); assertTrue(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueAddRequestExisting,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); boolean result=dq.addRequest(dr); assertTrue(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); result=dq.addRequest(dr); assertTrue(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueAddRequestNull,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); boolean exceptionThrown=false; try { dq.addRequest(null); } catch ( NullPointerException ex) { exceptionThrown=true; } assertTrue(exceptionThrown); assertEquals(0 dq.getSize()); assertTrue(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueEmptyQueue,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); assertEquals(0 dq.getSize()); assertTrue(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueFindRequestById,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); final boolean result=dq.addRequest(dr); assertTrue(result); final AttachmentService.DownloadRequest drResult=dq.findRequestById(1); assertNotNull(drResult); assertEquals(dr drResult); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueFindRequestByIdInvalidId,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); final boolean result=dq.addRequest(dr); assertTrue(result); final AttachmentService.DownloadRequest drResult=dq.findRequestById(-1); assertNull(drResult); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueFindRequestByIdUnknownId,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); final boolean result=dq.addRequest(dr); assertTrue(result); final AttachmentService.DownloadRequest drResult=dq.findRequestById(5); assertNull(drResult); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueGetNextRequest,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); boolean result=dq.addRequest(dr); assertTrue(result); final AttachmentService.DownloadRequest dr2=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_SEND_MAIL 2); result=dq.addRequest(dr2); assertTrue(result); final AttachmentService.DownloadRequest dr3=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_BACKGROUND 3); result=dq.addRequest(dr3); assertTrue(result); assertEquals(3 dq.getSize()); assertFalse(dq.isEmpty()); AttachmentService.DownloadRequest drResult=dq.getNextRequest(); assertEquals(dr drResult); assertEquals(2 dq.getSize()); assertFalse(dq.isEmpty()); drResult=dq.getNextRequest(); assertEquals(dr2 drResult); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); drResult=dq.getNextRequest(); assertEquals(dr3 drResult); assertEquals(0 dq.getSize()); assertTrue(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueGetNextRequestEmptyQueue,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); AttachmentService.DownloadRequest drResult=dq.getNextRequest(); assertNull(drResult); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueRemoveRequest,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); boolean result=dq.addRequest(dr); assertTrue(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); result=dq.removeRequest(dr); assertTrue(result); assertEquals(0 dq.getSize()); assertTrue(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueRemoveRequestDoesNotExist,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); boolean result=dq.addRequest(dr); assertTrue(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); result=dq.removeRequest(new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 2)); assertFalse(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueRemoveRequestNull,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); boolean result=dq.addRequest(dr); assertTrue(result); assertEquals(dq.getSize() 1); assertFalse(dq.isEmpty()); result=dq.removeRequest(null); assertTrue(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueSizeReporting,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); boolean result=dq.addRequest(dr); assertTrue(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); result=dq.addRequest(dr); assertTrue(result); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); final AttachmentService.DownloadRequest dr2=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 2); result=dq.addRequest(dr2); assertTrue(result); assertEquals(2 dq.getSize()); assertFalse(dq.isEmpty()); final AttachmentService.DownloadRequest dr3=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 3); result=dq.addRequest(dr3); assertTrue(result); assertEquals(3 dq.getSize()); assertFalse(dq.isEmpty()); AttachmentService.DownloadRequest returnRequest=dq.getNextRequest(); assertNotNull(returnRequest); assertEquals(2 dq.getSize()); assertFalse(dq.isEmpty()); final AttachmentService.DownloadRequest dr4=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 4); result=dq.addRequest(dr4); assertTrue(result); assertEquals(3 dq.getSize()); assertFalse(dq.isEmpty()); returnRequest=dq.getNextRequest(); assertNotNull(returnRequest); assertEquals(2 dq.getSize()); assertFalse(dq.isEmpty()); returnRequest=dq.getNextRequest(); assertNotNull(returnRequest); assertEquals(1 dq.getSize()); assertFalse(dq.isEmpty()); returnRequest=dq.getNextRequest(); assertNotNull(returnRequest); assertEquals(0 dq.getSize()); assertTrue(dq.isEmpty()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueTestDate,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); boolean result=dq.addRequest(dr); assertTrue(result); final AttachmentService.DownloadRequest dr2=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 2); result=dq.addRequest(dr2); assertTrue(result); final AttachmentService.DownloadRequest dr3=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 3); result=dq.addRequest(dr3); assertTrue(result); final AttachmentService.DownloadRequest dr4=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 4); result=dq.addRequest(dr4); assertTrue(result); final AttachmentService.DownloadRequest dr5=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 5); result=dq.addRequest(dr5); assertTrue(result); final AttachmentService.DownloadRequest dr6=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 6); result=dq.addRequest(dr6); assertTrue(result); long lastTime=0; for (int i=0; i < dq.getSize(); i++) { final AttachmentService.DownloadRequest returnRequest=dq.getNextRequest(); assertNotNull(returnRequest); final long requestTime=returnRequest.mCreatedTime; assertTrue(requestTime >= lastTime); lastTime=requestTime; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadQueueTestPriority,public void  (){ final AttachmentService.DownloadQueue dq=new AttachmentService.DownloadQueue(); final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); boolean result=dq.addRequest(dr); assertTrue(result); final AttachmentService.DownloadRequest dr2=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_BACKGROUND 2); result=dq.addRequest(dr2); assertTrue(result); final AttachmentService.DownloadRequest dr3=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_SEND_MAIL 3); result=dq.addRequest(dr3); assertTrue(result); final AttachmentService.DownloadRequest dr4=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_SEND_MAIL 4); result=dq.addRequest(dr4); assertTrue(result); final AttachmentService.DownloadRequest dr5=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 5); result=dq.addRequest(dr5); assertTrue(result); final AttachmentService.DownloadRequest dr6=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_BACKGROUND 6); result=dq.addRequest(dr6); assertTrue(result); int lastPriority=AttachmentService.PRIORITY_HIGHEST; for (int i=0; i < dq.getSize(); i++) { final AttachmentService.DownloadRequest returnRequest=dq.getNextRequest(); assertNotNull(returnRequest); final int requestPriority=returnRequest.mPriority; assertTrue(requestPriority >= lastPriority); lastPriority=requestPriority; } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testDownloadRequestIsEquals,public void  (){ final AttachmentService.DownloadRequest dr=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 1); final AttachmentService.DownloadRequest dr2=new AttachmentService.DownloadRequest(AttachmentService.PRIORITY_FOREGROUND 2); assertTrue(dr.equals(dr)); assertFalse(dr.equals(dr2)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testServiceCallbackAttachmentCompleteUpdate,public void  (){ final AttachmentService attachmentService=new AttachmentService(); final EmailContent.Attachment attachment=new EmailContent.Attachment(); attachment.mSize=1000; final ContentValues values=attachmentService.mServiceCallback.getAttachmentUpdateValues(attachment EmailServiceStatus.SUCCESS 75); assertTrue(values.size() == 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testServiceCallbackAttachmentErrorUpdate,public void  (){ final AttachmentService attachmentService=new AttachmentService(); final EmailContent.Attachment attachment=new EmailContent.Attachment(); attachment.mSize=1000; final ContentValues values=attachmentService.mServiceCallback.getAttachmentUpdateValues(attachment EmailServiceStatus.CONNECTION_ERROR 75); assertTrue(values.size() == 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\service\AttachmentServiceTests.java,testServiceCallbackAttachmentInProgressUpdate,public void  (){ final AttachmentService attachmentService=new AttachmentService(); final EmailContent.Attachment attachment=new EmailContent.Attachment(); attachment.mSize=1000; final ContentValues values=attachmentService.mServiceCallback.getAttachmentUpdateValues(attachment EmailServiceStatus.IN_PROGRESS 75); assertTrue(values.size() == 2); assertTrue(values.containsKey(EmailContent.AttachmentColumns.UI_STATE)); assertTrue(values.containsKey(EmailContent.AttachmentColumns.UI_DOWNLOADED_SIZE)); assertTrue(values.getAsInteger(EmailContent.AttachmentColumns.UI_STATE) == UIProvider.AttachmentState.DOWNLOADING); assertTrue(values.getAsInteger(EmailContent.AttachmentColumns.UI_DOWNLOADED_SIZE).intValue() == 750); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,setUp,"@Override protected void  () throws Exception { super.setUp(); mTestApkPackageName=getContext().getPackageName() + "".tests""; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,tearDown,@Override protected void  () throws Exception { super.tearDown(); VendorPolicyLoader.clearInstanceForTest(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,testFindProviderForDomain,"public void  (){ VendorPolicyLoader pl=VendorPolicyLoader.getInstance(getContext()); Provider p=pl.findProviderForDomain(""yahoo.com""); if (p == null) return; assertNull(p.id); assertNull(p.label); assertEquals(""yahoo.com"" p.domain); assertNotNull(p.incomingUriTemplate); assertNotNull(p.incomingUsernameTemplate); assertNotNull(p.outgoingUriTemplate); assertNotNull(p.outgoingUsernameTemplate); assertTrue(p.note == null || p.note.length() > 0); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,testGetImapIdValues,"public void  (){ VendorPolicyLoader pl=VendorPolicyLoader.getInstance(getContext()); String id=pl.getImapIdValues(""user-name"" ""server.yahoo.com"" ""IMAP4rev1 STARTTLS AUTH=GSSAPI""); if (id == null) return; assertEquals(""\"""" id.charAt(0)); assertEquals(""\"""" id.charAt(id.length() - 1)); String[] elements=id.split(""\""""); assertEquals(0 elements.length % 4); for (int i=0; i < elements.length; ) { assertTrue(elements[i] == null || elements[i].startsWith("" "")); assertTrue(elements[i + 1].charAt(0) != ' '); assertTrue(elements[i + 2].startsWith("" "")); assertTrue(elements[i + 3].charAt(0) != ' '); i+=4; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,testGetPolicy,"public void  (){ MockVendorPolicy.inject(getContext()); VendorPolicyLoader pl=VendorPolicyLoader.getInstance(getContext()); Bundle result=new Bundle(); result.putInt(""ret"" 1); MockVendorPolicy.mockResult=result; Bundle args=new Bundle(); args.putString(""arg1"" ""a""); Bundle actualResult=pl.getPolicy(""policy1"" args); assertEquals(""policy"" ""policy1"" MockVendorPolicy.passedPolicy); assertEquals(""arg"" ""a"" MockVendorPolicy.passedBundle.getString(""arg1"")); assertEquals(""result"" 1 actualResult.getInt(""ret"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,testGetPolicyNonSystem,"public void  (){ VendorPolicyLoader pl=new VendorPolicyLoader(getContext() mTestApkPackageName MockVendorPolicy.class.getName() false); MockVendorPolicy.passedPolicy=null; assertEquals(Bundle.EMPTY pl.getPolicy(""policy1"" null)); assertNull(MockVendorPolicy.passedPolicy); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,testIsSystemPackage,"public void  (){ final Context c=getContext(); assertEquals(false VendorPolicyLoader.isSystemPackage(c ""no.such.package"")); assertEquals(false VendorPolicyLoader.isSystemPackage(c mTestApkPackageName)); assertEquals(true VendorPolicyLoader.isSystemPackage(c ""com.android.settings"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\VendorPolicyLoaderTest.java,testPackageNotExist,"public void  (){ VendorPolicyLoader pl=new VendorPolicyLoader(getContext() ""no.such.package"" ""no.such.Class"" true); assertEquals(Bundle.EMPTY pl.getPolicy(null null)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,MockTimer,public  (Clock clock){ mClock=clock; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,advanceClock,private void  (int milliseconds){ mClock.advance(milliseconds); mTimer.runExpiredTasks(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,run,@Override public void  (){ mCounter++; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,runExpiredTasks,public void  (){ while (!mTasks.isEmpty()) { Entry e=mTasks.peek(); if (e.mScheduledTime > mClock.getTime()) { break; } e.mTask.run(); mTasks.poll(); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,schedule,@Override public void  (TimerTask task long delay){ if (delay == 0) { task.run(); } else { Entry e=new Entry(); e.mScheduledTime=mClock.getTime() + delay; e.mTask=task; mTasks.offer(e); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,sendMessageAtTime,@Override public boolean  (Message msg long uptimeMillis){ msg.getCallback().run(); return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,testMultiCalls,public void  (){ mTarget.onEvent(); advanceClock(1); mTarget.onEvent(); advanceClock(1); mTarget.onEvent(); advanceClock(1); mTarget.onEvent(); advanceClock(1); mTarget.onEvent(); assertTrue(mTarget.getTimeoutForTest() > 100); advanceClock(2000); assertTrue(mRunnable.mCounter < 5); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,testSingleCalls,public void  (){ mTarget.onEvent(); advanceClock(0); assertEquals(0 mRunnable.mCounter); advanceClock(99); assertEquals(0 mRunnable.mCounter); advanceClock(1); assertEquals(1 mRunnable.mCounter); advanceClock(10000); assertEquals(1 mRunnable.mCounter); mTarget.onEvent(); advanceClock(0); assertEquals(1 mRunnable.mCounter); advanceClock(99); assertEquals(1 mRunnable.mCounter); advanceClock(1); assertEquals(2 mRunnable.mCounter); advanceClock(10000); assertEquals(2 mRunnable.mCounter); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\ThrottleTest.java,testUpdateTimeout,public void  (){ assertEquals(100 mTarget.getTimeoutForTest()); mTarget.updateTimeout(); assertEquals(100 mTarget.getTimeoutForTest()); mClock.advance(10); mTarget.updateTimeout(); assertEquals(200 mTarget.getTimeoutForTest()); mClock.advance(Throttle.TIMEOUT_EXTEND_INTERVAL); mTarget.updateTimeout(); assertEquals(400 mTarget.getTimeoutForTest()); mClock.advance(Throttle.TIMEOUT_EXTEND_INTERVAL); mTarget.updateTimeout(); assertEquals(500 mTarget.getTimeoutForTest()); mClock.advance(Throttle.TIMEOUT_EXTEND_INTERVAL + 1); mTarget.updateTimeout(); assertEquals(100 mTarget.getTimeoutForTest()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,assertViewVisible,"public static void  (View v){ if (v == null) { throw new NullPointerException(); } for (; ; ) { assertTrue(""visibility for "" + v View.VISIBLE == v.getVisibility()); ViewParent parent=v.getParent(); if (parent == null || !(parent instanceof View)) { break; } v=(View)parent; } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,b,pu lic static byte[] b(int... array){ if (array == null) { return null; } byte[] ret=new byte[array.length]; for (int i=0; i < ret.length; i++) { ret[i]=(byte)array[i]; } return ret; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,expectThrowable,"public static void  (Runnable runnable Class<? extends Throwable> expectedThrowable){ try { runnable.run(); fail(""Expected throwable not thrown.""); } catch ( Throwable th) { if (expectedThrowable.isAssignableFrom(th.getClass())) { return; } fail(""Cought unexpected throwable "" + th.getClass().getName()); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,isMet,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,isScreenOnAndNotLocked,public static boolean  (Context context){ PowerManager pm=(PowerManager)context.getSystemService(Context.POWER_SERVICE); if (!pm.isScreenOn()) { return false; } KeyguardManager km=(KeyguardManager)context.getSystemService(Context.KEYGUARD_SERVICE); if (km.inKeyguardRestrictedInputMode()) { return false; } return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,run,"@Override public void  (){ waitUntil(""message"" new Condition(){ @Override public boolean isMet(){ return false; } }  0); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,testB,public void  (){ assertNull(b(null)); MoreAsserts.assertEquals(new byte[]{} b()); MoreAsserts.assertEquals(new byte[]{1 2 (byte)0xff} b(1 2 0xff)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,testExpectThrowable,public void  (){ try { expectThrowable(new Runnable(){ @Override public void run(){ } }  Throwable.class); fail(); } catch ( AssertionFailedError ok) { } try { expectThrowable(new Runnable(){ @Override public void run(){ throw new RuntimeException(); } }  Error.class); fail(); } catch ( AssertionFailedError ok) { } expectThrowable(new Runnable(){ @Override public void run(){ throw new RuntimeException(); } }  Exception.class); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,testWaitUntil,"public void  (){ waitUntil(""message"" new Condition(){ @Override public boolean isMet(){ return true; } }  1000000); expectThrowable(new Runnable(){ @Override public void run(){ waitUntil(""message"" new Condition(){ @Override public boolean isMet(){ return false; } }  0); } }  AssertionFailedError.class); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\email\TestUtils.java,waitUntil,"public static void  (String message Condition condition int timeoutSeconds){ LogUtils.d(Logging.LOG_TAG message + "": Waiting...""); final long timeout=System.currentTimeMillis() + timeoutSeconds * 1000; while (System.currentTimeMillis() < timeout) { if (condition.isMet()) { return; } try { Thread.sleep(500); } catch ( InterruptedException ignore) { } } fail(message + "": Timeout""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\DeviceTests.java,testGetConsistentDeviceId,"public void  (){ TelephonyManager tm=(TelephonyManager)getContext().getSystemService(Context.TELEPHONY_SERVICE); if (tm == null) { LogUtils.w(Logging.LOG_TAG ""TelephonyManager not supported. Skipping.""); return; } final String deviceId=Device.getConsistentDeviceId(getContext()); final String deviceId2=Device.getConsistentDeviceId(getContext()); assertEquals(deviceId deviceId2); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeHeaderUnitTests.java,testWriteToString,"public void  () throws Exception { MimeHeader header=new MimeHeader(); String actual1=header.writeToString(); assertEquals(""empty header"" actual1 null); header.setHeader(""Header1"" ""value1""); String actual2=header.writeToString(); assertEquals(""single header"" actual2 ""Header1: value1\r\n""); header.setHeader(""Header2"" ""value2""); String actual3=header.writeToString(); assertEquals(""multiple headers"" actual3 ""Header1: value1\r\n"" + ""Header2: value2\r\n""); header.setHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA ""value3""); String actual4=header.writeToString(); assertEquals(""multiple headers"" actual4 ""Header1: value1\r\n"" + ""Header2: value2\r\n""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeBodyPartTest.java,testGetContentId,"public void  () throws MessagingException { MimeBodyPart bp=new MimeBodyPart(); assertNull(bp.getContentId()); final String cid1=""cid.1@android.com""; bp.setHeader(MimeHeader.HEADER_CONTENT_ID cid1); assertEquals(cid1 bp.getContentId()); bp.setHeader(MimeHeader.HEADER_CONTENT_ID ""<"" + cid1 + "">""); assertEquals(cid1 bp.getContentId()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,brokentestCollectParts,"public void  () throws MessagingException  Exception { final String cid1=""<i_12e8248b4f0874cb>""; final Part cid1bp=MessageTestUtils.bodyPart(""image/gif; name=\""im1.gif\"""" cid1); final String cid2=""<ii_12e8248b4f0874cb>""; final Part cid2bp=MessageTestUtils.bodyPart(""image/gif"" cid2); cid2bp.addHeader(MimeHeader.HEADER_CONTENT_DISPOSITION ""inline; filename=\""im2.gif\""""); final String cid3=""<iii_12e8248b4f0874cb>""; final Part cid3bp=MessageTestUtils.bodyPart(""image/gif"" cid3); cid3bp.addHeader(MimeHeader.HEADER_CONTENT_DISPOSITION ""attachment; filename=\""im3.gif\""""); final String cid4=""<iv_12e8248b4f0874cb>""; final Part cid4bp=MessageTestUtils.bodyPart(""image/gif"" cid4); final String cid5=""<v_12e8248b4f0874cb>""; final Part cid5bp=MessageTestUtils.bodyPart(""image/gif"" cid5); cid5bp.addHeader(MimeHeader.HEADER_CONTENT_DISPOSITION ""inline""); final ArrayList<Part> view1=new ArrayList<Part>(); final ArrayList<Part> attach1=new ArrayList<Part>(); MimeUtility.collectParts(cid1bp view1 attach1); assertEquals(1 attach1.size()); assertEquals(attach1.get(0) cid1bp); final ArrayList<Part> view2=new ArrayList<Part>(); final ArrayList<Part> attach2=new ArrayList<Part>(); MimeUtility.collectParts(cid2bp view2 attach2); assertEquals(1 attach2.size()); assertEquals(attach2.get(0) cid2bp); final ArrayList<Part> view3=new ArrayList<Part>(); final ArrayList<Part> attach3=new ArrayList<Part>(); MimeUtility.collectParts(cid3bp view3 attach3); assertEquals(1 attach3.size()); assertEquals(attach3.get(0) cid3bp); final ArrayList<Part> view4=new ArrayList<Part>(); final ArrayList<Part> attach4=new ArrayList<Part>(); MimeUtility.collectParts(cid4bp view4 attach4); assertEquals(0 attach4.size()); final ArrayList<Part> view5=new ArrayList<Part>(); final ArrayList<Part> attach5=new ArrayList<Part>(); MimeUtility.collectParts(cid5bp view5 attach5); assertEquals(0 attach5.size()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testComplexDecode,"public void  (){ String result1=MimeUtility.unfoldAndDecode(CALENDAR_SUBJECT_UNICODE); assertEquals(CALENDAR_SUBJECT_PLAIN result1); String degenerate1=MimeUtility.unfoldAndDecode(CALENDAR_DEGENERATE_UNICODE_1); assertEquals(""degenerate case 1"" CALENDAR_DEGENERATE_UNICODE_1 degenerate1); String degenerate2=MimeUtility.unfoldAndDecode(CALENDAR_DEGENERATE_UNICODE_2); assertEquals(""degenerate case 2"" CALENDAR_DEGENERATE_UNICODE_2 degenerate2); String degenerate3=MimeUtility.unfoldAndDecode(CALENDAR_DEGENERATE_UNICODE_3); assertEquals(""degenerate case 3"" CALENDAR_DEGENERATE_UNICODE_3 degenerate3); String degenerate4=MimeUtility.unfoldAndDecode(CALENDAR_DEGENERATE_UNICODE_4); assertEquals(""degenerate case 4"" CALENDAR_DEGENERATE_UNICODE_4 degenerate4); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testContentTypeCharset,"public void  () throws MessagingException { final String UNICODE_EXPECT=""This is some happy unicode text \u263a""; final String WINDOWS1252_EXPECT=""This is some happy unicode text \u00e2\u02dc\u00ba""; TextBody tb=new TextBody(UNICODE_EXPECT); MimeBodyPart p=new MimeBodyPart(); String gotText  mimeType  charset; p.setBody(tb); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/html; charset=utf-8""); gotText=MimeUtility.getTextFromPart(p); assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType() ""text/html"")); assertEquals(UNICODE_EXPECT gotText); p.setBody(tb); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/html; charset=windows-1252""); gotText=MimeUtility.getTextFromPart(p); assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType() ""text/html"")); assertEquals(WINDOWS1252_EXPECT gotText); p.setBody(tb); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/html; prop1 = \""test\""; charset = \""utf-8\""; prop2 = \""test\""""); gotText=MimeUtility.getTextFromPart(p); assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType() ""text/html"")); assertEquals(UNICODE_EXPECT gotText); p.setBody(tb); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/html; prop1 = \""test\""; charset = \""windows-1252\""; prop2 = \""test\""""); gotText=MimeUtility.getTextFromPart(p); assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType() ""text/html"")); assertEquals(WINDOWS1252_EXPECT gotText); p.setBody(tb); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""TEXT/HtmL ; CHARseT=utf-8""); gotText=MimeUtility.getTextFromPart(p); assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType() ""text/html"")); assertEquals(UNICODE_EXPECT gotText); p.setBody(tb); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""TEXT/HtmL ; CHARseT=windows-1252""); gotText=MimeUtility.getTextFromPart(p); assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType() ""text/html"")); assertEquals(WINDOWS1252_EXPECT gotText); p.setBody(tb); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/html; charset=utf-8 (Plain text)""); gotText=MimeUtility.getTextFromPart(p); assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType() ""text/html"")); p.setBody(tb); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/html; charset=windows-1252 (Plain text)""); gotText=MimeUtility.getTextFromPart(p); assertTrue(MimeUtility.mimeTypeMatches(p.getMimeType() ""text/html"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testDecodeSimple,public void  (){ String result1=MimeUtility.decode(SHORT_UNICODE_ENCODED); assertEquals(SHORT_UNICODE result1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testEfficientFoldAndEncode,public void  (){ String result1=MimeUtility.foldAndEncode(SHORT_PLAIN); String result2=MimeUtility.foldAndEncode2(SHORT_PLAIN 10); String result3=MimeUtility.fold(SHORT_PLAIN 10); assertSame(SHORT_PLAIN result1); assertSame(SHORT_PLAIN result2); assertSame(SHORT_PLAIN result3); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testEfficientUnfoldAndDecode,public void  (){ String result1=MimeUtility.unfold(SHORT_PLAIN); String result2=MimeUtility.decode(SHORT_PLAIN); String result3=MimeUtility.unfoldAndDecode(SHORT_PLAIN); assertSame(SHORT_PLAIN result1); assertSame(SHORT_PLAIN result2); assertSame(SHORT_PLAIN result3); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testFoldAndEncode2,public void  (){ String result1=MimeUtility.foldAndEncode2(SHORT_UNICODE 10); assertEquals(SHORT_UNICODE_ENCODED result1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testFoldAndEncode2Supplemental,"public void  (){ String result1=MimeUtility.foldAndEncode2(SHORT_SUPPLEMENTAL ""Subject: "".length()); String result2=MimeUtility.foldAndEncode2(LONG_SUPPLEMENTAL ""Subject: "".length()); String result3=MimeUtility.foldAndEncode2(LONG_SUPPLEMENTAL_2 ""Subject: "".length()); assertEquals(""short supplemental"" SHORT_SUPPLEMENTAL_ENCODED result1); assertEquals(""long supplemental"" LONG_SUPPLEMENTAL_ENCODED result2); assertEquals(""long supplemental 2"" LONG_SUPPLEMENTAL_ENCODED_2 result3); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testFoldAndEncode2SupplementalQuotedPrintable,"public void  (){ String result=MimeUtility.foldAndEncode2(LONG_SUPPLEMENTAL_QP ""Subject: "".length()); assertEquals(""long supplement quoted printable"" LONG_SUPPLEMENTAL_QP_ENCODED result); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testFoldAndEncode2WithLongSplit,"public void  (){ String result=MimeUtility.foldAndEncode2(LONG_UNICODE_SPLIT ""Subject: "".length()); assertEquals(""long string"" LONG_UNICODE_SPLIT_ENCODED result); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testGetHeaderParameter,"public void  (){ assertNull(""null header check"" MimeUtility.getHeaderParameter(null ""name"")); assertEquals(""null name first param per code"" ""header"" MimeUtility.getHeaderParameter(HEADER_MULTI_PARAMETER null)); assertEquals(""null name full header"" HEADER_NO_PARAMETER MimeUtility.getHeaderParameter(HEADER_NO_PARAMETER null)); assertEquals(""get 1st param"" ""Param1Value"" MimeUtility.getHeaderParameter(HEADER_MULTI_PARAMETER ""Param1Name"")); assertEquals(""get 2nd param"" ""Param2Value"" MimeUtility.getHeaderParameter(HEADER_MULTI_PARAMETER ""Param2Name"")); assertEquals(""get missing param"" null MimeUtility.getHeaderParameter(HEADER_MULTI_PARAMETER ""Param3Name"")); assertEquals(""get 2nd param all LC"" ""Param2Value"" MimeUtility.getHeaderParameter(HEADER_MULTI_PARAMETER ""param2name"")); assertEquals(""get 2nd param all UC"" ""Param2Value"" MimeUtility.getHeaderParameter(HEADER_MULTI_PARAMETER ""PARAM2NAME"")); assertEquals(""get 1st param"" ""Param1Value"" MimeUtility.getHeaderParameter(HEADER_QUOTED_MULTI_PARAMETER ""Param1Name"")); assertEquals(""get 2nd param"" ""Param2Value"" MimeUtility.getHeaderParameter(HEADER_QUOTED_MULTI_PARAMETER ""Param2Name"")); assertEquals(""malformed filename param"" null MimeUtility.getHeaderParameter(HEADER_MALFORMED_PARAMETER ""filename"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testGetTextFromPartContentTypeCase,"public void  () throws MessagingException { final String theText=""This is the text of the part""; TextBody tb=new TextBody(theText); MimeBodyPart p=new MimeBodyPart(); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/plain""); p.setBody(tb); String gotText=MimeUtility.getTextFromPart(p); assertEquals(theText gotText); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""TEXT/PLAIN""); p.setBody(tb); gotText=MimeUtility.getTextFromPart(p); assertEquals(theText gotText); p.setHeader(MimeHeader.HEADER_CONTENT_TYPE ""text/other""); p.setBody(tb); gotText=MimeUtility.getTextFromPart(p); assertEquals(theText gotText); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testMimeTypeMatches,"public void  (){ assertFalse(MimeUtility.mimeTypeMatches(""foo/bar"" ""TEXT/PLAIN"")); assertTrue(MimeUtility.mimeTypeMatches(""text/plain"" ""text/plain"")); assertTrue(MimeUtility.mimeTypeMatches(""text/plain"" ""TEXT/PLAIN"")); assertTrue(MimeUtility.mimeTypeMatches(""TEXT/PLAIN"" ""text/plain"")); assertTrue(MimeUtility.mimeTypeMatches(""text/plain"" ""*/plain"")); assertTrue(MimeUtility.mimeTypeMatches(""text/plain"" ""text/*"")); assertTrue(MimeUtility.mimeTypeMatches(""text/plain"" ""*/*"")); assertFalse(MimeUtility.mimeTypeMatches(""foo/bar"" ""*/plain"")); assertFalse(MimeUtility.mimeTypeMatches(""foo/bar"" ""text/*"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testMimeTypeMatchesArray,"public void  (){ String[] arrayZero=new String[0]; assertFalse(MimeUtility.mimeTypeMatches(""text/plain"" arrayZero)); String[] arrayOne=new String[]{""text/plain""}; assertFalse(MimeUtility.mimeTypeMatches(""foo/bar"" arrayOne)); assertTrue(MimeUtility.mimeTypeMatches(""text/plain"" arrayOne)); String[] arrayTwo=new String[]{""text/plain"" ""match/this""}; assertFalse(MimeUtility.mimeTypeMatches(""foo/bar"" arrayTwo)); assertTrue(MimeUtility.mimeTypeMatches(""text/plain"" arrayTwo)); assertTrue(MimeUtility.mimeTypeMatches(""match/this"" arrayTwo)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testPaddingOfFoldAndEncode2,"public void  (){ String result1=MimeUtility.foldAndEncode2(PADDED2_UNICODE 0); String result2=MimeUtility.foldAndEncode2(PADDED1_UNICODE 0); String result3=MimeUtility.foldAndEncode2(PADDED0_UNICODE 0); assertEquals(""padding 2"" PADDED2_UNICODE_ENCODED result1); assertEquals(""padding 1"" PADDED1_UNICODE_ENCODED result2); assertEquals(""padding 0"" PADDED0_UNICODE_ENCODED result3); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeUtilityTest.java,testUnfoldAndDecodeSimple,public void  (){ String result1=MimeUtility.unfoldAndDecode(SHORT_UNICODE_ENCODED); assertEquals(SHORT_UNICODE result1); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,brokentestWhiteSpace,"public void  () throws MessagingException  IOException { String entireMessage=""From: Pete(A wonderful \\) chap) <pete(his account)@silly.test(his host)>\r\n"" + ""To:A Group(Some people)\r\n"" + "" :Chris Jones <c@(Chris's host.)public.example> \r\n""+ "" joe@example.org \r\n""+ "" John <jdoe@one.test> (my dear friend); (the end of the group)\r\n""+ ""Cc:(Empty list)(start)Undisclosed recipients :(nobody(that I know)) ;\r\n""+ ""Date: Thu \r\n""+ "" 13\r\n""+ "" Feb\r\n""+ "" 1969\r\n""+ "" 23:32\r\n""+ "" -0330 (Newfoundland Time)\r\n""+ ""Message-ID: <testabcd.1234@silly.test>\r\n""+ ""Content-Type: \r\n""+ "" TEXT/hTML \r\n""+ "" ; x-blah=\""y-blah\"" ; \r\n""+ "" CHARSET=\""us-ascii\"" ; (comment)\r\n""+ ""\r\n""+ ""<html><body>Testing.</body></html>\r\n""; MimeMessage mm=null; mm=new MimeMessage(new ByteArrayInputStream(entireMessage.getBytes(""us-ascii""))); assertTrue(mm.getMimeType() MimeUtility.mimeTypeMatches(""text/html"" mm.getMimeType())); assertEquals(new Date(-27723480000L) mm.getSentDate()); assertEquals(""<testabcd.1234@silly.test>"" mm.getMessageId()); Address[] toAddresses=mm.getRecipients(MimeMessage.RecipientType.TO); assertEquals(""joe@example.org"" toAddresses[1].getAddress()); assertEquals(""jdoe@one.test"" toAddresses[2].getAddress()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,doTestSetSentDate,"private void  () throws MessagingException  ParseException { long expectedTime=1230800400000L; Date date=new Date(expectedTime); MimeMessage message=new MimeMessage(); message.setSentDate(date); String[] headers=message.getHeader(""Date""); assertEquals(1 headers.length); SimpleDateFormat format=new SimpleDateFormat(""EEE  dd MMM yyyy HH:mm:ss Z"" Locale.US); Date result=format.parse(headers[0]); assertEquals(expectedTime result.getTime()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,setUp,@Override protected void  () throws Exception { super.setUp(); TempDirectory.setTempDirectory(getContext()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testEbayDate,"public void  () throws MessagingException  IOException { String entireMessage=""To:a@b.com\r\n"" + ""Date:Thu  10 Dec 09 15:08:08 GMT-0700"" + ""\r\n""+ ""\r\n""; MimeMessage mm=null; mm=new MimeMessage(new ByteArrayInputStream(entireMessage.getBytes(""us-ascii""))); Date actual=mm.getSentDate(); Date expected=new Date(Date.UTC(109 11 10 15 8 8) + 7 * 60 * 60* 1000); assertEquals(expected actual); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testEncodingAddressField,"public void  () throws MessagingException { Address noName1=new Address(""noname1@dom1.com""); Address noName2=new Address(""<noname2@dom2.com>"" """"); Address simpleName=new Address(""address3@dom3.org"" ""simple long and long long name""); Address dquoteName=new Address(""address4@dom4.org"" ""name 4 long long name""); Address quotedName=new Address(""bigG@dom5.net"" ""big \""G\""""); Address utf16Name=new Address(""<address6@co.jp>"" ""\""\u65E5\u672C\u8A9E\""""); Address utf32Name=new Address(""<address8@ne.jp>"" ""\uD834\uDF01\uD834\uDF46""); MimeMessage message=new MimeMessage(); message.setFrom(noName1); message.setRecipient(RecipientType.TO noName2); message.setRecipients(RecipientType.CC new Address[]{simpleName dquoteName}); message.setReplyTo(new Address[]{quotedName utf16Name utf32Name}); String[] from=message.getHeader(""From""); String[] to=message.getHeader(""To""); String[] cc=message.getHeader(""Cc""); String[] replyTo=message.getHeader(""Reply-to""); assertEquals(""from address count"" 1 from.length); assertEquals(""no name 1"" ""noname1@dom1.com"" from[0]); assertEquals(""to address count"" 1 to.length); assertEquals(""no name 2"" ""noname2@dom2.com"" to[0]); assertEquals(""cc address count"" 1 cc.length); assertEquals(""simple name & double quoted name"" ""simple long and long long name <address3@dom3.org>  \""name 4 long long\r\n"" + "" name\"" <address4@dom4.org>"" cc[0]); assertEquals(""reply-to address count"" 1 replyTo.length); assertEquals(""quoted name & encoded name"" ""\""big \\\""G\\\""\"" <bigG@dom5.net>  =?UTF-8?B?5pel5pys6Kqe?=\r\n"" + "" <address6@co.jp>  =?UTF-8?B?8J2MgfCdjYY=?= <address8@ne.jp>"" replyTo[0]); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testExtendedHeader,"public void  () throws MessagingException { MimeMessage message=new MimeMessage(); assertNull(""non existent header"" message.getExtendedHeader(""X-Non-Existent"")); message.setExtendedHeader(""X-Header1"" ""value1""); message.setExtendedHeader(""X-Header2"" ""value2\n value3\r\n value4\r\n""); assertEquals(""simple value"" ""value1"" message.getExtendedHeader(""X-Header1"")); assertEquals(""multi line value"" ""value2 value3 value4"" message.getExtendedHeader(""X-Header2"")); assertNull(""non existent header 2"" message.getExtendedHeader(""X-Non-Existent"")); message.setExtendedHeader(""X-Header1"" ""value4""); assertEquals(""over written value"" ""value4"" message.getExtendedHeader(""X-Header1"")); message.setExtendedHeader(""X-Header1"" null); assertNull(""remove header"" message.getExtendedHeader(""X-Header1"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testExtendedHeaders,"public void  () throws MessagingException { MimeMessage message=new MimeMessage(); assertNull(""new message"" message.getExtendedHeaders()); message.setExtendedHeaders(null); assertNull(""null headers"" message.getExtendedHeaders()); message.setExtendedHeaders(""""); assertNull(""empty headers"" message.getExtendedHeaders()); message.setExtendedHeaders(""X-Header1: value1\r\n""); assertEquals(""header 1 value"" ""value1"" message.getExtendedHeader(""X-Header1"")); assertEquals(""header 1"" ""X-Header1: value1\r\n"" message.getExtendedHeaders()); message.setExtendedHeaders(null); message.setExtendedHeader(""X-Header2"" ""value2""); message.setExtendedHeader(""X-Header3"" ""value3\n value4\r\n value5\r\n""); assertEquals(""headers 2 3"" ""X-Header2: value2\r\n"" + ""X-Header3: value3 value4 value5\r\n"" message.getExtendedHeaders()); message.setExtendedHeaders(""X-Header3: value3 value4 value5\r\n"" + ""X-Header2: value2\r\n""); assertEquals(""header 2"" ""value2"" message.getExtendedHeader(""X-Header2"")); assertEquals(""header 3"" ""value3 value4 value5"" message.getExtendedHeader(""X-Header3"")); assertEquals(""headers 3 2"" ""X-Header3: value3 value4 value5\r\n"" + ""X-Header2: value2\r\n"" message.getExtendedHeaders()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testGetContentId,"public void  () throws MessagingException { MimeMessage message=new MimeMessage(); assertNull(message.getContentId()); final String cid1=""cid.1@android.com""; message.setHeader(MimeHeader.HEADER_CONTENT_ID cid1); assertEquals(cid1 message.getContentId()); message.setHeader(MimeHeader.HEADER_CONTENT_ID ""<"" + cid1 + "">""); assertEquals(cid1 message.getContentId()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testInvalidHeaders,"public void  () throws MessagingException  IOException { String entireMessage=""To:\r\n"" + ""Cc:!invalid!address!  a@b.com\r\n"" + ""Bcc:Undisclosed recipients;\r\n""+ ""invalid header\r\n""+ ""Message-ID:<testabcd.1234@silly.test>\r\n""+ ""\r\n""+ ""Testing\r\n""; MimeMessage mm=null; mm=new MimeMessage(new ByteArrayInputStream(entireMessage.getBytes(""us-ascii""))); assertEquals(0 mm.getRecipients(MimeMessage.RecipientType.TO).length); assertEquals(1 mm.getRecipients(MimeMessage.RecipientType.CC).length); assertEquals(""a@b.com"" mm.getRecipients(MimeMessage.RecipientType.CC)[0].getAddress()); assertEquals(0 mm.getRecipients(MimeMessage.RecipientType.BCC).length); assertEquals(""<testabcd.1234@silly.test>"" mm.getMessageId()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testMessageId,"public void  () throws MessagingException { MimeMessage message1=new MimeMessage(); MimeMessage message2=new MimeMessage(); String id1=message1.getMessageId(); String id2=message2.getMessageId(); assertNotNull(id1); assertNotNull(id2); assertFalse(""Message-ID should be unique"" id1.equals(id2)); final String testId1=""test-message-id-one""; message1.setMessageId(testId1); assertEquals(""set and get Message-ID"" testId1 message1.getMessageId()); final String testId2=""test-message-id-two""; message2.setMessageId(testId1); message2.setMessageId(testId2); assertEquals(""set and get Message-ID"" testId2 message2.getMessageId()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testParseNoMessageId,"public void  () throws MessagingException  IOException { String entireMessage=""To: user@domain.com\r\n"" + ""\r\n"" + ""Testing\r\n""; MimeMessage mm=null; mm=new MimeMessage(new ByteArrayInputStream(entireMessage.getBytes(""us-ascii""))); assertNull(mm.getMessageId()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testParsingAddressField,"public void  () throws MessagingException { MimeMessage message=new MimeMessage(); message.setHeader(""From"" ""noname1@dom1.com""); message.setHeader(""To"" ""<noname2@dom2.com>""); message.setHeader(""Cc"" ""simple name <address3@dom3.org> \r\n"" + "" \""name 4\"" <address4@dom4.org>""); message.setHeader(""Reply-to"" ""\""big \\\""G\\\""\"" <bigG@dom5.net> \r\n"" + "" =?UTF-8?B?5pel5pys6Kqe?=\r\n"" + "" <address6@co.jp> \n""+ "" \""=?UTF-8?B?8J2MgfCdjYY=?=\"" <address8@ne.jp>""); Address[] from=message.getFrom(); Address[] to=message.getRecipients(RecipientType.TO); Address[] cc=message.getRecipients(RecipientType.CC); Address[] replyTo=message.getReplyTo(); assertEquals(""from address count"" 1 from.length); assertEquals(""no name 1 address"" ""noname1@dom1.com"" from[0].getAddress()); assertNull(""no name 1 name"" from[0].getPersonal()); assertEquals(""to address count"" 1 to.length); assertEquals(""no name 2 address"" ""noname2@dom2.com"" to[0].getAddress()); assertNull(""no name 2 name"" to[0].getPersonal()); assertEquals(""cc address count"" 2 cc.length); assertEquals(""simple name address"" ""address3@dom3.org"" cc[0].getAddress()); assertEquals(""simple name name"" ""simple name"" cc[0].getPersonal()); assertEquals(""double quoted name address"" ""address4@dom4.org"" cc[1].getAddress()); assertEquals(""double quoted name name"" ""name 4"" cc[1].getPersonal()); assertEquals(""reply-to address count"" 3 replyTo.length); assertEquals(""quoted name address"" ""bigG@dom5.net"" replyTo[0].getAddress()); assertEquals(""quoted name name"" ""big \""G\"""" replyTo[0].getPersonal()); assertEquals(""utf-16 name address"" ""address6@co.jp"" replyTo[1].getAddress()); assertEquals(""utf-16 name name"" ""\u65E5\u672C\u8A9E"" replyTo[1].getPersonal()); assertEquals(""utf-32 name address"" ""address8@ne.jp"" replyTo[2].getAddress()); assertEquals(""utf-32 name name"" ""\uD834\uDF01\uD834\uDF46"" replyTo[2].getPersonal()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testSetLongSubject,"public void  () throws MessagingException { MimeMessage message=new MimeMessage(); message.setSubject(LONG_UNICODE_16); assertEquals(""unicode readback 16"" LONG_UNICODE_16 message.getSubject()); message.setSubject(LONG_UNICODE_64); assertEquals(""unicode readback 64"" LONG_UNICODE_64 message.getSubject()); String rawHeader=message.getFirstHeader(""Subject""); String[] split=rawHeader.split(""\r\n""); assertTrue(""long subject should fold"" split.length > 1); for ( String s : split) { assertTrue(""split lines max length 78"" s.length() <= 76); String trimmed=s.trim(); assertTrue(""split lines are encoded"" trimmed.startsWith(""=?"") && trimmed.endsWith(""?="")); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testSetSentDate,@MediumTest public void  () throws MessagingException  ParseException { Locale savedLocale=Locale.getDefault(); Locale.setDefault(Locale.US); doTestSetSentDate(); Locale.setDefault(Locale.JAPAN); doTestSetSentDate(); Locale.setDefault(savedLocale); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testSetSubject,"public void  () throws MessagingException { MimeMessage message=new MimeMessage(); message.setSubject(SHORT_UNICODE); assertEquals(""unicode readback"" SHORT_UNICODE message.getSubject()); String rawHeader=message.getFirstHeader(""Subject""); assertEquals(""raw readback"" SHORT_UNICODE_ENCODED rawHeader); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testSetSubjectPlain,"public void  () throws MessagingException { MimeMessage message=new MimeMessage(); message.setSubject(SHORT_PLAIN); assertEquals(""plain subjects"" SHORT_PLAIN message.getSubject()); String rawHeader=message.getFirstHeader(""Subject""); assertEquals(""plain subject not encoded"" -1 rawHeader.indexOf(""=?"")); message.setSubject(LONG_PLAIN_64); rawHeader=message.getFirstHeader(""Subject""); String[] split=rawHeader.split(""\r\n""); assertEquals(""64 shouldn't fold"" 1 split.length); message.setSubject(LONG_PLAIN_256); rawHeader=message.getFirstHeader(""Subject""); split=rawHeader.split(""\r\n""); assertTrue(""long subject should fold"" split.length > 1); for ( String s : split) { assertTrue(""split lines max length 78"" s.length() <= 76); String trimmed=s.trim(); assertFalse(""split lines are not encoded"" trimmed.startsWith(""=?"")); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testStoreFlags,public void  () throws MessagingException { MimeMessage message=new MimeMessage(); Flag[] flags=message.getFlags(); assertEquals(0 flags.length); message.setFlag(Flag.X_STORE_1 true); assertTrue(message.isSet(Flag.X_STORE_1)); assertFalse(message.isSet(Flag.X_STORE_2)); message.setFlag(Flag.X_STORE_2 true); assertTrue(message.isSet(Flag.X_STORE_1)); assertTrue(message.isSet(Flag.X_STORE_2)); message.setFlag(Flag.X_STORE_1 false); assertFalse(message.isSet(Flag.X_STORE_1)); assertTrue(message.isSet(Flag.X_STORE_2)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testUndisclosedRecipients,"public void  () throws MessagingException  IOException { String entireMessage=""To:Undisclosed recipients:;\r\n"" + ""Cc:Undisclosed recipients:;\r\n"" + ""Bcc:Undisclosed recipients:;\r\n""+ ""\r\n""; MimeMessage mm=null; mm=new MimeMessage(new ByteArrayInputStream(entireMessage.getBytes(""us-ascii""))); assertEquals(0 mm.getRecipients(MimeMessage.RecipientType.TO).length); assertEquals(0 mm.getRecipients(MimeMessage.RecipientType.CC).length); assertEquals(0 mm.getRecipients(MimeMessage.RecipientType.BCC).length); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\MimeMessageTest.java,testWriteToHeader,"public void  () throws Exception { MimeMessage message=new MimeMessage(); message.setHeader(""Header1"" ""value1""); message.setHeader(MimeHeader.HEADER_ANDROID_ATTACHMENT_STORE_DATA ""value2""); message.setExtendedHeader(""X-Header3"" ""value3""); message.setHeader(""Header4"" ""value4""); message.setExtendedHeader(""X-Header5"" ""value5""); ByteArrayOutputStream out=new ByteArrayOutputStream(); message.writeTo(out); out.close(); String expectedString=""Header1: value1\r\n"" + ""Header4: value4\r\n"" + ""Message-ID: "" + message.getMessageId() + ""\r\n""+ ""\r\n""; byte[] expected=expectedString.getBytes(); byte[] actual=out.toByteArray(); assertEquals(""output length"" expected.length actual.length); for (int i=0; i < actual.length; ++i) { assertEquals(""output byte["" + i + ""]"" expected[i] actual[i]); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\FlagTests.java,testFlagsUpperCase,public void  (){ for ( Flag flag : Flag.values()) { String name=flag.name(); assertEquals(name.toUpperCase() name); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,Rfc822OutputTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,checkMimeVersion,"private void  (org.apache.james.mime4j.message.Message mimeMessage){ Header header=mimeMessage.getHeader(); Field contentType=header.getField(""MIME-VERSION""); assertTrue(contentType.getBody().equals(""1.0"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,createTestBody,private Body  (Message message){ return Body.restoreBodyWithMessageId(mMockContext message.mId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=getMockContext(); mForwardIntro=mMockContext.getString(R.string.message_compose_fwd_header_fmt SUBJECT SENDER RECIPIENT_TO RECIPIENT_CC); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,testBoundaryDigit,public void  (){ Rfc822Output.sBoundaryDigit=0; Rfc822Output.getNextBoundary(); assertEquals(1 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(2 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(3 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(4 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(5 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(6 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(7 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(8 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(9 Rfc822Output.sBoundaryDigit); Rfc822Output.getNextBoundary(); assertEquals(0 Rfc822Output.sBoundaryDigit); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,testBuildBodyTextWithForward,public void  (){ Message msg=new Message(); msg.mText=TEXT; msg.mFrom=SENDER; msg.mTo=RECIPIENT_TO; msg.mCc=RECIPIENT_CC; msg.mSubject=SUBJECT; msg.mFlags=Message.FLAG_TYPE_FORWARD; msg.save(mMockContext); Body body=createTestBody(msg); String[] bodyParts=Rfc822Output.buildBodyText(body false); assertEquals(TEXT + mForwardIntro + REPLY_TEXT_BODY bodyParts[0]); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,testGetHtmlBody,public void  (){ String actual; actual=Rfc822Output.getHtmlBody(HTML_FULL_BODY); assertEquals(HTML_FULL_RESULT actual); actual=Rfc822Output.getHtmlBody(HTML_BODY_BODY); assertEquals(HTML_BODY_RESULT actual); actual=Rfc822Output.getHtmlBody(HTML_NO_BODY_BODY); assertEquals(HTML_NO_BODY_RESULT actual); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,testGetNextBoundary,public void  (){ String[] resultArray=new String[BOUNDARY_COUNT]; for (int i=0; i < BOUNDARY_COUNT; i++) { resultArray[i]=Rfc822Output.getNextBoundary(); } for (int i=0; i < BOUNDARY_COUNT; i++) { final String result1=resultArray[i]; for (int j=0; j < BOUNDARY_COUNT; j++) { if (i == j) { continue; } final String result2=resultArray[j]; assertFalse(result1.equals(result2)); } } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,testWriteToAlternativePart,"@SuppressWarnings(""unchecked"") public void  () throws IOException  MessagingException { Message msg=new Message(); msg.mText=TEXT; msg.mFrom=SENDER; msg.mAttachments=new ArrayList<Attachment>(); Attachment att=new Attachment(); att.mContentBytes=""__CONTEN"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,testWriteToMixedPart,"@SuppressWarnings(""unchecked"") public void  () throws IOException  MessagingException { Message msg=new Message(); msg.mText=TEXT; msg.mFrom=SENDER; msg.mAttachments=new ArrayList<Attachment>(); Attachment att=new Attachment(); att.mContentBytes=""<html>Hi"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\internet\Rfc822OutputTests.java,testWriteToText,"public void  () throws IOException  MessagingException { Message msg=new Message(); msg.mText=TEXT; msg.mFrom=SENDER; msg.save(mMockContext); ByteArrayOutputStream byteStream=new ByteArrayOutputStream(); Rfc822Output.writeTo(mMockContext msg byteStream true false null); ByteArrayInputStream messageInputStream=new ByteArrayInputStream(byteStream.toByteArray()); org.apache.james.mime4j.message.Message mimeMessage=new org.apache.james.mime4j.message.Message(messageInputStream); checkMimeVersion(mimeMessage); assertFalse(mimeMessage.isMultipart()); assertEquals(""text/plain"" mimeMessage.getMimeType()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\PackedStringTests.java,testPackedString,"public void  (){ PackedString ps=new PackedString(PACKED_STRING_TAGGED); assertEquals(""val1"" ps.get(""tag1"")); assertEquals(""val2"" ps.get(""tag2"")); assertEquals(""val3"" ps.get(""tag3"")); assertEquals(""val4"" ps.get(""tag4"")); assertNull(ps.get(""tag100"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\PackedStringTests.java,testPackedStringBuilderCreate,"public void  (){ PackedString.Builder b=new PackedString.Builder(); b.put(""tag1"" ""value1""); b.put(""tag2"" ""value2""); b.put(""tag3"" ""value3""); b.put(""tag4"" ""value4""); String packedOut=b.toString(); PackedString.Builder b2=new PackedString.Builder(packedOut); assertEquals(""value1"" b2.get(""tag1"")); assertEquals(""value2"" b2.get(""tag2"")); assertEquals(""value3"" b2.get(""tag3"")); assertEquals(""value4"" b2.get(""tag4"")); assertNull(b2.get(""tag100"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\PackedStringTests.java,testPackedStringBuilderEdit,"public void  (){ PackedString.Builder b=new PackedString.Builder(PACKED_STRING_TAGGED); assertEquals(""val1"" b.get(""tag1"")); assertEquals(""val2"" b.get(""tag2"")); assertEquals(""val3"" b.get(""tag3"")); assertEquals(""val4"" b.get(""tag4"")); assertNull(b.get(""tag100"")); b.put(""tag2"" ""TWO""); b.put(""tag3"" null); b.put(""tag5"" ""value5""); assertEquals(""val1"" b.get(""tag1"")); assertEquals(""TWO"" b.get(""tag2"")); assertEquals(null b.get(""tag3"")); assertEquals(""val4"" b.get(""tag4"")); assertEquals(""value5"" b.get(""tag5"")); assertNull(b.get(""tag100"")); String packedOut=b.toString(); PackedString.Builder b2=new PackedString.Builder(packedOut); assertEquals(""val1"" b2.get(""tag1"")); assertEquals(""TWO"" b2.get(""tag2"")); assertEquals(null b2.get(""tag3"")); assertEquals(""val4"" b2.get(""tag4"")); assertEquals(""value5"" b2.get(""tag5"")); assertNull(b2.get(""tag100"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,canCreate,@Override public boolean  (FolderType type){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,create,@Override public boolean  (FolderType type){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,createMessage,@Override public Message  (String uid){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,exists,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,expunge,@Override public Message[]  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,getMessage,@Override public Message  (String uid){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,getMessageCount,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,getMessages,@Override public Message[]  (long startDate long endDate MessageRetrievalListener listener) throws MessagingException { return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,getMode,@Override public OpenMode  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,getName,@Override public String  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,getPermanentFlags,@Override public Flag[]  (){ return null; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,getUnreadMessageCount,@Override public int  (){ return 0; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MockFolder.java,isOpen,@Override public boolean  (){ return false; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\AccountTest.java,getHostAuthJSON,"private static HostAuth  (String username String password){ final HostAuth ha=new HostAuth(); ha.setLogin(username password); ha.mProtocol=""IMAP""; ha.mAddress=""dhoff@example.com""; ha.mPort=543; ha.mFlags=777; return ha; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\AccountTest.java,testDeserializeFromJSON,"public void  () throws JSONException { final JSONObject json=new JSONObject(); json.put(EmailContent.AccountColumns.DISPLAY_NAME ""David Hasselhoff""); json.put(EmailContent.AccountColumns.EMAIL_ADDRESS ""dhoff@example.com""); json.put(EmailContent.AccountColumns.SYNC_LOOKBACK 42); json.put(EmailContent.AccountColumns.SYNC_INTERVAL 99); json.put(Account.JSON_TAG_HOST_AUTH_RECV getHostAuthJSON(""receiver"" ""recpass"").toJson()); json.put(Account.JSON_TAG_HOST_AUTH_SEND getHostAuthJSON(""send"" ""sendpass"").toJson()); json.put(EmailContent.AccountColumns.FLAGS 22); json.put(EmailContent.AccountColumns.SENDER_NAME ""Friend of Kitt""); json.put(EmailContent.AccountColumns.PROTOCOL_VERSION ""protocol version 3.14""); json.put(EmailContent.AccountColumns.SIGNATURE ""David with a heart over the i""); json.put(EmailContent.AccountColumns.PING_DURATION 77); final Account a=Account.fromJson(json); assertEquals(""David Hasselhoff"" a.getDisplayName()); assertEquals(""dhoff@example.com"" a.getEmailAddress()); assertEquals(42 a.getSyncLookback()); assertEquals(99 a.getSyncInterval()); assertEquals(""receiver"" a.mHostAuthRecv.mLogin); assertEquals(""recpass"" a.mHostAuthRecv.mPassword); assertEquals(""send"" a.mHostAuthSend.mLogin); assertEquals(""sendpass"" a.mHostAuthSend.mPassword); assertEquals(22 a.getFlags()); assertEquals(""Friend of Kitt"" a.getSenderName()); assertEquals(""protocol version 3.14"" a.mProtocolVersion); assertEquals(""David with a heart over the i"" a.getSignature()); assertEquals(77 a.mPingDuration); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\AccountTest.java,testSerializeAndDeserializeWithJSON,"public void  (){ final Account before=new Account(); before.setDisplayName(""David Hasselhoff""); before.setEmailAddress(""dhoff@example.com""); before.mSyncKey=""syncKey""; before.setSyncLookback(42); before.setSyncInterval(99); before.setFlags(1 << 5); before.setSenderName(""Friend of Kitt""); before.mProtocolVersion=""protocol version 3.14""; before.mSecuritySyncKey=""securitySyncKey""; before.setSignature(""David with a heart over the i""); before.mPolicyKey=66; before.mPingDuration=77; before.mHostAuthRecv=getHostAuthJSON(""receiver"" ""recpass""); before.ensureLoaded(getContext()); final Account after=Account.fromJson(before.toJson()); assertEquals(before.getDisplayName() after.getDisplayName()); assertEquals(before.getEmailAddress() after.getEmailAddress()); assertEquals(before.getSyncLookback() after.getSyncLookback()); assertEquals(before.getSyncInterval() after.getSyncInterval()); assertEquals(before.mHostAuthSend after.mHostAuthSend); assertEquals(before.mHostAuthKeySend after.mHostAuthKeySend); assertEquals(before.mHostAuthKeyRecv after.mHostAuthKeyRecv); assertEquals(before.getFlags() after.getFlags()); assertEquals(before.getSenderName() after.getSenderName()); assertEquals(before.mProtocolVersion after.mProtocolVersion); assertEquals(before.getSignature() after.getSignature()); assertEquals(before.mPingDuration after.mPingDuration); assertNull(after.mSyncKey); assertEquals(0 after.mPolicyKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,MultipartBuilder,"public  (String mimeType String boundary){ mContentType=mimeType + ""; boundary="" + boundary; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,TextBuilder,public  (String preamble){ mBuilder.append(preamble); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,addBodyPart,public MultipartBuilder  (final BodyPart bodyPart){ mParts.add(bodyPart); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,addCidImg,"public TextBuilder  (String contentId){ return addTag(""img"" ""SRC"" ""cid:"" + contentId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,addTag,"public TextBuilder  (String tag String attribute String value){ return addText(String.format(""<%s %s=\""%s\"">"" tag attribute value)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,addText,public TextBuilder  (String text){ mBuilder.append(text); return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,addUidImg,"public TextBuilder  (Uri contentUri){ return addTag(""img"" ""src"" contentUri.toString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,bodyPart,public static BodyPart  (String mimeType String contentId) throws MessagingException { final MimeBodyPart bp=new MimeBodyPart(null mimeType); if (contentId != null) { bp.setHeader(MimeHeader.HEADER_CONTENT_ID contentId); } return bp; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,build,public String  (String epilogue){ mBuilder.append(epilogue); return mBuilder.toString(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,buildBodyPart,public BodyPart  () throws MessagingException { final BodyPart bp=new MimeBodyPart(); bp.setBody(this.build()); return bp; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,contentUri,public static Uri  (long attachmentId Account account){ return AttachmentUtilities.getAttachmentUri(account.mId attachmentId); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,setBody,public MessageBuilder  (final Body body){ mBody=body; return this; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\mail\MessageTestUtils.java,textPart,public static BodyPart  (String mimeType String text) throws MessagingException { final TextBody textBody=new TextBody(text); final MimeBodyPart textPart=new MimeBodyPart(textBody); textPart.setHeader(MimeHeader.HEADER_CONTENT_TYPE mimeType); return textPart; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,testDeserializeFromJSON,"public void  () throws JSONException { final JSONObject json=new JSONObject(); json.put(EmailContent.HostAuthColumns.PROTOCOL ""IMAP""); json.put(EmailContent.HostAuthColumns.ADDRESS ""dhoff@example.com""); json.put(EmailContent.HostAuthColumns.PORT 1337); json.put(EmailContent.HostAuthColumns.FLAGS 293847); json.put(EmailContent.HostAuthColumns.LOGIN ""dhoff""); json.put(EmailContent.HostAuthColumns.PASSWORD ""daknightrida""); json.put(EmailContent.HostAuthColumns.DOMAIN ""example.com""); json.put(EmailContent.HostAuthColumns.CLIENT_CERT_ALIAS ""I'm a client cert alias""); json.put(HostAuth.JSON_TAG_CREDENTIAL Credential.EMPTY.toJson()); final HostAuth ha=HostAuth.fromJson(json); assertEquals(""IMAP"" ha.mProtocol); assertEquals(""dhoff@example.com"" ha.mAddress); assertEquals(1337 ha.mPort); assertEquals(293847 ha.mFlags); assertEquals(""dhoff"" ha.mLogin); assertEquals(""daknightrida"" ha.mPassword); assertEquals(""example.com"" ha.mDomain); assertEquals(""I'm a client cert alias"" ha.mClientCertAlias); assertEquals(Credential.EMPTY ha.mCredential); assertNull(ha.mServerCert); assertEquals(-1 ha.mCredentialKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,testParceling,"public void  (){ final HostAuth orig=new HostAuth(); orig.mPort=993; orig.mProtocol=""imap""; orig.mAddress=""example.com""; orig.mLogin=""user""; orig.mPassword=""supersecret""; orig.mDomain=""domain""; orig.mClientCertAlias=""certalias""; final Parcel p1=Parcel.obtain(); orig.writeToParcel(p1 0); p1.setDataPosition(0); final HostAuth unparceled1=new HostAuth(p1); p1.recycle(); assertEquals(orig unparceled1); assertEquals(orig.mCredentialKey unparceled1.mCredentialKey); assertEquals(orig.mCredential unparceled1.mCredential); orig.getOrCreateCredential(new MockContext()); final Parcel p2=Parcel.obtain(); orig.writeToParcel(p2 0); p2.setDataPosition(0); final HostAuth unparceled2=new HostAuth(p2); p2.recycle(); assertEquals(orig unparceled2); assertEquals(orig.mCredentialKey unparceled2.mCredentialKey); assertEquals(orig.mCredential unparceled2.mCredential); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,testSerializeAndDeserializeWithJSON,"public void  (){ final HostAuth before=new HostAuth(); before.mProtocol=""IMAP""; before.mAddress=""dhoff@example.com""; before.mPort=1337; before.mFlags=293847; before.setLogin(""dhoff"" ""daknightrida""); before.mDomain=""example.com""; before.mClientCertAlias=""I'm a client cert alias""; before.mServerCert=new byte[]{(byte)0xFF (byte)0xAA}; before.mCredentialKey=9873425; before.mCredential=Credential.EMPTY; before.ensureLoaded(getContext()); final HostAuth after=HostAuth.fromJson(before.toJson()); assertEquals(before.mProtocol after.mProtocol); assertEquals(before.mAddress after.mAddress); assertEquals(before.mPort after.mPort); assertEquals(before.mFlags after.mFlags); assertTrue(Arrays.equals(before.getLogin() after.getLogin())); assertEquals(before.mDomain after.mDomain); assertEquals(before.mClientCertAlias after.mClientCertAlias); assertEquals(before.mCredential after.mCredential); assertNull(after.mServerCert); assertEquals(-1 after.mCredentialKey); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,testSetConnectionFlags,"public void  (){ HostAuth ha=new HostAuth(); ha.setConnection(""imap"" ""server"" 123 0); assertEquals(0 ha.mFlags); ha.setConnection(""imap"" ""server"" -1 0); assertEquals(0 ha.mFlags); ha.setConnection(""pop3"" ""server"" 123 0); assertEquals(0 ha.mFlags); ha.setConnection(""pop3"" ""server"" -1 0); assertEquals(0 ha.mFlags); ha.setConnection(""eas"" ""server"" 123 0); assertEquals(0 ha.mFlags); ha.setConnection(""eas"" ""server"" -1 0); assertEquals(0 ha.mFlags); ha.setConnection(""smtp"" ""server"" 123 0); assertEquals(0 ha.mFlags); ha.setConnection(""smtp"" ""server"" -1 0); assertEquals(0 ha.mFlags); ha.setConnection(""imap"" ""server"" HostAuth.PORT_UNKNOWN HostAuth.FLAG_SSL); assertEquals(HostAuth.FLAG_SSL ha.mFlags); ha.setConnection(""imap"" ""server"" HostAuth.PORT_UNKNOWN HostAuth.FLAG_SSL | HostAuth.FLAG_TRUST_ALL); assertEquals(HostAuth.FLAG_SSL | HostAuth.FLAG_TRUST_ALL ha.mFlags); ha.setConnection(""imap"" ""server"" HostAuth.PORT_UNKNOWN HostAuth.FLAG_TLS); assertEquals(HostAuth.FLAG_TLS ha.mFlags); ha.setConnection(""imap"" ""server"" HostAuth.PORT_UNKNOWN HostAuth.FLAG_TLS | HostAuth.FLAG_TRUST_ALL); assertEquals(HostAuth.FLAG_TLS | HostAuth.FLAG_TRUST_ALL ha.mFlags); ha.setConnection(""imap"" ""server"" HostAuth.PORT_UNKNOWN HostAuth.FLAG_AUTHENTICATE); assertEquals(0 ha.mFlags); ha.setConnection(""imap"" ""server"" HostAuth.PORT_UNKNOWN 0xfffffff4); assertEquals(0x10 ha.mFlags); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,testSetConnectionWithCerts,"public void  (){ HostAuth ha=new HostAuth(); ha.setConnection(""eas"" ""server"" HostAuth.PORT_UNKNOWN HostAuth.FLAG_SSL ""client-cert""); assertEquals(HostAuth.FLAG_SSL ha.mFlags); assertEquals(""client-cert"" ha.mClientCertAlias); ha.setConnection(""eas"" ""server"" HostAuth.PORT_UNKNOWN HostAuth.FLAG_TLS ""client-cert""); assertEquals(HostAuth.FLAG_TLS ha.mFlags); assertEquals(""client-cert"" ha.mClientCertAlias); ha.setConnection(""eas"" ""server"" HostAuth.PORT_UNKNOWN HostAuth.FLAG_SSL | HostAuth.FLAG_TRUST_ALL ""client-cert""); assertEquals(HostAuth.FLAG_SSL | HostAuth.FLAG_TRUST_ALL ha.mFlags); assertEquals(""client-cert"" ha.mClientCertAlias); try { ha.setConnection(""eas"" ""server"" HostAuth.PORT_UNKNOWN 0 ""client-cert""); fail(""Shouldn't be able to set a client certificate on an unsecure connection""); } catch ( IllegalArgumentException expected) { } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,testSetLogin,"public void  (){ HostAuth ha=new HostAuth(); ha.setLogin(""user:password""); assertEquals(""user"" ha.mLogin); assertEquals(""password"" ha.mPassword); ha.setLogin(""%20us%20er%20:password""); assertEquals(""%20us%20er%20"" ha.mLogin); assertEquals(""password"" ha.mPassword); ha.setLogin(""user:%20pass%20word%20""); assertEquals(""user"" ha.mLogin); assertEquals(""%20pass%20word%20"" ha.mPassword); ha.setLogin(""user:""); assertEquals(""user"" ha.mLogin); assertEquals("""" ha.mPassword); ha.setLogin("":password""); assertEquals("""" ha.mLogin); assertEquals(""password"" ha.mPassword); ha.setLogin(""""); assertNull(ha.mLogin); assertNull(ha.mPassword); ha.setLogin(null); assertNull(ha.mLogin); assertNull(ha.mPassword); ha.setLogin(""userpassword""); assertEquals(""userpassword"" ha.mLogin); assertNull(ha.mPassword); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\HostAuthTests.java,testSetLoginAuthenticate,"public void  (){ HostAuth ha=new HostAuth(); ha.mFlags=0x00000000; ha.setLogin(""user"" ""password""); assertEquals(HostAuth.FLAG_AUTHENTICATE ha.mFlags); ha.mFlags=0x00000000; ha.setLogin(""user"" """"); assertEquals(HostAuth.FLAG_AUTHENTICATE ha.mFlags); ha.mFlags=0xffffffff; ha.setLogin("""" ""password""); assertEquals(~HostAuth.FLAG_AUTHENTICATE ha.mFlags); ha.mFlags=0x00000000; ha.setLogin(""user"" null); assertEquals(HostAuth.FLAG_AUTHENTICATE ha.mFlags); ha.mFlags=0xffffffff; ha.setLogin(null ""password""); assertEquals(~HostAuth.FLAG_AUTHENTICATE ha.mFlags); ha.mFlags=0xffffffff; ha.setLogin(null null); assertEquals(~HostAuth.FLAG_AUTHENTICATE ha.mFlags); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\QuickResponseTests.java,QuickResponseTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\QuickResponseTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=getMockContext(); mProvider=getProvider(); ContentCache.invalidateAllCaches(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\service\SearchParamsTests.java,brokentestParcel,"public void  (){ SearchParams params=new SearchParams(1 ""query""); params.mIncludeChildren=true; params.mLimit=66; params.mOffset=99; Parcel parcel=Parcel.obtain(); params.writeToParcel(parcel 0); parcel.setDataPosition(0); SearchParams readParams=SearchParams.CREATOR.createFromParcel(parcel); assertEquals(params.mFilter readParams.mFilter); assertEquals(params.mIncludeChildren readParams.mIncludeChildren); assertEquals(params.mLimit readParams.mLimit); assertEquals(params.mOffset readParams.mOffset); assertEquals(params.mMailboxId readParams.mMailboxId); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,MailboxTests,public  (){ super(EmailProvider.class EmailContent.AUTHORITY); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,buildTestMailbox,private Mailbox  (String serverId String name){ Mailbox testMailbox=new Mailbox(); testMailbox.mServerId=serverId; testMailbox.mDisplayName=(name == null) ? TEST_DISPLAY_NAME : name; testMailbox.mParentServerId=TEST_PARENT_SERVER_ID; testMailbox.mSyncKey=TEST_SYNC_KEY; testMailbox.mSyncStatus=TEST_SYNC_STATUS; testMailbox.mAccountKey=1L; testMailbox.mDelimiter='/'; testMailbox.mFlags=2; testMailbox.mFlagVisible=true; testMailbox.mParentKey=3L; testMailbox.mSyncInterval=4; testMailbox.mSyncLookback=5; testMailbox.mSyncTime=6L; testMailbox.mType=7; testMailbox.mLastTouchedTime=10L; return testMailbox; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,createMessage,"private static Message  (Context c Mailbox b boolean starred boolean read int flagLoaded){ Message message=ProviderTestUtils.setupMessage(""1"" b.mAccountKey b.mId true false c starred read); message.mFlagLoaded=flagLoaded; message.save(c); return message; } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,getMessageCount,private int  (long mailboxId){ return Utility.getFirstRowInt(mMockContext ContentUris.withAppendedId(Mailbox.CONTENT_URI mailboxId) new String[]{MailboxColumns.MESSAGE_COUNT} null null null 0); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,setUp,@Override public void  () throws Exception { super.setUp(); mMockContext=getMockContext(); mProvider=getProvider(); ContentCache.invalidateAllCaches(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testCanMoveFrom,"public void  (){ final Context c=mMockContext; Account a=ProviderTestUtils.setupAccount(""acct1"" true c); Mailbox bi=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_INBOX); Mailbox bm=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_MAIL); Mailbox bd=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_DRAFTS); Mailbox bo=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_OUTBOX); assertTrue(bi.canHaveMessagesMoved()); assertTrue(bm.canHaveMessagesMoved()); assertFalse(bd.canHaveMessagesMoved()); assertFalse(bo.canHaveMessagesMoved()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testDelete,"public void  (){ final Context c=mMockContext; Account account1=ProviderTestUtils.setupAccount(""mailbox-delete"" true c); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true c); long box1Id=box1.mId; Mailbox box2=ProviderTestUtils.setupMailbox(""box2"" account1Id true c); long box2Id=box2.mId; String selection=EmailContent.MailboxColumns.ACCOUNT_KEY + ""=?""; String[] selArgs=new String[]{String.valueOf(account1Id)}; int numBoxes=EmailContent.count(c Mailbox.CONTENT_URI selection selArgs); assertEquals(2 numBoxes); Uri uri=ContentUris.withAppendedId(Mailbox.CONTENT_URI box1Id); c.getContentResolver().delete(uri null null); numBoxes=EmailContent.count(c Mailbox.CONTENT_URI selection selArgs); assertEquals(1 numBoxes); uri=ContentUris.withAppendedId(Mailbox.CONTENT_URI box2Id); c.getContentResolver().delete(uri null null); numBoxes=EmailContent.count(c Mailbox.CONTENT_URI selection selArgs); assertEquals(0 numBoxes); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testFindMailboxOfType,"public void  (){ final Context context=mMockContext; Account acct1=ProviderTestUtils.setupAccount(""acct1"" true context); Mailbox acct1Inbox=ProviderTestUtils.setupMailbox(""Inbox1"" acct1.mId true context Mailbox.TYPE_INBOX); Mailbox acct1Calendar=ProviderTestUtils.setupMailbox(""Cal1"" acct1.mId true context Mailbox.TYPE_CALENDAR); Mailbox acct1Contacts=ProviderTestUtils.setupMailbox(""Con1"" acct1.mId true context Mailbox.TYPE_CONTACTS); Account acct2=ProviderTestUtils.setupAccount(""acct1"" true context); Mailbox acct2Inbox=ProviderTestUtils.setupMailbox(""Inbox2"" acct2.mId true context Mailbox.TYPE_INBOX); Mailbox acct2Calendar=ProviderTestUtils.setupMailbox(""Cal2"" acct2.mId true context Mailbox.TYPE_CALENDAR); Mailbox acct2Contacts=ProviderTestUtils.setupMailbox(""Con2"" acct2.mId true context Mailbox.TYPE_CONTACTS); assertEquals(acct1Inbox.mId Mailbox.findMailboxOfType(context acct1.mId Mailbox.TYPE_INBOX)); assertEquals(acct2Inbox.mId Mailbox.findMailboxOfType(context acct2.mId Mailbox.TYPE_INBOX)); assertEquals(acct1Calendar.mId Mailbox.findMailboxOfType(context acct1.mId Mailbox.TYPE_CALENDAR)); assertEquals(acct2Calendar.mId Mailbox.findMailboxOfType(context acct2.mId Mailbox.TYPE_CALENDAR)); assertEquals(acct1Contacts.mId Mailbox.findMailboxOfType(context acct1.mId Mailbox.TYPE_CONTACTS)); assertEquals(acct2Contacts.mId Mailbox.findMailboxOfType(context acct2.mId Mailbox.TYPE_CONTACTS)); assertEquals(Mailbox.NO_MAILBOX Mailbox.findMailboxOfType(context acct1.mId Mailbox.TYPE_DRAFTS)); assertEquals(Mailbox.NO_MAILBOX Mailbox.findMailboxOfType(context acct1.mId Mailbox.TYPE_OUTBOX)); context.getContentResolver().delete(ContentUris.withAppendedId(Account.CONTENT_URI acct1.mId) null null); assertEquals(Mailbox.NO_MAILBOX Mailbox.findMailboxOfType(context acct1.mId Mailbox.TYPE_INBOX)); assertEquals(Mailbox.NO_MAILBOX Mailbox.findMailboxOfType(context acct1.mId Mailbox.TYPE_CALENDAR)); assertEquals(Mailbox.NO_MAILBOX Mailbox.findMailboxOfType(context acct1.mId Mailbox.TYPE_CONTACTS)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testGetDisplayName,"public void  (){ final Context c=mMockContext; Account a=ProviderTestUtils.setupAccount(""acct1"" true c); Mailbox bi=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_INBOX); Mailbox bm=ProviderTestUtils.setupMailbox(""b2"" a.mId true c Mailbox.TYPE_MAIL); assertEquals(""b1"" Mailbox.getDisplayName(c bi.mId)); assertEquals(""b2"" Mailbox.getDisplayName(c bm.mId)); assertEquals(null Mailbox.getDisplayName(c 999999)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testGetHashes,public void  (){ final Context c=mMockContext; Mailbox testMailbox=buildTestMailbox(TEST_SERVER_ID); testMailbox.save(c); Object[] testHash; testHash=new Object[]{testMailbox.mId TEST_DISPLAY_NAME TEST_SERVER_ID TEST_PARENT_SERVER_ID 1L 7 (int)'/' TEST_SYNC_KEY 5 4 6L true 2 8 TEST_SYNC_STATUS 3L 9L 10L}; MoreAsserts.assertEquals(testHash testMailbox.getHashes()); testMailbox.mDisplayName=null; testMailbox.mParentServerId=null; testMailbox.mServerId=null; testMailbox.mSyncKey=null; testMailbox.mSyncStatus=null; testMailbox.mFlagVisible=false; testHash=new Object[]{testMailbox.mId null null null 1L 7 (int)'/' null 5 4 6L false 2 8 null 3L 9L 10L}; MoreAsserts.assertEquals(testHash testMailbox.getHashes()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testGetMailboxForMessageId,"public void  (){ final Context c=mMockContext; Mailbox b1=ProviderTestUtils.setupMailbox(""box1"" 1 true c Mailbox.TYPE_MAIL); Mailbox b2=ProviderTestUtils.setupMailbox(""box2"" 1 true c Mailbox.TYPE_MAIL); Message m1=ProviderTestUtils.setupMessage(""1"" b1.mAccountKey b1.mId true true c false false); Message m2=ProviderTestUtils.setupMessage(""1"" b2.mAccountKey b2.mId true true c false false); ProviderTestUtils.assertMailboxEqual(""x"" b1 Mailbox.getMailboxForMessageId(c m1.mId)); ProviderTestUtils.assertMailboxEqual(""x"" b2 Mailbox.getMailboxForMessageId(c m2.mId)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testGetMailboxType,"public void  (){ final Context c=mMockContext; Account a=ProviderTestUtils.setupAccount(""acct1"" true c); Mailbox bi=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_INBOX); Mailbox bm=ProviderTestUtils.setupMailbox(""b2"" a.mId true c Mailbox.TYPE_MAIL); assertEquals(Mailbox.TYPE_INBOX Mailbox.getMailboxType(c bi.mId)); assertEquals(Mailbox.TYPE_MAIL Mailbox.getMailboxType(c bm.mId)); assertEquals(-1 Mailbox.getMailboxType(c 999999)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testIsRefreshable,"public void  (){ final Context c=mMockContext; Account a=ProviderTestUtils.setupAccount(""acct1"" true c); Mailbox bi=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_INBOX); Mailbox bm=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_MAIL); Mailbox bd=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_DRAFTS); Mailbox bo=ProviderTestUtils.setupMailbox(""b1"" a.mId true c Mailbox.TYPE_OUTBOX); assertTrue(Mailbox.isRefreshable(c bi.mId)); assertTrue(Mailbox.isRefreshable(c bm.mId)); assertFalse(Mailbox.isRefreshable(c bd.mId)); assertFalse(Mailbox.isRefreshable(c bo.mId)); assertFalse(Mailbox.isRefreshable(c 9999999)); assertFalse(Mailbox.isRefreshable(c Mailbox.QUERY_ALL_DRAFTS)); assertFalse(Mailbox.isRefreshable(c Mailbox.QUERY_ALL_INBOXES)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testMessageCount,"public void  (){ final Context c=mMockContext; Account a1=ProviderTestUtils.setupAccount(""holdflag-1"" true c); Account a2=ProviderTestUtils.setupAccount(""holdflag-2"" true c); Mailbox b1=ProviderTestUtils.setupMailbox(""box1"" a1.mId true c Mailbox.TYPE_INBOX); Mailbox b2=ProviderTestUtils.setupMailbox(""box2"" a1.mId true c Mailbox.TYPE_OUTBOX); Mailbox b3=ProviderTestUtils.setupMailbox(""box3"" a2.mId true c Mailbox.TYPE_INBOX); Mailbox b4=ProviderTestUtils.setupMailbox(""box4"" a2.mId true c Mailbox.TYPE_OUTBOX); Mailbox bt=ProviderTestUtils.setupMailbox(""boxT"" a2.mId true c Mailbox.TYPE_TRASH); assertEquals(0 getMessageCount(b1.mId)); assertEquals(0 getMessageCount(b2.mId)); assertEquals(0 getMessageCount(b3.mId)); assertEquals(0 getMessageCount(b4.mId)); assertEquals(0 getMessageCount(bt.mId)); assertEquals(0 Message.getFavoriteMessageCount(c)); assertEquals(0 Message.getFavoriteMessageCount(c a1.mId)); assertEquals(0 Message.getFavoriteMessageCount(c a2.mId)); Message m11=createMessage(c b1 true false Message.FLAG_LOADED_COMPLETE); Message m21=createMessage(c b2 false false Message.FLAG_LOADED_COMPLETE); Message m22=createMessage(c b2 true true Message.FLAG_LOADED_COMPLETE); Message m31=createMessage(c b3 false false Message.FLAG_LOADED_COMPLETE); Message m32=createMessage(c b3 false false Message.FLAG_LOADED_COMPLETE); Message m33=createMessage(c b3 true true Message.FLAG_LOADED_COMPLETE); Message mt1=createMessage(c bt true false Message.FLAG_LOADED_COMPLETE); Message mt2=createMessage(c bt true false Message.FLAG_LOADED_COMPLETE); Message mt3=createMessage(c bt false false Message.FLAG_LOADED_COMPLETE); assertEquals(1 getMessageCount(b1.mId)); assertEquals(2 getMessageCount(b2.mId)); assertEquals(3 getMessageCount(b3.mId)); assertEquals(0 getMessageCount(b4.mId)); assertEquals(3 getMessageCount(bt.mId)); assertEquals(3 Message.getFavoriteMessageCount(c)); assertEquals(2 Message.getFavoriteMessageCount(c a1.mId)); assertEquals(1 Message.getFavoriteMessageCount(c a2.mId)); ContentValues values=new ContentValues(); values.put(MessageColumns.MAILBOX_KEY b4.mId); getProvider().update(Message.CONTENT_URI values EmailContent.ID_SELECTION new String[]{"""" + m32.mId}); assertEquals(1 getMessageCount(b1.mId)); assertEquals(2 getMessageCount(b2.mId)); assertEquals(2 getMessageCount(b3.mId)); assertEquals(1 getMessageCount(b4.mId)); getProvider().delete(Message.CONTENT_URI EmailContent.ID_SELECTION new String[]{"""" + m11.mId}); getProvider().delete(Message.CONTENT_URI EmailContent.ID_SELECTION new String[]{"""" + m21.mId}); assertEquals(0 getMessageCount(b1.mId)); assertEquals(1 getMessageCount(b2.mId)); assertEquals(2 getMessageCount(b3.mId)); assertEquals(1 getMessageCount(b4.mId)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testParcelling,"public void  (){ Mailbox original=buildTestMailbox(""serverId"" ""display name for mailbox""); Parcel p=Parcel.obtain(); original.writeToParcel(p 0); p.setDataPosition(0); Mailbox unparcelled=Mailbox.CREATOR.createFromParcel(p); MoreAsserts.assertEquals(original.getHashes() unparcelled.getHashes()); Mailbox phony=buildTestMailbox(""different ID"" ""display name for mailbox""); assertFalse(Arrays.equals(phony.getHashes() unparcelled.getHashes())); p.recycle(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testParcellingWithPartialMailbox,"public void  (){ Mailbox unpopulated=new Mailbox(); unpopulated.mDisplayName=""the only thing filled in for some reason""; Parcel p=Parcel.obtain(); unpopulated.writeToParcel(p 0); p.setDataPosition(0); Mailbox unparcelled=Mailbox.CREATOR.createFromParcel(p); MoreAsserts.assertEquals(unpopulated.getHashes() unparcelled.getHashes()); p.recycle(); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testRestoreMailboxForPath,"public void  (){ final Context c=mMockContext; Mailbox testMailbox; testMailbox=ProviderTestUtils.setupMailbox(""a/b/c/box"" 1 true c Mailbox.TYPE_MAIL); ProviderTestUtils.assertMailboxEqual(""x"" testMailbox Mailbox.restoreMailboxForPath(c 1 ""a/b/c/box"")); assertNull(Mailbox.restoreMailboxForPath(c 2 ""a/b/c/box"")); assertNull(Mailbox.restoreMailboxForPath(c 1 ""a/b/c"")); assertNull(Mailbox.restoreMailboxForPath(c 1 ""a/b/c/%"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testRestoreMailboxOfType,"public void  (){ final Context context=getMockContext(); Account acct1=ProviderTestUtils.setupAccount(""acct1"" true context); Mailbox acct1Inbox=ProviderTestUtils.setupMailbox(""Inbox1"" acct1.mId true context Mailbox.TYPE_INBOX); Mailbox acct1Calendar=ProviderTestUtils.setupMailbox(""Cal1"" acct1.mId true context Mailbox.TYPE_CALENDAR); Mailbox acct1Contacts=ProviderTestUtils.setupMailbox(""Con1"" acct1.mId true context Mailbox.TYPE_CONTACTS); Account acct2=ProviderTestUtils.setupAccount(""acct1"" true context); Mailbox acct2Inbox=ProviderTestUtils.setupMailbox(""Inbox2"" acct2.mId true context Mailbox.TYPE_INBOX); Mailbox acct2Calendar=ProviderTestUtils.setupMailbox(""Cal2"" acct2.mId true context Mailbox.TYPE_CALENDAR); Mailbox acct2Contacts=ProviderTestUtils.setupMailbox(""Con2"" acct2.mId true context Mailbox.TYPE_CONTACTS); ProviderTestUtils.assertMailboxEqual(""testRestoreMailboxOfType"" acct1Inbox Mailbox.restoreMailboxOfType(context acct1.mId Mailbox.TYPE_INBOX)); ProviderTestUtils.assertMailboxEqual(""testRestoreMailboxOfType"" acct2Inbox Mailbox.restoreMailboxOfType(context acct2.mId Mailbox.TYPE_INBOX)); ProviderTestUtils.assertMailboxEqual(""testRestoreMailboxOfType"" acct1Calendar Mailbox.restoreMailboxOfType(context acct1.mId Mailbox.TYPE_CALENDAR)); ProviderTestUtils.assertMailboxEqual(""testRestoreMailboxOfType"" acct2Calendar Mailbox.restoreMailboxOfType(context acct2.mId Mailbox.TYPE_CALENDAR)); ProviderTestUtils.assertMailboxEqual(""testRestoreMailboxOfType"" acct1Contacts Mailbox.restoreMailboxOfType(context acct1.mId Mailbox.TYPE_CONTACTS)); ProviderTestUtils.assertMailboxEqual(""testRestoreMailboxOfType"" acct2Contacts Mailbox.restoreMailboxOfType(context acct2.mId Mailbox.TYPE_CONTACTS)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testRestoreMailboxWithId,"public void  (){ final Context c=mMockContext; Mailbox testMailbox; testMailbox=ProviderTestUtils.setupMailbox(""box1"" 1 true c Mailbox.TYPE_MAIL); ProviderTestUtils.assertMailboxEqual(""x"" testMailbox Mailbox.restoreMailboxWithId(c testMailbox.mId)); testMailbox=ProviderTestUtils.setupMailbox(""box2"" 1 true c Mailbox.TYPE_MAIL); ProviderTestUtils.assertMailboxEqual(""x"" testMailbox Mailbox.restoreMailboxWithId(c testMailbox.mId)); assertNull(Mailbox.restoreMailboxWithId(c 8)); assertNull(Mailbox.restoreMailboxWithId(c -1)); assertNull(Mailbox.restoreMailboxWithId(c Long.MAX_VALUE)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\provider\MailboxTests.java,testSave,"public void  (){ final Context c=mMockContext; Account account1=ProviderTestUtils.setupAccount(""mailbox-save"" true c); long account1Id=account1.mId; Mailbox box1=ProviderTestUtils.setupMailbox(""box1"" account1Id true c); long box1Id=box1.mId; Mailbox box2=Mailbox.restoreMailboxWithId(c box1Id); ProviderTestUtils.assertMailboxEqual(""testMailboxSave"" box1 box2); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,DelayedOperationsForTest,public  (){ super(null); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,brokentestCancel,public void  (){ final AtomicInteger i=new AtomicInteger(1); Runnable r; mDelayedOperations.post(r=new Runnable(){ @Override public void run(){ i.addAndGet(2); } } ); mDelayedOperations.removeCallbacks(r); mDelayedOperations.post(new Runnable(){ @Override public void run(){ i.addAndGet(4); } } ); assertEquals(1 mDelayedOperations.mPendingOperations.size()); assertEquals(1 i.get()); mDelayedOperations.runQueuedOperations(); assertEquals(5 i.get()); assertEquals(0 mDelayedOperations.mPendingOperations.size()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,brokentestCancelAll,public void  (){ final AtomicInteger i=new AtomicInteger(1); mDelayedOperations.post(new Runnable(){ @Override public void run(){ i.addAndGet(2); } } ); mDelayedOperations.post(new Runnable(){ @Override public void run(){ i.addAndGet(4); } } ); assertEquals(2 mDelayedOperations.mPendingOperations.size()); assertEquals(1 i.get()); mDelayedOperations.removeCallbacks(); assertEquals(0 mDelayedOperations.mPostedToHandler.size()); assertEquals(1 i.get()); assertEquals(0 mDelayedOperations.mPendingOperations.size()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,brokentestEnueue,public void  (){ final AtomicInteger i=new AtomicInteger(1); mDelayedOperations.post(new Runnable(){ @Override public void run(){ i.addAndGet(2); } } ); mDelayedOperations.post(new Runnable(){ @Override public void run(){ i.addAndGet(4); } } ); assertEquals(2 mDelayedOperations.mPendingOperations.size()); assertEquals(1 i.get()); mDelayedOperations.runQueuedOperations(); assertEquals(7 i.get()); assertEquals(0 mDelayedOperations.mPendingOperations.size()); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,cancelRunnable,@Override void  (Runnable r){ mPostedToHandler.remove(r); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,postRunnable,@Override void  (Runnable r){ mPostedToHandler.add(r); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,run,@Override public void  (){ i.addAndGet(4); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,runQueuedOperations,public void  (){ for ( Runnable r : mPostedToHandler) { r.run(); } mPostedToHandler.clear(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\DelayedOperationsTests.java,setUp,@Override protected void  () throws Exception { super.setUp(); mDelayedOperations=new DelayedOperationsForTest(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,assertSchemeNameValid,private void  (String s){ assertTrue(Pattern.matches(SAFE_SCHEME_PATTERN s)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,randomString,private String  (Random r){ int length=(r.nextInt() % 5) + 10; StringBuilder sb=new StringBuilder(); for (int i=0; i < length; i++) { sb.append(RANDOM_DICT[Math.abs(r.nextInt()) % RANDOM_DICT.length]); } return sb.toString(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,testSchemeNameEscapeAlreadySafe,"public void  (){ assertEquals(""http"" SSLUtils.escapeForSchemeName(""http"")); assertEquals(""https"" SSLUtils.escapeForSchemeName(""https"")); assertEquals(""ftp"" SSLUtils.escapeForSchemeName(""ftp"")); assertEquals(""z39.50r"" SSLUtils.escapeForSchemeName(""z39.50r"")); assertEquals(""fake-protocol.yes"" SSLUtils.escapeForSchemeName(""fake-protocol.yes"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,testSchemeNameEscapeIsSafe,"public void  (){ assertSchemeNameValid(SSLUtils.escapeForSchemeName(""name with spaces"")); assertSchemeNameValid(SSLUtils.escapeForSchemeName(""odd * & characters"")); assertSchemeNameValid(SSLUtils.escapeForSchemeName(""f3v!l;891023-47 +"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\SSLUtilsTest.java,testSchemeNamesAreMoreOrLessUnique,"public void  (){ assertEquals(SSLUtils.escapeForSchemeName(""name with spaces"") SSLUtils.escapeForSchemeName(""name with spaces"")); assertEquals(SSLUtils.escapeForSchemeName(""NAME with spaces"") SSLUtils.escapeForSchemeName(""name with spaces"")); Random random=new Random(314159); for (int i=0; i < 100; i++) { String s1=randomString(random); String s2=randomString(random); MoreAsserts.assertNotEqual(SSLUtils.escapeForSchemeName(s1) SSLUtils.escapeForSchemeName(s2)); } } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\AttachmentUtilitiesTests.java,testGetFilenameExtension,"public void  (){ final String FILE_NO_EXTENSION=""myfile""; final String FILE_EXTENSION=""myfile.pDf""; final String FILE_TWO_EXTENSIONS=""myfile.false.AbC""; assertNull(AttachmentUtilities.getFilenameExtension(null)); assertNull(AttachmentUtilities.getFilenameExtension("""")); assertNull(AttachmentUtilities.getFilenameExtension(FILE_NO_EXTENSION)); assertEquals(""pdf"" AttachmentUtilities.getFilenameExtension(FILE_EXTENSION)); assertEquals(""abc"" AttachmentUtilities.getFilenameExtension(FILE_TWO_EXTENSIONS)); AttachmentUtilities.getFilenameExtension(""filename.""); AttachmentUtilities.getFilenameExtension("".extension""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\AttachmentUtilitiesTests.java,testInferMimeType,"public void  (){ final String DEFAULT_MIX=""Application/Octet-stream""; final String DEFAULT_LOWER=DEFAULT_MIX.toLowerCase(); final String TEXT_PLAIN=""text/plain""; final String TYPE_IMG_PNG=""image/png""; final String FILE_PNG=""myfile.false.pNg""; final String FILE_ABC=""myfile.false.aBc""; final String FILE_NO_EXT=""myfile""; assertEquals(""message/rfc822"" AttachmentUtilities.inferMimeType(""a.eml"" null)); assertEquals(""message/rfc822"" AttachmentUtilities.inferMimeType(""a.eml"" """")); assertEquals(""message/rfc822"" AttachmentUtilities.inferMimeType(""a.eml"" DEFAULT_LOWER)); assertEquals(""message/rfc822"" AttachmentUtilities.inferMimeType(""a.eMl"" TEXT_PLAIN)); assertEquals(""message/rfc822"" AttachmentUtilities.inferMimeType(""a.eml"" TYPE_IMG_PNG)); assertEquals(""mime/type"" AttachmentUtilities.inferMimeType(FILE_PNG ""Mime/TyPe"")); assertEquals(""mime/type"" AttachmentUtilities.inferMimeType(FILE_ABC ""Mime/TyPe"")); assertEquals(""mime/type"" AttachmentUtilities.inferMimeType(FILE_NO_EXT ""Mime/TyPe"")); assertEquals(""mime/type"" AttachmentUtilities.inferMimeType(null ""Mime/TyPe"")); assertEquals(""mime/type"" AttachmentUtilities.inferMimeType("""" ""Mime/TyPe"")); assertEquals(""image/png"" AttachmentUtilities.inferMimeType(FILE_PNG null)); assertEquals(""image/png"" AttachmentUtilities.inferMimeType(FILE_PNG """")); assertEquals(""image/png"" AttachmentUtilities.inferMimeType(FILE_PNG DEFAULT_MIX)); assertEquals(""image/png"" AttachmentUtilities.inferMimeType(FILE_PNG TEXT_PLAIN)); assertEquals(""application/abc"" AttachmentUtilities.inferMimeType(FILE_ABC null)); assertEquals(""application/abc"" AttachmentUtilities.inferMimeType(FILE_ABC """")); assertEquals(""application/abc"" AttachmentUtilities.inferMimeType(FILE_ABC DEFAULT_MIX)); assertEquals(DEFAULT_LOWER AttachmentUtilities.inferMimeType(FILE_NO_EXT null)); assertEquals(DEFAULT_LOWER AttachmentUtilities.inferMimeType(FILE_NO_EXT """")); assertEquals(DEFAULT_LOWER AttachmentUtilities.inferMimeType(FILE_NO_EXT DEFAULT_MIX)); assertEquals(DEFAULT_LOWER AttachmentUtilities.inferMimeType(null null)); assertEquals(DEFAULT_LOWER AttachmentUtilities.inferMimeType("""" """")); assertEquals(TEXT_PLAIN AttachmentUtilities.inferMimeType(FILE_ABC TEXT_PLAIN)); assertEquals(TEXT_PLAIN AttachmentUtilities.inferMimeType(FILE_NO_EXT TEXT_PLAIN)); assertEquals(TEXT_PLAIN AttachmentUtilities.inferMimeType(null TEXT_PLAIN)); assertEquals(TEXT_PLAIN AttachmentUtilities.inferMimeType("""" TEXT_PLAIN)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,MyTask,public  (Tracker tracker){ super(tracker); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,MyTaskSubClass,public  (Tracker tracker){ super(tracker); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,doInBackground,@Override protected String  (String... params){ mDoInBackgroundArg=params; return mDoInBackgroundResult; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,onCancelled,@Override protected void  (String result){ mOnCancelledArg=result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,onSuccess,@Override protected void  (String result){ mOnPostExecuteArg=result; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,testAll,"public void  () throws Exception { final EmailAsyncTask.Tracker tracker=new EmailAsyncTask.Tracker(); assertEquals(0 tracker.getTaskCountForTest()); final MyTask task1=new MyTask(tracker); assertEquals(1 tracker.getTaskCountForTest()); final MyTask task2=new MyTask(tracker); assertEquals(2 tracker.getTaskCountForTest()); final MyTask task3=new MyTask(tracker); assertEquals(3 tracker.getTaskCountForTest()); final MyTask task4=new MyTask(tracker); assertEquals(4 tracker.getTaskCountForTest()); task1.mDoInBackgroundResult=""R""; assertEquals(""R"" task1.callDoInBackgroundForTest(""1"" ""2"")); MoreAsserts.assertEquals(new String[]{""1"" ""2""} task1.mDoInBackgroundArg); task1.callOnPostExecuteForTest(""a""); assertEquals(3 tracker.getTaskCountForTest()); assertEquals(""a"" task1.mOnPostExecuteArg); assertNull(task1.mOnCancelledArg); task3.callOnCancelledForTest(""b""); assertEquals(2 tracker.getTaskCountForTest()); assertNull(task3.mOnPostExecuteArg); assertEquals(""b"" task3.mOnCancelledArg); tracker.cancelAllInterrupt(); assertEquals(0 tracker.getTaskCountForTest()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,testCancellOthers,public void  (){ final EmailAsyncTask.Tracker tracker=new EmailAsyncTask.Tracker(); final MyTask task1=new MyTask(tracker); final MyTask task2=new MyTask(tracker); final MyTask task3=new MyTask(tracker); final MyTask sub1=new MyTaskSubClass(tracker); final MyTask sub2=new MyTaskSubClass(tracker); final MyTask sub3=new MyTaskSubClass(tracker); assertEquals(6 tracker.getTaskCountForTest()); tracker.cancelOthers(task3); assertEquals(4 tracker.getTaskCountForTest()); assertTrue(tracker.containsTaskForTest(task3)); tracker.cancelOthers(sub1); assertEquals(2 tracker.getTaskCountForTest()); assertTrue(tracker.containsTaskForTest(task3)); assertTrue(tracker.containsTaskForTest(sub1)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\EmailAsyncTaskTests.java,testNullTracker,public void  (){ final MyTask task1=new MyTask(null); task1.unregisterSelf(); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,createNewFile,@Override public boolean  (File f) throws IOException { return true; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,getCountdownFileCreator,private static NewFileCreator  (){ return new NewFileCreator(){ private int mCountdown=5; @Override public boolean createNewFile( File f) throws IOException { return mCountdown-- <= 0; } } ; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,getTrueFileCreator,private static NewFileCreator  (){ return new NewFileCreator(){ @Override public boolean createNewFile( File f) throws IOException { return true; } } ; } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,testCreateUniqueFile,"@SmallTest public void  () throws Exception { final File directory=new IsolatedContext(new MockContentResolver() getContext()).getFilesDir(); final File created1=Utility.createUniqueFileInternal(getTrueFileCreator() directory ""file""); assertNotNull(create"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,testCreateUniqueFileCompare,"@SmallTest public void  () throws Exception { final File directory=new IsolatedContext(new MockContentResolver() getContext()).getFilesDir(); final File created1=Utility.createUniqueFileInternal(getCountdownFileCreator() directory ""file""); assertNotNull(c"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,testCreateUniqueFileExtensions,"@SmallTest public void  () throws Exception { final File directory=new IsolatedContext(new MockContentResolver() getContext()).getFilesDir(); final File created1=Utility.createUniqueFileInternal(getTrueFileCreator() directory ""file""); assertNotNull(create"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,testCreateUniqueFileWithPercent,"@SmallTest public void  () throws Exception { final File directory=new IsolatedContext(new MockContentResolver() getContext()).getFilesDir(); final File created1=Utility.createUniqueFileInternal(getTrueFileCreator() directory ""file%s""); assertNotNull(crea"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,testParseDateTimes,"@SmallTest public void  () throws Exception { testParseDateTimesHelper(""20090211T180303Z"" 2009 2 11 18 3 3); testParseDateTimesHelper(""20090211"" 2009 2 11 0 0 0); try { testParseDateTimesHelper(""200902"" 0 0 0 0 0 0); fail(""Expected ParseException""); } cat"
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,testParseDateTimesHelper,private void  (String date int year int month int day int hour int minute int second) throws Exception { GregorianCalendar cal=Utility.parseDateTimeToCalendar(date); assertEquals(year cal.get(Calendar.YEAR)); assertEquals(month cal.get(Calendar.MONTH) + 1); assertEquals(day cal.get(Calendar.DAY_OF_MONTH)); assertEquals(hour cal.get(Calendar.HOUR_OF_DAY)); assertEquals(minute cal.get(Calendar.MINUTE)); assertEquals(second cal.get(Calendar.SECOND)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,testParseEmailDateTime,"@SmallTest public void  () throws Exception { testParseEmailDateTimeHelper(""2010-02-23T16:01:05.000Z"" 2010 2 23 16 1 5 0); testParseEmailDateTimeHelper(""2009-02-11T18:03:31.123Z"" 2009 2 11 18 3 31 123); testParseEmailDateTimeHelper(""2009-02-11"" 2009 2 11 "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\UtilityTest.java,testParseEmailDateTimeHelper,"private void  (String date int year int month int day int hour int minute int second int millis) throws Exception { GregorianCalendar cal=new GregorianCalendar(year month - 1 day hour minute second); cal.setTimeZone(TimeZone.getTimeZone(""GMT"")); long timeInMillis=Utility.parseEmailDateTimeToMillis(date); assertEquals(cal.getTimeInMillis() + millis timeInMillis); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,assertHighlightUnchanged,private void  (String str){ assertEquals(str TextUtilities.highlightTermsInHtml(str null)); } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentestHighlightDuplicateTermText,"public void  (){ String text=""This should be visible""; SpannableStringBuilder ssb=(SpannableStringBuilder)TextUtilities.highlightTermsInText(text ""should should""); BackgroundColorSpan[] spans=ssb.getSpans(0 ssb.length() BackgroundColorSpan.class); assertEquals(1 spans.length); BackgroundColorSpan span=spans[0]; assertEquals(text.indexOf(""should"") ssb.getSpanStart(span)); assertEquals(text.indexOf("" be"") ssb.getSpanEnd(span)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentestHighlightOverlapTermText,"public void  (){ String text=""This shoulder is visible""; SpannableStringBuilder ssb=(SpannableStringBuilder)TextUtilities.highlightTermsInText(text ""should ould""); BackgroundColorSpan[] spans=ssb.getSpans(0 ssb.length() BackgroundColorSpan.class); assertEquals(1 spans.length); BackgroundColorSpan span=spans[0]; assertEquals(text.indexOf(""should"") ssb.getSpanStart(span)); assertEquals(text.indexOf(""er is"") ssb.getSpanEnd(span)); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentestHighlightOverlapTermText2,"public void  (){ String text=""The shoulders are visible""; SpannableStringBuilder ssb=(SpannableStringBuilder)TextUtilities.highlightTermsInText(text ""shoulder shoulders""); BackgroundColorSpan[] spans=ssb.getSpans(0 ssb.length() BackgroundColorSpan.class); assertEquals(2 spans.length); BackgroundColorSpan span=spans[0]; assertEquals(text.indexOf(""shoulder"") ssb.getSpanStart(span)); assertEquals(text.indexOf(""s are visible"") ssb.getSpanEnd(span)); span=spans[1]; assertEquals(text.indexOf(""s are visible"") ssb.getSpanStart(span)); assertEquals(text.indexOf("" are visible"") ssb.getSpanEnd(span)); assertEquals(text ssb.toString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentestHighlightSingleTermText,"public void  (){ String text=""This< should be visibl>e""; SpannableStringBuilder ssb=(SpannableStringBuilder)TextUtilities.highlightTermsInText(text ""Visi""); BackgroundColorSpan[] spans=ssb.getSpans(0 ssb.length() BackgroundColorSpan.class); assertEquals(1 spans.length); BackgroundColorSpan span=spans[0]; assertEquals(text.indexOf(""visi"") ssb.getSpanStart(span)); assertEquals(text.indexOf(""bl>e"") ssb.getSpanEnd(span)); assertEquals(text ssb.toString()); text=""The research word should be a search result""; ssb=(SpannableStringBuilder)TextUtilities.highlightTermsInText(text ""Search""); spans=ssb.getSpans(0 ssb.length() BackgroundColorSpan.class); assertEquals(2 spans.length); span=spans[0]; assertEquals(text.indexOf(""search word"") ssb.getSpanStart(span)); assertEquals(text.indexOf("" word"") ssb.getSpanEnd(span)); span=spans[1]; assertEquals(text.indexOf(""search result"") ssb.getSpanStart(span)); assertEquals(text.indexOf("" result"") ssb.getSpanEnd(span)); assertEquals(text ssb.toString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,brokentestHighlightTwoTermText,"public void  (){ String text=""This should be visible""; SpannableStringBuilder ssb=(SpannableStringBuilder)TextUtilities.highlightTermsInText(text ""visi should""); BackgroundColorSpan[] spans=ssb.getSpans(0 ssb.length() BackgroundColorSpan.class); assertEquals(2 spans.length); BackgroundColorSpan span=spans[0]; assertEquals(text.indexOf(""should"") ssb.getSpanStart(span)); assertEquals(text.indexOf("" be"") ssb.getSpanEnd(span)); span=spans[1]; assertEquals(text.indexOf(""visi"") ssb.getSpanStart(span)); assertEquals(text.indexOf(""ble"") ssb.getSpanEnd(span)); assertEquals(text ssb.toString()); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,findTagEnd,private void  (String text String tag){ int calculatedEnd=TextUtilities.findTagEnd(text tag 0); int knownEnd=text.indexOf('@') + 2; if (knownEnd == 1) { assertEquals(-1 calculatedEnd); } else { assertEquals(calculatedEnd knownEnd); } } 
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,testFindTagEnd,"public void  (){ findTagEnd(""<tag foo=\""bar\""@ /> <blah blah>"" ""tag""); findTagEnd(""<tag foo=\""bar\"">some text@</tag>some more text"" ""tag""); findTagEnd(""<tag foo=\""bar\"">some more text but no end tag"" ""tag""); findTagEnd(""<tag foo=\""bar\"">some more text but no end tag"" ""tag ""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,testHighlightNoTerm,"public void  (){ assertHighlightUnchanged(""<html><style foo=\""bar\"">Not</style>Visible</html>""); assertHighlightUnchanged(""<html><nostrip foo=\""bar\"">Is</nostrip>Visible</html>""); assertHighlightUnchanged(""<html>Visible<style foo=\""bar\"">Not""); assertHighlightUnchanged(""<html>Visible<style foo=\""bar\"">Not</style>AgainVisible""); assertHighlightUnchanged(""<html>Visible<style foo=\""bar\""/>AgainVisible""); assertHighlightUnchanged(""<html>Visible<style foo=\""bar\""/><head><//blah<style>Not</head>AgainVisible""); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,testHighlightSingleTermHtml,"public void  (){ String str=""<html><style foo=\""bar\"">Not</style>Visible</html>""; assertEquals(str TextUtilities.highlightTermsInHtml(""<html><style foo=\""bar\"">Not</style>Visible</html>"" ""style"")); assertEquals(""<html><style foo=\""bar\"">Not</style><span "" + ""style=\""background-color: "" + TextUtilities.HIGHLIGHT_COLOR_STRING + ""\"">Visi</span>ble</html>"" TextUtilities.highlightTermsInHtml(str ""Visi"")); assertEquals(""<html>Visible<style foo=\""bar\"">Not</style>A<span"" + "" style=\""background-color: "" + TextUtilities.HIGHLIGHT_COLOR_STRING + ""\"">gain</span>Visible"" TextUtilities.highlightTermsInHtml(""<html>Visible<style foo=\""bar\"">Not</style>AgainVisible"" ""gain"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,testHtmlSnippet,"public void  (){ assertEquals("""" TextUtilities.makeSnippetFromHtmlText(null)); assertEquals("""" TextUtilities.makeSnippetFromHtmlText("""")); assertEquals("""" TextUtilities.makeSnippetFromHtmlText("" \n\r\t\r\t\n"")); char c=TextUtilities.NON_BREAKING_SPACE_CHARACTER; assertEquals(""foo"" TextUtilities.makeSnippetFromHtmlText(c + ""\r\n\tfoo \n\t\r"" + c)); assertEquals(""foo bar"" TextUtilities.makeSnippetFromHtmlText(c + ""\r\n\tfoo \r\n bar\n\t\r"" + c)); assertEquals(""Foo-Bar=Bletch"" TextUtilities.makeSnippetFromPlainText(""Foo-----Bar=======Bletch"")); assertEquals("">"" TextUtilities.makeSnippetFromHtmlText(""&nbsp;&gt;"")); assertEquals(""&<> \"""" TextUtilities.makeSnippetFromHtmlText(""&amp;&lt;&gt;&nbsp;&quot;"")); assertEquals(""ABC"" TextUtilities.makeSnippetFromHtmlText(""&#65;&#66;&#67;"")); assertEquals(""ABC"" TextUtilities.makeSnippetFromHtmlText(""&#x41;&#x42;&#x43;"")); assertEquals(""Hi there"" TextUtilities.makeSnippetFromHtmlText(""<html>Hi there</html>"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,testPlainSnippet,"public void  (){ assertEquals("""" TextUtilities.makeSnippetFromPlainText(null)); assertEquals("""" TextUtilities.makeSnippetFromPlainText("""")); assertEquals("""" TextUtilities.makeSnippetFromPlainText("" \n\r\t\r\t\n"")); char c=TextUtilities.NON_BREAKING_SPACE_CHARACTER; assertEquals(""foo"" TextUtilities.makeSnippetFromPlainText(c + ""\r\n\tfoo \n\t\r"" + c)); assertEquals(""foo bar"" TextUtilities.makeSnippetFromPlainText(c + ""\r\n\tfoo \r\n bar\n\t\r"" + c)); assertEquals(""Foo-Bar=Bletch"" TextUtilities.makeSnippetFromPlainText(""Foo-----Bar=======Bletch"")); assertEquals(""&nbsp;&gt;"" TextUtilities.makeSnippetFromPlainText(""&nbsp;&gt;"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,testStripContent,"public void  (){ assertEquals(""Visible"" TextUtilities.makeSnippetFromHtmlText(""<html><style foo=\""bar\"">Not</style>Visible</html>"")); assertEquals(""Visible"" TextUtilities.makeSnippetFromHtmlText(""<html><STYLE foo=\""bar\"">Not</STYLE>Visible</html>"")); assertEquals(""IsVisible"" TextUtilities.makeSnippetFromHtmlText(""<html><nostrip foo=\""bar\"">Is</nostrip>Visible</html>"")); assertEquals(""Visible"" TextUtilities.makeSnippetFromHtmlText(""<html>Visible<style foo=\""bar\"">Not"")); assertEquals(""VisibleAgainVisible"" TextUtilities.makeSnippetFromHtmlText(""<html>Visible<style foo=\""bar\"">Not</style>AgainVisible"")); assertEquals(""VisibleAgainVisible"" TextUtilities.makeSnippetFromHtmlText(""<html>Visible<style foo=\""bar\""/>AgainVisible"")); assertEquals(""VisibleAgainVisible"" TextUtilities.makeSnippetFromHtmlText(""<html>Visible<style foo=\""bar\""/><head><//blah<style>Not</head>AgainVisible"")); } "
C:\Users\User\Desktop\Thesis\platform_packages_apps_email\tests\src\com\android\emailcommon\utility\TextUtilitiesTests.java,testStripHtmlEntityEdgeCases,"public void  (){ int[] skipCount=new int[1]; char c=TextUtilities.stripHtmlEntity(""&"" 0 skipCount); assertEquals(c '&'); assertEquals(0 skipCount[0]); c=TextUtilities.stripHtmlEntity(""&;"" 0 skipCount); assertEquals(c '&'); assertEquals(0 skipCount[0]); c=TextUtilities.stripHtmlEntity(""&nosuch;"" 0 skipCount); assertEquals(c '&'); assertEquals(0 skipCount[0]); c=TextUtilities.stripHtmlEntity(""&nbspandmore;"" 0 skipCount); assertEquals(c '&'); assertEquals(0 skipCount[0]); c=TextUtilities.stripHtmlEntity(""&#ABC"" 0 skipCount); assertEquals(c '&'); assertEquals(0 skipCount[0]); c=TextUtilities.stripHtmlEntity(""&#12B"" 0 skipCount); assertEquals(c '&'); assertEquals(0 skipCount[0]); c=TextUtilities.stripHtmlEntity(""&#xABC"" 0 skipCount); assertEquals(c '&'); assertEquals(0 skipCount[0]); c=TextUtilities.stripHtmlEntity(""&#x19G"" 0 skipCount); assertEquals(c '&'); assertEquals(0 skipCount[0]); } "
